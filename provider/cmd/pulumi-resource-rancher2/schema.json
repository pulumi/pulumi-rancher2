{
    "name": "rancher2",
    "description": "A Pulumi package for creating and managing rancher2 resources.",
    "keywords": [
        "pulumi",
        "rancher2"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`rancher2` Terraform Provider](https://github.com/terraform-providers/terraform-provider-rancher2).",
    "repository": "https://github.com/pulumi/pulumi-rancher2",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "API Key used to authenticate with the rancher server\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_ACCESS_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "The URL to the rancher API\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_URL"
                    ]
                }
            },
            "bootstrap": {
                "type": "boolean",
                "description": "Bootstrap rancher server\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RANCHER_BOOTSTRAP"
                    ]
                }
            },
            "caCerts": {
                "type": "string",
                "description": "CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_CA_CERTS"
                    ]
                }
            },
            "insecure": {
                "type": "boolean",
                "description": "Allow insecure connections to Rancher. Mandatory if self signed tls and not ca_certs provided\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RANCHER_INSECURE"
                    ]
                }
            },
            "retries": {
                "type": "integer",
                "description": "Rancher connection retries\n"
            },
            "secretKey": {
                "type": "string",
                "description": "API secret used to authenticate with the rancher server\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_SECRET_KEY"
                    ]
                }
            },
            "tokenKey": {
                "type": "string",
                "description": "API token used to authenticate with the rancher server\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_TOKEN_KEY"
                    ]
                }
            }
        },
        "defaults": [
            "apiUrl"
        ]
    },
    "types": {
        "rancher2:/CloudCredentialAmazonec2CredentialConfig:CloudCredentialAmazonec2CredentialConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS access key (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "AWS secret key (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "secretKey"
            ]
        },
        "rancher2:/CloudCredentialAzureCredentialConfig:CloudCredentialAzureCredentialConfig": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Azure Service Principal Account ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Azure Service Principal Account password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "subscriptionId"
            ]
        },
        "rancher2:/CloudCredentialDigitaloceanCredentialConfig:CloudCredentialDigitaloceanCredentialConfig": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "DigitalOcean access token (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "rancher2:/CloudCredentialLinodeCredentialConfig:CloudCredentialLinodeCredentialConfig": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Linode API token (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "rancher2:/CloudCredentialOpenstackCredentialConfig:CloudCredentialOpenstackCredentialConfig": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "vSphere password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "rancher2:/CloudCredentialVsphereCredentialConfig:CloudCredentialVsphereCredentialConfig": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "vSphere password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "vSphere username (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vcenter": {
                    "type": "string",
                    "description": "vSphere IP/hostname for vCenter (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vcenterPort": {
                    "type": "string",
                    "description": "vSphere Port for vCenter. Default `443` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "username",
                "vcenter"
            ]
        },
        "rancher2:/ClusterAksConfig:ClusterAksConfig": {
            "properties": {
                "aadServerAppSecret": {
                    "type": "string",
                    "description": "The secret of an Azure Active Directory server application (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadTenantId": {
                    "type": "string",
                    "description": "The ID of an Azure Active Directory tenant (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addClientAppId": {
                    "type": "string",
                    "description": "The ID of an Azure Active Directory client application of type \\\"Native\\\". This application is for user login via kubectl (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addServerAppId": {
                    "type": "string",
                    "description": "The ID of an Azure Active Directory server application of type \\\"Web app/API\\\". This application represents the managed cluster's apiserver (Server application) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminUsername": {
                    "type": "string",
                    "description": "The administrator username to use for Linux hosts. Default `azureuser` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentDnsPrefix": {
                    "type": "string",
                    "description": "DNS prefix to be used to create the FQDN for the agent pool (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentOsDiskSize": {
                    "type": "integer",
                    "description": "GB size to be used to specify the disk for every machine in the agent pool. If you specify 0, it will apply the default according to the \\\"agent vm size\\\" specified. Default `0` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentPoolName": {
                    "type": "string",
                    "description": "Name for the agent pool, upto 12 alphanumeric characters. Default `agentpool0` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentStorageProfile": {
                    "type": "string",
                    "description": "Storage profile specifies what kind of storage used on machine in the agent pool. Chooses from [ManagedDisks StorageAccount]. Default `ManagedDisks` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentVmSize": {
                    "type": "string",
                    "description": "Size of machine in the agent pool. Default `Standard_D1_v2` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authBaseUrl": {
                    "type": "string",
                    "description": "Different authentication API url to use. Default `https://login.microsoftonline.com/` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Different resource management API url to use. Default `https://management.azure.com/` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "description": "Azure client ID to use (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Azure client secret associated with the \\\"client id\\\" (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "count": {
                    "type": "integer",
                    "description": "Number of machines (VMs) in the agent pool. Allowed values must be in the range of 1 to 100 (inclusive). Default `1` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsServiceIp": {
                    "type": "string",
                    "description": "An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes Service address range specified in \\\"service cidr\\\". Default `10.0.0.10` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerBridgeCidr": {
                    "type": "string",
                    "description": "A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes Service address range specified in \\\"service cidr\\\". Default `172.17.0.1/16` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHttpApplicationRouting": {
                    "type": "boolean",
                    "description": "Enable the Kubernetes ingress with automatic public DNS name creation. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableMonitoring": {
                    "type": "boolean",
                    "description": "Turn on Azure Log Analytics monitoring. Uses the Log Analytics \\\"Default\\\" workspace if it exists, else creates one. if using an existing workspace, specifies \\\"log analytics workspace resource id\\\". Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The Kubernetes master version (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "Azure Kubernetes cluster location. Default `eastus` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logAnalyticsWorkspace": {
                    "type": "string",
                    "description": "The name of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses '{resource group}-{subscription id}-{location code}' (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logAnalyticsWorkspaceResourceGroup": {
                    "type": "string",
                    "description": "The resource group of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses the 'Cluster' resource group (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterDnsPrefix": {
                    "type": "string",
                    "description": "DNS prefix to use the Kubernetes cluster control pane (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPods": {
                    "type": "integer",
                    "description": "Maximum number of pods that can run on a node. Default `110` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkPlugin": {
                    "type": "string",
                    "description": "Network plugin used for building Kubernetes network. Chooses from `azure` or `kubenet`. Default `azure` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "Network policy used for building Kubernetes network. Chooses from `calico` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podCidr": {
                    "type": "string",
                    "description": "A CIDR notation IP range from which to assign Kubernetes Pod IPs when \\\"network plugin\\\" is specified in \\\"kubenet\\\". Default `172.244.0.0/16` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The name of the Cluster resource group (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceCidr": {
                    "type": "string",
                    "description": "A CIDR notation IP range from which to assign Kubernetes Service cluster IPs. It must not overlap with any Subnet IP ranges. Default `10.0.0.0/16` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPublicKeyContents": {
                    "type": "string",
                    "description": "Contents of the SSH public key used to authenticate with Linux hosts (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "description": "The name of an existing Azure Virtual Subnet. Composite of agent virtual network subnet ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subscription credentials which uniquely identify Microsoft Azure subscription (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Tags for Kubernetes cluster. For example, foo=bar (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure tenant ID to use (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetwork": {
                    "type": "string",
                    "description": "The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetworkResourceGroup": {
                    "type": "string",
                    "description": "The resource group of an existing Azure Virtual Network. Composite of agent virtual network subnet ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "agentDnsPrefix",
                "clientId",
                "clientSecret",
                "kubernetesVersion",
                "masterDnsPrefix",
                "resourceGroup",
                "sshPublicKeyContents",
                "subnet",
                "subscriptionId",
                "tenantId",
                "virtualNetwork",
                "virtualNetworkResourceGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "agentDnsPrefix",
                        "clientId",
                        "clientSecret",
                        "kubernetesVersion",
                        "masterDnsPrefix",
                        "resourceGroup",
                        "sshPublicKeyContents",
                        "subnet",
                        "subscriptionId",
                        "tag",
                        "tenantId",
                        "virtualNetwork",
                        "virtualNetworkResourceGroup"
                    ]
                }
            }
        },
        "rancher2:/ClusterAlertGroupRecipient:ClusterAlertGroupRecipient": {
            "properties": {
                "defaultRecipient": {
                    "type": "boolean",
                    "description": "Use notifier default recipient, overriding `recipient` argument if set.  Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierId": {
                    "type": "string",
                    "description": "Recipient notifier ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierType": {
                    "type": "string",
                    "description": "Recipient notifier ID. Supported values : `\"pagerduty\" | \"slack\" | \"email\" | \"webhook\" | \"wechat\"` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "description": "Recipient (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "notifierId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "notifierId",
                        "notifierType",
                        "recipient"
                    ]
                }
            }
        },
        "rancher2:/ClusterAlertRuleEventRule:ClusterAlertRuleEventRule": {
            "properties": {
                "eventType": {
                    "type": "string",
                    "description": "Event type. Supported values : `\"Warning\" | \"Normal\"`. Default: `Warning` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceKind": {
                    "type": "string",
                    "description": "Resource kind. Supported values : `\"DaemonSet\" | \"Deployment\" | \"Node\" | \"Pod\" | \"StatefulSet\"` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resourceKind"
            ]
        },
        "rancher2:/ClusterAlertRuleMetricRule:ClusterAlertRuleMetricRule": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "description": "Metric rule comparison. Supported values : `\"equal\" | \"greater-or-equal\" | \"greater-than\" | \"less-or-equal\" | \"less-than\" | \"not-equal\" | \"has-value\"`. Default: `equal`  (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Metric rule description (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "string",
                    "description": "Metric rule duration (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expression": {
                    "type": "string",
                    "description": "Metric rule expression (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdValue": {
                    "type": "number",
                    "description": "Metric rule threshold value (float64)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "expression",
                "thresholdValue"
            ]
        },
        "rancher2:/ClusterAlertRuleNodeRule:ClusterAlertRuleNodeRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "System service rule condition. Supported values : `\"controller-manager\" | \"etcd\" | \"scheduler\"`. Default: `scheduler` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpuThreshold": {
                    "type": "integer",
                    "description": "Node rule cpu threshold. Default: `70` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memThreshold": {
                    "type": "integer",
                    "description": "Node rule mem threshold. Default: `70` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "Node ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node rule selector (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterAlertRuleSystemServiceRule:ClusterAlertRuleSystemServiceRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "System service rule condition. Supported values : `\"controller-manager\" | \"etcd\" | \"scheduler\"`. Default: `scheduler` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterAlterGroupRecipient:ClusterAlterGroupRecipient": {
            "properties": {
                "defaultRecipient": {
                    "type": "boolean",
                    "description": "Use notifier default recipient, overriding `recipient` argument if set.  Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierId": {
                    "type": "string",
                    "description": "Recipient notifier ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierType": {
                    "type": "string",
                    "description": "Recipient notifier ID. Supported values : `\"pagerduty\" | \"slack\" | \"email\" | \"webhook\" | \"wechat\"` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "description": "Recipient (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "notifierId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "notifierId",
                        "notifierType",
                        "recipient"
                    ]
                }
            }
        },
        "rancher2:/ClusterAlterRuleEventRule:ClusterAlterRuleEventRule": {
            "properties": {
                "eventType": {
                    "type": "string",
                    "description": "Event type. Supported values : `\"Warning\" | \"Normal\"`. Default: `Warning` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceKind": {
                    "type": "string",
                    "description": "Resource kind. Supported values : `\"DaemonSet\" | \"Deployment\" | \"Node\" | \"Pod\" | \"StatefulSet\"` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resourceKind"
            ]
        },
        "rancher2:/ClusterAlterRuleMetricRule:ClusterAlterRuleMetricRule": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "description": "Metric rule comparison. Supported values : `\"equal\" | \"greater-or-equal\" | \"greater-than\" | \"less-or-equal\" | \"less-than\" | \"not-equal\" | \"has-value\"`. Default: `equal`  (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Metric rule description (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "string",
                    "description": "Metric rule duration (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expression": {
                    "type": "string",
                    "description": "Metric rule expression (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdValue": {
                    "type": "number",
                    "description": "Metric rule threshold value (float64)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "expression",
                "thresholdValue"
            ]
        },
        "rancher2:/ClusterAlterRuleNodeRule:ClusterAlterRuleNodeRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "System service rule condition. Supported values : `\"controller-manager\" | \"etcd\" | \"scheduler\"`. Default: `scheduler` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpuThreshold": {
                    "type": "integer",
                    "description": "Node rule cpu threshold. Default: `70` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memThreshold": {
                    "type": "integer",
                    "description": "Node rule mem threshold. Default: `70` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "Node ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Node rule selector (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterAlterRuleSystemServiceRule:ClusterAlterRuleSystemServiceRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "System service rule condition. Supported values : `\"controller-manager\" | \"etcd\" | \"scheduler\"`. Default: `scheduler` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterClusterAuthEndpoint:ClusterClusterAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string",
                    "description": "CA certs for the authorized cluster endpoint (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable scheduled cluster scan. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "FQDN for the authorized cluster endpoint (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterClusterMonitoringInput:ClusterClusterMonitoringInput": {
            "properties": {
                "answers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value answers for monitor input (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "rancher-monitoring chart version (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterClusterRegistrationToken:ClusterClusterRegistrationToken": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for cluster registration token object (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Command to execute in a imported k8s cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureCommand": {
                    "type": "string",
                    "description": "Insecure command to execute in a imported k8s cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for cluster registration token object (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manifestUrl": {
                    "type": "string",
                    "description": "K8s manifest url to execute with `kubectl` to import an existing k8s cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of cluster registration token (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeCommand": {
                    "type": "string",
                    "description": "Node command to execute in linux nodes for custom k8s cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "Token for cluster registration token object (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowsNodeCommand": {
                    "type": "string",
                    "description": "Node command to execute in windows nodes for custom k8s cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "clusterId",
                        "command",
                        "id",
                        "insecureCommand",
                        "labels",
                        "manifestUrl",
                        "name",
                        "nodeCommand",
                        "token",
                        "windowsNodeCommand"
                    ]
                }
            }
        },
        "rancher2:/ClusterClusterTemplateAnswers:ClusterClusterTemplateAnswers": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID to apply answer (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/values for answer (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterId",
                        "projectId",
                        "values"
                    ]
                }
            }
        },
        "rancher2:/ClusterClusterTemplateQuestion:ClusterClusterTemplateQuestion": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "Default variable value (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "description": "Required variable. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Variable type. `boolean`, `int` and `string` are allowed. Default `string` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variable": {
                    "type": "string",
                    "description": "Variable name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "default",
                "variable"
            ]
        },
        "rancher2:/ClusterEksConfig:ClusterEksConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The AWS Client ID to use (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ami": {
                    "type": "string",
                    "description": "AMI ID to use for the worker nodes instead of the default (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associateWorkerNodePublicIp": {
                    "type": "boolean",
                    "description": "Associate public ip EKS worker nodes. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredNodes": {
                    "type": "integer",
                    "description": "The desired number of worker nodes. Just for Rancher v2.3.x and above. Default `3` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "The type of machine to use for worker nodes. Default `t2.medium` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairName": {
                    "type": "string",
                    "description": "Allow user to specify key name to use. Just for Rancher v2.2.7 and above (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The Kubernetes master version (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumNodes": {
                    "type": "integer",
                    "description": "The maximum number of worker nodes. Default `3` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minimumNodes": {
                    "type": "integer",
                    "description": "The minimum number of worker nodes. Default `1` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeVolumeSize": {
                    "type": "integer",
                    "description": "The volume size for each node. Default `20` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "GKE cluster region. Conflicts with `zone` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "The AWS Client Secret associated with the Client ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups to use for the cluster. If it's not specified Rancher will create a new security group (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceRole": {
                    "type": "string",
                    "description": "The service role to use to perform the cluster operations in AWS. If it's not specified Rancher will create a new service role (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sessionToken": {
                    "type": "string",
                    "description": "A session token to use with the client key and secret if applicable (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subnets in the virtual network to use. If it's not specified Rancher will create 3 news subnets (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userData": {
                    "type": "string",
                    "description": "Pass user-data to the nodes to perform automated configuration tasks (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetwork": {
                    "type": "string",
                    "description": "The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "kubernetesVersion",
                "secretKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessKey",
                        "kubernetesVersion",
                        "secretKey",
                        "userData"
                    ]
                }
            }
        },
        "rancher2:/ClusterGkeConfig:ClusterGkeConfig": {
            "properties": {
                "clusterIpv4Cidr": {
                    "type": "string",
                    "description": "The IP address range of the container pods (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "credential": {
                    "type": "string",
                    "description": "The contents of the GC credential file (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of this cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSizeGb": {
                    "type": "integer",
                    "description": "Size of the disk attached to each node. Default `100` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskType": {
                    "type": "string",
                    "description": "Type of the disk attached to each node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAlphaFeature": {
                    "type": "boolean",
                    "description": "To enable Kubernetes alpha feature. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAutoRepair": {
                    "type": "boolean",
                    "description": "Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAutoUpgrade": {
                    "type": "boolean",
                    "description": "Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHorizontalPodAutoscaling": {
                    "type": "boolean",
                    "description": "Enable horizontal pod autoscaling for the cluster. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHttpLoadBalancing": {
                    "type": "boolean",
                    "description": "Enable HTTP load balancing on GKE cluster. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableKubernetesDashboard": {
                    "type": "boolean",
                    "description": "Whether to enable the Kubernetes dashboard. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableLegacyAbac": {
                    "type": "boolean",
                    "description": "Whether to enable legacy abac on the cluster. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableMasterAuthorizedNetwork": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableNetworkPolicyConfig": {
                    "type": "boolean",
                    "description": "Enable network policy config for the cluster. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableNodepoolAutoscaling": {
                    "type": "boolean",
                    "description": "Enable nodepool autoscaling. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enablePrivateEndpoint": {
                    "type": "boolean",
                    "description": "Whether the master's internal IP address is used as the cluster endpoint. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enablePrivateNodes": {
                    "type": "boolean",
                    "description": "Whether nodes have internal IP address only. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableStackdriverLogging": {
                    "type": "boolean",
                    "description": "Enable stackdriver monitoring. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableStackdriverMonitoring": {
                    "type": "boolean",
                    "description": "Enable stackdriver monitoring on GKE cluster (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageType": {
                    "type": "string",
                    "description": "The image to use for the worker nodes (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyClusterIpv4CidrBlock": {
                    "type": "string",
                    "description": "The IP address range for the cluster pod IPs (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyClusterSecondaryRangeName": {
                    "type": "string",
                    "description": "The name of the secondary range to be used for the cluster CIDR block (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyCreateSubnetwork": {
                    "type": "boolean",
                    "description": "Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyNodeIpv4CidrBlock": {
                    "type": "string",
                    "description": "The IP address range of the instance IPs in this cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyServicesIpv4CidrBlock": {
                    "type": "string",
                    "description": "The IP address range of the services IPs in this cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyServicesSecondaryRangeName": {
                    "type": "string",
                    "description": "The name of the secondary range to be used for the services CIDR block (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicySubnetworkName": {
                    "type": "string",
                    "description": "A custom subnetwork name to be used if createSubnetwork is true (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueClientCertificate": {
                    "type": "boolean",
                    "description": "Issue a client certificate. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesDashboard": {
                    "type": "boolean",
                    "description": "Enable the Kubernetes dashboard. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for cluster registration token object (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSsdCount": {
                    "type": "integer",
                    "description": "The number of local SSD disks to be attached to the node. Default `0` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Locations for GKE cluster (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "machineType": {
                    "type": "string",
                    "description": "Machine type for GKE cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindow": {
                    "type": "string",
                    "description": "Maintenance window for GKE cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterAuthorizedNetworkCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define up to 10 external networks that could access Kubernetes master through HTTPS (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterIpv4CidrBlock": {
                    "type": "string",
                    "description": "The IP range in CIDR notation to use for the hosted master network (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterVersion": {
                    "type": "string",
                    "description": "Master version for GKE cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNodeCount": {
                    "type": "integer",
                    "description": "Maximum number of nodes in the NodePool. Must be \u003e= minNodeCount. There has to enough quota to scale up the cluster. Default `0` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minNodeCount": {
                    "type": "integer",
                    "description": "Minimmum number of nodes in the NodePool. Must be \u003e= 1 and \u003c= maxNodeCount. Default `0` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "type": "string",
                    "description": "Network for GKE cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeCount": {
                    "type": "integer",
                    "description": "Node count for GKE cluster. Default `3` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePool": {
                    "type": "string",
                    "description": "The ID of the cluster node pool (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeVersion": {
                    "type": "string",
                    "description": "Node version for GKE cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of Google API scopes to be made available on all of the node VMs under the default service account (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preemptible": {
                    "type": "boolean",
                    "description": "Whether the nodes are created as preemptible VM instances. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID to apply answer (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "GKE cluster region. Conflicts with `zone` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The map of Kubernetes labels to be applied to each cluster (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccount": {
                    "type": "string",
                    "description": "The Google Cloud Platform Service Account to be used by the node VMs (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subNetwork": {
                    "type": "string",
                    "description": "Subnetwork for GKE cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kubernetes taints to be applied to each node (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useIpAliases": {
                    "type": "boolean",
                    "description": "Whether alias IPs will be used for pod IPs in the cluster. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "GKE cluster zone. Conflicts with `region` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterIpv4Cidr",
                "credential",
                "diskType",
                "imageType",
                "ipPolicyClusterIpv4CidrBlock",
                "ipPolicyClusterSecondaryRangeName",
                "ipPolicyNodeIpv4CidrBlock",
                "ipPolicyServicesIpv4CidrBlock",
                "ipPolicyServicesSecondaryRangeName",
                "ipPolicySubnetworkName",
                "locations",
                "machineType",
                "maintenanceWindow",
                "masterIpv4CidrBlock",
                "masterVersion",
                "network",
                "nodePool",
                "nodeVersion",
                "oauthScopes",
                "projectId",
                "serviceAccount",
                "subNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterIpv4Cidr",
                        "credential",
                        "diskType",
                        "imageType",
                        "ipPolicyClusterIpv4CidrBlock",
                        "ipPolicyClusterSecondaryRangeName",
                        "ipPolicyNodeIpv4CidrBlock",
                        "ipPolicyServicesIpv4CidrBlock",
                        "ipPolicyServicesSecondaryRangeName",
                        "ipPolicySubnetworkName",
                        "labels",
                        "locations",
                        "machineType",
                        "maintenanceWindow",
                        "masterIpv4CidrBlock",
                        "masterVersion",
                        "network",
                        "nodePool",
                        "nodeVersion",
                        "oauthScopes",
                        "projectId",
                        "resourceLabels",
                        "serviceAccount",
                        "subNetwork"
                    ]
                }
            }
        },
        "rancher2:/ClusterK3sConfig:ClusterK3sConfig": {
            "properties": {
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:/ClusterK3sConfigUpgradeStrategy:ClusterK3sConfigUpgradeStrategy",
                    "description": "K3S upgrade strategy (List maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "rancher-monitoring chart version (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "upgradeStrategy",
                        "version"
                    ]
                }
            }
        },
        "rancher2:/ClusterK3sConfigUpgradeStrategy:ClusterK3sConfigUpgradeStrategy": {
            "properties": {
                "drainServerNodes": {
                    "type": "boolean",
                    "description": "Drain server nodes. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drainWorkerNodes": {
                    "type": "boolean",
                    "description": "Drain worker nodes. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverConcurrency": {
                    "type": "integer",
                    "description": "Server concurrency. Default: `1` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workerConcurrency": {
                    "type": "integer",
                    "description": "Worker concurrency. Default: `1` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterLoggingCustomTargetConfig:ClusterLoggingCustomTargetConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "content": {
                    "type": "string",
                    "description": "Custom target config content (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "content"
            ]
        },
        "rancher2:/ClusterLoggingElasticsearchConfig:ClusterLoggingElasticsearchConfig": {
            "properties": {
                "authPassword": {
                    "type": "string",
                    "description": "User password for the elascticsearch service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUsername": {
                    "type": "string",
                    "description": "Username for the elascticsearch service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPass": {
                    "type": "string",
                    "description": "SSL client key password for the splunk service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Date format for the elascticsearch logs. Default: `YYYY-MM-DD` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexPrefix": {
                    "type": "string",
                    "description": "Index prefix for the elascticsearch logs. Default: `local` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "SSL verify for the syslog service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVersion": {
                    "type": "string",
                    "description": "SSL version for the elascticsearch service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpoint",
                        "sslVerify"
                    ]
                }
            }
        },
        "rancher2:/ClusterLoggingFluentdConfig:ClusterLoggingFluentdConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "Compress data for the fluentd service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableTls": {
                    "type": "boolean",
                    "description": "Enable TLS for the fluentd service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fluentServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterLoggingFluentdConfigFluentServer:ClusterLoggingFluentdConfigFluentServer"
                    },
                    "description": "Servers for the fluentd service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fluentServers"
            ]
        },
        "rancher2:/ClusterLoggingFluentdConfigFluentServer:ClusterLoggingFluentdConfigFluentServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the fluentd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "User password of the fluentd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedKey": {
                    "type": "string",
                    "description": "Shared key of the fluentd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standby": {
                    "type": "boolean",
                    "description": "Standby server of the fluentd service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username of the fluentd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "Weight of the fluentd server (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ]
        },
        "rancher2:/ClusterLoggingKafkaConfig:ClusterLoggingKafkaConfig": {
            "properties": {
                "brokerEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Kafka endpoints for kafka service. Conflicts with `zookeeper_endpoint` (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topic": {
                    "type": "string",
                    "description": "Topic to publish on the kafka service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zookeeperEndpoint": {
                    "type": "string",
                    "description": "Zookeeper endpoint for kafka service. Conflicts with `broker_endpoints` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "topic"
            ]
        },
        "rancher2:/ClusterLoggingSplunkConfig:ClusterLoggingSplunkConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPass": {
                    "type": "string",
                    "description": "SSL client key password for the splunk service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "index": {
                    "type": "string",
                    "description": "Index prefix for the splunk logs (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "Date format for the splunk logs (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "SSL verify for the syslog service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "Token for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpoint",
                        "sslVerify",
                        "token"
                    ]
                }
            }
        },
        "rancher2:/ClusterLoggingSyslogConfig:ClusterLoggingSyslogConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "program": {
                    "type": "string",
                    "description": "Program for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for the syslog service. `tcp` and `udp` are supported. Default: `udp` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "description": "Date format for the syslog logs. `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info` and `debug` are supported. Default: `notice` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "SSL verify for the syslog service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "Token for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpoint",
                        "sslVerify"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfig:ClusterRkeConfig": {
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "description": "Duration in seconds of addon job (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addons": {
                    "type": "string",
                    "description": "Addons descripton to deploy on RKE cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Addons yaml manifests to deploy on RKE cluster (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authentication": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigAuthentication:ClusterRkeConfigAuthentication",
                    "description": "Kubernetes cluster authentication (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorization": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigAuthorization:ClusterRkeConfigAuthorization",
                    "description": "Kubernetes cluster authorization (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bastionHost": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigBastionHost:ClusterRkeConfigBastionHost",
                    "description": "RKE bastion host (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProvider:ClusterRkeConfigCloudProvider",
                    "description": "RKE options for Calico network provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dns": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigDns:ClusterRkeConfigDns",
                    "description": "RKE dns add-on. Just for Rancher v2.2.x (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "description": "Ignore docker version. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingress": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigIngress:ClusterRkeConfigIngress",
                    "description": "Kubernetes ingress configuration (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The Kubernetes master version (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoring": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigMonitoring:ClusterRkeConfigMonitoring",
                    "description": "Kubernetes cluster monitoring (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigNetwork:ClusterRkeConfigNetwork",
                    "description": "Network for GKE cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterRkeConfigNode:ClusterRkeConfigNode"
                    },
                    "description": "RKE cluster nodes (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixPath": {
                    "type": "string",
                    "description": "Prefix to customize Kubernetes path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterRkeConfigPrivateRegistry:ClusterRkeConfigPrivateRegistry"
                    },
                    "description": "private registries for docker images (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServices:ClusterRkeConfigServices",
                    "description": "Kubernetes cluster services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "Use ssh agent auth. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "Cluster level SSH certificate path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "Node SSH private key path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigUpgradeStrategy:ClusterRkeConfigUpgradeStrategy",
                    "description": "K3S upgrade strategy (List maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addonJobTimeout",
                        "authentication",
                        "authorization",
                        "bastionHost",
                        "cloudProvider",
                        "dns",
                        "ingress",
                        "kubernetesVersion",
                        "monitoring",
                        "network",
                        "prefixPath",
                        "services",
                        "sshCertPath",
                        "sshKeyPath",
                        "upgradeStrategy"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigAuthentication:ClusterRkeConfigAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "RKE sans for authentication ([]string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "Monitoring deployment update strategy (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sans",
                        "strategy"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigAuthorization:ClusterRkeConfigAuthorization": {
            "properties": {
                "mode": {
                    "type": "string",
                    "description": "RKE mode for authorization. `rbac` and `none` modes are available. Default `rbac` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "RKE options for network (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigBastionHost:ClusterRkeConfigBastionHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port for node. Default `22` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "Use ssh agent auth. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "description": "Node SSH private key (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "Node SSH private key path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "sshKey",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProvider:ClusterRkeConfigCloudProvider": {
            "properties": {
                "awsCloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderAwsCloudProvider:ClusterRkeConfigCloudProviderAwsCloudProvider",
                    "description": "RKE AWS Cloud Provider config for Cloud Provider [rke-aws-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/) (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderAzureCloudProvider:ClusterRkeConfigCloudProviderAzureCloudProvider",
                    "description": "RKE Azure Cloud Provider config for Cloud Provider [rke-azure-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/azure/) (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCloudProvider": {
                    "type": "string",
                    "description": "RKE Custom Cloud Provider config for Cloud Provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of cluster registration token (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProvider:ClusterRkeConfigCloudProviderOpenstackCloudProvider",
                    "description": "RKE Openstack Cloud Provider config for Cloud Provider [rke-openstack-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/openstack/) (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProvider:ClusterRkeConfigCloudProviderVsphereCloudProvider",
                    "description": "RKE Vsphere Cloud Provider config for Cloud Provider [rke-vsphere-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/vsphere/) Extra argument `name` is required on `virtual_center` configuration. (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customCloudProvider",
                        "name"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderAwsCloudProvider:ClusterRkeConfigCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderAwsCloudProviderGlobal:ClusterRkeConfigCloudProviderAwsCloudProviderGlobal",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride:ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride"
                    },
                    "description": "(list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "global"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderAwsCloudProviderGlobal:ClusterRkeConfigCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean",
                    "description": "Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableStrictZoneCheck": {
                    "type": "boolean",
                    "description": "Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elbSecurityGroup": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterTag": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "GKE cluster zone. Conflicts with `region` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "elbSecurityGroup",
                        "kubernetesClusterId",
                        "kubernetesClusterTag",
                        "roleArn",
                        "routeTableId",
                        "subnetId",
                        "vpc",
                        "zone"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride:ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "region": {
                    "type": "string",
                    "description": "GKE cluster region. Conflicts with `zone` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingMethod": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingRegion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Registry URL (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "service"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "region",
                        "service",
                        "signingMethod",
                        "signingName",
                        "signingRegion",
                        "url"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderAzureCloudProvider:ClusterRkeConfigCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientCertPath": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientSecret": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloud": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoff": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimit": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerSku": {
                    "type": "string",
                    "description": "Allowed values: `basic` (default) `standard` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "Azure Kubernetes cluster location. Default `eastus` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryAvailabilitySetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryScaleSetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The name of the Cluster resource group (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Subscription credentials which uniquely identify Microsoft Azure subscription (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure tenant ID to use (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useInstanceMetadata": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmType": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetResourceGroup": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aadClientId",
                "aadClientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aadClientCertPassword",
                        "aadClientCertPath",
                        "aadClientId",
                        "aadClientSecret",
                        "cloud",
                        "cloudProviderBackoff",
                        "cloudProviderBackoffDuration",
                        "cloudProviderBackoffExponent",
                        "cloudProviderBackoffJitter",
                        "cloudProviderBackoffRetries",
                        "cloudProviderRateLimit",
                        "cloudProviderRateLimitBucket",
                        "cloudProviderRateLimitQps",
                        "location",
                        "maximumLoadBalancerRuleCount",
                        "primaryAvailabilitySetName",
                        "primaryScaleSetName",
                        "resourceGroup",
                        "routeTableName",
                        "securityGroupName",
                        "subnetName",
                        "subscriptionId",
                        "tenantId",
                        "useInstanceMetadata",
                        "useManagedIdentityExtension",
                        "vmType",
                        "vnetName",
                        "vnetResourceGroup"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProvider:ClusterRkeConfigCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal:ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancer": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata:ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute:ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockStorage",
                        "global",
                        "loadBalancer",
                        "metadata",
                        "route"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreVolumeAz": {
                    "type": "boolean",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustDevicePath": {
                    "type": "boolean",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bsVersion",
                        "ignoreVolumeAz",
                        "trustDevicePath"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal:ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "Required if `domain_name` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "description": "Required if `domain_id` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "GKE cluster region. Conflicts with `zone` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure tenant ID to use (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantName": {
                    "type": "string",
                    "description": "Required if `tenant_id` not provided. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authUrl",
                        "caFile",
                        "domainId",
                        "domainName",
                        "password",
                        "region",
                        "tenantId",
                        "tenantName",
                        "trustId",
                        "username"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "floatingNetworkId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbMethod": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbProvider": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbVersion": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manageSecurityGroups": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelay": {
                    "type": "string",
                    "description": "Default `60s` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorMaxRetries": {
                    "type": "integer",
                    "description": "Default 5 (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorTimeout": {
                    "type": "string",
                    "description": "Default `30s` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useOctavia": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createMonitor",
                        "floatingNetworkId",
                        "lbMethod",
                        "lbProvider",
                        "lbVersion",
                        "manageSecurityGroups",
                        "subnetId",
                        "useOctavia"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata:ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchOrder": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "requestTimeout",
                        "searchOrder"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute:ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "routerId"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProvider:ClusterRkeConfigCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderDisk:ClusterRkeConfigCloudProviderVsphereCloudProviderDisk",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal:ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork:ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork",
                    "description": "Network for GKE cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter"
                    },
                    "description": "(List)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workspace": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace:ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disk",
                        "global",
                        "network",
                        "virtualCenters",
                        "workspace"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderDisk:ClusterRkeConfigCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scsiControllerType"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal:ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureFlag": {
                    "type": "boolean",
                    "description": "(bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port for node. Default `22` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters",
                        "insecureFlag",
                        "password",
                        "port",
                        "soapRoundtripCount",
                        "user"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork:ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "publicNetwork"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of cluster registration token (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port for node. Default `22` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters",
                        "name",
                        "password",
                        "port",
                        "soapRoundtripCount",
                        "user"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace:ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultDatastore": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcepoolPath": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "folder",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenter",
                        "defaultDatastore",
                        "folder",
                        "resourcepoolPath",
                        "server"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigDns:ClusterRkeConfigDns": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "RKE monitoring node selector (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodelocal": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigDnsNodelocal:ClusterRkeConfigDnsNodelocal",
                    "description": "Nodelocal dns config  (list Maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "RKE monitoring provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS add-on reverse cidr  (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS add-on upstream nameservers  (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeSelector",
                        "reverseCidrs",
                        "upstreamNameservers"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigDnsNodelocal:ClusterRkeConfigDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "Nodelocal dns ip address (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "RKE monitoring node selector (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterRkeConfigIngress:ClusterRkeConfigIngress": {
            "properties": {
                "dnsPolicy": {
                    "type": "string",
                    "description": "Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "RKE monitoring node selector (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "RKE options for network (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "RKE monitoring provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsPolicy",
                        "extraArgs",
                        "nodeSelector",
                        "options",
                        "provider"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigMonitoring:ClusterRkeConfigMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "RKE monitoring node selector (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "RKE options for network (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "description": "RKE monitoring provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicas": {
                    "type": "integer",
                    "description": "RKE monitoring replicas (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigMonitoringUpdateStrategy:ClusterRkeConfigMonitoringUpdateStrategy",
                    "description": "RKE monitoring update strategy (list Maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options",
                        "provider",
                        "replicas"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigMonitoringUpdateStrategy:ClusterRkeConfigMonitoringUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigMonitoringUpdateStrategyRollingUpdate:ClusterRkeConfigMonitoringUpdateStrategyRollingUpdate",
                    "description": "Monitoring deployment rolling update (list Maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "Monitoring deployment update strategy (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterRkeConfigMonitoringUpdateStrategyRollingUpdate:ClusterRkeConfigMonitoringUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "Monitoring deployment rolling update max surge. Default: `1` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Monitoring deployment rolling update max unavailable. Default: `1` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterRkeConfigNetwork:ClusterRkeConfigNetwork": {
            "properties": {
                "calicoNetworkProvider": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigNetworkCalicoNetworkProvider:ClusterRkeConfigNetworkCalicoNetworkProvider",
                    "description": "Calico provider config for RKE network (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigNetworkCanalNetworkProvider:ClusterRkeConfigNetworkCanalNetworkProvider",
                    "description": "Canal provider config for RKE network (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigNetworkFlannelNetworkProvider:ClusterRkeConfigNetworkFlannelNetworkProvider",
                    "description": "Flannel provider config for RKE network (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mtu": {
                    "type": "integer",
                    "description": "Network provider MTU. Default `0` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "RKE options for network (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugin": {
                    "type": "string",
                    "description": "Plugin for RKE network. `canal` (default), `flannel`, `calico`, `none` and `weave` are supported. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigNetworkWeaveNetworkProvider:ClusterRkeConfigNetworkWeaveNetworkProvider",
                    "description": "Weave provider config for RKE network (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options",
                        "plugin"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigNetworkCalicoNetworkProvider:ClusterRkeConfigNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "RKE options for Calico network provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cloudProvider"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigNetworkCanalNetworkProvider:ClusterRkeConfigNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "description": "Iface config Flannel network provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigNetworkFlannelNetworkProvider:ClusterRkeConfigNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "description": "Iface config Flannel network provider (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigNetworkWeaveNetworkProvider:ClusterRkeConfigNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "rancher2:/ClusterRkeConfigNode:ClusterRkeConfigNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerSocket": {
                    "type": "string",
                    "description": "Docker socket for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnameOverride": {
                    "type": "string",
                    "description": "Hostname override for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalAddress": {
                    "type": "string",
                    "description": "Internal ip for node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for cluster registration token object (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "description": "Id for the node (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port for node. Default `22` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles for the node. `controlplane`, `etcd` and `worker` are supported. (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "Use ssh agent auth. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "description": "Node SSH private key (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "Node SSH private key path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "roles",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "dockerSocket",
                        "roles",
                        "sshKey",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigPrivateRegistry:ClusterRkeConfigPrivateRegistry": {
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Set as default registry. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Registry URL (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "rancher2:/ClusterRkeConfigServices:ClusterRkeConfigServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesEtcd:ClusterRkeConfigServicesEtcd",
                    "description": "Etcd options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeApi": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesKubeApi:ClusterRkeConfigServicesKubeApi",
                    "description": "Kube API options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeController": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesKubeController:ClusterRkeConfigServicesKubeController",
                    "description": "Kube Controller options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubelet": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesKubelet:ClusterRkeConfigServicesKubelet",
                    "description": "Kubelet options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeproxy": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesKubeproxy:ClusterRkeConfigServicesKubeproxy",
                    "description": "Kubeproxy options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduler": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesScheduler:ClusterRkeConfigServicesScheduler",
                    "description": "Scheduler options for RKE services (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "etcd",
                        "kubeApi",
                        "kubeController",
                        "kubelet",
                        "kubeproxy",
                        "scheduler"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigServicesEtcd:ClusterRkeConfigServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesEtcdBackupConfig:ClusterRkeConfigServicesEtcdBackupConfig",
                    "description": "Backup options for etcd service. Just for Rancher v2.2.x (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCert": {
                    "type": "string",
                    "description": "TLS CA certificate for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cert": {
                    "type": "string",
                    "description": "TLS certificate for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creation": {
                    "type": "string",
                    "description": "Creation option for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External urls for etcd service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gid": {
                    "type": "integer",
                    "description": "Etcd service GID. Default: `0`. For Rancher v2.3.x or above (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "TLS key for etcd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "(Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "string",
                    "description": "Retention for etcd backup. Default `6` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshot": {
                    "type": "boolean",
                    "description": "Snapshot option for etcd service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "integer",
                    "description": "Etcd service UID. Default: `0`. For Rancher v2.3.x or above (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupConfig",
                        "caCert",
                        "cert",
                        "creation",
                        "extraArgs",
                        "image",
                        "key",
                        "path",
                        "retention",
                        "snapshot"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigServicesEtcdBackupConfig:ClusterRkeConfigServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable scheduled cluster scan. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalHours": {
                    "type": "integer",
                    "description": "Interval hours for etcd backup. Default `12` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention for etcd backup. Default `6` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig:ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig",
                    "description": "S3 config options for etcd backup (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "safeTimestamp": {
                    "type": "boolean",
                    "description": "Safe timestamp for etcd backup. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig:ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The AWS Client ID to use (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketName": {
                    "type": "string",
                    "description": "Bucket name for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCa": {
                    "type": "string",
                    "description": "Base64 encoded custom CA for S3 service. Use filebase64(\u003cFILE\u003e) for encoding file. Available from Rancher v2.2.5 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "GKE cluster region. Conflicts with `zone` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "The AWS Client Secret associated with the Client ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ]
        },
        "rancher2:/ClusterRkeConfigServicesKubeApi:ClusterRkeConfigServicesKubeApi": {
            "properties": {
                "admissionConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Admission configuration (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alwaysPullImages": {
                    "type": "boolean",
                    "description": "Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auditLog": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesKubeApiAuditLog:ClusterRkeConfigServicesKubeApiAuditLog",
                    "description": "K8s audit log configuration. (list maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventRateLimit": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesKubeApiEventRateLimit:ClusterRkeConfigServicesKubeApiEventRateLimit",
                    "description": "K8s event rate limit configuration. (list maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podSecurityPolicy": {
                    "type": "boolean",
                    "description": "Pod Security Policy option for kube API service. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig:ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig",
                    "description": "[Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Service Cluster ip Range option for kube controller service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceNodePortRange": {
                    "type": "string",
                    "description": "Service Node Port Range option for kube API service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image",
                        "serviceClusterIpRange",
                        "serviceNodePortRange"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigServicesKubeApiAuditLog:ClusterRkeConfigServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigServicesKubeApiAuditLogConfiguration:ClusterRkeConfigServicesKubeApiAuditLogConfiguration",
                    "description": "Event rate limit configuration. (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable scheduled cluster scan. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigServicesKubeApiAuditLogConfiguration:ClusterRkeConfigServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Audit log format. Default: 'json' (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAge": {
                    "type": "integer",
                    "description": "Audit log max age. Default: `30` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBackup": {
                    "type": "integer",
                    "description": "Audit log max backup. Default: `10` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "description": "Audit log max size. Default: `100` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "(Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "description": "Audit policy yaml encoded definition. `apiVersion` and `kind: Policy\\nrules:\"` fields are required in the yaml. Ex. `\"apiVersion: audit.k8s.io/v1\\nkind: Policy\\nrules:\\n- level: RequestResponse\\n  resources:\\n  - resources:\\n    - pods\\n\"` [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "policy"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigServicesKubeApiEventRateLimit:ClusterRkeConfigServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Event rate limit configuration. (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable scheduled cluster scan. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig:ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Secrets encryption configuration. (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable scheduled cluster scan. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterRkeConfigServicesKubeController:ClusterRkeConfigServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string",
                    "description": "Cluster CIDR option for kube controller service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Service Cluster ip Range option for kube controller service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCidr",
                        "extraArgs",
                        "image",
                        "serviceClusterIpRange"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigServicesKubelet:ClusterRkeConfigServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string",
                    "description": "Cluster DNS Server option for kubelet service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "Cluster Domain option for kubelet service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failSwapOn": {
                    "type": "boolean",
                    "description": "Enable or disable failing when swap on is not supported (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "generateServingCertificate": {
                    "type": "boolean",
                    "description": "[Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infraContainerImage": {
                    "type": "string",
                    "description": "Infra container image for kubelet service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterDnsServer",
                        "clusterDomain",
                        "extraArgs",
                        "failSwapOn",
                        "image",
                        "infraContainerImage"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigServicesKubeproxy:ClusterRkeConfigServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigServicesScheduler:ClusterRkeConfigServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Extra arguments for scheduler service (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigUpgradeStrategy:ClusterRkeConfigUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean",
                    "description": "RKE drain nodes. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drainInput": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfigUpgradeStrategyDrainInput:ClusterRkeConfigUpgradeStrategyDrainInput",
                    "description": "RKE drain node input (list Maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableControlplane": {
                    "type": "string",
                    "description": "RKE max unavailable controlplane nodes. Default: `1` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableWorker": {
                    "type": "string",
                    "description": "RKE max unavailable worker nodes. Default: `10%` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "drainInput"
                    ]
                }
            }
        },
        "rancher2:/ClusterRkeConfigUpgradeStrategyDrainInput:ClusterRkeConfigUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean",
                    "description": "Delete RKE node local data. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "force": {
                    "type": "boolean",
                    "description": "Force RKE node drain. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gracePeriod": {
                    "type": "integer",
                    "description": "RKE node drain grace period. Default: `-1` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "description": "Ignore RKE daemon sets. Default: `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "RKE node drain timeout. Default: `60` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterScheduledClusterScan:ClusterScheduledClusterScan": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable scheduled cluster scan. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scanConfig": {
                    "$ref": "#/types/rancher2:/ClusterScheduledClusterScanScanConfig:ClusterScheduledClusterScanScanConfig",
                    "description": "Cluster scan config (List maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleConfig": {
                    "$ref": "#/types/rancher2:/ClusterScheduledClusterScanScheduleConfig:ClusterScheduledClusterScanScheduleConfig",
                    "description": "Cluster scan schedule config (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scanConfig",
                "scheduleConfig"
            ]
        },
        "rancher2:/ClusterScheduledClusterScanScanConfig:ClusterScheduledClusterScanScanConfig": {
            "properties": {
                "cisScanConfig": {
                    "$ref": "#/types/rancher2:/ClusterScheduledClusterScanScanConfigCisScanConfig:ClusterScheduledClusterScanScanConfigCisScanConfig",
                    "description": "Cluster Cis Scan config (List maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cisScanConfig"
                    ]
                }
            }
        },
        "rancher2:/ClusterScheduledClusterScanScanConfigCisScanConfig:ClusterScheduledClusterScanScanConfigCisScanConfig": {
            "properties": {
                "debugMaster": {
                    "type": "boolean",
                    "description": "Debug master. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "debugWorker": {
                    "type": "boolean",
                    "description": "Debug worker. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideBenchmarkVersion": {
                    "type": "string",
                    "description": "Override benchmark version (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideSkips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Override skip (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profile": {
                    "type": "string",
                    "description": "Cis scan profile. Allowed values: `\"permissive\" (default) || \"hardened\"` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterScheduledClusterScanScheduleConfig:ClusterScheduledClusterScanScheduleConfig": {
            "properties": {
                "cronSchedule": {
                    "type": "string",
                    "description": "Crontab schedule. It should contains 5 fields `\"\u003cmin\u003e \u003chour\u003e \u003cmonth_day\u003e \u003cmonth\u003e \u003cweek_day\u003e\"` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention for etcd backup. Default `6` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cronSchedule"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cronSchedule",
                        "retention"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateMember:ClusterTemplateMember": {
            "properties": {
                "accessType": {
                    "type": "string",
                    "description": "Member access type. Valid values: `[\"read-only\" | \"owner\"]` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "Member group principal id (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "Member user principal id (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevision:ClusterTemplateTemplateRevision": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for the cluster template revision (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterConfig": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfig:ClusterTemplateTemplateRevisionClusterConfig",
                    "description": "Cluster configuration (list maxitem: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterTemplateId": {
                    "type": "string",
                    "description": "Cluster template ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "default": {
                    "type": "boolean",
                    "description": "Default variable value (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The cluster template revision ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for the cluster template revision (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template revision name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionQuestion:ClusterTemplateTemplateRevisionQuestion"
                    },
                    "description": "Cluster template questions (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterConfig",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "clusterConfig",
                        "clusterTemplateId",
                        "id",
                        "labels",
                        "name"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfig:ClusterTemplateTemplateRevisionClusterConfig": {
            "properties": {
                "clusterAuthEndpoint": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint:ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint",
                    "description": "Local cluster auth endpoint (list maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultClusterRoleForProjectMembers": {
                    "type": "string",
                    "description": "Default cluster role for project members (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultPodSecurityPolicyTemplateId": {
                    "type": "string",
                    "description": "Default pod security policy template ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredAgentImage": {
                    "type": "string",
                    "description": "Desired agent image (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredAuthImage": {
                    "type": "string",
                    "description": "Desired auth image (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerRootDir": {
                    "type": "string",
                    "description": "Desired auth image (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableClusterAlerting": {
                    "type": "boolean",
                    "description": "Enable built-in cluster alerting. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableClusterMonitoring": {
                    "type": "boolean",
                    "description": "Enable built-in cluster monitoring. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "description": "Enable project network isolation. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfig",
                    "description": "Rancher Kubernetes Engine Config (list maxitems: 1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledClusterScan": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScan:ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScan",
                    "description": "Cluster scheduled cis scan. For Rancher v2.4.0 or above (List MaxItem:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowsPreferedCluster": {
                    "type": "boolean",
                    "description": "Windows prefered cluster. Default: `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rkeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterAuthEndpoint",
                        "defaultClusterRoleForProjectMembers",
                        "defaultPodSecurityPolicyTemplateId",
                        "desiredAgentImage",
                        "desiredAuthImage",
                        "dockerRootDir",
                        "rkeConfig"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint:ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfig": {
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addons": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authentication": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication:ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorization": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization:ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bastionHost": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost:ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dns": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDns:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDns",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingress": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoring": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNode:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry:ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServices:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServices",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshCertPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addonJobTimeout",
                        "authentication",
                        "authorization",
                        "bastionHost",
                        "cloudProvider",
                        "dns",
                        "ingress",
                        "kubernetesVersion",
                        "monitoring",
                        "network",
                        "prefixPath",
                        "services",
                        "sshCertPath",
                        "sshKeyPath",
                        "upgradeStrategy"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication:ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sans",
                        "strategy"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization:ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization": {
            "properties": {
                "mode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost:ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "sshKey",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider": {
            "properties": {
                "awsCloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCloudProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template revision name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customCloudProvider",
                        "name"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "global"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableStrictZoneCheck": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elbSecurityGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterTag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "elbSecurityGroup",
                        "kubernetesClusterId",
                        "kubernetesClusterTag",
                        "roleArn",
                        "routeTableId",
                        "subnetId",
                        "vpc",
                        "zone"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "service"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "region",
                        "service",
                        "signingMethod",
                        "signingName",
                        "signingRegion",
                        "url"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientCertPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloud": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoff": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimit": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerSku": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryAvailabilitySetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryScaleSetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useInstanceMetadata": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetResourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aadClientId",
                "aadClientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aadClientCertPassword",
                        "aadClientCertPath",
                        "aadClientId",
                        "aadClientSecret",
                        "cloud",
                        "cloudProviderBackoff",
                        "cloudProviderBackoffDuration",
                        "cloudProviderBackoffExponent",
                        "cloudProviderBackoffJitter",
                        "cloudProviderBackoffRetries",
                        "cloudProviderRateLimit",
                        "cloudProviderRateLimitBucket",
                        "cloudProviderRateLimitQps",
                        "location",
                        "maximumLoadBalancerRuleCount",
                        "primaryAvailabilitySetName",
                        "primaryScaleSetName",
                        "resourceGroup",
                        "routeTableName",
                        "securityGroupName",
                        "subnetName",
                        "subscriptionId",
                        "tenantId",
                        "useInstanceMetadata",
                        "useManagedIdentityExtension",
                        "vmType",
                        "vnetName",
                        "vnetResourceGroup"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancer": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockStorage",
                        "global",
                        "loadBalancer",
                        "metadata",
                        "route"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreVolumeAz": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustDevicePath": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bsVersion",
                        "ignoreVolumeAz",
                        "trustDevicePath"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authUrl",
                        "caFile",
                        "domainId",
                        "domainName",
                        "password",
                        "region",
                        "tenantId",
                        "tenantName",
                        "trustId",
                        "username"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "floatingNetworkId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manageSecurityGroups": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorMaxRetries": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useOctavia": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createMonitor",
                        "floatingNetworkId",
                        "lbMethod",
                        "lbProvider",
                        "lbVersion",
                        "manageSecurityGroups",
                        "subnetId",
                        "useOctavia"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "requestTimeout",
                        "searchOrder"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "routerId"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workspace": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disk",
                        "global",
                        "network",
                        "virtualCenters",
                        "workspace"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scsiControllerType"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureFlag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters",
                        "insecureFlag",
                        "password",
                        "port",
                        "soapRoundtripCount",
                        "user"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "publicNetwork"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template revision name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters",
                        "name",
                        "password",
                        "port",
                        "soapRoundtripCount",
                        "user"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultDatastore": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcepoolPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "folder",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenter",
                        "defaultDatastore",
                        "folder",
                        "resourcepoolPath",
                        "server"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDns:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDns": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodelocal": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeSelector",
                        "reverseCidrs",
                        "upstreamNameservers"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress": {
            "properties": {
                "dnsPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsPolicy",
                        "extraArgs",
                        "nodeSelector",
                        "options",
                        "provider"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicas": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options",
                        "provider",
                        "replicas"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork": {
            "properties": {
                "calicoNetworkProvider": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mtu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugin": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options",
                        "plugin"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cloudProvider"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNode:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerSocket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnameOverride": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for the cluster template revision (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "roles",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "dockerSocket",
                        "roles",
                        "sshKey",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry:ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry": {
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServices:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeApi": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeController": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubelet": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeproxy": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduler": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "etcd",
                        "kubeApi",
                        "kubeController",
                        "kubelet",
                        "kubeproxy",
                        "scheduler"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gid": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshot": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupConfig",
                        "caCert",
                        "cert",
                        "creation",
                        "extraArgs",
                        "image",
                        "key",
                        "path",
                        "retention",
                        "snapshot"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalHours": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "safeTimestamp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCa": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ]
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi": {
            "properties": {
                "admissionConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alwaysPullImages": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auditLog": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventRateLimit": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podSecurityPolicy": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceNodePortRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image",
                        "serviceClusterIpRange",
                        "serviceNodePortRange"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBackup": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "policy"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCidr",
                        "extraArgs",
                        "image",
                        "serviceClusterIpRange"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failSwapOn": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "generateServingCertificate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infraContainerImage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterDnsServer",
                        "clusterDomain",
                        "extraArgs",
                        "failSwapOn",
                        "image",
                        "infraContainerImage"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drainInput": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput:ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableControlplane": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableWorker": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "drainInput"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput:ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "force": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gracePeriod": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScan:ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScan": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scanConfig": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfig:ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleConfig": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfig:ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scanConfig",
                "scheduleConfig"
            ]
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfig:ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfig": {
            "properties": {
                "cisScanConfig": {
                    "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfig:ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cisScanConfig"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfig:ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfig": {
            "properties": {
                "debugMaster": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "debugWorker": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideBenchmarkVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideSkips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfig:ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfig": {
            "properties": {
                "cronSchedule": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cronSchedule"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cronSchedule",
                        "retention"
                    ]
                }
            }
        },
        "rancher2:/ClusterTemplateTemplateRevisionQuestion:ClusterTemplateTemplateRevisionQuestion": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "Default variable value (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "description": "Required variable. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Variable type. `boolean`, `int` and `string` are allowed. Default `string` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variable": {
                    "type": "string",
                    "description": "Variable name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "default",
                "variable"
            ]
        },
        "rancher2:/EtcdBackupBackupConfig:EtcdBackupBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable etcd backup (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalHours": {
                    "type": "integer",
                    "description": "Interval hours for etcd backup. Default `12` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention for etcd backup. Default `6` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:/EtcdBackupBackupConfigS3BackupConfig:EtcdBackupBackupConfigS3BackupConfig",
                    "description": "S3 config options for etcd backup. Valid for `imported` and `rke` clusters. (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "safeTimestamp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/EtcdBackupBackupConfigS3BackupConfig:EtcdBackupBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access key for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketName": {
                    "type": "string",
                    "description": "Bucket name for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCa": {
                    "type": "string",
                    "description": "Base64 encoded custom CA for S3 service. Use filebase64(\u003cFILE\u003e) for encoding file. Available from Rancher v2.2.5 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Region for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key for S3 service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ]
        },
        "rancher2:/MultiClusterAppAnswer:MultiClusterAppAnswer": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID for answer (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID for target (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/values for answer (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterId",
                        "projectId",
                        "values"
                    ]
                }
            }
        },
        "rancher2:/MultiClusterAppMember:MultiClusterAppMember": {
            "properties": {
                "accessType": {
                    "type": "string",
                    "description": "Member access type. Valid values: `[\"member\" | \"owner\" | \"read-only\"]` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "Member group principal id (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "Member user principal id (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/MultiClusterAppTarget:MultiClusterAppTarget": {
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "App ID for target (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthState": {
                    "type": "string",
                    "description": "App health state for target (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID for target (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "description": "App state for target (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "appId",
                        "healthState",
                        "projectId",
                        "state"
                    ]
                }
            }
        },
        "rancher2:/MultiClusterAppUpgradeStrategy:MultiClusterAppUpgradeStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:/MultiClusterAppUpgradeStrategyRollingUpdate:MultiClusterAppUpgradeStrategyRollingUpdate",
                    "description": "Upgrade strategy rolling update (list MaxItems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/MultiClusterAppUpgradeStrategyRollingUpdate:MultiClusterAppUpgradeStrategyRollingUpdate": {
            "properties": {
                "batchSize": {
                    "type": "integer",
                    "description": "Rolling update batch size. Default `1` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "description": "Rolling update interval. Default `1` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/NamespaceContainerResourceLimit:NamespaceContainerResourceLimit": {
            "properties": {
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/NamespaceResourceQuota:NamespaceResourceQuota": {
            "properties": {
                "limit": {
                    "$ref": "#/types/rancher2:/NamespaceResourceQuotaLimit:NamespaceResourceQuotaLimit",
                    "description": "Resource quota limit for namespace (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "limit"
            ]
        },
        "rancher2:/NamespaceResourceQuotaLimit:NamespaceResourceQuotaLimit": {
            "properties": {
                "configMaps": {
                    "type": "string",
                    "description": "Limit for config maps in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "persistentVolumeClaims": {
                    "type": "string",
                    "description": "Limit for persistent volume claims in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pods": {
                    "type": "string",
                    "description": "Limit for pods in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationControllers": {
                    "type": "string",
                    "description": "Limit for replication controllers in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsStorage": {
                    "type": "string",
                    "description": "Limit for requests storage in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secrets": {
                    "type": "string",
                    "description": "Limit for secrets in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesLoadBalancers": {
                    "type": "string",
                    "description": "Limit for services load balancers in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesNodePorts": {
                    "type": "string",
                    "description": "Limit for services node ports in namespace (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/NodePoolNodeTaint:NodePoolNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Taint effect. Supported values : `\"NoExecute\" | \"NoSchedule\" | \"PreferNoSchedule\"` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "Taint key (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeAdded": {
                    "type": "string",
                    "description": "Taint time added (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Taint value (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "timeAdded",
                        "value"
                    ]
                }
            }
        },
        "rancher2:/NodeTemplateAmazonec2Config:NodeTemplateAmazonec2Config": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS access key. Required on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ami": {
                    "type": "string",
                    "description": "AWS machine image (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blockDurationMinutes": {
                    "type": "string",
                    "description": "AWS spot instance duration in minutes (60, 120, 180, 240, 300, or 360). Default `0` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceName": {
                    "type": "string",
                    "description": "AWS root device name. Default `/dev/sda1` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptEbsVolume": {
                    "type": "boolean",
                    "description": "Encrypt EBS volume. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Optional endpoint URL (hostname only or fully qualified URI) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iamInstanceProfile": {
                    "type": "string",
                    "description": "AWS IAM Instance Profile (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureTransport": {
                    "type": "boolean",
                    "description": "Disable SSL when sending requests (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "Specifies the Linode Instance type which determines CPU, memory, disk size, etc. Default `g6-standard-4` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keypairName": {
                    "type": "string",
                    "description": "OpenStack keypair to use to SSH to the instance (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring for droplet. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Make the specified port number accessible from the Internet. (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateAddressOnly": {
                    "type": "boolean",
                    "description": "Only use a private IP address. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "OpenStack region name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestSpotInstance": {
                    "type": "boolean",
                    "description": "Set this flag to request spot instance. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retries": {
                    "type": "string",
                    "description": "Set retry count for recoverable failures (use -1 to disable). Default `5` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rootSize": {
                    "type": "string",
                    "description": "AWS root disk size (in GB). Default `16` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "description": "AWS secret key. Required on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupReadonly": {
                    "type": "boolean",
                    "description": "Skip adding default rules to security groups (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AWS VPC security group. (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sessionToken": {
                    "type": "string",
                    "description": "AWS Session Token (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "spotPrice": {
                    "type": "string",
                    "description": "AWS spot instance bid price (in dollar). Default `0.50` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeypath": {
                    "type": "string",
                    "description": "SSH Key for Instance (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "AWS VPC subnet id (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "string",
                    "description": "vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useEbsOptimizedInstance": {
                    "type": "boolean",
                    "description": "Create an EBS optimized instance. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usePrivateAddress": {
                    "type": "boolean",
                    "description": "Force the usage of private IP address. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userdata": {
                    "type": "string",
                    "description": "Path to file with cloud-init user-data (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "volumeType": {
                    "type": "string",
                    "description": "Amazon EBS volume type. Default `gp2` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "AWS VPC id. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "AWS zone for instance (i.e. a,b,c,d,e) (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ami",
                "region",
                "securityGroups",
                "subnetId",
                "vpcId",
                "zone"
            ]
        },
        "rancher2:/NodeTemplateAzureConfig:NodeTemplateAzureConfig": {
            "properties": {
                "availabilitySet": {
                    "type": "string",
                    "description": "Azure Availability Set to place the virtual machine into. Default `docker-machine` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "description": "Azure Service Principal Account ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Azure Service Principal Account password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customData": {
                    "type": "string",
                    "description": "Path to file with custom-data (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSize": {
                    "type": "string",
                    "description": "vSphere size of disk for docker VM (in MB). Default `20480` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dns": {
                    "type": "string",
                    "description": "A unique DNS label for the public IP adddress (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerPort": {
                    "type": "string",
                    "description": "Docker Port. Default `2376` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environment": {
                    "type": "string",
                    "description": "Azure environment (e.g. AzurePublicCloud, AzureChinaCloud). Default `AzurePublicCloud` (string)\n`fault_domain_count` - (Optional) Fault domain count to use for availability set. Default `3` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "faultDomainCount": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "Azure region to create the virtual machine. Default `westus` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "managedDisks": {
                    "type": "boolean",
                    "description": "Configures VM and availability set for managed disks. Just for Rancher v2.3.x and above. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noPublicIp": {
                    "type": "boolean",
                    "description": "Do not create a public IP address for the machine. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Make the specified port number accessible from the Internet. (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "Specify a static private IP address for the machine. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "Azure Resource Group name (will be created if missing). Default `docker-machine` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Digital Ocean size. Default `s-1vcpu-1gb` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticPublicIp": {
                    "type": "boolean",
                    "description": "Assign a static public IP address to the machine. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "description": "Type of Storage Account to host the OS Disk for the machine. Default `Standard_LRS` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "description": "Azure Subnet Name to be used within the Virtual Network. Default `docker-machine` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetPrefix": {
                    "type": "string",
                    "description": "Private CIDR block to be used for the new subnet, should comply RFC 1918. Default `192.168.0.0/16` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateDomainCount": {
                    "type": "string",
                    "description": "Update domain count to use for availability set. Default `5` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "description": "Use private IP address of the machine to connect. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnet": {
                    "type": "string",
                    "description": "Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format). Default `docker-machine-vnet` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/NodeTemplateDigitaloceanConfig:NodeTemplateDigitaloceanConfig": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backups": {
                    "type": "boolean",
                    "description": "Enable backups for droplet. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Enable ipv6 for droplet. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring for droplet. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateNetworking": {
                    "type": "boolean",
                    "description": "Enable private networking for droplet. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "OpenStack region name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Digital Ocean size. Default `s-1vcpu-1gb` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyFingerprint": {
                    "type": "string",
                    "description": "SSH key fingerprint (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH private key path (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPort": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "string",
                    "description": "vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userdata": {
                    "type": "string",
                    "description": "Path to file with cloud-init user-data (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/NodeTemplateLinodeConfig:NodeTemplateLinodeConfig": {
            "properties": {
                "authorizedUsers": {
                    "type": "string",
                    "description": "Linode user accounts (seperated by commas) whose Linode SSH keys will be permitted root access to the created node. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createPrivateIp": {
                    "type": "boolean",
                    "description": "Create private IP for the instance. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerPort": {
                    "type": "string",
                    "description": "Docker Port. Default `2376` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "description": "Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "description": "Specifies the Linode Instance type which determines CPU, memory, disk size, etc. Default `g6-standard-4` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "description": "Linode Instance Label. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "OpenStack region name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rootPass": {
                    "type": "string",
                    "description": "Root Password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPort": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stackscript": {
                    "type": "string",
                    "description": "Specifies the Linode StackScript to use to create the instance. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stackscriptData": {
                    "type": "string",
                    "description": "A JSON string specifying data for the selected StackScript. (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "swapSize": {
                    "type": "string",
                    "description": "Linode Instance Swap Size (MB). Default `512` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "string",
                    "description": "vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "Linode API token. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uaPrefix": {
                    "type": "string",
                    "description": "Prefix the User-Agent in Linode API calls with some 'product/version' (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/NodeTemplateOpennebulaConfig:NodeTemplateOpennebulaConfig": {
            "properties": {
                "b2dSize": {
                    "type": "string",
                    "description": "Size of the Volatile disk in MB - only for b2d (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpu": {
                    "type": "string",
                    "description": "CPU value for the VM (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "devPrefix": {
                    "type": "string",
                    "description": "Dev prefix to use for the images. E.g.: 'vd', 'sd', 'hd' (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableVnc": {
                    "type": "boolean",
                    "description": "VNC is enabled by default. Disable it with this flag (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskResize": {
                    "type": "string",
                    "description": "Size of the disk for the VM in MB (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "OpenStack image id to use for the instance. Conflicts with `image_name` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "description": "OpenStack image name to use for the instance. Conflicts with `image_id` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageOwner": {
                    "type": "string",
                    "description": "Owner of the image to use as the VM OS (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "string",
                    "description": "Size of the memory for the VM in MB (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "string",
                    "description": "Opennebula network ID to connect the machine to. Conflicts with `network_name` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkName": {
                    "type": "string",
                    "description": "Opennebula network to connect the machine to. Conflicts with `network_id` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkOwner": {
                    "type": "string",
                    "description": "Opennebula user ID of the Network to connect the machine to (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateId": {
                    "type": "string",
                    "description": "Opennebula template ID to use. Conflicts with `template_name` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateName": {
                    "type": "string",
                    "description": "Name of the Opennbula template to use. Conflicts with `template_id` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "Set the user for the XML-RPC API authentication (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vcpu": {
                    "type": "string",
                    "description": "VCPUs for the VM (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "xmlRpcUrl": {
                    "type": "string",
                    "description": "Set the url for the Opennebula XML-RPC API (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "user",
                "xmlRpcUrl"
            ]
        },
        "rancher2:/NodeTemplateOpenstackConfig:NodeTemplateOpenstackConfig": {
            "properties": {
                "activeTimeout": {
                    "type": "string",
                    "description": "OpenStack active timeout Default `200` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUrl": {
                    "type": "string",
                    "description": "OpenStack authentication URL (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "OpenStack availability zone (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cacert": {
                    "type": "string",
                    "description": "CA certificate bundle to verify against (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "configDrive": {
                    "type": "boolean",
                    "description": "Enables the OpenStack config drive for the instance. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainId": {
                    "type": "string",
                    "description": "OpenStack domain ID. Identity v3 only. Conflicts with `domain_name` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "description": "OpenStack domain name. Identity v3 only. Conflicts with `domain_id` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpointType": {
                    "type": "string",
                    "description": "OpenStack endpoint type. adminURL, internalURL or publicURL (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flavorId": {
                    "type": "string",
                    "description": "OpenStack flavor id to use for the instance. Conflicts with `flavor_name` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flavorName": {
                    "type": "string",
                    "description": "OpenStack flavor name to use for the instance. Conflicts with `flavor_id` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "floatingIpPool": {
                    "type": "string",
                    "description": "OpenStack floating IP pool to get an IP from to assign to the instance (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "OpenStack image id to use for the instance. Conflicts with `image_name` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageName": {
                    "type": "string",
                    "description": "OpenStack image name to use for the instance. Conflicts with `image_id` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS credential checking. Default `false` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipVersion": {
                    "type": "string",
                    "description": "OpenStack version of IP address assigned for the machine Default `4` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keypairName": {
                    "type": "string",
                    "description": "OpenStack keypair to use to SSH to the instance (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netId": {
                    "type": "string",
                    "description": "OpenStack network id the machine will be connected on. Conflicts with `net_name` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "netName": {
                    "type": "string",
                    "description": "OpenStack network name the machine will be connected on. Conflicts with `net_id` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "novaNetwork": {
                    "type": "boolean",
                    "description": "Use the nova networking services instead of neutron (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateKeyFile": {
                    "type": "string",
                    "description": "Private key content to use for SSH (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "OpenStack region name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secGroups": {
                    "type": "string",
                    "description": "OpenStack comma separated security groups for the machine (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPort": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "description": "OpenStack tenant id. Conflicts with `tenant_name` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantName": {
                    "type": "string",
                    "description": "OpenStack tenant name. Conflicts with `tenant_id` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userDataFile": {
                    "type": "string",
                    "description": "File containing an openstack userdata script (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "vSphere username. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "availabilityZone",
                "region",
                "username"
            ]
        },
        "rancher2:/NodeTemplateVsphereConfig:NodeTemplateVsphereConfig": {
            "properties": {
                "boot2dockerUrl": {
                    "type": "string",
                    "description": "vSphere URL for boot2docker iso image. Default `https://releases.rancher.com/os/latest/rancheros-vmware.iso` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cfgparams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere vm configuration parameters (used for guestinfo) (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloneFrom": {
                    "type": "string",
                    "description": "If you choose creation type clone a name of what you want to clone is required. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudConfig": {
                    "type": "string",
                    "description": "Filepath to a cloud-config yaml file to put into the ISO user-data. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudinit": {
                    "type": "string",
                    "description": "vSphere cloud-init file or url to set in the guestinfo (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "contentLibrary": {
                    "type": "string",
                    "description": "If you choose to clone from a content library template specify the name of the library. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpuCount": {
                    "type": "string",
                    "description": "vSphere CPU number for docker VM. Default `2` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creationType": {
                    "type": "string",
                    "description": "Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy. Default `legacy`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customAttributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere custom attributes, format key/value e.g. `200=my custom value`. From Rancher v2.3.3 (List)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "description": "vSphere datacenter for docker VM (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datastore": {
                    "type": "string",
                    "description": "vSphere datastore for docker VM (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datastoreCluster": {
                    "type": "string",
                    "description": "vSphere datastore cluster for virtual machine. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSize": {
                    "type": "string",
                    "description": "vSphere size of disk for docker VM (in MB). Default `20480` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "description": "vSphere folder for the docker VM. This folder must already exist in the datacenter (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostsystem": {
                    "type": "string",
                    "description": "vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memorySize": {
                    "type": "string",
                    "description": "vSphere size of memory for docker VM (in MB). Default `2048` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere network where the docker VM will be attached (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pool": {
                    "type": "string",
                    "description": "vSphere resource pool for docker VM (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPassword": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh password. Default `tcuser`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPort": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshUserGroup": {
                    "type": "string",
                    "description": "If using a non-B2D image the uploaded keys will need chown'ed. Default `staff`. From Rancher v2.3.3 (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "vSphere username. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vappIpAllocationPolicy": {
                    "type": "string",
                    "description": "vSphere vApp IP allocation policy. Supported values are: `dhcp`, `fixed`, `transient` and `fixedAllocated` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vappIpProtocol": {
                    "type": "string",
                    "description": "vSphere vApp IP protocol for this deployment. Supported values are: `IPv4` and `IPv6` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vappProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere vApp properties (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vappTransport": {
                    "type": "string",
                    "description": "vSphere OVF environment transports to use for properties. Supported values are: `iso` and `com.vmware.guestInfo` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vcenter": {
                    "type": "string",
                    "description": "vSphere IP/hostname for vCenter. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vcenterPort": {
                    "type": "string",
                    "description": "vSphere Port for vCenter. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x. Default `443` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/NotifierPagerdutyConfig:NotifierPagerdutyConfig": {
            "properties": {
                "proxyUrl": {
                    "type": "string",
                    "description": "Wechat proxy url (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceKey": {
                    "type": "string",
                    "description": "Pagerduty service key (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceKey"
            ]
        },
        "rancher2:/NotifierSlackConfig:NotifierSlackConfig": {
            "properties": {
                "defaultRecipient": {
                    "type": "string",
                    "description": "Wechat default recipient (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyUrl": {
                    "type": "string",
                    "description": "Wechat proxy url (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Webhook url (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultRecipient",
                "url"
            ]
        },
        "rancher2:/NotifierSmtpConfig:NotifierSmtpConfig": {
            "properties": {
                "defaultRecipient": {
                    "type": "string",
                    "description": "Wechat default recipient (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "SMTP host (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "SMTP password (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "SMTP port (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sender": {
                    "type": "string",
                    "description": "SMTP sender (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "boolean",
                    "description": "SMTP tls. Default `true` (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "SMTP username (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultRecipient",
                "host",
                "port",
                "sender"
            ]
        },
        "rancher2:/NotifierWebhookConfig:NotifierWebhookConfig": {
            "properties": {
                "proxyUrl": {
                    "type": "string",
                    "description": "Wechat proxy url (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Webhook url (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "rancher2:/NotifierWechatConfig:NotifierWechatConfig": {
            "properties": {
                "agent": {
                    "type": "string",
                    "description": "Wechat agent ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "corp": {
                    "type": "string",
                    "description": "Wechat corporation ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultRecipient": {
                    "type": "string",
                    "description": "Wechat default recipient (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyUrl": {
                    "type": "string",
                    "description": "Wechat proxy url (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipientType": {
                    "type": "string",
                    "description": "Wechat recipient type. Allowed values: `party` | `tag` | `user` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secret": {
                    "type": "string",
                    "description": "Wechat agent ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "agent",
                "corp",
                "defaultRecipient",
                "secret"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateAllowedCsiDriver:PodSecurityPolicyTemplateAllowedCsiDriver": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the PodSecurityPolicyTemplate (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateAllowedFlexVolume:PodSecurityPolicyTemplateAllowedFlexVolume": {
            "properties": {
                "driver": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "driver"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateAllowedHostPath:PodSecurityPolicyTemplateAllowedHostPath": {
            "properties": {
                "pathPrefix": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "pathPrefix"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateFsGroup:PodSecurityPolicyTemplateFsGroup": {
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateFsGroupRange:PodSecurityPolicyTemplateFsGroupRange"
                    },
                    "description": "(list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rule": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ranges"
                    ]
                }
            }
        },
        "rancher2:/PodSecurityPolicyTemplateFsGroupRange:PodSecurityPolicyTemplateFsGroupRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateHostPort:PodSecurityPolicyTemplateHostPort": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateRunAsGroup:PodSecurityPolicyTemplateRunAsGroup": {
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRunAsGroupRange:PodSecurityPolicyTemplateRunAsGroupRange"
                    },
                    "description": "(list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rule": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rule"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateRunAsGroupRange:PodSecurityPolicyTemplateRunAsGroupRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateRunAsUser:PodSecurityPolicyTemplateRunAsUser": {
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRunAsUserRange:PodSecurityPolicyTemplateRunAsUserRange"
                    },
                    "description": "(list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rule": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rule"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateRunAsUserRange:PodSecurityPolicyTemplateRunAsUserRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateRuntimeClass:PodSecurityPolicyTemplateRuntimeClass": {
            "properties": {
                "allowedRuntimeClassNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultRuntimeClassName": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedRuntimeClassNames"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateSeLinux:PodSecurityPolicyTemplateSeLinux": {
            "properties": {
                "rule": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "seLinuxOption": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateSeLinuxSeLinuxOption:PodSecurityPolicyTemplateSeLinuxSeLinuxOption",
                    "description": "(list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rule"
            ]
        },
        "rancher2:/PodSecurityPolicyTemplateSeLinuxSeLinuxOption:PodSecurityPolicyTemplateSeLinuxSeLinuxOption": {
            "properties": {
                "level": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/PodSecurityPolicyTemplateSupplementalGroup:PodSecurityPolicyTemplateSupplementalGroup": {
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateSupplementalGroupRange:PodSecurityPolicyTemplateSupplementalGroupRange"
                    },
                    "description": "(list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rule": {
                    "type": "string",
                    "description": "(string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ranges"
                    ]
                }
            }
        },
        "rancher2:/PodSecurityPolicyTemplateSupplementalGroupRange:PodSecurityPolicyTemplateSupplementalGroupRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "description": "(int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/ProjectAlertGroupRecipient:ProjectAlertGroupRecipient": {
            "properties": {
                "defaultRecipient": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierId": {
                    "type": "string",
                    "description": "Recipient notifier ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierType": {
                    "type": "string",
                    "description": "Recipient notifier ID. Supported values : `\"pagerduty\" | \"slack\" | \"email\" | \"webhook\" | \"wechat\"` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "description": "Recipient (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "notifierId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "notifierId",
                        "notifierType",
                        "recipient"
                    ]
                }
            }
        },
        "rancher2:/ProjectAlertRuleMetricRule:ProjectAlertRuleMetricRule": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "description": "Metric rule comparison. Supported values : `\"equal\" | \"greater-or-equal\" | \"greater-than\" | \"less-or-equal\" | \"less-than\" | \"not-equal\" | \"has-value\"`. Default: `equal`  (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Metric rule description (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "string",
                    "description": "Metric rule duration (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expression": {
                    "type": "string",
                    "description": "Metric rule expression (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdValue": {
                    "type": "number",
                    "description": "Metric rule threshold value (float64)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "expression",
                "thresholdValue"
            ]
        },
        "rancher2:/ProjectAlertRulePodRule:ProjectAlertRulePodRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Pod rule condition. Supported values : `\"notrunning\" | \"notscheduled\" | \"restarts\"`. Default: `notrunning` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podId": {
                    "type": "string",
                    "description": "Pod ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restartIntervalSeconds": {
                    "type": "integer",
                    "description": "Pod rule restart interval seconds. Default: `300` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restartTimes": {
                    "type": "integer",
                    "description": "Pod rule restart times. Default: `3`  (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "podId"
            ]
        },
        "rancher2:/ProjectAlertRuleWorkloadRule:ProjectAlertRuleWorkloadRule": {
            "properties": {
                "availablePercentage": {
                    "type": "integer",
                    "description": "Workload rule available percentage. Default: `70` (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Workload rule selector (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloadId": {
                    "type": "string",
                    "description": "Workload ID (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ProjectContainerResourceLimit:ProjectContainerResourceLimit": {
            "properties": {
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ProjectLoggingCustomTargetConfig:ProjectLoggingCustomTargetConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "content": {
                    "type": "string",
                    "description": "Custom target config content (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "content"
            ]
        },
        "rancher2:/ProjectLoggingElasticsearchConfig:ProjectLoggingElasticsearchConfig": {
            "properties": {
                "authPassword": {
                    "type": "string",
                    "description": "User password for the elascticsearch service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUsername": {
                    "type": "string",
                    "description": "Username for the elascticsearch service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPass": {
                    "type": "string",
                    "description": "SSL client key password for the splunk service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dateFormat": {
                    "type": "string",
                    "description": "Date format for the elascticsearch logs. Default: `YYYY-MM-DD` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexPrefix": {
                    "type": "string",
                    "description": "Index prefix for the elascticsearch logs. Default: `local` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "SSL verify for the syslog service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVersion": {
                    "type": "string",
                    "description": "SSL version for the elascticsearch service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpoint",
                        "sslVerify"
                    ]
                }
            }
        },
        "rancher2:/ProjectLoggingFluentdConfig:ProjectLoggingFluentdConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "Compress data for the fluentd service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableTls": {
                    "type": "boolean",
                    "description": "Enable TLS for the fluentd service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fluentServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ProjectLoggingFluentdConfigFluentServer:ProjectLoggingFluentdConfigFluentServer"
                    },
                    "description": "Servers for the fluentd service (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fluentServers"
            ]
        },
        "rancher2:/ProjectLoggingFluentdConfigFluentServer:ProjectLoggingFluentdConfigFluentServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname of the fluentd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "User password of the fluentd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedKey": {
                    "type": "string",
                    "description": "Shared key of the fluentd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standby": {
                    "type": "boolean",
                    "description": "Standby server of the fluentd service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username of the fluentd service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "Weight of the fluentd server (int)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ]
        },
        "rancher2:/ProjectLoggingKafkaConfig:ProjectLoggingKafkaConfig": {
            "properties": {
                "brokerEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Kafka endpoints for kafka service. Conflicts with `zookeeper_endpoint` (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topic": {
                    "type": "string",
                    "description": "Topic to publish on the kafka service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zookeeperEndpoint": {
                    "type": "string",
                    "description": "Zookeeper endpoint for kafka service. Conflicts with `broker_endpoints` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "topic"
            ]
        },
        "rancher2:/ProjectLoggingSplunkConfig:ProjectLoggingSplunkConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPass": {
                    "type": "string",
                    "description": "SSL client key password for the splunk service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "index": {
                    "type": "string",
                    "description": "Index prefix for the splunk logs (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "Date format for the splunk logs (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "SSL verify for the syslog service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "Token for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpoint",
                        "sslVerify",
                        "token"
                    ]
                }
            }
        },
        "rancher2:/ProjectLoggingSyslogConfig:ProjectLoggingSyslogConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "SSL certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "description": "SSL client certificate for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "description": "SSL client key for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint of the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "program": {
                    "type": "string",
                    "description": "Program for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for the syslog service. `tcp` and `udp` are supported. Default: `udp` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "description": "Date format for the syslog logs. `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info` and `debug` are supported. Default: `notice` (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "SSL verify for the syslog service (bool)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "Token for the syslog service (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpoint",
                        "sslVerify"
                    ]
                }
            }
        },
        "rancher2:/ProjectProjectMonitoringInput:ProjectProjectMonitoringInput": {
            "properties": {
                "answers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value answers for monitor input (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "rancher-monitoring chart version (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ProjectResourceQuota:ProjectResourceQuota": {
            "properties": {
                "namespaceDefaultLimit": {
                    "$ref": "#/types/rancher2:/ProjectResourceQuotaNamespaceDefaultLimit:ProjectResourceQuotaNamespaceDefaultLimit",
                    "description": "Default resource quota limit for  namespaces in project (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectLimit": {
                    "$ref": "#/types/rancher2:/ProjectResourceQuotaProjectLimit:ProjectResourceQuotaProjectLimit",
                    "description": "Resource quota limit for project (list maxitems:1)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespaceDefaultLimit",
                "projectLimit"
            ]
        },
        "rancher2:/ProjectResourceQuotaNamespaceDefaultLimit:ProjectResourceQuotaNamespaceDefaultLimit": {
            "properties": {
                "configMaps": {
                    "type": "string",
                    "description": "Limit for config maps in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "persistentVolumeClaims": {
                    "type": "string",
                    "description": "Limit for persistent volume claims in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pods": {
                    "type": "string",
                    "description": "Limit for pods in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationControllers": {
                    "type": "string",
                    "description": "Limit for replication controllers in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsStorage": {
                    "type": "string",
                    "description": "Limit for requests storage in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secrets": {
                    "type": "string",
                    "description": "Limit for secrets in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesLoadBalancers": {
                    "type": "string",
                    "description": "Limit for services load balancers in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesNodePorts": {
                    "type": "string",
                    "description": "Limit for services node ports in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/ProjectResourceQuotaProjectLimit:ProjectResourceQuotaProjectLimit": {
            "properties": {
                "configMaps": {
                    "type": "string",
                    "description": "Limit for config maps in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "persistentVolumeClaims": {
                    "type": "string",
                    "description": "Limit for persistent volume claims in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pods": {
                    "type": "string",
                    "description": "Limit for pods in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationControllers": {
                    "type": "string",
                    "description": "Limit for replication controllers in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsStorage": {
                    "type": "string",
                    "description": "Limit for requests storage in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secrets": {
                    "type": "string",
                    "description": "Limit for secrets in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesLoadBalancers": {
                    "type": "string",
                    "description": "Limit for services load balancers in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesNodePorts": {
                    "type": "string",
                    "description": "Limit for services node ports in project (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/RegistryRegistry:RegistryRegistry": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address for registry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password for the registry (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username for the registry (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address"
            ]
        },
        "rancher2:/RoleTempalteRule:RoleTempalteRule": {
            "properties": {
                "apiGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule api groups (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nonResourceUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule non resource urls (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resource names (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resources (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "verbs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule verbs. `create`, `delete`, `get`, `list`, `patch`, `update`, `view`, `watch` and `*` values are supported (list)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterAksConfig:getClusterAksConfig": {
            "properties": {
                "aadServerAppSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadTenantId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addClientAppId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addServerAppId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "adminUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentDnsPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentOsDiskSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentPoolName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentStorageProfile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "agentVmSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authBaseUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "baseUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "count": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dnsServiceIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerBridgeCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHttpApplicationRouting": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableMonitoring": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logAnalyticsWorkspace": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logAnalyticsWorkspaceResourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterDnsPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPods": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkPlugin": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPublicKeyContents": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnet": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetwork": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetworkResourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "agentDnsPrefix",
                "clientId",
                "clientSecret",
                "kubernetesVersion",
                "masterDnsPrefix",
                "resourceGroup",
                "sshPublicKeyContents",
                "subnet",
                "subscriptionId",
                "tag",
                "tenantId",
                "virtualNetwork",
                "virtualNetworkResourceGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterAlertGroupRecipient:getClusterAlertGroupRecipient": {
            "properties": {
                "defaultRecipient": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "notifierId",
                "notifierType",
                "recipient"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterAlterRuleEventRule:getClusterAlterRuleEventRule": {
            "properties": {
                "eventType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceKind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resourceKind"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterAlterRuleMetricRule:getClusterAlterRuleMetricRule": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdValue": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "expression",
                "thresholdValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterAlterRuleNodeRule:getClusterAlterRuleNodeRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpuThreshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memThreshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterAlterRuleSystemServiceRule:getClusterAlterRuleSystemServiceRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterClusterAuthEndpoint:getClusterClusterAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterClusterMonitoringInput:getClusterClusterMonitoringInput": {
            "properties": {
                "answers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterClusterRegistrationToken:getClusterClusterRegistrationToken": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(Computed) Annotations for Node Pool object (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "command": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureCommand": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(Computed) Labels for Node Pool object (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manifestUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeCommand": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowsNodeCommand": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "clusterId",
                "command",
                "id",
                "insecureCommand",
                "labels",
                "manifestUrl",
                "name",
                "nodeCommand",
                "token",
                "windowsNodeCommand"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterClusterTemplateAnswers:getClusterClusterTemplateAnswers": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "projectId",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterClusterTemplateQuestion:getClusterClusterTemplateQuestion": {
            "properties": {
                "default": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "default",
                "variable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterEksConfig:getClusterEksConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ami": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "associateWorkerNodePublicIp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredNodes": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyPairName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumNodes": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minimumNodes": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeVolumeSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceRole": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sessionToken": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userData": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualNetwork": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "kubernetesVersion",
                "secretKey",
                "userData"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterGkeConfig:getClusterGkeConfig": {
            "properties": {
                "clusterIpv4Cidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "credential": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "(Computed) The description for Cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSizeGb": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAlphaFeature": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAutoRepair": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableAutoUpgrade": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHorizontalPodAutoscaling": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHttpLoadBalancing": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableKubernetesDashboard": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableLegacyAbac": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableMasterAuthorizedNetwork": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableNetworkPolicyConfig": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableNodepoolAutoscaling": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enablePrivateEndpoint": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enablePrivateNodes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableStackdriverLogging": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableStackdriverMonitoring": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyClusterIpv4CidrBlock": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyClusterSecondaryRangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyCreateSubnetwork": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyNodeIpv4CidrBlock": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyServicesIpv4CidrBlock": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicyServicesSecondaryRangeName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipPolicySubnetworkName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueClientCertificate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesDashboard": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(Computed) Labels for Node Pool object (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "localSsdCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "machineType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindow": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterAuthorizedNetworkCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterIpv4CidrBlock": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNodeCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minNodeCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodePool": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preemptible": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccount": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subNetwork": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useIpAliases": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterIpv4Cidr",
                "credential",
                "diskType",
                "imageType",
                "ipPolicyClusterIpv4CidrBlock",
                "ipPolicyClusterSecondaryRangeName",
                "ipPolicyNodeIpv4CidrBlock",
                "ipPolicyServicesIpv4CidrBlock",
                "ipPolicyServicesSecondaryRangeName",
                "ipPolicySubnetworkName",
                "labels",
                "locations",
                "machineType",
                "maintenanceWindow",
                "masterIpv4CidrBlock",
                "masterVersion",
                "network",
                "nodePool",
                "nodeVersion",
                "oauthScopes",
                "projectId",
                "resourceLabels",
                "serviceAccount",
                "subNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterK3sConfig:getClusterK3sConfig": {
            "properties": {
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:/getClusterK3sConfigUpgradeStrategy:getClusterK3sConfigUpgradeStrategy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "upgradeStrategy",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterK3sConfigUpgradeStrategy:getClusterK3sConfigUpgradeStrategy": {
            "properties": {
                "drainServerNodes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drainWorkerNodes": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverConcurrency": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workerConcurrency": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterLoggingCustomTargetConfig:getClusterLoggingCustomTargetConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "content"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterLoggingElasticsearchConfig:getClusterLoggingElasticsearchConfig": {
            "properties": {
                "authPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dateFormat": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sslVerify"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterLoggingFluentdConfig:getClusterLoggingFluentdConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableTls": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fluentServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterLoggingFluentdConfigFluentServer:getClusterLoggingFluentdConfigFluentServer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fluentServers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterLoggingFluentdConfigFluentServer:getClusterLoggingFluentdConfigFluentServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standby": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterLoggingKafkaConfig:getClusterLoggingKafkaConfig": {
            "properties": {
                "brokerEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zookeeperEndpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "topic"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterLoggingSplunkConfig:getClusterLoggingSplunkConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "index": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sslVerify",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterLoggingSyslogConfig:getClusterLoggingSyslogConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "program": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sslVerify"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfig:getClusterRkeConfig": {
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addons": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authentication": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigAuthentication:getClusterRkeConfigAuthentication",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorization": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigAuthorization:getClusterRkeConfigAuthorization",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bastionHost": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigBastionHost:getClusterRkeConfigBastionHost",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProvider:getClusterRkeConfigCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dns": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigDns:getClusterRkeConfigDns",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingress": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigIngress:getClusterRkeConfigIngress",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoring": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigMonitoring:getClusterRkeConfigMonitoring",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigNetwork:getClusterRkeConfigNetwork",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterRkeConfigNode:getClusterRkeConfigNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterRkeConfigPrivateRegistry:getClusterRkeConfigPrivateRegistry"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServices:getClusterRkeConfigServices",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshCertPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigUpgradeStrategy:getClusterRkeConfigUpgradeStrategy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addonJobTimeout",
                "authentication",
                "authorization",
                "bastionHost",
                "cloudProvider",
                "dns",
                "ingress",
                "kubernetesVersion",
                "monitoring",
                "network",
                "prefixPath",
                "services",
                "sshCertPath",
                "sshKeyPath",
                "upgradeStrategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigAuthentication:getClusterRkeConfigAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sans",
                "strategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigAuthorization:getClusterRkeConfigAuthorization": {
            "properties": {
                "mode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "options"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigBastionHost:getClusterRkeConfigBastionHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "sshKey",
                "sshKeyPath",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProvider:getClusterRkeConfigCloudProvider": {
            "properties": {
                "awsCloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderAwsCloudProvider:getClusterRkeConfigCloudProviderAwsCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderAzureCloudProvider:getClusterRkeConfigCloudProviderAzureCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCloudProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProvider:getClusterRkeConfigCloudProviderOpenstackCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProvider:getClusterRkeConfigCloudProviderVsphereCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "customCloudProvider",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderAwsCloudProvider:getClusterRkeConfigCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderAwsCloudProviderGlobal:getClusterRkeConfigCloudProviderAwsCloudProviderGlobal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride:getClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderAwsCloudProviderGlobal:getClusterRkeConfigCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableStrictZoneCheck": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elbSecurityGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterTag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "elbSecurityGroup",
                "kubernetesClusterId",
                "kubernetesClusterTag",
                "roleArn",
                "routeTableId",
                "subnetId",
                "vpc",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride:getClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "region",
                "service",
                "signingMethod",
                "signingName",
                "signingRegion",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderAzureCloudProvider:getClusterRkeConfigCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientCertPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloud": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoff": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimit": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerSku": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryAvailabilitySetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryScaleSetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useInstanceMetadata": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetResourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aadClientCertPassword",
                "aadClientCertPath",
                "aadClientId",
                "aadClientSecret",
                "cloud",
                "cloudProviderBackoff",
                "cloudProviderBackoffDuration",
                "cloudProviderBackoffExponent",
                "cloudProviderBackoffJitter",
                "cloudProviderBackoffRetries",
                "cloudProviderRateLimit",
                "cloudProviderRateLimitBucket",
                "cloudProviderRateLimitQps",
                "location",
                "maximumLoadBalancerRuleCount",
                "primaryAvailabilitySetName",
                "primaryScaleSetName",
                "resourceGroup",
                "routeTableName",
                "securityGroupName",
                "subnetName",
                "subscriptionId",
                "tenantId",
                "useInstanceMetadata",
                "useManagedIdentityExtension",
                "vmType",
                "vnetName",
                "vnetResourceGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProvider:getClusterRkeConfigCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:getClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal:getClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancer": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:getClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata:getClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderRoute:getClusterRkeConfigCloudProviderOpenstackCloudProviderRoute",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blockStorage",
                "global",
                "loadBalancer",
                "metadata",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:getClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreVolumeAz": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustDevicePath": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bsVersion",
                "ignoreVolumeAz",
                "trustDevicePath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal:getClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "caFile",
                "domainId",
                "domainName",
                "password",
                "region",
                "tenantId",
                "tenantName",
                "trustId",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:getClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "floatingNetworkId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manageSecurityGroups": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorMaxRetries": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useOctavia": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createMonitor",
                "floatingNetworkId",
                "lbMethod",
                "lbProvider",
                "lbVersion",
                "manageSecurityGroups",
                "subnetId",
                "useOctavia"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata:getClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "requestTimeout",
                "searchOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderOpenstackCloudProviderRoute:getClusterRkeConfigCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "routerId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProvider:getClusterRkeConfigCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderDisk:getClusterRkeConfigCloudProviderVsphereCloudProviderDisk",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderGlobal:getClusterRkeConfigCloudProviderVsphereCloudProviderGlobal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderNetwork:getClusterRkeConfigCloudProviderVsphereCloudProviderNetwork",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:getClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workspace": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace:getClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "disk",
                "global",
                "network",
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderDisk:getClusterRkeConfigCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scsiControllerType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderGlobal:getClusterRkeConfigCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureFlag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "insecureFlag",
                "password",
                "port",
                "soapRoundtripCount",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderNetwork:getClusterRkeConfigCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "publicNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:getClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "port",
                "soapRoundtripCount",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace:getClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultDatastore": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcepoolPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "defaultDatastore",
                "folder",
                "resourcepoolPath",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigDns:getClusterRkeConfigDns": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodelocal": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigDnsNodelocal:getClusterRkeConfigDnsNodelocal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeSelector",
                "reverseCidrs",
                "upstreamNameservers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigDnsNodelocal:getClusterRkeConfigDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterRkeConfigIngress:getClusterRkeConfigIngress": {
            "properties": {
                "dnsPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsPolicy",
                "extraArgs",
                "nodeSelector",
                "options",
                "provider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigMonitoring:getClusterRkeConfigMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicas": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigMonitoringUpdateStrategy:getClusterRkeConfigMonitoringUpdateStrategy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "options",
                "provider",
                "replicas"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigMonitoringUpdateStrategy:getClusterRkeConfigMonitoringUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigMonitoringUpdateStrategyRollingUpdate:getClusterRkeConfigMonitoringUpdateStrategyRollingUpdate",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterRkeConfigMonitoringUpdateStrategyRollingUpdate:getClusterRkeConfigMonitoringUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterRkeConfigNetwork:getClusterRkeConfigNetwork": {
            "properties": {
                "calicoNetworkProvider": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigNetworkCalicoNetworkProvider:getClusterRkeConfigNetworkCalicoNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigNetworkCanalNetworkProvider:getClusterRkeConfigNetworkCanalNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigNetworkFlannelNetworkProvider:getClusterRkeConfigNetworkFlannelNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mtu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugin": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigNetworkWeaveNetworkProvider:getClusterRkeConfigNetworkWeaveNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "options",
                "plugin"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigNetworkCalicoNetworkProvider:getClusterRkeConfigNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProvider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigNetworkCanalNetworkProvider:getClusterRkeConfigNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iface"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigNetworkFlannelNetworkProvider:getClusterRkeConfigNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iface"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigNetworkWeaveNetworkProvider:getClusterRkeConfigNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigNode:getClusterRkeConfigNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerSocket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnameOverride": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(Computed) Labels for Node Pool object (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "dockerSocket",
                "roles",
                "sshKey",
                "sshKeyPath",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigPrivateRegistry:getClusterRkeConfigPrivateRegistry": {
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServices:getClusterRkeConfigServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesEtcd:getClusterRkeConfigServicesEtcd",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeApi": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesKubeApi:getClusterRkeConfigServicesKubeApi",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeController": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesKubeController:getClusterRkeConfigServicesKubeController",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubelet": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesKubelet:getClusterRkeConfigServicesKubelet",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeproxy": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesKubeproxy:getClusterRkeConfigServicesKubeproxy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduler": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesScheduler:getClusterRkeConfigServicesScheduler",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "etcd",
                "kubeApi",
                "kubeController",
                "kubelet",
                "kubeproxy",
                "scheduler"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServicesEtcd:getClusterRkeConfigServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesEtcdBackupConfig:getClusterRkeConfigServicesEtcdBackupConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gid": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshot": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backupConfig",
                "caCert",
                "cert",
                "creation",
                "extraArgs",
                "image",
                "key",
                "path",
                "retention",
                "snapshot"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServicesEtcdBackupConfig:getClusterRkeConfigServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalHours": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig:getClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "safeTimestamp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig:getClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCa": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServicesKubeApi:getClusterRkeConfigServicesKubeApi": {
            "properties": {
                "admissionConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alwaysPullImages": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auditLog": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesKubeApiAuditLog:getClusterRkeConfigServicesKubeApiAuditLog",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventRateLimit": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesKubeApiEventRateLimit:getClusterRkeConfigServicesKubeApiEventRateLimit",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podSecurityPolicy": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesKubeApiSecretsEncryptionConfig:getClusterRkeConfigServicesKubeApiSecretsEncryptionConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceNodePortRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image",
                "serviceClusterIpRange",
                "serviceNodePortRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServicesKubeApiAuditLog:getClusterRkeConfigServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigServicesKubeApiAuditLogConfiguration:getClusterRkeConfigServicesKubeApiAuditLogConfiguration",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServicesKubeApiAuditLogConfiguration:getClusterRkeConfigServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBackup": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "policy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServicesKubeApiEventRateLimit:getClusterRkeConfigServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterRkeConfigServicesKubeApiSecretsEncryptionConfig:getClusterRkeConfigServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterRkeConfigServicesKubeController:getClusterRkeConfigServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterCidr",
                "extraArgs",
                "image",
                "serviceClusterIpRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServicesKubelet:getClusterRkeConfigServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failSwapOn": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "generateServingCertificate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infraContainerImage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterDnsServer",
                "clusterDomain",
                "extraArgs",
                "failSwapOn",
                "image",
                "infraContainerImage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServicesKubeproxy:getClusterRkeConfigServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigServicesScheduler:getClusterRkeConfigServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigUpgradeStrategy:getClusterRkeConfigUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drainInput": {
                    "$ref": "#/types/rancher2:/getClusterRkeConfigUpgradeStrategyDrainInput:getClusterRkeConfigUpgradeStrategyDrainInput",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableControlplane": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableWorker": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "drainInput"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterRkeConfigUpgradeStrategyDrainInput:getClusterRkeConfigUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "force": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gracePeriod": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterScanScanConfig:getClusterScanScanConfig": {
            "properties": {
                "cisScanConfig": {
                    "$ref": "#/types/rancher2:/getClusterScanScanConfigCisScanConfig:getClusterScanScanConfigCisScanConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cisScanConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterScanScanConfigCisScanConfig:getClusterScanScanConfigCisScanConfig": {
            "properties": {
                "debugMaster": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "debugWorker": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideBenchmarkVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideSkips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterScheduledClusterScan:getClusterScheduledClusterScan": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scanConfig": {
                    "$ref": "#/types/rancher2:/getClusterScheduledClusterScanScanConfig:getClusterScheduledClusterScanScanConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleConfig": {
                    "$ref": "#/types/rancher2:/getClusterScheduledClusterScanScheduleConfig:getClusterScheduledClusterScanScheduleConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scanConfig",
                "scheduleConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterScheduledClusterScanScanConfig:getClusterScheduledClusterScanScanConfig": {
            "properties": {
                "cisScanConfig": {
                    "$ref": "#/types/rancher2:/getClusterScheduledClusterScanScanConfigCisScanConfig:getClusterScheduledClusterScanScanConfigCisScanConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cisScanConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterScheduledClusterScanScanConfigCisScanConfig:getClusterScheduledClusterScanScanConfigCisScanConfig": {
            "properties": {
                "debugMaster": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "debugWorker": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideBenchmarkVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideSkips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterScheduledClusterScanScheduleConfig:getClusterScheduledClusterScanScheduleConfig": {
            "properties": {
                "cronSchedule": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cronSchedule",
                "retention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateMember:getClusterTemplateMember": {
            "properties": {
                "accessType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupPrincipalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userPrincipalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevision:getClusterTemplateTemplateRevision": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(Computed) Annotations for the cluster template (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterConfig": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfig:getClusterTemplateTemplateRevisionClusterConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterTemplateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "default": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(Computed) Labels for the cluster template (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionQuestion:getClusterTemplateTemplateRevisionQuestion"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "clusterConfig",
                "clusterTemplateId",
                "id",
                "labels",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfig:getClusterTemplateTemplateRevisionClusterConfig": {
            "properties": {
                "clusterAuthEndpoint": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint:getClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultClusterRoleForProjectMembers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultPodSecurityPolicyTemplateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredAgentImage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "desiredAuthImage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerRootDir": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableClusterAlerting": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableClusterMonitoring": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduledClusterScan": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScan:getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScan",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "windowsPreferedCluster": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterAuthEndpoint",
                "defaultClusterRoleForProjectMembers",
                "defaultPodSecurityPolicyTemplateId",
                "desiredAgentImage",
                "desiredAuthImage",
                "dockerRootDir",
                "rkeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint:getClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfig": {
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addons": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authentication": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication:getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authorization": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization:getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bastionHost": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost:getClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dns": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDns:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDns",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ingress": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitoring": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNode:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNode"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry:getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServices:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServices",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshCertPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addonJobTimeout",
                "authentication",
                "authorization",
                "bastionHost",
                "cloudProvider",
                "dns",
                "ingress",
                "kubernetesVersion",
                "monitoring",
                "network",
                "prefixPath",
                "services",
                "sshCertPath",
                "sshKeyPath",
                "upgradeStrategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication:getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sans",
                "strategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization:getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization": {
            "properties": {
                "mode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "options"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost:getClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "sshKey",
                "sshKeyPath",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider": {
            "properties": {
                "awsCloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCloudProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "customCloudProvider",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableStrictZoneCheck": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "elbSecurityGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubernetesClusterTag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleArn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpc": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "elbSecurityGroup",
                "kubernetesClusterId",
                "kubernetesClusterTag",
                "roleArn",
                "routeTableId",
                "subnetId",
                "vpc",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "signingRegion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "region",
                "service",
                "signingMethod",
                "signingName",
                "signingRegion",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientCertPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "aadClientSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloud": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoff": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimit": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerSku": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryAvailabilitySetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryScaleSetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subscriptionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useInstanceMetadata": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vmType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetResourceGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "aadClientCertPassword",
                "aadClientCertPath",
                "aadClientId",
                "aadClientSecret",
                "cloud",
                "cloudProviderBackoff",
                "cloudProviderBackoffDuration",
                "cloudProviderBackoffExponent",
                "cloudProviderBackoffJitter",
                "cloudProviderBackoffRetries",
                "cloudProviderRateLimit",
                "cloudProviderRateLimitBucket",
                "cloudProviderRateLimitQps",
                "location",
                "maximumLoadBalancerRuleCount",
                "primaryAvailabilitySetName",
                "primaryScaleSetName",
                "resourceGroup",
                "routeTableName",
                "securityGroupName",
                "subnetName",
                "subscriptionId",
                "tenantId",
                "useInstanceMetadata",
                "useManagedIdentityExtension",
                "vmType",
                "vnetName",
                "vnetResourceGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancer": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "route": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blockStorage",
                "global",
                "loadBalancer",
                "metadata",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreVolumeAz": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustDevicePath": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bsVersion",
                "ignoreVolumeAz",
                "trustDevicePath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tenantName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "caFile",
                "domainId",
                "domainName",
                "password",
                "region",
                "tenantId",
                "tenantName",
                "trustId",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "floatingNetworkId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbMethod": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lbVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "manageSecurityGroups": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorDelay": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorMaxRetries": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "monitorTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useOctavia": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createMonitor",
                "floatingNetworkId",
                "lbMethod",
                "lbProvider",
                "lbVersion",
                "manageSecurityGroups",
                "subnetId",
                "useOctavia"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchOrder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "requestTimeout",
                "searchOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "routerId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "global": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "network": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workspace": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "disk",
                "global",
                "network",
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scsiControllerType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecureFlag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "insecureFlag",
                "password",
                "port",
                "soapRoundtripCount",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "publicNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "port",
                "soapRoundtripCount",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultDatastore": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcepoolPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "defaultDatastore",
                "folder",
                "resourcepoolPath",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDns:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDns": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodelocal": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeSelector",
                "reverseCidrs",
                "upstreamNameservers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress": {
            "properties": {
                "dnsPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsPolicy",
                "extraArgs",
                "nodeSelector",
                "options",
                "provider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicas": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "options",
                "provider",
                "replicas"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork": {
            "properties": {
                "calicoNetworkProvider": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mtu": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugin": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "options",
                "plugin"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProvider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iface"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "iface"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNode:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dockerSocket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostnameOverride": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(Computed) Labels for the cluster template (map)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nodeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshKeyPath": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "dockerSocket",
                "roles",
                "sshKey",
                "sshKeyPath",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry:getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry": {
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServices:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeApi": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeController": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubelet": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kubeproxy": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduler": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "etcd",
                "kubeApi",
                "kubeController",
                "kubelet",
                "kubeproxy",
                "scheduler"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "caCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "creation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gid": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshot": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uid": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backupConfig",
                "caCert",
                "cert",
                "creation",
                "extraArgs",
                "image",
                "key",
                "path",
                "retention",
                "snapshot"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalHours": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "safeTimestamp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCa": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi": {
            "properties": {
                "admissionConfiguration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alwaysPullImages": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "auditLog": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventRateLimit": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podSecurityPolicy": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceNodePortRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image",
                "serviceClusterIpRange",
                "serviceNodePortRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAge": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBackup": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "policy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterCidr",
                "extraArgs",
                "image",
                "serviceClusterIpRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterDomain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "failSwapOn": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "generateServingCertificate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "infraContainerImage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterDnsServer",
                "clusterDomain",
                "extraArgs",
                "failSwapOn",
                "image",
                "infraContainerImage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drainInput": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput:getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableControlplane": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailableWorker": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "drainInput"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput:getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "force": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gracePeriod": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScan:getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScan": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scanConfig": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfig:getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scheduleConfig": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfig:getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scanConfig",
                "scheduleConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfig:getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfig": {
            "properties": {
                "cisScanConfig": {
                    "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfig:getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cisScanConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfig:getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfig": {
            "properties": {
                "debugMaster": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "debugWorker": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideBenchmarkVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "overrideSkips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfig:getClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfig": {
            "properties": {
                "cronSchedule": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cronSchedule",
                "retention"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getClusterTemplateTemplateRevisionQuestion:getClusterTemplateTemplateRevisionQuestion": {
            "properties": {
                "default": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "required": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "default",
                "variable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getEtcdBackupBackupConfig:getEtcdBackupBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalHours": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retention": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:/getEtcdBackupBackupConfigS3BackupConfig:getEtcdBackupBackupConfigS3BackupConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "safeTimestamp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getEtcdBackupBackupConfigS3BackupConfig:getEtcdBackupBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customCa": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "folder": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getMultiClusterAppAnswer:getMultiClusterAppAnswer": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "projectId",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getMultiClusterAppMember:getMultiClusterAppMember": {
            "properties": {
                "accessType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupPrincipalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "userPrincipalId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getMultiClusterAppTarget:getMultiClusterAppTarget": {
            "properties": {
                "appId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthState": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appId",
                "healthState",
                "projectId",
                "state"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getMultiClusterAppUpgradeStrategy:getMultiClusterAppUpgradeStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:/getMultiClusterAppUpgradeStrategyRollingUpdate:getMultiClusterAppUpgradeStrategyRollingUpdate",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getMultiClusterAppUpgradeStrategyRollingUpdate:getMultiClusterAppUpgradeStrategyRollingUpdate": {
            "properties": {
                "batchSize": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getNamespaceContainerResourceLimit:getNamespaceContainerResourceLimit": {
            "properties": {
                "limitsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getNamespaceResourceQuota:getNamespaceResourceQuota": {
            "properties": {
                "limit": {
                    "$ref": "#/types/rancher2:/getNamespaceResourceQuotaLimit:getNamespaceResourceQuotaLimit",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "limit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getNamespaceResourceQuotaLimit:getNamespaceResourceQuotaLimit": {
            "properties": {
                "configMaps": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "persistentVolumeClaims": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pods": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationControllers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsStorage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secrets": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesLoadBalancers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesNodePorts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getNodePoolNodeTaint:getNodePoolNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeAdded": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "timeAdded",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getNotifierPagerdutyConfig:getNotifierPagerdutyConfig": {
            "properties": {
                "proxyUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getNotifierSlackConfig:getNotifierSlackConfig": {
            "properties": {
                "defaultRecipient": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultRecipient",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getNotifierSmtpConfig:getNotifierSmtpConfig": {
            "properties": {
                "defaultRecipient": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sender": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultRecipient",
                "host",
                "port",
                "sender"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getNotifierWebhookConfig:getNotifierWebhookConfig": {
            "properties": {
                "proxyUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getNotifierWechatConfig:getNotifierWechatConfig": {
            "properties": {
                "agent": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "corp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultRecipient": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipientType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "agent",
                "corp",
                "defaultRecipient",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getPodSecurityPolicyTemplateAllowedCsiDriver:getPodSecurityPolicyTemplateAllowedCsiDriver": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the PodSecurityPolicyTemplate (string)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateAllowedFlexVolume:getPodSecurityPolicyTemplateAllowedFlexVolume": {
            "properties": {
                "driver": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "driver"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateAllowedHostPath:getPodSecurityPolicyTemplateAllowedHostPath": {
            "properties": {
                "pathPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnly": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "pathPrefix"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateFsGroup:getPodSecurityPolicyTemplateFsGroup": {
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateFsGroupRange:getPodSecurityPolicyTemplateFsGroupRange"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rule": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ranges"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getPodSecurityPolicyTemplateFsGroupRange:getPodSecurityPolicyTemplateFsGroupRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateHostPort:getPodSecurityPolicyTemplateHostPort": {
            "properties": {
                "max": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateRunAsGroup:getPodSecurityPolicyTemplateRunAsGroup": {
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateRunAsGroupRange:getPodSecurityPolicyTemplateRunAsGroupRange"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rule": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rule"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateRunAsGroupRange:getPodSecurityPolicyTemplateRunAsGroupRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateRunAsUser:getPodSecurityPolicyTemplateRunAsUser": {
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateRunAsUserRange:getPodSecurityPolicyTemplateRunAsUserRange"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rule": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rule"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateRunAsUserRange:getPodSecurityPolicyTemplateRunAsUserRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateRuntimeClass:getPodSecurityPolicyTemplateRuntimeClass": {
            "properties": {
                "allowedRuntimeClassNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultRuntimeClassName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedRuntimeClassNames"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateSeLinux:getPodSecurityPolicyTemplateSeLinux": {
            "properties": {
                "rule": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "seLinuxOption": {
                    "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateSeLinuxSeLinuxOption:getPodSecurityPolicyTemplateSeLinuxSeLinuxOption",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rule"
            ]
        },
        "rancher2:/getPodSecurityPolicyTemplateSeLinuxSeLinuxOption:getPodSecurityPolicyTemplateSeLinuxSeLinuxOption": {
            "properties": {
                "level": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getPodSecurityPolicyTemplateSupplementalGroup:getPodSecurityPolicyTemplateSupplementalGroup": {
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateSupplementalGroupRange:getPodSecurityPolicyTemplateSupplementalGroupRange"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rule": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ranges"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getPodSecurityPolicyTemplateSupplementalGroupRange:getPodSecurityPolicyTemplateSupplementalGroupRange": {
            "properties": {
                "max": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "max",
                "min"
            ]
        },
        "rancher2:/getProjectAlertGroupRecipient:getProjectAlertGroupRecipient": {
            "properties": {
                "defaultRecipient": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifierType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recipient": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "notifierId",
                "notifierType",
                "recipient"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectAlertRuleMetricRule:getProjectAlertRuleMetricRule": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thresholdValue": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "expression",
                "thresholdValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectAlertRulePodRule:getProjectAlertRulePodRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "podId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restartIntervalSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restartTimes": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "podId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectAlertRuleWorkloadRule:getProjectAlertRuleWorkloadRule": {
            "properties": {
                "availablePercentage": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workloadId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getProjectContainerResourceLimit:getProjectContainerResourceLimit": {
            "properties": {
                "limitsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getProjectLoggingCustomTargetConfig:getProjectLoggingCustomTargetConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "content"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectLoggingElasticsearchConfig:getProjectLoggingElasticsearchConfig": {
            "properties": {
                "authPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "authUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dateFormat": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexPrefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sslVerify"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectLoggingFluentdConfig:getProjectLoggingFluentdConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableTls": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fluentServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/getProjectLoggingFluentdConfigFluentServer:getProjectLoggingFluentdConfigFluentServer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fluentServers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectLoggingFluentdConfigFluentServer:getProjectLoggingFluentdConfigFluentServer": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharedKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standby": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectLoggingKafkaConfig:getProjectLoggingKafkaConfig": {
            "properties": {
                "brokerEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zookeeperEndpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "topic"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectLoggingSplunkConfig:getProjectLoggingSplunkConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKeyPass": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "index": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sslVerify",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectLoggingSyslogConfig:getProjectLoggingSyslogConfig": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientCert": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "program": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslVerify": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sslVerify"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectResourceQuota:getProjectResourceQuota": {
            "properties": {
                "namespaceDefaultLimit": {
                    "$ref": "#/types/rancher2:/getProjectResourceQuotaNamespaceDefaultLimit:getProjectResourceQuotaNamespaceDefaultLimit",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectLimit": {
                    "$ref": "#/types/rancher2:/getProjectResourceQuotaProjectLimit:getProjectResourceQuotaProjectLimit",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "namespaceDefaultLimit",
                "projectLimit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getProjectResourceQuotaNamespaceDefaultLimit:getProjectResourceQuotaNamespaceDefaultLimit": {
            "properties": {
                "configMaps": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "persistentVolumeClaims": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pods": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationControllers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsStorage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secrets": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesLoadBalancers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesNodePorts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getProjectResourceQuotaProjectLimit:getProjectResourceQuotaProjectLimit": {
            "properties": {
                "configMaps": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "limitsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "persistentVolumeClaims": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pods": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationControllers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsCpu": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsMemory": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requestsStorage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secrets": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesLoadBalancers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servicesNodePorts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getRegistryRegistry:getRegistryRegistry": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:/getRoleTempalteRule:getRoleTempalteRule": {
            "properties": {
                "apiGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nonResourceUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "verbs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rancher2:/getRoleTemplateRule:getRoleTemplateRule": {
            "properties": {
                "apiGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nonResourceUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "verbs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the rancher2 package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "API Key used to authenticate with the rancher server\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_ACCESS_KEY"
                    ]
                }
            },
            "apiUrl": {
                "type": "string",
                "description": "The URL to the rancher API\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_URL"
                    ]
                }
            },
            "bootstrap": {
                "type": "boolean",
                "description": "Bootstrap rancher server\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RANCHER_BOOTSTRAP"
                    ]
                }
            },
            "caCerts": {
                "type": "string",
                "description": "CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_CA_CERTS"
                    ]
                }
            },
            "insecure": {
                "type": "boolean",
                "description": "Allow insecure connections to Rancher. Mandatory if self signed tls and not ca_certs provided\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RANCHER_INSECURE"
                    ]
                }
            },
            "retries": {
                "type": "integer",
                "description": "Rancher connection retries\n"
            },
            "secretKey": {
                "type": "string",
                "description": "API secret used to authenticate with the rancher server\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_SECRET_KEY"
                    ]
                }
            },
            "tokenKey": {
                "type": "string",
                "description": "API token used to authenticate with the rancher server\n",
                "defaultInfo": {
                    "environment": [
                        "RANCHER_TOKEN_KEY"
                    ]
                }
            }
        }
    },
    "resources": {
        "rancher2:index/activeDirectory:ActiveDirectory": {
            "description": "Provides a Rancher v2 Auth Config ActiveDirectory resource. This can be used to configure and enable Auth Config ActiveDirectory for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `activedirectory_user://\u003cDN\u003e`  `activedirectory_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "CA certificate for TLS if selfsigned (string)\n"
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "ActiveDirectory connection timeout. Default `5000` (int)\n"
                },
                "defaultLoginDomain": {
                    "type": "string",
                    "description": "ActiveDirectory defult login domain (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `distinguishedName` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default `member` (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `distinguishedName` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default `name` (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `group` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default `sAMAccountName` (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "groupSearchFilter": {
                    "type": "string",
                    "description": "Group search filter (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default `false` (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "ActiveDirectory port. Default `389` (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ActiveDirectory servers list (list)\n"
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access ActiveDirectory service (string)\n"
                },
                "serviceAccountUsername": {
                    "type": "string",
                    "description": "Service account DN for access ActiveDirectory service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask. Default `2` (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default `sAMAccountName` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `name` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default `person` (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `sAMAccountName|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                },
                "userSearchFilter": {
                    "type": "string",
                    "description": "User search filter (string)\n"
                }
            },
            "required": [
                "annotations",
                "groupDnAttribute",
                "groupMemberMappingAttribute",
                "groupMemberUserAttribute",
                "groupNameAttribute",
                "groupObjectClass",
                "groupSearchAttribute",
                "groupSearchBase",
                "groupSearchFilter",
                "labels",
                "name",
                "nestedGroupMembershipEnabled",
                "servers",
                "serviceAccountPassword",
                "serviceAccountUsername",
                "tls",
                "type",
                "userEnabledAttribute",
                "userLoginAttribute",
                "userNameAttribute",
                "userObjectClass",
                "userSearchAttribute",
                "userSearchBase",
                "userSearchFilter"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `activedirectory_user://\u003cDN\u003e`  `activedirectory_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "CA certificate for TLS if selfsigned (string)\n"
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "ActiveDirectory connection timeout. Default `5000` (int)\n"
                },
                "defaultLoginDomain": {
                    "type": "string",
                    "description": "ActiveDirectory defult login domain (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `distinguishedName` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default `member` (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `distinguishedName` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default `name` (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `group` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default `sAMAccountName` (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "groupSearchFilter": {
                    "type": "string",
                    "description": "Group search filter (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default `false` (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "ActiveDirectory port. Default `389` (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ActiveDirectory servers list (list)\n"
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access ActiveDirectory service (string)\n"
                },
                "serviceAccountUsername": {
                    "type": "string",
                    "description": "Service account DN for access ActiveDirectory service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask. Default `2` (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default `sAMAccountName` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `name` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default `person` (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `sAMAccountName|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                },
                "userSearchFilter": {
                    "type": "string",
                    "description": "User search filter (string)\n"
                }
            },
            "requiredInputs": [
                "servers",
                "serviceAccountPassword",
                "serviceAccountUsername",
                "userSearchBase"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActiveDirectory resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `activedirectory_user://\u003cDN\u003e`  `activedirectory_group://\u003cDN\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "CA certificate for TLS if selfsigned (string)\n"
                    },
                    "connectionTimeout": {
                        "type": "integer",
                        "description": "ActiveDirectory connection timeout. Default `5000` (int)\n"
                    },
                    "defaultLoginDomain": {
                        "type": "string",
                        "description": "ActiveDirectory defult login domain (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default `true` (bool)\n"
                    },
                    "groupDnAttribute": {
                        "type": "string",
                        "description": "Group DN attribute. Default `distinguishedName` (string)\n"
                    },
                    "groupMemberMappingAttribute": {
                        "type": "string",
                        "description": "Group member mapping attribute. Default `member` (string)\n"
                    },
                    "groupMemberUserAttribute": {
                        "type": "string",
                        "description": "Group member user attribute. Default `distinguishedName` (string)\n"
                    },
                    "groupNameAttribute": {
                        "type": "string",
                        "description": "Group name attribute. Default `name` (string)\n"
                    },
                    "groupObjectClass": {
                        "type": "string",
                        "description": "Group object class. Default `group` (string)\n"
                    },
                    "groupSearchAttribute": {
                        "type": "string",
                        "description": "Group search attribute. Default `sAMAccountName` (string)\n"
                    },
                    "groupSearchBase": {
                        "type": "string",
                        "description": "Group search base (string)\n"
                    },
                    "groupSearchFilter": {
                        "type": "string",
                        "description": "Group search filter (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "nestedGroupMembershipEnabled": {
                        "type": "boolean",
                        "description": "Nested group membership enable. Default `false` (bool)\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "ActiveDirectory port. Default `389` (int)\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "ActiveDirectory servers list (list)\n"
                    },
                    "serviceAccountPassword": {
                        "type": "string",
                        "description": "Service account password for access ActiveDirectory service (string)\n"
                    },
                    "serviceAccountUsername": {
                        "type": "string",
                        "description": "Service account DN for access ActiveDirectory service (string)\n"
                    },
                    "tls": {
                        "type": "boolean",
                        "description": "Enable TLS connection (bool)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "userDisabledBitMask": {
                        "type": "integer",
                        "description": "User disabled bit mask. Default `2` (int)\n"
                    },
                    "userEnabledAttribute": {
                        "type": "string",
                        "description": "User enable attribute (string)\n"
                    },
                    "userLoginAttribute": {
                        "type": "string",
                        "description": "User login attribute. Default `sAMAccountName` (string)\n"
                    },
                    "userNameAttribute": {
                        "type": "string",
                        "description": "User name attribute. Default `name` (string)\n"
                    },
                    "userObjectClass": {
                        "type": "string",
                        "description": "User object class. Default `person` (string)\n"
                    },
                    "userSearchAttribute": {
                        "type": "string",
                        "description": "User search attribute. Default `sAMAccountName|sn|givenName` (string)\n"
                    },
                    "userSearchBase": {
                        "type": "string",
                        "description": "User search base DN (string)\n"
                    },
                    "userSearchFilter": {
                        "type": "string",
                        "description": "User search filter (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/app:App": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for App object (map)\n"
                },
                "answers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Answers for the app template. If modified, app will be upgraded (map)\n"
                },
                "catalogName": {
                    "type": "string",
                    "description": "Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:\n* add cluster ID before name, `local:\u003cname\u003e` or `c-XXXXX:\u003cname\u003e`\n* add project ID before name, `p-XXXXX:\u003cname\u003e`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the app (string)\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "(Computed) The url of the app template on a catalog (string)\n"
                },
                "forceUpgrade": {
                    "type": "boolean",
                    "description": "Force app upgrade (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for App object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the app (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where the app will be installed (string)\n"
                },
                "revisionId": {
                    "type": "string",
                    "description": "Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revision_id` (string)\n"
                },
                "targetNamespace": {
                    "type": "string",
                    "description": "The namespace name where the app will be installed (string)\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "Template name of the app. If modified, app will be upgraded (string)\n"
                },
                "templateVersion": {
                    "type": "string",
                    "description": "Template version of the app. If modified, app will be upgraded. Default: `latest` (string)\n"
                },
                "valuesYaml": {
                    "type": "string",
                    "description": "values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)\n"
                }
            },
            "required": [
                "annotations",
                "catalogName",
                "description",
                "externalId",
                "labels",
                "name",
                "projectId",
                "revisionId",
                "targetNamespace",
                "templateName",
                "templateVersion"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for App object (map)\n"
                },
                "answers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Answers for the app template. If modified, app will be upgraded (map)\n"
                },
                "catalogName": {
                    "type": "string",
                    "description": "Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:\n* add cluster ID before name, `local:\u003cname\u003e` or `c-XXXXX:\u003cname\u003e`\n* add project ID before name, `p-XXXXX:\u003cname\u003e`\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the app (string)\n"
                },
                "forceUpgrade": {
                    "type": "boolean",
                    "description": "Force app upgrade (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for App object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the app (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where the app will be installed (string)\n"
                },
                "revisionId": {
                    "type": "string",
                    "description": "Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revision_id` (string)\n"
                },
                "targetNamespace": {
                    "type": "string",
                    "description": "The namespace name where the app will be installed (string)\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "Template name of the app. If modified, app will be upgraded (string)\n"
                },
                "templateVersion": {
                    "type": "string",
                    "description": "Template version of the app. If modified, app will be upgraded. Default: `latest` (string)\n"
                },
                "valuesYaml": {
                    "type": "string",
                    "description": "values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)\n"
                }
            },
            "requiredInputs": [
                "catalogName",
                "projectId",
                "targetNamespace",
                "templateName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering App resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for App object (map)\n"
                    },
                    "answers": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Answers for the app template. If modified, app will be upgraded (map)\n"
                    },
                    "catalogName": {
                        "type": "string",
                        "description": "Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:\n* add cluster ID before name, `local:\u003cname\u003e` or `c-XXXXX:\u003cname\u003e`\n* add project ID before name, `p-XXXXX:\u003cname\u003e`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the app (string)\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "(Computed) The url of the app template on a catalog (string)\n"
                    },
                    "forceUpgrade": {
                        "type": "boolean",
                        "description": "Force app upgrade (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for App object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the app (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where the app will be installed (string)\n"
                    },
                    "revisionId": {
                        "type": "string",
                        "description": "Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revision_id` (string)\n"
                    },
                    "targetNamespace": {
                        "type": "string",
                        "description": "The namespace name where the app will be installed (string)\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "Template name of the app. If modified, app will be upgraded (string)\n"
                    },
                    "templateVersion": {
                        "type": "string",
                        "description": "Template version of the app. If modified, app will be upgraded. Default: `latest` (string)\n"
                    },
                    "valuesYaml": {
                        "type": "string",
                        "description": "values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigAdfs:AuthConfigAdfs": {
            "description": "Provides a Rancher v2 Auth Config ADFS resource. This can be used to configure and enable Auth Config ADFS for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config ADFS\nconst adfs = new rancher2.AuthConfigAdfs(\"adfs\", {\n    displayNameField: \"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groupsField: \"\u003cGROUPS_FIELD\u003e\",\n    idpMetadataContent: \"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancherApiHost: \"https://\u003cRANCHER_API_HOST\u003e\",\n    spCert: \"\u003cSP_CERT\u003e\",\n    spKey: \"\u003cSP_KEY\u003e\",\n    uidField: \"\u003cUID_FIELD\u003e\",\n    userNameField: \"\u003cUSER_NAME_FIELD\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config ADFS\nadfs = rancher2.AuthConfigAdfs(\"adfs\",\n    display_name_field=\"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groups_field=\"\u003cGROUPS_FIELD\u003e\",\n    idp_metadata_content=\"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancher_api_host=\"https://\u003cRANCHER_API_HOST\u003e\",\n    sp_cert=\"\u003cSP_CERT\u003e\",\n    sp_key=\"\u003cSP_KEY\u003e\",\n    uid_field=\"\u003cUID_FIELD\u003e\",\n    user_name_field=\"\u003cUSER_NAME_FIELD\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Auth Config ADFS\n        var adfs = new Rancher2.AuthConfigAdfs(\"adfs\", new Rancher2.AuthConfigAdfsArgs\n        {\n            DisplayNameField = \"\u003cDISPLAY_NAME_FIELD\u003e\",\n            GroupsField = \"\u003cGROUPS_FIELD\u003e\",\n            IdpMetadataContent = \"\u003cIDP_METADATA_CONTENT\u003e\",\n            RancherApiHost = \"https://\u003cRANCHER_API_HOST\u003e\",\n            SpCert = \"\u003cSP_CERT\u003e\",\n            SpKey = \"\u003cSP_KEY\u003e\",\n            UidField = \"\u003cUID_FIELD\u003e\",\n            UserNameField = \"\u003cUSER_NAME_FIELD\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewAuthConfigAdfs(ctx, \"adfs\", \u0026rancher2.AuthConfigAdfsArgs{\n\t\t\tDisplayNameField:   pulumi.String(\"\u003cDISPLAY_NAME_FIELD\u003e\"),\n\t\t\tGroupsField:        pulumi.String(\"\u003cGROUPS_FIELD\u003e\"),\n\t\t\tIdpMetadataContent: pulumi.String(\"\u003cIDP_METADATA_CONTENT\u003e\"),\n\t\t\tRancherApiHost:     pulumi.String(\"https://\u003cRANCHER_API_HOST\u003e\"),\n\t\t\tSpCert:             pulumi.String(\"\u003cSP_CERT\u003e\"),\n\t\t\tSpKey:              pulumi.String(\"\u003cSP_KEY\u003e\"),\n\t\t\tUidField:           pulumi.String(\"\u003cUID_FIELD\u003e\"),\n\t\t\tUserNameField:      pulumi.String(\"\u003cUSER_NAME_FIELD\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `adfs_user://\u003cUSER_ID\u003e`  `adfs_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "ADFS display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "ADFS group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "ADFS IDP metadata content (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "ADFS SP cert (string)\n"
                },
                "spKey": {
                    "type": "string",
                    "description": "ADFS SP key (string)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "ADFS UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "ADFS user name field (string)\n"
                }
            },
            "required": [
                "annotations",
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "labels",
                "name",
                "rancherApiHost",
                "spCert",
                "spKey",
                "type",
                "uidField",
                "userNameField"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `adfs_user://\u003cUSER_ID\u003e`  `adfs_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "ADFS display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "ADFS group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "ADFS IDP metadata content (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "ADFS SP cert (string)\n"
                },
                "spKey": {
                    "type": "string",
                    "description": "ADFS SP key (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "ADFS UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "ADFS user name field (string)\n"
                }
            },
            "requiredInputs": [
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "rancherApiHost",
                "spCert",
                "spKey",
                "uidField",
                "userNameField"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigAdfs resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `adfs_user://\u003cUSER_ID\u003e`  `adfs_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "displayNameField": {
                        "type": "string",
                        "description": "ADFS display name field (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default `true` (bool)\n"
                    },
                    "groupsField": {
                        "type": "string",
                        "description": "ADFS group field (string)\n"
                    },
                    "idpMetadataContent": {
                        "type": "string",
                        "description": "ADFS IDP metadata content (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherApiHost": {
                        "type": "string",
                        "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                    },
                    "spCert": {
                        "type": "string",
                        "description": "ADFS SP cert (string)\n"
                    },
                    "spKey": {
                        "type": "string",
                        "description": "ADFS SP key (string)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "uidField": {
                        "type": "string",
                        "description": "ADFS UID field (string)\n"
                    },
                    "userNameField": {
                        "type": "string",
                        "description": "ADFS user name field (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigAzureAd:AuthConfigAzureAd": {
            "description": "Provides a Rancher v2 Auth Config AzureAD resource. This can be used to configure and enable Auth Config AzureAD for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config AzureAD\nconst azuread = new rancher2.AuthConfigAzureAd(\"azuread\", {\n    applicationId: \"\u003cAZUREAD_APP_ID\u003e\",\n    applicationSecret: \"\u003cAZUREAD_APP_SECRET\u003e\",\n    authEndpoint: \"\u003cAZUREAD_AUTH_ENDPOINT\u003e\",\n    graphEndpoint: \"\u003cAZUREAD_GRAPH_ENDPOINT\u003e\",\n    rancherUrl: \"\u003cRANCHER_URL\u003e\",\n    tenantId: \"\u003cAZUREAD_TENANT_ID\u003e\",\n    tokenEndpoint: \"\u003cAZUREAD_TOKEN_ENDPOINT\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config AzureAD\nazuread = rancher2.AuthConfigAzureAd(\"azuread\",\n    application_id=\"\u003cAZUREAD_APP_ID\u003e\",\n    application_secret=\"\u003cAZUREAD_APP_SECRET\u003e\",\n    auth_endpoint=\"\u003cAZUREAD_AUTH_ENDPOINT\u003e\",\n    graph_endpoint=\"\u003cAZUREAD_GRAPH_ENDPOINT\u003e\",\n    rancher_url=\"\u003cRANCHER_URL\u003e\",\n    tenant_id=\"\u003cAZUREAD_TENANT_ID\u003e\",\n    token_endpoint=\"\u003cAZUREAD_TOKEN_ENDPOINT\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Auth Config AzureAD\n        var azuread = new Rancher2.AuthConfigAzureAd(\"azuread\", new Rancher2.AuthConfigAzureAdArgs\n        {\n            ApplicationId = \"\u003cAZUREAD_APP_ID\u003e\",\n            ApplicationSecret = \"\u003cAZUREAD_APP_SECRET\u003e\",\n            AuthEndpoint = \"\u003cAZUREAD_AUTH_ENDPOINT\u003e\",\n            GraphEndpoint = \"\u003cAZUREAD_GRAPH_ENDPOINT\u003e\",\n            RancherUrl = \"\u003cRANCHER_URL\u003e\",\n            TenantId = \"\u003cAZUREAD_TENANT_ID\u003e\",\n            TokenEndpoint = \"\u003cAZUREAD_TOKEN_ENDPOINT\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewAuthConfigAzureAd(ctx, \"azuread\", \u0026rancher2.AuthConfigAzureAdArgs{\n\t\t\tApplicationId:     pulumi.String(\"\u003cAZUREAD_APP_ID\u003e\"),\n\t\t\tApplicationSecret: pulumi.String(\"\u003cAZUREAD_APP_SECRET\u003e\"),\n\t\t\tAuthEndpoint:      pulumi.String(\"\u003cAZUREAD_AUTH_ENDPOINT\u003e\"),\n\t\t\tGraphEndpoint:     pulumi.String(\"\u003cAZUREAD_GRAPH_ENDPOINT\u003e\"),\n\t\t\tRancherUrl:        pulumi.String(\"\u003cRANCHER_URL\u003e\"),\n\t\t\tTenantId:          pulumi.String(\"\u003cAZUREAD_TENANT_ID\u003e\"),\n\t\t\tTokenEndpoint:     pulumi.String(\"\u003cAZUREAD_TOKEN_ENDPOINT\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `azuread_user://\u003cUSER_ID\u003e`  `azuread_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "AzureAD auth application ID (string)\n"
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "AzureAD auth application secret (string)\n"
                },
                "authEndpoint": {
                    "type": "string",
                    "description": "AzureAD auth endpoint (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "AzureAD endpoint. Default `https://login.microsoftonline.com/` (string)\n"
                },
                "graphEndpoint": {
                    "type": "string",
                    "description": "AzureAD graph endpoint (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherUrl": {
                    "type": "string",
                    "description": "Rancher URL (string). \"\u003crancher_url\u003e/verify-auth-azure\"\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "AzureAD tenant ID (string)\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "AzureAD token endpoint (string)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                }
            },
            "required": [
                "annotations",
                "applicationId",
                "applicationSecret",
                "authEndpoint",
                "graphEndpoint",
                "labels",
                "name",
                "rancherUrl",
                "tenantId",
                "tokenEndpoint",
                "type"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `azuread_user://\u003cUSER_ID\u003e`  `azuread_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "AzureAD auth application ID (string)\n"
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "AzureAD auth application secret (string)\n"
                },
                "authEndpoint": {
                    "type": "string",
                    "description": "AzureAD auth endpoint (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "AzureAD endpoint. Default `https://login.microsoftonline.com/` (string)\n"
                },
                "graphEndpoint": {
                    "type": "string",
                    "description": "AzureAD graph endpoint (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherUrl": {
                    "type": "string",
                    "description": "Rancher URL (string). \"\u003crancher_url\u003e/verify-auth-azure\"\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "AzureAD tenant ID (string)\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "AzureAD token endpoint (string)\n"
                }
            },
            "requiredInputs": [
                "applicationId",
                "applicationSecret",
                "authEndpoint",
                "graphEndpoint",
                "rancherUrl",
                "tenantId",
                "tokenEndpoint"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigAzureAd resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `azuread_user://\u003cUSER_ID\u003e`  `azuread_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "AzureAD auth application ID (string)\n"
                    },
                    "applicationSecret": {
                        "type": "string",
                        "description": "AzureAD auth application secret (string)\n"
                    },
                    "authEndpoint": {
                        "type": "string",
                        "description": "AzureAD auth endpoint (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default `true` (bool)\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "AzureAD endpoint. Default `https://login.microsoftonline.com/` (string)\n"
                    },
                    "graphEndpoint": {
                        "type": "string",
                        "description": "AzureAD graph endpoint (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherUrl": {
                        "type": "string",
                        "description": "Rancher URL (string). \"\u003crancher_url\u003e/verify-auth-azure\"\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "AzureAD tenant ID (string)\n"
                    },
                    "tokenEndpoint": {
                        "type": "string",
                        "description": "AzureAD token endpoint (string)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigFreeIpa:AuthConfigFreeIpa": {
            "description": "Provides a Rancher v2 Auth Config FreeIpa resource. This can be used to configure and enable Auth Config FreeIpa for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `freeipa_user://\u003cDN\u003e`  `freeipa_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n"
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "FreeIpa connection timeout. Default `5000` (int)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `entryDN` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default `member` (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `entryDN` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default `cn` (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `groupOfNames` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default `cn` (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default `false` (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "FreeIpa port. Default `389` (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "FreeIpa servers list (list)\n"
                },
                "serviceAccountDistinguishedName": {
                    "type": "string",
                    "description": "Service account DN for access FreeIpa service (string)\n"
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access FreeIpa service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default `uid` (string)\n"
                },
                "userMemberAttribute": {
                    "type": "string",
                    "description": "User member attribute. Default `memberOf` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `givenName` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default `inetorgperson` (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                }
            },
            "required": [
                "annotations",
                "groupDnAttribute",
                "groupMemberMappingAttribute",
                "groupMemberUserAttribute",
                "groupNameAttribute",
                "groupObjectClass",
                "groupSearchAttribute",
                "groupSearchBase",
                "labels",
                "name",
                "nestedGroupMembershipEnabled",
                "servers",
                "serviceAccountDistinguishedName",
                "serviceAccountPassword",
                "tls",
                "type",
                "userDisabledBitMask",
                "userEnabledAttribute",
                "userLoginAttribute",
                "userMemberAttribute",
                "userNameAttribute",
                "userObjectClass",
                "userSearchAttribute",
                "userSearchBase"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `freeipa_user://\u003cDN\u003e`  `freeipa_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n"
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "FreeIpa connection timeout. Default `5000` (int)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `entryDN` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default `member` (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `entryDN` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default `cn` (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `groupOfNames` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default `cn` (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default `false` (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "FreeIpa port. Default `389` (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "FreeIpa servers list (list)\n"
                },
                "serviceAccountDistinguishedName": {
                    "type": "string",
                    "description": "Service account DN for access FreeIpa service (string)\n"
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access FreeIpa service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default `uid` (string)\n"
                },
                "userMemberAttribute": {
                    "type": "string",
                    "description": "User member attribute. Default `memberOf` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `givenName` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default `inetorgperson` (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                }
            },
            "requiredInputs": [
                "servers",
                "serviceAccountDistinguishedName",
                "serviceAccountPassword",
                "userSearchBase"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigFreeIpa resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `freeipa_user://\u003cDN\u003e`  `freeipa_group://\u003cDN\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n"
                    },
                    "connectionTimeout": {
                        "type": "integer",
                        "description": "FreeIpa connection timeout. Default `5000` (int)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default `true` (bool)\n"
                    },
                    "groupDnAttribute": {
                        "type": "string",
                        "description": "Group DN attribute. Default `entryDN` (string)\n"
                    },
                    "groupMemberMappingAttribute": {
                        "type": "string",
                        "description": "Group member mapping attribute. Default `member` (string)\n"
                    },
                    "groupMemberUserAttribute": {
                        "type": "string",
                        "description": "Group member user attribute. Default `entryDN` (string)\n"
                    },
                    "groupNameAttribute": {
                        "type": "string",
                        "description": "Group name attribute. Default `cn` (string)\n"
                    },
                    "groupObjectClass": {
                        "type": "string",
                        "description": "Group object class. Default `groupOfNames` (string)\n"
                    },
                    "groupSearchAttribute": {
                        "type": "string",
                        "description": "Group search attribute. Default `cn` (string)\n"
                    },
                    "groupSearchBase": {
                        "type": "string",
                        "description": "Group search base (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "nestedGroupMembershipEnabled": {
                        "type": "boolean",
                        "description": "Nested group membership enable. Default `false` (bool)\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "FreeIpa port. Default `389` (int)\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FreeIpa servers list (list)\n"
                    },
                    "serviceAccountDistinguishedName": {
                        "type": "string",
                        "description": "Service account DN for access FreeIpa service (string)\n"
                    },
                    "serviceAccountPassword": {
                        "type": "string",
                        "description": "Service account password for access FreeIpa service (string)\n"
                    },
                    "tls": {
                        "type": "boolean",
                        "description": "Enable TLS connection (bool)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "userDisabledBitMask": {
                        "type": "integer",
                        "description": "User disabled bit mask (int)\n"
                    },
                    "userEnabledAttribute": {
                        "type": "string",
                        "description": "User enable attribute (string)\n"
                    },
                    "userLoginAttribute": {
                        "type": "string",
                        "description": "User login attribute. Default `uid` (string)\n"
                    },
                    "userMemberAttribute": {
                        "type": "string",
                        "description": "User member attribute. Default `memberOf` (string)\n"
                    },
                    "userNameAttribute": {
                        "type": "string",
                        "description": "User name attribute. Default `givenName` (string)\n"
                    },
                    "userObjectClass": {
                        "type": "string",
                        "description": "User object class. Default `inetorgperson` (string)\n"
                    },
                    "userSearchAttribute": {
                        "type": "string",
                        "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                    },
                    "userSearchBase": {
                        "type": "string",
                        "description": "User search base DN (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigGithub:AuthConfigGithub": {
            "description": "Provides a Rancher v2 Auth Config Github resource. This can be used to configure and enable Auth Config Github for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config Github\nconst github = new rancher2.AuthConfigGithub(\"github\", {\n    clientId: \"\u003cGITHUB_CLIENT_ID\u003e\",\n    clientSecret: \"\u003cGITHUB_CLIENT_SECRET\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config Github\ngithub = rancher2.AuthConfigGithub(\"github\",\n    client_id=\"\u003cGITHUB_CLIENT_ID\u003e\",\n    client_secret=\"\u003cGITHUB_CLIENT_SECRET\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Auth Config Github\n        var github = new Rancher2.AuthConfigGithub(\"github\", new Rancher2.AuthConfigGithubArgs\n        {\n            ClientId = \"\u003cGITHUB_CLIENT_ID\u003e\",\n            ClientSecret = \"\u003cGITHUB_CLIENT_SECRET\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewAuthConfigGithub(ctx, \"github\", \u0026rancher2.AuthConfigGithubArgs{\n\t\t\tClientId:     pulumi.String(\"\u003cGITHUB_CLIENT_ID\u003e\"),\n\t\t\tClientSecret: pulumi.String(\"\u003cGITHUB_CLIENT_SECRET\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `github_user://\u003cUSER_ID\u003e`  `github_team://\u003cGROUP_ID\u003e` `github_org://\u003cORG_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Github auth Client ID (string)\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Github auth Client secret (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Github hostname to connect. Default `github.com` (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection. Default `true` (bool)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                }
            },
            "required": [
                "annotations",
                "clientId",
                "clientSecret",
                "labels",
                "name",
                "type"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `github_user://\u003cUSER_ID\u003e`  `github_team://\u003cGROUP_ID\u003e` `github_org://\u003cORG_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Github auth Client ID (string)\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Github auth Client secret (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Github hostname to connect. Default `github.com` (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection. Default `true` (bool)\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigGithub resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `github_user://\u003cUSER_ID\u003e`  `github_team://\u003cGROUP_ID\u003e` `github_org://\u003cORG_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Github auth Client ID (string)\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Github auth Client secret (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default `true` (bool)\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Github hostname to connect. Default `github.com` (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "tls": {
                        "type": "boolean",
                        "description": "Enable TLS connection. Default `true` (bool)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigKeycloak:AuthConfigKeycloak": {
            "description": "Provides a Rancher v2 Auth Config KeyCloak resource. This can be used to configure and enable Auth Config KeyCloak for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config KeyCloak\nconst keycloak = new rancher2.AuthConfigKeycloak(\"keycloak\", {\n    displayNameField: \"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groupsField: \"\u003cGROUPS_FIELD\u003e\",\n    idpMetadataContent: \"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancherApiHost: \"https://\u003cRANCHER_API_HOST\u003e\",\n    spCert: \"\u003cSP_CERT\u003e\",\n    spKey: \"\u003cSP_KEY\u003e\",\n    uidField: \"\u003cUID_FIELD\u003e\",\n    userNameField: \"\u003cUSER_NAME_FIELD\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config KeyCloak\nkeycloak = rancher2.AuthConfigKeycloak(\"keycloak\",\n    display_name_field=\"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groups_field=\"\u003cGROUPS_FIELD\u003e\",\n    idp_metadata_content=\"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancher_api_host=\"https://\u003cRANCHER_API_HOST\u003e\",\n    sp_cert=\"\u003cSP_CERT\u003e\",\n    sp_key=\"\u003cSP_KEY\u003e\",\n    uid_field=\"\u003cUID_FIELD\u003e\",\n    user_name_field=\"\u003cUSER_NAME_FIELD\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Auth Config KeyCloak\n        var keycloak = new Rancher2.AuthConfigKeycloak(\"keycloak\", new Rancher2.AuthConfigKeycloakArgs\n        {\n            DisplayNameField = \"\u003cDISPLAY_NAME_FIELD\u003e\",\n            GroupsField = \"\u003cGROUPS_FIELD\u003e\",\n            IdpMetadataContent = \"\u003cIDP_METADATA_CONTENT\u003e\",\n            RancherApiHost = \"https://\u003cRANCHER_API_HOST\u003e\",\n            SpCert = \"\u003cSP_CERT\u003e\",\n            SpKey = \"\u003cSP_KEY\u003e\",\n            UidField = \"\u003cUID_FIELD\u003e\",\n            UserNameField = \"\u003cUSER_NAME_FIELD\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewAuthConfigKeycloak(ctx, \"keycloak\", \u0026rancher2.AuthConfigKeycloakArgs{\n\t\t\tDisplayNameField:   pulumi.String(\"\u003cDISPLAY_NAME_FIELD\u003e\"),\n\t\t\tGroupsField:        pulumi.String(\"\u003cGROUPS_FIELD\u003e\"),\n\t\t\tIdpMetadataContent: pulumi.String(\"\u003cIDP_METADATA_CONTENT\u003e\"),\n\t\t\tRancherApiHost:     pulumi.String(\"https://\u003cRANCHER_API_HOST\u003e\"),\n\t\t\tSpCert:             pulumi.String(\"\u003cSP_CERT\u003e\"),\n\t\t\tSpKey:              pulumi.String(\"\u003cSP_KEY\u003e\"),\n\t\t\tUidField:           pulumi.String(\"\u003cUID_FIELD\u003e\"),\n\t\t\tUserNameField:      pulumi.String(\"\u003cUSER_NAME_FIELD\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `keycloak_user://\u003cUSER_ID\u003e`  `keycloak_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "KeyCloak display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "KeyCloak group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "KeyCloak IDP metadata content (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "KeyCloak SP cert (string)\n"
                },
                "spKey": {
                    "type": "string",
                    "description": "KeyCloak SP key (string)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "KeyCloak UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "KeyCloak user name field (string)\n"
                }
            },
            "required": [
                "annotations",
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "labels",
                "name",
                "rancherApiHost",
                "spCert",
                "spKey",
                "type",
                "uidField",
                "userNameField"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `keycloak_user://\u003cUSER_ID\u003e`  `keycloak_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "KeyCloak display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "KeyCloak group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "KeyCloak IDP metadata content (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "KeyCloak SP cert (string)\n"
                },
                "spKey": {
                    "type": "string",
                    "description": "KeyCloak SP key (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "KeyCloak UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "KeyCloak user name field (string)\n"
                }
            },
            "requiredInputs": [
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "rancherApiHost",
                "spCert",
                "spKey",
                "uidField",
                "userNameField"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigKeycloak resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `keycloak_user://\u003cUSER_ID\u003e`  `keycloak_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "displayNameField": {
                        "type": "string",
                        "description": "KeyCloak display name field (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default `true` (bool)\n"
                    },
                    "groupsField": {
                        "type": "string",
                        "description": "KeyCloak group field (string)\n"
                    },
                    "idpMetadataContent": {
                        "type": "string",
                        "description": "KeyCloak IDP metadata content (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherApiHost": {
                        "type": "string",
                        "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                    },
                    "spCert": {
                        "type": "string",
                        "description": "KeyCloak SP cert (string)\n"
                    },
                    "spKey": {
                        "type": "string",
                        "description": "KeyCloak SP key (string)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "uidField": {
                        "type": "string",
                        "description": "KeyCloak UID field (string)\n"
                    },
                    "userNameField": {
                        "type": "string",
                        "description": "KeyCloak user name field (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigOkta:AuthConfigOkta": {
            "description": "Provides a Rancher v2 Auth Config OKTA resource. This can be used to configure and enable Auth Config OKTA for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config OKTA\nconst okta = new rancher2.AuthConfigOkta(\"okta\", {\n    displayNameField: \"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groupsField: \"\u003cGROUPS_FIELD\u003e\",\n    idpMetadataContent: \"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancherApiHost: \"https://\u003cRANCHER_API_HOST\u003e\",\n    spCert: \"\u003cSP_CERT\u003e\",\n    spKey: \"\u003cSP_KEY\u003e\",\n    uidField: \"\u003cUID_FIELD\u003e\",\n    userNameField: \"\u003cUSER_NAME_FIELD\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config OKTA\nokta = rancher2.AuthConfigOkta(\"okta\",\n    display_name_field=\"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groups_field=\"\u003cGROUPS_FIELD\u003e\",\n    idp_metadata_content=\"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancher_api_host=\"https://\u003cRANCHER_API_HOST\u003e\",\n    sp_cert=\"\u003cSP_CERT\u003e\",\n    sp_key=\"\u003cSP_KEY\u003e\",\n    uid_field=\"\u003cUID_FIELD\u003e\",\n    user_name_field=\"\u003cUSER_NAME_FIELD\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Auth Config OKTA\n        var okta = new Rancher2.AuthConfigOkta(\"okta\", new Rancher2.AuthConfigOktaArgs\n        {\n            DisplayNameField = \"\u003cDISPLAY_NAME_FIELD\u003e\",\n            GroupsField = \"\u003cGROUPS_FIELD\u003e\",\n            IdpMetadataContent = \"\u003cIDP_METADATA_CONTENT\u003e\",\n            RancherApiHost = \"https://\u003cRANCHER_API_HOST\u003e\",\n            SpCert = \"\u003cSP_CERT\u003e\",\n            SpKey = \"\u003cSP_KEY\u003e\",\n            UidField = \"\u003cUID_FIELD\u003e\",\n            UserNameField = \"\u003cUSER_NAME_FIELD\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewAuthConfigOkta(ctx, \"okta\", \u0026rancher2.AuthConfigOktaArgs{\n\t\t\tDisplayNameField:   pulumi.String(\"\u003cDISPLAY_NAME_FIELD\u003e\"),\n\t\t\tGroupsField:        pulumi.String(\"\u003cGROUPS_FIELD\u003e\"),\n\t\t\tIdpMetadataContent: pulumi.String(\"\u003cIDP_METADATA_CONTENT\u003e\"),\n\t\t\tRancherApiHost:     pulumi.String(\"https://\u003cRANCHER_API_HOST\u003e\"),\n\t\t\tSpCert:             pulumi.String(\"\u003cSP_CERT\u003e\"),\n\t\t\tSpKey:              pulumi.String(\"\u003cSP_KEY\u003e\"),\n\t\t\tUidField:           pulumi.String(\"\u003cUID_FIELD\u003e\"),\n\t\t\tUserNameField:      pulumi.String(\"\u003cUSER_NAME_FIELD\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `okta_user://\u003cUSER_ID\u003e`  `okta_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "OKTA display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "OKTA group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "OKTA IDP metadata content (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "OKTA SP cert (string)\n"
                },
                "spKey": {
                    "type": "string",
                    "description": "OKTA SP key (string)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "OKTA UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "OKTA user name field (string)\n"
                }
            },
            "required": [
                "annotations",
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "labels",
                "name",
                "rancherApiHost",
                "spCert",
                "spKey",
                "type",
                "uidField",
                "userNameField"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `okta_user://\u003cUSER_ID\u003e`  `okta_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "OKTA display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "OKTA group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "OKTA IDP metadata content (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "OKTA SP cert (string)\n"
                },
                "spKey": {
                    "type": "string",
                    "description": "OKTA SP key (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "OKTA UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "OKTA user name field (string)\n"
                }
            },
            "requiredInputs": [
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "rancherApiHost",
                "spCert",
                "spKey",
                "uidField",
                "userNameField"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigOkta resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `okta_user://\u003cUSER_ID\u003e`  `okta_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "displayNameField": {
                        "type": "string",
                        "description": "OKTA display name field (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default `true` (bool)\n"
                    },
                    "groupsField": {
                        "type": "string",
                        "description": "OKTA group field (string)\n"
                    },
                    "idpMetadataContent": {
                        "type": "string",
                        "description": "OKTA IDP metadata content (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherApiHost": {
                        "type": "string",
                        "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                    },
                    "spCert": {
                        "type": "string",
                        "description": "OKTA SP cert (string)\n"
                    },
                    "spKey": {
                        "type": "string",
                        "description": "OKTA SP key (string)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "uidField": {
                        "type": "string",
                        "description": "OKTA UID field (string)\n"
                    },
                    "userNameField": {
                        "type": "string",
                        "description": "OKTA user name field (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigOpenLdap:AuthConfigOpenLdap": {
            "description": "Provides a Rancher v2 Auth Config OpenLdap resource. This can be used to configure and enable Auth Config OpenLdap for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `openldap_user://\u003cDN\u003e`  `openldap_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n"
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "OpenLdap connection timeout. Default `5000` (int)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `entryDN` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default `member` (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `entryDN` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default `cn` (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `groupOfNames` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default `cn` (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default `false` (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "OpenLdap port. Default `389` (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "OpenLdap servers list (list)\n"
                },
                "serviceAccountDistinguishedName": {
                    "type": "string",
                    "description": "Service account DN for access OpenLdap service (string)\n"
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access OpenLdap service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default `uid` (string)\n"
                },
                "userMemberAttribute": {
                    "type": "string",
                    "description": "User member attribute. Default `memberOf` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `givenName` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default `inetorgperson` (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                }
            },
            "required": [
                "annotations",
                "groupDnAttribute",
                "groupMemberMappingAttribute",
                "groupMemberUserAttribute",
                "groupNameAttribute",
                "groupObjectClass",
                "groupSearchAttribute",
                "groupSearchBase",
                "labels",
                "name",
                "nestedGroupMembershipEnabled",
                "servers",
                "serviceAccountDistinguishedName",
                "serviceAccountPassword",
                "tls",
                "type",
                "userDisabledBitMask",
                "userEnabledAttribute",
                "userLoginAttribute",
                "userMemberAttribute",
                "userNameAttribute",
                "userObjectClass",
                "userSearchAttribute",
                "userSearchBase"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `openldap_user://\u003cDN\u003e`  `openldap_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n"
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "OpenLdap connection timeout. Default `5000` (int)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `entryDN` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default `member` (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `entryDN` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default `cn` (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `groupOfNames` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default `cn` (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default `false` (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "OpenLdap port. Default `389` (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "OpenLdap servers list (list)\n"
                },
                "serviceAccountDistinguishedName": {
                    "type": "string",
                    "description": "Service account DN for access OpenLdap service (string)\n"
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access OpenLdap service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default `uid` (string)\n"
                },
                "userMemberAttribute": {
                    "type": "string",
                    "description": "User member attribute. Default `memberOf` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `givenName` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default `inetorgperson` (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                }
            },
            "requiredInputs": [
                "servers",
                "serviceAccountDistinguishedName",
                "serviceAccountPassword",
                "userSearchBase"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigOpenLdap resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `openldap_user://\u003cDN\u003e`  `openldap_group://\u003cDN\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n"
                    },
                    "connectionTimeout": {
                        "type": "integer",
                        "description": "OpenLdap connection timeout. Default `5000` (int)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default `true` (bool)\n"
                    },
                    "groupDnAttribute": {
                        "type": "string",
                        "description": "Group DN attribute. Default `entryDN` (string)\n"
                    },
                    "groupMemberMappingAttribute": {
                        "type": "string",
                        "description": "Group member mapping attribute. Default `member` (string)\n"
                    },
                    "groupMemberUserAttribute": {
                        "type": "string",
                        "description": "Group member user attribute. Default `entryDN` (string)\n"
                    },
                    "groupNameAttribute": {
                        "type": "string",
                        "description": "Group name attribute. Default `cn` (string)\n"
                    },
                    "groupObjectClass": {
                        "type": "string",
                        "description": "Group object class. Default `groupOfNames` (string)\n"
                    },
                    "groupSearchAttribute": {
                        "type": "string",
                        "description": "Group search attribute. Default `cn` (string)\n"
                    },
                    "groupSearchBase": {
                        "type": "string",
                        "description": "Group search base (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "nestedGroupMembershipEnabled": {
                        "type": "boolean",
                        "description": "Nested group membership enable. Default `false` (bool)\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "OpenLdap port. Default `389` (int)\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "OpenLdap servers list (list)\n"
                    },
                    "serviceAccountDistinguishedName": {
                        "type": "string",
                        "description": "Service account DN for access OpenLdap service (string)\n"
                    },
                    "serviceAccountPassword": {
                        "type": "string",
                        "description": "Service account password for access OpenLdap service (string)\n"
                    },
                    "tls": {
                        "type": "boolean",
                        "description": "Enable TLS connection (bool)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "userDisabledBitMask": {
                        "type": "integer",
                        "description": "User disabled bit mask (int)\n"
                    },
                    "userEnabledAttribute": {
                        "type": "string",
                        "description": "User enable attribute (string)\n"
                    },
                    "userLoginAttribute": {
                        "type": "string",
                        "description": "User login attribute. Default `uid` (string)\n"
                    },
                    "userMemberAttribute": {
                        "type": "string",
                        "description": "User member attribute. Default `memberOf` (string)\n"
                    },
                    "userNameAttribute": {
                        "type": "string",
                        "description": "User name attribute. Default `givenName` (string)\n"
                    },
                    "userObjectClass": {
                        "type": "string",
                        "description": "User object class. Default `inetorgperson` (string)\n"
                    },
                    "userSearchAttribute": {
                        "type": "string",
                        "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                    },
                    "userSearchBase": {
                        "type": "string",
                        "description": "User search base DN (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigPing:AuthConfigPing": {
            "description": "Provides a Rancher v2 Auth Config Ping resource. This can be used to configure and enable Auth Config Ping for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config Ping\nconst ping = new rancher2.AuthConfigPing(\"ping\", {\n    displayNameField: \"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groupsField: \"\u003cGROUPS_FIELD\u003e\",\n    idpMetadataContent: \"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancherApiHost: \"https://\u003cRANCHER_API_HOST\u003e\",\n    spCert: \"\u003cSP_CERT\u003e\",\n    spKey: \"\u003cSP_KEY\u003e\",\n    uidField: \"\u003cUID_FIELD\u003e\",\n    userNameField: \"\u003cUSER_NAME_FIELD\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config Ping\nping = rancher2.AuthConfigPing(\"ping\",\n    display_name_field=\"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groups_field=\"\u003cGROUPS_FIELD\u003e\",\n    idp_metadata_content=\"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancher_api_host=\"https://\u003cRANCHER_API_HOST\u003e\",\n    sp_cert=\"\u003cSP_CERT\u003e\",\n    sp_key=\"\u003cSP_KEY\u003e\",\n    uid_field=\"\u003cUID_FIELD\u003e\",\n    user_name_field=\"\u003cUSER_NAME_FIELD\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Auth Config Ping\n        var ping = new Rancher2.AuthConfigPing(\"ping\", new Rancher2.AuthConfigPingArgs\n        {\n            DisplayNameField = \"\u003cDISPLAY_NAME_FIELD\u003e\",\n            GroupsField = \"\u003cGROUPS_FIELD\u003e\",\n            IdpMetadataContent = \"\u003cIDP_METADATA_CONTENT\u003e\",\n            RancherApiHost = \"https://\u003cRANCHER_API_HOST\u003e\",\n            SpCert = \"\u003cSP_CERT\u003e\",\n            SpKey = \"\u003cSP_KEY\u003e\",\n            UidField = \"\u003cUID_FIELD\u003e\",\n            UserNameField = \"\u003cUSER_NAME_FIELD\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewAuthConfigPing(ctx, \"ping\", \u0026rancher2.AuthConfigPingArgs{\n\t\t\tDisplayNameField:   pulumi.String(\"\u003cDISPLAY_NAME_FIELD\u003e\"),\n\t\t\tGroupsField:        pulumi.String(\"\u003cGROUPS_FIELD\u003e\"),\n\t\t\tIdpMetadataContent: pulumi.String(\"\u003cIDP_METADATA_CONTENT\u003e\"),\n\t\t\tRancherApiHost:     pulumi.String(\"https://\u003cRANCHER_API_HOST\u003e\"),\n\t\t\tSpCert:             pulumi.String(\"\u003cSP_CERT\u003e\"),\n\t\t\tSpKey:              pulumi.String(\"\u003cSP_KEY\u003e\"),\n\t\t\tUidField:           pulumi.String(\"\u003cUID_FIELD\u003e\"),\n\t\t\tUserNameField:      pulumi.String(\"\u003cUSER_NAME_FIELD\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `ping_user://\u003cUSER_ID\u003e`  `ping_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "Ping display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "Ping group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "Ping IDP metadata content (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "Ping SP cert (string)\n"
                },
                "spKey": {
                    "type": "string",
                    "description": "Ping SP key (string)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "Ping UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "Ping user name field (string)\n"
                }
            },
            "required": [
                "annotations",
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "labels",
                "name",
                "rancherApiHost",
                "spCert",
                "spKey",
                "type",
                "uidField",
                "userNameField"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `ping_user://\u003cUSER_ID\u003e`  `ping_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "Ping display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default `true` (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "Ping group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "Ping IDP metadata content (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "Ping SP cert (string)\n"
                },
                "spKey": {
                    "type": "string",
                    "description": "Ping SP key (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "Ping UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "Ping user name field (string)\n"
                }
            },
            "requiredInputs": [
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "rancherApiHost",
                "spCert",
                "spKey",
                "uidField",
                "userNameField"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigPing resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if `access_mode` is `required` or `restricted`. Ex: `ping_user://\u003cUSER_ID\u003e`  `ping_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "displayNameField": {
                        "type": "string",
                        "description": "Ping display name field (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default `true` (bool)\n"
                    },
                    "groupsField": {
                        "type": "string",
                        "description": "Ping group field (string)\n"
                    },
                    "idpMetadataContent": {
                        "type": "string",
                        "description": "Ping IDP metadata content (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherApiHost": {
                        "type": "string",
                        "description": "Rancher url. Schema needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                    },
                    "spCert": {
                        "type": "string",
                        "description": "Ping SP cert (string)\n"
                    },
                    "spKey": {
                        "type": "string",
                        "description": "Ping SP key (string)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "uidField": {
                        "type": "string",
                        "description": "Ping UID field (string)\n"
                    },
                    "userNameField": {
                        "type": "string",
                        "description": "Ping user name field (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/bootstrap:Bootstrap": {
            "properties": {
                "currentPassword": {
                    "type": "string",
                    "description": "Current password for Admin user. Just needed for recover if admin password has been changed from other resources and token is expired (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for Admin user or random generated if empty (string)\n"
                },
                "telemetry": {
                    "type": "boolean",
                    "description": "Send telemetry anonymous data. Default: `false` (bool)\n"
                },
                "tempToken": {
                    "type": "string",
                    "description": "(Computed) Generated API temporary token as helper. Should be empty (string)\n"
                },
                "tempTokenId": {
                    "type": "string",
                    "description": "(Computed) Generated API temporary token id as helper. Should be empty (string)\n"
                },
                "token": {
                    "type": "string",
                    "description": "(Computed) Generated API token for Admin User (string)\n"
                },
                "tokenId": {
                    "type": "string",
                    "description": "(Computed) Generated API token id for Admin User (string)\n"
                },
                "tokenTtl": {
                    "type": "integer",
                    "description": "TTL in seconds for generated admin token. Default: `0`  (int)\n"
                },
                "tokenUpdate": {
                    "type": "boolean",
                    "description": "Regenerate admin token. Default: `false` (bool)\n"
                },
                "url": {
                    "type": "string",
                    "description": "(Computed) URL set as server-url (string)\n"
                },
                "user": {
                    "type": "string",
                    "description": "(Computed) Admin username (string)\n"
                }
            },
            "required": [
                "currentPassword",
                "password",
                "tempToken",
                "tempTokenId",
                "token",
                "tokenId",
                "url",
                "user"
            ],
            "inputProperties": {
                "currentPassword": {
                    "type": "string",
                    "description": "Current password for Admin user. Just needed for recover if admin password has been changed from other resources and token is expired (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for Admin user or random generated if empty (string)\n"
                },
                "telemetry": {
                    "type": "boolean",
                    "description": "Send telemetry anonymous data. Default: `false` (bool)\n"
                },
                "tokenTtl": {
                    "type": "integer",
                    "description": "TTL in seconds for generated admin token. Default: `0`  (int)\n"
                },
                "tokenUpdate": {
                    "type": "boolean",
                    "description": "Regenerate admin token. Default: `false` (bool)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Bootstrap resources.\n",
                "properties": {
                    "currentPassword": {
                        "type": "string",
                        "description": "Current password for Admin user. Just needed for recover if admin password has been changed from other resources and token is expired (string)\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for Admin user or random generated if empty (string)\n"
                    },
                    "telemetry": {
                        "type": "boolean",
                        "description": "Send telemetry anonymous data. Default: `false` (bool)\n"
                    },
                    "tempToken": {
                        "type": "string",
                        "description": "(Computed) Generated API temporary token as helper. Should be empty (string)\n"
                    },
                    "tempTokenId": {
                        "type": "string",
                        "description": "(Computed) Generated API temporary token id as helper. Should be empty (string)\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "(Computed) Generated API token for Admin User (string)\n"
                    },
                    "tokenId": {
                        "type": "string",
                        "description": "(Computed) Generated API token id for Admin User (string)\n"
                    },
                    "tokenTtl": {
                        "type": "integer",
                        "description": "TTL in seconds for generated admin token. Default: `0`  (int)\n"
                    },
                    "tokenUpdate": {
                        "type": "boolean",
                        "description": "Regenerate admin token. Default: `false` (bool)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "(Computed) URL set as server-url (string)\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "(Computed) Admin username (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/catalog:Catalog": {
            "description": "Provides a Rancher v2 Catalog resource. This can be used to create cluster, global and/or project catalogs for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Global Catalog\nconst foo_global = new rancher2.Catalog(\"foo-global\", {\n    url: \"https://\u003cCATALOG_URL\u003e\",\n});\n// Create a new Rancher2 Cluster Catalog\nconst foo_cluster = new rancher2.Catalog(\"foo-cluster\", {\n    scope: \"cluster\",\n    url: \"https://\u003cCATALOG_URL\u003e\",\n});\n// Create a new Rancher2 Project Catalog\nconst foo_project = new rancher2.Catalog(\"foo-project\", {\n    scope: \"project\",\n    url: \"https://\u003cCATALOG_URL\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Global Catalog\nfoo_global = rancher2.Catalog(\"foo-global\", url=\"https://\u003cCATALOG_URL\u003e\")\n# Create a new Rancher2 Cluster Catalog\nfoo_cluster = rancher2.Catalog(\"foo-cluster\",\n    scope=\"cluster\",\n    url=\"https://\u003cCATALOG_URL\u003e\")\n# Create a new Rancher2 Project Catalog\nfoo_project = rancher2.Catalog(\"foo-project\",\n    scope=\"project\",\n    url=\"https://\u003cCATALOG_URL\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Rancher2 Global Catalog\n        var foo_global = new Rancher2.Catalog(\"foo-global\", new Rancher2.CatalogArgs\n        {\n            Url = \"https://\u003cCATALOG_URL\u003e\",\n        });\n        // Create a new Rancher2 Cluster Catalog\n        var foo_cluster = new Rancher2.Catalog(\"foo-cluster\", new Rancher2.CatalogArgs\n        {\n            Scope = \"cluster\",\n            Url = \"https://\u003cCATALOG_URL\u003e\",\n        });\n        // Create a new Rancher2 Project Catalog\n        var foo_project = new Rancher2.Catalog(\"foo-project\", new Rancher2.CatalogArgs\n        {\n            Scope = \"project\",\n            Url = \"https://\u003cCATALOG_URL\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewCatalog(ctx, \"foo_global\", \u0026rancher2.CatalogArgs{\n\t\t\tUrl: pulumi.String(\"https://\u003cCATALOG_URL\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewCatalog(ctx, \"foo_cluster\", \u0026rancher2.CatalogArgs{\n\t\t\tScope: pulumi.String(\"cluster\"),\n\t\t\tUrl:   pulumi.String(\"https://\u003cCATALOG_URL\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewCatalog(ctx, \"foo_project\", \u0026rancher2.CatalogArgs{\n\t\t\tScope: pulumi.String(\"project\"),\n\t\t\tUrl:   pulumi.String(\"https://\u003cCATALOG_URL\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for the catalog (map)\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch of the catalog repo to use. Default `master` (string)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the catalog. Mandatory if `scope = cluster` (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A catalog description (string)\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the catalog. Just helm by the moment (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for the catalog (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the catalog (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to access the catalog if needed (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id of the catalog. Mandatory if `scope = project` (string)\n"
                },
                "refresh": {
                    "type": "boolean",
                    "description": "Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the catalog repo (string)\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to access the catalog if needed (string)\n"
                },
                "version": {
                    "type": "string",
                    "description": "Helm version for the catalog. Available options: `helm_v2` and `helm_v3` (string)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "url",
                "version"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for the catalog (map)\n"
                },
                "branch": {
                    "type": "string",
                    "description": "The branch of the catalog repo to use. Default `master` (string)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the catalog. Mandatory if `scope = cluster` (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A catalog description (string)\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the catalog. Just helm by the moment (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for the catalog (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the catalog (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to access the catalog if needed (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id of the catalog. Mandatory if `scope = project` (string)\n"
                },
                "refresh": {
                    "type": "boolean",
                    "description": "Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the catalog repo (string)\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to access the catalog if needed (string)\n"
                },
                "version": {
                    "type": "string",
                    "description": "Helm version for the catalog. Available options: `helm_v2` and `helm_v3` (string)\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Catalog resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for the catalog (map)\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch of the catalog repo to use. Default `master` (string)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the catalog. Mandatory if `scope = cluster` (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A catalog description (string)\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the catalog. Just helm by the moment (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for the catalog (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the catalog (string)\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password to access the catalog if needed (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id of the catalog. Mandatory if `scope = project` (string)\n"
                    },
                    "refresh": {
                        "type": "boolean",
                        "description": "Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the catalog repo (string)\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username to access the catalog if needed (string)\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Helm version for the catalog. Available options: `helm_v2` and `helm_v3` (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/certificate:Certificate": {
            "description": "Provides a Rancher v2 certificate resource. This can be used to create certificates for Rancher v2 environments and retrieve their information.\n\nThere are 2 types of Rancher v2 certificates:\n- Project certificate: Available to all namespaces in the `project_id`\n- Namespaced certificate: Available to just `namespace_id` in the `project_id`\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for certificate object (map)\n"
                },
                "certs": {
                    "type": "string",
                    "description": "Base64 encoded public certs (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A certificate description (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Base64 encoded private key (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for certificate object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where the namespaced certificate should be created (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where the certificate should be created  (string)\n"
                }
            },
            "required": [
                "annotations",
                "certs",
                "key",
                "labels",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for certificate object (map)\n"
                },
                "certs": {
                    "type": "string",
                    "description": "Base64 encoded public certs (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A certificate description (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Base64 encoded private key (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for certificate object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where the namespaced certificate should be created (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where the certificate should be created  (string)\n"
                }
            },
            "requiredInputs": [
                "certs",
                "key",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for certificate object (map)\n"
                    },
                    "certs": {
                        "type": "string",
                        "description": "Base64 encoded public certs (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A certificate description (string)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Base64 encoded private key (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for certificate object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where the namespaced certificate should be created (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where the certificate should be created  (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/cloudCredential:CloudCredential": {
            "description": "Provides a Rancher v2 Cloud Credential resource. This can be used to create Cloud Credential for Rancher v2.2.x and retrieve their information.\n\namazonec2, azure, digitalocean, linode, openstack and vsphere credentials config are supported for Cloud Credential.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Cloud Credential\nconst foo = new rancher2.CloudCredential(\"foo\", {\n    amazonec2CredentialConfig: {\n        accessKey: \"\u003cAWS_ACCESS_KEY\u003e\",\n        secretKey: \"\u003cAWS_SECRET_KEY\u003e\",\n    },\n    description: \"foo test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Cloud Credential\nfoo = rancher2.CloudCredential(\"foo\",\n    amazonec2_credential_config={\n        \"access_key\": \"\u003cAWS_ACCESS_KEY\u003e\",\n        \"secret_key\": \"\u003cAWS_SECRET_KEY\u003e\",\n    },\n    description=\"foo test\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Cloud Credential\n        var foo = new Rancher2.CloudCredential(\"foo\", new Rancher2.CloudCredentialArgs\n        {\n            Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs\n            {\n                AccessKey = \"\u003cAWS_ACCESS_KEY\u003e\",\n                SecretKey = \"\u003cAWS_SECRET_KEY\u003e\",\n            },\n            Description = \"foo test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewCloudCredential(ctx, \"foo\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tAmazonec2CredentialConfig: \u0026rancher2.CloudCredentialAmazonec2CredentialConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"\u003cAWS_ACCESS_KEY\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003cAWS_SECRET_KEY\u003e\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "amazonec2CredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialAmazonec2CredentialConfig:CloudCredentialAmazonec2CredentialConfig",
                    "description": "AWS config for the Cloud Credential (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Cloud Credential object (map)\n"
                },
                "azureCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialAzureCredentialConfig:CloudCredentialAzureCredentialConfig",
                    "description": "Azure config for the Cloud Credential (list maxitems:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Cloud Credential (string)\n"
                },
                "digitaloceanCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialDigitaloceanCredentialConfig:CloudCredentialDigitaloceanCredentialConfig",
                    "description": "DigitalOcean config for the Cloud Credential (list maxitems:1)\n"
                },
                "driver": {
                    "type": "string",
                    "description": "(Computed) The driver of the Cloud Credential (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Cloud Credential object (map)\n"
                },
                "linodeCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialLinodeCredentialConfig:CloudCredentialLinodeCredentialConfig",
                    "description": "Linode config for the Cloud Credential (list maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloud Credential (string)\n"
                },
                "openstackCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialOpenstackCredentialConfig:CloudCredentialOpenstackCredentialConfig",
                    "description": "OpenStack config for the Cloud Credential (list maxitems:1)\n"
                },
                "vsphereCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialVsphereCredentialConfig:CloudCredentialVsphereCredentialConfig",
                    "description": "vSphere config for the Cloud Credential (list maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "driver",
                "labels",
                "name"
            ],
            "inputProperties": {
                "amazonec2CredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialAmazonec2CredentialConfig:CloudCredentialAmazonec2CredentialConfig",
                    "description": "AWS config for the Cloud Credential (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Cloud Credential object (map)\n"
                },
                "azureCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialAzureCredentialConfig:CloudCredentialAzureCredentialConfig",
                    "description": "Azure config for the Cloud Credential (list maxitems:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Cloud Credential (string)\n"
                },
                "digitaloceanCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialDigitaloceanCredentialConfig:CloudCredentialDigitaloceanCredentialConfig",
                    "description": "DigitalOcean config for the Cloud Credential (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Cloud Credential object (map)\n"
                },
                "linodeCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialLinodeCredentialConfig:CloudCredentialLinodeCredentialConfig",
                    "description": "Linode config for the Cloud Credential (list maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloud Credential (string)\n"
                },
                "openstackCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialOpenstackCredentialConfig:CloudCredentialOpenstackCredentialConfig",
                    "description": "OpenStack config for the Cloud Credential (list maxitems:1)\n"
                },
                "vsphereCredentialConfig": {
                    "$ref": "#/types/rancher2:/CloudCredentialVsphereCredentialConfig:CloudCredentialVsphereCredentialConfig",
                    "description": "vSphere config for the Cloud Credential (list maxitems:1)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudCredential resources.\n",
                "properties": {
                    "amazonec2CredentialConfig": {
                        "$ref": "#/types/rancher2:/CloudCredentialAmazonec2CredentialConfig:CloudCredentialAmazonec2CredentialConfig",
                        "description": "AWS config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for Cloud Credential object (map)\n"
                    },
                    "azureCredentialConfig": {
                        "$ref": "#/types/rancher2:/CloudCredentialAzureCredentialConfig:CloudCredentialAzureCredentialConfig",
                        "description": "Azure config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Cloud Credential (string)\n"
                    },
                    "digitaloceanCredentialConfig": {
                        "$ref": "#/types/rancher2:/CloudCredentialDigitaloceanCredentialConfig:CloudCredentialDigitaloceanCredentialConfig",
                        "description": "DigitalOcean config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "driver": {
                        "type": "string",
                        "description": "(Computed) The driver of the Cloud Credential (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for Cloud Credential object (map)\n"
                    },
                    "linodeCredentialConfig": {
                        "$ref": "#/types/rancher2:/CloudCredentialLinodeCredentialConfig:CloudCredentialLinodeCredentialConfig",
                        "description": "Linode config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cloud Credential (string)\n"
                    },
                    "openstackCredentialConfig": {
                        "$ref": "#/types/rancher2:/CloudCredentialOpenstackCredentialConfig:CloudCredentialOpenstackCredentialConfig",
                        "description": "OpenStack config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "vsphereCredentialConfig": {
                        "$ref": "#/types/rancher2:/CloudCredentialVsphereCredentialConfig:CloudCredentialVsphereCredentialConfig",
                        "description": "vSphere config for the Cloud Credential (list maxitems:1)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/cluster:Cluster": {
            "description": "Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.\n",
            "properties": {
                "aksConfig": {
                    "$ref": "#/types/rancher2:/ClusterAksConfig:ClusterAksConfig",
                    "description": "The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for cluster registration token object (map)\n"
                },
                "clusterAuthEndpoint": {
                    "$ref": "#/types/rancher2:/ClusterClusterAuthEndpoint:ClusterClusterAuthEndpoint",
                    "description": "Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)\n"
                },
                "clusterMonitoringInput": {
                    "$ref": "#/types/rancher2:/ClusterClusterMonitoringInput:ClusterClusterMonitoringInput",
                    "description": "Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)\n"
                },
                "clusterRegistrationToken": {
                    "$ref": "#/types/rancher2:/ClusterClusterRegistrationToken:ClusterClusterRegistrationToken",
                    "description": "(Computed) Cluster Registration Token generated for the cluster (list maxitems:1)\n"
                },
                "clusterTemplateAnswers": {
                    "$ref": "#/types/rancher2:/ClusterClusterTemplateAnswers:ClusterClusterTemplateAnswers",
                    "description": "Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)\n"
                },
                "clusterTemplateId": {
                    "type": "string",
                    "description": "Cluster template ID. Just for Rancher v2.3.x and above (string)\n"
                },
                "clusterTemplateQuestions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterClusterTemplateQuestion:ClusterClusterTemplateQuestion"
                    },
                    "description": "Cluster template questions. Just for Rancher v2.3.x and above (list)\n"
                },
                "clusterTemplateRevisionId": {
                    "type": "string",
                    "description": "Cluster template revision ID. Just for Rancher v2.3.x and above (string)\n"
                },
                "defaultPodSecurityPolicyTemplateId": {
                    "type": "string",
                    "description": "[Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)\n"
                },
                "defaultProjectId": {
                    "type": "string",
                    "description": "(Computed) Default project ID for the cluster (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of this cluster (string)\n"
                },
                "desiredAgentImage": {
                    "type": "string",
                    "description": "Desired agent image. Just for Rancher v2.3.x and above (string)\n"
                },
                "desiredAuthImage": {
                    "type": "string",
                    "description": "Desired auth image. Just for Rancher v2.3.x and above (string)\n"
                },
                "dockerRootDir": {
                    "type": "string",
                    "description": "Desired auth image. Just for Rancher v2.3.x and above (string)\n"
                },
                "driver": {
                    "type": "string",
                    "description": "(Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)\n"
                },
                "eksConfig": {
                    "$ref": "#/types/rancher2:/ClusterEksConfig:ClusterEksConfig",
                    "description": "The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)\n"
                },
                "enableClusterAlerting": {
                    "type": "boolean",
                    "description": "Enable built-in cluster alerting (bool)\n"
                },
                "enableClusterIstio": {
                    "type": "boolean",
                    "description": "Enable built-in cluster istio. Just for Rancher v2.3.x and above (bool)\n"
                },
                "enableClusterMonitoring": {
                    "type": "boolean",
                    "description": "Enable built-in cluster monitoring (bool)\n"
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "description": "Enable project network isolation (bool)\n"
                },
                "gkeConfig": {
                    "$ref": "#/types/rancher2:/ClusterGkeConfig:ClusterGkeConfig",
                    "description": "The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `k3s_config` and `rke_config` (list maxitems:1)\n"
                },
                "k3sConfig": {
                    "$ref": "#/types/rancher2:/ClusterK3sConfig:ClusterK3sConfig",
                    "description": "The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `rke_config` (list maxitems:1)\n"
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Kube Config generated for the cluster (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for cluster registration token object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of cluster registration token (string)\n"
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfig:ClusterRkeConfig",
                    "description": "The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `k3s_config` (list maxitems:1)\n"
                },
                "scheduledClusterScan": {
                    "$ref": "#/types/rancher2:/ClusterScheduledClusterScan:ClusterScheduledClusterScan",
                    "description": "Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)\n"
                },
                "systemProjectId": {
                    "type": "string",
                    "description": "(Computed) System project ID for the cluster (string)\n"
                },
                "windowsPreferedCluster": {
                    "type": "boolean",
                    "description": "Windows preferred cluster. Default: `false` (bool)\n"
                }
            },
            "required": [
                "annotations",
                "clusterAuthEndpoint",
                "clusterMonitoringInput",
                "clusterRegistrationToken",
                "clusterTemplateAnswers",
                "defaultPodSecurityPolicyTemplateId",
                "defaultProjectId",
                "desiredAgentImage",
                "desiredAuthImage",
                "dockerRootDir",
                "driver",
                "enableClusterAlerting",
                "enableClusterIstio",
                "enableClusterMonitoring",
                "enableNetworkPolicy",
                "k3sConfig",
                "kubeConfig",
                "labels",
                "name",
                "rkeConfig",
                "scheduledClusterScan",
                "systemProjectId"
            ],
            "inputProperties": {
                "aksConfig": {
                    "$ref": "#/types/rancher2:/ClusterAksConfig:ClusterAksConfig",
                    "description": "The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for cluster registration token object (map)\n"
                },
                "clusterAuthEndpoint": {
                    "$ref": "#/types/rancher2:/ClusterClusterAuthEndpoint:ClusterClusterAuthEndpoint",
                    "description": "Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)\n"
                },
                "clusterMonitoringInput": {
                    "$ref": "#/types/rancher2:/ClusterClusterMonitoringInput:ClusterClusterMonitoringInput",
                    "description": "Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)\n"
                },
                "clusterTemplateAnswers": {
                    "$ref": "#/types/rancher2:/ClusterClusterTemplateAnswers:ClusterClusterTemplateAnswers",
                    "description": "Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)\n"
                },
                "clusterTemplateId": {
                    "type": "string",
                    "description": "Cluster template ID. Just for Rancher v2.3.x and above (string)\n"
                },
                "clusterTemplateQuestions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterClusterTemplateQuestion:ClusterClusterTemplateQuestion"
                    },
                    "description": "Cluster template questions. Just for Rancher v2.3.x and above (list)\n"
                },
                "clusterTemplateRevisionId": {
                    "type": "string",
                    "description": "Cluster template revision ID. Just for Rancher v2.3.x and above (string)\n"
                },
                "defaultPodSecurityPolicyTemplateId": {
                    "type": "string",
                    "description": "[Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of this cluster (string)\n"
                },
                "desiredAgentImage": {
                    "type": "string",
                    "description": "Desired agent image. Just for Rancher v2.3.x and above (string)\n"
                },
                "desiredAuthImage": {
                    "type": "string",
                    "description": "Desired auth image. Just for Rancher v2.3.x and above (string)\n"
                },
                "dockerRootDir": {
                    "type": "string",
                    "description": "Desired auth image. Just for Rancher v2.3.x and above (string)\n"
                },
                "driver": {
                    "type": "string",
                    "description": "(Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)\n"
                },
                "eksConfig": {
                    "$ref": "#/types/rancher2:/ClusterEksConfig:ClusterEksConfig",
                    "description": "The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)\n"
                },
                "enableClusterAlerting": {
                    "type": "boolean",
                    "description": "Enable built-in cluster alerting (bool)\n"
                },
                "enableClusterIstio": {
                    "type": "boolean",
                    "description": "Enable built-in cluster istio. Just for Rancher v2.3.x and above (bool)\n"
                },
                "enableClusterMonitoring": {
                    "type": "boolean",
                    "description": "Enable built-in cluster monitoring (bool)\n"
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "description": "Enable project network isolation (bool)\n"
                },
                "gkeConfig": {
                    "$ref": "#/types/rancher2:/ClusterGkeConfig:ClusterGkeConfig",
                    "description": "The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `k3s_config` and `rke_config` (list maxitems:1)\n"
                },
                "k3sConfig": {
                    "$ref": "#/types/rancher2:/ClusterK3sConfig:ClusterK3sConfig",
                    "description": "The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `rke_config` (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for cluster registration token object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of cluster registration token (string)\n"
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:/ClusterRkeConfig:ClusterRkeConfig",
                    "description": "The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `k3s_config` (list maxitems:1)\n"
                },
                "scheduledClusterScan": {
                    "$ref": "#/types/rancher2:/ClusterScheduledClusterScan:ClusterScheduledClusterScan",
                    "description": "Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)\n"
                },
                "windowsPreferedCluster": {
                    "type": "boolean",
                    "description": "Windows preferred cluster. Default: `false` (bool)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "aksConfig": {
                        "$ref": "#/types/rancher2:/ClusterAksConfig:ClusterAksConfig",
                        "description": "The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for cluster registration token object (map)\n"
                    },
                    "clusterAuthEndpoint": {
                        "$ref": "#/types/rancher2:/ClusterClusterAuthEndpoint:ClusterClusterAuthEndpoint",
                        "description": "Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)\n"
                    },
                    "clusterMonitoringInput": {
                        "$ref": "#/types/rancher2:/ClusterClusterMonitoringInput:ClusterClusterMonitoringInput",
                        "description": "Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)\n"
                    },
                    "clusterRegistrationToken": {
                        "$ref": "#/types/rancher2:/ClusterClusterRegistrationToken:ClusterClusterRegistrationToken",
                        "description": "(Computed) Cluster Registration Token generated for the cluster (list maxitems:1)\n"
                    },
                    "clusterTemplateAnswers": {
                        "$ref": "#/types/rancher2:/ClusterClusterTemplateAnswers:ClusterClusterTemplateAnswers",
                        "description": "Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)\n"
                    },
                    "clusterTemplateId": {
                        "type": "string",
                        "description": "Cluster template ID. Just for Rancher v2.3.x and above (string)\n"
                    },
                    "clusterTemplateQuestions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/ClusterClusterTemplateQuestion:ClusterClusterTemplateQuestion"
                        },
                        "description": "Cluster template questions. Just for Rancher v2.3.x and above (list)\n"
                    },
                    "clusterTemplateRevisionId": {
                        "type": "string",
                        "description": "Cluster template revision ID. Just for Rancher v2.3.x and above (string)\n"
                    },
                    "defaultPodSecurityPolicyTemplateId": {
                        "type": "string",
                        "description": "[Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)\n"
                    },
                    "defaultProjectId": {
                        "type": "string",
                        "description": "(Computed) Default project ID for the cluster (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of this cluster (string)\n"
                    },
                    "desiredAgentImage": {
                        "type": "string",
                        "description": "Desired agent image. Just for Rancher v2.3.x and above (string)\n"
                    },
                    "desiredAuthImage": {
                        "type": "string",
                        "description": "Desired auth image. Just for Rancher v2.3.x and above (string)\n"
                    },
                    "dockerRootDir": {
                        "type": "string",
                        "description": "Desired auth image. Just for Rancher v2.3.x and above (string)\n"
                    },
                    "driver": {
                        "type": "string",
                        "description": "(Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)\n"
                    },
                    "eksConfig": {
                        "$ref": "#/types/rancher2:/ClusterEksConfig:ClusterEksConfig",
                        "description": "The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)\n"
                    },
                    "enableClusterAlerting": {
                        "type": "boolean",
                        "description": "Enable built-in cluster alerting (bool)\n"
                    },
                    "enableClusterIstio": {
                        "type": "boolean",
                        "description": "Enable built-in cluster istio. Just for Rancher v2.3.x and above (bool)\n"
                    },
                    "enableClusterMonitoring": {
                        "type": "boolean",
                        "description": "Enable built-in cluster monitoring (bool)\n"
                    },
                    "enableNetworkPolicy": {
                        "type": "boolean",
                        "description": "Enable project network isolation (bool)\n"
                    },
                    "gkeConfig": {
                        "$ref": "#/types/rancher2:/ClusterGkeConfig:ClusterGkeConfig",
                        "description": "The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `k3s_config` and `rke_config` (list maxitems:1)\n"
                    },
                    "k3sConfig": {
                        "$ref": "#/types/rancher2:/ClusterK3sConfig:ClusterK3sConfig",
                        "description": "The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `rke_config` (list maxitems:1)\n"
                    },
                    "kubeConfig": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Kube Config generated for the cluster (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for cluster registration token object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of cluster registration token (string)\n"
                    },
                    "rkeConfig": {
                        "$ref": "#/types/rancher2:/ClusterRkeConfig:ClusterRkeConfig",
                        "description": "The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `k3s_config` (list maxitems:1)\n"
                    },
                    "scheduledClusterScan": {
                        "$ref": "#/types/rancher2:/ClusterScheduledClusterScan:ClusterScheduledClusterScan",
                        "description": "Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)\n"
                    },
                    "systemProjectId": {
                        "type": "string",
                        "description": "(Computed) System project ID for the cluster (string)\n"
                    },
                    "windowsPreferedCluster": {
                        "type": "boolean",
                        "description": "Windows preferred cluster. Default: `false` (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterAlertGroup:ClusterAlertGroup": {
            "description": "Provides a Rancher v2 Cluster Alert Group resource. This can be used to create Cluster Alert Group for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Cluster Alert Group\nconst foo = new rancher2.ClusterAlertGroup(\"foo\", {\n    clusterId: \"\u003ccluster_id\u003e\",\n    description: \"Terraform cluster alert group\",\n    groupIntervalSeconds: 300,\n    repeatIntervalSeconds: 3600,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Cluster Alert Group\nfoo = rancher2.ClusterAlertGroup(\"foo\",\n    cluster_id=\"\u003ccluster_id\u003e\",\n    description=\"Terraform cluster alert group\",\n    group_interval_seconds=300,\n    repeat_interval_seconds=3600)\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Rancher2 Cluster Alert Group\n        var foo = new Rancher2.ClusterAlertGroup(\"foo\", new Rancher2.ClusterAlertGroupArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            Description = \"Terraform cluster alert group\",\n            GroupIntervalSeconds = 300,\n            RepeatIntervalSeconds = 3600,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewClusterAlertGroup(ctx, \"foo\", \u0026rancher2.ClusterAlertGroupArgs{\n\t\t\tClusterId:             pulumi.String(\"\u003ccluster_id\u003e\"),\n\t\t\tDescription:           pulumi.String(\"Terraform cluster alert group\"),\n\t\t\tGroupIntervalSeconds:  pulumi.Int(300),\n\t\t\tRepeatIntervalSeconds: pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert group annotations (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create cluster alert group (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The cluster alert group description (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group wait seconds. Default: `180` (int)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert group labels (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster alert group name (string)\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterAlertGroupRecipient:ClusterAlertGroupRecipient"
                    },
                    "description": "The cluster alert group recipients (list)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group wait seconds. Default: `3600` (int)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "labels",
                "name"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert group annotations (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create cluster alert group (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The cluster alert group description (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group wait seconds. Default: `180` (int)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert group labels (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster alert group name (string)\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterAlertGroupRecipient:ClusterAlertGroupRecipient"
                    },
                    "description": "The cluster alert group recipients (list)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group wait seconds. Default: `3600` (int)\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterAlertGroup resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The cluster alert group annotations (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create cluster alert group (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The cluster alert group description (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "The cluster alert group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "The cluster alert group wait seconds. Default: `180` (int)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The cluster alert group labels (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster alert group name (string)\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/ClusterAlertGroupRecipient:ClusterAlertGroupRecipient"
                        },
                        "description": "The cluster alert group recipients (list)\n"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "The cluster alert group wait seconds. Default: `3600` (int)\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "rancher2:index/clusterAlterGroup:ClusterAlterGroup"
                }
            ]
        },
        "rancher2:index/clusterAlertRule:ClusterAlertRule": {
            "description": "Provides a Rancher v2 Cluster Alert Rule resource. This can be used to create Cluster Alert Rule for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Cluster Alert Group\nconst fooClusterAlertGroup = new rancher2.ClusterAlertGroup(\"foo\", {\n    clusterId: \"\u003ccluster_id\u003e\",\n    description: \"Terraform cluster alert group\",\n    groupIntervalSeconds: 300,\n    repeatIntervalSeconds: 3600,\n});\n// Create a new Rancher2 Cluster Alert Rule\nconst fooClusterAlertRule = new rancher2.ClusterAlertRule(\"foo\", {\n    clusterId: fooClusterAlertGroup.clusterId,\n    groupId: fooClusterAlertGroup.id,\n    groupIntervalSeconds: 600,\n    repeatIntervalSeconds: 6000,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Cluster Alert Group\nfoo_cluster_alert_group = rancher2.ClusterAlertGroup(\"fooClusterAlertGroup\",\n    cluster_id=\"\u003ccluster_id\u003e\",\n    description=\"Terraform cluster alert group\",\n    group_interval_seconds=300,\n    repeat_interval_seconds=3600)\n# Create a new Rancher2 Cluster Alert Rule\nfoo_cluster_alert_rule = rancher2.ClusterAlertRule(\"fooClusterAlertRule\",\n    cluster_id=foo_cluster_alert_group.cluster_id,\n    group_id=foo_cluster_alert_group.id,\n    group_interval_seconds=600,\n    repeat_interval_seconds=6000)\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Rancher2 Cluster Alert Group\n        var fooClusterAlertGroup = new Rancher2.ClusterAlertGroup(\"fooClusterAlertGroup\", new Rancher2.ClusterAlertGroupArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            Description = \"Terraform cluster alert group\",\n            GroupIntervalSeconds = 300,\n            RepeatIntervalSeconds = 3600,\n        });\n        // Create a new Rancher2 Cluster Alert Rule\n        var fooClusterAlertRule = new Rancher2.ClusterAlertRule(\"fooClusterAlertRule\", new Rancher2.ClusterAlertRuleArgs\n        {\n            ClusterId = fooClusterAlertGroup.ClusterId,\n            GroupId = fooClusterAlertGroup.Id,\n            GroupIntervalSeconds = 600,\n            RepeatIntervalSeconds = 6000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooClusterAlertGroup, err := rancher2.NewClusterAlertGroup(ctx, \"fooClusterAlertGroup\", \u0026rancher2.ClusterAlertGroupArgs{\n\t\t\tClusterId:             pulumi.String(\"\u003ccluster_id\u003e\"),\n\t\t\tDescription:           pulumi.String(\"Terraform cluster alert group\"),\n\t\t\tGroupIntervalSeconds:  pulumi.Int(300),\n\t\t\tRepeatIntervalSeconds: pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewClusterAlertRule(ctx, \"fooClusterAlertRule\", \u0026rancher2.ClusterAlertRuleArgs{\n\t\t\tClusterId:             fooClusterAlertGroup.ClusterId,\n\t\t\tGroupId:               fooClusterAlertGroup.ID(),\n\t\t\tGroupIntervalSeconds:  pulumi.Int(600),\n\t\t\tRepeatIntervalSeconds: pulumi.Int(6000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert rule annotations (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create cluster alert rule (string)\n"
                },
                "eventRule": {
                    "$ref": "#/types/rancher2:/ClusterAlertRuleEventRule:ClusterAlertRuleEventRule",
                    "description": "The cluster alert rule event rule. ConflictsWith: `\"metric_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The cluster alert rule alert group ID (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule group wait seconds. Default: `180` (int)\n"
                },
                "inherited": {
                    "type": "boolean",
                    "description": "The cluster alert rule inherited. Default: `true` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert rule labels (map)\n"
                },
                "metricRule": {
                    "$ref": "#/types/rancher2:/ClusterAlertRuleMetricRule:ClusterAlertRuleMetricRule",
                    "description": "The cluster alert rule metric rule. ConflictsWith: `\"event_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster alert rule name (string)\n"
                },
                "nodeRule": {
                    "$ref": "#/types/rancher2:/ClusterAlertRuleNodeRule:ClusterAlertRuleNodeRule",
                    "description": "The cluster alert rule node rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule wait seconds. Default: `3600` (int)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The cluster alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                },
                "systemServiceRule": {
                    "$ref": "#/types/rancher2:/ClusterAlertRuleSystemServiceRule:ClusterAlertRuleSystemServiceRule",
                    "description": "The cluster alert rule system service rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"node_rule\"`` (list Maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "groupId",
                "labels",
                "name"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert rule annotations (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create cluster alert rule (string)\n"
                },
                "eventRule": {
                    "$ref": "#/types/rancher2:/ClusterAlertRuleEventRule:ClusterAlertRuleEventRule",
                    "description": "The cluster alert rule event rule. ConflictsWith: `\"metric_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The cluster alert rule alert group ID (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule group wait seconds. Default: `180` (int)\n"
                },
                "inherited": {
                    "type": "boolean",
                    "description": "The cluster alert rule inherited. Default: `true` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert rule labels (map)\n"
                },
                "metricRule": {
                    "$ref": "#/types/rancher2:/ClusterAlertRuleMetricRule:ClusterAlertRuleMetricRule",
                    "description": "The cluster alert rule metric rule. ConflictsWith: `\"event_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster alert rule name (string)\n"
                },
                "nodeRule": {
                    "$ref": "#/types/rancher2:/ClusterAlertRuleNodeRule:ClusterAlertRuleNodeRule",
                    "description": "The cluster alert rule node rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule wait seconds. Default: `3600` (int)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The cluster alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                },
                "systemServiceRule": {
                    "$ref": "#/types/rancher2:/ClusterAlertRuleSystemServiceRule:ClusterAlertRuleSystemServiceRule",
                    "description": "The cluster alert rule system service rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"node_rule\"`` (list Maxitems:1)\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterAlertRule resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The cluster alert rule annotations (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create cluster alert rule (string)\n"
                    },
                    "eventRule": {
                        "$ref": "#/types/rancher2:/ClusterAlertRuleEventRule:ClusterAlertRuleEventRule",
                        "description": "The cluster alert rule event rule. ConflictsWith: `\"metric_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The cluster alert rule alert group ID (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "The cluster alert rule group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "The cluster alert rule group wait seconds. Default: `180` (int)\n"
                    },
                    "inherited": {
                        "type": "boolean",
                        "description": "The cluster alert rule inherited. Default: `true` (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The cluster alert rule labels (map)\n"
                    },
                    "metricRule": {
                        "$ref": "#/types/rancher2:/ClusterAlertRuleMetricRule:ClusterAlertRuleMetricRule",
                        "description": "The cluster alert rule metric rule. ConflictsWith: `\"event_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster alert rule name (string)\n"
                    },
                    "nodeRule": {
                        "$ref": "#/types/rancher2:/ClusterAlertRuleNodeRule:ClusterAlertRuleNodeRule",
                        "description": "The cluster alert rule node rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "The cluster alert rule wait seconds. Default: `3600` (int)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "The cluster alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                    },
                    "systemServiceRule": {
                        "$ref": "#/types/rancher2:/ClusterAlertRuleSystemServiceRule:ClusterAlertRuleSystemServiceRule",
                        "description": "The cluster alert rule system service rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"node_rule\"`` (list Maxitems:1)\n"
                    }
                },
                "type": "object"
            },
            "aliases": [
                {
                    "type": "rancher2:index/clusterAlterRule:ClusterAlterRule"
                }
            ]
        },
        "rancher2:index/clusterAlterGroup:ClusterAlterGroup": {
            "description": "Provides a Rancher v2 Cluster Alert Group resource. This can be used to create Cluster Alert Group for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Cluster Alert Group\nconst foo = new rancher2.ClusterAlertGroup(\"foo\", {\n    clusterId: \"\u003ccluster_id\u003e\",\n    description: \"Terraform cluster alert group\",\n    groupIntervalSeconds: 300,\n    repeatIntervalSeconds: 3600,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Cluster Alert Group\nfoo = rancher2.ClusterAlertGroup(\"foo\",\n    cluster_id=\"\u003ccluster_id\u003e\",\n    description=\"Terraform cluster alert group\",\n    group_interval_seconds=300,\n    repeat_interval_seconds=3600)\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Rancher2 Cluster Alert Group\n        var foo = new Rancher2.ClusterAlertGroup(\"foo\", new Rancher2.ClusterAlertGroupArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            Description = \"Terraform cluster alert group\",\n            GroupIntervalSeconds = 300,\n            RepeatIntervalSeconds = 3600,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewClusterAlertGroup(ctx, \"foo\", \u0026rancher2.ClusterAlertGroupArgs{\n\t\t\tClusterId:             pulumi.String(\"\u003ccluster_id\u003e\"),\n\t\t\tDescription:           pulumi.String(\"Terraform cluster alert group\"),\n\t\t\tGroupIntervalSeconds:  pulumi.Int(300),\n\t\t\tRepeatIntervalSeconds: pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert group annotations (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create cluster alert group (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The cluster alert group description (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group wait seconds. Default: `180` (int)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert group labels (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster alert group name (string)\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterAlterGroupRecipient:ClusterAlterGroupRecipient"
                    },
                    "description": "The cluster alert group recipients (list)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group wait seconds. Default: `3600` (int)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "labels",
                "name"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert group annotations (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create cluster alert group (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The cluster alert group description (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group wait seconds. Default: `180` (int)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert group labels (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster alert group name (string)\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterAlterGroupRecipient:ClusterAlterGroupRecipient"
                    },
                    "description": "The cluster alert group recipients (list)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert group wait seconds. Default: `3600` (int)\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterAlterGroup resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The cluster alert group annotations (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create cluster alert group (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The cluster alert group description (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "The cluster alert group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "The cluster alert group wait seconds. Default: `180` (int)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The cluster alert group labels (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster alert group name (string)\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/ClusterAlterGroupRecipient:ClusterAlterGroupRecipient"
                        },
                        "description": "The cluster alert group recipients (list)\n"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "The cluster alert group wait seconds. Default: `3600` (int)\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "rancher2.ClusterAlterGroup has been deprecated in favor of rancher2.ClusterAlertGroup"
        },
        "rancher2:index/clusterAlterRule:ClusterAlterRule": {
            "description": "Provides a Rancher v2 Cluster Alert Rule resource. This can be used to create Cluster Alert Rule for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Cluster Alert Group\nconst fooClusterAlertGroup = new rancher2.ClusterAlertGroup(\"foo\", {\n    clusterId: \"\u003ccluster_id\u003e\",\n    description: \"Terraform cluster alert group\",\n    groupIntervalSeconds: 300,\n    repeatIntervalSeconds: 3600,\n});\n// Create a new Rancher2 Cluster Alert Rule\nconst fooClusterAlertRule = new rancher2.ClusterAlertRule(\"foo\", {\n    clusterId: fooClusterAlertGroup.clusterId,\n    groupId: fooClusterAlertGroup.id,\n    groupIntervalSeconds: 600,\n    repeatIntervalSeconds: 6000,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Cluster Alert Group\nfoo_cluster_alert_group = rancher2.ClusterAlertGroup(\"fooClusterAlertGroup\",\n    cluster_id=\"\u003ccluster_id\u003e\",\n    description=\"Terraform cluster alert group\",\n    group_interval_seconds=300,\n    repeat_interval_seconds=3600)\n# Create a new Rancher2 Cluster Alert Rule\nfoo_cluster_alert_rule = rancher2.ClusterAlertRule(\"fooClusterAlertRule\",\n    cluster_id=foo_cluster_alert_group.cluster_id,\n    group_id=foo_cluster_alert_group.id,\n    group_interval_seconds=600,\n    repeat_interval_seconds=6000)\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Rancher2 Cluster Alert Group\n        var fooClusterAlertGroup = new Rancher2.ClusterAlertGroup(\"fooClusterAlertGroup\", new Rancher2.ClusterAlertGroupArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            Description = \"Terraform cluster alert group\",\n            GroupIntervalSeconds = 300,\n            RepeatIntervalSeconds = 3600,\n        });\n        // Create a new Rancher2 Cluster Alert Rule\n        var fooClusterAlertRule = new Rancher2.ClusterAlertRule(\"fooClusterAlertRule\", new Rancher2.ClusterAlertRuleArgs\n        {\n            ClusterId = fooClusterAlertGroup.ClusterId,\n            GroupId = fooClusterAlertGroup.Id,\n            GroupIntervalSeconds = 600,\n            RepeatIntervalSeconds = 6000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooClusterAlertGroup, err := rancher2.NewClusterAlertGroup(ctx, \"fooClusterAlertGroup\", \u0026rancher2.ClusterAlertGroupArgs{\n\t\t\tClusterId:             pulumi.String(\"\u003ccluster_id\u003e\"),\n\t\t\tDescription:           pulumi.String(\"Terraform cluster alert group\"),\n\t\t\tGroupIntervalSeconds:  pulumi.Int(300),\n\t\t\tRepeatIntervalSeconds: pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewClusterAlertRule(ctx, \"fooClusterAlertRule\", \u0026rancher2.ClusterAlertRuleArgs{\n\t\t\tClusterId:             fooClusterAlertGroup.ClusterId,\n\t\t\tGroupId:               fooClusterAlertGroup.ID(),\n\t\t\tGroupIntervalSeconds:  pulumi.Int(600),\n\t\t\tRepeatIntervalSeconds: pulumi.Int(6000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert rule annotations (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create cluster alert rule (string)\n"
                },
                "eventRule": {
                    "$ref": "#/types/rancher2:/ClusterAlterRuleEventRule:ClusterAlterRuleEventRule",
                    "description": "The cluster alert rule event rule. ConflictsWith: `\"metric_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The cluster alert rule alert group ID (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule group wait seconds. Default: `180` (int)\n"
                },
                "inherited": {
                    "type": "boolean",
                    "description": "The cluster alert rule inherited. Default: `true` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert rule labels (map)\n"
                },
                "metricRule": {
                    "$ref": "#/types/rancher2:/ClusterAlterRuleMetricRule:ClusterAlterRuleMetricRule",
                    "description": "The cluster alert rule metric rule. ConflictsWith: `\"event_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster alert rule name (string)\n"
                },
                "nodeRule": {
                    "$ref": "#/types/rancher2:/ClusterAlterRuleNodeRule:ClusterAlterRuleNodeRule",
                    "description": "The cluster alert rule node rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule wait seconds. Default: `3600` (int)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The cluster alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                },
                "systemServiceRule": {
                    "$ref": "#/types/rancher2:/ClusterAlterRuleSystemServiceRule:ClusterAlterRuleSystemServiceRule",
                    "description": "The cluster alert rule system service rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"node_rule\"`` (list Maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "groupId",
                "labels",
                "name"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert rule annotations (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create cluster alert rule (string)\n"
                },
                "eventRule": {
                    "$ref": "#/types/rancher2:/ClusterAlterRuleEventRule:ClusterAlterRuleEventRule",
                    "description": "The cluster alert rule event rule. ConflictsWith: `\"metric_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The cluster alert rule alert group ID (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule group wait seconds. Default: `180` (int)\n"
                },
                "inherited": {
                    "type": "boolean",
                    "description": "The cluster alert rule inherited. Default: `true` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The cluster alert rule labels (map)\n"
                },
                "metricRule": {
                    "$ref": "#/types/rancher2:/ClusterAlterRuleMetricRule:ClusterAlterRuleMetricRule",
                    "description": "The cluster alert rule metric rule. ConflictsWith: `\"event_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster alert rule name (string)\n"
                },
                "nodeRule": {
                    "$ref": "#/types/rancher2:/ClusterAlterRuleNodeRule:ClusterAlterRuleNodeRule",
                    "description": "The cluster alert rule node rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The cluster alert rule wait seconds. Default: `3600` (int)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The cluster alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                },
                "systemServiceRule": {
                    "$ref": "#/types/rancher2:/ClusterAlterRuleSystemServiceRule:ClusterAlterRuleSystemServiceRule",
                    "description": "The cluster alert rule system service rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"node_rule\"`` (list Maxitems:1)\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterAlterRule resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The cluster alert rule annotations (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create cluster alert rule (string)\n"
                    },
                    "eventRule": {
                        "$ref": "#/types/rancher2:/ClusterAlterRuleEventRule:ClusterAlterRuleEventRule",
                        "description": "The cluster alert rule event rule. ConflictsWith: `\"metric_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The cluster alert rule alert group ID (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "The cluster alert rule group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "The cluster alert rule group wait seconds. Default: `180` (int)\n"
                    },
                    "inherited": {
                        "type": "boolean",
                        "description": "The cluster alert rule inherited. Default: `true` (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The cluster alert rule labels (map)\n"
                    },
                    "metricRule": {
                        "$ref": "#/types/rancher2:/ClusterAlterRuleMetricRule:ClusterAlterRuleMetricRule",
                        "description": "The cluster alert rule metric rule. ConflictsWith: `\"event_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster alert rule name (string)\n"
                    },
                    "nodeRule": {
                        "$ref": "#/types/rancher2:/ClusterAlterRuleNodeRule:ClusterAlterRuleNodeRule",
                        "description": "The cluster alert rule node rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "The cluster alert rule wait seconds. Default: `3600` (int)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "The cluster alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                    },
                    "systemServiceRule": {
                        "$ref": "#/types/rancher2:/ClusterAlterRuleSystemServiceRule:ClusterAlterRuleSystemServiceRule",
                        "description": "The cluster alert rule system service rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"node_rule\"`` (list Maxitems:1)\n"
                    }
                },
                "type": "object"
            },
            "deprecationMessage": "rancher2.ClusterAlterRule has been deprecated in favor of rancher2.ClusterAlertRule"
        },
        "rancher2:index/clusterDriver:ClusterDriver": {
            "description": "Provides a Rancher v2 Cluster Driver resource. This can be used to create Cluster Driver for Rancher v2.2.x Kontainer Engine clusters and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Cluster Driver\nconst foo = new rancher2.ClusterDriver(\"foo\", {\n    active: true,\n    builtin: false,\n    checksum: \"0x0\",\n    description: \"Foo description\",\n    externalId: \"foo_external\",\n    uiUrl: \"local://ui\",\n    url: \"local://\",\n    whitelistDomains: [\"*.foo.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Cluster Driver\nfoo = rancher2.ClusterDriver(\"foo\",\n    active=True,\n    builtin=False,\n    checksum=\"0x0\",\n    description=\"Foo description\",\n    external_id=\"foo_external\",\n    ui_url=\"local://ui\",\n    url=\"local://\",\n    whitelist_domains=[\"*.foo.com\"])\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Specify the cluster driver state (bool)\n"
                },
                "actualUrl": {
                    "type": "string",
                    "description": "Actual url of the cluster driver (string)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "Specify whether the cluster driver is an internal cluster driver or not (bool)\n"
                },
                "checksum": {
                    "type": "string",
                    "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster driver (string)\n"
                },
                "uiUrl": {
                    "type": "string",
                    "description": "The URL to load for customized Add Clusters screen for this driver (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                },
                "whitelistDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domains to whitelist for the ui (list)\n"
                }
            },
            "required": [
                "active",
                "annotations",
                "builtin",
                "labels",
                "name",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Specify the cluster driver state (bool)\n"
                },
                "actualUrl": {
                    "type": "string",
                    "description": "Actual url of the cluster driver (string)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "Specify whether the cluster driver is an internal cluster driver or not (bool)\n"
                },
                "checksum": {
                    "type": "string",
                    "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster driver (string)\n"
                },
                "uiUrl": {
                    "type": "string",
                    "description": "The URL to load for customized Add Clusters screen for this driver (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                },
                "whitelistDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domains to whitelist for the ui (list)\n"
                }
            },
            "requiredInputs": [
                "active",
                "builtin",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterDriver resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Specify the cluster driver state (bool)\n"
                    },
                    "actualUrl": {
                        "type": "string",
                        "description": "Actual url of the cluster driver (string)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "Specify whether the cluster driver is an internal cluster driver or not (bool)\n"
                    },
                    "checksum": {
                        "type": "string",
                        "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster driver (string)\n"
                    },
                    "uiUrl": {
                        "type": "string",
                        "description": "The URL to load for customized Add Clusters screen for this driver (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                    },
                    "whitelistDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Domains to whitelist for the ui (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterLogging:ClusterLogging": {
            "description": "Provides a Rancher v2 Cluster Logging resource. This can be used to configure Cluster Logging for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Cluster Logging\nconst foo = new rancher2.ClusterLogging(\"foo\", {\n    clusterId: \"\u003ccluster_id\u003e\",\n    kind: \"syslog\",\n    syslogConfig: {\n        endpoint: \"\u003csyslog_endpoint\u003e\",\n        protocol: \"udp\",\n        severity: \"notice\",\n        sslVerify: false,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Cluster Logging\nfoo = rancher2.ClusterLogging(\"foo\",\n    cluster_id=\"\u003ccluster_id\u003e\",\n    kind=\"syslog\",\n    syslog_config={\n        \"endpoint\": \"\u003csyslog_endpoint\u003e\",\n        \"protocol\": \"udp\",\n        \"severity\": \"notice\",\n        \"sslVerify\": False,\n    })\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Rancher2 Cluster Logging\n        var foo = new Rancher2.ClusterLogging(\"foo\", new Rancher2.ClusterLoggingArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            Kind = \"syslog\",\n            SyslogConfig = new Rancher2.Inputs.ClusterLoggingSyslogConfigArgs\n            {\n                Endpoint = \"\u003csyslog_endpoint\u003e\",\n                Protocol = \"udp\",\n                Severity = \"notice\",\n                SslVerify = false,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewClusterLogging(ctx, \"foo\", \u0026rancher2.ClusterLoggingArgs{\n\t\t\tClusterId: pulumi.String(\"\u003ccluster_id\u003e\"),\n\t\t\tKind:      pulumi.String(\"syslog\"),\n\t\t\tSyslogConfig: \u0026rancher2.ClusterLoggingSyslogConfigArgs{\n\t\t\t\tEndpoint:  pulumi.String(\"\u003csyslog_endpoint\u003e\"),\n\t\t\t\tProtocol:  pulumi.String(\"udp\"),\n\t\t\t\tSeverity:  pulumi.String(\"notice\"),\n\t\t\t\tSslVerify: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Cluster Logging object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id to configure logging (string)\n"
                },
                "customTargetConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingCustomTargetConfig:ClusterLoggingCustomTargetConfig",
                    "description": "The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "elasticsearchConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingElasticsearchConfig:ClusterLoggingElasticsearchConfig",
                    "description": "The elasticsearch config for Cluster Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "enableJsonParsing": {
                    "type": "boolean",
                    "description": "Enable json log parsing. Default: `false` (bool)\n"
                },
                "fluentdConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingFluentdConfig:ClusterLoggingFluentdConfig",
                    "description": "The fluentd config for Cluster Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "kafkaConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingKafkaConfig:ClusterLoggingKafkaConfig",
                    "description": "The kafka config for Cluster Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Cluster Logging object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster logging config (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id from cluster logging (string)\n"
                },
                "outputFlushInterval": {
                    "type": "integer",
                    "description": "How often buffered logs would be flushed. Default: `3` seconds (int)\n"
                },
                "outputTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The output tags for Cluster Logging (map)\n"
                },
                "splunkConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingSplunkConfig:ClusterLoggingSplunkConfig",
                    "description": "The splunk config for Cluster Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)\n"
                },
                "syslogConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingSyslogConfig:ClusterLoggingSyslogConfig",
                    "description": "The syslog config for Cluster Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "kind",
                "labels",
                "name",
                "outputTags"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Cluster Logging object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id to configure logging (string)\n"
                },
                "customTargetConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingCustomTargetConfig:ClusterLoggingCustomTargetConfig",
                    "description": "The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "elasticsearchConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingElasticsearchConfig:ClusterLoggingElasticsearchConfig",
                    "description": "The elasticsearch config for Cluster Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "enableJsonParsing": {
                    "type": "boolean",
                    "description": "Enable json log parsing. Default: `false` (bool)\n"
                },
                "fluentdConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingFluentdConfig:ClusterLoggingFluentdConfig",
                    "description": "The fluentd config for Cluster Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "kafkaConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingKafkaConfig:ClusterLoggingKafkaConfig",
                    "description": "The kafka config for Cluster Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Cluster Logging object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster logging config (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id from cluster logging (string)\n"
                },
                "outputFlushInterval": {
                    "type": "integer",
                    "description": "How often buffered logs would be flushed. Default: `3` seconds (int)\n"
                },
                "outputTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The output tags for Cluster Logging (map)\n"
                },
                "splunkConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingSplunkConfig:ClusterLoggingSplunkConfig",
                    "description": "The splunk config for Cluster Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)\n"
                },
                "syslogConfig": {
                    "$ref": "#/types/rancher2:/ClusterLoggingSyslogConfig:ClusterLoggingSyslogConfig",
                    "description": "The syslog config for Cluster Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "kind"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterLogging resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for Cluster Logging object (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id to configure logging (string)\n"
                    },
                    "customTargetConfig": {
                        "$ref": "#/types/rancher2:/ClusterLoggingCustomTargetConfig:ClusterLoggingCustomTargetConfig",
                        "description": "The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                    },
                    "elasticsearchConfig": {
                        "$ref": "#/types/rancher2:/ClusterLoggingElasticsearchConfig:ClusterLoggingElasticsearchConfig",
                        "description": "The elasticsearch config for Cluster Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                    },
                    "enableJsonParsing": {
                        "type": "boolean",
                        "description": "Enable json log parsing. Default: `false` (bool)\n"
                    },
                    "fluentdConfig": {
                        "$ref": "#/types/rancher2:/ClusterLoggingFluentdConfig:ClusterLoggingFluentdConfig",
                        "description": "The fluentd config for Cluster Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                    },
                    "kafkaConfig": {
                        "$ref": "#/types/rancher2:/ClusterLoggingKafkaConfig:ClusterLoggingKafkaConfig",
                        "description": "The kafka config for Cluster Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for Cluster Logging object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster logging config (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id from cluster logging (string)\n"
                    },
                    "outputFlushInterval": {
                        "type": "integer",
                        "description": "How often buffered logs would be flushed. Default: `3` seconds (int)\n"
                    },
                    "outputTags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The output tags for Cluster Logging (map)\n"
                    },
                    "splunkConfig": {
                        "$ref": "#/types/rancher2:/ClusterLoggingSplunkConfig:ClusterLoggingSplunkConfig",
                        "description": "The splunk config for Cluster Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)\n"
                    },
                    "syslogConfig": {
                        "$ref": "#/types/rancher2:/ClusterLoggingSyslogConfig:ClusterLoggingSyslogConfig",
                        "description": "The syslog config for Cluster Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterRoleTemplateBinding:ClusterRoleTemplateBinding": {
            "description": "Provides a Rancher v2 Cluster Role Template Binding resource. This can be used to create Cluster Role Template Bindings for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Cluster Role Template Binding\nconst foo = new rancher2.ClusterRoleTemplateBinding(\"foo\", {\n    clusterId: \"\u003ccluster_id\u003e\",\n    roleTemplateId: \"\u003crole_template_id\u003e\",\n    userId: \"\u003cuser_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Cluster Role Template Binding\nfoo = rancher2.ClusterRoleTemplateBinding(\"foo\",\n    cluster_id=\"\u003ccluster_id\u003e\",\n    role_template_id=\"\u003crole_template_id\u003e\",\n    user_id=\"\u003cuser_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Rancher2 Cluster Role Template Binding\n        var foo = new Rancher2.ClusterRoleTemplateBinding(\"foo\", new Rancher2.ClusterRoleTemplateBindingArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            RoleTemplateId = \"\u003crole_template_id\u003e\",\n            UserId = \"\u003cuser_id\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewClusterRoleTemplateBinding(ctx, \"foo\", \u0026rancher2.ClusterRoleTemplateBindingArgs{\n\t\t\tClusterId:      pulumi.String(\"\u003ccluster_id\u003e\"),\n\t\t\tRoleTemplateId: pulumi.String(\"\u003crole_template_id\u003e\"),\n\t\t\tUserId:         pulumi.String(\"\u003cuser_id\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for cluster role template binding (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where bind cluster role template binding (string)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The group ID to assign cluster role template binding (string)\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The group_principal ID to assign cluster role template binding (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for cluster role template binding (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster role template binding (string)\n"
                },
                "roleTemplateId": {
                    "type": "string",
                    "description": "The role template id from create cluster role template binding (string)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign cluster role template binding (string)\n"
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "The user_principal ID to assign cluster role template binding (string)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "groupPrincipalId",
                "labels",
                "name",
                "roleTemplateId",
                "userPrincipalId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for cluster role template binding (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where bind cluster role template binding (string)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The group ID to assign cluster role template binding (string)\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The group_principal ID to assign cluster role template binding (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for cluster role template binding (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster role template binding (string)\n"
                },
                "roleTemplateId": {
                    "type": "string",
                    "description": "The role template id from create cluster role template binding (string)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign cluster role template binding (string)\n"
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "The user_principal ID to assign cluster role template binding (string)\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "roleTemplateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterRoleTemplateBinding resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for cluster role template binding (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where bind cluster role template binding (string)\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The group ID to assign cluster role template binding (string)\n"
                    },
                    "groupPrincipalId": {
                        "type": "string",
                        "description": "The group_principal ID to assign cluster role template binding (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for cluster role template binding (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster role template binding (string)\n"
                    },
                    "roleTemplateId": {
                        "type": "string",
                        "description": "The role template id from create cluster role template binding (string)\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID to assign cluster role template binding (string)\n"
                    },
                    "userPrincipalId": {
                        "type": "string",
                        "description": "The user_principal ID to assign cluster role template binding (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterSync:ClusterSync": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster ID that is syncing (string)\n"
                },
                "defaultProjectId": {
                    "type": "string",
                    "description": "(Computed) Default project ID for the cluster sync (string)\n"
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Kube Config generated for the cluster sync (string)\n"
                },
                "nodePoolIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The node pool IDs used by the cluster id (list)\n"
                },
                "synced": {
                    "type": "boolean"
                },
                "systemProjectId": {
                    "type": "string",
                    "description": "(Computed) System project ID for the cluster sync (string)\n"
                },
                "waitMonitoring": {
                    "type": "boolean",
                    "description": "Wait until monitoring is up and running. Default: `false` (bool)\n"
                }
            },
            "required": [
                "clusterId",
                "defaultProjectId",
                "kubeConfig",
                "systemProjectId"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster ID that is syncing (string)\n"
                },
                "nodePoolIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The node pool IDs used by the cluster id (list)\n"
                },
                "synced": {
                    "type": "boolean"
                },
                "waitMonitoring": {
                    "type": "boolean",
                    "description": "Wait until monitoring is up and running. Default: `false` (bool)\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterSync resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID that is syncing (string)\n"
                    },
                    "defaultProjectId": {
                        "type": "string",
                        "description": "(Computed) Default project ID for the cluster sync (string)\n"
                    },
                    "kubeConfig": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Kube Config generated for the cluster sync (string)\n"
                    },
                    "nodePoolIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The node pool IDs used by the cluster id (list)\n"
                    },
                    "synced": {
                        "type": "boolean"
                    },
                    "systemProjectId": {
                        "type": "string",
                        "description": "(Computed) System project ID for the cluster sync (string)\n"
                    },
                    "waitMonitoring": {
                        "type": "boolean",
                        "description": "Wait until monitoring is up and running. Default: `false` (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterTemplate:ClusterTemplate": {
            "description": "Provides a Rancher v2 Cluster Template resource. This can be used to create Cluster Templates for Rancher v2 RKE clusters and retrieve their information. \n\nCluster Templates are available from Rancher v2.3.x and above.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Cluster Template\nconst foo = new rancher2.ClusterTemplate(\"foo\", {\n    description: \"Terraform cluster template foo\",\n    members: [{\n        accessType: \"owner\",\n        userPrincipalId: \"local://user-XXXXX\",\n    }],\n    templateRevisions: [{\n        clusterConfig: {\n            rkeConfig: {\n                network: {\n                    plugin: \"canal\",\n                },\n                services: {\n                    etcd: {\n                        creation: \"6h\",\n                        retention: \"24h\",\n                    },\n                },\n            },\n        },\n        default: true,\n        name: \"V1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Cluster Template\nfoo = rancher2.ClusterTemplate(\"foo\",\n    description=\"Terraform cluster template foo\",\n    members=[{\n        \"accessType\": \"owner\",\n        \"user_principal_id\": \"local://user-XXXXX\",\n    }],\n    template_revisions=[{\n        \"clusterConfig\": {\n            \"rke_config\": {\n                \"network\": {\n                    \"plugin\": \"canal\",\n                },\n                \"services\": {\n                    \"etcd\": {\n                        \"creation\": \"6h\",\n                        \"retention\": \"24h\",\n                    },\n                },\n            },\n        },\n        \"default\": True,\n        \"name\": \"V1\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Cluster Template\n        var foo = new Rancher2.ClusterTemplate(\"foo\", new Rancher2.ClusterTemplateArgs\n        {\n            Description = \"Terraform cluster template foo\",\n            Members = \n            {\n                new Rancher2.Inputs.ClusterTemplateMemberArgs\n                {\n                    AccessType = \"owner\",\n                    UserPrincipalId = \"local://user-XXXXX\",\n                },\n            },\n            TemplateRevisions = \n            {\n                new Rancher2.Inputs.ClusterTemplateTemplateRevisionArgs\n                {\n                    ClusterConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigArgs\n                    {\n                        RkeConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs\n                        {\n                            Network = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs\n                            {\n                                Plugin = \"canal\",\n                            },\n                            Services = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs\n                            {\n                                Etcd = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs\n                                {\n                                    Creation = \"6h\",\n                                    Retention = \"24h\",\n                                },\n                            },\n                        },\n                    },\n                    Default = true,\n                    Name = \"V1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewClusterTemplate(ctx, \"foo\", \u0026rancher2.ClusterTemplateArgs{\n\t\t\tDescription: pulumi.String(\"Terraform cluster template foo\"),\n\t\t\tMembers: rancher2.ClusterTemplateMemberArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateMemberArgs{\n\t\t\t\t\tAccessType:      pulumi.String(\"owner\"),\n\t\t\t\t\tUserPrincipalId: pulumi.String(\"local://user-XXXXX\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateTemplateRevisionArgs{\n\t\t\t\t\tClusterConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{\n\t\t\t\t\t\tRkeConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{\n\t\t\t\t\t\t\tNetwork: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{\n\t\t\t\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tServices: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{\n\t\t\t\t\t\t\t\tEtcd: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{\n\t\t\t\t\t\t\t\t\tCreation:  pulumi.String(\"6h\"),\n\t\t\t\t\t\t\t\t\tRetention: pulumi.String(\"24h\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDefault: pulumi.Bool(true),\n\t\t\t\t\tName:    pulumi.String(\"V1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nCreating Rancher v2 RKE cluster template with upgrade strategy. For Rancher v2.4.x or above.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Cluster Template\nconst foo = new rancher2.ClusterTemplate(\"foo\", {\n    description: \"Terraform cluster template foo\",\n    members: [{\n        accessType: \"owner\",\n        userPrincipalId: \"local://user-XXXXX\",\n    }],\n    templateRevisions: [{\n        clusterConfig: {\n            rkeConfig: {\n                network: {\n                    plugin: \"canal\",\n                },\n                services: {\n                    etcd: {\n                        creation: \"6h\",\n                        retention: \"24h\",\n                    },\n                },\n                upgradeStrategy: {\n                    drain: true,\n                    maxUnavailableWorker: \"20%\",\n                },\n            },\n        },\n        default: true,\n        name: \"V1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Cluster Template\nfoo = rancher2.ClusterTemplate(\"foo\",\n    description=\"Terraform cluster template foo\",\n    members=[{\n        \"accessType\": \"owner\",\n        \"user_principal_id\": \"local://user-XXXXX\",\n    }],\n    template_revisions=[{\n        \"clusterConfig\": {\n            \"rke_config\": {\n                \"network\": {\n                    \"plugin\": \"canal\",\n                },\n                \"services\": {\n                    \"etcd\": {\n                        \"creation\": \"6h\",\n                        \"retention\": \"24h\",\n                    },\n                },\n                \"upgrade_strategy\": {\n                    \"drain\": True,\n                    \"maxUnavailableWorker\": \"20%\",\n                },\n            },\n        },\n        \"default\": True,\n        \"name\": \"V1\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Cluster Template\n        var foo = new Rancher2.ClusterTemplate(\"foo\", new Rancher2.ClusterTemplateArgs\n        {\n            Description = \"Terraform cluster template foo\",\n            Members = \n            {\n                new Rancher2.Inputs.ClusterTemplateMemberArgs\n                {\n                    AccessType = \"owner\",\n                    UserPrincipalId = \"local://user-XXXXX\",\n                },\n            },\n            TemplateRevisions = \n            {\n                new Rancher2.Inputs.ClusterTemplateTemplateRevisionArgs\n                {\n                    ClusterConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigArgs\n                    {\n                        RkeConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs\n                        {\n                            Network = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs\n                            {\n                                Plugin = \"canal\",\n                            },\n                            Services = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs\n                            {\n                                Etcd = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs\n                                {\n                                    Creation = \"6h\",\n                                    Retention = \"24h\",\n                                },\n                            },\n                            UpgradeStrategy = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs\n                            {\n                                Drain = true,\n                                MaxUnavailableWorker = \"20%\",\n                            },\n                        },\n                    },\n                    Default = true,\n                    Name = \"V1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewClusterTemplate(ctx, \"foo\", \u0026rancher2.ClusterTemplateArgs{\n\t\t\tDescription: pulumi.String(\"Terraform cluster template foo\"),\n\t\t\tMembers: rancher2.ClusterTemplateMemberArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateMemberArgs{\n\t\t\t\t\tAccessType:      pulumi.String(\"owner\"),\n\t\t\t\t\tUserPrincipalId: pulumi.String(\"local://user-XXXXX\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateTemplateRevisionArgs{\n\t\t\t\t\tClusterConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{\n\t\t\t\t\t\tRkeConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{\n\t\t\t\t\t\t\tNetwork: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{\n\t\t\t\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tServices: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{\n\t\t\t\t\t\t\t\tEtcd: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{\n\t\t\t\t\t\t\t\t\tCreation:  pulumi.String(\"6h\"),\n\t\t\t\t\t\t\t\t\tRetention: pulumi.String(\"24h\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tUpgradeStrategy: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs{\n\t\t\t\t\t\t\t\tDrain:                pulumi.Bool(true),\n\t\t\t\t\t\t\t\tMaxUnavailableWorker: pulumi.String(fmt.Sprintf(\"%v%v\", \"20\", \"%\")),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDefault: pulumi.Bool(true),\n\t\t\t\t\tName:    pulumi.String(\"V1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nCreating Rancher v2 RKE cluster template with scheduled cluster scan. For Rancher v2.4.x or above.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Cluster Template\nconst foo = new rancher2.ClusterTemplate(\"foo\", {\n    description: \"Terraform cluster template foo\",\n    members: [{\n        accessType: \"owner\",\n        userPrincipalId: \"local://user-XXXXX\",\n    }],\n    templateRevisions: [{\n        clusterConfig: {\n            rkeConfig: {\n                network: {\n                    plugin: \"canal\",\n                },\n                services: {\n                    etcd: {\n                        creation: \"6h\",\n                        retention: \"24h\",\n                    },\n                },\n            },\n            scheduledClusterScan: {\n                enabled: true,\n                scanConfig: {\n                    cisScanConfig: {\n                        debugMaster: true,\n                        debugWorker: true,\n                    },\n                },\n                scheduleConfig: {\n                    cronSchedule: \"30 * * * *\",\n                    retention: 5,\n                },\n            },\n        },\n        default: true,\n        name: \"V1\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Cluster Template\nfoo = rancher2.ClusterTemplate(\"foo\",\n    description=\"Terraform cluster template foo\",\n    members=[{\n        \"accessType\": \"owner\",\n        \"user_principal_id\": \"local://user-XXXXX\",\n    }],\n    template_revisions=[{\n        \"clusterConfig\": {\n            \"rke_config\": {\n                \"network\": {\n                    \"plugin\": \"canal\",\n                },\n                \"services\": {\n                    \"etcd\": {\n                        \"creation\": \"6h\",\n                        \"retention\": \"24h\",\n                    },\n                },\n            },\n            \"scheduled_cluster_scan\": {\n                \"enabled\": True,\n                \"scanConfig\": {\n                    \"cisScanConfig\": {\n                        \"debugMaster\": True,\n                        \"debugWorker\": True,\n                    },\n                },\n                \"scheduleConfig\": {\n                    \"cronSchedule\": \"30 * * * *\",\n                    \"retention\": 5,\n                },\n            },\n        },\n        \"default\": True,\n        \"name\": \"V1\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Cluster Template\n        var foo = new Rancher2.ClusterTemplate(\"foo\", new Rancher2.ClusterTemplateArgs\n        {\n            Description = \"Terraform cluster template foo\",\n            Members = \n            {\n                new Rancher2.Inputs.ClusterTemplateMemberArgs\n                {\n                    AccessType = \"owner\",\n                    UserPrincipalId = \"local://user-XXXXX\",\n                },\n            },\n            TemplateRevisions = \n            {\n                new Rancher2.Inputs.ClusterTemplateTemplateRevisionArgs\n                {\n                    ClusterConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigArgs\n                    {\n                        RkeConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs\n                        {\n                            Network = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs\n                            {\n                                Plugin = \"canal\",\n                            },\n                            Services = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs\n                            {\n                                Etcd = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs\n                                {\n                                    Creation = \"6h\",\n                                    Retention = \"24h\",\n                                },\n                            },\n                        },\n                        ScheduledClusterScan = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanArgs\n                        {\n                            Enabled = true,\n                            ScanConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigArgs\n                            {\n                                CisScanConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfigArgs\n                                {\n                                    DebugMaster = true,\n                                    DebugWorker = true,\n                                },\n                            },\n                            ScheduleConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfigArgs\n                            {\n                                CronSchedule = \"30 * * * *\",\n                                Retention = 5,\n                            },\n                        },\n                    },\n                    Default = true,\n                    Name = \"V1\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewClusterTemplate(ctx, \"foo\", \u0026rancher2.ClusterTemplateArgs{\n\t\t\tDescription: pulumi.String(\"Terraform cluster template foo\"),\n\t\t\tMembers: rancher2.ClusterTemplateMemberArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateMemberArgs{\n\t\t\t\t\tAccessType:      pulumi.String(\"owner\"),\n\t\t\t\t\tUserPrincipalId: pulumi.String(\"local://user-XXXXX\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateTemplateRevisionArgs{\n\t\t\t\t\tClusterConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{\n\t\t\t\t\t\tRkeConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{\n\t\t\t\t\t\t\tNetwork: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{\n\t\t\t\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tServices: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{\n\t\t\t\t\t\t\t\tEtcd: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{\n\t\t\t\t\t\t\t\t\tCreation:  pulumi.String(\"6h\"),\n\t\t\t\t\t\t\t\t\tRetention: pulumi.String(\"24h\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tScheduledClusterScan: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanArgs{\n\t\t\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\t\t\tScanConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigArgs{\n\t\t\t\t\t\t\t\tCisScanConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfigArgs{\n\t\t\t\t\t\t\t\t\tDebugMaster: pulumi.Bool(true),\n\t\t\t\t\t\t\t\t\tDebugWorker: pulumi.Bool(true),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tScheduleConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfigArgs{\n\t\t\t\t\t\t\t\tCronSchedule: pulumi.String(\"30 * * * *\"),\n\t\t\t\t\t\t\t\tRetention:    pulumi.Int(5),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDefault: pulumi.Bool(true),\n\t\t\t\t\tName:    pulumi.String(\"V1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for the cluster template revision (map)\n"
                },
                "defaultRevisionId": {
                    "type": "string",
                    "description": "(Computed) Default cluster template revision ID (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Cluster template description\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for the cluster template revision (map)\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterTemplateMember:ClusterTemplateMember"
                    },
                    "description": "Cluster template members (list)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template revision name (string)\n"
                },
                "templateRevisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevision:ClusterTemplateTemplateRevision"
                    },
                    "description": "Cluster template revisions (list)\n"
                }
            },
            "required": [
                "annotations",
                "defaultRevisionId",
                "labels",
                "name",
                "templateRevisions"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for the cluster template revision (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Cluster template description\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for the cluster template revision (map)\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterTemplateMember:ClusterTemplateMember"
                    },
                    "description": "Cluster template members (list)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template revision name (string)\n"
                },
                "templateRevisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevision:ClusterTemplateTemplateRevision"
                    },
                    "description": "Cluster template revisions (list)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterTemplate resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for the cluster template revision (map)\n"
                    },
                    "defaultRevisionId": {
                        "type": "string",
                        "description": "(Computed) Default cluster template revision ID (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Cluster template description\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for the cluster template revision (map)\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/ClusterTemplateMember:ClusterTemplateMember"
                        },
                        "description": "Cluster template members (list)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster template revision name (string)\n"
                    },
                    "templateRevisions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/ClusterTemplateTemplateRevision:ClusterTemplateTemplateRevision"
                        },
                        "description": "Cluster template revisions (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/etcdBackup:EtcdBackup": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Etcd Backup object (map)\n"
                },
                "backupConfig": {
                    "$ref": "#/types/rancher2:/EtcdBackupBackupConfig:EtcdBackupBackupConfig",
                    "description": "Backup config for etcd backup (list maxitems:1)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID to config Etcd Backup (string)\n"
                },
                "filename": {
                    "type": "string",
                    "description": "Filename of the Etcd Backup (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Etcd Backup object (map)\n"
                },
                "manual": {
                    "type": "boolean",
                    "description": "Manual execution of the Etcd Backup. Default `false` (bool)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Etcd Backup (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "Description for the Etcd Backup (string)\n"
                }
            },
            "required": [
                "annotations",
                "backupConfig",
                "clusterId",
                "filename",
                "labels",
                "name",
                "namespaceId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Etcd Backup object (map)\n"
                },
                "backupConfig": {
                    "$ref": "#/types/rancher2:/EtcdBackupBackupConfig:EtcdBackupBackupConfig",
                    "description": "Backup config for etcd backup (list maxitems:1)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID to config Etcd Backup (string)\n"
                },
                "filename": {
                    "type": "string",
                    "description": "Filename of the Etcd Backup (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Etcd Backup object (map)\n"
                },
                "manual": {
                    "type": "boolean",
                    "description": "Manual execution of the Etcd Backup. Default `false` (bool)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Etcd Backup (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "Description for the Etcd Backup (string)\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EtcdBackup resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for Etcd Backup object (map)\n"
                    },
                    "backupConfig": {
                        "$ref": "#/types/rancher2:/EtcdBackupBackupConfig:EtcdBackupBackupConfig",
                        "description": "Backup config for etcd backup (list maxitems:1)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster ID to config Etcd Backup (string)\n"
                    },
                    "filename": {
                        "type": "string",
                        "description": "Filename of the Etcd Backup (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for Etcd Backup object (map)\n"
                    },
                    "manual": {
                        "type": "boolean",
                        "description": "Manual execution of the Etcd Backup. Default `false` (bool)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Etcd Backup (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "Description for the Etcd Backup (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/globalRoleBinding:GlobalRoleBinding": {
            "description": "Provides a Rancher v2 Global Role Binding resource. This can be used to create Global Role Bindings for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Global Role Binding using user_id\nconst foo = new rancher2.GlobalRoleBinding(\"foo\", {\n    globalRoleId: \"admin\",\n    userId: \"user-XXXXX\",\n});\n// Create a new rancher2 Global Role Binding using group_principal_id\nconst foo2 = new rancher2.GlobalRoleBinding(\"foo2\", {\n    globalRoleId: \"admin\",\n    groupPrincipalId: \"local://g-XXXXX\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Global Role Binding using user_id\nfoo = rancher2.GlobalRoleBinding(\"foo\",\n    global_role_id=\"admin\",\n    user_id=\"user-XXXXX\")\n# Create a new rancher2 Global Role Binding using group_principal_id\nfoo2 = rancher2.GlobalRoleBinding(\"foo2\",\n    global_role_id=\"admin\",\n    group_principal_id=\"local://g-XXXXX\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Global Role Binding using user_id\n        var foo = new Rancher2.GlobalRoleBinding(\"foo\", new Rancher2.GlobalRoleBindingArgs\n        {\n            GlobalRoleId = \"admin\",\n            UserId = \"user-XXXXX\",\n        });\n        // Create a new rancher2 Global Role Binding using group_principal_id\n        var foo2 = new Rancher2.GlobalRoleBinding(\"foo2\", new Rancher2.GlobalRoleBindingArgs\n        {\n            GlobalRoleId = \"admin\",\n            GroupPrincipalId = \"local://g-XXXXX\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewGlobalRoleBinding(ctx, \"foo\", \u0026rancher2.GlobalRoleBindingArgs{\n\t\t\tGlobalRoleId: pulumi.String(\"admin\"),\n\t\t\tUserId:       pulumi.String(\"user-XXXXX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewGlobalRoleBinding(ctx, \"foo2\", \u0026rancher2.GlobalRoleBindingArgs{\n\t\t\tGlobalRoleId:     pulumi.String(\"admin\"),\n\t\t\tGroupPrincipalId: pulumi.String(\"local://g-XXXXX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for global role binding (map)\n"
                },
                "globalRoleId": {
                    "type": "string",
                    "description": "The role id from create global role binding (string)\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The group principal ID to assign global role binding (only works with external auth providers that support groups). Rancher v2.4.0 or higher is required (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for global role binding (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the global role binding (string)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign global role binding (string)\n"
                }
            },
            "required": [
                "annotations",
                "globalRoleId",
                "groupPrincipalId",
                "labels",
                "name",
                "userId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for global role binding (map)\n"
                },
                "globalRoleId": {
                    "type": "string",
                    "description": "The role id from create global role binding (string)\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The group principal ID to assign global role binding (only works with external auth providers that support groups). Rancher v2.4.0 or higher is required (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for global role binding (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the global role binding (string)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign global role binding (string)\n"
                }
            },
            "requiredInputs": [
                "globalRoleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GlobalRoleBinding resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for global role binding (map)\n"
                    },
                    "globalRoleId": {
                        "type": "string",
                        "description": "The role id from create global role binding (string)\n"
                    },
                    "groupPrincipalId": {
                        "type": "string",
                        "description": "The group principal ID to assign global role binding (only works with external auth providers that support groups). Rancher v2.4.0 or higher is required (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for global role binding (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the global role binding (string)\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID to assign global role binding (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/multiClusterApp:MultiClusterApp": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for multi cluster app object (map)\n"
                },
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/MultiClusterAppAnswer:MultiClusterAppAnswer"
                    },
                    "description": "The multi cluster app answers (list)\n"
                },
                "catalogName": {
                    "type": "string",
                    "description": "The multi cluster app catalog name (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for multi cluster app object (map)\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/MultiClusterAppMember:MultiClusterAppMember"
                    },
                    "description": "The multi cluster app answers (list)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The multi cluster app name (string)\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "The multi cluster app revision history limit. Default `10` (int)\n"
                },
                "revisionId": {
                    "type": "string",
                    "description": "Current revision id for the multi cluster app (string)\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The multi cluster app roles (list)\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/MultiClusterAppTarget:MultiClusterAppTarget"
                    },
                    "description": "The multi cluster app target projects (list)\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "The multi cluster app template name (string)\n"
                },
                "templateVersion": {
                    "type": "string",
                    "description": "The multi cluster app template version. Default: `latest` (string)\n"
                },
                "templateVersionId": {
                    "type": "string",
                    "description": "(Computed) The multi cluster app template version ID (string)\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:/MultiClusterAppUpgradeStrategy:MultiClusterAppUpgradeStrategy",
                    "description": "The multi cluster app upgrade strategy (list MaxItems:1)\n"
                },
                "wait": {
                    "type": "boolean",
                    "description": "Wait until the multi cluster app is active. Default `true` (bool)\n"
                }
            },
            "required": [
                "annotations",
                "answers",
                "catalogName",
                "labels",
                "name",
                "revisionId",
                "roles",
                "targets",
                "templateName",
                "templateVersion",
                "templateVersionId",
                "upgradeStrategy"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for multi cluster app object (map)\n"
                },
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/MultiClusterAppAnswer:MultiClusterAppAnswer"
                    },
                    "description": "The multi cluster app answers (list)\n"
                },
                "catalogName": {
                    "type": "string",
                    "description": "The multi cluster app catalog name (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for multi cluster app object (map)\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/MultiClusterAppMember:MultiClusterAppMember"
                    },
                    "description": "The multi cluster app answers (list)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The multi cluster app name (string)\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "The multi cluster app revision history limit. Default `10` (int)\n"
                },
                "revisionId": {
                    "type": "string",
                    "description": "Current revision id for the multi cluster app (string)\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The multi cluster app roles (list)\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/MultiClusterAppTarget:MultiClusterAppTarget"
                    },
                    "description": "The multi cluster app target projects (list)\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "The multi cluster app template name (string)\n"
                },
                "templateVersion": {
                    "type": "string",
                    "description": "The multi cluster app template version. Default: `latest` (string)\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:/MultiClusterAppUpgradeStrategy:MultiClusterAppUpgradeStrategy",
                    "description": "The multi cluster app upgrade strategy (list MaxItems:1)\n"
                },
                "wait": {
                    "type": "boolean",
                    "description": "Wait until the multi cluster app is active. Default `true` (bool)\n"
                }
            },
            "requiredInputs": [
                "catalogName",
                "roles",
                "targets",
                "templateName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MultiClusterApp resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for multi cluster app object (map)\n"
                    },
                    "answers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/MultiClusterAppAnswer:MultiClusterAppAnswer"
                        },
                        "description": "The multi cluster app answers (list)\n"
                    },
                    "catalogName": {
                        "type": "string",
                        "description": "The multi cluster app catalog name (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for multi cluster app object (map)\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/MultiClusterAppMember:MultiClusterAppMember"
                        },
                        "description": "The multi cluster app answers (list)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The multi cluster app name (string)\n"
                    },
                    "revisionHistoryLimit": {
                        "type": "integer",
                        "description": "The multi cluster app revision history limit. Default `10` (int)\n"
                    },
                    "revisionId": {
                        "type": "string",
                        "description": "Current revision id for the multi cluster app (string)\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The multi cluster app roles (list)\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/MultiClusterAppTarget:MultiClusterAppTarget"
                        },
                        "description": "The multi cluster app target projects (list)\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "The multi cluster app template name (string)\n"
                    },
                    "templateVersion": {
                        "type": "string",
                        "description": "The multi cluster app template version. Default: `latest` (string)\n"
                    },
                    "templateVersionId": {
                        "type": "string",
                        "description": "(Computed) The multi cluster app template version ID (string)\n"
                    },
                    "upgradeStrategy": {
                        "$ref": "#/types/rancher2:/MultiClusterAppUpgradeStrategy:MultiClusterAppUpgradeStrategy",
                        "description": "The multi cluster app upgrade strategy (list MaxItems:1)\n"
                    },
                    "wait": {
                        "type": "boolean",
                        "description": "Wait until the multi cluster app is active. Default `true` (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/namespace:Namespace": {
            "description": "Provides a Rancher v2 Namespace resource. This can be used to create namespaces for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Namespace\nconst foo = new rancher2.Namespace(\"foo\", {\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n    description: \"foo namespace\",\n    projectId: \"\u003cPROJECT_ID\u003e\",\n    resourceQuota: {\n        limit: {\n            limitsCpu: \"100m\",\n            limitsMemory: \"100Mi\",\n            requestsStorage: \"1Gi\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Namespace\nfoo = rancher2.Namespace(\"foo\",\n    container_resource_limit={\n        \"limitsCpu\": \"20m\",\n        \"limitsMemory\": \"20Mi\",\n        \"requestsCpu\": \"1m\",\n        \"requestsMemory\": \"1Mi\",\n    },\n    description=\"foo namespace\",\n    project_id=\"\u003cPROJECT_ID\u003e\",\n    resource_quota={\n        \"limit\": {\n            \"limitsCpu\": \"100m\",\n            \"limitsMemory\": \"100Mi\",\n            \"requestsStorage\": \"1Gi\",\n        },\n    })\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Namespace\n        var foo = new Rancher2.Namespace(\"foo\", new Rancher2.NamespaceArgs\n        {\n            ContainerResourceLimit = new Rancher2.Inputs.NamespaceContainerResourceLimitArgs\n            {\n                LimitsCpu = \"20m\",\n                LimitsMemory = \"20Mi\",\n                RequestsCpu = \"1m\",\n                RequestsMemory = \"1Mi\",\n            },\n            Description = \"foo namespace\",\n            ProjectId = \"\u003cPROJECT_ID\u003e\",\n            ResourceQuota = new Rancher2.Inputs.NamespaceResourceQuotaArgs\n            {\n                Limit = new Rancher2.Inputs.NamespaceResourceQuotaLimitArgs\n                {\n                    LimitsCpu = \"100m\",\n                    LimitsMemory = \"100Mi\",\n                    RequestsStorage = \"1Gi\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewNamespace(ctx, \"foo\", \u0026rancher2.NamespaceArgs{\n\t\t\tContainerResourceLimit: \u0026rancher2.NamespaceContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"foo namespace\"),\n\t\t\tProjectId:   pulumi.String(\"\u003cPROJECT_ID\u003e\"),\n\t\t\tResourceQuota: \u0026rancher2.NamespaceResourceQuotaArgs{\n\t\t\t\tLimit: \u0026rancher2.NamespaceResourceQuotaLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"100m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"100Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Cluster \nconst foo_custom = new rancher2.Cluster(\"foo-custom\", {\n    description: \"Foo rancher2 custom cluster\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n    },\n});\n// Create a new rancher2 Namespace assigned to default cluster project\nconst foo = new rancher2.Namespace(\"foo\", {\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n    description: \"foo namespace\",\n    projectId: foo_custom.defaultProjectId,\n    resourceQuota: {\n        limit: {\n            limitsCpu: \"100m\",\n            limitsMemory: \"100Mi\",\n            requestsStorage: \"1Gi\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Cluster \nfoo_custom = rancher2.Cluster(\"foo-custom\",\n    description=\"Foo rancher2 custom cluster\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n    })\n# Create a new rancher2 Namespace assigned to default cluster project\nfoo = rancher2.Namespace(\"foo\",\n    container_resource_limit={\n        \"limitsCpu\": \"20m\",\n        \"limitsMemory\": \"20Mi\",\n        \"requestsCpu\": \"1m\",\n        \"requestsMemory\": \"1Mi\",\n    },\n    description=\"foo namespace\",\n    project_id=foo_custom.default_project_id,\n    resource_quota={\n        \"limit\": {\n            \"limitsCpu\": \"100m\",\n            \"limitsMemory\": \"100Mi\",\n            \"requestsStorage\": \"1Gi\",\n        },\n    })\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Cluster \n        var foo_custom = new Rancher2.Cluster(\"foo-custom\", new Rancher2.ClusterArgs\n        {\n            Description = \"Foo rancher2 custom cluster\",\n            RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs\n            {\n                Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs\n                {\n                    Plugin = \"canal\",\n                },\n            },\n        });\n        // Create a new rancher2 Namespace assigned to default cluster project\n        var foo = new Rancher2.Namespace(\"foo\", new Rancher2.NamespaceArgs\n        {\n            ContainerResourceLimit = new Rancher2.Inputs.NamespaceContainerResourceLimitArgs\n            {\n                LimitsCpu = \"20m\",\n                LimitsMemory = \"20Mi\",\n                RequestsCpu = \"1m\",\n                RequestsMemory = \"1Mi\",\n            },\n            Description = \"foo namespace\",\n            ProjectId = foo_custom.DefaultProjectId,\n            ResourceQuota = new Rancher2.Inputs.NamespaceResourceQuotaArgs\n            {\n                Limit = new Rancher2.Inputs.NamespaceResourceQuotaLimitArgs\n                {\n                    LimitsCpu = \"100m\",\n                    LimitsMemory = \"100Mi\",\n                    RequestsStorage = \"1Gi\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewCluster(ctx, \"foo_custom\", \u0026rancher2.ClusterArgs{\n\t\t\tDescription: pulumi.String(\"Foo rancher2 custom cluster\"),\n\t\t\tRkeConfig: \u0026rancher2.ClusterRkeConfigArgs{\n\t\t\t\tNetwork: \u0026rancher2.ClusterRkeConfigNetworkArgs{\n\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewNamespace(ctx, \"foo\", \u0026rancher2.NamespaceArgs{\n\t\t\tContainerResourceLimit: \u0026rancher2.NamespaceContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"foo namespace\"),\n\t\t\tProjectId:   foo_custom.DefaultProjectId,\n\t\t\tResourceQuota: \u0026rancher2.NamespaceResourceQuotaArgs{\n\t\t\t\tLimit: \u0026rancher2.NamespaceResourceQuotaLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"100m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"100Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "containerResourceLimit": {
                    "$ref": "#/types/rancher2:/NamespaceContainerResourceLimit:NamespaceContainerResourceLimit",
                    "description": "Default containers resource limits on namespace (List maxitem:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A namespace description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the namespace (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where assign namespace. It's on the form `project_id=\u003ccluster_id\u003e:\u003cid\u003e`. Updating `\u003cid\u003e` part on same `\u003ccluster_id\u003e` namespace will be moved between projects (string)\n"
                },
                "resourceQuota": {
                    "$ref": "#/types/rancher2:/NamespaceResourceQuota:NamespaceResourceQuota",
                    "description": "Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)\n"
                },
                "waitForCluster": {
                    "type": "boolean",
                    "description": "Wait for cluster becomes active. Default `false` (bool)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "containerResourceLimit": {
                    "$ref": "#/types/rancher2:/NamespaceContainerResourceLimit:NamespaceContainerResourceLimit",
                    "description": "Default containers resource limits on namespace (List maxitem:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A namespace description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the namespace (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where assign namespace. It's on the form `project_id=\u003ccluster_id\u003e:\u003cid\u003e`. Updating `\u003cid\u003e` part on same `\u003ccluster_id\u003e` namespace will be moved between projects (string)\n"
                },
                "resourceQuota": {
                    "$ref": "#/types/rancher2:/NamespaceResourceQuota:NamespaceResourceQuota",
                    "description": "Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)\n"
                },
                "waitForCluster": {
                    "type": "boolean",
                    "description": "Wait for cluster becomes active. Default `false` (bool)\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Namespace resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for Node Pool object (map)\n"
                    },
                    "containerResourceLimit": {
                        "$ref": "#/types/rancher2:/NamespaceContainerResourceLimit:NamespaceContainerResourceLimit",
                        "description": "Default containers resource limits on namespace (List maxitem:1)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A namespace description (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for Node Pool object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the namespace (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where assign namespace. It's on the form `project_id=\u003ccluster_id\u003e:\u003cid\u003e`. Updating `\u003cid\u003e` part on same `\u003ccluster_id\u003e` namespace will be moved between projects (string)\n"
                    },
                    "resourceQuota": {
                        "$ref": "#/types/rancher2:/NamespaceResourceQuota:NamespaceResourceQuota",
                        "description": "Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)\n"
                    },
                    "waitForCluster": {
                        "type": "boolean",
                        "description": "Wait for cluster becomes active. Default `false` (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/nodeDriver:NodeDriver": {
            "description": "Provides a Rancher v2 Node Driver resource. This can be used to create Node Driver for Rancher v2 RKE clusters and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Node Driver\nconst foo = new rancher2.NodeDriver(\"foo\", {\n    active: true,\n    builtin: false,\n    checksum: \"0x0\",\n    description: \"Foo description\",\n    externalId: \"foo_external\",\n    uiUrl: \"local://ui\",\n    url: \"local://\",\n    whitelistDomains: [\"*.foo.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Node Driver\nfoo = rancher2.NodeDriver(\"foo\",\n    active=True,\n    builtin=False,\n    checksum=\"0x0\",\n    description=\"Foo description\",\n    external_id=\"foo_external\",\n    ui_url=\"local://ui\",\n    url=\"local://\",\n    whitelist_domains=[\"*.foo.com\"])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Node Driver\n        var foo = new Rancher2.NodeDriver(\"foo\", new Rancher2.NodeDriverArgs\n        {\n            Active = true,\n            Builtin = false,\n            Checksum = \"0x0\",\n            Description = \"Foo description\",\n            ExternalId = \"foo_external\",\n            UiUrl = \"local://ui\",\n            Url = \"local://\",\n            WhitelistDomains = \n            {\n                \"*.foo.com\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewNodeDriver(ctx, \"foo\", \u0026rancher2.NodeDriverArgs{\n\t\t\tActive:      pulumi.Bool(true),\n\t\t\tBuiltin:     pulumi.Bool(false),\n\t\t\tChecksum:    pulumi.String(\"0x0\"),\n\t\t\tDescription: pulumi.String(\"Foo description\"),\n\t\t\tExternalId:  pulumi.String(\"foo_external\"),\n\t\t\tUiUrl:       pulumi.String(\"local://ui\"),\n\t\t\tUrl:         pulumi.String(\"local://\"),\n\t\t\tWhitelistDomains: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"*.foo.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Specify if the node driver state (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "Specify wheter the node driver is an internal node driver or not (bool)\n"
                },
                "checksum": {
                    "type": "string",
                    "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the node driver (string)\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External ID (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the node driver (string)\n"
                },
                "uiUrl": {
                    "type": "string",
                    "description": "The URL to load for customized Add Nodes screen for this driver (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                },
                "whitelistDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domains to whitelist for the ui (list)\n"
                }
            },
            "required": [
                "active",
                "annotations",
                "builtin",
                "labels",
                "name",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Specify if the node driver state (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "Specify wheter the node driver is an internal node driver or not (bool)\n"
                },
                "checksum": {
                    "type": "string",
                    "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the node driver (string)\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External ID (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the node driver (string)\n"
                },
                "uiUrl": {
                    "type": "string",
                    "description": "The URL to load for customized Add Nodes screen for this driver (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                },
                "whitelistDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domains to whitelist for the ui (list)\n"
                }
            },
            "requiredInputs": [
                "active",
                "builtin",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeDriver resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Specify if the node driver state (bool)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "Specify wheter the node driver is an internal node driver or not (bool)\n"
                    },
                    "checksum": {
                        "type": "string",
                        "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the node driver (string)\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External ID (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the node driver (string)\n"
                    },
                    "uiUrl": {
                        "type": "string",
                        "description": "The URL to load for customized Add Nodes screen for this driver (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                    },
                    "whitelistDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Domains to whitelist for the ui (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/nodePool:NodePool": {
            "description": "Provides a Rancher v2 Node Pool resource. This can be used to create Node Pool, using Node template for Rancher v2 RKE clusters and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 RKE Cluster \nconst foo_custom = new rancher2.Cluster(\"foo-custom\", {\n    description: \"Foo rancher2 custom cluster\",\n    kind: \"rke\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n    },\n});\n// Create a new rancher2 Cloud Credential\nconst fooCloudCredential = new rancher2.CloudCredential(\"foo\", {\n    amazonec2CredentialConfig: {\n        accessKey: \"XXXXXXXXXXXXXXXXXXXX\",\n        secretKey: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n    },\n    description: \"Terraform cloudCredential acceptance test\",\n});\n// Create a new rancher2 Node Template\nconst fooNodeTemplate = new rancher2.NodeTemplate(\"foo\", {\n    amazonec2Config: {\n        ami: \"\u003cAMI_ID\u003e\",\n        region: \"\u003cREGION\u003e\",\n        securityGroups: [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        subnetId: \"\u003cSUBNET_ID\u003e\",\n        vpcId: \"\u003cVPC_ID\u003e\",\n        zone: \"\u003cZONE\u003e\",\n    },\n    cloudCredentialId: fooCloudCredential.id,\n    description: \"foo test\",\n});\n// Create a new rancher2 Node Pool\nconst fooNodePool = new rancher2.NodePool(\"foo\", {\n    clusterId: foo_custom.id,\n    controlPlane: true,\n    etcd: true,\n    hostnamePrefix: \"foo-cluster-0\",\n    nodeTemplateId: fooNodeTemplate.id,\n    quantity: 1,\n    worker: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 RKE Cluster \nfoo_custom = rancher2.Cluster(\"foo-custom\",\n    description=\"Foo rancher2 custom cluster\",\n    kind=\"rke\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n    })\n# Create a new rancher2 Cloud Credential\nfoo_cloud_credential = rancher2.CloudCredential(\"fooCloudCredential\",\n    amazonec2_credential_config={\n        \"access_key\": \"XXXXXXXXXXXXXXXXXXXX\",\n        \"secret_key\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n    },\n    description=\"Terraform cloudCredential acceptance test\")\n# Create a new rancher2 Node Template\nfoo_node_template = rancher2.NodeTemplate(\"fooNodeTemplate\",\n    amazonec2_config={\n        \"ami\": \"\u003cAMI_ID\u003e\",\n        \"region\": \"\u003cREGION\u003e\",\n        \"securityGroups\": [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        \"subnetId\": \"\u003cSUBNET_ID\u003e\",\n        \"vpcId\": \"\u003cVPC_ID\u003e\",\n        \"zone\": \"\u003cZONE\u003e\",\n    },\n    cloud_credential_id=foo_cloud_credential.id,\n    description=\"foo test\")\n# Create a new rancher2 Node Pool\nfoo_node_pool = rancher2.NodePool(\"fooNodePool\",\n    cluster_id=foo_custom.id,\n    control_plane=True,\n    etcd=True,\n    hostname_prefix=\"foo-cluster-0\",\n    node_template_id=foo_node_template.id,\n    quantity=1,\n    worker=True)\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The RKE cluster id to use Node Pool (string)\n"
                },
                "controlPlane": {
                    "type": "boolean",
                    "description": "RKE control plane role for created nodes (bool)\n"
                },
                "deleteNotReadyAfterSecs": {
                    "type": "integer",
                    "description": "Delete not ready node after secs. For Rancher v2.3.3 or above. Default `0` (int)\n"
                },
                "etcd": {
                    "type": "boolean",
                    "description": "RKE etcd role for created nodes (bool)\n"
                },
                "hostnamePrefix": {
                    "type": "string",
                    "description": "The prefix for created nodes of the Node Pool (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Node Pool (string)\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/NodePoolNodeTaint:NodePoolNodeTaint"
                    },
                    "description": "Node taints. For Rancher v2.3.3 or above (List)\n"
                },
                "nodeTemplateId": {
                    "type": "string",
                    "description": "The Node Template ID to use for node creation (string)\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of nodes to create on Node Pool. Default `1`. Only values \u003e= 1 allowed (int)\n"
                },
                "worker": {
                    "type": "boolean",
                    "description": "RKE role role for created nodes (bool)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "hostnamePrefix",
                "labels",
                "name",
                "nodeTemplateId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The RKE cluster id to use Node Pool (string)\n"
                },
                "controlPlane": {
                    "type": "boolean",
                    "description": "RKE control plane role for created nodes (bool)\n"
                },
                "deleteNotReadyAfterSecs": {
                    "type": "integer",
                    "description": "Delete not ready node after secs. For Rancher v2.3.3 or above. Default `0` (int)\n"
                },
                "etcd": {
                    "type": "boolean",
                    "description": "RKE etcd role for created nodes (bool)\n"
                },
                "hostnamePrefix": {
                    "type": "string",
                    "description": "The prefix for created nodes of the Node Pool (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Node Pool (string)\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/NodePoolNodeTaint:NodePoolNodeTaint"
                    },
                    "description": "Node taints. For Rancher v2.3.3 or above (List)\n"
                },
                "nodeTemplateId": {
                    "type": "string",
                    "description": "The Node Template ID to use for node creation (string)\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of nodes to create on Node Pool. Default `1`. Only values \u003e= 1 allowed (int)\n"
                },
                "worker": {
                    "type": "boolean",
                    "description": "RKE role role for created nodes (bool)\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "hostnamePrefix",
                "nodeTemplateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodePool resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for Node Pool object (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The RKE cluster id to use Node Pool (string)\n"
                    },
                    "controlPlane": {
                        "type": "boolean",
                        "description": "RKE control plane role for created nodes (bool)\n"
                    },
                    "deleteNotReadyAfterSecs": {
                        "type": "integer",
                        "description": "Delete not ready node after secs. For Rancher v2.3.3 or above. Default `0` (int)\n"
                    },
                    "etcd": {
                        "type": "boolean",
                        "description": "RKE etcd role for created nodes (bool)\n"
                    },
                    "hostnamePrefix": {
                        "type": "string",
                        "description": "The prefix for created nodes of the Node Pool (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for Node Pool object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Pool (string)\n"
                    },
                    "nodeTaints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/NodePoolNodeTaint:NodePoolNodeTaint"
                        },
                        "description": "Node taints. For Rancher v2.3.3 or above (List)\n"
                    },
                    "nodeTemplateId": {
                        "type": "string",
                        "description": "The Node Template ID to use for node creation (string)\n"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The number of nodes to create on Node Pool. Default `1`. Only values \u003e= 1 allowed (int)\n"
                    },
                    "worker": {
                        "type": "boolean",
                        "description": "RKE role role for created nodes (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/nodeTemplate:NodeTemplate": {
            "description": "Provides a Rancher v2 Node Template resource. This can be used to create Node Template for Rancher v2 and retrieve their information.\n\namazonec2, azure, digitalocean, linode, opennebula, openstack, and vsphere drivers are supported for node templates.\n\n**Note** If you are upgrading to Rancher v2.3.3, please take a look to final section\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Node Template up to Rancher 2.1.x\nconst foo = new rancher2.NodeTemplate(\"foo\", {\n    amazonec2Config: {\n        accessKey: \"AWS_ACCESS_KEY\",\n        ami: \"\u003cAMI_ID\u003e\",\n        region: \"\u003cREGION\u003e\",\n        secretKey: \"\u003cAWS_SECRET_KEY\u003e\",\n        securityGroups: [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        subnetId: \"\u003cSUBNET_ID\u003e\",\n        vpcId: \"\u003cVPC_ID\u003e\",\n        zone: \"\u003cZONE\u003e\",\n    },\n    description: \"foo test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Node Template up to Rancher 2.1.x\nfoo = rancher2.NodeTemplate(\"foo\",\n    amazonec2_config={\n        \"access_key\": \"AWS_ACCESS_KEY\",\n        \"ami\": \"\u003cAMI_ID\u003e\",\n        \"region\": \"\u003cREGION\u003e\",\n        \"secret_key\": \"\u003cAWS_SECRET_KEY\u003e\",\n        \"securityGroups\": [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        \"subnetId\": \"\u003cSUBNET_ID\u003e\",\n        \"vpcId\": \"\u003cVPC_ID\u003e\",\n        \"zone\": \"\u003cZONE\u003e\",\n    },\n    description=\"foo test\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Node Template up to Rancher 2.1.x\n        var foo = new Rancher2.NodeTemplate(\"foo\", new Rancher2.NodeTemplateArgs\n        {\n            Amazonec2Config = new Rancher2.Inputs.NodeTemplateAmazonec2ConfigArgs\n            {\n                AccessKey = \"AWS_ACCESS_KEY\",\n                Ami = \"\u003cAMI_ID\u003e\",\n                Region = \"\u003cREGION\u003e\",\n                SecretKey = \"\u003cAWS_SECRET_KEY\u003e\",\n                SecurityGroups = \n                {\n                    \"\u003cAWS_SECURITY_GROUP\u003e\",\n                },\n                SubnetId = \"\u003cSUBNET_ID\u003e\",\n                VpcId = \"\u003cVPC_ID\u003e\",\n                Zone = \"\u003cZONE\u003e\",\n            },\n            Description = \"foo test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewNodeTemplate(ctx, \"foo\", \u0026rancher2.NodeTemplateArgs{\n\t\t\tAmazonec2Config: \u0026rancher2.NodeTemplateAmazonec2ConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"AWS_ACCESS_KEY\"),\n\t\t\t\tAmi:       pulumi.String(\"\u003cAMI_ID\u003e\"),\n\t\t\t\tRegion:    pulumi.String(\"\u003cREGION\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003cAWS_SECRET_KEY\u003e\"),\n\t\t\t\tSecurityGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"\u003cAWS_SECURITY_GROUP\u003e\"),\n\t\t\t\t},\n\t\t\t\tSubnetId: pulumi.String(\"\u003cSUBNET_ID\u003e\"),\n\t\t\t\tVpcId:    pulumi.String(\"\u003cVPC_ID\u003e\"),\n\t\t\t\tZone:     pulumi.String(\"\u003cZONE\u003e\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Node Template from Rancher 2.2.x\nconst fooCloudCredential = new rancher2.CloudCredential(\"foo\", {\n    amazonec2CredentialConfig: {\n        accessKey: \"\u003cAWS_ACCESS_KEY\u003e\",\n        secretKey: \"\u003cAWS_SECRET_KEY\u003e\",\n    },\n    description: \"foo test\",\n});\nconst fooNodeTemplate = new rancher2.NodeTemplate(\"foo\", {\n    amazonec2Config: {\n        ami: \"\u003cAMI_ID\u003e\",\n        region: \"\u003cREGION\u003e\",\n        securityGroups: [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        subnetId: \"\u003cSUBNET_ID\u003e\",\n        vpcId: \"\u003cVPC_ID\u003e\",\n        zone: \"\u003cZONE\u003e\",\n    },\n    cloudCredentialId: fooCloudCredential.id,\n    description: \"foo test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Node Template from Rancher 2.2.x\nfoo_cloud_credential = rancher2.CloudCredential(\"fooCloudCredential\",\n    amazonec2_credential_config={\n        \"access_key\": \"\u003cAWS_ACCESS_KEY\u003e\",\n        \"secret_key\": \"\u003cAWS_SECRET_KEY\u003e\",\n    },\n    description=\"foo test\")\nfoo_node_template = rancher2.NodeTemplate(\"fooNodeTemplate\",\n    amazonec2_config={\n        \"ami\": \"\u003cAMI_ID\u003e\",\n        \"region\": \"\u003cREGION\u003e\",\n        \"securityGroups\": [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        \"subnetId\": \"\u003cSUBNET_ID\u003e\",\n        \"vpcId\": \"\u003cVPC_ID\u003e\",\n        \"zone\": \"\u003cZONE\u003e\",\n    },\n    cloud_credential_id=foo_cloud_credential.id,\n    description=\"foo test\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Node Template from Rancher 2.2.x\n        var fooCloudCredential = new Rancher2.CloudCredential(\"fooCloudCredential\", new Rancher2.CloudCredentialArgs\n        {\n            Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs\n            {\n                AccessKey = \"\u003cAWS_ACCESS_KEY\u003e\",\n                SecretKey = \"\u003cAWS_SECRET_KEY\u003e\",\n            },\n            Description = \"foo test\",\n        });\n        var fooNodeTemplate = new Rancher2.NodeTemplate(\"fooNodeTemplate\", new Rancher2.NodeTemplateArgs\n        {\n            Amazonec2Config = new Rancher2.Inputs.NodeTemplateAmazonec2ConfigArgs\n            {\n                Ami = \"\u003cAMI_ID\u003e\",\n                Region = \"\u003cREGION\u003e\",\n                SecurityGroups = \n                {\n                    \"\u003cAWS_SECURITY_GROUP\u003e\",\n                },\n                SubnetId = \"\u003cSUBNET_ID\u003e\",\n                VpcId = \"\u003cVPC_ID\u003e\",\n                Zone = \"\u003cZONE\u003e\",\n            },\n            CloudCredentialId = fooCloudCredential.Id,\n            Description = \"foo test\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooCloudCredential, err := rancher2.NewCloudCredential(ctx, \"fooCloudCredential\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tAmazonec2CredentialConfig: \u0026rancher2.CloudCredentialAmazonec2CredentialConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"\u003cAWS_ACCESS_KEY\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003cAWS_SECRET_KEY\u003e\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewNodeTemplate(ctx, \"fooNodeTemplate\", \u0026rancher2.NodeTemplateArgs{\n\t\t\tAmazonec2Config: \u0026rancher2.NodeTemplateAmazonec2ConfigArgs{\n\t\t\t\tAmi:    pulumi.String(\"\u003cAMI_ID\u003e\"),\n\t\t\t\tRegion: pulumi.String(\"\u003cREGION\u003e\"),\n\t\t\t\tSecurityGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"\u003cAWS_SECURITY_GROUP\u003e\"),\n\t\t\t\t},\n\t\t\t\tSubnetId: pulumi.String(\"\u003cSUBNET_ID\u003e\"),\n\t\t\t\tVpcId:    pulumi.String(\"\u003cVPC_ID\u003e\"),\n\t\t\t\tZone:     pulumi.String(\"\u003cZONE\u003e\"),\n\t\t\t},\n\t\t\tCloudCredentialId: fooCloudCredential.ID(),\n\t\t\tDescription:       pulumi.String(\"foo test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "amazonec2Config": {
                    "$ref": "#/types/rancher2:/NodeTemplateAmazonec2Config:NodeTemplateAmazonec2Config",
                    "description": "AWS config for the Node Template (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Node Template object (map)\n"
                },
                "authCertificateAuthority": {
                    "type": "string",
                    "description": "Auth certificate authority for the Node Template (string)\n"
                },
                "authKey": {
                    "type": "string",
                    "description": "Auth key for the Node Template (string)\n"
                },
                "azureConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateAzureConfig:NodeTemplateAzureConfig",
                    "description": "Azure config for the Node Template (list maxitems:1)\n"
                },
                "cloudCredentialId": {
                    "type": "string",
                    "description": "Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Node Template (string)\n"
                },
                "digitaloceanConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateDigitaloceanConfig:NodeTemplateDigitaloceanConfig",
                    "description": "Digitalocean config for the Node Template (list maxitems:1)\n"
                },
                "driver": {
                    "type": "string",
                    "description": "(Computed) The driver of the node template (string)\n"
                },
                "driverId": {
                    "type": "string",
                    "description": "The node driver id used by the node template. It's required if the node driver isn't built in Rancher (string)\n"
                },
                "engineEnv": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Engine environment for the node template (string)\n"
                },
                "engineInsecureRegistries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Insecure registry for the node template (list)\n"
                },
                "engineInstallUrl": {
                    "type": "string",
                    "description": "Docker engine install URL for the node template. Default `https://releases.rancher.com/install-docker/18.09.sh`. Available install docker versions at `https://github.com/rancher/install-docker` (string)\n"
                },
                "engineLabel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Engine label for the node template (string)\n"
                },
                "engineOpt": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Engine options for the node template (map)\n"
                },
                "engineRegistryMirrors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Engine registry mirror for the node template (list)\n"
                },
                "engineStorageDriver": {
                    "type": "string",
                    "description": "Engine storage driver for the node template (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Node Template object (map)\n"
                },
                "linodeConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateLinodeConfig:NodeTemplateLinodeConfig",
                    "description": "Linode config for the Node Template (list maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Node Template (string)\n"
                },
                "opennebulaConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateOpennebulaConfig:NodeTemplateOpennebulaConfig",
                    "description": "Opennebula config for the Node Template (list maxitems:1)\n"
                },
                "openstackConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateOpenstackConfig:NodeTemplateOpenstackConfig",
                    "description": "Openstack config for the Node Template (list maxitems:1)\n"
                },
                "useInternalIpAddress": {
                    "type": "boolean",
                    "description": "Engine storage driver for the node template (bool)\n"
                },
                "vsphereConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateVsphereConfig:NodeTemplateVsphereConfig",
                    "description": "vSphere config for the Node Template (list maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "driver",
                "driverId",
                "labels",
                "name"
            ],
            "inputProperties": {
                "amazonec2Config": {
                    "$ref": "#/types/rancher2:/NodeTemplateAmazonec2Config:NodeTemplateAmazonec2Config",
                    "description": "AWS config for the Node Template (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Node Template object (map)\n"
                },
                "authCertificateAuthority": {
                    "type": "string",
                    "description": "Auth certificate authority for the Node Template (string)\n"
                },
                "authKey": {
                    "type": "string",
                    "description": "Auth key for the Node Template (string)\n"
                },
                "azureConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateAzureConfig:NodeTemplateAzureConfig",
                    "description": "Azure config for the Node Template (list maxitems:1)\n"
                },
                "cloudCredentialId": {
                    "type": "string",
                    "description": "Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Node Template (string)\n"
                },
                "digitaloceanConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateDigitaloceanConfig:NodeTemplateDigitaloceanConfig",
                    "description": "Digitalocean config for the Node Template (list maxitems:1)\n"
                },
                "driverId": {
                    "type": "string",
                    "description": "The node driver id used by the node template. It's required if the node driver isn't built in Rancher (string)\n"
                },
                "engineEnv": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Engine environment for the node template (string)\n"
                },
                "engineInsecureRegistries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Insecure registry for the node template (list)\n"
                },
                "engineInstallUrl": {
                    "type": "string",
                    "description": "Docker engine install URL for the node template. Default `https://releases.rancher.com/install-docker/18.09.sh`. Available install docker versions at `https://github.com/rancher/install-docker` (string)\n"
                },
                "engineLabel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Engine label for the node template (string)\n"
                },
                "engineOpt": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Engine options for the node template (map)\n"
                },
                "engineRegistryMirrors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Engine registry mirror for the node template (list)\n"
                },
                "engineStorageDriver": {
                    "type": "string",
                    "description": "Engine storage driver for the node template (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Node Template object (map)\n"
                },
                "linodeConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateLinodeConfig:NodeTemplateLinodeConfig",
                    "description": "Linode config for the Node Template (list maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Node Template (string)\n"
                },
                "opennebulaConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateOpennebulaConfig:NodeTemplateOpennebulaConfig",
                    "description": "Opennebula config for the Node Template (list maxitems:1)\n"
                },
                "openstackConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateOpenstackConfig:NodeTemplateOpenstackConfig",
                    "description": "Openstack config for the Node Template (list maxitems:1)\n"
                },
                "useInternalIpAddress": {
                    "type": "boolean",
                    "description": "Engine storage driver for the node template (bool)\n"
                },
                "vsphereConfig": {
                    "$ref": "#/types/rancher2:/NodeTemplateVsphereConfig:NodeTemplateVsphereConfig",
                    "description": "vSphere config for the Node Template (list maxitems:1)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeTemplate resources.\n",
                "properties": {
                    "amazonec2Config": {
                        "$ref": "#/types/rancher2:/NodeTemplateAmazonec2Config:NodeTemplateAmazonec2Config",
                        "description": "AWS config for the Node Template (list maxitems:1)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for Node Template object (map)\n"
                    },
                    "authCertificateAuthority": {
                        "type": "string",
                        "description": "Auth certificate authority for the Node Template (string)\n"
                    },
                    "authKey": {
                        "type": "string",
                        "description": "Auth key for the Node Template (string)\n"
                    },
                    "azureConfig": {
                        "$ref": "#/types/rancher2:/NodeTemplateAzureConfig:NodeTemplateAzureConfig",
                        "description": "Azure config for the Node Template (list maxitems:1)\n"
                    },
                    "cloudCredentialId": {
                        "type": "string",
                        "description": "Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Node Template (string)\n"
                    },
                    "digitaloceanConfig": {
                        "$ref": "#/types/rancher2:/NodeTemplateDigitaloceanConfig:NodeTemplateDigitaloceanConfig",
                        "description": "Digitalocean config for the Node Template (list maxitems:1)\n"
                    },
                    "driver": {
                        "type": "string",
                        "description": "(Computed) The driver of the node template (string)\n"
                    },
                    "driverId": {
                        "type": "string",
                        "description": "The node driver id used by the node template. It's required if the node driver isn't built in Rancher (string)\n"
                    },
                    "engineEnv": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Engine environment for the node template (string)\n"
                    },
                    "engineInsecureRegistries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Insecure registry for the node template (list)\n"
                    },
                    "engineInstallUrl": {
                        "type": "string",
                        "description": "Docker engine install URL for the node template. Default `https://releases.rancher.com/install-docker/18.09.sh`. Available install docker versions at `https://github.com/rancher/install-docker` (string)\n"
                    },
                    "engineLabel": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Engine label for the node template (string)\n"
                    },
                    "engineOpt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Engine options for the node template (map)\n"
                    },
                    "engineRegistryMirrors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Engine registry mirror for the node template (list)\n"
                    },
                    "engineStorageDriver": {
                        "type": "string",
                        "description": "Engine storage driver for the node template (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for Node Template object (map)\n"
                    },
                    "linodeConfig": {
                        "$ref": "#/types/rancher2:/NodeTemplateLinodeConfig:NodeTemplateLinodeConfig",
                        "description": "Linode config for the Node Template (list maxitems:1)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Template (string)\n"
                    },
                    "opennebulaConfig": {
                        "$ref": "#/types/rancher2:/NodeTemplateOpennebulaConfig:NodeTemplateOpennebulaConfig",
                        "description": "Opennebula config for the Node Template (list maxitems:1)\n"
                    },
                    "openstackConfig": {
                        "$ref": "#/types/rancher2:/NodeTemplateOpenstackConfig:NodeTemplateOpenstackConfig",
                        "description": "Openstack config for the Node Template (list maxitems:1)\n"
                    },
                    "useInternalIpAddress": {
                        "type": "boolean",
                        "description": "Engine storage driver for the node template (bool)\n"
                    },
                    "vsphereConfig": {
                        "$ref": "#/types/rancher2:/NodeTemplateVsphereConfig:NodeTemplateVsphereConfig",
                        "description": "vSphere config for the Node Template (list maxitems:1)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/notifier:Notifier": {
            "description": "Provides a Rancher v2 Notifier resource. This can be used to create notifiers for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Notifier\nconst foo = new rancher2.Notifier(\"foo\", {\n    clusterId: \"\u003ccluster_id\u003e\",\n    description: \"Terraform notifier acceptance test\",\n    pagerdutyConfig: {\n        proxyUrl: \"http://proxy.test.io\",\n        serviceKey: \"XXXXXXXX\",\n    },\n    sendResolved: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Notifier\nfoo = rancher2.Notifier(\"foo\",\n    cluster_id=\"\u003ccluster_id\u003e\",\n    description=\"Terraform notifier acceptance test\",\n    pagerduty_config={\n        \"proxyUrl\": \"http://proxy.test.io\",\n        \"serviceKey\": \"XXXXXXXX\",\n    },\n    send_resolved=\"true\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Notifier\n        var foo = new Rancher2.Notifier(\"foo\", new Rancher2.NotifierArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            Description = \"Terraform notifier acceptance test\",\n            PagerdutyConfig = new Rancher2.Inputs.NotifierPagerdutyConfigArgs\n            {\n                ProxyUrl = \"http://proxy.test.io\",\n                ServiceKey = \"XXXXXXXX\",\n            },\n            SendResolved = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewNotifier(ctx, \"foo\", \u0026rancher2.NotifierArgs{\n\t\t\tClusterId:   pulumi.String(\"\u003ccluster_id\u003e\"),\n\t\t\tDescription: pulumi.String(\"Terraform notifier acceptance test\"),\n\t\t\tPagerdutyConfig: \u0026rancher2.NotifierPagerdutyConfigArgs{\n\t\t\t\tProxyUrl:   pulumi.String(\"http://proxy.test.io\"),\n\t\t\t\tServiceKey: pulumi.String(\"XXXXXXXX\"),\n\t\t\t},\n\t\t\tSendResolved: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for notifier object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create notifier (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The notifier description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for notifier object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notifier (string)\n"
                },
                "pagerdutyConfig": {
                    "$ref": "#/types/rancher2:/NotifierPagerdutyConfig:NotifierPagerdutyConfig",
                    "description": "Pagerduty config for notifier (list maxitems:1)\n"
                },
                "sendResolved": {
                    "type": "boolean",
                    "description": "= (Optional) Enable the notifier to send resolved notifications. Default `false` (bool)\n"
                },
                "slackConfig": {
                    "$ref": "#/types/rancher2:/NotifierSlackConfig:NotifierSlackConfig",
                    "description": "Slack config for notifier (list maxitems:1)\n"
                },
                "smtpConfig": {
                    "$ref": "#/types/rancher2:/NotifierSmtpConfig:NotifierSmtpConfig",
                    "description": "SMTP config for notifier (list maxitems:1)\n"
                },
                "webhookConfig": {
                    "$ref": "#/types/rancher2:/NotifierWebhookConfig:NotifierWebhookConfig",
                    "description": "Webhook config for notifier (list maxitems:1)\n"
                },
                "wechatConfig": {
                    "$ref": "#/types/rancher2:/NotifierWechatConfig:NotifierWechatConfig",
                    "description": "Wechat config for notifier (list maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "labels",
                "name"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for notifier object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create notifier (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The notifier description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for notifier object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notifier (string)\n"
                },
                "pagerdutyConfig": {
                    "$ref": "#/types/rancher2:/NotifierPagerdutyConfig:NotifierPagerdutyConfig",
                    "description": "Pagerduty config for notifier (list maxitems:1)\n"
                },
                "sendResolved": {
                    "type": "boolean",
                    "description": "= (Optional) Enable the notifier to send resolved notifications. Default `false` (bool)\n"
                },
                "slackConfig": {
                    "$ref": "#/types/rancher2:/NotifierSlackConfig:NotifierSlackConfig",
                    "description": "Slack config for notifier (list maxitems:1)\n"
                },
                "smtpConfig": {
                    "$ref": "#/types/rancher2:/NotifierSmtpConfig:NotifierSmtpConfig",
                    "description": "SMTP config for notifier (list maxitems:1)\n"
                },
                "webhookConfig": {
                    "$ref": "#/types/rancher2:/NotifierWebhookConfig:NotifierWebhookConfig",
                    "description": "Webhook config for notifier (list maxitems:1)\n"
                },
                "wechatConfig": {
                    "$ref": "#/types/rancher2:/NotifierWechatConfig:NotifierWechatConfig",
                    "description": "Wechat config for notifier (list maxitems:1)\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notifier resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for notifier object (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create notifier (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The notifier description (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for notifier object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notifier (string)\n"
                    },
                    "pagerdutyConfig": {
                        "$ref": "#/types/rancher2:/NotifierPagerdutyConfig:NotifierPagerdutyConfig",
                        "description": "Pagerduty config for notifier (list maxitems:1)\n"
                    },
                    "sendResolved": {
                        "type": "boolean",
                        "description": "= (Optional) Enable the notifier to send resolved notifications. Default `false` (bool)\n"
                    },
                    "slackConfig": {
                        "$ref": "#/types/rancher2:/NotifierSlackConfig:NotifierSlackConfig",
                        "description": "Slack config for notifier (list maxitems:1)\n"
                    },
                    "smtpConfig": {
                        "$ref": "#/types/rancher2:/NotifierSmtpConfig:NotifierSmtpConfig",
                        "description": "SMTP config for notifier (list maxitems:1)\n"
                    },
                    "webhookConfig": {
                        "$ref": "#/types/rancher2:/NotifierWebhookConfig:NotifierWebhookConfig",
                        "description": "Webhook config for notifier (list maxitems:1)\n"
                    },
                    "wechatConfig": {
                        "$ref": "#/types/rancher2:/NotifierWechatConfig:NotifierWechatConfig",
                        "description": "Wechat config for notifier (list maxitems:1)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/podSecurityPolicyTemplate:PodSecurityPolicyTemplate": {
            "description": "Provides a Rancher v2 PodSecurityPolicyTemplate resource. This can be used to create PodSecurityPolicyTemplates for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 PodSecurityPolicyTemplate\nconst foo = new rancher2.PodSecurityPolicyTemplate(\"foo\", {\n    allowPrivilegeEscalation: false,\n    allowedCsiDrivers: [\n        {\n            name: \"something\",\n        },\n        {\n            name: \"something-else\",\n        },\n    ],\n    allowedFlexVolumes: [\n        {\n            driver: \"something\",\n        },\n        {\n            driver: \"something-else\",\n        },\n    ],\n    allowedHostPaths: [\n        {\n            pathPrefix: \"/\",\n            readOnly: true,\n        },\n        {\n            pathPrefix: \"//\",\n            readOnly: false,\n        },\n    ],\n    allowedProcMountTypes: [\"Default\"],\n    defaultAllowPrivilegeEscalation: false,\n    description: \"Terraform PodSecurityPolicyTemplate acceptance test - update\",\n    fsGroup: {\n        ranges: [\n            {\n                max: 100,\n                min: 0,\n            },\n            {\n                max: 100,\n                min: 0,\n            },\n        ],\n        rule: \"MustRunAs\",\n    },\n    hostIpc: false,\n    hostNetwork: false,\n    hostPid: false,\n    hostPorts: [\n        {\n            max: 65535,\n            min: 0,\n        },\n        {\n            max: 8080,\n            min: 1024,\n        },\n    ],\n    privileged: false,\n    readOnlyRootFilesystem: false,\n    requiredDropCapabilities: [\"something\"],\n    runAsGroup: {\n        ranges: [\n            {\n                max: 100,\n                min: 1,\n            },\n            {\n                max: 1024,\n                min: 2,\n            },\n        ],\n        rule: \"MustRunAs\",\n    },\n    runAsUser: {\n        ranges: [\n            {\n                max: 100,\n                min: 1,\n            },\n            {\n                max: 1024,\n                min: 2,\n            },\n        ],\n        rule: \"MustRunAs\",\n    },\n    runtimeClass: {\n        allowedRuntimeClassNames: [\"something\"],\n        defaultRuntimeClassName: \"something\",\n    },\n    seLinux: {\n        rule: \"RunAsAny\",\n    },\n    supplementalGroup: {\n        rule: \"RunAsAny\",\n    },\n    volumes: [\"azureFile\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 PodSecurityPolicyTemplate\nfoo = rancher2.PodSecurityPolicyTemplate(\"foo\",\n    allow_privilege_escalation=False,\n    allowed_csi_drivers=[\n        {\n            \"name\": \"something\",\n        },\n        {\n            \"name\": \"something-else\",\n        },\n    ],\n    allowed_flex_volumes=[\n        {\n            \"driver\": \"something\",\n        },\n        {\n            \"driver\": \"something-else\",\n        },\n    ],\n    allowed_host_paths=[\n        {\n            \"pathPrefix\": \"/\",\n            \"readOnly\": True,\n        },\n        {\n            \"pathPrefix\": \"//\",\n            \"readOnly\": False,\n        },\n    ],\n    allowed_proc_mount_types=[\"Default\"],\n    default_allow_privilege_escalation=False,\n    description=\"Terraform PodSecurityPolicyTemplate acceptance test - update\",\n    fs_group={\n        \"ranges\": [\n            {\n                \"max\": 100,\n                \"min\": 0,\n            },\n            {\n                \"max\": 100,\n                \"min\": 0,\n            },\n        ],\n        \"rule\": \"MustRunAs\",\n    },\n    host_ipc=False,\n    host_network=False,\n    host_pid=False,\n    host_ports=[\n        {\n            \"max\": 65535,\n            \"min\": 0,\n        },\n        {\n            \"max\": 8080,\n            \"min\": 1024,\n        },\n    ],\n    privileged=False,\n    read_only_root_filesystem=False,\n    required_drop_capabilities=[\"something\"],\n    run_as_group={\n        \"ranges\": [\n            {\n                \"max\": 100,\n                \"min\": 1,\n            },\n            {\n                \"max\": 1024,\n                \"min\": 2,\n            },\n        ],\n        \"rule\": \"MustRunAs\",\n    },\n    run_as_user={\n        \"ranges\": [\n            {\n                \"max\": 100,\n                \"min\": 1,\n            },\n            {\n                \"max\": 1024,\n                \"min\": 2,\n            },\n        ],\n        \"rule\": \"MustRunAs\",\n    },\n    runtime_class={\n        \"allowedRuntimeClassNames\": [\"something\"],\n        \"defaultRuntimeClassName\": \"something\",\n    },\n    se_linux={\n        \"rule\": \"RunAsAny\",\n    },\n    supplemental_group={\n        \"rule\": \"RunAsAny\",\n    },\n    volumes=[\"azureFile\"])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 PodSecurityPolicyTemplate\n        var foo = new Rancher2.PodSecurityPolicyTemplate(\"foo\", new Rancher2.PodSecurityPolicyTemplateArgs\n        {\n            AllowPrivilegeEscalation = false,\n            AllowedCsiDrivers = \n            {\n                new Rancher2.Inputs.PodSecurityPolicyTemplateAllowedCsiDriverArgs\n                {\n                    Name = \"something\",\n                },\n                new Rancher2.Inputs.PodSecurityPolicyTemplateAllowedCsiDriverArgs\n                {\n                    Name = \"something-else\",\n                },\n            },\n            AllowedFlexVolumes = \n            {\n                new Rancher2.Inputs.PodSecurityPolicyTemplateAllowedFlexVolumeArgs\n                {\n                    Driver = \"something\",\n                },\n                new Rancher2.Inputs.PodSecurityPolicyTemplateAllowedFlexVolumeArgs\n                {\n                    Driver = \"something-else\",\n                },\n            },\n            AllowedHostPaths = \n            {\n                new Rancher2.Inputs.PodSecurityPolicyTemplateAllowedHostPathArgs\n                {\n                    PathPrefix = \"/\",\n                    ReadOnly = true,\n                },\n                new Rancher2.Inputs.PodSecurityPolicyTemplateAllowedHostPathArgs\n                {\n                    PathPrefix = \"//\",\n                    ReadOnly = false,\n                },\n            },\n            AllowedProcMountTypes = \n            {\n                \"Default\",\n            },\n            DefaultAllowPrivilegeEscalation = false,\n            Description = \"Terraform PodSecurityPolicyTemplate acceptance test - update\",\n            FsGroup = new Rancher2.Inputs.PodSecurityPolicyTemplateFsGroupArgs\n            {\n                Ranges = \n                {\n                    new Rancher2.Inputs.PodSecurityPolicyTemplateFsGroupRangeArgs\n                    {\n                        Max = 100,\n                        Min = 0,\n                    },\n                    new Rancher2.Inputs.PodSecurityPolicyTemplateFsGroupRangeArgs\n                    {\n                        Max = 100,\n                        Min = 0,\n                    },\n                },\n                Rule = \"MustRunAs\",\n            },\n            HostIpc = false,\n            HostNetwork = false,\n            HostPid = false,\n            HostPorts = \n            {\n                new Rancher2.Inputs.PodSecurityPolicyTemplateHostPortArgs\n                {\n                    Max = 65535,\n                    Min = 0,\n                },\n                new Rancher2.Inputs.PodSecurityPolicyTemplateHostPortArgs\n                {\n                    Max = 8080,\n                    Min = 1024,\n                },\n            },\n            Privileged = false,\n            ReadOnlyRootFilesystem = false,\n            RequiredDropCapabilities = \n            {\n                \"something\",\n            },\n            RunAsGroup = new Rancher2.Inputs.PodSecurityPolicyTemplateRunAsGroupArgs\n            {\n                Ranges = \n                {\n                    new Rancher2.Inputs.PodSecurityPolicyTemplateRunAsGroupRangeArgs\n                    {\n                        Max = 100,\n                        Min = 1,\n                    },\n                    new Rancher2.Inputs.PodSecurityPolicyTemplateRunAsGroupRangeArgs\n                    {\n                        Max = 1024,\n                        Min = 2,\n                    },\n                },\n                Rule = \"MustRunAs\",\n            },\n            RunAsUser = new Rancher2.Inputs.PodSecurityPolicyTemplateRunAsUserArgs\n            {\n                Ranges = \n                {\n                    new Rancher2.Inputs.PodSecurityPolicyTemplateRunAsUserRangeArgs\n                    {\n                        Max = 100,\n                        Min = 1,\n                    },\n                    new Rancher2.Inputs.PodSecurityPolicyTemplateRunAsUserRangeArgs\n                    {\n                        Max = 1024,\n                        Min = 2,\n                    },\n                },\n                Rule = \"MustRunAs\",\n            },\n            RuntimeClass = new Rancher2.Inputs.PodSecurityPolicyTemplateRuntimeClassArgs\n            {\n                AllowedRuntimeClassNames = \n                {\n                    \"something\",\n                },\n                DefaultRuntimeClassName = \"something\",\n            },\n            SeLinux = new Rancher2.Inputs.PodSecurityPolicyTemplateSeLinuxArgs\n            {\n                Rule = \"RunAsAny\",\n            },\n            SupplementalGroup = new Rancher2.Inputs.PodSecurityPolicyTemplateSupplementalGroupArgs\n            {\n                Rule = \"RunAsAny\",\n            },\n            Volumes = \n            {\n                \"azureFile\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewPodSecurityPolicyTemplate(ctx, \"foo\", \u0026rancher2.PodSecurityPolicyTemplateArgs{\n\t\t\tAllowPrivilegeEscalation: pulumi.Bool(false),\n\t\t\tAllowedCsiDrivers: rancher2.PodSecurityPolicyTemplateAllowedCsiDriverArray{\n\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateAllowedCsiDriverArgs{\n\t\t\t\t\tName: pulumi.String(\"something\"),\n\t\t\t\t},\n\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateAllowedCsiDriverArgs{\n\t\t\t\t\tName: pulumi.String(\"something-else\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAllowedFlexVolumes: rancher2.PodSecurityPolicyTemplateAllowedFlexVolumeArray{\n\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateAllowedFlexVolumeArgs{\n\t\t\t\t\tDriver: pulumi.String(\"something\"),\n\t\t\t\t},\n\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateAllowedFlexVolumeArgs{\n\t\t\t\t\tDriver: pulumi.String(\"something-else\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAllowedHostPaths: rancher2.PodSecurityPolicyTemplateAllowedHostPathArray{\n\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateAllowedHostPathArgs{\n\t\t\t\t\tPathPrefix: pulumi.String(\"/\"),\n\t\t\t\t\tReadOnly:   pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateAllowedHostPathArgs{\n\t\t\t\t\tPathPrefix: pulumi.String(\"//\"),\n\t\t\t\t\tReadOnly:   pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAllowedProcMountTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Default\"),\n\t\t\t},\n\t\t\tDefaultAllowPrivilegeEscalation: pulumi.Bool(false),\n\t\t\tDescription:                     pulumi.String(\"Terraform PodSecurityPolicyTemplate acceptance test - update\"),\n\t\t\tFsGroup: \u0026rancher2.PodSecurityPolicyTemplateFsGroupArgs{\n\t\t\t\tRanges: rancher2.PodSecurityPolicyTemplateFsGroupRangeArray{\n\t\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateFsGroupRangeArgs{\n\t\t\t\t\t\tMax: pulumi.Int(100),\n\t\t\t\t\t\tMin: pulumi.Int(0),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateFsGroupRangeArgs{\n\t\t\t\t\t\tMax: pulumi.Int(100),\n\t\t\t\t\t\tMin: pulumi.Int(0),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tRule: pulumi.String(\"MustRunAs\"),\n\t\t\t},\n\t\t\tHostIpc:     pulumi.Bool(false),\n\t\t\tHostNetwork: pulumi.Bool(false),\n\t\t\tHostPid:     pulumi.Bool(false),\n\t\t\tHostPorts: rancher2.PodSecurityPolicyTemplateHostPortArray{\n\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateHostPortArgs{\n\t\t\t\t\tMax: pulumi.Int(65535),\n\t\t\t\t\tMin: pulumi.Int(0),\n\t\t\t\t},\n\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateHostPortArgs{\n\t\t\t\t\tMax: pulumi.Int(8080),\n\t\t\t\t\tMin: pulumi.Int(1024),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPrivileged:             pulumi.Bool(false),\n\t\t\tReadOnlyRootFilesystem: pulumi.Bool(false),\n\t\t\tRequiredDropCapabilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"something\"),\n\t\t\t},\n\t\t\tRunAsGroup: \u0026rancher2.PodSecurityPolicyTemplateRunAsGroupArgs{\n\t\t\t\tRanges: rancher2.PodSecurityPolicyTemplateRunAsGroupRangeArray{\n\t\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateRunAsGroupRangeArgs{\n\t\t\t\t\t\tMax: pulumi.Int(100),\n\t\t\t\t\t\tMin: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateRunAsGroupRangeArgs{\n\t\t\t\t\t\tMax: pulumi.Int(1024),\n\t\t\t\t\t\tMin: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tRule: pulumi.String(\"MustRunAs\"),\n\t\t\t},\n\t\t\tRunAsUser: \u0026rancher2.PodSecurityPolicyTemplateRunAsUserArgs{\n\t\t\t\tRanges: rancher2.PodSecurityPolicyTemplateRunAsUserRangeArray{\n\t\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateRunAsUserRangeArgs{\n\t\t\t\t\t\tMax: pulumi.Int(100),\n\t\t\t\t\t\tMin: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026rancher2.PodSecurityPolicyTemplateRunAsUserRangeArgs{\n\t\t\t\t\t\tMax: pulumi.Int(1024),\n\t\t\t\t\t\tMin: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tRule: pulumi.String(\"MustRunAs\"),\n\t\t\t},\n\t\t\tRuntimeClass: \u0026rancher2.PodSecurityPolicyTemplateRuntimeClassArgs{\n\t\t\t\tAllowedRuntimeClassNames: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"something\"),\n\t\t\t\t},\n\t\t\t\tDefaultRuntimeClassName: pulumi.String(\"something\"),\n\t\t\t},\n\t\t\tSeLinux: \u0026rancher2.PodSecurityPolicyTemplateSeLinuxArgs{\n\t\t\t\tRule: pulumi.String(\"RunAsAny\"),\n\t\t\t},\n\t\t\tSupplementalGroup: \u0026rancher2.PodSecurityPolicyTemplateSupplementalGroupArgs{\n\t\t\t\tRule: pulumi.String(\"RunAsAny\"),\n\t\t\t},\n\t\t\tVolumes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"azureFile\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "= (Optional)\n"
                },
                "allowedCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "allowedCsiDrivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateAllowedCsiDriver:PodSecurityPolicyTemplateAllowedCsiDriver"
                    },
                    "description": "(list)\n"
                },
                "allowedFlexVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateAllowedFlexVolume:PodSecurityPolicyTemplateAllowedFlexVolume"
                    },
                    "description": "(list)\n"
                },
                "allowedHostPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateAllowedHostPath:PodSecurityPolicyTemplateAllowedHostPath"
                    },
                    "description": "(list)\n"
                },
                "allowedProcMountTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "allowedUnsafeSysctls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for PodSecurityPolicyTemplate object (map)\n"
                },
                "defaultAddCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "defaultAllowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "(list)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The PodSecurityPolicyTemplate description (string)\n"
                },
                "forbiddenSysctls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "fsGroup": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateFsGroup:PodSecurityPolicyTemplateFsGroup",
                    "description": "(list maxitems:1)\n"
                },
                "hostIpc": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.\n"
                },
                "hostPid": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "hostPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateHostPort:PodSecurityPolicyTemplateHostPort"
                    },
                    "description": "(list)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for PodSecurityPolicyTemplate object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PodSecurityPolicyTemplate (string)\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "requiredDropCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "runAsGroup": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRunAsGroup:PodSecurityPolicyTemplateRunAsGroup",
                    "description": "(list maxitems:1)\n"
                },
                "runAsUser": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRunAsUser:PodSecurityPolicyTemplateRunAsUser",
                    "description": "(list maxitems:1)\n"
                },
                "runtimeClass": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRuntimeClass:PodSecurityPolicyTemplateRuntimeClass",
                    "description": "(list maxitems:1)\n"
                },
                "seLinux": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateSeLinux:PodSecurityPolicyTemplateSeLinux",
                    "description": "(list maxitems:1)\n"
                },
                "supplementalGroup": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateSupplementalGroup:PodSecurityPolicyTemplateSupplementalGroup",
                    "description": "(list maxitems:1)\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                }
            },
            "required": [
                "allowPrivilegeEscalation",
                "annotations",
                "description",
                "fsGroup",
                "hostIpc",
                "hostNetwork",
                "hostPid",
                "hostPorts",
                "labels",
                "name",
                "privileged",
                "readOnlyRootFilesystem",
                "runAsUser",
                "seLinux",
                "supplementalGroup",
                "volumes"
            ],
            "inputProperties": {
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "= (Optional)\n"
                },
                "allowedCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "allowedCsiDrivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateAllowedCsiDriver:PodSecurityPolicyTemplateAllowedCsiDriver"
                    },
                    "description": "(list)\n"
                },
                "allowedFlexVolumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateAllowedFlexVolume:PodSecurityPolicyTemplateAllowedFlexVolume"
                    },
                    "description": "(list)\n"
                },
                "allowedHostPaths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateAllowedHostPath:PodSecurityPolicyTemplateAllowedHostPath"
                    },
                    "description": "(list)\n"
                },
                "allowedProcMountTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "allowedUnsafeSysctls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for PodSecurityPolicyTemplate object (map)\n"
                },
                "defaultAddCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "defaultAllowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "(list)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The PodSecurityPolicyTemplate description (string)\n"
                },
                "forbiddenSysctls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "fsGroup": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateFsGroup:PodSecurityPolicyTemplateFsGroup",
                    "description": "(list maxitems:1)\n"
                },
                "hostIpc": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.\n"
                },
                "hostPid": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "hostPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateHostPort:PodSecurityPolicyTemplateHostPort"
                    },
                    "description": "(list)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for PodSecurityPolicyTemplate object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the PodSecurityPolicyTemplate (string)\n"
                },
                "privileged": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "requiredDropCapabilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                },
                "runAsGroup": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRunAsGroup:PodSecurityPolicyTemplateRunAsGroup",
                    "description": "(list maxitems:1)\n"
                },
                "runAsUser": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRunAsUser:PodSecurityPolicyTemplateRunAsUser",
                    "description": "(list maxitems:1)\n"
                },
                "runtimeClass": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRuntimeClass:PodSecurityPolicyTemplateRuntimeClass",
                    "description": "(list maxitems:1)\n"
                },
                "seLinux": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateSeLinux:PodSecurityPolicyTemplateSeLinux",
                    "description": "(list maxitems:1)\n"
                },
                "supplementalGroup": {
                    "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateSupplementalGroup:PodSecurityPolicyTemplateSupplementalGroup",
                    "description": "(list maxitems:1)\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PodSecurityPolicyTemplate resources.\n",
                "properties": {
                    "allowPrivilegeEscalation": {
                        "type": "boolean",
                        "description": "= (Optional)\n"
                    },
                    "allowedCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "allowedCsiDrivers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateAllowedCsiDriver:PodSecurityPolicyTemplateAllowedCsiDriver"
                        },
                        "description": "(list)\n"
                    },
                    "allowedFlexVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateAllowedFlexVolume:PodSecurityPolicyTemplateAllowedFlexVolume"
                        },
                        "description": "(list)\n"
                    },
                    "allowedHostPaths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateAllowedHostPath:PodSecurityPolicyTemplateAllowedHostPath"
                        },
                        "description": "(list)\n"
                    },
                    "allowedProcMountTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "allowedUnsafeSysctls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for PodSecurityPolicyTemplate object (map)\n"
                    },
                    "defaultAddCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "defaultAllowPrivilegeEscalation": {
                        "type": "boolean",
                        "description": "(list)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The PodSecurityPolicyTemplate description (string)\n"
                    },
                    "forbiddenSysctls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "fsGroup": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateFsGroup:PodSecurityPolicyTemplateFsGroup",
                        "description": "(list maxitems:1)\n"
                    },
                    "hostIpc": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "hostNetwork": {
                        "type": "boolean",
                        "description": "hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.\n"
                    },
                    "hostPid": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "hostPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateHostPort:PodSecurityPolicyTemplateHostPort"
                        },
                        "description": "(list)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for PodSecurityPolicyTemplate object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PodSecurityPolicyTemplate (string)\n"
                    },
                    "privileged": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "readOnlyRootFilesystem": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "requiredDropCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "runAsGroup": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRunAsGroup:PodSecurityPolicyTemplateRunAsGroup",
                        "description": "(list maxitems:1)\n"
                    },
                    "runAsUser": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRunAsUser:PodSecurityPolicyTemplateRunAsUser",
                        "description": "(list maxitems:1)\n"
                    },
                    "runtimeClass": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateRuntimeClass:PodSecurityPolicyTemplateRuntimeClass",
                        "description": "(list maxitems:1)\n"
                    },
                    "seLinux": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateSeLinux:PodSecurityPolicyTemplateSeLinux",
                        "description": "(list maxitems:1)\n"
                    },
                    "supplementalGroup": {
                        "$ref": "#/types/rancher2:/PodSecurityPolicyTemplateSupplementalGroup:PodSecurityPolicyTemplateSupplementalGroup",
                        "description": "(list maxitems:1)\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/project:Project": {
            "description": "Provides a Rancher v2 Project resource. This can be used to create projects for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Project\nconst foo = new rancher2.Project(\"foo\", {\n    clusterId: \"\u003cCLUSTER_ID\u003e\",\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n    resourceQuota: {\n        namespaceDefaultLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"500Mi\",\n            requestsStorage: \"1Gi\",\n        },\n        projectLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"2000Mi\",\n            requestsStorage: \"2Gi\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Project\nfoo = rancher2.Project(\"foo\",\n    cluster_id=\"\u003cCLUSTER_ID\u003e\",\n    container_resource_limit={\n        \"limitsCpu\": \"20m\",\n        \"limitsMemory\": \"20Mi\",\n        \"requestsCpu\": \"1m\",\n        \"requestsMemory\": \"1Mi\",\n    },\n    resource_quota={\n        \"namespaceDefaultLimit\": {\n            \"limitsCpu\": \"2000m\",\n            \"limitsMemory\": \"500Mi\",\n            \"requestsStorage\": \"1Gi\",\n        },\n        \"projectLimit\": {\n            \"limitsCpu\": \"2000m\",\n            \"limitsMemory\": \"2000Mi\",\n            \"requestsStorage\": \"2Gi\",\n        },\n    })\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Project\n        var foo = new Rancher2.Project(\"foo\", new Rancher2.ProjectArgs\n        {\n            ClusterId = \"\u003cCLUSTER_ID\u003e\",\n            ContainerResourceLimit = new Rancher2.Inputs.ProjectContainerResourceLimitArgs\n            {\n                LimitsCpu = \"20m\",\n                LimitsMemory = \"20Mi\",\n                RequestsCpu = \"1m\",\n                RequestsMemory = \"1Mi\",\n            },\n            ResourceQuota = new Rancher2.Inputs.ProjectResourceQuotaArgs\n            {\n                NamespaceDefaultLimit = new Rancher2.Inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs\n                {\n                    LimitsCpu = \"2000m\",\n                    LimitsMemory = \"500Mi\",\n                    RequestsStorage = \"1Gi\",\n                },\n                ProjectLimit = new Rancher2.Inputs.ProjectResourceQuotaProjectLimitArgs\n                {\n                    LimitsCpu = \"2000m\",\n                    LimitsMemory = \"2000Mi\",\n                    RequestsStorage = \"2Gi\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewProject(ctx, \"foo\", \u0026rancher2.ProjectArgs{\n\t\t\tClusterId: pulumi.String(\"\u003cCLUSTER_ID\u003e\"),\n\t\t\tContainerResourceLimit: \u0026rancher2.ProjectContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t\tResourceQuota: \u0026rancher2.ProjectResourceQuotaArgs{\n\t\t\t\tNamespaceDefaultLimit: \u0026rancher2.ProjectResourceQuotaNamespaceDefaultLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"500Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t\tProjectLimit: \u0026rancher2.ProjectResourceQuotaProjectLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"2000Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"2Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Project enabling and customizing monitoring\nconst foo = new rancher2.Project(\"foo\", {\n    clusterId: \"\u003cCLUSTER_ID\u003e\",\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n    enableProjectMonitoring: true,\n    projectMonitoringInput: {\n        answers: {\n            \"exporter-kubelets.https\": true,\n            \"exporter-node.enabled\": true,\n            \"exporter-node.ports.metrics.port\": 9796,\n            \"exporter-node.resources.limits.cpu\": \"200m\",\n            \"exporter-node.resources.limits.memory\": \"200Mi\",\n            \"grafana.persistence.enabled\": false,\n            \"grafana.persistence.size\": \"10Gi\",\n            \"grafana.persistence.storageClass\": \"default\",\n            \"operator.resources.limits.memory\": \"500Mi\",\n            \"prometheus.persistence.enabled\": \"false\",\n            \"prometheus.persistence.size\": \"50Gi\",\n            \"prometheus.persistence.storageClass\": \"default\",\n            \"prometheus.persistent.useReleaseName\": \"true\",\n            \"prometheus.resources.core.limits.cpu\": \"1000m\",\n            \"prometheus.resources.core.limits.memory\": \"1500Mi\",\n            \"prometheus.resources.core.requests.cpu\": \"750m\",\n            \"prometheus.resources.core.requests.memory\": \"750Mi\",\n            \"prometheus.retention\": \"12h\",\n        },\n    },\n    resourceQuota: {\n        namespaceDefaultLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"500Mi\",\n            requestsStorage: \"1Gi\",\n        },\n        projectLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"2000Mi\",\n            requestsStorage: \"2Gi\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Project enabling and customizing monitoring\nfoo = rancher2.Project(\"foo\",\n    cluster_id=\"\u003cCLUSTER_ID\u003e\",\n    container_resource_limit={\n        \"limitsCpu\": \"20m\",\n        \"limitsMemory\": \"20Mi\",\n        \"requestsCpu\": \"1m\",\n        \"requestsMemory\": \"1Mi\",\n    },\n    enable_project_monitoring=True,\n    project_monitoring_input={\n        \"answers\": {\n            \"exporter-kubelets.https\": True,\n            \"exporter-node.enabled\": True,\n            \"exporter-node.ports.metrics.port\": 9796,\n            \"exporter-node.resources.limits.cpu\": \"200m\",\n            \"exporter-node.resources.limits.memory\": \"200Mi\",\n            \"grafana.persistence.enabled\": False,\n            \"grafana.persistence.size\": \"10Gi\",\n            \"grafana.persistence.storageClass\": \"default\",\n            \"operator.resources.limits.memory\": \"500Mi\",\n            \"prometheus.persistence.enabled\": \"false\",\n            \"prometheus.persistence.size\": \"50Gi\",\n            \"prometheus.persistence.storageClass\": \"default\",\n            \"prometheus.persistent.useReleaseName\": \"true\",\n            \"prometheus.resources.core.limits.cpu\": \"1000m\",\n            \"prometheus.resources.core.limits.memory\": \"1500Mi\",\n            \"prometheus.resources.core.requests.cpu\": \"750m\",\n            \"prometheus.resources.core.requests.memory\": \"750Mi\",\n            \"prometheus.retention\": \"12h\",\n        },\n    },\n    resource_quota={\n        \"namespaceDefaultLimit\": {\n            \"limitsCpu\": \"2000m\",\n            \"limitsMemory\": \"500Mi\",\n            \"requestsStorage\": \"1Gi\",\n        },\n        \"projectLimit\": {\n            \"limitsCpu\": \"2000m\",\n            \"limitsMemory\": \"2000Mi\",\n            \"requestsStorage\": \"2Gi\",\n        },\n    })\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Project enabling and customizing monitoring\n        var foo = new Rancher2.Project(\"foo\", new Rancher2.ProjectArgs\n        {\n            ClusterId = \"\u003cCLUSTER_ID\u003e\",\n            ContainerResourceLimit = new Rancher2.Inputs.ProjectContainerResourceLimitArgs\n            {\n                LimitsCpu = \"20m\",\n                LimitsMemory = \"20Mi\",\n                RequestsCpu = \"1m\",\n                RequestsMemory = \"1Mi\",\n            },\n            EnableProjectMonitoring = true,\n            ProjectMonitoringInput = new Rancher2.Inputs.ProjectProjectMonitoringInputArgs\n            {\n                Answers = \n                {\n                    { \"exporter-kubelets.https\", true },\n                    { \"exporter-node.enabled\", true },\n                    { \"exporter-node.ports.metrics.port\", 9796 },\n                    { \"exporter-node.resources.limits.cpu\", \"200m\" },\n                    { \"exporter-node.resources.limits.memory\", \"200Mi\" },\n                    { \"grafana.persistence.enabled\", false },\n                    { \"grafana.persistence.size\", \"10Gi\" },\n                    { \"grafana.persistence.storageClass\", \"default\" },\n                    { \"operator.resources.limits.memory\", \"500Mi\" },\n                    { \"prometheus.persistence.enabled\", \"false\" },\n                    { \"prometheus.persistence.size\", \"50Gi\" },\n                    { \"prometheus.persistence.storageClass\", \"default\" },\n                    { \"prometheus.persistent.useReleaseName\", \"true\" },\n                    { \"prometheus.resources.core.limits.cpu\", \"1000m\" },\n                    { \"prometheus.resources.core.limits.memory\", \"1500Mi\" },\n                    { \"prometheus.resources.core.requests.cpu\", \"750m\" },\n                    { \"prometheus.resources.core.requests.memory\", \"750Mi\" },\n                    { \"prometheus.retention\", \"12h\" },\n                },\n            },\n            ResourceQuota = new Rancher2.Inputs.ProjectResourceQuotaArgs\n            {\n                NamespaceDefaultLimit = new Rancher2.Inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs\n                {\n                    LimitsCpu = \"2000m\",\n                    LimitsMemory = \"500Mi\",\n                    RequestsStorage = \"1Gi\",\n                },\n                ProjectLimit = new Rancher2.Inputs.ProjectResourceQuotaProjectLimitArgs\n                {\n                    LimitsCpu = \"2000m\",\n                    LimitsMemory = \"2000Mi\",\n                    RequestsStorage = \"2Gi\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewProject(ctx, \"foo\", \u0026rancher2.ProjectArgs{\n\t\t\tClusterId: pulumi.String(\"\u003cCLUSTER_ID\u003e\"),\n\t\t\tContainerResourceLimit: \u0026rancher2.ProjectContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t\tEnableProjectMonitoring: pulumi.Bool(true),\n\t\t\tProjectMonitoringInput: \u0026rancher2.ProjectProjectMonitoringInputArgs{\n\t\t\t\tAnswers: pulumi.Map{\n\t\t\t\t\t\"exporter-kubelets.https\":                   pulumi.Bool(true),\n\t\t\t\t\t\"exporter-node.enabled\":                     pulumi.Bool(true),\n\t\t\t\t\t\"exporter-node.ports.metrics.port\":          pulumi.Float64(9796),\n\t\t\t\t\t\"exporter-node.resources.limits.cpu\":        pulumi.String(\"200m\"),\n\t\t\t\t\t\"exporter-node.resources.limits.memory\":     pulumi.String(\"200Mi\"),\n\t\t\t\t\t\"grafana.persistence.enabled\":               pulumi.Bool(false),\n\t\t\t\t\t\"grafana.persistence.size\":                  pulumi.String(\"10Gi\"),\n\t\t\t\t\t\"grafana.persistence.storageClass\":          pulumi.String(\"default\"),\n\t\t\t\t\t\"operator.resources.limits.memory\":          pulumi.String(\"500Mi\"),\n\t\t\t\t\t\"prometheus.persistence.enabled\":            pulumi.String(\"false\"),\n\t\t\t\t\t\"prometheus.persistence.size\":               pulumi.String(\"50Gi\"),\n\t\t\t\t\t\"prometheus.persistence.storageClass\":       pulumi.String(\"default\"),\n\t\t\t\t\t\"prometheus.persistent.useReleaseName\":      pulumi.String(\"true\"),\n\t\t\t\t\t\"prometheus.resources.core.limits.cpu\":      pulumi.String(\"1000m\"),\n\t\t\t\t\t\"prometheus.resources.core.limits.memory\":   pulumi.String(\"1500Mi\"),\n\t\t\t\t\t\"prometheus.resources.core.requests.cpu\":    pulumi.String(\"750m\"),\n\t\t\t\t\t\"prometheus.resources.core.requests.memory\": pulumi.String(\"750Mi\"),\n\t\t\t\t\t\"prometheus.retention\":                      pulumi.String(\"12h\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResourceQuota: \u0026rancher2.ProjectResourceQuotaArgs{\n\t\t\t\tNamespaceDefaultLimit: \u0026rancher2.ProjectResourceQuotaNamespaceDefaultLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"500Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t\tProjectLimit: \u0026rancher2.ProjectResourceQuotaProjectLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"2000Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"2Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create project (string)\n"
                },
                "containerResourceLimit": {
                    "$ref": "#/types/rancher2:/ProjectContainerResourceLimit:ProjectContainerResourceLimit",
                    "description": "Default containers resource limits on project (List maxitem:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A project description (string)\n"
                },
                "enableProjectMonitoring": {
                    "type": "boolean",
                    "description": "Enable built-in project monitoring. Default `false` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project (string)\n"
                },
                "podSecurityPolicyTemplateId": {
                    "type": "string",
                    "description": "Default Pod Security Policy ID for the project (string)\n"
                },
                "projectMonitoringInput": {
                    "$ref": "#/types/rancher2:/ProjectProjectMonitoringInput:ProjectProjectMonitoringInput",
                    "description": "Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)\n"
                },
                "resourceQuota": {
                    "$ref": "#/types/rancher2:/ProjectResourceQuota:ProjectResourceQuota",
                    "description": "Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)\n"
                },
                "waitForCluster": {
                    "type": "boolean",
                    "description": "Wait for cluster becomes active. Default `false` (bool)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "labels",
                "name",
                "projectMonitoringInput"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create project (string)\n"
                },
                "containerResourceLimit": {
                    "$ref": "#/types/rancher2:/ProjectContainerResourceLimit:ProjectContainerResourceLimit",
                    "description": "Default containers resource limits on project (List maxitem:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A project description (string)\n"
                },
                "enableProjectMonitoring": {
                    "type": "boolean",
                    "description": "Enable built-in project monitoring. Default `false` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project (string)\n"
                },
                "podSecurityPolicyTemplateId": {
                    "type": "string",
                    "description": "Default Pod Security Policy ID for the project (string)\n"
                },
                "projectMonitoringInput": {
                    "$ref": "#/types/rancher2:/ProjectProjectMonitoringInput:ProjectProjectMonitoringInput",
                    "description": "Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)\n"
                },
                "resourceQuota": {
                    "$ref": "#/types/rancher2:/ProjectResourceQuota:ProjectResourceQuota",
                    "description": "Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)\n"
                },
                "waitForCluster": {
                    "type": "boolean",
                    "description": "Wait for cluster becomes active. Default `false` (bool)\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for Node Pool object (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create project (string)\n"
                    },
                    "containerResourceLimit": {
                        "$ref": "#/types/rancher2:/ProjectContainerResourceLimit:ProjectContainerResourceLimit",
                        "description": "Default containers resource limits on project (List maxitem:1)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A project description (string)\n"
                    },
                    "enableProjectMonitoring": {
                        "type": "boolean",
                        "description": "Enable built-in project monitoring. Default `false` (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for Node Pool object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project (string)\n"
                    },
                    "podSecurityPolicyTemplateId": {
                        "type": "string",
                        "description": "Default Pod Security Policy ID for the project (string)\n"
                    },
                    "projectMonitoringInput": {
                        "$ref": "#/types/rancher2:/ProjectProjectMonitoringInput:ProjectProjectMonitoringInput",
                        "description": "Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)\n"
                    },
                    "resourceQuota": {
                        "$ref": "#/types/rancher2:/ProjectResourceQuota:ProjectResourceQuota",
                        "description": "Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)\n"
                    },
                    "waitForCluster": {
                        "type": "boolean",
                        "description": "Wait for cluster becomes active. Default `false` (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/projectAlertGroup:ProjectAlertGroup": {
            "description": "Provides a Rancher v2 Project Alert Group resource. This can be used to create Project Alert Group for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Project Alert Group\nconst foo = new rancher2.ProjectAlertGroup(\"foo\", {\n    description: \"Terraform project alert group\",\n    groupIntervalSeconds: 300,\n    projectId: \"\u003cproject_id\u003e\",\n    repeatIntervalSeconds: 3600,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Project Alert Group\nfoo = rancher2.ProjectAlertGroup(\"foo\",\n    description=\"Terraform project alert group\",\n    group_interval_seconds=300,\n    project_id=\"\u003cproject_id\u003e\",\n    repeat_interval_seconds=3600)\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Rancher2 Project Alert Group\n        var foo = new Rancher2.ProjectAlertGroup(\"foo\", new Rancher2.ProjectAlertGroupArgs\n        {\n            Description = \"Terraform project alert group\",\n            GroupIntervalSeconds = 300,\n            ProjectId = \"\u003cproject_id\u003e\",\n            RepeatIntervalSeconds = 3600,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewProjectAlertGroup(ctx, \"foo\", \u0026rancher2.ProjectAlertGroupArgs{\n\t\t\tDescription:           pulumi.String(\"Terraform project alert group\"),\n\t\t\tGroupIntervalSeconds:  pulumi.Int(300),\n\t\t\tProjectId:             pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tRepeatIntervalSeconds: pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project alert group annotations (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The project alert group description (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The project alert group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The project alert group wait seconds. Default: `180` (int)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project alert group labels (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The project alert group name (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where create project alert group (string)\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ProjectAlertGroupRecipient:ProjectAlertGroupRecipient"
                    },
                    "description": "The project alert group recipients (list)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The project alert group wait seconds. Default: `3600` (int)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project alert group annotations (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The project alert group description (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The project alert group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The project alert group wait seconds. Default: `180` (int)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project alert group labels (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The project alert group name (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where create project alert group (string)\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/ProjectAlertGroupRecipient:ProjectAlertGroupRecipient"
                    },
                    "description": "The project alert group recipients (list)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The project alert group wait seconds. Default: `3600` (int)\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectAlertGroup resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The project alert group annotations (map)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The project alert group description (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "The project alert group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "The project alert group wait seconds. Default: `180` (int)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The project alert group labels (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The project alert group name (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where create project alert group (string)\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/ProjectAlertGroupRecipient:ProjectAlertGroupRecipient"
                        },
                        "description": "The project alert group recipients (list)\n"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "The project alert group wait seconds. Default: `3600` (int)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/projectAlertRule:ProjectAlertRule": {
            "description": "Provides a Rancher v2 Project Alert Rule resource. This can be used to create Project Alert Rule for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Project\nconst fooProject = new rancher2.Project(\"foo\", {\n    clusterId: \"\u003ccluster_id\u003e\",\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n    description: \"Terraform project \",\n    resourceQuota: {\n        namespaceDefaultLimit: {\n            limitsCpu: \"500m\",\n            limitsMemory: \"500Mi\",\n            requestsStorage: \"1Gi\",\n        },\n        projectLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"2000Mi\",\n            requestsStorage: \"2Gi\",\n        },\n    },\n});\n// Create a new Rancher2 Project Alert Group\nconst fooProjectAlertGroup = new rancher2.ProjectAlertGroup(\"foo\", {\n    description: \"Terraform project alert group\",\n    groupIntervalSeconds: 300,\n    projectId: fooProject.id,\n    repeatIntervalSeconds: 3600,\n});\n// Create a new Rancher2 Project Alert Rule\nconst fooProjectAlertRule = new rancher2.ProjectAlertRule(\"foo\", {\n    groupId: fooProjectAlertGroup.id,\n    groupIntervalSeconds: 600,\n    projectId: fooProjectAlertGroup.projectId,\n    repeatIntervalSeconds: 6000,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Project\nfoo_project = rancher2.Project(\"fooProject\",\n    cluster_id=\"\u003ccluster_id\u003e\",\n    container_resource_limit={\n        \"limitsCpu\": \"20m\",\n        \"limitsMemory\": \"20Mi\",\n        \"requestsCpu\": \"1m\",\n        \"requestsMemory\": \"1Mi\",\n    },\n    description=\"Terraform project \",\n    resource_quota={\n        \"namespaceDefaultLimit\": {\n            \"limitsCpu\": \"500m\",\n            \"limitsMemory\": \"500Mi\",\n            \"requestsStorage\": \"1Gi\",\n        },\n        \"projectLimit\": {\n            \"limitsCpu\": \"2000m\",\n            \"limitsMemory\": \"2000Mi\",\n            \"requestsStorage\": \"2Gi\",\n        },\n    })\n# Create a new Rancher2 Project Alert Group\nfoo_project_alert_group = rancher2.ProjectAlertGroup(\"fooProjectAlertGroup\",\n    description=\"Terraform project alert group\",\n    group_interval_seconds=300,\n    project_id=foo_project.id,\n    repeat_interval_seconds=3600)\n# Create a new Rancher2 Project Alert Rule\nfoo_project_alert_rule = rancher2.ProjectAlertRule(\"fooProjectAlertRule\",\n    group_id=foo_project_alert_group.id,\n    group_interval_seconds=600,\n    project_id=foo_project_alert_group.project_id,\n    repeat_interval_seconds=6000)\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new Rancher2 Project\n        var fooProject = new Rancher2.Project(\"fooProject\", new Rancher2.ProjectArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            ContainerResourceLimit = new Rancher2.Inputs.ProjectContainerResourceLimitArgs\n            {\n                LimitsCpu = \"20m\",\n                LimitsMemory = \"20Mi\",\n                RequestsCpu = \"1m\",\n                RequestsMemory = \"1Mi\",\n            },\n            Description = \"Terraform project \",\n            ResourceQuota = new Rancher2.Inputs.ProjectResourceQuotaArgs\n            {\n                NamespaceDefaultLimit = new Rancher2.Inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs\n                {\n                    LimitsCpu = \"500m\",\n                    LimitsMemory = \"500Mi\",\n                    RequestsStorage = \"1Gi\",\n                },\n                ProjectLimit = new Rancher2.Inputs.ProjectResourceQuotaProjectLimitArgs\n                {\n                    LimitsCpu = \"2000m\",\n                    LimitsMemory = \"2000Mi\",\n                    RequestsStorage = \"2Gi\",\n                },\n            },\n        });\n        // Create a new Rancher2 Project Alert Group\n        var fooProjectAlertGroup = new Rancher2.ProjectAlertGroup(\"fooProjectAlertGroup\", new Rancher2.ProjectAlertGroupArgs\n        {\n            Description = \"Terraform project alert group\",\n            GroupIntervalSeconds = 300,\n            ProjectId = fooProject.Id,\n            RepeatIntervalSeconds = 3600,\n        });\n        // Create a new Rancher2 Project Alert Rule\n        var fooProjectAlertRule = new Rancher2.ProjectAlertRule(\"fooProjectAlertRule\", new Rancher2.ProjectAlertRuleArgs\n        {\n            GroupId = fooProjectAlertGroup.Id,\n            GroupIntervalSeconds = 600,\n            ProjectId = fooProjectAlertGroup.ProjectId,\n            RepeatIntervalSeconds = 6000,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooProject, err := rancher2.NewProject(ctx, \"fooProject\", \u0026rancher2.ProjectArgs{\n\t\t\tClusterId: pulumi.String(\"\u003ccluster_id\u003e\"),\n\t\t\tContainerResourceLimit: \u0026rancher2.ProjectContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Terraform project \"),\n\t\t\tResourceQuota: \u0026rancher2.ProjectResourceQuotaArgs{\n\t\t\t\tNamespaceDefaultLimit: \u0026rancher2.ProjectResourceQuotaNamespaceDefaultLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"500m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"500Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t\tProjectLimit: \u0026rancher2.ProjectResourceQuotaProjectLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"2000Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"2Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooProjectAlertGroup, err := rancher2.NewProjectAlertGroup(ctx, \"fooProjectAlertGroup\", \u0026rancher2.ProjectAlertGroupArgs{\n\t\t\tDescription:           pulumi.String(\"Terraform project alert group\"),\n\t\t\tGroupIntervalSeconds:  pulumi.Int(300),\n\t\t\tProjectId:             fooProject.ID(),\n\t\t\tRepeatIntervalSeconds: pulumi.Int(3600),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewProjectAlertRule(ctx, \"fooProjectAlertRule\", \u0026rancher2.ProjectAlertRuleArgs{\n\t\t\tGroupId:               fooProjectAlertGroup.ID(),\n\t\t\tGroupIntervalSeconds:  pulumi.Int(600),\n\t\t\tProjectId:             fooProjectAlertGroup.ProjectId,\n\t\t\tRepeatIntervalSeconds: pulumi.Int(6000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project alert rule annotations (map)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The project alert rule alert group ID (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The project alert rule group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The project alert rule group wait seconds. Default: `180` (int)\n"
                },
                "inherited": {
                    "type": "boolean",
                    "description": "The project alert rule inherited. Default: `true` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project alert rule labels (map)\n"
                },
                "metricRule": {
                    "$ref": "#/types/rancher2:/ProjectAlertRuleMetricRule:ProjectAlertRuleMetricRule",
                    "description": "The project alert rule metric rule. ConflictsWith: `\"pod_rule\", \"workload_rule\"`` (list Maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The project alert rule name (string)\n"
                },
                "podRule": {
                    "$ref": "#/types/rancher2:/ProjectAlertRulePodRule:ProjectAlertRulePodRule",
                    "description": "The project alert rule pod rule. ConflictsWith: `\"metric_rule\", \"workload_rule\"`` (list Maxitems:1)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where create project alert rule (string)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The project alert rule wait seconds. Default: `3600` (int)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The project alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                },
                "workloadRule": {
                    "$ref": "#/types/rancher2:/ProjectAlertRuleWorkloadRule:ProjectAlertRuleWorkloadRule",
                    "description": "The project alert rule workload rule. ConflictsWith: `\"metric_rule\", \"pod_rule\"`` (list Maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "groupId",
                "labels",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project alert rule annotations (map)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The project alert rule alert group ID (string)\n"
                },
                "groupIntervalSeconds": {
                    "type": "integer",
                    "description": "The project alert rule group interval seconds. Default: `180` (int)\n"
                },
                "groupWaitSeconds": {
                    "type": "integer",
                    "description": "The project alert rule group wait seconds. Default: `180` (int)\n"
                },
                "inherited": {
                    "type": "boolean",
                    "description": "The project alert rule inherited. Default: `true` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The project alert rule labels (map)\n"
                },
                "metricRule": {
                    "$ref": "#/types/rancher2:/ProjectAlertRuleMetricRule:ProjectAlertRuleMetricRule",
                    "description": "The project alert rule metric rule. ConflictsWith: `\"pod_rule\", \"workload_rule\"`` (list Maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The project alert rule name (string)\n"
                },
                "podRule": {
                    "$ref": "#/types/rancher2:/ProjectAlertRulePodRule:ProjectAlertRulePodRule",
                    "description": "The project alert rule pod rule. ConflictsWith: `\"metric_rule\", \"workload_rule\"`` (list Maxitems:1)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where create project alert rule (string)\n"
                },
                "repeatIntervalSeconds": {
                    "type": "integer",
                    "description": "The project alert rule wait seconds. Default: `3600` (int)\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The project alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                },
                "workloadRule": {
                    "$ref": "#/types/rancher2:/ProjectAlertRuleWorkloadRule:ProjectAlertRuleWorkloadRule",
                    "description": "The project alert rule workload rule. ConflictsWith: `\"metric_rule\", \"pod_rule\"`` (list Maxitems:1)\n"
                }
            },
            "requiredInputs": [
                "groupId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectAlertRule resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The project alert rule annotations (map)\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The project alert rule alert group ID (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "The project alert rule group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "The project alert rule group wait seconds. Default: `180` (int)\n"
                    },
                    "inherited": {
                        "type": "boolean",
                        "description": "The project alert rule inherited. Default: `true` (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The project alert rule labels (map)\n"
                    },
                    "metricRule": {
                        "$ref": "#/types/rancher2:/ProjectAlertRuleMetricRule:ProjectAlertRuleMetricRule",
                        "description": "The project alert rule metric rule. ConflictsWith: `\"pod_rule\", \"workload_rule\"`` (list Maxitems:1)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The project alert rule name (string)\n"
                    },
                    "podRule": {
                        "$ref": "#/types/rancher2:/ProjectAlertRulePodRule:ProjectAlertRulePodRule",
                        "description": "The project alert rule pod rule. ConflictsWith: `\"metric_rule\", \"workload_rule\"`` (list Maxitems:1)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where create project alert rule (string)\n"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "The project alert rule wait seconds. Default: `3600` (int)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "The project alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                    },
                    "workloadRule": {
                        "$ref": "#/types/rancher2:/ProjectAlertRuleWorkloadRule:ProjectAlertRuleWorkloadRule",
                        "description": "The project alert rule workload rule. ConflictsWith: `\"metric_rule\", \"pod_rule\"`` (list Maxitems:1)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/projectLogging:ProjectLogging": {
            "description": "Provides a Rancher v2 Project Logging resource. This can be used to create Project Logging for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Project Logging\nconst foo = new rancher2.ProjectLogging(\"foo\", {\n    kind: \"syslog\",\n    projectId: \"\u003cproject_id\u003e\",\n    syslogConfig: {\n        endpoint: \"\u003csyslog_endpoint\u003e\",\n        protocol: \"udp\",\n        severity: \"notice\",\n        sslVerify: false,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Project Logging\nfoo = rancher2.ProjectLogging(\"foo\",\n    kind=\"syslog\",\n    project_id=\"\u003cproject_id\u003e\",\n    syslog_config={\n        \"endpoint\": \"\u003csyslog_endpoint\u003e\",\n        \"protocol\": \"udp\",\n        \"severity\": \"notice\",\n        \"sslVerify\": False,\n    })\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Project Logging\n        var foo = new Rancher2.ProjectLogging(\"foo\", new Rancher2.ProjectLoggingArgs\n        {\n            Kind = \"syslog\",\n            ProjectId = \"\u003cproject_id\u003e\",\n            SyslogConfig = new Rancher2.Inputs.ProjectLoggingSyslogConfigArgs\n            {\n                Endpoint = \"\u003csyslog_endpoint\u003e\",\n                Protocol = \"udp\",\n                Severity = \"notice\",\n                SslVerify = false,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewProjectLogging(ctx, \"foo\", \u0026rancher2.ProjectLoggingArgs{\n\t\t\tKind:      pulumi.String(\"syslog\"),\n\t\t\tProjectId: pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tSyslogConfig: \u0026rancher2.ProjectLoggingSyslogConfigArgs{\n\t\t\t\tEndpoint:  pulumi.String(\"\u003csyslog_endpoint\u003e\"),\n\t\t\t\tProtocol:  pulumi.String(\"udp\"),\n\t\t\t\tSeverity:  pulumi.String(\"notice\"),\n\t\t\t\tSslVerify: pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Project Logging object (map)\n"
                },
                "customTargetConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingCustomTargetConfig:ProjectLoggingCustomTargetConfig",
                    "description": "The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "elasticsearchConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingElasticsearchConfig:ProjectLoggingElasticsearchConfig",
                    "description": "The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "enableJsonParsing": {
                    "type": "boolean",
                    "description": "Enable json log parsing. Default: `false` (bool)\n"
                },
                "fluentdConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingFluentdConfig:ProjectLoggingFluentdConfig",
                    "description": "The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "kafkaConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingKafkaConfig:ProjectLoggingKafkaConfig",
                    "description": "The kafka config for Project Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Project Logging object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Project Logging config (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id from Project logging (string)\n"
                },
                "outputFlushInterval": {
                    "type": "integer",
                    "description": "How often buffered logs would be flushed. Default: `3` seconds (int)\n"
                },
                "outputTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The output tags for Project Logging (map)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id to configure logging (string)\n"
                },
                "splunkConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingSplunkConfig:ProjectLoggingSplunkConfig",
                    "description": "The splunk config for Project Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)\n"
                },
                "syslogConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingSyslogConfig:ProjectLoggingSyslogConfig",
                    "description": "The syslog config for Project Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "kind",
                "labels",
                "name",
                "outputTags",
                "projectId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Project Logging object (map)\n"
                },
                "customTargetConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingCustomTargetConfig:ProjectLoggingCustomTargetConfig",
                    "description": "The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "elasticsearchConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingElasticsearchConfig:ProjectLoggingElasticsearchConfig",
                    "description": "The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "enableJsonParsing": {
                    "type": "boolean",
                    "description": "Enable json log parsing. Default: `false` (bool)\n"
                },
                "fluentdConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingFluentdConfig:ProjectLoggingFluentdConfig",
                    "description": "The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "kafkaConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingKafkaConfig:ProjectLoggingKafkaConfig",
                    "description": "The kafka config for Project Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Project Logging object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Project Logging config (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id from Project logging (string)\n"
                },
                "outputFlushInterval": {
                    "type": "integer",
                    "description": "How often buffered logs would be flushed. Default: `3` seconds (int)\n"
                },
                "outputTags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The output tags for Project Logging (map)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id to configure logging (string)\n"
                },
                "splunkConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingSplunkConfig:ProjectLoggingSplunkConfig",
                    "description": "The splunk config for Project Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)\n"
                },
                "syslogConfig": {
                    "$ref": "#/types/rancher2:/ProjectLoggingSyslogConfig:ProjectLoggingSyslogConfig",
                    "description": "The syslog config for Project Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)\n"
                }
            },
            "requiredInputs": [
                "kind",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectLogging resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for Project Logging object (map)\n"
                    },
                    "customTargetConfig": {
                        "$ref": "#/types/rancher2:/ProjectLoggingCustomTargetConfig:ProjectLoggingCustomTargetConfig",
                        "description": "The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                    },
                    "elasticsearchConfig": {
                        "$ref": "#/types/rancher2:/ProjectLoggingElasticsearchConfig:ProjectLoggingElasticsearchConfig",
                        "description": "The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                    },
                    "enableJsonParsing": {
                        "type": "boolean",
                        "description": "Enable json log parsing. Default: `false` (bool)\n"
                    },
                    "fluentdConfig": {
                        "$ref": "#/types/rancher2:/ProjectLoggingFluentdConfig:ProjectLoggingFluentdConfig",
                        "description": "The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                    },
                    "kafkaConfig": {
                        "$ref": "#/types/rancher2:/ProjectLoggingKafkaConfig:ProjectLoggingKafkaConfig",
                        "description": "The kafka config for Project Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for Project Logging object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Project Logging config (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id from Project logging (string)\n"
                    },
                    "outputFlushInterval": {
                        "type": "integer",
                        "description": "How often buffered logs would be flushed. Default: `3` seconds (int)\n"
                    },
                    "outputTags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The output tags for Project Logging (map)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id to configure logging (string)\n"
                    },
                    "splunkConfig": {
                        "$ref": "#/types/rancher2:/ProjectLoggingSplunkConfig:ProjectLoggingSplunkConfig",
                        "description": "The splunk config for Project Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)\n"
                    },
                    "syslogConfig": {
                        "$ref": "#/types/rancher2:/ProjectLoggingSyslogConfig:ProjectLoggingSyslogConfig",
                        "description": "The syslog config for Project Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/projectRoleTemplateBinding:ProjectRoleTemplateBinding": {
            "description": "Provides a Rancher v2 Project Role Template Binding resource. This can be used to create Project Role Template Bindings for Rancher v2 environments and retrieve their information.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Project Role Template Binding\nconst foo = new rancher2.ProjectRoleTemplateBinding(\"foo\", {\n    projectId: \"\u003cproject_id\u003e\",\n    roleTemplateId: \"\u003crole_template_id\u003e\",\n    userId: \"\u003cuser_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Project Role Template Binding\nfoo = rancher2.ProjectRoleTemplateBinding(\"foo\",\n    project_id=\"\u003cproject_id\u003e\",\n    role_template_id=\"\u003crole_template_id\u003e\",\n    user_id=\"\u003cuser_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Project Role Template Binding\n        var foo = new Rancher2.ProjectRoleTemplateBinding(\"foo\", new Rancher2.ProjectRoleTemplateBindingArgs\n        {\n            ProjectId = \"\u003cproject_id\u003e\",\n            RoleTemplateId = \"\u003crole_template_id\u003e\",\n            UserId = \"\u003cuser_id\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewProjectRoleTemplateBinding(ctx, \"foo\", \u0026rancher2.ProjectRoleTemplateBindingArgs{\n\t\t\tProjectId:      pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tRoleTemplateId: pulumi.String(\"\u003crole_template_id\u003e\"),\n\t\t\tUserId:         pulumi.String(\"\u003cuser_id\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The group ID to assign project role template binding (string)\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The group_principal ID to assign project role template binding (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project role template binding (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where bind project role template (string)\n"
                },
                "roleTemplateId": {
                    "type": "string",
                    "description": "The role template id from create project role template binding (string)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign project role template binding (string)\n"
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "The user_principal ID to assign project role template binding (string)\n"
                }
            },
            "required": [
                "annotations",
                "groupPrincipalId",
                "labels",
                "name",
                "projectId",
                "roleTemplateId",
                "userPrincipalId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The group ID to assign project role template binding (string)\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The group_principal ID to assign project role template binding (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project role template binding (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where bind project role template (string)\n"
                },
                "roleTemplateId": {
                    "type": "string",
                    "description": "The role template id from create project role template binding (string)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign project role template binding (string)\n"
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "The user_principal ID to assign project role template binding (string)\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "roleTemplateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectRoleTemplateBinding resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The group ID to assign project role template binding (string)\n"
                    },
                    "groupPrincipalId": {
                        "type": "string",
                        "description": "The group_principal ID to assign project role template binding (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project role template binding (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where bind project role template (string)\n"
                    },
                    "roleTemplateId": {
                        "type": "string",
                        "description": "The role template id from create project role template binding (string)\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID to assign project role template binding (string)\n"
                    },
                    "userPrincipalId": {
                        "type": "string",
                        "description": "The user_principal ID to assign project role template binding (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/registry:Registry": {
            "description": "Provides a Rancher v2 Registry resource. This can be used to create docker registries for Rancher v2 environments and retrieve their information.\n\nDepending of the availability, there are 2 types of Rancher v2 docker registries:\n- Project registry: Available to all namespaces in the `project_id`\n- Namespaced regitry: Available to just `namespace_id` in the `project_id`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Project Registry\nconst foo = new rancher2.Registry(\"foo\", {\n    description: \"Terraform registry foo\",\n    projectId: \"\u003cproject_id\u003e\",\n    registries: [{\n        address: \"test.io\",\n        password: \"pass\",\n        username: \"user\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Project Registry\nfoo = rancher2.Registry(\"foo\",\n    description=\"Terraform registry foo\",\n    project_id=\"\u003cproject_id\u003e\",\n    registries=[{\n        \"address\": \"test.io\",\n        \"password\": \"pass\",\n        \"username\": \"user\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Project Registry\n        var foo = new Rancher2.Registry(\"foo\", new Rancher2.RegistryArgs\n        {\n            Description = \"Terraform registry foo\",\n            ProjectId = \"\u003cproject_id\u003e\",\n            Registries = \n            {\n                new Rancher2.Inputs.RegistryRegistryArgs\n                {\n                    Address = \"test.io\",\n                    Password = \"pass\",\n                    Username = \"user\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewRegistry(ctx, \"foo\", \u0026rancher2.RegistryArgs{\n\t\t\tDescription: pulumi.String(\"Terraform registry foo\"),\n\t\t\tProjectId:   pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tRegistries: rancher2.RegistryRegistryArray{\n\t\t\t\t\u0026rancher2.RegistryRegistryArgs{\n\t\t\t\t\tAddress:  pulumi.String(\"test.io\"),\n\t\t\t\t\tPassword: pulumi.String(\"pass\"),\n\t\t\t\t\tUsername: pulumi.String(\"user\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Namespaced Registry\nconst foo = new rancher2.Registry(\"foo\", {\n    description: \"Terraform registry foo\",\n    namespaceId: \"\u003cnamespace_id\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n    registries: [{\n        address: \"test.io\",\n        password: \"pass\",\n        username: \"user2\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Namespaced Registry\nfoo = rancher2.Registry(\"foo\",\n    description=\"Terraform registry foo\",\n    namespace_id=\"\u003cnamespace_id\u003e\",\n    project_id=\"\u003cproject_id\u003e\",\n    registries=[{\n        \"address\": \"test.io\",\n        \"password\": \"pass\",\n        \"username\": \"user2\",\n    }])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Namespaced Registry\n        var foo = new Rancher2.Registry(\"foo\", new Rancher2.RegistryArgs\n        {\n            Description = \"Terraform registry foo\",\n            NamespaceId = \"\u003cnamespace_id\u003e\",\n            ProjectId = \"\u003cproject_id\u003e\",\n            Registries = \n            {\n                new Rancher2.Inputs.RegistryRegistryArgs\n                {\n                    Address = \"test.io\",\n                    Password = \"pass\",\n                    Username = \"user2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewRegistry(ctx, \"foo\", \u0026rancher2.RegistryArgs{\n\t\t\tDescription: pulumi.String(\"Terraform registry foo\"),\n\t\t\tNamespaceId: pulumi.String(\"\u003cnamespace_id\u003e\"),\n\t\t\tProjectId:   pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tRegistries: rancher2.RegistryRegistryArray{\n\t\t\t\t\u0026rancher2.RegistryRegistryArgs{\n\t\t\t\t\tAddress:  pulumi.String(\"test.io\"),\n\t\t\t\t\tPassword: pulumi.String(\"pass\"),\n\t\t\t\t\tUsername: pulumi.String(\"user2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Registry object (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A registry description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Registry object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the registry (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where to assign the namespaced registry (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where to assign the registry (string)\n"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/RegistryRegistry:RegistryRegistry"
                    },
                    "description": "Registries data for registry (list)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "projectId",
                "registries"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for Registry object (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A registry description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for Registry object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the registry (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where to assign the namespaced registry (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where to assign the registry (string)\n"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/RegistryRegistry:RegistryRegistry"
                    },
                    "description": "Registries data for registry (list)\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "registries"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Registry resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for Registry object (map)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A registry description (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for Registry object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the registry (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced registry (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the registry (string)\n"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/RegistryRegistry:RegistryRegistry"
                        },
                        "description": "Registries data for registry (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/roleTempalte:RoleTempalte": {
            "description": "Provides a Rancher v2 Role Template resource. This can be used to create Role Template for Rancher v2 and retrieve their information. \n\n`cluster` and `project` scopes are supported for role templates.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 cluster Role Template\nconst foo = new rancher2.RoleTempalte(\"foo\", {\n    context: \"cluster\",\n    defaultRole: true,\n    description: \"Terraform role template acceptance test\",\n    rules: [{\n        apiGroups: [\"*\"],\n        resources: [\"secrets\"],\n        verbs: [\"create\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 cluster Role Template\nfoo = rancher2.RoleTempalte(\"foo\",\n    context=\"cluster\",\n    default_role=True,\n    description=\"Terraform role template acceptance test\",\n    rules=[{\n        \"apiGroups\": [\"*\"],\n        \"resources\": [\"secrets\"],\n        \"verbs\": [\"create\"],\n    }])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 cluster Role Template\n        var foo = new Rancher2.RoleTempalte(\"foo\", new Rancher2.RoleTempalteArgs\n        {\n            Context = \"cluster\",\n            DefaultRole = true,\n            Description = \"Terraform role template acceptance test\",\n            Rules = \n            {\n                new Rancher2.Inputs.RoleTempalteRuleArgs\n                {\n                    ApiGroups = \n                    {\n                        \"*\",\n                    },\n                    Resources = \n                    {\n                        \"secrets\",\n                    },\n                    Verbs = \n                    {\n                        \"create\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewRoleTempalte(ctx, \"foo\", \u0026rancher2.RoleTempalteArgs{\n\t\t\tContext:     pulumi.String(\"cluster\"),\n\t\t\tDefaultRole: pulumi.Bool(true),\n\t\t\tDescription: pulumi.String(\"Terraform role template acceptance test\"),\n\t\t\tRules: rancher2.RoleTempalteRuleArray{\n\t\t\t\t\u0026rancher2.RoleTempalteRuleArgs{\n\t\t\t\t\tApiGroups: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"secrets\"),\n\t\t\t\t\t},\n\t\t\t\t\tVerbs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"create\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 project Role Template\nconst foo = new rancher2.RoleTempalte(\"foo\", {\n    context: \"project\",\n    defaultRole: true,\n    description: \"Terraform role template acceptance test\",\n    rules: [{\n        apiGroups: [\"*\"],\n        resources: [\"secrets\"],\n        verbs: [\"create\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 project Role Template\nfoo = rancher2.RoleTempalte(\"foo\",\n    context=\"project\",\n    default_role=True,\n    description=\"Terraform role template acceptance test\",\n    rules=[{\n        \"apiGroups\": [\"*\"],\n        \"resources\": [\"secrets\"],\n        \"verbs\": [\"create\"],\n    }])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 project Role Template\n        var foo = new Rancher2.RoleTempalte(\"foo\", new Rancher2.RoleTempalteArgs\n        {\n            Context = \"project\",\n            DefaultRole = true,\n            Description = \"Terraform role template acceptance test\",\n            Rules = \n            {\n                new Rancher2.Inputs.RoleTempalteRuleArgs\n                {\n                    ApiGroups = \n                    {\n                        \"*\",\n                    },\n                    Resources = \n                    {\n                        \"secrets\",\n                    },\n                    Verbs = \n                    {\n                        \"create\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewRoleTempalte(ctx, \"foo\", \u0026rancher2.RoleTempalteArgs{\n\t\t\tContext:     pulumi.String(\"project\"),\n\t\t\tDefaultRole: pulumi.Bool(true),\n\t\t\tDescription: pulumi.String(\"Terraform role template acceptance test\"),\n\t\t\tRules: rancher2.RoleTempalteRuleArray{\n\t\t\t\t\u0026rancher2.RoleTempalteRuleArgs{\n\t\t\t\t\tApiGroups: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"secrets\"),\n\t\t\t\t\t},\n\t\t\t\t\tVerbs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"create\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "administrative": {
                    "type": "boolean",
                    "description": "Administrative role template. Default `false` (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for role template object (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "(Computed) Builtin role template (string)\n"
                },
                "context": {
                    "type": "string",
                    "description": "Role template context. `cluster` and `project` values are supported. Default: `cluster` (string)\n"
                },
                "defaultRole": {
                    "type": "boolean",
                    "description": "Default role template for new created cluster or project. Default `false` (bool)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Role template description (string)\n"
                },
                "external": {
                    "type": "boolean",
                    "description": "External role template. Default `false` (bool)\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Hidden role template. Default `false` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for role template object (map)\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Locked role template. Default `false` (bool)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Role template name (string)\n"
                },
                "roleTemplateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Inherit role template IDs (list)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/RoleTempalteRule:RoleTempalteRule"
                    },
                    "description": "Role template policy rules (list)\n"
                }
            },
            "required": [
                "annotations",
                "builtin",
                "description",
                "labels",
                "name",
                "roleTemplateIds",
                "rules"
            ],
            "inputProperties": {
                "administrative": {
                    "type": "boolean",
                    "description": "Administrative role template. Default `false` (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for role template object (map)\n"
                },
                "context": {
                    "type": "string",
                    "description": "Role template context. `cluster` and `project` values are supported. Default: `cluster` (string)\n"
                },
                "defaultRole": {
                    "type": "boolean",
                    "description": "Default role template for new created cluster or project. Default `false` (bool)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Role template description (string)\n"
                },
                "external": {
                    "type": "boolean",
                    "description": "External role template. Default `false` (bool)\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Hidden role template. Default `false` (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for role template object (map)\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Locked role template. Default `false` (bool)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Role template name (string)\n"
                },
                "roleTemplateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Inherit role template IDs (list)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:/RoleTempalteRule:RoleTempalteRule"
                    },
                    "description": "Role template policy rules (list)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleTempalte resources.\n",
                "properties": {
                    "administrative": {
                        "type": "boolean",
                        "description": "Administrative role template. Default `false` (bool)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for role template object (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "(Computed) Builtin role template (string)\n"
                    },
                    "context": {
                        "type": "string",
                        "description": "Role template context. `cluster` and `project` values are supported. Default: `cluster` (string)\n"
                    },
                    "defaultRole": {
                        "type": "boolean",
                        "description": "Default role template for new created cluster or project. Default `false` (bool)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Role template description (string)\n"
                    },
                    "external": {
                        "type": "boolean",
                        "description": "External role template. Default `false` (bool)\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Hidden role template. Default `false` (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for role template object (map)\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Locked role template. Default `false` (bool)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Role template name (string)\n"
                    },
                    "roleTemplateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Inherit role template IDs (list)\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/RoleTempalteRule:RoleTempalteRule"
                        },
                        "description": "Role template policy rules (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/secret:Secret": {
            "description": "Provides a Rancher v2 Secret resource. This can be used to create secrets for Rancher v2 environments and retrieve their information.\n\nDepending of the availability, there are 2 types of Rancher v2 secrets:\n- Project secret: Available to all namespaces in the `project_id`\n- Namespaced secret: Available to just `namespace_id` in the `project_id`\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for secret object (map)\n"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Secret key/value data. Base64 encoding required for values (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A secret description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for secret object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where to assign the namespaced secret (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where to assign the secret (string)\n"
                }
            },
            "required": [
                "annotations",
                "data",
                "labels",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for secret object (map)\n"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Secret key/value data. Base64 encoding required for values (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A secret description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for secret object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where to assign the namespaced secret (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where to assign the secret (string)\n"
                }
            },
            "requiredInputs": [
                "data",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for secret object (map)\n"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Secret key/value data. Base64 encoding required for values (map)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A secret description (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for secret object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced secret (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the secret (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/setting:Setting": {
            "description": "Provides a Rancher v2 Setting resource. This can be used to create settings for Rancher v2 environments and retrieve their information.\n\nOn create, if setting already exists, provider will import it and update its value.\n\nOn destroy, if setting is a system setting like `server-url`, provider'll not delete it from Rancher, it'll just update setting value to default and remove it from tfstate. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Setting\nconst foo = new rancher2.Setting(\"foo\", {\n    value: \"\u003cVALUE\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Setting\nfoo = rancher2.Setting(\"foo\", value=\"\u003cVALUE\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Setting\n        var foo = new Rancher2.Setting(\"foo\", new Rancher2.SettingArgs\n        {\n            Value = \"\u003cVALUE\u003e\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewSetting(ctx, \"foo\", \u0026rancher2.SettingArgs{\n\t\t\tValue: pulumi.String(\"\u003cVALUE\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for setting object (map)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for setting object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the setting (string)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the setting (string)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "value"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for setting object (map)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for setting object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the setting (string)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the setting (string)\n"
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Setting resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for setting object (map)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for setting object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the setting (string)\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the setting (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/token:Token": {
            "description": "Provides a Rancher v2 Token resource. This can be used to create Tokens for Rancher v2 provider user and retrieve their information.\n\nThere are 2 kind of tokens:\n- no scoped: valid for global system.\n- scoped: valid for just a specific cluster (`cluster_id` should be provided).\n\nTokens can't be updated once created. Any diff in token data will recreate the token. If any token expire, Rancher2 provider will generate a diff to regenerate it.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Token scoped\nconst foo = new rancher2.Token(\"foo\", {\n    clusterId: \"\u003ccluster-id\u003e\",\n    description: \"foo token\",\n    ttl: 1200,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Token scoped\nfoo = rancher2.Token(\"foo\",\n    cluster_id=\"\u003ccluster-id\u003e\",\n    description=\"foo token\",\n    ttl=1200)\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 Token scoped\n        var foo = new Rancher2.Token(\"foo\", new Rancher2.TokenArgs\n        {\n            ClusterId = \"\u003ccluster-id\u003e\",\n            Description = \"foo token\",\n            Ttl = 1200,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewToken(ctx, \"foo\", \u0026rancher2.TokenArgs{\n\t\t\tClusterId:   pulumi.String(\"\u003ccluster-id\u003e\"),\n\t\t\tDescription: pulumi.String(\"foo token\"),\n\t\t\tTtl:         pulumi.Int(1200),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "(Computed) Token access key part (string)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the token (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID for scoped token (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Token description (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Computed) Token is enabled (bool)\n"
                },
                "expired": {
                    "type": "boolean",
                    "description": "(Computed) Token is expired (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the token (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) Token name (string)\n"
                },
                "renew": {
                    "type": "boolean",
                    "description": "Renew expired or disabled token\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Token secret key part (string)\n"
                },
                "token": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Token value (string)\n",
                    "language": {
                        "csharp": {
                            "name": "TokenName"
                        }
                    }
                },
                "ttl": {
                    "type": "integer",
                    "description": "Token time to live in seconds. Default `0` (int)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "(Computed) Token user ID (string)\n"
                }
            },
            "required": [
                "accessKey",
                "annotations",
                "enabled",
                "expired",
                "labels",
                "name",
                "secretKey",
                "token",
                "userId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations of the token (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID for scoped token (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Token description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels of the token (map)\n"
                },
                "renew": {
                    "type": "boolean",
                    "description": "Renew expired or disabled token\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "Token time to live in seconds. Default `0` (int)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "(Computed) Token access key part (string)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations of the token (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster ID for scoped token (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Token description (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Computed) Token is enabled (bool)\n"
                    },
                    "expired": {
                        "type": "boolean",
                        "description": "(Computed) Token is expired (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels of the token (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) Token name (string)\n"
                    },
                    "renew": {
                        "type": "boolean",
                        "description": "Renew expired or disabled token\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Token secret key part (string)\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Token value (string)\n",
                        "language": {
                            "csharp": {
                                "name": "TokenName"
                            }
                        }
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Token time to live in seconds. Default `0` (int)\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "(Computed) Token user ID (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/user:User": {
            "description": "Provides a Rancher v2 User resource. This can be used to create Users for Rancher v2 environments and retrieve their information.\n\nWhen a Rancher User is created, it doesn't have a global role binding. At least, `user-base` global role binding in needed in order to enable user login.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 User\nconst fooUser = new rancher2.User(\"foo\", {\n    enabled: true,\n    password: \"changeme\",\n    username: \"foo\",\n});\n// Create a new rancher2 global_role_binding for User\nconst fooGlobalRoleBinding = new rancher2.GlobalRoleBinding(\"foo\", {\n    globalRoleId: \"user-base\",\n    userId: fooUser.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 User\nfoo_user = rancher2.User(\"fooUser\",\n    enabled=True,\n    password=\"changeme\",\n    username=\"foo\")\n# Create a new rancher2 global_role_binding for User\nfoo_global_role_binding = rancher2.GlobalRoleBinding(\"fooGlobalRoleBinding\",\n    global_role_id=\"user-base\",\n    user_id=foo_user.id)\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new rancher2 User\n        var fooUser = new Rancher2.User(\"fooUser\", new Rancher2.UserArgs\n        {\n            Enabled = true,\n            Password = \"changeme\",\n            Username = \"foo\",\n        });\n        // Create a new rancher2 global_role_binding for User\n        var fooGlobalRoleBinding = new Rancher2.GlobalRoleBinding(\"fooGlobalRoleBinding\", new Rancher2.GlobalRoleBindingArgs\n        {\n            GlobalRoleId = \"user-base\",\n            UserId = fooUser.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooUser, err := rancher2.NewUser(ctx, \"fooUser\", \u0026rancher2.UserArgs{\n\t\t\tEnabled:  pulumi.Bool(true),\n\t\t\tPassword: pulumi.String(\"changeme\"),\n\t\t\tUsername: pulumi.String(\"foo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewGlobalRoleBinding(ctx, \"fooGlobalRoleBinding\", \u0026rancher2.GlobalRoleBindingArgs{\n\t\t\tGlobalRoleId: pulumi.String(\"user-base\"),\n\t\t\tUserId:       fooUser.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for global role binding (map)\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for global role binding (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user full name (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user password (string)\n"
                },
                "principalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) The user principal IDs (list)\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user username (string)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "password",
                "principalIds",
                "username"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Annotations for global role binding (map)\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Labels for global role binding (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user full name (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user password (string)\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user username (string)\n"
                }
            },
            "requiredInputs": [
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for global role binding (map)\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for global role binding (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The user full name (string)\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The user password (string)\n"
                    },
                    "principalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) The user principal IDs (list)\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user username (string)\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "rancher2:index/getApp:getApp": {
            "description": "Use this data source to retrieve information about a Rancher v2 app.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst rancher2App = pulumi.output(rancher2.getApp({\n    name: \"foo\",\n    projectId: \"\u003cproject_id\u003e\",\n    targetNamespace: \"\u003cnamespace_name\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nrancher2 = rancher2.get_app(name=\"foo\",\n    project_id=\"\u003cproject_id\u003e\",\n    target_namespace=\"\u003cnamespace_name\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var rancher2 = Output.Create(Rancher2.GetApp.InvokeAsync(new Rancher2.GetAppArgs\n        {\n            Name = \"foo\",\n            ProjectId = \"\u003cproject_id\u003e\",\n            TargetNamespace = \"\u003cnamespace_name\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"\u003cnamespace_name\u003e\"\n\t\t_, err := rancher2.LookupApp(ctx, \u0026rancher2.LookupAppArgs{\n\t\t\tName:            \"foo\",\n\t\t\tProjectId:       \"\u003cproject_id\u003e\",\n\t\t\tTargetNamespace: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApp.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for the catalog (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The app name (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The id of the project where the app is deployed (string)\n"
                    },
                    "targetNamespace": {
                        "type": "string",
                        "description": "The namespace name where the app is deployed (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApp.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for the catalog (map)\n"
                    },
                    "answers": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Answers for the app (map)\n"
                    },
                    "catalogName": {
                        "type": "string",
                        "description": "(Computed) Catalog name of the app (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) Description for the app (string)\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "(Computed) The URL of the helm catalog app (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for the catalog (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "revisionId": {
                        "type": "string",
                        "description": "(Computed) Current revision id for the app (string)\n"
                    },
                    "targetNamespace": {
                        "type": "string"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "(Computed) Template name of the app (string)\n"
                    },
                    "templateVersion": {
                        "type": "string",
                        "description": "(Computed) Template version of the app (string)\n"
                    },
                    "valuesYaml": {
                        "type": "string",
                        "description": "(Computed) values.yaml base64 encoded file content for the app (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "answers",
                    "catalogName",
                    "description",
                    "externalId",
                    "labels",
                    "name",
                    "projectId",
                    "revisionId",
                    "targetNamespace",
                    "templateName",
                    "templateVersion",
                    "valuesYaml",
                    "id"
                ]
            }
        },
        "rancher2:index/getCatalog:getCatalog": {
            "description": "Use this data source to retrieve information about a Rancher v2 catalog.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst library = pulumi.output(rancher2.getCatalog({\n    name: \"catalog\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nlibrary = rancher2.get_catalog(name=\"catalog\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var library = Output.Create(Rancher2.GetCatalog.InvokeAsync(new Rancher2.GetCatalogArgs\n        {\n            Name = \"catalog\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupCatalog(ctx, \u0026rancher2.LookupCatalogArgs{\n\t\t\tName: \"catalog\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCatalog.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The catalog name.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCatalog.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for the catalog (map)\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "(Computed) The branch of the catalog repo to use (string)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "(Computed) The cluster id of the catalog (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) A catalog description (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Computed) The kind of the catalog. Just helm by the moment (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for the catalog (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "(Computed/Sensitive) The password to access the catalog if needed (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "(Computed) The project id of the catalog (string)\n"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "(Computed) The url of the catalog repo (string)\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "(Computed/Sensitive) The username to access the catalog if needed (string)\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "(Computed) Helm version for the catalog (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "branch",
                    "clusterId",
                    "description",
                    "kind",
                    "labels",
                    "name",
                    "password",
                    "projectId",
                    "url",
                    "username",
                    "version",
                    "id"
                ]
            }
        },
        "rancher2:index/getCertificate:getCertificate": {
            "description": "Use this data source to retrieve information about a Rancher v2 certificate.\n\nDepending of the availability, there are 2 types of Rancher v2 certificates:\n- Project certificate: Available to all namespaces in the `project_id`\n- Namespaced certificate: Available to just `namespace_id` in the `project_id`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Project Certificate\nconst foo = pulumi.output(rancher2.getCertificate({\n    name: \"\u003cname\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_certificate(name=\"\u003cname\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetCertificate.InvokeAsync(new Rancher2.GetCertificateArgs\n        {\n            Name = \"\u003cname\u003e\",\n            ProjectId = \"\u003cproject_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupCertificate(ctx, \u0026rancher2.LookupCertificateArgs{\n\t\t\tName:      \"\u003cname\u003e\",\n\t\t\tProjectId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Namespaced Certificate\nconst foo = pulumi.output(rancher2.getCertificate({\n    name: \"\u003cname\u003e\",\n    namespaceId: \"\u003cnamespace_id\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_certificate(name=\"\u003cname\u003e\",\n    namespace_id=\"\u003cnamespace_id\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetCertificate.InvokeAsync(new Rancher2.GetCertificateArgs\n        {\n            Name = \"\u003cname\u003e\",\n            NamespaceId = \"\u003cnamespace_id\u003e\",\n            ProjectId = \"\u003cproject_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"\u003cnamespace_id\u003e\"\n\t\t_, err := rancher2.LookupCertificate(ctx, \u0026rancher2.LookupCertificateArgs{\n\t\t\tName:        \"\u003cname\u003e\",\n\t\t\tNamespaceId: \u0026opt0,\n\t\t\tProjectId:   \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificate.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced certificate (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the certificate (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCertificate.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for certificate object (map)\n"
                    },
                    "certs": {
                        "type": "string",
                        "description": "(Computed) Base64 encoded certs (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) A certificate description (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for certificate object (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "certs",
                    "description",
                    "labels",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "rancher2:index/getCloudCredential:getCloudCredential": {
            "description": "Use this data source to retrieve information about a Rancher v2 Cloud Credential.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst test = pulumi.output(rancher2.getCloudCredential({\n    name: \"test\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\ntest = rancher2.get_cloud_credential(name=\"test\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Rancher2.GetCloudCredential.InvokeAsync(new Rancher2.GetCloudCredentialArgs\n        {\n            Name = \"test\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupCloudCredential(ctx, \u0026rancher2.LookupCloudCredentialArgs{\n\t\t\tName: \"test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudCredential.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Cloud Credential name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudCredential.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for the Cloud Credential (map)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for the Cloud Credential (map)\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "labels",
                    "name",
                    "id"
                ]
            }
        },
        "rancher2:index/getCluster:getCluster": {
            "description": "Use this data source to retrieve information about a Rancher v2 cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo_custom = pulumi.output(rancher2.getCluster({\n    name: \"foo-custom\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo_custom = rancher2.get_cluster(name=\"foo-custom\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo_custom = Output.Create(Rancher2.GetCluster.InvokeAsync(new Rancher2.GetClusterArgs\n        {\n            Name = \"foo-custom\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupCluster(ctx, \u0026rancher2.LookupClusterArgs{\n\t\t\tName: \"foo-custom\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Cluster (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "aksConfig": {
                        "$ref": "#/types/rancher2:/getClusterAksConfig:getClusterAksConfig",
                        "description": "(Computed) The Azure aks configuration for `aks` Clusters. Conflicts with `eks_config`, `gke_config` and `rke_config` (list maxitems:1)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for Node Pool object (map)\n"
                    },
                    "clusterAuthEndpoint": {
                        "$ref": "#/types/rancher2:/getClusterClusterAuthEndpoint:getClusterClusterAuthEndpoint",
                        "description": "(Computed) Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)\n"
                    },
                    "clusterMonitoringInput": {
                        "$ref": "#/types/rancher2:/getClusterClusterMonitoringInput:getClusterClusterMonitoringInput",
                        "description": "(Computed) Cluster monitoring config (list maxitems:1)\n"
                    },
                    "clusterRegistrationToken": {
                        "$ref": "#/types/rancher2:/getClusterClusterRegistrationToken:getClusterClusterRegistrationToken",
                        "description": "(Computed) Cluster Registration Token generated for the cluster (list maxitems:1)\n"
                    },
                    "clusterTemplateAnswers": {
                        "$ref": "#/types/rancher2:/getClusterClusterTemplateAnswers:getClusterClusterTemplateAnswers",
                        "description": "(Computed) Cluster template answers (list maxitems:1)\n"
                    },
                    "clusterTemplateId": {
                        "type": "string",
                        "description": "(Computed) Cluster template ID (string)\n"
                    },
                    "clusterTemplateQuestions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getClusterClusterTemplateQuestion:getClusterClusterTemplateQuestion"
                        },
                        "description": "(Computed) Cluster template questions (list)\n"
                    },
                    "clusterTemplateRevisionId": {
                        "type": "string",
                        "description": "(Computed) Cluster template revision ID (string)\n"
                    },
                    "defaultPodSecurityPolicyTemplateId": {
                        "type": "string",
                        "description": "(Optional/Computed) [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)\n"
                    },
                    "defaultProjectId": {
                        "type": "string",
                        "description": "(Computed) Default project ID for the cluster (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) The description for Cluster (string)\n"
                    },
                    "driver": {
                        "type": "string",
                        "description": "(Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)\n"
                    },
                    "eksConfig": {
                        "$ref": "#/types/rancher2:/getClusterEksConfig:getClusterEksConfig",
                        "description": "(Computed) The Amazon eks configuration for `eks` Clusters. Conflicts with `aks_config`, `gke_config` and `rke_config` (list maxitems:1)\n"
                    },
                    "enableClusterAlerting": {
                        "type": "boolean"
                    },
                    "enableClusterMonitoring": {
                        "type": "boolean",
                        "description": "(Computed) Enable built-in cluster monitoring. Default `false` (bool)\n"
                    },
                    "enableNetworkPolicy": {
                        "type": "boolean",
                        "description": "(Computed) Enable project network isolation. Default `false` (bool)\n"
                    },
                    "gkeConfig": {
                        "$ref": "#/types/rancher2:/getClusterGkeConfig:getClusterGkeConfig",
                        "description": "(Computed) The Google gke configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config` and `rke_config` (list maxitems:1)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "k3sConfig": {
                        "$ref": "#/types/rancher2:/getClusterK3sConfig:getClusterK3sConfig",
                        "description": "(Computed) The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `rke_config` (list maxitems:1)\n"
                    },
                    "kubeConfig": {
                        "type": "string",
                        "description": "(Computed) Kube Config generated for the cluster (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for Node Pool object (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "rkeConfig": {
                        "$ref": "#/types/rancher2:/getClusterRkeConfig:getClusterRkeConfig",
                        "description": "(Computed) The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config` and `gke_config` (list maxitems:1)\n"
                    },
                    "scheduledClusterScans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getClusterScheduledClusterScan:getClusterScheduledClusterScan"
                        }
                    },
                    "systemProjectId": {
                        "type": "string",
                        "description": "(Computed) System project ID for the cluster (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "aksConfig",
                    "annotations",
                    "clusterAuthEndpoint",
                    "clusterMonitoringInput",
                    "clusterRegistrationToken",
                    "clusterTemplateAnswers",
                    "clusterTemplateId",
                    "clusterTemplateQuestions",
                    "clusterTemplateRevisionId",
                    "defaultPodSecurityPolicyTemplateId",
                    "defaultProjectId",
                    "description",
                    "driver",
                    "eksConfig",
                    "enableClusterAlerting",
                    "enableClusterMonitoring",
                    "enableNetworkPolicy",
                    "gkeConfig",
                    "k3sConfig",
                    "kubeConfig",
                    "labels",
                    "name",
                    "rkeConfig",
                    "scheduledClusterScans",
                    "systemProjectId",
                    "id"
                ]
            }
        },
        "rancher2:index/getClusterAlertGroup:getClusterAlertGroup": {
            "description": "Use this data source to retrieve information about a Rancher v2 cluster alert group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getClusterAlertGroup({\n    clusterId: \"\u003ccluster_id\u003e\",\n    name: \"\u003ccluster_alert_group_name\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_alert_group(cluster_id=\"\u003ccluster_id\u003e\",\n    name=\"\u003ccluster_alert_group_name\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetClusterAlertGroup.InvokeAsync(new Rancher2.GetClusterAlertGroupArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            Name = \"\u003ccluster_alert_group_name\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterAlertGroup(ctx, \u0026rancher2.LookupClusterAlertGroupArgs{\n\t\t\tClusterId: \"\u003ccluster_id\u003e\",\n\t\t\tName:      \"\u003ccluster_alert_group_name\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterAlertGroup.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create cluster alert group (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster alert group name (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterAlertGroup.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The cluster alert group annotations (map)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) The cluster alert group description (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "(Computed) The cluster alert group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "(Computed) The cluster alert group wait seconds. Default: `180` (int)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The cluster alert group labels (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getClusterAlertGroupRecipient:getClusterAlertGroupRecipient"
                        },
                        "description": "(Computed) The cluster alert group recipients (list)\n"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "(Computed) The cluster alert group wait seconds. Default: `3600` (int)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "clusterId",
                    "description",
                    "groupIntervalSeconds",
                    "groupWaitSeconds",
                    "labels",
                    "name",
                    "recipients",
                    "repeatIntervalSeconds",
                    "id"
                ]
            }
        },
        "rancher2:index/getClusterAlterRule:getClusterAlterRule": {
            "description": "Use this data source to retrieve information about a Rancher v2 cluster alert rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getClusterAlterRule({\n    clusterId: \"\u003ccluster_id\u003e\",\n    name: \"\u003ccluster_alert_rule_name\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_alter_rule(cluster_id=\"\u003ccluster_id\u003e\",\n    name=\"\u003ccluster_alert_rule_name\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetClusterAlterRule.InvokeAsync(new Rancher2.GetClusterAlterRuleArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            Name = \"\u003ccluster_alert_rule_name\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterAlterRule(ctx, \u0026rancher2.LookupClusterAlterRuleArgs{\n\t\t\tClusterId: \"\u003ccluster_id\u003e\",\n\t\t\tName:      \"\u003ccluster_alert_rule_name\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterAlterRule.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create cluster alert rule (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The cluster alert rule labels (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster alert rule name (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterAlterRule.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The cluster alert rule annotations (map)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "eventRule": {
                        "$ref": "#/types/rancher2:/getClusterAlterRuleEventRule:getClusterAlterRuleEventRule",
                        "description": "(Computed) The cluster alert rule event rule. ConflictsWith: `\"metric_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "(Computed) The cluster alert rule alert group ID (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "(Computed) The cluster alert rule group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "(Computed) The cluster alert rule group wait seconds. Default: `180` (int)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inherited": {
                        "type": "boolean",
                        "description": "(Computed) The cluster alert rule inherited. Default: `true` (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The cluster alert rule labels (map)\n"
                    },
                    "metricRule": {
                        "$ref": "#/types/rancher2:/getClusterAlterRuleMetricRule:getClusterAlterRuleMetricRule",
                        "description": "(Computed) The cluster alert rule metric rule. ConflictsWith: `\"event_rule\", \"node_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeRule": {
                        "$ref": "#/types/rancher2:/getClusterAlterRuleNodeRule:getClusterAlterRuleNodeRule",
                        "description": "(Computed) The cluster alert rule node rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"system_service_rule\"`` (list Maxitems:1)\n"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "(Optional) The cluster alert rule wait seconds. Default: `3600` (int)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "(Computed) The cluster alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                    },
                    "systemServiceRule": {
                        "$ref": "#/types/rancher2:/getClusterAlterRuleSystemServiceRule:getClusterAlterRuleSystemServiceRule",
                        "description": "(Computed) The cluster alert rule system service rule. ConflictsWith: `\"event_rule\", \"metric_rule\", \"node_rule\"`` (list Maxitems:1)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "clusterId",
                    "eventRule",
                    "groupId",
                    "groupIntervalSeconds",
                    "groupWaitSeconds",
                    "inherited",
                    "metricRule",
                    "name",
                    "nodeRule",
                    "repeatIntervalSeconds",
                    "severity",
                    "systemServiceRule",
                    "id"
                ]
            }
        },
        "rancher2:index/getClusterDriver:getClusterDriver": {
            "description": "Use this data source to retrieve information about a Rancher v2 Cluster Driver resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getClusterDriver({\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_driver(name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetClusterDriver.InvokeAsync(new Rancher2.GetClusterDriverArgs\n        {\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterDriver(ctx, \u0026rancher2.LookupClusterDriverArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterDriver.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster driver (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterDriver.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "(Computed) Specify if the cluster driver state (bool)\n"
                    },
                    "actualUrl": {
                        "type": "string",
                        "description": "(Computed) Actual url of the cluster driver (string)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "(Computed) Specify whether the cluster driver is an internal cluster driver or not (bool)\n"
                    },
                    "checksum": {
                        "type": "string",
                        "description": "(Computed) Verify that the downloaded driver matches the expected checksum (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uiUrl": {
                        "type": "string",
                        "description": "(Computed) The URL to load for customized Add Clusters screen for this driver (string)\n"
                    },
                    "url": {
                        "type": "string"
                    },
                    "whitelistDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) Domains to whitelist for the ui (list)\n"
                    }
                },
                "type": "object",
                "required": [
                    "active",
                    "actualUrl",
                    "annotations",
                    "builtin",
                    "checksum",
                    "labels",
                    "name",
                    "uiUrl",
                    "url",
                    "whitelistDomains",
                    "id"
                ]
            }
        },
        "rancher2:index/getClusterLogging:getClusterLogging": {
            "description": "Use this data source to retrieve information about a Rancher v2 Cluster Logging.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getClusterLogging({\n    clusterId: \"\u003ccluster_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_logging(cluster_id=\"\u003ccluster_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetClusterLogging.InvokeAsync(new Rancher2.GetClusterLoggingArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterLogging(ctx, \u0026rancher2.LookupClusterLoggingArgs{\n\t\t\tClusterId: \"\u003ccluster_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterLogging.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id to configure logging (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterLogging.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for Cluster Logging object (map)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "customTargetConfig": {
                        "$ref": "#/types/rancher2:/getClusterLoggingCustomTargetConfig:getClusterLoggingCustomTargetConfig"
                    },
                    "elasticsearchConfig": {
                        "$ref": "#/types/rancher2:/getClusterLoggingElasticsearchConfig:getClusterLoggingElasticsearchConfig",
                        "description": "(Computed) The elasticsearch config for Cluster Logging. For `kind = elasticsearch`  (list maxitems:1)\n"
                    },
                    "enableJsonParsing": {
                        "type": "boolean"
                    },
                    "fluentdConfig": {
                        "$ref": "#/types/rancher2:/getClusterLoggingFluentdConfig:getClusterLoggingFluentdConfig",
                        "description": "(Computed) The fluentd config for Cluster Logging. For `kind = fluentd` (list maxitems:1)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kafkaConfig": {
                        "$ref": "#/types/rancher2:/getClusterLoggingKafkaConfig:getClusterLoggingKafkaConfig",
                        "description": "(Computed) The kafka config for Cluster Logging. For `kind = kafka` (list maxitems:1)\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Computed) The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for Cluster Logging object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the cluster logging config (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "(Computed) The namespace id from cluster logging (string)\n"
                    },
                    "outputFlushInterval": {
                        "type": "integer",
                        "description": "(Computed) How often buffered logs would be flushed. Default: `3` seconds (int)\n"
                    },
                    "outputTags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(computed) The output tags for Cluster Logging (map)\n"
                    },
                    "splunkConfig": {
                        "$ref": "#/types/rancher2:/getClusterLoggingSplunkConfig:getClusterLoggingSplunkConfig",
                        "description": "(Computed) The splunk config for Cluster Logging. For `kind = splunk` (list maxitems:1)\n"
                    },
                    "syslogConfig": {
                        "$ref": "#/types/rancher2:/getClusterLoggingSyslogConfig:getClusterLoggingSyslogConfig",
                        "description": "(Computed) The syslog config for Cluster Logging. For `kind = syslog` (list maxitems:1)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "clusterId",
                    "customTargetConfig",
                    "elasticsearchConfig",
                    "enableJsonParsing",
                    "fluentdConfig",
                    "kafkaConfig",
                    "kind",
                    "labels",
                    "name",
                    "namespaceId",
                    "outputFlushInterval",
                    "outputTags",
                    "splunkConfig",
                    "syslogConfig",
                    "id"
                ]
            }
        },
        "rancher2:index/getClusterRoleTemplateBinding:getClusterRoleTemplateBinding": {
            "description": "Use this data source to retrieve information about a Rancher v2 cluster role template binding.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getClusterRoleTemplateBinding({\n    clusterId: \"foo_id\",\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_role_template_binding(cluster_id=\"foo_id\",\n    name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetClusterRoleTemplateBinding.InvokeAsync(new Rancher2.GetClusterRoleTemplateBindingArgs\n        {\n            ClusterId = \"foo_id\",\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterRoleTemplateBinding(ctx, \u0026rancher2.LookupClusterRoleTemplateBindingArgs{\n\t\t\tClusterId: \"foo_id\",\n\t\t\tName:      \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterRoleTemplateBinding.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where bind cluster role template (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster role template binding (string)\n"
                    },
                    "roleTemplateId": {
                        "type": "string",
                        "description": "The role template id from create cluster role template binding (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterRoleTemplateBinding.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "(Computed) The group ID to assign cluster role template binding (string)\n"
                    },
                    "groupPrincipalId": {
                        "type": "string",
                        "description": "(Computed) The group_principal ID to assign cluster role template binding (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "roleTemplateId": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string",
                        "description": "(Computed) The user ID to assign cluster role template binding (string)\n"
                    },
                    "userPrincipalId": {
                        "type": "string",
                        "description": "(Computed) The user_principal ID to assign cluster role template binding (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "clusterId",
                    "groupId",
                    "groupPrincipalId",
                    "labels",
                    "name",
                    "roleTemplateId",
                    "userId",
                    "userPrincipalId",
                    "id"
                ]
            }
        },
        "rancher2:index/getClusterScan:getClusterScan": {
            "inputs": {
                "description": "A collection of arguments for invoking getClusterScan.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterScan.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "runType": {
                        "type": "string"
                    },
                    "scanConfig": {
                        "$ref": "#/types/rancher2:/getClusterScanScanConfig:getClusterScanScanConfig"
                    },
                    "scanType": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "clusterId",
                    "labels",
                    "name",
                    "runType",
                    "scanConfig",
                    "scanType",
                    "status",
                    "id"
                ]
            }
        },
        "rancher2:index/getClusterTemplate:getClusterTemplate": {
            "description": "Use this data source to retrieve information about a Rancher v2 cluster template.\n\nCluster Templates are available from Rancher v2.3.x and above.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getClusterTemplate({\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_template(name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetClusterTemplate.InvokeAsync(new Rancher2.GetClusterTemplateArgs\n        {\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterTemplate(ctx, \u0026rancher2.LookupClusterTemplateArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterTemplate.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for the cluster template (map)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for the cluster template (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster template name (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterTemplate.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for the cluster template (map)\n"
                    },
                    "defaultRevisionId": {
                        "type": "string",
                        "description": "(Computed) Default cluster template revision ID (string)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for the cluster template (map)\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getClusterTemplateMember:getClusterTemplateMember"
                        },
                        "description": "(Computed) Cluster template members (list)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "templateRevisions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getClusterTemplateTemplateRevision:getClusterTemplateTemplateRevision"
                        },
                        "description": "(Computed) Cluster template revisions (list)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "defaultRevisionId",
                    "description",
                    "labels",
                    "members",
                    "name",
                    "templateRevisions",
                    "id"
                ]
            }
        },
        "rancher2:index/getEtcdBackup:getEtcdBackup": {
            "description": "Use this data source to retrieve information about a Rancher v2 etcd backup.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getEtcdBackup({\n    clusterId: \"\u003cCLUSTER_ID\u003e\",\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_etcd_backup(cluster_id=\"\u003cCLUSTER_ID\u003e\",\n    name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetEtcdBackup.InvokeAsync(new Rancher2.GetEtcdBackupArgs\n        {\n            ClusterId = \"\u003cCLUSTER_ID\u003e\",\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupEtcdBackup(ctx, \u0026rancher2.LookupEtcdBackupArgs{\n\t\t\tClusterId: \"\u003cCLUSTER_ID\u003e\",\n\t\t\tName:      \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEtcdBackup.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster ID to config Etcd Backup (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Etcd Backup (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEtcdBackup.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for Etcd Backup object (map)\n"
                    },
                    "backupConfig": {
                        "$ref": "#/types/rancher2:/getEtcdBackupBackupConfig:getEtcdBackupBackupConfig",
                        "description": "(Computed) Backup config for etcd backup (list maxitems:1)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string",
                        "description": "(Computed) Filename of the Etcd Backup (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for Etcd Backup object (map)\n"
                    },
                    "manual": {
                        "type": "boolean",
                        "description": "(Computed) Manual execution of the Etcd Backup. Default `false` (bool)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "(Computed) Description for the Etcd Backup (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "backupConfig",
                    "clusterId",
                    "filename",
                    "labels",
                    "manual",
                    "name",
                    "namespaceId",
                    "id"
                ]
            }
        },
        "rancher2:index/getGlobalRoleBinding:getGlobalRoleBinding": {
            "description": "Use this data source to retrieve information about a Rancher v2 global role binding.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getGlobalRoleBinding({\n    globalRoleId: \"foo_id\",\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_global_role_binding(global_role_id=\"foo_id\",\n    name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetGlobalRoleBinding.InvokeAsync(new Rancher2.GetGlobalRoleBindingArgs\n        {\n            GlobalRoleId = \"foo_id\",\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"foo_id\"\n\t\t_, err := rancher2.LookupGlobalRoleBinding(ctx, \u0026rancher2.LookupGlobalRoleBindingArgs{\n\t\t\tGlobalRoleId: \u0026opt0,\n\t\t\tName:         \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGlobalRoleBinding.\n",
                "properties": {
                    "globalRoleId": {
                        "type": "string",
                        "description": "The global role id (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the global role binding (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGlobalRoleBinding.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n"
                    },
                    "globalRoleId": {
                        "type": "string"
                    },
                    "groupPrincipalId": {
                        "type": "string",
                        "description": "(Computed) The group principal ID to assign global role binding. Rancher v2.4.0 or higher is required (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string",
                        "description": "(Computed) The user ID to assign global role binding (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "globalRoleId",
                    "groupPrincipalId",
                    "labels",
                    "name",
                    "userId",
                    "id"
                ]
            }
        },
        "rancher2:index/getMultiClusterApp:getMultiClusterApp": {
            "description": "Use this data source to retrieve information about a Rancher v2 multi cluster app.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getMultiClusterApp({\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_multi_cluster_app(name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetMultiClusterApp.InvokeAsync(new Rancher2.GetMultiClusterAppArgs\n        {\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupMultiClusterApp(ctx, \u0026rancher2.LookupMultiClusterAppArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMultiClusterApp.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The multi cluster app name (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMultiClusterApp.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for multi cluster app object (map)\n"
                    },
                    "answers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getMultiClusterAppAnswer:getMultiClusterAppAnswer"
                        },
                        "description": "(Computed) The multi cluster app answers (list)\n"
                    },
                    "catalogName": {
                        "type": "string",
                        "description": "(Computed) The multi cluster app catalog name (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for multi cluster app object (map)\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getMultiClusterAppMember:getMultiClusterAppMember"
                        },
                        "description": "(Computed) The multi cluster app members (list)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "revisionHistoryLimit": {
                        "type": "integer",
                        "description": "(Computed) The multi cluster app revision history limit (int)\n"
                    },
                    "revisionId": {
                        "type": "string",
                        "description": "(Computed) Current revision id for the multi cluster app (string)\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) The multi cluster app roles (list)\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getMultiClusterAppTarget:getMultiClusterAppTarget"
                        },
                        "description": "(Computed) The multi cluster app target projects (list)\n"
                    },
                    "templateName": {
                        "type": "string",
                        "description": "(Computed) The multi cluster app template name (string)\n"
                    },
                    "templateVersion": {
                        "type": "string",
                        "description": "(Computed) The multi cluster app template version (string)\n"
                    },
                    "templateVersionId": {
                        "type": "string",
                        "description": "(Computed) The multi cluster app template version ID (string)\n"
                    },
                    "upgradeStrategies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getMultiClusterAppUpgradeStrategy:getMultiClusterAppUpgradeStrategy"
                        },
                        "description": "(Computed) The multi cluster app upgrade strategy (list)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "answers",
                    "catalogName",
                    "labels",
                    "members",
                    "name",
                    "revisionHistoryLimit",
                    "revisionId",
                    "roles",
                    "targets",
                    "templateName",
                    "templateVersion",
                    "templateVersionId",
                    "upgradeStrategies",
                    "id"
                ]
            }
        },
        "rancher2:index/getNamespace:getNamespace": {
            "description": "Use this data source to retrieve information about a Rancher v2 namespace.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2_cluster_foo_custom.defaultProjectId.apply(defaultProjectId =\u003e rancher2.getNamespace({\n    name: \"foo\",\n    projectId: defaultProjectId,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_namespace(name=\"foo\",\n    project_id=rancher2_cluster[\"foo-custom\"][\"default_project_id\"])\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetNamespace.InvokeAsync(new Rancher2.GetNamespaceArgs\n        {\n            Name = \"foo\",\n            ProjectId = rancher2_cluster.Foo_custom.Default_project_id,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupNamespace(ctx, \u0026rancher2.LookupNamespaceArgs{\n\t\t\tName:      \"foo\",\n\t\t\tProjectId: rancher2_cluster.Foo - custom.Default_project_id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the namespace (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where namespace is assigned (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNamespace.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for Node Pool object (map)\n"
                    },
                    "containerResourceLimit": {
                        "$ref": "#/types/rancher2:/getNamespaceContainerResourceLimit:getNamespaceContainerResourceLimit",
                        "description": "(Computed) Default containers resource limits on namespace (List maxitem:1)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) A namespace description (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for Node Pool object (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "resourceQuota": {
                        "$ref": "#/types/rancher2:/getNamespaceResourceQuota:getNamespaceResourceQuota",
                        "description": "(Computed) Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "containerResourceLimit",
                    "description",
                    "labels",
                    "name",
                    "projectId",
                    "resourceQuota",
                    "id"
                ]
            }
        },
        "rancher2:index/getNodeDriver:getNodeDriver": {
            "description": "Use this data source to retrieve information about a Rancher v2 Node Driver resource. \n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getNodeDriver({\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_node_driver(name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetNodeDriver.InvokeAsync(new Rancher2.GetNodeDriverArgs\n        {\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupNodeDriver(ctx, \u0026rancher2.LookupNodeDriverArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeDriver.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the node driver (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeDriver.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "(Computed) Specify if the node driver state (bool)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "(Computed) Specify wheter the node driver is an internal cluster driver or not (bool)\n"
                    },
                    "checksum": {
                        "type": "string",
                        "description": "(Computed) Verify that the downloaded driver matches the expected checksum (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) Description of the node driver (string)\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "(Computed) External ID (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uiUrl": {
                        "type": "string",
                        "description": "(Computed) The URL to load for customized Add Node screen for this driver (string)\n"
                    },
                    "url": {
                        "type": "string"
                    },
                    "whitelistDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) Domains to whitelist for the ui (list)\n"
                    }
                },
                "type": "object",
                "required": [
                    "active",
                    "annotations",
                    "builtin",
                    "checksum",
                    "description",
                    "externalId",
                    "labels",
                    "name",
                    "uiUrl",
                    "url",
                    "whitelistDomains",
                    "id"
                ]
            }
        },
        "rancher2:index/getNodePool:getNodePool": {
            "description": "Use this data source to retrieve information about a Rancher v2 Node Pool resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2_cluster_foo_custom.id.apply(id =\u003e rancher2.getNodePool({\n    clusterId: id,\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_node_pool(cluster_id=rancher2_cluster[\"foo-custom\"][\"id\"],\n    name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetNodePool.InvokeAsync(new Rancher2.GetNodePoolArgs\n        {\n            ClusterId = rancher2_cluster.Foo_custom.Id,\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupNodePool(ctx, \u0026rancher2.LookupNodePoolArgs{\n\t\t\tClusterId: rancher2_cluster.Foo - custom.Id,\n\t\t\tName:      \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNodePool.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The RKE cluster id to use Node Pool (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Pool (string)\n"
                    },
                    "nodeTemplateId": {
                        "type": "string",
                        "description": "The Node Template ID to use for node creation (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodePool.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for Node Pool object (map)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "controlPlane": {
                        "type": "boolean",
                        "description": "(Computed) RKE control plane role for created nodes (bool)\n"
                    },
                    "deleteNotReadyAfterSecs": {
                        "type": "integer",
                        "description": "(Computed) Delete not ready node after secs. Default `0` (int)\n"
                    },
                    "etcd": {
                        "type": "boolean",
                        "description": "(Computed) RKE etcd role for created nodes (bool)\n"
                    },
                    "hostnamePrefix": {
                        "type": "string",
                        "description": "(Computed) The prefix for created nodes of the Node Pool (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for Node Pool object (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeTaints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getNodePoolNodeTaint:getNodePoolNodeTaint"
                        },
                        "description": "(Computed) Node taints (List)\n"
                    },
                    "nodeTemplateId": {
                        "type": "string"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "(Computed) The number of nodes to create on Node Pool (int)\n"
                    },
                    "worker": {
                        "type": "boolean",
                        "description": "(Computed) RKE role role for created nodes (bool)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "clusterId",
                    "controlPlane",
                    "deleteNotReadyAfterSecs",
                    "etcd",
                    "hostnamePrefix",
                    "labels",
                    "name",
                    "nodeTaints",
                    "nodeTemplateId",
                    "quantity",
                    "worker",
                    "id"
                ]
            }
        },
        "rancher2:index/getNodeTemplate:getNodeTemplate": {
            "description": "Use this data source to retrieve information about a Rancher v2 Node Template resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getNodeTemplate({\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_node_template(name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetNodeTemplate.InvokeAsync(new Rancher2.GetNodeTemplateArgs\n        {\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupNodeTemplate(ctx, \u0026rancher2.LookupNodeTemplateArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeTemplate.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Template (string)\n"
                    },
                    "useInternalIpAddress": {
                        "type": "boolean",
                        "description": "(Computed) Engine storage driver for the node template (bool)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeTemplate.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for Node Template object (map)\n"
                    },
                    "cloudCredentialId": {
                        "type": "string",
                        "description": "(Computed) Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) Description for the Node Template (string)\n"
                    },
                    "driver": {
                        "type": "string",
                        "description": "(Computed) The driver of the node template (string)\n"
                    },
                    "engineEnv": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Engine environment for the node template (string)\n"
                    },
                    "engineInsecureRegistries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) Insecure registry for the node template (list)\n"
                    },
                    "engineInstallUrl": {
                        "type": "string",
                        "description": "(Computed) Docker engine install URL for the node template (string)\n"
                    },
                    "engineLabel": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Engine label for the node template (string)\n"
                    },
                    "engineOpt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Engine options for the node template (map)\n"
                    },
                    "engineRegistryMirrors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) Engine registry mirror for the node template (list)\n"
                    },
                    "engineStorageDriver": {
                        "type": "string",
                        "description": "(Computed) Engine storage driver for the node template (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for Node Template object (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "useInternalIpAddress": {
                        "type": "boolean",
                        "description": "(Computed) Engine storage driver for the node template (bool)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "cloudCredentialId",
                    "description",
                    "driver",
                    "engineEnv",
                    "engineInsecureRegistries",
                    "engineInstallUrl",
                    "engineLabel",
                    "engineOpt",
                    "engineRegistryMirrors",
                    "engineStorageDriver",
                    "labels",
                    "name",
                    "id"
                ]
            }
        },
        "rancher2:index/getNotifier:getNotifier": {
            "description": "Use this data source to retrieve information about a Rancher v2 notifier.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getNotifier({\n    clusterId: \"\u003ccluster_id\u003e\",\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_notifier(cluster_id=\"\u003ccluster_id\u003e\",\n    name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetNotifier.InvokeAsync(new Rancher2.GetNotifierArgs\n        {\n            ClusterId = \"\u003ccluster_id\u003e\",\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupNotifier(ctx, \u0026rancher2.LookupNotifierArgs{\n\t\t\tClusterId: \"\u003ccluster_id\u003e\",\n\t\t\tName:      \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNotifier.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create notifier (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notifier (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNotifier.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for notifier object (map)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) The notifier description (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for notifier object (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pagerdutyConfig": {
                        "$ref": "#/types/rancher2:/getNotifierPagerdutyConfig:getNotifierPagerdutyConfig",
                        "description": "(Computed) Pagerduty config for notifier (list maxitems:1)\n"
                    },
                    "slackConfig": {
                        "$ref": "#/types/rancher2:/getNotifierSlackConfig:getNotifierSlackConfig",
                        "description": "(Computed) Slack config for notifier (list maxitems:1)\n"
                    },
                    "smtpConfig": {
                        "$ref": "#/types/rancher2:/getNotifierSmtpConfig:getNotifierSmtpConfig",
                        "description": "(Computed) SMTP config for notifier (list maxitems:1)\n"
                    },
                    "webhookConfig": {
                        "$ref": "#/types/rancher2:/getNotifierWebhookConfig:getNotifierWebhookConfig",
                        "description": "(Computed) Webhook config for notifier (list maxitems:1)\n"
                    },
                    "wechatConfig": {
                        "$ref": "#/types/rancher2:/getNotifierWechatConfig:getNotifierWechatConfig",
                        "description": "(Computed) Wechat config for notifier (list maxitems:1)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "clusterId",
                    "description",
                    "labels",
                    "name",
                    "pagerdutyConfig",
                    "slackConfig",
                    "smtpConfig",
                    "webhookConfig",
                    "wechatConfig",
                    "id"
                ]
            }
        },
        "rancher2:index/getPodSecurityPolicyTemplate:getPodSecurityPolicyTemplate": {
            "description": "Use this data source to retrieve information about a Rancher v2 PodSecurityPolicyTemplate.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getPodSecurityPolicyTemplate({\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_pod_security_policy_template(name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetPodSecurityPolicyTemplate.InvokeAsync(new Rancher2.GetPodSecurityPolicyTemplateArgs\n        {\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupPodSecurityPolicyTemplate(ctx, \u0026rancher2.LookupPodSecurityPolicyTemplateArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPodSecurityPolicyTemplate.\n",
                "properties": {
                    "allowPrivilegeEscalation": {
                        "type": "boolean",
                        "description": "= (Optional)\n"
                    },
                    "allowedCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "allowedCsiDrivers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateAllowedCsiDriver:getPodSecurityPolicyTemplateAllowedCsiDriver"
                        },
                        "description": "(list)\n"
                    },
                    "allowedFlexVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateAllowedFlexVolume:getPodSecurityPolicyTemplateAllowedFlexVolume"
                        },
                        "description": "(list)\n"
                    },
                    "allowedHostPaths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateAllowedHostPath:getPodSecurityPolicyTemplateAllowedHostPath"
                        },
                        "description": "(list)\n"
                    },
                    "allowedProcMountTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "allowedUnsafeSysctls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Annotations for PodSecurityPolicyTemplate object (map)\n"
                    },
                    "defaultAddCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "defaultAllowPrivilegeEscalation": {
                        "type": "boolean",
                        "description": "(list)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The PodSecurityPolicyTemplate description (string)\n"
                    },
                    "forbiddenSysctls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "fsGroup": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateFsGroup:getPodSecurityPolicyTemplateFsGroup",
                        "description": "(list maxitems:1)\n"
                    },
                    "hostIpc": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "hostNetwork": {
                        "type": "boolean"
                    },
                    "hostPid": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "hostPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateHostPort:getPodSecurityPolicyTemplateHostPort"
                        },
                        "description": "(list)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Labels for PodSecurityPolicyTemplate object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PodSecurityPolicyTemplate (string)\n"
                    },
                    "privileged": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "readOnlyRootFilesystem": {
                        "type": "boolean",
                        "description": "(bool)\n"
                    },
                    "requiredDropCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    },
                    "runAsGroup": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateRunAsGroup:getPodSecurityPolicyTemplateRunAsGroup",
                        "description": "(list maxitems:1)\n"
                    },
                    "runAsUser": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateRunAsUser:getPodSecurityPolicyTemplateRunAsUser",
                        "description": "(list maxitems:1)\n"
                    },
                    "runtimeClass": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateRuntimeClass:getPodSecurityPolicyTemplateRuntimeClass",
                        "description": "(list maxitems:1)\n"
                    },
                    "seLinux": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateSeLinux:getPodSecurityPolicyTemplateSeLinux",
                        "description": "(list maxitems:1)\n"
                    },
                    "supplementalGroup": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateSupplementalGroup:getPodSecurityPolicyTemplateSupplementalGroup",
                        "description": "(list maxitems:1)\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPodSecurityPolicyTemplate.\n",
                "properties": {
                    "allowPrivilegeEscalation": {
                        "type": "boolean"
                    },
                    "allowedCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allowedCsiDrivers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateAllowedCsiDriver:getPodSecurityPolicyTemplateAllowedCsiDriver"
                        }
                    },
                    "allowedFlexVolumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateAllowedFlexVolume:getPodSecurityPolicyTemplateAllowedFlexVolume"
                        }
                    },
                    "allowedHostPaths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateAllowedHostPath:getPodSecurityPolicyTemplateAllowedHostPath"
                        }
                    },
                    "allowedProcMountTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "allowedUnsafeSysctls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "defaultAddCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "defaultAllowPrivilegeEscalation": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "forbiddenSysctls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "fsGroup": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateFsGroup:getPodSecurityPolicyTemplateFsGroup"
                    },
                    "hostIpc": {
                        "type": "boolean"
                    },
                    "hostNetwork": {
                        "type": "boolean"
                    },
                    "hostPid": {
                        "type": "boolean"
                    },
                    "hostPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateHostPort:getPodSecurityPolicyTemplateHostPort"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "privileged": {
                        "type": "boolean"
                    },
                    "readOnlyRootFilesystem": {
                        "type": "boolean"
                    },
                    "requiredDropCapabilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "runAsGroup": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateRunAsGroup:getPodSecurityPolicyTemplateRunAsGroup"
                    },
                    "runAsUser": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateRunAsUser:getPodSecurityPolicyTemplateRunAsUser"
                    },
                    "runtimeClass": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateRuntimeClass:getPodSecurityPolicyTemplateRuntimeClass"
                    },
                    "seLinux": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateSeLinux:getPodSecurityPolicyTemplateSeLinux"
                    },
                    "supplementalGroup": {
                        "$ref": "#/types/rancher2:/getPodSecurityPolicyTemplateSupplementalGroup:getPodSecurityPolicyTemplateSupplementalGroup"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "allowPrivilegeEscalation",
                    "annotations",
                    "description",
                    "fsGroup",
                    "hostIpc",
                    "hostNetwork",
                    "hostPid",
                    "hostPorts",
                    "labels",
                    "name",
                    "privileged",
                    "readOnlyRootFilesystem",
                    "runAsUser",
                    "seLinux",
                    "supplementalGroup",
                    "volumes",
                    "id"
                ]
            }
        },
        "rancher2:index/getProject:getProject": {
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "ID of the Rancher 2 cluster (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The project name (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations of the rancher2 project (map)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "containerResourceLimit": {
                        "$ref": "#/types/rancher2:/getProjectContainerResourceLimit:getProjectContainerResourceLimit",
                        "description": "(Computed) Default containers resource limits on project (List maxitem:1)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) The project's description (string)\n"
                    },
                    "enableProjectMonitoring": {
                        "type": "boolean",
                        "description": "(Computed) Enable built-in project monitoring. Default `false` (bool)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels of the rancher2 project (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "podSecurityPolicyTemplateId": {
                        "type": "string",
                        "description": "(Computed) Default Pod Security Policy ID for the project (string)\n"
                    },
                    "resourceQuota": {
                        "$ref": "#/types/rancher2:/getProjectResourceQuota:getProjectResourceQuota",
                        "description": "(Computed) Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "(Computed) UUID of the project as stored by Rancher 2 (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "clusterId",
                    "containerResourceLimit",
                    "description",
                    "enableProjectMonitoring",
                    "labels",
                    "name",
                    "podSecurityPolicyTemplateId",
                    "resourceQuota",
                    "uuid",
                    "id"
                ]
            }
        },
        "rancher2:index/getProjectAlertGroup:getProjectAlertGroup": {
            "description": "Use this data source to retrieve information about a Rancher v2 project alert group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getProjectAlertGroup({\n    name: \"\u003cproject_alert_group_name\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_project_alert_group(name=\"\u003cproject_alert_group_name\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetProjectAlertGroup.InvokeAsync(new Rancher2.GetProjectAlertGroupArgs\n        {\n            Name = \"\u003cproject_alert_group_name\u003e\",\n            ProjectId = \"\u003cproject_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupProjectAlertGroup(ctx, \u0026rancher2.LookupProjectAlertGroupArgs{\n\t\t\tName:      \"\u003cproject_alert_group_name\u003e\",\n\t\t\tProjectId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectAlertGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The project alert group name (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where create project alert group (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectAlertGroup.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The project alert group annotations (map)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) The project alert group description (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "(Computed) The project alert group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "(Computed) The project alert group wait seconds. Default: `180` (int)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The project alert group labels (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getProjectAlertGroupRecipient:getProjectAlertGroupRecipient"
                        },
                        "description": "(Computed) The project alert group recipients (list)\n"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "(Computed) The project alert group wait seconds. Default: `3600` (int)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "description",
                    "groupIntervalSeconds",
                    "groupWaitSeconds",
                    "labels",
                    "name",
                    "projectId",
                    "recipients",
                    "repeatIntervalSeconds",
                    "id"
                ]
            }
        },
        "rancher2:index/getProjectAlertRule:getProjectAlertRule": {
            "description": "Use this data source to retrieve information about a Rancher v2 project alert rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getProjectAlertRule({\n    name: \"\u003cproject_alert_rule_name\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_project_alert_rule(name=\"\u003cproject_alert_rule_name\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetProjectAlertRule.InvokeAsync(new Rancher2.GetProjectAlertRuleArgs\n        {\n            Name = \"\u003cproject_alert_rule_name\u003e\",\n            ProjectId = \"\u003cproject_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupProjectAlertRule(ctx, \u0026rancher2.LookupProjectAlertRuleArgs{\n\t\t\tName:      \"\u003cproject_alert_rule_name\u003e\",\n\t\t\tProjectId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectAlertRule.\n",
                "properties": {
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The project alert rule labels (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The project alert rule name (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where create project alert rule (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectAlertRule.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The project alert rule annotations (map)\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "(Computed) The project alert rule alert group ID (string)\n"
                    },
                    "groupIntervalSeconds": {
                        "type": "integer",
                        "description": "(Computed) The project alert rule group interval seconds. Default: `180` (int)\n"
                    },
                    "groupWaitSeconds": {
                        "type": "integer",
                        "description": "(Computed) The project alert rule group wait seconds. Default: `180` (int)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inherited": {
                        "type": "boolean",
                        "description": "(Computed) The project alert rule inherited. Default: `true` (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) The project alert rule labels (map)\n"
                    },
                    "metricRule": {
                        "$ref": "#/types/rancher2:/getProjectAlertRuleMetricRule:getProjectAlertRuleMetricRule",
                        "description": "(Computed) The project alert rule metric rule. ConflictsWith: `\"pod_rule\", \"workload_rule\"`` (list Maxitems:1)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "podRule": {
                        "$ref": "#/types/rancher2:/getProjectAlertRulePodRule:getProjectAlertRulePodRule",
                        "description": "(Computed) The project alert rule pod rule. ConflictsWith: `\"metric_rule\", \"workload_rule\"`` (list Maxitems:1)\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "repeatIntervalSeconds": {
                        "type": "integer",
                        "description": "(Computed) The project alert rule wait seconds. Default: `3600` (int)\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "(Computed) The project alert rule severity. Supported values : `\"critical\" | \"info\" | \"warning\"`. Default: `critical` (string)\n"
                    },
                    "workloadRule": {
                        "$ref": "#/types/rancher2:/getProjectAlertRuleWorkloadRule:getProjectAlertRuleWorkloadRule",
                        "description": "(Computed) The project alert rule workload rule. ConflictsWith: `\"metric_rule\", \"pod_rule\"`` (list Maxitems:1)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "groupId",
                    "groupIntervalSeconds",
                    "groupWaitSeconds",
                    "inherited",
                    "metricRule",
                    "name",
                    "podRule",
                    "projectId",
                    "repeatIntervalSeconds",
                    "severity",
                    "workloadRule",
                    "id"
                ]
            }
        },
        "rancher2:index/getProjectLogging:getProjectLogging": {
            "description": "Use this data source to retrieve information about a Rancher v2 Project Logging.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getProjectLogging({\n    projectId: \"\u003cproject_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_project_logging(project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetProjectLogging.InvokeAsync(new Rancher2.GetProjectLoggingArgs\n        {\n            ProjectId = \"\u003cproject_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupProjectLogging(ctx, \u0026rancher2.LookupProjectLoggingArgs{\n\t\t\tProjectId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectLogging.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The project id to configure logging (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectLogging.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for Cluster Logging object (map)\n"
                    },
                    "customTargetConfig": {
                        "$ref": "#/types/rancher2:/getProjectLoggingCustomTargetConfig:getProjectLoggingCustomTargetConfig"
                    },
                    "elasticsearchConfig": {
                        "$ref": "#/types/rancher2:/getProjectLoggingElasticsearchConfig:getProjectLoggingElasticsearchConfig",
                        "description": "(Computed) The elasticsearch config for Cluster Logging. For `kind = elasticsearch`  (list maxitems:1)\n"
                    },
                    "enableJsonParsing": {
                        "type": "boolean"
                    },
                    "fluentdConfig": {
                        "$ref": "#/types/rancher2:/getProjectLoggingFluentdConfig:getProjectLoggingFluentdConfig",
                        "description": "(Computed) The fluentd config for Cluster Logging. For `kind = fluentd` (list maxitems:1)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kafkaConfig": {
                        "$ref": "#/types/rancher2:/getProjectLoggingKafkaConfig:getProjectLoggingKafkaConfig",
                        "description": "(Computed) The kafka config for Cluster Logging. For `kind = kafka` (list maxitems:1)\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Computed) The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for Cluster Logging object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the cluster logging config (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "(Computed) The namespace id from cluster logging (string)\n"
                    },
                    "outputFlushInterval": {
                        "type": "integer",
                        "description": "(Computed) How often buffered logs would be flushed. Default: `3` seconds (int)\n"
                    },
                    "outputTags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(computed) The output tags for Cluster Logging (map)\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "splunkConfig": {
                        "$ref": "#/types/rancher2:/getProjectLoggingSplunkConfig:getProjectLoggingSplunkConfig",
                        "description": "(Computed) The splunk config for Cluster Logging. For `kind = splunk` (list maxitems:1)\n"
                    },
                    "syslogConfig": {
                        "$ref": "#/types/rancher2:/getProjectLoggingSyslogConfig:getProjectLoggingSyslogConfig",
                        "description": "(Computed) The syslog config for Cluster Logging. For `kind = syslog` (list maxitems:1)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "customTargetConfig",
                    "elasticsearchConfig",
                    "enableJsonParsing",
                    "fluentdConfig",
                    "kafkaConfig",
                    "kind",
                    "labels",
                    "name",
                    "namespaceId",
                    "outputFlushInterval",
                    "outputTags",
                    "projectId",
                    "splunkConfig",
                    "syslogConfig",
                    "id"
                ]
            }
        },
        "rancher2:index/getProjectRoleTemplateBinding:getProjectRoleTemplateBinding": {
            "description": "Use this data source to retrieve information about a Rancher v2 project role template binding.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getProjectRoleTemplateBinding({\n    name: \"foo\",\n    projectId: \"foo_id\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_project_role_template_binding(name=\"foo\",\n    project_id=\"foo_id\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetProjectRoleTemplateBinding.InvokeAsync(new Rancher2.GetProjectRoleTemplateBindingArgs\n        {\n            Name = \"foo\",\n            ProjectId = \"foo_id\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupProjectRoleTemplateBinding(ctx, \u0026rancher2.LookupProjectRoleTemplateBindingArgs{\n\t\t\tName:      \"foo\",\n\t\t\tProjectId: \"foo_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectRoleTemplateBinding.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the project role template binding (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where bind project role template (string)\n"
                    },
                    "roleTemplateId": {
                        "type": "string",
                        "description": "The role template id from create project role template binding (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectRoleTemplateBinding.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "(Computed) The group ID to assign project role template binding (string)\n"
                    },
                    "groupPrincipalId": {
                        "type": "string",
                        "description": "(Computed) The group_principal ID to assign project role template binding (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "roleTemplateId": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string",
                        "description": "(Computed) The user ID to assign project role template binding (string)\n"
                    },
                    "userPrincipalId": {
                        "type": "string",
                        "description": "(Computed) The user_principal ID to assign project role template binding (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "groupId",
                    "groupPrincipalId",
                    "labels",
                    "name",
                    "projectId",
                    "roleTemplateId",
                    "userId",
                    "userPrincipalId",
                    "id"
                ]
            }
        },
        "rancher2:index/getRegistry:getRegistry": {
            "description": "Use this data source to retrieve information about a Rancher v2 docker registry.\n\nDepending of the availability, there are 2 types of Rancher v2 docker registries:\n- Project registry: Available to all namespaces in the `project_id`\n- Namespaced registry: Available to just `namespace_id` in the `project_id`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Project Registry\nconst foo = pulumi.output(rancher2.getRegistry({\n    name: \"\u003cname\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_registry(name=\"\u003cname\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetRegistry.InvokeAsync(new Rancher2.GetRegistryArgs\n        {\n            Name = \"\u003cname\u003e\",\n            ProjectId = \"\u003cproject_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupRegistry(ctx, \u0026rancher2.LookupRegistryArgs{\n\t\t\tName:      \"\u003cname\u003e\",\n\t\t\tProjectId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Namespaced Registry\nconst foo = pulumi.output(rancher2.getRegistry({\n    name: \"\u003cname\u003e\",\n    namespaceId: \"\u003cnamespace_id\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_registry(name=\"\u003cname\u003e\",\n    namespace_id=\"\u003cnamespace_id\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetRegistry.InvokeAsync(new Rancher2.GetRegistryArgs\n        {\n            Name = \"\u003cname\u003e\",\n            NamespaceId = \"\u003cnamespace_id\u003e\",\n            ProjectId = \"\u003cproject_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"\u003cnamespace_id\u003e\"\n\t\t_, err := rancher2.LookupRegistry(ctx, \u0026rancher2.LookupRegistryArgs{\n\t\t\tName:        \"\u003cname\u003e\",\n\t\t\tNamespaceId: \u0026opt0,\n\t\t\tProjectId:   \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistry.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the registry (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced registry (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the registry (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRegistry.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for Registry object (map)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) A registry description (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for Registry object (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getRegistryRegistry:getRegistryRegistry"
                        },
                        "description": "(Computed) Registries data for registry (list)\n"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "description",
                    "labels",
                    "name",
                    "projectId",
                    "registries",
                    "id"
                ]
            }
        },
        "rancher2:index/getRoleTempalte:getRoleTempalte": {
            "description": "Use this data source to retrieve information about a Rancher v2 role template resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getRoleTemplate({\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_role_template(name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetRoleTemplate.InvokeAsync(new Rancher2.GetRoleTemplateArgs\n        {\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.GetRoleTemplate(ctx, \u0026rancher2.GetRoleTemplateArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoleTempalte.\n",
                "properties": {
                    "context": {
                        "type": "string",
                        "description": "Role template context. `cluster` and `project` values are supported (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Template (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoleTempalte.\n",
                "properties": {
                    "administrative": {
                        "type": "boolean",
                        "description": "(Computed) Administrative role template (bool)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for role template object (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "(Computed) Builtin role template (string)\n"
                    },
                    "context": {
                        "type": "string"
                    },
                    "defaultRole": {
                        "type": "boolean",
                        "description": "(Computed) Default role template for new created cluster or project (bool)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) Role template description (string)\n"
                    },
                    "external": {
                        "type": "boolean",
                        "description": "(Computed) External role template (bool)\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "(Computed) Hidden role template (bool)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for role template object (map)\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "(Computed) Locked role template (bool)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "roleTemplateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) Inherit role template IDs (list)\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getRoleTempalteRule:getRoleTempalteRule"
                        },
                        "description": "(Computed) Role template policy rules (list)\n"
                    }
                },
                "type": "object",
                "required": [
                    "administrative",
                    "annotations",
                    "builtin",
                    "context",
                    "defaultRole",
                    "description",
                    "external",
                    "hidden",
                    "labels",
                    "locked",
                    "name",
                    "roleTemplateIds",
                    "rules",
                    "id"
                ]
            },
            "deprecationMessage": "rancher2.getRoleTempalte has been deprecated in favor of rancher2.getRoleTemplate"
        },
        "rancher2:index/getRoleTemplate:getRoleTemplate": {
            "description": "Use this data source to retrieve information about a Rancher v2 role template resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getRoleTemplate({\n    name: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_role_template(name=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetRoleTemplate.InvokeAsync(new Rancher2.GetRoleTemplateArgs\n        {\n            Name = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.GetRoleTemplate(ctx, \u0026rancher2.GetRoleTemplateArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRoleTemplate.\n",
                "properties": {
                    "context": {
                        "type": "string",
                        "description": "Role template context. `cluster` and `project` values are supported (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Template (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoleTemplate.\n",
                "properties": {
                    "administrative": {
                        "type": "boolean",
                        "description": "(Computed) Administrative role template (bool)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for role template object (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "(Computed) Builtin role template (string)\n"
                    },
                    "context": {
                        "type": "string"
                    },
                    "defaultRole": {
                        "type": "boolean",
                        "description": "(Computed) Default role template for new created cluster or project (bool)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) Role template description (string)\n"
                    },
                    "external": {
                        "type": "boolean",
                        "description": "(Computed) External role template (bool)\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "(Computed) Hidden role template (bool)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for role template object (map)\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "(Computed) Locked role template (bool)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "roleTemplateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) Inherit role template IDs (list)\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:/getRoleTemplateRule:getRoleTemplateRule"
                        },
                        "description": "(Computed) Role template policy rules (list)\n"
                    }
                },
                "type": "object",
                "required": [
                    "administrative",
                    "annotations",
                    "builtin",
                    "context",
                    "defaultRole",
                    "description",
                    "external",
                    "hidden",
                    "labels",
                    "locked",
                    "name",
                    "roleTemplateIds",
                    "rules",
                    "id"
                ]
            }
        },
        "rancher2:index/getSecret:getSecret": {
            "description": "Use this data source to retrieve information about a Rancher v2 secret.\n\nDepending of the availability, there are 2 types of Rancher v2 secrets:\n- Project secret: Available to all namespaces in the `project_id`\n- Namespaced secret: Available to just `namespace_id` in the `project_id`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Project Secret\nconst foo = pulumi.output(rancher2.getSecret({\n    name: \"\u003cname\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_secret(name=\"\u003cname\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetSecret.InvokeAsync(new Rancher2.GetSecretArgs\n        {\n            Name = \"\u003cname\u003e\",\n            ProjectId = \"\u003cproject_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupSecret(ctx, \u0026rancher2.LookupSecretArgs{\n\t\t\tName:      \"\u003cname\u003e\",\n\t\t\tProjectId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Namespaced Secret\nconst foo = pulumi.output(rancher2.getSecret({\n    name: \"\u003cname\u003e\",\n    namespaceId: \"\u003cnamespace_id\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_secret(name=\"\u003cname\u003e\",\n    namespace_id=\"\u003cnamespace_id\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetSecret.InvokeAsync(new Rancher2.GetSecretArgs\n        {\n            Name = \"\u003cname\u003e\",\n            NamespaceId = \"\u003cnamespace_id\u003e\",\n            ProjectId = \"\u003cproject_id\u003e\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"\u003cnamespace_id\u003e\"\n\t\t_, err := rancher2.LookupSecret(ctx, \u0026rancher2.LookupSecretArgs{\n\t\t\tName:        \"\u003cname\u003e\",\n\t\t\tNamespaceId: \u0026opt0,\n\t\t\tProjectId:   \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSecret.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the secret (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced secret (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the secret (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecret.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations for secret object (map)\n"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Secret key/value data. Base64 encoding required for values (map)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) A secret description (string)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels for secret object (map)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "data",
                    "description",
                    "labels",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "rancher2:index/getSetting:getSetting": {
            "description": "Use this data source to retrieve information about a Rancher v2 setting.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst server_image = pulumi.output(rancher2.getSetting({\n    name: \"server-image\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nserver_image = rancher2.get_setting(name=\"server-image\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var server_image = Output.Create(Rancher2.GetSetting.InvokeAsync(new Rancher2.GetSettingArgs\n        {\n            Name = \"server-image\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupSetting(ctx, \u0026rancher2.LookupSettingArgs{\n\t\t\tName: \"server-image\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSetting.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The setting name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSetting.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "description": "the settting's value.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "value",
                    "id"
                ]
            }
        },
        "rancher2:index/getUser:getUser": {
            "description": "Use this data source to retrieve information about a Rancher v2 user\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = pulumi.output(rancher2.getUser({\n    username: \"foo\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_user(username=\"foo\")\n```\n```csharp\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Rancher2.GetUser.InvokeAsync(new Rancher2.GetUserArgs\n        {\n            Username = \"foo\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"foo\"\n\t\t_, err := rancher2.LookupUser(ctx, \u0026rancher2.LookupUserArgs{\n\t\t\tUsername: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "isExternal": {
                        "type": "boolean",
                        "description": "Set is the user if the user is external. Default: `false` (bool)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user (string)\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user (string)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Computed) The user is enabled (bool)\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isExternal": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(Computed) Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The user common name (string)\n"
                    },
                    "principalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) The user principal IDs (list)\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "annotations",
                    "enabled",
                    "labels",
                    "name",
                    "principalIds",
                    "username",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "index": "index",
                "rancher2": "Rancher2"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing rancher2 resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-rancher2)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-rancher2` repo](https://github.com/pulumi/pulumi-rancher2/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-rancher2` repo](https://github.com/terraform-providers/terraform-provider-rancher2/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-rancher2)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-rancher2` repo](https://github.com/pulumi/pulumi-rancher2/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-rancher2` repo](https://github.com/terraform-providers/terraform-provider-rancher2/issues).",
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}