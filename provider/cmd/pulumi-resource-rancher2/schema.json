{
    "name": "rancher2",
    "description": "A Pulumi package for creating and managing rancher2 resources.",
    "keywords": [
        "pulumi",
        "rancher2"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`rancher2` Terraform Provider](https://github.com/rancher/terraform-provider-rancher2).",
    "repository": "https://github.com/pulumi/pulumi-rancher2",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing rancher2 resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rancher/terraform-provider-rancher2)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-rancher2` repo](https://github.com/pulumi/pulumi-rancher2/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-rancher2` repo](https://github.com/rancher/terraform-provider-rancher2/issues).",
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rancher/terraform-provider-rancher2)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-rancher2` repo](https://github.com/pulumi/pulumi-rancher2/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-rancher2` repo](https://github.com/rancher/terraform-provider-rancher2/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "API Key used to authenticate with the rancher server",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "description": "The URL to the rancher API"
            },
            "bootstrap": {
                "type": "boolean",
                "description": "Bootstrap rancher server",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RANCHER_BOOTSTRAP"
                    ]
                }
            },
            "caCerts": {
                "type": "string",
                "description": "CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false"
            },
            "insecure": {
                "type": "boolean",
                "description": "Allow insecure connections to Rancher. Mandatory if self signed tls and not\u003cspan pulumi-lang-nodejs=\" caCerts \" pulumi-lang-dotnet=\" CaCerts \" pulumi-lang-go=\" caCerts \" pulumi-lang-python=\" ca_certs \" pulumi-lang-yaml=\" caCerts \" pulumi-lang-java=\" caCerts \"\u003e ca_certs \u003c/span\u003eprovided",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RANCHER_INSECURE"
                    ]
                }
            },
            "retries": {
                "type": "integer",
                "description": "Rancher connection retries",
                "deprecationMessage": "Use timeout instead"
            },
            "secretKey": {
                "type": "string",
                "description": "API secret used to authenticate with the rancher server",
                "secret": true
            },
            "timeout": {
                "type": "string",
                "description": "Rancher connection timeout (retry every 5s). Golang duration format, ex: \"60s\""
            },
            "tokenKey": {
                "type": "string",
                "description": "API token used to authenticate with the rancher server",
                "secret": true
            }
        },
        "defaults": [
            "apiUrl",
            "retries"
        ]
    },
    "types": {
        "rancher2:index/CloudCredentialAmazonec2CredentialConfig:CloudCredentialAmazonec2CredentialConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS Access Key\n",
                    "secret": true
                },
                "defaultRegion": {
                    "type": "string",
                    "description": "AWS default region\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "AWS Secret Key\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "secretKey"
            ]
        },
        "rancher2:index/CloudCredentialAzureCredentialConfig:CloudCredentialAzureCredentialConfig": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Azure Service Principal Account ID\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Azure Service Principal Account password\n",
                    "secret": true
                },
                "environment": {
                    "type": "string",
                    "description": "Azure environment (e.g. AzurePublicCloud, AzureChinaCloud)\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID\n",
                    "secret": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure Tenant ID\n"
                }
            },
            "type": "object",
            "required": [
                "clientId",
                "clientSecret",
                "subscriptionId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clientId",
                        "clientSecret",
                        "environment",
                        "subscriptionId",
                        "tenantId"
                    ]
                }
            }
        },
        "rancher2:index/CloudCredentialDigitaloceanCredentialConfig:CloudCredentialDigitaloceanCredentialConfig": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Digital Ocean access token\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessToken"
            ]
        },
        "rancher2:index/CloudCredentialGoogleCredentialConfig:CloudCredentialGoogleCredentialConfig": {
            "properties": {
                "authEncodedJson": {
                    "type": "string",
                    "description": "Google auth encoded json\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "authEncodedJson"
            ]
        },
        "rancher2:index/CloudCredentialHarvesterCredentialConfig:CloudCredentialHarvesterCredentialConfig": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of imported Harvester cluster\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "Harvester cluster type. must be imported or external\n"
                },
                "kubeconfigContent": {
                    "type": "string",
                    "description": "Harvester cluster kubeconfig content\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "clusterType",
                "kubeconfigContent"
            ]
        },
        "rancher2:index/CloudCredentialLinodeCredentialConfig:CloudCredentialLinodeCredentialConfig": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Linode API token\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "token"
            ]
        },
        "rancher2:index/CloudCredentialOpenstackCredentialConfig:CloudCredentialOpenstackCredentialConfig": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "OpenStack password\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "rancher2:index/CloudCredentialS3CredentialConfig:CloudCredentialS3CredentialConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS Access Key\n",
                    "secret": true
                },
                "defaultBucket": {
                    "type": "string",
                    "description": "AWS default bucket\n"
                },
                "defaultEndpoint": {
                    "type": "string",
                    "description": "AWS default endpoint\n"
                },
                "defaultEndpointCa": {
                    "type": "string",
                    "description": "AWS default endpoint CA\n",
                    "secret": true
                },
                "defaultFolder": {
                    "type": "string",
                    "description": "AWS default folder\n"
                },
                "defaultRegion": {
                    "type": "string",
                    "description": "AWS default region\n"
                },
                "defaultSkipSslVerify": {
                    "type": "boolean",
                    "description": "AWS default skip ssl verify\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "AWS Secret Key\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "secretKey"
            ]
        },
        "rancher2:index/CloudCredentialVsphereCredentialConfig:CloudCredentialVsphereCredentialConfig": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "vSphere password\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "vSphere username\n"
                },
                "vcenter": {
                    "type": "string",
                    "description": "vSphere IP/hostname for vCenter\n"
                },
                "vcenterPort": {
                    "type": "string",
                    "description": "vSphere Port for vCenter\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username",
                "vcenter"
            ]
        },
        "rancher2:index/ClusterAgentEnvVar:ClusterAgentEnvVar": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The GKE taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "rancher2:index/ClusterAksConfigV2:ClusterAksConfigV2": {
            "properties": {
                "authBaseUrl": {
                    "type": "string",
                    "description": "The AKS auth base url\n"
                },
                "authorizedIpRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AKS authorized ip ranges\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "The AKS base url\n"
                },
                "cloudCredentialId": {
                    "type": "string",
                    "description": "The AKS Cloud Credential ID to use\n"
                },
                "dnsPrefix": {
                    "type": "string",
                    "description": "The AKS dns prefix. Required if `import=false`\n",
                    "willReplaceOnChanges": true
                },
                "httpApplicationRouting": {
                    "type": "boolean",
                    "description": "Enable AKS http application routing?\n"
                },
                "imported": {
                    "type": "boolean",
                    "description": "Is AKS cluster imported?\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The kubernetes master version. Required if `import=false`\n"
                },
                "linuxAdminUsername": {
                    "type": "string",
                    "description": "The AKS linux admin username\n"
                },
                "linuxSshPublicKey": {
                    "type": "string",
                    "description": "The AKS linux ssh public key\n"
                },
                "loadBalancerSku": {
                    "type": "string",
                    "description": "The AKS load balancer sku\n"
                },
                "logAnalyticsWorkspaceGroup": {
                    "type": "string",
                    "description": "The AKS log analytics workspace group\n"
                },
                "logAnalyticsWorkspaceName": {
                    "type": "string",
                    "description": "The AKS log analytics workspace name\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Is AKS cluster monitoring enabled?\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "networkDnsServiceIp": {
                    "type": "string",
                    "description": "The AKS network dns service ip\n"
                },
                "networkDockerBridgeCidr": {
                    "type": "string",
                    "description": "The AKS network docker bridge cidr\n"
                },
                "networkPlugin": {
                    "type": "string",
                    "description": "The AKS network plugin. Required if `import=false`\n"
                },
                "networkPodCidr": {
                    "type": "string",
                    "description": "The AKS network pod cidr\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "The AKS network policy\n"
                },
                "networkServiceCidr": {
                    "type": "string",
                    "description": "The AKS network service cidr\n"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterAksConfigV2NodePool:ClusterAksConfigV2NodePool"
                    },
                    "description": "The AKS node pools to use. Required if `import=false`\n"
                },
                "nodeResourceGroup": {
                    "type": "string",
                    "description": "The AKS node resource group name\n"
                },
                "outboundType": {
                    "type": "string",
                    "description": "The AKS outbound type for the egress traffic\n"
                },
                "privateCluster": {
                    "type": "boolean",
                    "description": "Is AKS cluster private?\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The AKS resource group\n"
                },
                "resourceLocation": {
                    "type": "string",
                    "description": "The AKS resource location\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The AKS subnet\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The AKS cluster tags\n"
                },
                "virtualNetwork": {
                    "type": "string",
                    "description": "The AKS virtual network\n"
                },
                "virtualNetworkResourceGroup": {
                    "type": "string",
                    "description": "The AKS virtual network resource group\n"
                }
            },
            "type": "object",
            "required": [
                "cloudCredentialId",
                "resourceGroup",
                "resourceLocation"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cloudCredentialId",
                        "httpApplicationRouting",
                        "linuxAdminUsername",
                        "linuxSshPublicKey",
                        "loadBalancerSku",
                        "logAnalyticsWorkspaceGroup",
                        "logAnalyticsWorkspaceName",
                        "monitoring",
                        "name",
                        "networkDnsServiceIp",
                        "networkDockerBridgeCidr",
                        "networkPodCidr",
                        "networkPolicy",
                        "networkServiceCidr",
                        "nodeResourceGroup",
                        "privateCluster",
                        "resourceGroup",
                        "resourceLocation",
                        "subnet",
                        "tags",
                        "virtualNetwork",
                        "virtualNetworkResourceGroup"
                    ]
                }
            }
        },
        "rancher2:index/ClusterAksConfigV2NodePool:ClusterAksConfigV2NodePool": {
            "properties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AKS node pool availability zones\n"
                },
                "count": {
                    "type": "integer",
                    "description": "The AKS node pool count\n"
                },
                "enableAutoScaling": {
                    "type": "boolean",
                    "description": "Is AKS node pool auto scaling enabled?\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster (map)\n"
                },
                "maxCount": {
                    "type": "integer",
                    "description": "The AKS node pool max count\n"
                },
                "maxPods": {
                    "type": "integer",
                    "description": "The AKS node pool max pods\n"
                },
                "maxSurge": {
                    "type": "string",
                    "description": "The AKS node pool max surge\n"
                },
                "minCount": {
                    "type": "integer",
                    "description": "The AKS node pool min count\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The AKS node pool mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "orchestratorVersion": {
                    "type": "string",
                    "description": "The AKS node pool orchestrator version\n"
                },
                "osDiskSizeGb": {
                    "type": "integer",
                    "description": "The AKS node pool os disk size gb\n"
                },
                "osDiskType": {
                    "type": "string",
                    "description": "The AKS node pool os disk type\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Enable AKS node pool os type\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AKS node pool taints\n"
                },
                "vmSize": {
                    "type": "string",
                    "description": "The AKS node pool vm size\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labels",
                        "name",
                        "taints",
                        "vmSize"
                    ]
                }
            }
        },
        "rancher2:index/ClusterClusterAgentDeploymentCustomization:ClusterClusterAgentDeploymentCustomization": {
            "properties": {
                "appendTolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterClusterAgentDeploymentCustomizationAppendToleration:ClusterClusterAgentDeploymentCustomizationAppendToleration"
                    },
                    "description": "User defined tolerations to append to agent\n"
                },
                "overrideAffinity": {
                    "type": "string",
                    "description": "User defined affinity to override default agent affinity\n"
                },
                "overrideResourceRequirements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirement:ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirement"
                    },
                    "description": "User defined resource requirements to set on the agent\n"
                },
                "schedulingCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterClusterAgentDeploymentCustomizationSchedulingCustomization:ClusterClusterAgentDeploymentCustomizationSchedulingCustomization"
                    },
                    "description": "User defined scheduling customization for the cattle cluster agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterClusterAgentDeploymentCustomizationAppendToleration:ClusterClusterAgentDeploymentCustomizationAppendToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The GKE taint effect (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The GKE taint key (string)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)\n"
                },
                "seconds": {
                    "type": "integer",
                    "description": "The toleration seconds (int)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The GKE taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirement:ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirement": {
            "properties": {
                "cpuLimit": {
                    "type": "string",
                    "description": "The maximum CPU limit for agent\n"
                },
                "cpuRequest": {
                    "type": "string",
                    "description": "The minimum CPU required for agent\n"
                },
                "memoryLimit": {
                    "type": "string",
                    "description": "The maximum memory limit for agent\n"
                },
                "memoryRequest": {
                    "type": "string",
                    "description": "The minimum memory required for agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterClusterAgentDeploymentCustomizationSchedulingCustomization:ClusterClusterAgentDeploymentCustomizationSchedulingCustomization": {
            "properties": {
                "podDisruptionBudgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget:ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget"
                    },
                    "description": "The Pod Disruption Budget created for the cattle cluster agent\n"
                },
                "priorityClasses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass:ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass"
                    },
                    "description": "The Priority Class created for the cattle cluster agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget:ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget": {
            "properties": {
                "maxUnavailable": {
                    "type": "string",
                    "description": "The maximum number of cattle cluster agent replicas that can be down at a given time.\n"
                },
                "minAvailable": {
                    "type": "string",
                    "description": "The minimum number of cattle cluster agent replicas that must be running at a given time.\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass:ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass": {
            "properties": {
                "preemptionPolicy": {
                    "type": "string",
                    "description": "The preemption behavior for the cattle cluster agent. Must be either 'PreemptLowerPriority' or 'Never'\n"
                },
                "value": {
                    "type": "integer",
                    "description": "The priority value for the cattle cluster agent. Must be between negative 1 billion and 1 billion.\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "rancher2:index/ClusterClusterAuthEndpoint:ClusterClusterAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string",
                    "description": "CA certs for the authorized cluster endpoint (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the authorized cluster endpoint. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "FQDN for the authorized cluster endpoint (string)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterClusterRegistrationToken:ClusterClusterRegistrationToken": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Cluster (map)\n"
                },
                "clusterId": {
                    "type": "string"
                },
                "command": {
                    "type": "string",
                    "description": "Command to execute in a imported k8s cluster (string)\n"
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n"
                },
                "insecureCommand": {
                    "type": "string",
                    "description": "Insecure command to execute in a imported k8s cluster (string)\n"
                },
                "insecureNodeCommand": {
                    "type": "string",
                    "description": "Insecure node command to execute in a imported k8s cluster (string)\n"
                },
                "insecureWindowsNodeCommand": {
                    "type": "string",
                    "description": "Insecure windows command to execute in a imported k8s cluster (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster (map)\n"
                },
                "manifestUrl": {
                    "type": "string",
                    "description": "K8s manifest url to execute with \u003cspan pulumi-lang-nodejs=\"`kubectl`\" pulumi-lang-dotnet=\"`Kubectl`\" pulumi-lang-go=\"`kubectl`\" pulumi-lang-python=\"`kubectl`\" pulumi-lang-yaml=\"`kubectl`\" pulumi-lang-java=\"`kubectl`\"\u003e`kubectl`\u003c/span\u003e to import an existing k8s cluster (string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "nodeCommand": {
                    "type": "string",
                    "description": "Node command to execute in linux nodes for custom k8s cluster (string)\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "windowsNodeCommand": {
                    "type": "string",
                    "description": "Node command to execute in windows nodes for custom k8s cluster (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "clusterId",
                        "command",
                        "id",
                        "insecureCommand",
                        "insecureNodeCommand",
                        "insecureWindowsNodeCommand",
                        "labels",
                        "manifestUrl",
                        "name",
                        "nodeCommand",
                        "token",
                        "windowsNodeCommand"
                    ]
                }
            }
        },
        "rancher2:index/ClusterClusterTemplateAnswers:ClusterClusterTemplateAnswers": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID for answer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID for answer\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key/values for answer\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterId",
                        "projectId",
                        "values"
                    ]
                }
            }
        },
        "rancher2:index/ClusterClusterTemplateQuestion:ClusterClusterTemplateQuestion": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "Default variable value\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Required variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Variable type\n"
                },
                "variable": {
                    "type": "string",
                    "description": "Variable name\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "variable"
            ]
        },
        "rancher2:index/ClusterEksConfigV2:ClusterEksConfigV2": {
            "properties": {
                "cloudCredentialId": {
                    "type": "string",
                    "description": "The AWS Cloud Credential ID to use\n"
                },
                "imported": {
                    "type": "boolean",
                    "description": "Is EKS cluster imported?\n"
                },
                "kmsKey": {
                    "type": "string",
                    "description": "The AWS kms key to use\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The kubernetes master version\n"
                },
                "loggingTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AWS logging types\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "nodeGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterEksConfigV2NodeGroup:ClusterEksConfigV2NodeGroup"
                    },
                    "description": "The AWS node groups to use\n"
                },
                "privateAccess": {
                    "type": "boolean",
                    "description": "The EKS cluster has private access\n"
                },
                "publicAccess": {
                    "type": "boolean",
                    "description": "The EKS cluster has public access\n"
                },
                "publicAccessSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The EKS cluster public access sources\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS Region to create the EKS cluster in\n"
                },
                "secretsEncryption": {
                    "type": "boolean",
                    "description": "Enable EKS cluster secret encryption\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups to use for the cluster\n"
                },
                "serviceRole": {
                    "type": "string",
                    "description": "The AWS service role to use\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subnets in the virtual network to use\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The EKS cluster tags\n"
                }
            },
            "type": "object",
            "required": [
                "cloudCredentialId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cloudCredentialId",
                        "kubernetesVersion",
                        "name",
                        "nodeGroups",
                        "privateAccess",
                        "publicAccess",
                        "publicAccessSources",
                        "secretsEncryption"
                    ]
                }
            }
        },
        "rancher2:index/ClusterEksConfigV2NodeGroup:ClusterEksConfigV2NodeGroup": {
            "properties": {
                "desiredSize": {
                    "type": "integer",
                    "description": "The EKS node group desired size\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The EKS node group disk size\n"
                },
                "ec2SshKey": {
                    "type": "string",
                    "description": "The EKS node group ssh key\n"
                },
                "gpu": {
                    "type": "boolean",
                    "description": "Is EKS cluster using gpu?\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The EKS node group image ID\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The EKS node group instance type\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster (map)\n"
                },
                "launchTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterEksConfigV2NodeGroupLaunchTemplate:ClusterEksConfigV2NodeGroupLaunchTemplate"
                    },
                    "description": "The EKS node groups launch template\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The EKS node group maximum size\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The EKS node group minimum size\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "nodeRole": {
                    "type": "string",
                    "description": "The EKS node group node role ARN\n"
                },
                "requestSpotInstances": {
                    "type": "boolean",
                    "description": "Enable EKS node group request spot instances\n"
                },
                "resourceTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The EKS node group resource tags\n"
                },
                "spotInstanceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The EKS node group spot instance types\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The EKS node group subnets\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The EKS node group tags\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The EKS node group user data\n"
                },
                "version": {
                    "type": "string",
                    "description": "The EKS node group k8s version\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "subnets",
                        "userData",
                        "version"
                    ]
                }
            }
        },
        "rancher2:index/ClusterEksConfigV2NodeGroupLaunchTemplate:ClusterEksConfigV2NodeGroupLaunchTemplate": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "version": {
                    "type": "integer",
                    "description": "The EKS node group launch template version\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "version"
            ]
        },
        "rancher2:index/ClusterFleetAgentDeploymentCustomization:ClusterFleetAgentDeploymentCustomization": {
            "properties": {
                "appendTolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterFleetAgentDeploymentCustomizationAppendToleration:ClusterFleetAgentDeploymentCustomizationAppendToleration"
                    },
                    "description": "User defined tolerations to append to agent\n"
                },
                "overrideAffinity": {
                    "type": "string",
                    "description": "User defined affinity to override default agent affinity\n"
                },
                "overrideResourceRequirements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirement:ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirement"
                    },
                    "description": "User defined resource requirements to set on the agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterFleetAgentDeploymentCustomizationAppendToleration:ClusterFleetAgentDeploymentCustomizationAppendToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The GKE taint effect (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The GKE taint key (string)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)\n"
                },
                "seconds": {
                    "type": "integer",
                    "description": "The toleration seconds (int)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The GKE taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirement:ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirement": {
            "properties": {
                "cpuLimit": {
                    "type": "string",
                    "description": "The maximum CPU limit for agent\n"
                },
                "cpuRequest": {
                    "type": "string",
                    "description": "The minimum CPU required for agent\n"
                },
                "memoryLimit": {
                    "type": "string",
                    "description": "The maximum memory limit for agent\n"
                },
                "memoryRequest": {
                    "type": "string",
                    "description": "The minimum memory required for agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterGkeConfigV2:ClusterGkeConfigV2": {
            "properties": {
                "clusterAddons": {
                    "$ref": "#/types/rancher2:index/ClusterGkeConfigV2ClusterAddons:ClusterGkeConfigV2ClusterAddons",
                    "description": "The GKE cluster addons\n"
                },
                "clusterIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE ip v4 cidr block\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for Cluster (string)\n"
                },
                "enableKubernetesAlpha": {
                    "type": "boolean",
                    "description": "Enable Kubernetes alpha\n"
                },
                "googleCredentialSecret": {
                    "type": "string",
                    "description": "Google credential secret\n",
                    "secret": true
                },
                "imported": {
                    "type": "boolean",
                    "description": "Is GKE cluster imported?\n"
                },
                "ipAllocationPolicy": {
                    "$ref": "#/types/rancher2:index/ClusterGkeConfigV2IpAllocationPolicy:ClusterGkeConfigV2IpAllocationPolicy",
                    "description": "The GKE ip allocation policy\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The kubernetes master version\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster (map)\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The GKE cluster locations\n"
                },
                "loggingService": {
                    "type": "string",
                    "description": "The GKE cluster logging service\n"
                },
                "maintenanceWindow": {
                    "type": "string",
                    "description": "The GKE cluster maintenance window\n"
                },
                "masterAuthorizedNetworksConfig": {
                    "$ref": "#/types/rancher2:index/ClusterGkeConfigV2MasterAuthorizedNetworksConfig:ClusterGkeConfigV2MasterAuthorizedNetworksConfig",
                    "description": "The GKE cluster master authorized networks config\n"
                },
                "monitoringService": {
                    "type": "string",
                    "description": "The GKE cluster monitoring service\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "network": {
                    "type": "string",
                    "description": "The GKE cluster network\n"
                },
                "networkPolicyEnabled": {
                    "type": "boolean",
                    "description": "Is GKE cluster network policy enabled?\n"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterGkeConfigV2NodePool:ClusterGkeConfigV2NodePool"
                    },
                    "description": "The GKE cluster node pools\n"
                },
                "privateClusterConfig": {
                    "$ref": "#/types/rancher2:index/ClusterGkeConfigV2PrivateClusterConfig:ClusterGkeConfigV2PrivateClusterConfig",
                    "description": "The GKE private cluster config\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GKE project id\n"
                },
                "region": {
                    "type": "string",
                    "description": "The GKE cluster region. Required if \u003cspan pulumi-lang-nodejs=\"`zone`\" pulumi-lang-dotnet=\"`Zone`\" pulumi-lang-go=\"`zone`\" pulumi-lang-python=\"`zone`\" pulumi-lang-yaml=\"`zone`\" pulumi-lang-java=\"`zone`\"\u003e`zone`\u003c/span\u003e is empty\n"
                },
                "subnetwork": {
                    "type": "string",
                    "description": "The GKE cluster subnetwork\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The GKE cluster zone. Required if \u003cspan pulumi-lang-nodejs=\"`region`\" pulumi-lang-dotnet=\"`Region`\" pulumi-lang-go=\"`region`\" pulumi-lang-python=\"`region`\" pulumi-lang-yaml=\"`region`\" pulumi-lang-java=\"`region`\"\u003e`region`\u003c/span\u003e is empty\n"
                }
            },
            "type": "object",
            "required": [
                "googleCredentialSecret",
                "name",
                "projectId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterAddons",
                        "clusterIpv4CidrBlock",
                        "description",
                        "enableKubernetesAlpha",
                        "googleCredentialSecret",
                        "ipAllocationPolicy",
                        "kubernetesVersion",
                        "labels",
                        "locations",
                        "loggingService",
                        "maintenanceWindow",
                        "masterAuthorizedNetworksConfig",
                        "monitoringService",
                        "name",
                        "network",
                        "networkPolicyEnabled",
                        "nodePools",
                        "privateClusterConfig",
                        "projectId",
                        "region",
                        "subnetwork",
                        "zone"
                    ]
                }
            }
        },
        "rancher2:index/ClusterGkeConfigV2ClusterAddons:ClusterGkeConfigV2ClusterAddons": {
            "properties": {
                "horizontalPodAutoscaling": {
                    "type": "boolean",
                    "description": "Enable GKE horizontal pod autoscaling\n"
                },
                "httpLoadBalancing": {
                    "type": "boolean",
                    "description": "Enable GKE HTTP load balancing\n"
                },
                "networkPolicyConfig": {
                    "type": "boolean",
                    "description": "Enable GKE network policy config\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "horizontalPodAutoscaling",
                        "httpLoadBalancing",
                        "networkPolicyConfig"
                    ]
                }
            }
        },
        "rancher2:index/ClusterGkeConfigV2IpAllocationPolicy:ClusterGkeConfigV2IpAllocationPolicy": {
            "properties": {
                "clusterIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE cluster ip v4 allocation cidr block\n"
                },
                "clusterSecondaryRangeName": {
                    "type": "string",
                    "description": "The GKE cluster ip v4 allocation secondary range name\n"
                },
                "createSubnetwork": {
                    "type": "boolean",
                    "description": "Create GKE subnetwork?\n"
                },
                "nodeIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE node ip v4 allocation cidr block\n"
                },
                "servicesIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE services ip v4 allocation cidr block\n"
                },
                "servicesSecondaryRangeName": {
                    "type": "string",
                    "description": "The GKE services ip v4 allocation secondary range name\n"
                },
                "subnetworkName": {
                    "type": "string",
                    "description": "The GKE cluster subnetwork name\n"
                },
                "useIpAliases": {
                    "type": "boolean",
                    "description": "Use GKE ip aliases?\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterIpv4CidrBlock",
                        "clusterSecondaryRangeName",
                        "createSubnetwork",
                        "nodeIpv4CidrBlock",
                        "servicesIpv4CidrBlock",
                        "servicesSecondaryRangeName",
                        "subnetworkName",
                        "useIpAliases"
                    ]
                }
            }
        },
        "rancher2:index/ClusterGkeConfigV2MasterAuthorizedNetworksConfig:ClusterGkeConfigV2MasterAuthorizedNetworksConfig": {
            "properties": {
                "cidrBlocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlock:ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlock"
                    },
                    "description": "The GKE master authorized network config cidr blocks\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable GKE master authorized network config\n"
                }
            },
            "type": "object",
            "required": [
                "cidrBlocks"
            ]
        },
        "rancher2:index/ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlock:ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlock": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The GKE master authorized network config cidr block\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The GKE master authorized network config cidr block dispaly name\n"
                }
            },
            "type": "object",
            "required": [
                "cidrBlock"
            ]
        },
        "rancher2:index/ClusterGkeConfigV2NodePool:ClusterGkeConfigV2NodePool": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/rancher2:index/ClusterGkeConfigV2NodePoolAutoscaling:ClusterGkeConfigV2NodePoolAutoscaling",
                    "description": "The GKE node pool config autoscaling\n"
                },
                "config": {
                    "$ref": "#/types/rancher2:index/ClusterGkeConfigV2NodePoolConfig:ClusterGkeConfigV2NodePoolConfig",
                    "description": "The GKE node pool node config\n"
                },
                "initialNodeCount": {
                    "type": "integer",
                    "description": "The GKE node pool config initial node count\n"
                },
                "management": {
                    "$ref": "#/types/rancher2:index/ClusterGkeConfigV2NodePoolManagement:ClusterGkeConfigV2NodePoolManagement",
                    "description": "The GKE node pool config management\n"
                },
                "maxPodsConstraint": {
                    "type": "integer",
                    "description": "The GKE node pool config max pods constraint\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "version": {
                    "type": "string",
                    "description": "The GKE node pool config version\n"
                }
            },
            "type": "object",
            "required": [
                "initialNodeCount",
                "name",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoscaling",
                        "config",
                        "initialNodeCount",
                        "management",
                        "maxPodsConstraint",
                        "name",
                        "version"
                    ]
                }
            }
        },
        "rancher2:index/ClusterGkeConfigV2NodePoolAutoscaling:ClusterGkeConfigV2NodePoolAutoscaling": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable GKE node pool config autoscaling\n"
                },
                "maxNodeCount": {
                    "type": "integer",
                    "description": "The GKE node pool config max node count\n"
                },
                "minNodeCount": {
                    "type": "integer",
                    "description": "The GKE node pool config min node count\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxNodeCount",
                        "minNodeCount"
                    ]
                }
            }
        },
        "rancher2:index/ClusterGkeConfigV2NodePoolConfig:ClusterGkeConfigV2NodePoolConfig": {
            "properties": {
                "diskSizeGb": {
                    "type": "integer",
                    "description": "The GKE node config disk size (Gb)\n"
                },
                "diskType": {
                    "type": "string",
                    "description": "The GKE node config disk type\n"
                },
                "imageType": {
                    "type": "string",
                    "description": "The GKE node config image type\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster (map)\n"
                },
                "localSsdCount": {
                    "type": "integer",
                    "description": "The GKE node config local ssd count\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "The GKE node config machine type\n"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The GKE node config oauth scopes\n"
                },
                "preemptible": {
                    "type": "boolean",
                    "description": "Enable GKE node config preemptible\n"
                },
                "serviceAccount": {
                    "type": "string",
                    "description": "The GKE node config service account\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The GKE node config tags\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterGkeConfigV2NodePoolConfigTaint:ClusterGkeConfigV2NodePoolConfigTaint"
                    },
                    "description": "The GKE node config taints\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labels",
                        "oauthScopes",
                        "tags"
                    ]
                }
            }
        },
        "rancher2:index/ClusterGkeConfigV2NodePoolConfigTaint:ClusterGkeConfigV2NodePoolConfigTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The GKE taint effect (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The GKE taint key (string)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The GKE taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ]
        },
        "rancher2:index/ClusterGkeConfigV2NodePoolManagement:ClusterGkeConfigV2NodePoolManagement": {
            "properties": {
                "autoRepair": {
                    "type": "boolean",
                    "description": "Enable GKE node pool config management auto repair\n"
                },
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Enable GKE node pool config management auto upgrade\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoRepair",
                        "autoUpgrade"
                    ]
                }
            }
        },
        "rancher2:index/ClusterGkeConfigV2PrivateClusterConfig:ClusterGkeConfigV2PrivateClusterConfig": {
            "properties": {
                "enablePrivateEndpoint": {
                    "type": "boolean",
                    "description": "Enable GKE cluster private endpoint\n"
                },
                "enablePrivateNodes": {
                    "type": "boolean",
                    "description": "Enable GKE cluster private nodes\n"
                },
                "masterIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE cluster private master ip v4 cidr block\n"
                }
            },
            "type": "object",
            "required": [
                "masterIpv4CidrBlock"
            ]
        },
        "rancher2:index/ClusterImportedConfig:ClusterImportedConfig": {
            "properties": {
                "privateRegistryUrl": {
                    "type": "string",
                    "description": "Private registry URL\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateRegistryUrl"
                    ]
                }
            }
        },
        "rancher2:index/ClusterK3sConfig:ClusterK3sConfig": {
            "properties": {
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterK3sConfigUpgradeStrategy:ClusterK3sConfigUpgradeStrategy",
                    "description": "The K3S upgrade strategy\n"
                },
                "version": {
                    "type": "string",
                    "description": "The K3S kubernetes version\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "upgradeStrategy",
                        "version"
                    ]
                }
            }
        },
        "rancher2:index/ClusterK3sConfigUpgradeStrategy:ClusterK3sConfigUpgradeStrategy": {
            "properties": {
                "drainServerNodes": {
                    "type": "boolean",
                    "description": "Drain server nodes\n"
                },
                "drainWorkerNodes": {
                    "type": "boolean",
                    "description": "Drain worker nodes\n"
                },
                "serverConcurrency": {
                    "type": "integer",
                    "description": "Server concurrency\n"
                },
                "workerConcurrency": {
                    "type": "integer",
                    "description": "Worker concurrency\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterOkeConfig:ClusterOkeConfig": {
            "properties": {
                "clusterType": {
                    "type": "string",
                    "description": "Optionally specify a cluster type of basic or enhanced\n"
                },
                "compartmentId": {
                    "type": "string",
                    "description": "The OCID of the compartment in which to create resources (VCN, worker nodes, etc.)\n"
                },
                "controlPlaneSubnetName": {
                    "type": "string",
                    "description": "The (optional) name of a pre-existing subnet (public or private) for the Kubernetes API endpoint\n"
                },
                "customBootVolumeSize": {
                    "type": "integer",
                    "description": "An optional custom boot volume size (in GB) for the nodes\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for Cluster (string)\n"
                },
                "enableKubernetesDashboard": {
                    "type": "boolean",
                    "description": "Enable the kubernetes dashboard\n"
                },
                "enablePrivateControlPlane": {
                    "type": "boolean",
                    "description": "Whether Kubernetes API endpoint is a private IP only accessible from within the VCN\n"
                },
                "enablePrivateNodes": {
                    "type": "boolean",
                    "description": "Whether worker nodes are deployed into a new private subnet\n"
                },
                "evictionGraceDuration": {
                    "type": "string",
                    "description": "The optional grace period in minutes to allow cordon and drain to complete successfuly\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint corresponding to the specified user's private API Key\n"
                },
                "flexMemoryInGbs": {
                    "type": "integer",
                    "description": "Optional amount of memory in GB for nodes (requires flexible node_shape)\n"
                },
                "flexOcpus": {
                    "type": "integer",
                    "description": "Optional number of OCPUs for nodes (requires flexible node_shape)\n"
                },
                "forceDeleteAfterGraceDuration": {
                    "type": "boolean",
                    "description": "Whether to send a SIGKILL signal if a pod does not terminate within the specified grace period\n"
                },
                "imageVerificationKmsKeyId": {
                    "type": "string",
                    "description": "Optional specify a comma separated list of master encryption key OCID(s) to verify images\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "Optional specify the OCID of the KMS Vault master key\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The Kubernetes version that will be used for your master *and* worker nodes e.g. v1.33.1\n"
                },
                "limitNodeCount": {
                    "type": "integer",
                    "description": "Optional limit on the total number of nodes in the pool\n"
                },
                "loadBalancerSubnetName1": {
                    "type": "string",
                    "description": "The name of the first existing subnet to use for Kubernetes services / LB\n"
                },
                "loadBalancerSubnetName2": {
                    "type": "string",
                    "description": "The (optional) name of a second existing subnet to use for Kubernetes services / LB\n"
                },
                "nodeImage": {
                    "type": "string",
                    "description": "The OS for the node image\n"
                },
                "nodePoolDnsDomainName": {
                    "type": "string",
                    "description": "Optional name for DNS domain of node pool subnet\n"
                },
                "nodePoolSubnetName": {
                    "type": "string",
                    "description": "Optional pre-existing subnet (public or private) for nodes\n"
                },
                "nodePublicKeyContents": {
                    "type": "string",
                    "description": "The contents of the SSH public key file to use for the nodes\n"
                },
                "nodeShape": {
                    "type": "string",
                    "description": "The shape of the node (determines number of CPUs and  amount of memory on each node)\n"
                },
                "nodeUserDataContents": {
                    "type": "string",
                    "description": "The contents of custom cloud-init /\u003cspan pulumi-lang-nodejs=\" userData \" pulumi-lang-dotnet=\" UserData \" pulumi-lang-go=\" userData \" pulumi-lang-python=\" user_data \" pulumi-lang-yaml=\" userData \" pulumi-lang-java=\" userData \"\u003e user_data \u003c/span\u003efor the nodes - will be base64 encoded internally if it is not already\n"
                },
                "podCidr": {
                    "type": "string",
                    "description": "Optional specify the pod CIDR, defaults to 10.244.0.0/16\n"
                },
                "podNetwork": {
                    "type": "string",
                    "description": "Optional Pod Network plugin. Choose flannel or native. Defaults to flannel\n"
                },
                "podSubnetName": {
                    "type": "string",
                    "description": "The (optional) name of a pre-existing subnet that pods will be assigned IPs from when using native pod networking\n"
                },
                "privateKeyContents": {
                    "type": "string",
                    "description": "The private API key file contents for the specified user, in PEM format\n",
                    "secret": true
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "The passphrase of the private key for the OKE cluster\n",
                    "secret": true
                },
                "quantityOfNodeSubnets": {
                    "type": "integer",
                    "description": "Number of node subnets (defaults to creating 1 regional subnet)\n"
                },
                "quantityPerSubnet": {
                    "type": "integer",
                    "description": "Number of worker nodes in each subnet / availability domain\n"
                },
                "region": {
                    "type": "string",
                    "description": "The availability domain within the region to host the OKE cluster\n"
                },
                "serviceCidr": {
                    "type": "string",
                    "description": "Optional specify the service CIDR, defaults to 10.96.0.0/16\n"
                },
                "serviceDnsDomainName": {
                    "type": "string",
                    "description": "Optional name for DNS domain of service subnet\n"
                },
                "skipVcnDelete": {
                    "type": "boolean",
                    "description": "Whether to skip deleting VCN\n"
                },
                "tenancyId": {
                    "type": "string",
                    "description": "The OCID of the tenancy in which to create resources\n"
                },
                "userOcid": {
                    "type": "string",
                    "description": "The OCID of a user who has access to the tenancy/compartment\n"
                },
                "vcnCompartmentId": {
                    "type": "string",
                    "description": "The OCID of the compartment (if different from compartment_id) in which to find the pre-existing virtual network set with vcn_name.\n"
                },
                "vcnName": {
                    "type": "string",
                    "description": "The optional name of an existing virtual network to use for the cluster creation. A new VCN will be created if not specified.\n"
                },
                "workerNodeIngressCidr": {
                    "type": "string",
                    "description": "Additional CIDR from which to allow ingress to worker nodes\n"
                }
            },
            "type": "object",
            "required": [
                "compartmentId",
                "kubernetesVersion",
                "nodeImage",
                "nodeShape",
                "region",
                "tenancyId"
            ]
        },
        "rancher2:index/ClusterRke2Config:ClusterRke2Config": {
            "properties": {
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterRke2ConfigUpgradeStrategy:ClusterRke2ConfigUpgradeStrategy",
                    "description": "The RKE2 upgrade strategy\n"
                },
                "version": {
                    "type": "string",
                    "description": "The RKE2 kubernetes version\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "upgradeStrategy",
                        "version"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRke2ConfigUpgradeStrategy:ClusterRke2ConfigUpgradeStrategy": {
            "properties": {
                "drainServerNodes": {
                    "type": "boolean",
                    "description": "Drain server nodes\n"
                },
                "drainWorkerNodes": {
                    "type": "boolean",
                    "description": "Drain worker nodes\n"
                },
                "serverConcurrency": {
                    "type": "integer",
                    "description": "Server concurrency\n"
                },
                "workerConcurrency": {
                    "type": "integer",
                    "description": "Worker concurrency\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfig:ClusterRkeConfig": {
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "description": "Optional duration in seconds of addon job.\n"
                },
                "addons": {
                    "type": "string",
                    "description": "Optional addons descripton to deploy on rke cluster.\n"
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional addons yaml manisfest to deploy on rke cluster.\n"
                },
                "authentication": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigAuthentication:ClusterRkeConfigAuthentication",
                    "description": "Kubernetes cluster authentication\n"
                },
                "authorization": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigAuthorization:ClusterRkeConfigAuthorization",
                    "description": "Kubernetes cluster authorization\n"
                },
                "bastionHost": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigBastionHost:ClusterRkeConfigBastionHost",
                    "description": "RKE bastion host\n"
                },
                "cloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProvider:ClusterRkeConfigCloudProvider",
                    "description": "RKE options for Calico network provider (string)\n"
                },
                "dns": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigDns:ClusterRkeConfigDns",
                    "description": "RKE dns add-on. For Rancher v2.2.x (list maxitems:1)\n"
                },
                "enableCriDockerd": {
                    "type": "boolean",
                    "description": "Enable/disable using cri-dockerd\n"
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "description": "Optional ignore docker version on nodes\n"
                },
                "ingress": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigIngress:ClusterRkeConfigIngress",
                    "description": "Kubernetes ingress configuration\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "Optional kubernetes version to deploy\n"
                },
                "monitoring": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigMonitoring:ClusterRkeConfigMonitoring",
                    "description": "Kubernetes cluster monitoring\n"
                },
                "network": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigNetwork:ClusterRkeConfigNetwork",
                    "description": "Kubernetes cluster networking\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfigNode:ClusterRkeConfigNode"
                    },
                    "description": "Optional RKE cluster nodes\n"
                },
                "prefixPath": {
                    "type": "string",
                    "description": "Optional prefix to customize kubernetes path\n"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfigPrivateRegistry:ClusterRkeConfigPrivateRegistry"
                    },
                    "description": "Optional private registries for docker images\n"
                },
                "services": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServices:ClusterRkeConfigServices",
                    "description": "Kubernetes cluster services\n"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "Optional use ssh agent auth\n"
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "Optional cluster level SSH certificate path\n"
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "Optional cluster level SSH private key path\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigUpgradeStrategy:ClusterRkeConfigUpgradeStrategy",
                    "description": "RKE upgrade strategy\n"
                },
                "winPrefixPath": {
                    "type": "string",
                    "description": "Optional prefix to customize kubernetes path for windows\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addonJobTimeout",
                        "authentication",
                        "authorization",
                        "bastionHost",
                        "cloudProvider",
                        "dns",
                        "ingress",
                        "kubernetesVersion",
                        "monitoring",
                        "network",
                        "prefixPath",
                        "services",
                        "sshCertPath",
                        "sshKeyPath",
                        "upgradeStrategy",
                        "winPrefixPath"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigAuthentication:ClusterRkeConfigAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "RKE sans for authentication ([]string)\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Monitoring deployment update strategy (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sans",
                        "strategy"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigAuthorization:ClusterRkeConfigAuthorization": {
            "properties": {
                "mode": {
                    "type": "string",
                    "description": "The AKS node group mode. Default: `System` (string)\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "RKE options for network (map)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigBastionHost:ClusterRkeConfigBastionHost": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n"
                },
                "port": {
                    "type": "string",
                    "description": "Port for node. Default \u003cspan pulumi-lang-nodejs=\"`22`\" pulumi-lang-dotnet=\"`22`\" pulumi-lang-go=\"`22`\" pulumi-lang-python=\"`22`\" pulumi-lang-yaml=\"`22`\" pulumi-lang-java=\"`22`\"\u003e`22`\u003c/span\u003e (string)\n"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "Use ssh agent auth. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "Node SSH private key (string)\n",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "Node SSH private key path (string)\n"
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "sshKey",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProvider:ClusterRkeConfigCloudProvider": {
            "properties": {
                "awsCloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderAwsCloudProvider:ClusterRkeConfigCloudProviderAwsCloudProvider",
                    "description": "RKE AWS Cloud Provider config for Cloud Provider [rke-aws-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/) (list maxitems:1)\n"
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderAzureCloudProvider:ClusterRkeConfigCloudProviderAzureCloudProvider",
                    "description": "RKE Azure Cloud Provider config for Cloud Provider [rke-azure-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/azure/) (list maxitems:1)\n"
                },
                "customCloudProvider": {
                    "type": "string",
                    "description": "RKE Custom Cloud Provider config for Cloud Provider (string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProvider:ClusterRkeConfigCloudProviderOpenstackCloudProvider",
                    "description": "RKE Openstack Cloud Provider config for Cloud Provider [rke-openstack-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/openstack/) (list maxitems:1)\n"
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProvider:ClusterRkeConfigCloudProviderVsphereCloudProvider",
                    "description": "RKE Vsphere Cloud Provider config for Cloud Provider [rke-vsphere-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/vsphere/) Extra argument \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e is required on \u003cspan pulumi-lang-nodejs=\"`virtualCenter`\" pulumi-lang-dotnet=\"`VirtualCenter`\" pulumi-lang-go=\"`virtualCenter`\" pulumi-lang-python=\"`virtual_center`\" pulumi-lang-yaml=\"`virtualCenter`\" pulumi-lang-java=\"`virtualCenter`\"\u003e`virtual_center`\u003c/span\u003e configuration. (list maxitems:1)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customCloudProvider"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderAwsCloudProvider:ClusterRkeConfigCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderAwsCloudProviderGlobal:ClusterRkeConfigCloudProviderAwsCloudProviderGlobal",
                    "description": "(list maxitems:1)\n"
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride:ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride"
                    },
                    "description": "(list)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "global"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderAwsCloudProviderGlobal:ClusterRkeConfigCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean",
                    "description": "Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "disableStrictZoneCheck": {
                    "type": "boolean",
                    "description": "Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "elbSecurityGroup": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "kubernetesClusterId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "kubernetesClusterTag": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "vpc": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The GKE cluster zone. Required if \u003cspan pulumi-lang-nodejs=\"`region`\" pulumi-lang-dotnet=\"`Region`\" pulumi-lang-go=\"`region`\" pulumi-lang-python=\"`region`\" pulumi-lang-yaml=\"`region`\" pulumi-lang-java=\"`region`\"\u003e`region`\u003c/span\u003e not set (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "elbSecurityGroup",
                        "kubernetesClusterId",
                        "kubernetesClusterTag",
                        "roleArn",
                        "routeTableId",
                        "subnetId",
                        "vpc",
                        "zone"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride:ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "region": {
                    "type": "string",
                    "description": "The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)\n"
                },
                "service": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "signingMethod": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "signingName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "signingRegion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "Registry URL (string)\n"
                }
            },
            "type": "object",
            "required": [
                "service"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "region",
                        "service",
                        "signingMethod",
                        "signingName",
                        "signingRegion",
                        "url"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderAzureCloudProvider:ClusterRkeConfigCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "description": "(string)\n",
                    "secret": true
                },
                "aadClientCertPath": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "aadClientId": {
                    "type": "string",
                    "description": "(string)\n",
                    "secret": true
                },
                "aadClientSecret": {
                    "type": "string",
                    "description": "(string)\n",
                    "secret": true
                },
                "cloud": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "cloudProviderBackoff": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "cloudProviderRateLimit": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "loadBalancerSku": {
                    "type": "string",
                    "description": "Load balancer type (basic | standard). Must be standard for auto-scaling\n"
                },
                "location": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "primaryAvailabilitySetName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "primaryScaleSetName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The AKS resource group (string)\n"
                },
                "routeTableName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "securityGroupName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "subnetName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "(string)\n",
                    "secret": true
                },
                "tenantId": {
                    "type": "string",
                    "description": "Required if \u003cspan pulumi-lang-nodejs=\"`tenantName`\" pulumi-lang-dotnet=\"`TenantName`\" pulumi-lang-go=\"`tenantName`\" pulumi-lang-python=\"`tenant_name`\" pulumi-lang-yaml=\"`tenantName`\" pulumi-lang-java=\"`tenantName`\"\u003e`tenant_name`\u003c/span\u003e not provided. (string)\n",
                    "secret": true
                },
                "useInstanceMetadata": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "vmType": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "vnetName": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "vnetResourceGroup": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "required": [
                "aadClientId",
                "aadClientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aadClientCertPassword",
                        "aadClientCertPath",
                        "aadClientId",
                        "aadClientSecret",
                        "cloud",
                        "cloudProviderBackoff",
                        "cloudProviderBackoffDuration",
                        "cloudProviderBackoffExponent",
                        "cloudProviderBackoffJitter",
                        "cloudProviderBackoffRetries",
                        "cloudProviderRateLimit",
                        "cloudProviderRateLimitBucket",
                        "cloudProviderRateLimitQps",
                        "location",
                        "maximumLoadBalancerRuleCount",
                        "primaryAvailabilitySetName",
                        "primaryScaleSetName",
                        "resourceGroup",
                        "routeTableName",
                        "securityGroupName",
                        "subnetName",
                        "subscriptionId",
                        "tenantId",
                        "useInstanceMetadata",
                        "useManagedIdentityExtension",
                        "vmType",
                        "vnetName",
                        "vnetResourceGroup"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProvider:ClusterRkeConfigCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage",
                    "description": "(list maxitems:1)\n"
                },
                "global": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal:ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal",
                    "description": "(list maxitems:1)\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer",
                    "description": "(list maxitems:1)\n"
                },
                "metadata": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata:ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata",
                    "description": "(list maxitems:1)\n"
                },
                "route": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute:ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute",
                    "description": "(list maxitems:1)\n"
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockStorage",
                        "global",
                        "loadBalancer",
                        "metadata",
                        "route"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "ignoreVolumeAz": {
                    "type": "boolean",
                    "description": "(string)\n"
                },
                "trustDevicePath": {
                    "type": "boolean",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bsVersion",
                        "ignoreVolumeAz",
                        "trustDevicePath"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal:ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "caFile": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "Required if \u003cspan pulumi-lang-nodejs=\"`domainName`\" pulumi-lang-dotnet=\"`DomainName`\" pulumi-lang-go=\"`domainName`\" pulumi-lang-python=\"`domain_name`\" pulumi-lang-yaml=\"`domainName`\" pulumi-lang-java=\"`domainName`\"\u003e`domain_name`\u003c/span\u003e not provided. (string)\n",
                    "secret": true
                },
                "domainName": {
                    "type": "string",
                    "description": "Required if \u003cspan pulumi-lang-nodejs=\"`domainId`\" pulumi-lang-dotnet=\"`DomainId`\" pulumi-lang-go=\"`domainId`\" pulumi-lang-python=\"`domain_id`\" pulumi-lang-yaml=\"`domainId`\" pulumi-lang-java=\"`domainId`\"\u003e`domain_id`\u003c/span\u003e not provided. (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Required if \u003cspan pulumi-lang-nodejs=\"`tenantName`\" pulumi-lang-dotnet=\"`TenantName`\" pulumi-lang-go=\"`tenantName`\" pulumi-lang-python=\"`tenant_name`\" pulumi-lang-yaml=\"`tenantName`\" pulumi-lang-java=\"`tenantName`\"\u003e`tenant_name`\u003c/span\u003e not provided. (string)\n",
                    "secret": true
                },
                "tenantName": {
                    "type": "string",
                    "description": "Required if \u003cspan pulumi-lang-nodejs=\"`tenantId`\" pulumi-lang-dotnet=\"`TenantId`\" pulumi-lang-go=\"`tenantId`\" pulumi-lang-python=\"`tenant_id`\" pulumi-lang-yaml=\"`tenantId`\" pulumi-lang-java=\"`tenantId`\"\u003e`tenant_id`\u003c/span\u003e not provided. (string)\n"
                },
                "trustId": {
                    "type": "string",
                    "description": "(string)\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "(string)\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authUrl",
                        "caFile",
                        "domainId",
                        "domainName",
                        "password",
                        "region",
                        "tenantId",
                        "tenantName",
                        "trustId",
                        "username"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "floatingNetworkId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "lbMethod": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "lbProvider": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "lbVersion": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "manageSecurityGroups": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "monitorDelay": {
                    "type": "string",
                    "description": "Default \u003cspan pulumi-lang-nodejs=\"`60s`\" pulumi-lang-dotnet=\"`60s`\" pulumi-lang-go=\"`60s`\" pulumi-lang-python=\"`60s`\" pulumi-lang-yaml=\"`60s`\" pulumi-lang-java=\"`60s`\"\u003e`60s`\u003c/span\u003e (string)\n"
                },
                "monitorMaxRetries": {
                    "type": "integer",
                    "description": "Default 5 (int)\n"
                },
                "monitorTimeout": {
                    "type": "string",
                    "description": "Default \u003cspan pulumi-lang-nodejs=\"`30s`\" pulumi-lang-dotnet=\"`30s`\" pulumi-lang-go=\"`30s`\" pulumi-lang-python=\"`30s`\" pulumi-lang-yaml=\"`30s`\" pulumi-lang-java=\"`30s`\"\u003e`30s`\u003c/span\u003e (string)\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "useOctavia": {
                    "type": "boolean",
                    "description": "(bool)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createMonitor",
                        "floatingNetworkId",
                        "lbMethod",
                        "lbProvider",
                        "lbVersion",
                        "manageSecurityGroups",
                        "subnetId",
                        "useOctavia"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata:ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "searchOrder": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "requestTimeout",
                        "searchOrder"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute:ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "routerId"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProvider:ClusterRkeConfigCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderDisk:ClusterRkeConfigCloudProviderVsphereCloudProviderDisk",
                    "description": "(list maxitems:1)\n"
                },
                "global": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal:ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal",
                    "description": "(list maxitems:1)\n"
                },
                "network": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork:ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork",
                    "description": "The GKE cluster network. Required for create new cluster (string)\n"
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter"
                    },
                    "description": "(List)\n"
                },
                "workspace": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace:ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace",
                    "description": "(list maxitems:1)\n"
                }
            },
            "type": "object",
            "required": [
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disk",
                        "global",
                        "network",
                        "virtualCenters",
                        "workspace"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderDisk:ClusterRkeConfigCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scsiControllerType"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal:ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "gracefulShutdownTimeout": {
                    "type": "string"
                },
                "insecureFlag": {
                    "type": "boolean",
                    "description": "(bool)\n"
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "secret": true
                },
                "port": {
                    "type": "string",
                    "description": "Port for node. Default \u003cspan pulumi-lang-nodejs=\"`22`\" pulumi-lang-dotnet=\"`22`\" pulumi-lang-go=\"`22`\" pulumi-lang-python=\"`22`\" pulumi-lang-yaml=\"`22`\" pulumi-lang-java=\"`22`\"\u003e`22`\u003c/span\u003e (string)\n"
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters",
                        "insecureFlag",
                        "password",
                        "port",
                        "soapRoundtripCount",
                        "user"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork:ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "publicNetwork"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "secret": true
                },
                "port": {
                    "type": "string",
                    "description": "Port for node. Default \u003cspan pulumi-lang-nodejs=\"`22`\" pulumi-lang-dotnet=\"`22`\" pulumi-lang-go=\"`22`\" pulumi-lang-python=\"`22`\" pulumi-lang-yaml=\"`22`\" pulumi-lang-java=\"`22`\"\u003e`22`\u003c/span\u003e (string)\n"
                },
                "soapRoundtripCount": {
                    "type": "integer",
                    "description": "(int)\n"
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters",
                        "name",
                        "password",
                        "port",
                        "soapRoundtripCount",
                        "user"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace:ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "defaultDatastore": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n"
                },
                "resourcepoolPath": {
                    "type": "string",
                    "description": "(string)\n"
                },
                "server": {
                    "type": "string",
                    "description": "(string)\n"
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "folder",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenter",
                        "defaultDatastore",
                        "folder",
                        "resourcepoolPath",
                        "server"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigDns:ClusterRkeConfigDns": {
            "properties": {
                "linearAutoscalerParams": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigDnsLinearAutoscalerParams:ClusterRkeConfigDnsLinearAutoscalerParams",
                    "description": "Linear Autoscaler Params\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "RKE monitoring node selector (map)\n"
                },
                "nodelocal": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigDnsNodelocal:ClusterRkeConfigDnsNodelocal",
                    "description": "Nodelocal dns\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "RKE options for network (map)\n"
                },
                "provider": {
                    "type": "string",
                    "description": "RKE monitoring provider (string)\n"
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS add-on reverse cidr  (list)\n"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfigDnsToleration:ClusterRkeConfigDnsToleration"
                    },
                    "description": "DNS service tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigDnsUpdateStrategy:ClusterRkeConfigDnsUpdateStrategy",
                    "description": "Update deployment strategy\n"
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS add-on upstream nameservers  (list)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeSelector",
                        "options",
                        "reverseCidrs",
                        "upstreamNameservers"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigDnsLinearAutoscalerParams:ClusterRkeConfigDnsLinearAutoscalerParams": {
            "properties": {
                "coresPerReplica": {
                    "type": "number",
                    "description": "number of replicas per cluster cores (float64)\n"
                },
                "max": {
                    "type": "integer",
                    "description": "maximum number of replicas (int64)\n"
                },
                "min": {
                    "type": "integer",
                    "description": "minimum number of replicas (int64)\n"
                },
                "nodesPerReplica": {
                    "type": "number",
                    "description": "number of replica per cluster nodes (float64)\n"
                },
                "preventSinglePointFailure": {
                    "type": "boolean",
                    "description": "prevent single point of failure\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigDnsNodelocal:ClusterRkeConfigDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "Nodelocal dns ip address (string)\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Node selector key pair\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigDnsToleration:ClusterRkeConfigDnsToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The GKE taint effect (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The GKE taint key (string)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)\n"
                },
                "seconds": {
                    "type": "integer",
                    "description": "The toleration seconds (int)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The GKE taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigDnsUpdateStrategy:ClusterRkeConfigDnsUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigDnsUpdateStrategyRollingUpdate:ClusterRkeConfigDnsUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigDnsUpdateStrategyRollingUpdate:ClusterRkeConfigDnsUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigIngress:ClusterRkeConfigIngress": {
            "properties": {
                "defaultBackend": {
                    "type": "boolean",
                    "description": "Enable ingress default backend. Default: \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "dnsPolicy": {
                    "type": "string",
                    "description": "Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra arguments for scheduler service (map)\n"
                },
                "httpPort": {
                    "type": "integer",
                    "description": "HTTP port for RKE Ingress (int)\n"
                },
                "httpsPort": {
                    "type": "integer",
                    "description": "HTTPS port for RKE Ingress (int)\n"
                },
                "networkMode": {
                    "type": "string",
                    "description": "Network mode for RKE Ingress (string)\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "RKE monitoring node selector (map)\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "RKE options for network (map)\n"
                },
                "provider": {
                    "type": "string",
                    "description": "RKE monitoring provider (string)\n"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfigIngressToleration:ClusterRkeConfigIngressToleration"
                    },
                    "description": "Ingress add-on tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigIngressUpdateStrategy:ClusterRkeConfigIngressUpdateStrategy",
                    "description": "Update daemon set strategy\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsPolicy",
                        "extraArgs",
                        "httpPort",
                        "httpsPort",
                        "networkMode",
                        "nodeSelector",
                        "options",
                        "provider"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigIngressToleration:ClusterRkeConfigIngressToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The GKE taint effect (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The GKE taint key (string)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)\n"
                },
                "seconds": {
                    "type": "integer",
                    "description": "The toleration seconds (int)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The GKE taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigIngressUpdateStrategy:ClusterRkeConfigIngressUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigIngressUpdateStrategyRollingUpdate:ClusterRkeConfigIngressUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigIngressUpdateStrategyRollingUpdate:ClusterRkeConfigIngressUpdateStrategyRollingUpdate": {
            "properties": {
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigMonitoring:ClusterRkeConfigMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "RKE monitoring node selector (map)\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "RKE options for network (map)\n"
                },
                "provider": {
                    "type": "string",
                    "description": "RKE monitoring provider (string)\n"
                },
                "replicas": {
                    "type": "integer",
                    "description": "RKE monitoring replicas (int)\n"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfigMonitoringToleration:ClusterRkeConfigMonitoringToleration"
                    },
                    "description": "Monitoring add-on tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigMonitoringUpdateStrategy:ClusterRkeConfigMonitoringUpdateStrategy",
                    "description": "Update deployment strategy\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options",
                        "provider",
                        "replicas"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigMonitoringToleration:ClusterRkeConfigMonitoringToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The GKE taint effect (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The GKE taint key (string)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)\n"
                },
                "seconds": {
                    "type": "integer",
                    "description": "The toleration seconds (int)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The GKE taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigMonitoringUpdateStrategy:ClusterRkeConfigMonitoringUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigMonitoringUpdateStrategyRollingUpdate:ClusterRkeConfigMonitoringUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigMonitoringUpdateStrategyRollingUpdate:ClusterRkeConfigMonitoringUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigNetwork:ClusterRkeConfigNetwork": {
            "properties": {
                "aciNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigNetworkAciNetworkProvider:ClusterRkeConfigNetworkAciNetworkProvider",
                    "description": "ACI provider config for RKE network (list maxitems:63)\n"
                },
                "calicoNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigNetworkCalicoNetworkProvider:ClusterRkeConfigNetworkCalicoNetworkProvider",
                    "description": "Calico provider config for RKE network (list maxitems:1)\n"
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigNetworkCanalNetworkProvider:ClusterRkeConfigNetworkCanalNetworkProvider",
                    "description": "Canal provider config for RKE network (list maxitems:1)\n"
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigNetworkFlannelNetworkProvider:ClusterRkeConfigNetworkFlannelNetworkProvider",
                    "description": "Flannel provider config for RKE network (list maxitems:1)\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Network provider MTU. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int)\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "RKE options for network (map)\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "Plugin for RKE network. \u003cspan pulumi-lang-nodejs=\"`canal`\" pulumi-lang-dotnet=\"`Canal`\" pulumi-lang-go=\"`canal`\" pulumi-lang-python=\"`canal`\" pulumi-lang-yaml=\"`canal`\" pulumi-lang-java=\"`canal`\"\u003e`canal`\u003c/span\u003e (default), \u003cspan pulumi-lang-nodejs=\"`flannel`\" pulumi-lang-dotnet=\"`Flannel`\" pulumi-lang-go=\"`flannel`\" pulumi-lang-python=\"`flannel`\" pulumi-lang-yaml=\"`flannel`\" pulumi-lang-java=\"`flannel`\"\u003e`flannel`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`calico`\" pulumi-lang-dotnet=\"`Calico`\" pulumi-lang-go=\"`calico`\" pulumi-lang-python=\"`calico`\" pulumi-lang-yaml=\"`calico`\" pulumi-lang-java=\"`calico`\"\u003e`calico`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`none`\" pulumi-lang-dotnet=\"`None`\" pulumi-lang-go=\"`none`\" pulumi-lang-python=\"`none`\" pulumi-lang-yaml=\"`none`\" pulumi-lang-java=\"`none`\"\u003e`none`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`weave`\" pulumi-lang-dotnet=\"`Weave`\" pulumi-lang-go=\"`weave`\" pulumi-lang-python=\"`weave`\" pulumi-lang-yaml=\"`weave`\" pulumi-lang-java=\"`weave`\"\u003e`weave`\u003c/span\u003e are supported. (string)\n"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfigNetworkToleration:ClusterRkeConfigNetworkToleration"
                    },
                    "description": "Network add-on tolerations\n"
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigNetworkWeaveNetworkProvider:ClusterRkeConfigNetworkWeaveNetworkProvider",
                    "description": "Weave provider config for RKE network (list maxitems:1)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options",
                        "plugin"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigNetworkAciNetworkProvider:ClusterRkeConfigNetworkAciNetworkProvider": {
            "properties": {
                "aep": {
                    "type": "string",
                    "description": "Attachable entity profile (string)\n"
                },
                "apicHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of APIC hosts to connect for APIC API (list)\n"
                },
                "apicRefreshTickerAdjust": {
                    "type": "string",
                    "description": "APIC refresh ticker adjust amount (string)\n"
                },
                "apicRefreshTime": {
                    "type": "string",
                    "description": "APIC refresh time in seconds (string)\n"
                },
                "apicSubscriptionDelay": {
                    "type": "string",
                    "description": "APIC subscription delay amount (string)\n"
                },
                "apicUserCrt": {
                    "type": "string",
                    "description": "APIC user certificate (string)\n",
                    "secret": true
                },
                "apicUserKey": {
                    "type": "string",
                    "description": "APIC user key (string)\n",
                    "secret": true
                },
                "apicUserName": {
                    "type": "string",
                    "description": "APIC user name (string)\n"
                },
                "capic": {
                    "type": "string",
                    "description": "cAPIC cloud (string)\n"
                },
                "controllerLogLevel": {
                    "type": "string",
                    "description": "Log level for ACI controller (string)\n"
                },
                "disablePeriodicSnatGlobalInfoSync": {
                    "type": "string",
                    "description": "Whether to disable periodic SNAT global info sync (string)\n"
                },
                "disableWaitForNetwork": {
                    "type": "string",
                    "description": "Whether to disable waiting for network (string)\n"
                },
                "dropLogEnable": {
                    "type": "string",
                    "description": "Whether to enable drop log (string)\n"
                },
                "durationWaitForNetwork": {
                    "type": "string",
                    "description": "The duration to wait for network (string)\n"
                },
                "enableEndpointSlice": {
                    "type": "string",
                    "description": "Whether to enable endpoint slices (string)\n"
                },
                "encapType": {
                    "type": "string",
                    "description": "Encap type: vxlan or vlan (string)\n"
                },
                "epRegistry": {
                    "type": "string",
                    "description": "EP registry (string)\n"
                },
                "externDynamic": {
                    "type": "string",
                    "description": "Subnet to use for dynamic external IPs (string)\n"
                },
                "externStatic": {
                    "type": "string",
                    "description": "Subnet to use for static external IPs (string)\n"
                },
                "gbpPodSubnet": {
                    "type": "string",
                    "description": "GBH pod subnet (string)\n"
                },
                "hostAgentLogLevel": {
                    "type": "string",
                    "description": "Log level for ACI host agent (string)\n"
                },
                "imagePullPolicy": {
                    "type": "string",
                    "description": "Image pull policy (string)\n"
                },
                "imagePullSecret": {
                    "type": "string",
                    "description": "Image pull policy (string)\n"
                },
                "infraVlan": {
                    "type": "string",
                    "description": "The VLAN used by ACI infra (string)\n"
                },
                "installIstio": {
                    "type": "string",
                    "description": "Whether to install Istio (string)\n"
                },
                "istioProfile": {
                    "type": "string",
                    "description": "Istio profile name (string)\n"
                },
                "kafkaBrokers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kafka broker hosts (list)\n"
                },
                "kafkaClientCrt": {
                    "type": "string",
                    "description": "Kafka client certificate (string)\n"
                },
                "kafkaClientKey": {
                    "type": "string",
                    "description": "Kafka client key (string)\n"
                },
                "kubeApiVlan": {
                    "type": "string",
                    "description": "The VLAN used by the physdom for nodes (string)\n"
                },
                "l3out": {
                    "type": "string",
                    "description": "L3out (string)\n"
                },
                "l3outExternalNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "L3out external networks (list)\n"
                },
                "maxNodesSvcGraph": {
                    "type": "string",
                    "description": "Max nodes in service graph (string)\n"
                },
                "mcastRangeEnd": {
                    "type": "string",
                    "description": "End of mcast range (string)\n"
                },
                "mcastRangeStart": {
                    "type": "string",
                    "description": "Start of mcast range (string)\n"
                },
                "mtuHeadRoom": {
                    "type": "string",
                    "description": "MTU head room amount (string)\n"
                },
                "multusDisable": {
                    "type": "string",
                    "description": "Whether to disable Multus (string)\n"
                },
                "noPriorityClass": {
                    "type": "string",
                    "description": "Whether to use priority class (string)\n"
                },
                "nodePodIfEnable": {
                    "type": "string",
                    "description": "Whether to enable node pod interface (string)\n"
                },
                "nodeSubnet": {
                    "type": "string",
                    "description": "Subnet to use for nodes (string)\n"
                },
                "nodeSvcSubnet": {
                    "type": "string",
                    "description": "Subnet to use for service graph (string)\n"
                },
                "opflexClientSsl": {
                    "type": "string",
                    "description": "Whether to use client SSL for Opflex (string)\n"
                },
                "opflexDeviceDeleteTimeout": {
                    "type": "string",
                    "description": "Opflex device delete timeout (string)\n"
                },
                "opflexLogLevel": {
                    "type": "string",
                    "description": "Log level for ACI opflex (string)\n"
                },
                "opflexMode": {
                    "type": "string",
                    "description": "Opflex mode (string)\n"
                },
                "opflexServerPort": {
                    "type": "string",
                    "description": "Opflex server port (string)\n"
                },
                "overlayVrfName": {
                    "type": "string",
                    "description": "Overlay VRF name (string)\n"
                },
                "ovsMemoryLimit": {
                    "type": "string",
                    "description": "OVS memory limit (string)\n"
                },
                "pbrTrackingNonSnat": {
                    "type": "string",
                    "description": "Policy-based routing tracking non snat (string)\n"
                },
                "podSubnetChunkSize": {
                    "type": "string",
                    "description": "Pod subnet chunk size (string)\n"
                },
                "runGbpContainer": {
                    "type": "string",
                    "description": "Whether to run GBP container (string)\n"
                },
                "runOpflexServerContainer": {
                    "type": "string",
                    "description": "Whether to run Opflex server container (string)\n"
                },
                "serviceMonitorInterval": {
                    "type": "string",
                    "description": "Service monitor interval (string)\n"
                },
                "serviceVlan": {
                    "type": "string",
                    "description": "The VLAN used by LoadBalancer services (string)\n"
                },
                "snatContractScope": {
                    "type": "string",
                    "description": "Snat contract scope (string)\n"
                },
                "snatNamespace": {
                    "type": "string",
                    "description": "Snat namespace (string)\n"
                },
                "snatPortRangeEnd": {
                    "type": "string",
                    "description": "End of snat port range (string)\n"
                },
                "snatPortRangeStart": {
                    "type": "string",
                    "description": "End of snat port range (string)\n"
                },
                "snatPortsPerNode": {
                    "type": "string",
                    "description": "Snat ports per node (string)\n"
                },
                "sriovEnable": {
                    "type": "string",
                    "description": "Whether to enable SR-IOV (string)\n"
                },
                "subnetDomainName": {
                    "type": "string",
                    "description": "Subnet domain name (string)\n"
                },
                "systemId": {
                    "type": "string",
                    "description": "ACI system ID (string)\n"
                },
                "tenant": {
                    "type": "string",
                    "description": "ACI tenant (string)\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "useAciAnywhereCrd": {
                    "type": "string",
                    "description": "Whether to use ACI anywhere CRD (string)\n"
                },
                "useAciCniPriorityClass": {
                    "type": "string",
                    "description": "Whether to use ACI CNI priority class (string)\n"
                },
                "useClusterRole": {
                    "type": "string",
                    "description": "Whether to use cluster role (string)\n"
                },
                "useHostNetnsVolume": {
                    "type": "string",
                    "description": "Whether to use host netns volume (string)\n"
                },
                "useOpflexServerVolume": {
                    "type": "string",
                    "description": "Whether use Opflex server volume (string)\n"
                },
                "usePrivilegedContainer": {
                    "type": "string",
                    "description": "Whether ACI containers should run as privileged (string)\n"
                },
                "vmmController": {
                    "type": "string",
                    "description": "VMM controller configuration (string)\n"
                },
                "vmmDomain": {
                    "type": "string",
                    "description": "VMM domain configuration (string)\n"
                },
                "vrfName": {
                    "type": "string",
                    "description": "VRF name (string)\n"
                },
                "vrfTenant": {
                    "type": "string",
                    "description": "VRF tenant (string)\n"
                }
            },
            "type": "object",
            "required": [
                "aep",
                "apicHosts",
                "apicUserCrt",
                "apicUserKey",
                "apicUserName",
                "encapType",
                "externDynamic",
                "externStatic",
                "kubeApiVlan",
                "l3out",
                "l3outExternalNetworks",
                "mcastRangeEnd",
                "mcastRangeStart",
                "nodeSubnet",
                "nodeSvcSubnet",
                "serviceVlan",
                "systemId",
                "token",
                "vrfName",
                "vrfTenant"
            ]
        },
        "rancher2:index/ClusterRkeConfigNetworkCalicoNetworkProvider:ClusterRkeConfigNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "RKE options for Calico network provider (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cloudProvider"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigNetworkCanalNetworkProvider:ClusterRkeConfigNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "description": "Iface config Flannel network provider (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigNetworkFlannelNetworkProvider:ClusterRkeConfigNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string",
                    "description": "Iface config Flannel network provider (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigNetworkToleration:ClusterRkeConfigNetworkToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The GKE taint effect (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The GKE taint key (string)\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)\n"
                },
                "seconds": {
                    "type": "integer",
                    "description": "The toleration seconds (int)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The GKE taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigNetworkWeaveNetworkProvider:ClusterRkeConfigNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n"
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "rancher2:index/ClusterRkeConfigNode:ClusterRkeConfigNode": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address ip for node (string)\n"
                },
                "dockerSocket": {
                    "type": "string",
                    "description": "Docker socket for node (string)\n"
                },
                "hostnameOverride": {
                    "type": "string",
                    "description": "Hostname override for node (string)\n"
                },
                "internalAddress": {
                    "type": "string",
                    "description": "Internal ip for node (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster (map)\n"
                },
                "nodeId": {
                    "type": "string",
                    "description": "Id for the node (string)\n"
                },
                "port": {
                    "type": "string",
                    "description": "Port for node. Default \u003cspan pulumi-lang-nodejs=\"`22`\" pulumi-lang-dotnet=\"`22`\" pulumi-lang-go=\"`22`\" pulumi-lang-python=\"`22`\" pulumi-lang-yaml=\"`22`\" pulumi-lang-java=\"`22`\"\u003e`22`\u003c/span\u003e (string)\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles for the node. \u003cspan pulumi-lang-nodejs=\"`controlplane`\" pulumi-lang-dotnet=\"`Controlplane`\" pulumi-lang-go=\"`controlplane`\" pulumi-lang-python=\"`controlplane`\" pulumi-lang-yaml=\"`controlplane`\" pulumi-lang-java=\"`controlplane`\"\u003e`controlplane`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`etcd`\" pulumi-lang-dotnet=\"`Etcd`\" pulumi-lang-go=\"`etcd`\" pulumi-lang-python=\"`etcd`\" pulumi-lang-yaml=\"`etcd`\" pulumi-lang-java=\"`etcd`\"\u003e`etcd`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`worker`\" pulumi-lang-dotnet=\"`Worker`\" pulumi-lang-go=\"`worker`\" pulumi-lang-python=\"`worker`\" pulumi-lang-yaml=\"`worker`\" pulumi-lang-java=\"`worker`\"\u003e`worker`\u003c/span\u003e are supported. (list)\n"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "Use ssh agent auth. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "Node SSH private key (string)\n",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "Node SSH private key path (string)\n"
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "address",
                "roles",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "dockerSocket",
                        "roles",
                        "sshKey",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigPrivateRegistry:ClusterRkeConfigPrivateRegistry": {
            "properties": {
                "ecrCredentialPlugin": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigPrivateRegistryEcrCredentialPlugin:ClusterRkeConfigPrivateRegistryEcrCredentialPlugin",
                    "description": "ECR credential plugin config\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Set as default registry. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "password": {
                    "type": "string",
                    "description": "Registry password (string)\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Registry URL (string)\n"
                },
                "user": {
                    "type": "string",
                    "description": "Registry user (string)\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "rancher2:index/ClusterRkeConfigPrivateRegistryEcrCredentialPlugin:ClusterRkeConfigPrivateRegistryEcrCredentialPlugin": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string",
                    "description": "AWS access key ID (string)\n"
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "description": "AWS secret access key (string)\n",
                    "secret": true
                },
                "awsSessionToken": {
                    "type": "string",
                    "description": "AWS session token (string)\n",
                    "secret": true
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigServices:ClusterRkeConfigServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesEtcd:ClusterRkeConfigServicesEtcd",
                    "description": "Etcd options for RKE services (list maxitems:1)\n"
                },
                "kubeApi": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubeApi:ClusterRkeConfigServicesKubeApi",
                    "description": "Kube API options for RKE services (list maxitems:1)\n"
                },
                "kubeController": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubeController:ClusterRkeConfigServicesKubeController",
                    "description": "Kube Controller options for RKE services (list maxitems:1)\n"
                },
                "kubelet": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubelet:ClusterRkeConfigServicesKubelet",
                    "description": "Kubelet options for RKE services (list maxitems:1)\n"
                },
                "kubeproxy": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubeproxy:ClusterRkeConfigServicesKubeproxy",
                    "description": "Kubeproxy options for RKE services (list maxitems:1)\n"
                },
                "scheduler": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesScheduler:ClusterRkeConfigServicesScheduler",
                    "description": "Scheduler options for RKE services (list maxitems:1)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "etcd",
                        "kubeApi",
                        "kubeController",
                        "kubelet",
                        "kubeproxy",
                        "scheduler"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesEtcd:ClusterRkeConfigServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesEtcdBackupConfig:ClusterRkeConfigServicesEtcdBackupConfig",
                    "description": "Backup options for etcd service. For Rancher v2.2.x (list maxitems:1)\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "(Computed/Sensitive) K8s cluster ca cert (string)\n"
                },
                "cert": {
                    "type": "string",
                    "description": "TLS certificate for etcd service (string)\n",
                    "secret": true
                },
                "creation": {
                    "type": "string",
                    "description": "Creation option for etcd service (string)\n"
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "External urls for etcd service (list)\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra arguments for scheduler service (map)\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n"
                },
                "gid": {
                    "type": "integer",
                    "description": "Etcd service GID. Default: \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e. For Rancher v2.3.x and above (int)\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The GKE taint key (string)\n",
                    "secret": true
                },
                "path": {
                    "type": "string",
                    "description": "(Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)\n"
                },
                "retention": {
                    "type": "string",
                    "description": "Retention for etcd backup. Default \u003cspan pulumi-lang-nodejs=\"`6`\" pulumi-lang-dotnet=\"`6`\" pulumi-lang-go=\"`6`\" pulumi-lang-python=\"`6`\" pulumi-lang-yaml=\"`6`\" pulumi-lang-java=\"`6`\"\u003e`6`\u003c/span\u003e (int)\n"
                },
                "snapshot": {
                    "type": "boolean",
                    "description": "Snapshot option for etcd service (bool)\n"
                },
                "uid": {
                    "type": "integer",
                    "description": "Etcd service UID. Default: \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e. For Rancher v2.3.x and above (int)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupConfig",
                        "caCert",
                        "cert",
                        "creation",
                        "extraArgs",
                        "image",
                        "key",
                        "path",
                        "retention",
                        "snapshot"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesEtcdBackupConfig:ClusterRkeConfigServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the authorized cluster endpoint. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "intervalHours": {
                    "type": "integer",
                    "description": "Interval hours for etcd backup. Default \u003cspan pulumi-lang-nodejs=\"`12`\" pulumi-lang-dotnet=\"`12`\" pulumi-lang-go=\"`12`\" pulumi-lang-python=\"`12`\" pulumi-lang-yaml=\"`12`\" pulumi-lang-java=\"`12`\"\u003e`12`\u003c/span\u003e (int)\n"
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention for etcd backup. Default \u003cspan pulumi-lang-nodejs=\"`6`\" pulumi-lang-dotnet=\"`6`\" pulumi-lang-go=\"`6`\" pulumi-lang-python=\"`6`\" pulumi-lang-yaml=\"`6`\" pulumi-lang-java=\"`6`\"\u003e`6`\u003c/span\u003e (int)\n"
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig:ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig",
                    "description": "S3 config options for etcd backup (list maxitems:1)\n"
                },
                "safeTimestamp": {
                    "type": "boolean",
                    "description": "Safe timestamp for etcd backup. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "RKE node drain timeout. Default: \u003cspan pulumi-lang-nodejs=\"`60`\" pulumi-lang-dotnet=\"`60`\" pulumi-lang-go=\"`60`\" pulumi-lang-python=\"`60`\" pulumi-lang-yaml=\"`60`\" pulumi-lang-java=\"`60`\"\u003e`60`\u003c/span\u003e (int)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeout"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig:ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access key for S3 service (string)\n",
                    "secret": true
                },
                "bucketName": {
                    "type": "string",
                    "description": "Bucket name for S3 service (string)\n"
                },
                "customCa": {
                    "type": "string",
                    "description": "Base64 encoded custom CA for S3 service. Use filebase64(\u003cFILE\u003e) for encoding file. Available from Rancher v2.2.5 (string)\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint for S3 service (string)\n"
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n"
                },
                "region": {
                    "type": "string",
                    "description": "The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key for S3 service (string)\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ]
        },
        "rancher2:index/ClusterRkeConfigServicesKubeApi:ClusterRkeConfigServicesKubeApi": {
            "properties": {
                "admissionConfiguration": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubeApiAdmissionConfiguration:ClusterRkeConfigServicesKubeApiAdmissionConfiguration",
                    "description": "Cluster admission configuration\n"
                },
                "alwaysPullImages": {
                    "type": "boolean",
                    "description": "Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "auditLog": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubeApiAuditLog:ClusterRkeConfigServicesKubeApiAuditLog",
                    "description": "K8s audit log configuration. (list maxitems: 1)\n"
                },
                "eventRateLimit": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubeApiEventRateLimit:ClusterRkeConfigServicesKubeApiEventRateLimit",
                    "description": "K8s event rate limit configuration. (list maxitems: 1)\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra arguments for scheduler service (map)\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n"
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig:ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig",
                    "description": "[Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)\n"
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Service Cluster ip Range option for kube controller service (string)\n"
                },
                "serviceNodePortRange": {
                    "type": "string",
                    "description": "Service Node Port Range option for kube API service (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image",
                        "serviceClusterIpRange",
                        "serviceNodePortRange"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesKubeApiAdmissionConfiguration:ClusterRkeConfigServicesKubeApiAdmissionConfiguration": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Admission configuration ApiVersion\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Admission configuration Kind\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubeApiAdmissionConfigurationPlugin:ClusterRkeConfigServicesKubeApiAdmissionConfigurationPlugin"
                    },
                    "description": "Admission configuration plugins\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "plugins"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesKubeApiAdmissionConfigurationPlugin:ClusterRkeConfigServicesKubeApiAdmissionConfigurationPlugin": {
            "properties": {
                "configuration": {
                    "type": "string",
                    "description": "Plugin configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "path": {
                    "type": "string",
                    "description": "Plugin path\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "name"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesKubeApiAuditLog:ClusterRkeConfigServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigServicesKubeApiAuditLogConfiguration:ClusterRkeConfigServicesKubeApiAuditLogConfiguration",
                    "description": "Event rate limit configuration yaml encoded definition. `apiVersion` and `kind: Configuration\"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string) Ex:\n\n```\nconfiguration = \u003c\u003cEOF\napiVersion: eventratelimit.admission.k8s.io/v1alpha1\nkind: Configuration\nlimits:\n- type: Server\nburst: 35000\nqps: 6000\nEOF\n```\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the authorized cluster endpoint. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesKubeApiAuditLogConfiguration:ClusterRkeConfigServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Audit log format. Default: 'json' (string)\n"
                },
                "maxAge": {
                    "type": "integer",
                    "description": "Audit log max age. Default: \u003cspan pulumi-lang-nodejs=\"`30`\" pulumi-lang-dotnet=\"`30`\" pulumi-lang-go=\"`30`\" pulumi-lang-python=\"`30`\" pulumi-lang-yaml=\"`30`\" pulumi-lang-java=\"`30`\"\u003e`30`\u003c/span\u003e (int)\n"
                },
                "maxBackup": {
                    "type": "integer",
                    "description": "Audit log max backup. Default: \u003cspan pulumi-lang-nodejs=\"`10`\" pulumi-lang-dotnet=\"`10`\" pulumi-lang-go=\"`10`\" pulumi-lang-python=\"`10`\" pulumi-lang-yaml=\"`10`\" pulumi-lang-java=\"`10`\"\u003e`10`\u003c/span\u003e (int)\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The EKS node group maximum size. Default \u003cspan pulumi-lang-nodejs=\"`2`\" pulumi-lang-dotnet=\"`2`\" pulumi-lang-go=\"`2`\" pulumi-lang-python=\"`2`\" pulumi-lang-yaml=\"`2`\" pulumi-lang-java=\"`2`\"\u003e`2`\u003c/span\u003e (int)\n"
                },
                "path": {
                    "type": "string",
                    "description": "(Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Audit policy yaml encoded definition. `apiVersion` and `kind: Policy\\nrules:\"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string) Ex:\n\n```\npolicy = \u003c\u003cEOF\napiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n- level: RequestResponse\nresources:\n- resources:\n- pods\nEOF\n```\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "policy"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesKubeApiEventRateLimit:ClusterRkeConfigServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "string",
                    "description": "Event rate limit configuration yaml encoded definition. `apiVersion` and `kind: Configuration\"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string) Ex:\n\n```\nconfiguration = \u003c\u003cEOF\napiVersion: eventratelimit.admission.k8s.io/v1alpha1\nkind: Configuration\nlimits:\n- type: Server\nburst: 35000\nqps: 6000\nEOF\n```\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the authorized cluster endpoint. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig:ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "string",
                    "description": "Secrets encryption yaml encoded custom configuration. `\"apiVersion\"` and `\"kind\":\"EncryptionConfiguration\"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/) (string) Ex:\n\n```\ncustom_config = \u003c\u003cEOF\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n- secrets\nproviders:\n- aescbc:\nkeys:\n- name: k-fw5hn\nsecret: RTczRjFDODMwQzAyMDVBREU4NDJBMUZFNDhCNzM5N0I=\nidentity: {}\nEOF\n\n```\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the authorized cluster endpoint. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterRkeConfigServicesKubeController:ClusterRkeConfigServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string",
                    "description": "Cluster CIDR option for kube controller service (string)\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra arguments for scheduler service (map)\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n"
                },
                "serviceClusterIpRange": {
                    "type": "string",
                    "description": "Service Cluster ip Range option for kube controller service (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCidr",
                        "extraArgs",
                        "image",
                        "serviceClusterIpRange"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesKubelet:ClusterRkeConfigServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string",
                    "description": "Cluster DNS Server option for kubelet service (string)\n"
                },
                "clusterDomain": {
                    "type": "string",
                    "description": "Cluster Domain option for kubelet service (string)\n"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra arguments for scheduler service (map)\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n"
                },
                "failSwapOn": {
                    "type": "boolean",
                    "description": "Enable or disable failing when swap on is not supported (bool)\n"
                },
                "generateServingCertificate": {
                    "type": "boolean",
                    "description": "[Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n"
                },
                "infraContainerImage": {
                    "type": "string",
                    "description": "Infra container image for kubelet service (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterDnsServer",
                        "clusterDomain",
                        "extraArgs",
                        "failSwapOn",
                        "image",
                        "infraContainerImage"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesKubeproxy:ClusterRkeConfigServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra arguments for scheduler service (map)\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigServicesScheduler:ClusterRkeConfigServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra arguments for scheduler service (map)\n"
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra binds for scheduler service (list)\n"
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra environment for scheduler service (list)\n"
                },
                "image": {
                    "type": "string",
                    "description": "Docker image for scheduler service (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigUpgradeStrategy:ClusterRkeConfigUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean",
                    "description": "RKE drain nodes. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "drainInput": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfigUpgradeStrategyDrainInput:ClusterRkeConfigUpgradeStrategyDrainInput",
                    "description": "RKE drain node input (list Maxitems: 1)\n"
                },
                "maxUnavailableControlplane": {
                    "type": "string",
                    "description": "RKE max unavailable controlplane nodes. Default: \u003cspan pulumi-lang-nodejs=\"`1`\" pulumi-lang-dotnet=\"`1`\" pulumi-lang-go=\"`1`\" pulumi-lang-python=\"`1`\" pulumi-lang-yaml=\"`1`\" pulumi-lang-java=\"`1`\"\u003e`1`\u003c/span\u003e (string)\n"
                },
                "maxUnavailableWorker": {
                    "type": "string",
                    "description": "RKE max unavailable worker nodes. Default: `10%` (string)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "drainInput"
                    ]
                }
            }
        },
        "rancher2:index/ClusterRkeConfigUpgradeStrategyDrainInput:ClusterRkeConfigUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean",
                    "description": "Delete RKE node local data. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "Force RKE node drain. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "gracePeriod": {
                    "type": "integer",
                    "description": "RKE node drain grace period. Default: `-1` (int)\n"
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "description": "Ignore RKE daemon sets. Default: \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "RKE node drain timeout. Default: \u003cspan pulumi-lang-nodejs=\"`60`\" pulumi-lang-dotnet=\"`60`\" pulumi-lang-go=\"`60`\" pulumi-lang-python=\"`60`\" pulumi-lang-yaml=\"`60`\" pulumi-lang-java=\"`60`\"\u003e`60`\u003c/span\u003e (int)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterSyncNode:ClusterSyncNode": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource\n"
                },
                "capacity": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The total resources of a node (map).\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster ID that is syncing (string)\n"
                },
                "externalIpAddress": {
                    "type": "string",
                    "description": "The external IP address of the node (string).\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the node (string).\n"
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource. Same as \u003cspan pulumi-lang-nodejs=\"`clusterId`\" pulumi-lang-dotnet=\"`ClusterId`\" pulumi-lang-go=\"`clusterId`\" pulumi-lang-python=\"`cluster_id`\" pulumi-lang-yaml=\"`clusterId`\" pulumi-lang-java=\"`clusterId`\"\u003e`cluster_id`\u003c/span\u003e (string)\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The private IP address of the node (string).\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the node (string).\n"
                },
                "nodePoolId": {
                    "type": "string",
                    "description": "The Node Pool ID of the node (string).\n"
                },
                "nodeTemplateId": {
                    "type": "string",
                    "description": "The Node Template ID of the node (string).\n"
                },
                "providerId": {
                    "type": "string",
                    "description": "The Provider ID of the node (string).\n"
                },
                "requestedHostname": {
                    "type": "string",
                    "description": "The requested hostname (string).\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles of the node. \u003cspan pulumi-lang-nodejs=\"`controlplane`\" pulumi-lang-dotnet=\"`Controlplane`\" pulumi-lang-go=\"`controlplane`\" pulumi-lang-python=\"`controlplane`\" pulumi-lang-yaml=\"`controlplane`\" pulumi-lang-java=\"`controlplane`\"\u003e`controlplane`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`etcd`\" pulumi-lang-dotnet=\"`Etcd`\" pulumi-lang-go=\"`etcd`\" pulumi-lang-python=\"`etcd`\" pulumi-lang-yaml=\"`etcd`\" pulumi-lang-java=\"`etcd`\"\u003e`etcd`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`worker`\" pulumi-lang-dotnet=\"`Worker`\" pulumi-lang-go=\"`worker`\" pulumi-lang-python=\"`worker`\" pulumi-lang-yaml=\"`worker`\" pulumi-lang-java=\"`worker`\"\u003e`worker`\u003c/span\u003e. (list)\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "The user to connect to the node (string).\n",
                    "secret": true
                },
                "systemInfo": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "General information about the node, such as kernel version, kubelet and kube-proxy version, Docker version (if used), and OS name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "capacity",
                        "clusterId",
                        "externalIpAddress",
                        "hostname",
                        "id",
                        "ipAddress",
                        "labels",
                        "name",
                        "nodePoolId",
                        "nodeTemplateId",
                        "providerId",
                        "requestedHostname",
                        "roles",
                        "sshUser",
                        "systemInfo"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateMember:ClusterTemplateMember": {
            "properties": {
                "accessType": {
                    "type": "string",
                    "description": "Member access type: member, owner, read-only\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "Member group principal id\n"
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "Member user principal id\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevision:ClusterTemplateTemplateRevision": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the cluster template (map)\n"
                },
                "clusterConfig": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfig:ClusterTemplateTemplateRevisionClusterConfig",
                    "description": "Cluster configuration\n"
                },
                "clusterTemplateId": {
                    "type": "string",
                    "description": "Cluster template ID\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Default cluster template revision\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision\n"
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the cluster template (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionQuestion:ClusterTemplateTemplateRevisionQuestion"
                    },
                    "description": "Cluster template questions\n"
                }
            },
            "type": "object",
            "required": [
                "clusterConfig",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "clusterConfig",
                        "clusterTemplateId",
                        "id",
                        "labels",
                        "name"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfig:ClusterTemplateTemplateRevisionClusterConfig": {
            "properties": {
                "clusterAuthEndpoint": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint:ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint",
                    "description": "Local cluster auth endpoint\n"
                },
                "defaultClusterRoleForProjectMembers": {
                    "type": "string",
                    "description": "Default cluster role for project members\n"
                },
                "defaultPodSecurityAdmissionConfigurationTemplateName": {
                    "type": "string",
                    "description": "Default pod security admission configuration template name\n"
                },
                "desiredAgentImage": {
                    "type": "string",
                    "description": "Desired agent image\n"
                },
                "desiredAuthImage": {
                    "type": "string",
                    "description": "Desired auth image\n"
                },
                "dockerRootDir": {
                    "type": "string",
                    "description": "Docker Root Dir\n"
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "description": "Enable project network isolation\n"
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfig",
                    "description": "Rancher Kubernetes Engine Config\n"
                },
                "windowsPreferedCluster": {
                    "type": "boolean",
                    "description": "Windows prefered cluster\n"
                }
            },
            "type": "object",
            "required": [
                "rkeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterAuthEndpoint",
                        "defaultClusterRoleForProjectMembers",
                        "defaultPodSecurityAdmissionConfigurationTemplateName",
                        "desiredAgentImage",
                        "desiredAuthImage",
                        "dockerRootDir",
                        "rkeConfig"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint:ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "fqdn": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfig": {
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "description": "Optional duration in seconds of addon job.\n"
                },
                "addons": {
                    "type": "string",
                    "description": "Optional addons descripton to deploy on rke cluster.\n"
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional addons yaml manisfest to deploy on rke cluster.\n"
                },
                "authentication": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication:ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication",
                    "description": "Kubernetes cluster authentication\n"
                },
                "authorization": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization:ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization",
                    "description": "Kubernetes cluster authorization\n"
                },
                "bastionHost": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost:ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost",
                    "description": "RKE bastion host\n"
                },
                "cloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider"
                },
                "dns": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDns:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDns"
                },
                "enableCriDockerd": {
                    "type": "boolean",
                    "description": "Enable/disable using cri-dockerd\n"
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "description": "Optional ignore docker version on nodes\n"
                },
                "ingress": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress",
                    "description": "Kubernetes ingress configuration\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "Optional kubernetes version to deploy\n"
                },
                "monitoring": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring",
                    "description": "Kubernetes cluster monitoring\n"
                },
                "network": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork",
                    "description": "Kubernetes cluster networking\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNode:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNode"
                    },
                    "description": "Optional RKE cluster nodes\n"
                },
                "prefixPath": {
                    "type": "string",
                    "description": "Optional prefix to customize kubernetes path\n"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry:ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry"
                    },
                    "description": "Optional private registries for docker images\n"
                },
                "services": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServices:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServices",
                    "description": "Kubernetes cluster services\n"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "Optional use ssh agent auth\n"
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "Optional cluster level SSH certificate path\n"
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "Optional cluster level SSH private key path\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy",
                    "description": "RKE upgrade strategy\n"
                },
                "winPrefixPath": {
                    "type": "string",
                    "description": "Optional prefix to customize kubernetes path for windows\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addonJobTimeout",
                        "authentication",
                        "authorization",
                        "bastionHost",
                        "cloudProvider",
                        "dns",
                        "ingress",
                        "kubernetesVersion",
                        "monitoring",
                        "network",
                        "prefixPath",
                        "services",
                        "sshCertPath",
                        "sshKeyPath",
                        "upgradeStrategy",
                        "winPrefixPath"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication:ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "strategy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sans",
                        "strategy"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization:ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost:ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "sshAgentAuth": {
                    "type": "boolean"
                },
                "sshKey": {
                    "type": "string",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "sshKey",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider": {
            "properties": {
                "awsCloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider"
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider"
                },
                "customCloudProvider": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider"
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customCloudProvider"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal"
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "global"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean"
                },
                "disableStrictZoneCheck": {
                    "type": "boolean"
                },
                "elbSecurityGroup": {
                    "type": "string"
                },
                "kubernetesClusterId": {
                    "type": "string"
                },
                "kubernetesClusterTag": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                },
                "routeTableId": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "vpc": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "elbSecurityGroup",
                        "kubernetesClusterId",
                        "kubernetesClusterTag",
                        "roleArn",
                        "routeTableId",
                        "subnetId",
                        "vpc",
                        "zone"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "region": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "signingMethod": {
                    "type": "string"
                },
                "signingName": {
                    "type": "string"
                },
                "signingRegion": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "service"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "region",
                        "service",
                        "signingMethod",
                        "signingName",
                        "signingRegion",
                        "url"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "secret": true
                },
                "aadClientCertPath": {
                    "type": "string"
                },
                "aadClientId": {
                    "type": "string",
                    "secret": true
                },
                "aadClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "cloud": {
                    "type": "string"
                },
                "cloudProviderBackoff": {
                    "type": "boolean"
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer"
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer"
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer"
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer"
                },
                "cloudProviderRateLimit": {
                    "type": "boolean"
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer"
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer"
                },
                "loadBalancerSku": {
                    "type": "string",
                    "description": "Load balancer type (basic | standard). Must be standard for auto-scaling\n"
                },
                "location": {
                    "type": "string"
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer"
                },
                "primaryAvailabilitySetName": {
                    "type": "string"
                },
                "primaryScaleSetName": {
                    "type": "string"
                },
                "resourceGroup": {
                    "type": "string"
                },
                "routeTableName": {
                    "type": "string"
                },
                "securityGroupName": {
                    "type": "string"
                },
                "subnetName": {
                    "type": "string"
                },
                "subscriptionId": {
                    "type": "string",
                    "secret": true
                },
                "tenantId": {
                    "type": "string",
                    "secret": true
                },
                "useInstanceMetadata": {
                    "type": "boolean"
                },
                "useManagedIdentityExtension": {
                    "type": "boolean"
                },
                "vmType": {
                    "type": "string"
                },
                "vnetName": {
                    "type": "string"
                },
                "vnetResourceGroup": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "aadClientId",
                "aadClientSecret",
                "subscriptionId",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aadClientCertPassword",
                        "aadClientCertPath",
                        "aadClientId",
                        "aadClientSecret",
                        "cloud",
                        "cloudProviderBackoff",
                        "cloudProviderBackoffDuration",
                        "cloudProviderBackoffExponent",
                        "cloudProviderBackoffJitter",
                        "cloudProviderBackoffRetries",
                        "cloudProviderRateLimit",
                        "cloudProviderRateLimitBucket",
                        "cloudProviderRateLimitQps",
                        "location",
                        "maximumLoadBalancerRuleCount",
                        "primaryAvailabilitySetName",
                        "primaryScaleSetName",
                        "resourceGroup",
                        "routeTableName",
                        "securityGroupName",
                        "subnetName",
                        "subscriptionId",
                        "tenantId",
                        "useInstanceMetadata",
                        "useManagedIdentityExtension",
                        "vmType",
                        "vnetName",
                        "vnetResourceGroup"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage"
                },
                "global": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal"
                },
                "loadBalancer": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer"
                },
                "metadata": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata"
                },
                "route": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute"
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockStorage",
                        "global",
                        "loadBalancer",
                        "metadata",
                        "route"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string"
                },
                "ignoreVolumeAz": {
                    "type": "boolean"
                },
                "trustDevicePath": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bsVersion",
                        "ignoreVolumeAz",
                        "trustDevicePath"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string"
                },
                "caFile": {
                    "type": "string"
                },
                "domainId": {
                    "type": "string",
                    "secret": true
                },
                "domainName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "region": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "secret": true
                },
                "tenantName": {
                    "type": "string"
                },
                "trustId": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authUrl",
                        "caFile",
                        "domainId",
                        "domainName",
                        "password",
                        "region",
                        "tenantId",
                        "tenantName",
                        "trustId",
                        "username"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean"
                },
                "floatingNetworkId": {
                    "type": "string"
                },
                "lbMethod": {
                    "type": "string"
                },
                "lbProvider": {
                    "type": "string"
                },
                "lbVersion": {
                    "type": "string"
                },
                "manageSecurityGroups": {
                    "type": "boolean"
                },
                "monitorDelay": {
                    "type": "string"
                },
                "monitorMaxRetries": {
                    "type": "integer"
                },
                "monitorTimeout": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "useOctavia": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createMonitor",
                        "floatingNetworkId",
                        "lbMethod",
                        "lbProvider",
                        "lbVersion",
                        "manageSecurityGroups",
                        "subnetId",
                        "useOctavia"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer"
                },
                "searchOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "requestTimeout",
                        "searchOrder"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "routerId"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk"
                },
                "global": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal"
                },
                "network": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork"
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter"
                    }
                },
                "workspace": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace"
                }
            },
            "type": "object",
            "required": [
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disk",
                        "global",
                        "network",
                        "virtualCenters",
                        "workspace"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scsiControllerType"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenters": {
                    "type": "string"
                },
                "gracefulShutdownTimeout": {
                    "type": "string"
                },
                "insecureFlag": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters",
                        "insecureFlag",
                        "password",
                        "port",
                        "soapRoundtripCount",
                        "user"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "publicNetwork"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenters",
                        "name",
                        "password",
                        "port",
                        "soapRoundtripCount",
                        "user"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace:ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string"
                },
                "defaultDatastore": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "resourcepoolPath": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "folder",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenter",
                        "defaultDatastore",
                        "folder",
                        "resourcepoolPath",
                        "server"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDns:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDns": {
            "properties": {
                "linearAutoscalerParams": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParams:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParams",
                    "description": "Linear Autoscaler Params\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nodelocal": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal",
                    "description": "Nodelocal dns\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsToleration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsToleration"
                    },
                    "description": "DNS service tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategy",
                    "description": "Update deployment strategy\n"
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nodeSelector",
                        "options",
                        "reverseCidrs",
                        "upstreamNameservers"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParams:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParams": {
            "properties": {
                "coresPerReplica": {
                    "type": "number"
                },
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                },
                "nodesPerReplica": {
                    "type": "number"
                },
                "preventSinglePointFailure": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Node selector key pair\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsToleration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdate:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdate:ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress": {
            "properties": {
                "defaultBackend": {
                    "type": "boolean"
                },
                "dnsPolicy": {
                    "type": "string"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "httpPort": {
                    "type": "integer"
                },
                "httpsPort": {
                    "type": "integer"
                },
                "networkMode": {
                    "type": "string"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressToleration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressToleration"
                    },
                    "description": "Ingress add-on tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategy",
                    "description": "Update daemon set strategy\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dnsPolicy",
                        "extraArgs",
                        "httpPort",
                        "httpsPort",
                        "networkMode",
                        "nodeSelector",
                        "options",
                        "provider"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressToleration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdate:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdate:ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdate": {
            "properties": {
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringToleration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringToleration"
                    },
                    "description": "Monitoring add-on tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy",
                    "description": "Update deployment strategy\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options",
                        "provider",
                        "replicas"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringToleration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate:ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork": {
            "properties": {
                "aciNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProvider"
                },
                "calicoNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider"
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider"
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider"
                },
                "mtu": {
                    "type": "integer"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "plugin": {
                    "type": "string"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkToleration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkToleration"
                    },
                    "description": "Network add-on tolerations\n"
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "options",
                        "plugin"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProvider": {
            "properties": {
                "aep": {
                    "type": "string"
                },
                "apicHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "apicRefreshTickerAdjust": {
                    "type": "string"
                },
                "apicRefreshTime": {
                    "type": "string"
                },
                "apicSubscriptionDelay": {
                    "type": "string"
                },
                "apicUserCrt": {
                    "type": "string",
                    "secret": true
                },
                "apicUserKey": {
                    "type": "string",
                    "secret": true
                },
                "apicUserName": {
                    "type": "string"
                },
                "capic": {
                    "type": "string"
                },
                "controllerLogLevel": {
                    "type": "string"
                },
                "disablePeriodicSnatGlobalInfoSync": {
                    "type": "string"
                },
                "disableWaitForNetwork": {
                    "type": "string"
                },
                "dropLogEnable": {
                    "type": "string"
                },
                "durationWaitForNetwork": {
                    "type": "string"
                },
                "enableEndpointSlice": {
                    "type": "string"
                },
                "encapType": {
                    "type": "string"
                },
                "epRegistry": {
                    "type": "string"
                },
                "externDynamic": {
                    "type": "string"
                },
                "externStatic": {
                    "type": "string"
                },
                "gbpPodSubnet": {
                    "type": "string"
                },
                "hostAgentLogLevel": {
                    "type": "string"
                },
                "imagePullPolicy": {
                    "type": "string"
                },
                "imagePullSecret": {
                    "type": "string"
                },
                "infraVlan": {
                    "type": "string"
                },
                "installIstio": {
                    "type": "string"
                },
                "istioProfile": {
                    "type": "string"
                },
                "kafkaBrokers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "kafkaClientCrt": {
                    "type": "string"
                },
                "kafkaClientKey": {
                    "type": "string"
                },
                "kubeApiVlan": {
                    "type": "string"
                },
                "l3out": {
                    "type": "string"
                },
                "l3outExternalNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxNodesSvcGraph": {
                    "type": "string"
                },
                "mcastRangeEnd": {
                    "type": "string"
                },
                "mcastRangeStart": {
                    "type": "string"
                },
                "mtuHeadRoom": {
                    "type": "string"
                },
                "multusDisable": {
                    "type": "string"
                },
                "noPriorityClass": {
                    "type": "string"
                },
                "nodePodIfEnable": {
                    "type": "string"
                },
                "nodeSubnet": {
                    "type": "string"
                },
                "nodeSvcSubnet": {
                    "type": "string"
                },
                "opflexClientSsl": {
                    "type": "string"
                },
                "opflexDeviceDeleteTimeout": {
                    "type": "string"
                },
                "opflexLogLevel": {
                    "type": "string"
                },
                "opflexMode": {
                    "type": "string"
                },
                "opflexServerPort": {
                    "type": "string"
                },
                "overlayVrfName": {
                    "type": "string"
                },
                "ovsMemoryLimit": {
                    "type": "string"
                },
                "pbrTrackingNonSnat": {
                    "type": "string"
                },
                "podSubnetChunkSize": {
                    "type": "string"
                },
                "runGbpContainer": {
                    "type": "string"
                },
                "runOpflexServerContainer": {
                    "type": "string"
                },
                "serviceMonitorInterval": {
                    "type": "string"
                },
                "serviceVlan": {
                    "type": "string"
                },
                "snatContractScope": {
                    "type": "string"
                },
                "snatNamespace": {
                    "type": "string"
                },
                "snatPortRangeEnd": {
                    "type": "string"
                },
                "snatPortRangeStart": {
                    "type": "string"
                },
                "snatPortsPerNode": {
                    "type": "string"
                },
                "sriovEnable": {
                    "type": "string"
                },
                "subnetDomainName": {
                    "type": "string"
                },
                "systemId": {
                    "type": "string"
                },
                "tenant": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "useAciAnywhereCrd": {
                    "type": "string"
                },
                "useAciCniPriorityClass": {
                    "type": "string"
                },
                "useClusterRole": {
                    "type": "string"
                },
                "useHostNetnsVolume": {
                    "type": "string"
                },
                "useOpflexServerVolume": {
                    "type": "string"
                },
                "usePrivilegedContainer": {
                    "type": "string"
                },
                "vmmController": {
                    "type": "string"
                },
                "vmmDomain": {
                    "type": "string"
                },
                "vrfName": {
                    "type": "string"
                },
                "vrfTenant": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "aep",
                "apicHosts",
                "apicUserCrt",
                "apicUserKey",
                "apicUserName",
                "encapType",
                "externDynamic",
                "externStatic",
                "kubeApiVlan",
                "l3out",
                "l3outExternalNetworks",
                "mcastRangeEnd",
                "mcastRangeStart",
                "nodeSubnet",
                "nodeSvcSubnet",
                "serviceVlan",
                "systemId",
                "token",
                "vrfName",
                "vrfTenant"
            ]
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cloudProvider"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "iface"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkToleration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password"
            ]
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigNode:ClusterTemplateTemplateRevisionClusterConfigRkeConfigNode": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "dockerSocket": {
                    "type": "string"
                },
                "hostnameOverride": {
                    "type": "string"
                },
                "internalAddress": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the cluster template (map)\n"
                },
                "nodeId": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean"
                },
                "sshKey": {
                    "type": "string",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "address",
                "roles",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "dockerSocket",
                        "roles",
                        "sshKey",
                        "sshKeyPath",
                        "user"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry:ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry": {
            "properties": {
                "ecrCredentialPlugin": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPlugin:ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPlugin",
                    "description": "ECR credential plugin config\n"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPlugin:ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPlugin": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "secret": true
                },
                "awsSessionToken": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServices:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd"
                },
                "kubeApi": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi"
                },
                "kubeController": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController"
                },
                "kubelet": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet"
                },
                "kubeproxy": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy"
                },
                "scheduler": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "etcd",
                        "kubeApi",
                        "kubeController",
                        "kubelet",
                        "kubeproxy",
                        "scheduler"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig"
                },
                "caCert": {
                    "type": "string"
                },
                "cert": {
                    "type": "string",
                    "secret": true
                },
                "creation": {
                    "type": "string"
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gid": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "path": {
                    "type": "string"
                },
                "retention": {
                    "type": "string"
                },
                "snapshot": {
                    "type": "boolean"
                },
                "uid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backupConfig",
                        "caCert",
                        "cert",
                        "creation",
                        "extraArgs",
                        "image",
                        "key",
                        "path",
                        "retention",
                        "snapshot"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "intervalHours": {
                    "type": "integer"
                },
                "retention": {
                    "type": "integer"
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig"
                },
                "safeTimestamp": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeout"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "secret": true
                },
                "bucketName": {
                    "type": "string"
                },
                "customCa": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ]
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi": {
            "properties": {
                "admissionConfiguration": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfiguration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfiguration",
                    "description": "Cluster admission configuration\n"
                },
                "alwaysPullImages": {
                    "type": "boolean"
                },
                "auditLog": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog"
                },
                "eventRateLimit": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig"
                },
                "serviceClusterIpRange": {
                    "type": "string"
                },
                "serviceNodePortRange": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image",
                        "serviceClusterIpRange",
                        "serviceNodePortRange"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfiguration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfiguration": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Admission configuration ApiVersion\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Admission configuration Kind\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPlugin:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPlugin"
                    },
                    "description": "Admission configuration plugins\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "plugins"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPlugin:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPlugin": {
            "properties": {
                "configuration": {
                    "type": "string",
                    "description": "Plugin configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "path": {
                    "type": "string",
                    "description": "Plugin path\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration",
                        "name"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string"
                },
                "maxAge": {
                    "type": "integer"
                },
                "maxBackup": {
                    "type": "integer"
                },
                "maxSize": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "policy"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configuration"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "serviceClusterIpRange": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCidr",
                        "extraArgs",
                        "image",
                        "serviceClusterIpRange"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string"
                },
                "clusterDomain": {
                    "type": "string"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failSwapOn": {
                    "type": "boolean"
                },
                "generateServingCertificate": {
                    "type": "boolean"
                },
                "image": {
                    "type": "string"
                },
                "infraContainerImage": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterDnsServer",
                        "clusterDomain",
                        "extraArgs",
                        "failSwapOn",
                        "image",
                        "infraContainerImage"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler:ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extraArgs",
                        "image"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy:ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean"
                },
                "drainInput": {
                    "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput:ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput"
                },
                "maxUnavailableControlplane": {
                    "type": "string"
                },
                "maxUnavailableWorker": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "drainInput"
                    ]
                }
            }
        },
        "rancher2:index/ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput:ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean"
                },
                "force": {
                    "type": "boolean"
                },
                "gracePeriod": {
                    "type": "integer"
                },
                "ignoreDaemonSets": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterTemplateTemplateRevisionQuestion:ClusterTemplateTemplateRevisionQuestion": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "Default variable value\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Required variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Variable type\n"
                },
                "variable": {
                    "type": "string",
                    "description": "Variable name\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "variable"
            ]
        },
        "rancher2:index/ClusterV2AgentEnvVar:ClusterV2AgentEnvVar": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The taint value.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "rancher2:index/ClusterV2ClusterAgentDeploymentCustomization:ClusterV2ClusterAgentDeploymentCustomization": {
            "properties": {
                "appendTolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationAppendToleration:ClusterV2ClusterAgentDeploymentCustomizationAppendToleration"
                    },
                    "description": "User defined tolerations to append to agent\n"
                },
                "overrideAffinity": {
                    "type": "string",
                    "description": "User defined affinity to override default agent affinity\n"
                },
                "overrideResourceRequirements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirement:ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirement"
                    },
                    "description": "User defined resource requirements to set on the agent\n"
                },
                "schedulingCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomization:ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomization"
                    },
                    "description": "User defined scheduling customization for the cattle cluster agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationAppendToleration:ClusterV2ClusterAgentDeploymentCustomizationAppendToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The taint effect. Default: `\\\"NoExecute\\\"`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key is the name of the key of the item to retrieve.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\n"
                },
                "seconds": {
                    "type": "integer",
                    "description": "The number of seconds a pod will stay bound to a node with a matching taint.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The taint value.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirement:ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirement": {
            "properties": {
                "cpuLimit": {
                    "type": "string",
                    "description": "The maximum CPU limit for agent\n"
                },
                "cpuRequest": {
                    "type": "string",
                    "description": "The minimum CPU required for agent\n"
                },
                "memoryLimit": {
                    "type": "string",
                    "description": "The maximum memory limit for agent\n"
                },
                "memoryRequest": {
                    "type": "string",
                    "description": "The minimum memory required for agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomization:ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomization": {
            "properties": {
                "podDisruptionBudgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget:ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget"
                    },
                    "description": "The Pod Disruption Budget created for the cattle cluster agent\n"
                },
                "priorityClasses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass:ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass"
                    },
                    "description": "The Priority Class created for the cattle cluster agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget:ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudget": {
            "properties": {
                "maxUnavailable": {
                    "type": "string",
                    "description": "The maximum number of cattle cluster agent replicas that can be down at a given time.\n"
                },
                "minAvailable": {
                    "type": "string",
                    "description": "The minimum number of cattle cluster agent replicas that must be running at a given time.\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass:ClusterV2ClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClass": {
            "properties": {
                "preemptionPolicy": {
                    "type": "string",
                    "description": "The preemption behavior for the cattle cluster agent. Must be either 'PreemptLowerPriority' or 'Never'\n"
                },
                "value": {
                    "type": "integer",
                    "description": "The priority value for the cattle cluster agent. Must be between negative 1 billion and 1 billion.\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "rancher2:index/ClusterV2ClusterRegistrationToken:ClusterV2ClusterRegistrationToken": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Cluster.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID.\n"
                },
                "command": {
                    "type": "string",
                    "description": "Command to execute in an imported k8s cluster.\n"
                },
                "id": {
                    "type": "string",
                    "description": "(Computed, string) The ID of the resource.\n"
                },
                "insecureCommand": {
                    "type": "string",
                    "description": "Insecure command to execute in an imported k8s cluster.\n"
                },
                "insecureNodeCommand": {
                    "type": "string",
                    "description": "Insecure node command to execute in an imported k8s cluster.\n"
                },
                "insecureWindowsNodeCommand": {
                    "type": "string",
                    "description": "Insecure windows command to execute in an imported k8s cluster.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster.\n"
                },
                "manifestUrl": {
                    "type": "string",
                    "description": "K8s manifest url to execute with \u003cspan pulumi-lang-nodejs=\"`kubectl`\" pulumi-lang-dotnet=\"`Kubectl`\" pulumi-lang-go=\"`kubectl`\" pulumi-lang-python=\"`kubectl`\" pulumi-lang-yaml=\"`kubectl`\" pulumi-lang-java=\"`kubectl`\"\u003e`kubectl`\u003c/span\u003e to import an existing k8s cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "nodeCommand": {
                    "type": "string",
                    "description": "Node command to execute in Linux nodes for custom k8s cluster.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token for cluster registration token object.\n",
                    "secret": true
                },
                "windowsNodeCommand": {
                    "type": "string",
                    "description": "Node command to execute in Windows nodes for custom k8s cluster.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "annotations",
                        "clusterId",
                        "command",
                        "id",
                        "insecureCommand",
                        "insecureNodeCommand",
                        "insecureWindowsNodeCommand",
                        "labels",
                        "manifestUrl",
                        "name",
                        "nodeCommand",
                        "token",
                        "windowsNodeCommand"
                    ]
                }
            }
        },
        "rancher2:index/ClusterV2FleetAgentDeploymentCustomization:ClusterV2FleetAgentDeploymentCustomization": {
            "properties": {
                "appendTolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2FleetAgentDeploymentCustomizationAppendToleration:ClusterV2FleetAgentDeploymentCustomizationAppendToleration"
                    },
                    "description": "User defined tolerations to append to agent\n"
                },
                "overrideAffinity": {
                    "type": "string",
                    "description": "User defined affinity to override default agent affinity\n"
                },
                "overrideResourceRequirements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirement:ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirement"
                    },
                    "description": "User defined resource requirements to set on the agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2FleetAgentDeploymentCustomizationAppendToleration:ClusterV2FleetAgentDeploymentCustomizationAppendToleration": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The taint effect. Default: `\\\"NoExecute\\\"`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key is the name of the key of the item to retrieve.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\n"
                },
                "seconds": {
                    "type": "integer",
                    "description": "The number of seconds a pod will stay bound to a node with a matching taint.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The taint value.\n"
                }
            },
            "type": "object",
            "required": [
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "seconds"
                    ]
                }
            }
        },
        "rancher2:index/ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirement:ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirement": {
            "properties": {
                "cpuLimit": {
                    "type": "string",
                    "description": "The maximum CPU limit for agent\n"
                },
                "cpuRequest": {
                    "type": "string",
                    "description": "The minimum CPU required for agent\n"
                },
                "memoryLimit": {
                    "type": "string",
                    "description": "The maximum memory limit for agent\n"
                },
                "memoryRequest": {
                    "type": "string",
                    "description": "The minimum memory required for agent\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2LocalAuthEndpoint:ClusterV2LocalAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string",
                    "description": "CA certs for the authorized cluster endpoint. It is only needed if there is a load balancer in front of the downstream cluster that is using an untrusted certificate. If you have a valid certificate, then nothing needs to be added to the CA Certificates field.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If \u003cspan pulumi-lang-nodejs=\"`enabled`\" pulumi-lang-dotnet=\"`Enabled`\" pulumi-lang-go=\"`enabled`\" pulumi-lang-python=\"`enabled`\" pulumi-lang-yaml=\"`enabled`\" pulumi-lang-java=\"`enabled`\"\u003e`enabled`\u003c/span\u003e is set to true, nodes will be drained before upgrade.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "FQDN for the authorized cluster endpoint. If one is entered, it should point to the downstream cluster.\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfig:ClusterV2RkeConfig": {
            "properties": {
                "additionalManifest": {
                    "type": "string",
                    "description": "Cluster V2 additional manifest\n"
                },
                "chartValues": {
                    "type": "string",
                    "description": "Cluster V2 chart values. It should be in YAML format\n"
                },
                "etcd": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigEtcd:ClusterV2RkeConfigEtcd",
                    "description": "Cluster V2 etcd\n"
                },
                "etcdSnapshotCreate": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigEtcdSnapshotCreate:ClusterV2RkeConfigEtcdSnapshotCreate",
                    "description": "Cluster V2 etcd snapshot create\n"
                },
                "etcdSnapshotRestore": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigEtcdSnapshotRestore:ClusterV2RkeConfigEtcdSnapshotRestore",
                    "description": "Cluster V2 etcd snapshot restore\n"
                },
                "localAuthEndpoint": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigLocalAuthEndpoint:ClusterV2RkeConfigLocalAuthEndpoint",
                    "description": "Local auth endpoint configures the Authorized Cluster Endpoint (ACE) which can be used to directly access the Kubernetes API server, without requiring communication through Rancher. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/register-existing-clusters#authorized-cluster-endpoint-support-for-rke2-and-k3s-clusters).\n",
                    "deprecationMessage": "Use rancher2_cluster_v2.local_auth_endpoint instead"
                },
                "machineGlobalConfig": {
                    "type": "string",
                    "description": "Cluster V2 machine global config\n"
                },
                "machinePoolDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachinePoolDefault:ClusterV2RkeConfigMachinePoolDefault"
                    },
                    "description": "Default values for machine pool configurations if unset\n"
                },
                "machinePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachinePool:ClusterV2RkeConfigMachinePool"
                    },
                    "description": "Cluster V2 machine pools\n"
                },
                "machineSelectorConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorConfig:ClusterV2RkeConfigMachineSelectorConfig"
                    },
                    "description": "Cluster V2 machine selector config\n"
                },
                "machineSelectorFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorFile:ClusterV2RkeConfigMachineSelectorFile"
                    },
                    "description": "Cluster V2 machine selector files\n"
                },
                "registries": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigRegistries:ClusterV2RkeConfigRegistries",
                    "description": "Cluster V2 registries\n"
                },
                "rotateCertificates": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigRotateCertificates:ClusterV2RkeConfigRotateCertificates",
                    "description": "Cluster V2 certificate rotation\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigUpgradeStrategy:ClusterV2RkeConfigUpgradeStrategy",
                    "description": "Cluster V2 upgrade strategy\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "etcd",
                        "machinePoolDefaults",
                        "machinePools",
                        "machineSelectorConfigs",
                        "machineSelectorFiles"
                    ]
                }
            }
        },
        "rancher2:index/ClusterV2RkeConfigEtcd:ClusterV2RkeConfigEtcd": {
            "properties": {
                "disableSnapshots": {
                    "type": "boolean",
                    "description": "Disable ETCD snapshots\n"
                },
                "s3Config": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigEtcdS3Config:ClusterV2RkeConfigEtcdS3Config",
                    "description": "ETCD snapshot S3 config\n"
                },
                "snapshotRetention": {
                    "type": "integer",
                    "description": "ETCD snapshot retention\n"
                },
                "snapshotScheduleCron": {
                    "type": "string",
                    "description": "ETCD snapshot schedule cron (e.g `\"0 */5 * * *\"`)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigEtcdS3Config:ClusterV2RkeConfigEtcdS3Config": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "ETCD snapshot S3 bucket\n"
                },
                "cloudCredentialName": {
                    "type": "string",
                    "description": "ETCD snapshot S3 cloud credential name\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "ETCD snapshot S3 endpoint\n"
                },
                "endpointCa": {
                    "type": "string",
                    "description": "ETCD snapshot S3 endpoint CA\n"
                },
                "folder": {
                    "type": "string",
                    "description": "ETCD snapshot S3 folder\n"
                },
                "region": {
                    "type": "string",
                    "description": "ETCD snapshot S3 region\n"
                },
                "skipSslVerify": {
                    "type": "boolean",
                    "description": "Disable ETCD skip ssl verify\n"
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "endpoint"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigEtcdSnapshotCreate:ClusterV2RkeConfigEtcdSnapshotCreate": {
            "properties": {
                "generation": {
                    "type": "integer",
                    "description": "ETCD generation to initiate a snapshot\n"
                }
            },
            "type": "object",
            "required": [
                "generation"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigEtcdSnapshotRestore:ClusterV2RkeConfigEtcdSnapshotRestore": {
            "properties": {
                "generation": {
                    "type": "integer",
                    "description": "ETCD snapshot desired generation\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "restoreRkeConfig": {
                    "type": "string",
                    "description": "ETCD restore RKE config (set to none, all, or kubernetesVersion)\n"
                }
            },
            "type": "object",
            "required": [
                "generation",
                "name"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigLocalAuthEndpoint:ClusterV2RkeConfigLocalAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string",
                    "description": "CA certs for the authorized cluster endpoint. It is only needed if there is a load balancer in front of the downstream cluster that is using an untrusted certificate. If you have a valid certificate, then nothing needs to be added to the CA Certificates field.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If \u003cspan pulumi-lang-nodejs=\"`enabled`\" pulumi-lang-dotnet=\"`Enabled`\" pulumi-lang-go=\"`enabled`\" pulumi-lang-python=\"`enabled`\" pulumi-lang-yaml=\"`enabled`\" pulumi-lang-java=\"`enabled`\"\u003e`enabled`\u003c/span\u003e is set to true, nodes will be drained before upgrade.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "FQDN for the authorized cluster endpoint. If one is entered, it should point to the downstream cluster.\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigMachinePool:ClusterV2RkeConfigMachinePool": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Cluster.\n"
                },
                "cloudCredentialSecretName": {
                    "type": "string",
                    "description": "Cloud credential secret name is the secret to be used when a cloud credential secret name is not specified at the machine pool level.\n"
                },
                "controlPlaneRole": {
                    "type": "boolean",
                    "description": "Machine pool control plane role\n"
                },
                "drainBeforeDelete": {
                    "type": "boolean",
                    "description": "Machine pool drain before delete\n"
                },
                "etcdRole": {
                    "type": "boolean",
                    "description": "Machine pool etcd role\n"
                },
                "hostnameLengthLimit": {
                    "type": "integer",
                    "description": "maximum length for autogenerated hostname\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster.\n"
                },
                "machineConfig": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachinePoolMachineConfig:ClusterV2RkeConfigMachinePoolMachineConfig",
                    "description": "Machine config data\n"
                },
                "machineLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the machine pool nodes\n"
                },
                "machineOs": {
                    "type": "string",
                    "description": "OS Type in machine pool\n"
                },
                "maxUnhealthy": {
                    "type": "string",
                    "description": "max unhealthy nodes for automated replacement to be allowed\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "nodeDrainTimeout": {
                    "type": "integer",
                    "description": "seconds to wait for machine pool drain to complete before machine deletion\n"
                },
                "nodeStartupTimeoutSeconds": {
                    "type": "integer",
                    "description": "seconds a new node has to become active before it is replaced\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "Machine pool paused\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "Machine pool quantity\n"
                },
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachinePoolRollingUpdate:ClusterV2RkeConfigMachinePoolRollingUpdate",
                    "description": "Machine pool rolling update\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachinePoolTaint:ClusterV2RkeConfigMachinePoolTaint"
                    },
                    "description": "Machine pool taints\n"
                },
                "unhealthyNodeTimeoutSeconds": {
                    "type": "integer",
                    "description": "seconds an unhealthy node has to become active before it is replaced\n"
                },
                "unhealthyRange": {
                    "type": "string",
                    "description": "range of unhealthy nodes for automated replacement to be allowed\n"
                },
                "workerRole": {
                    "type": "boolean",
                    "description": "Machine pool worker role\n"
                }
            },
            "type": "object",
            "required": [
                "machineConfig",
                "name"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigMachinePoolDefault:ClusterV2RkeConfigMachinePoolDefault": {
            "properties": {
                "hostnameLengthLimit": {
                    "type": "integer",
                    "description": "maximum length for autogenerated hostname\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigMachinePoolMachineConfig:ClusterV2RkeConfigMachinePoolMachineConfig": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Machine config API version\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Machine config kind\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigMachinePoolRollingUpdate:ClusterV2RkeConfigMachinePoolRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "string",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "string",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigMachinePoolTaint:ClusterV2RkeConfigMachinePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "The taint effect. Default: `\\\"NoExecute\\\"`.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key is the name of the key of the item to retrieve.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The taint value.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorConfig:ClusterV2RkeConfigMachineSelectorConfig": {
            "properties": {
                "config": {
                    "type": "string",
                    "description": "Machine selector config\n"
                },
                "machineLabelSelector": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelector:ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelector",
                    "description": "Machine label selector\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelector:ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpression:ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpression"
                    },
                    "description": "Label selector match expressions\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Label selector match labels\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpression:ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Label selector requirement key\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Label selector operator\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Label selector requirement values\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorFile:ClusterV2RkeConfigMachineSelectorFile": {
            "properties": {
                "fileSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSource:ClusterV2RkeConfigMachineSelectorFileFileSource"
                    },
                    "description": "File sources\n"
                },
                "machineLabelSelector": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorFileMachineLabelSelector:ClusterV2RkeConfigMachineSelectorFileMachineLabelSelector",
                    "description": "Machine label selector\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSource:ClusterV2RkeConfigMachineSelectorFileFileSource": {
            "properties": {
                "configmap": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSourceConfigmap:ClusterV2RkeConfigMachineSelectorFileFileSourceConfigmap",
                    "description": "The configmap which is the source of files\n"
                },
                "secret": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSourceSecret:ClusterV2RkeConfigMachineSelectorFileFileSourceSecret",
                    "description": "The secret which is the source of files\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSourceConfigmap:ClusterV2RkeConfigMachineSelectorFileFileSourceConfigmap": {
            "properties": {
                "defaultPermissions": {
                    "type": "string",
                    "description": "The default permissions to be applied when they are not set at the item level\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSourceConfigmapItem:ClusterV2RkeConfigMachineSelectorFileFileSourceConfigmapItem"
                    },
                    "description": "Items(files) to retrieve from the K8s object\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSourceConfigmapItem:ClusterV2RkeConfigMachineSelectorFileFileSourceConfigmapItem": {
            "properties": {
                "dynamic": {
                    "type": "boolean",
                    "description": "If ture, the file is ignored when determining whether the node should be drained before updating the node plan (default: true).\n"
                },
                "hash": {
                    "type": "string",
                    "description": "The base64 encoded value of the SHA256 checksum of the file's content\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the item(file) to retrieve\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to put the file in the target node\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The numeric representation of the file permissions\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "path"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSourceSecret:ClusterV2RkeConfigMachineSelectorFileFileSourceSecret": {
            "properties": {
                "defaultPermissions": {
                    "type": "string",
                    "description": "The default permissions to be applied when they are not set at the item level\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItem:ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItem"
                    },
                    "description": "Items(files) to retrieve from the K8s object\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItem:ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItem": {
            "properties": {
                "dynamic": {
                    "type": "boolean",
                    "description": "If ture, the file is ignored when determining whether the node should be drained before updating the node plan (default: true).\n"
                },
                "hash": {
                    "type": "string",
                    "description": "The base64 encoded value of the SHA256 checksum of the file's content\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the item(file) to retrieve\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to put the file in the target node\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The numeric representation of the file permissions\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "path"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorFileMachineLabelSelector:ClusterV2RkeConfigMachineSelectorFileMachineLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigMachineSelectorFileMachineLabelSelectorMatchExpression:ClusterV2RkeConfigMachineSelectorFileMachineLabelSelectorMatchExpression"
                    },
                    "description": "Label selector match expressions\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Label selector match labels\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigMachineSelectorFileMachineLabelSelectorMatchExpression:ClusterV2RkeConfigMachineSelectorFileMachineLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Label selector requirement key\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Label selector operator\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Label selector requirement values\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigRegistries:ClusterV2RkeConfigRegistries": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigRegistriesConfig:ClusterV2RkeConfigRegistriesConfig"
                    },
                    "description": "Registry config\n"
                },
                "mirrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfigRegistriesMirror:ClusterV2RkeConfigRegistriesMirror"
                    },
                    "description": "Registry mirrors\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigRegistriesConfig:ClusterV2RkeConfigRegistriesConfig": {
            "properties": {
                "authConfigSecretName": {
                    "type": "string",
                    "description": "Registry auth config secret name\n"
                },
                "caBundle": {
                    "type": "string",
                    "description": "Registry CA bundle\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Registry hostname\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Registry insecure connectivity\n"
                },
                "tlsSecretName": {
                    "type": "string",
                    "description": "Registry TLS secret name. TLS is a pair of Cert/Key\n"
                }
            },
            "type": "object",
            "required": [
                "hostname"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigRegistriesMirror:ClusterV2RkeConfigRegistriesMirror": {
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Registry mirror endpoints\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Registry hostname\n"
                },
                "rewrites": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Registry mirror rewrites\n"
                }
            },
            "type": "object",
            "required": [
                "hostname"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigRotateCertificates:ClusterV2RkeConfigRotateCertificates": {
            "properties": {
                "generation": {
                    "type": "integer",
                    "description": "Desired certificate rotation generation.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Service certificates to rotate with this generation.\n"
                }
            },
            "type": "object",
            "required": [
                "generation"
            ]
        },
        "rancher2:index/ClusterV2RkeConfigUpgradeStrategy:ClusterV2RkeConfigUpgradeStrategy": {
            "properties": {
                "controlPlaneConcurrency": {
                    "type": "string",
                    "description": "How many controlplane nodes should be upgrade at time, 0 is infinite. Percentages are also accepted\n"
                },
                "controlPlaneDrainOptions": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptions:ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptions",
                    "description": "Controlplane nodes drain options\n"
                },
                "workerConcurrency": {
                    "type": "string",
                    "description": "How many worker nodes should be upgrade at time\n"
                },
                "workerDrainOptions": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions:ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions",
                    "description": "Worker nodes drain options\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptions:ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptions": {
            "properties": {
                "deleteEmptyDirData": {
                    "type": "boolean",
                    "description": "Drain options delete empty dir data\n"
                },
                "disableEviction": {
                    "type": "boolean",
                    "description": "Drain options disable eviction\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Drain options enabled?\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "Drain options force\n"
                },
                "gracePeriod": {
                    "type": "integer",
                    "description": "Drain options grace period\n"
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "description": "Drain options ignore daemon sets\n"
                },
                "ignoreErrors": {
                    "type": "boolean",
                    "description": "Drain options ignore errors\n"
                },
                "skipWaitForDeleteTimeoutSeconds": {
                    "type": "integer",
                    "description": "Drain options skip wait for delete timeout seconds\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Drain options timeout\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gracePeriod",
                        "skipWaitForDeleteTimeoutSeconds",
                        "timeout"
                    ]
                }
            }
        },
        "rancher2:index/ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions:ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions": {
            "properties": {
                "deleteEmptyDirData": {
                    "type": "boolean",
                    "description": "Drain options delete empty dir data\n"
                },
                "disableEviction": {
                    "type": "boolean",
                    "description": "Drain options disable eviction\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Drain options enabled?\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "Drain options force\n"
                },
                "gracePeriod": {
                    "type": "integer",
                    "description": "Drain options grace period\n"
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "description": "Drain options ignore daemon sets\n"
                },
                "ignoreErrors": {
                    "type": "boolean",
                    "description": "Drain options ignore errors\n"
                },
                "skipWaitForDeleteTimeoutSeconds": {
                    "type": "integer",
                    "description": "Drain options skip wait for delete timeout seconds\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Drain options timeout\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gracePeriod",
                        "skipWaitForDeleteTimeoutSeconds",
                        "timeout"
                    ]
                }
            }
        },
        "rancher2:index/EtcdBackupBackupConfig:EtcdBackupBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable etcd backup (bool)\n"
                },
                "intervalHours": {
                    "type": "integer",
                    "description": "Interval hours for etcd backup. Default \u003cspan pulumi-lang-nodejs=\"`12`\" pulumi-lang-dotnet=\"`12`\" pulumi-lang-go=\"`12`\" pulumi-lang-python=\"`12`\" pulumi-lang-yaml=\"`12`\" pulumi-lang-java=\"`12`\"\u003e`12`\u003c/span\u003e (int)\n"
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention for etcd backup. Default \u003cspan pulumi-lang-nodejs=\"`6`\" pulumi-lang-dotnet=\"`6`\" pulumi-lang-go=\"`6`\" pulumi-lang-python=\"`6`\" pulumi-lang-yaml=\"`6`\" pulumi-lang-java=\"`6`\"\u003e`6`\u003c/span\u003e (int)\n"
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:index/EtcdBackupBackupConfigS3BackupConfig:EtcdBackupBackupConfigS3BackupConfig",
                    "description": "S3 config options for etcd backup. Valid for \u003cspan pulumi-lang-nodejs=\"`imported`\" pulumi-lang-dotnet=\"`Imported`\" pulumi-lang-go=\"`imported`\" pulumi-lang-python=\"`imported`\" pulumi-lang-yaml=\"`imported`\" pulumi-lang-java=\"`imported`\"\u003e`imported`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rke`\" pulumi-lang-dotnet=\"`Rke`\" pulumi-lang-go=\"`rke`\" pulumi-lang-python=\"`rke`\" pulumi-lang-yaml=\"`rke`\" pulumi-lang-java=\"`rke`\"\u003e`rke`\u003c/span\u003e clusters. (list maxitems:1)\n"
                },
                "safeTimestamp": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeout"
                    ]
                }
            }
        },
        "rancher2:index/EtcdBackupBackupConfigS3BackupConfig:EtcdBackupBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access key for S3 service (string)\n",
                    "secret": true
                },
                "bucketName": {
                    "type": "string",
                    "description": "Bucket name for S3 service (string)\n"
                },
                "customCa": {
                    "type": "string",
                    "description": "Base64 encoded custom CA for S3 service. Use filebase64(\u003cFILE\u003e) for encoding file. Available from Rancher v2.2.5 (string)\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint for S3 service (string)\n"
                },
                "folder": {
                    "type": "string",
                    "description": "Folder for S3 service. Available from Rancher v2.2.7 (string)\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region for S3 service (string)\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key for S3 service (string)\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ]
        },
        "rancher2:index/GlobalRoleRule:GlobalRoleRule": {
            "properties": {
                "apiGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule api groups\n"
                },
                "nonResourceUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule non resource urls\n"
                },
                "resourceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resource names\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resources\n"
                },
                "verbs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule verbs\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/MachineConfigV2Amazonec2Config:MachineConfigV2Amazonec2Config": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS Access Key\n",
                    "secret": true
                },
                "ami": {
                    "type": "string",
                    "description": "AWS machine image\n"
                },
                "blockDurationMinutes": {
                    "type": "string",
                    "description": "AWS spot instance duration in minutes (60, 120, 180, 240, 300, or 360)\n"
                },
                "deviceName": {
                    "type": "string",
                    "description": "AWS root device name\n"
                },
                "encryptEbsVolume": {
                    "type": "boolean",
                    "description": "Encrypt EBS volume\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Optional endpoint URL (hostname only or fully qualified URI)\n"
                },
                "httpEndpoint": {
                    "type": "string",
                    "description": "Enables or disables the HTTP metadata endpoint on your instances\n"
                },
                "httpTokens": {
                    "type": "string",
                    "description": "The state of token usage for your instance metadata requests\n"
                },
                "iamInstanceProfile": {
                    "type": "string",
                    "description": "AWS IAM Instance Profile\n"
                },
                "insecureTransport": {
                    "type": "boolean",
                    "description": "Disable SSL when sending requests\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "AWS instance type\n"
                },
                "kmsKey": {
                    "type": "string",
                    "description": "Custom KMS key ID using the AWS Managed CMK\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Set this flag to enable CloudWatch monitoring\n"
                },
                "openPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Make the specified port number accessible from the Internet\n"
                },
                "privateAddressOnly": {
                    "type": "boolean",
                    "description": "Only use a private IP address\n"
                },
                "region": {
                    "type": "string",
                    "description": "AWS Region\n"
                },
                "requestSpotInstance": {
                    "type": "boolean",
                    "description": "Set this flag to request spot instance\n"
                },
                "retries": {
                    "type": "string",
                    "description": "Set retry count for recoverable failures (use -1 to disable)\n"
                },
                "rootSize": {
                    "type": "string",
                    "description": "AWS root disk size (in GB)\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "AWS Secret Key\n",
                    "secret": true
                },
                "securityGroupReadonly": {
                    "type": "boolean",
                    "description": "Skip adding default rules to security groups\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AWS VPC security group\n"
                },
                "sessionToken": {
                    "type": "string",
                    "description": "AWS Session Token\n",
                    "secret": true
                },
                "spotPrice": {
                    "type": "string",
                    "description": "AWS spot instance bid price (in dollar)\n"
                },
                "sshKeyContents": {
                    "type": "string",
                    "description": "SSH Key file contents for sshKeyContents\n",
                    "secret": true
                },
                "sshUser": {
                    "type": "string",
                    "description": "Set the name of the ssh user\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "AWS VPC subnet id\n"
                },
                "tags": {
                    "type": "string",
                    "description": "AWS Tags (e.g. key1,value1,key2,value2)\n"
                },
                "useEbsOptimizedInstance": {
                    "type": "boolean",
                    "description": "Create an EBS optimized instance\n"
                },
                "usePrivateAddress": {
                    "type": "boolean",
                    "description": "Force the usage of private IP address\n"
                },
                "userdata": {
                    "type": "string",
                    "description": "Path to file with cloud-init user data\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Amazon EBS volume type\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "AWS VPC id\n"
                },
                "zone": {
                    "type": "string",
                    "description": "AWS zone for instance (i.e. a,b,c,d,e)\n"
                }
            },
            "type": "object",
            "required": [
                "ami",
                "region",
                "securityGroups",
                "subnetId",
                "vpcId",
                "zone"
            ]
        },
        "rancher2:index/MachineConfigV2AzureConfig:MachineConfigV2AzureConfig": {
            "properties": {
                "acceleratedNetworking": {
                    "type": "boolean",
                    "description": "Use Accelerated Networking when creating a network interface for the Azure VM\n"
                },
                "availabilitySet": {
                    "type": "string",
                    "description": "Azure Availability Set to place the virtual machine into\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "The Availability Zone that the Azure VM should be created in\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Azure Service Principal Account ID (optional, browser auth is used if not specified)\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Azure Service Principal Account password (optional, browser auth is used if not specified)\n",
                    "secret": true
                },
                "customData": {
                    "type": "string",
                    "description": "Path to file with custom-data\n"
                },
                "diskSize": {
                    "type": "string",
                    "description": "Disk size if using managed disk\n"
                },
                "dns": {
                    "type": "string",
                    "description": "A unique DNS label for the public IP adddress\n"
                },
                "dockerPort": {
                    "type": "string",
                    "description": "Port number for Docker engine\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Azure environment (e.g. AzurePublicCloud, AzureChinaCloud)\n"
                },
                "faultDomainCount": {
                    "type": "string",
                    "description": "Fault domain count to use for availability set\n"
                },
                "image": {
                    "type": "string",
                    "description": "Azure virtual machine OS image\n"
                },
                "location": {
                    "type": "string",
                    "description": "Azure region to create the virtual machine\n"
                },
                "managedDisks": {
                    "type": "boolean",
                    "description": "Configures VM and availability set for managed disks\n"
                },
                "noPublicIp": {
                    "type": "boolean",
                    "description": "Do not create a public IP address for the machine\n"
                },
                "nsg": {
                    "type": "string",
                    "description": "Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine)\n"
                },
                "openPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Make the specified port number accessible from the Internet\n"
                },
                "privateAddressOnly": {
                    "type": "boolean",
                    "description": "Only use a private IP address\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "Specify a static private IP address for the machine\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "Azure Resource Group name (will be created if missing)\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size for Azure Virtual Machine\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "Username for SSH login\n"
                },
                "staticPublicIp": {
                    "type": "boolean",
                    "description": "Assign a static public IP address to the machine\n"
                },
                "storageType": {
                    "type": "string",
                    "description": "Type of Storage Account to host the OS Disk for the machine\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Azure Subnet Name to be used within the Virtual Network\n"
                },
                "subnetPrefix": {
                    "type": "string",
                    "description": "Private CIDR block to be used for the new subnet, should comply RFC 1918\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID\n",
                    "secret": true
                },
                "tags": {
                    "type": "string",
                    "description": "Tags to be applied to the Azure VM instance (e.g. key1,value1,key2,value2)\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Azure Tenant ID\n",
                    "secret": true
                },
                "updateDomainCount": {
                    "type": "string",
                    "description": "Update domain count to use for availability set\n"
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "description": "Use private IP address of the machine to connect\n"
                },
                "usePublicIpStandardSku": {
                    "type": "boolean",
                    "description": "Use the standard SKU when creating a Public IP for the Azure VM instance\n"
                },
                "vnet": {
                    "type": "string",
                    "description": "Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/MachineConfigV2DigitaloceanConfig:MachineConfigV2DigitaloceanConfig": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Digital Ocean access token\n",
                    "secret": true
                },
                "backups": {
                    "type": "boolean",
                    "description": "Enable backups for droplet\n"
                },
                "image": {
                    "type": "string",
                    "description": "Digital Ocean Image\n"
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Enable ipv6 for droplet\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring for droplet\n"
                },
                "privateNetworking": {
                    "type": "boolean",
                    "description": "Enable private networking for droplet\n"
                },
                "region": {
                    "type": "string",
                    "description": "Digital Ocean region\n"
                },
                "size": {
                    "type": "string",
                    "description": "Digital Ocean size\n"
                },
                "sshKeyContents": {
                    "type": "string",
                    "description": "SSH private key contents\n",
                    "secret": true
                },
                "sshKeyFingerprint": {
                    "type": "string",
                    "description": "SSH key fingerprint\n",
                    "secret": true
                },
                "sshPort": {
                    "type": "string",
                    "description": "SSH port\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "SSH username\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Comma-separated list of tags to apply to the Droplet\n"
                },
                "userdata": {
                    "type": "string",
                    "description": "Path to file with cloud-init user-data\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/MachineConfigV2GoogleConfig:MachineConfigV2GoogleConfig": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "GCE Instance External IP\n"
                },
                "authEncodedJson": {
                    "type": "string",
                    "description": "GCE service account auth json file path\n",
                    "secret": true
                },
                "diskSize": {
                    "type": "string",
                    "description": "GCE Instance Disk Size (in GB)\n"
                },
                "diskType": {
                    "type": "string",
                    "description": "GCE Instance Disk Type\n"
                },
                "externalFirewallRulePrefix": {
                    "type": "string",
                    "description": "A prefix to be added to firewall rules created when exposing ports publicly. Required if exposing ports publicly.\n"
                },
                "internalFirewallRulePrefix": {
                    "type": "string",
                    "description": "A prefix to be added to an internal firewall rule created to ensure virtual machines can communicate with one another.\n"
                },
                "machineImage": {
                    "type": "string",
                    "description": "GCE instance image absolute URL\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "GCE instance type\n"
                },
                "network": {
                    "type": "string",
                    "description": "The network to provision virtual machines within\n"
                },
                "openPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of ports to be opened publicly. 'external_firewall_rule_prefix' must also be set\n"
                },
                "preemptable": {
                    "type": "boolean",
                    "description": "Indicates if the virtual machine can be preempted\n"
                },
                "project": {
                    "type": "string",
                    "description": "The GCP project to create virtual machines within\n"
                },
                "scopes": {
                    "type": "string",
                    "description": "Access scopes to be set on the virtual machine\n"
                },
                "subNetwork": {
                    "type": "string",
                    "description": "The subnetwork to provision virtual machines within\n"
                },
                "tags": {
                    "type": "string",
                    "description": "A set of network tags to be added to each VM, in the format of 'tag1,tag2'\n"
                },
                "useExisting": {
                    "type": "boolean",
                    "description": "Indicates if an existing VM should be used. This is not currently support in Rancher.\n"
                },
                "useInternalIp": {
                    "type": "boolean",
                    "description": "Indicates if the virtual machines should use an internal IP\n"
                },
                "useInternalIpOnly": {
                    "type": "boolean",
                    "description": "Indicates if the virtual machines should use an internal IP only and not be assigned a public IP\n"
                },
                "userData": {
                    "type": "string",
                    "description": "GCE user-data file path\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to be set when logging into the virtual machines\n"
                },
                "vmLabels": {
                    "type": "string",
                    "description": "A set of labels to be added to each VM, in the format of 'key1,value1,key2,value2'\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The region and zone to create virtual machines within (e.g. us-east1-b)\n"
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskType",
                "machineImage",
                "machineType",
                "network",
                "project",
                "zone"
            ]
        },
        "rancher2:index/MachineConfigV2HarvesterConfig:MachineConfigV2HarvesterConfig": {
            "properties": {
                "cpuCount": {
                    "type": "string",
                    "description": "CPU count\n"
                },
                "diskBus": {
                    "type": "string",
                    "description": "Disk bus\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" diskInfo \" pulumi-lang-dotnet=\" DiskInfo \" pulumi-lang-go=\" diskInfo \" pulumi-lang-python=\" disk_info \" pulumi-lang-yaml=\" diskInfo \" pulumi-lang-java=\" diskInfo \"\u003e disk_info \u003c/span\u003einstead"
                },
                "diskInfo": {
                    "type": "string",
                    "description": "A JSON string specifying info for the disks e.g. `{\"disks\":[{\"imageName\":\"harvester-public/image-57hzg\",\"bootOrder\":1,\"size\":40},{\"storageClassName\":\"node-driver-test\",\"bootOrder\":2,\"size\":1}]}`\n"
                },
                "diskSize": {
                    "type": "string",
                    "description": "Disk size (in GiB)\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" diskInfo \" pulumi-lang-dotnet=\" DiskInfo \" pulumi-lang-go=\" diskInfo \" pulumi-lang-python=\" disk_info \" pulumi-lang-yaml=\" diskInfo \" pulumi-lang-java=\" diskInfo \"\u003e disk_info \u003c/span\u003einstead"
                },
                "imageName": {
                    "type": "string",
                    "description": "Image name\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" diskInfo \" pulumi-lang-dotnet=\" DiskInfo \" pulumi-lang-go=\" diskInfo \" pulumi-lang-python=\" disk_info \" pulumi-lang-yaml=\" diskInfo \" pulumi-lang-java=\" diskInfo \"\u003e disk_info \u003c/span\u003einstead"
                },
                "memorySize": {
                    "type": "string",
                    "description": "Memory size (in GiB)\n"
                },
                "networkData": {
                    "type": "string",
                    "description": "NetworkData content of cloud-init, base64 is supported\n"
                },
                "networkInfo": {
                    "type": "string",
                    "description": "A JSON string specifying info for the networks e.g. `{\"interfaces\":[{\"networkName\":\"harvester-public/vlan1\"},{\"networkName\":\"harvester-public/vlan2\"}]}`\n"
                },
                "networkModel": {
                    "type": "string",
                    "description": "Network model\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" networkInfo \" pulumi-lang-dotnet=\" NetworkInfo \" pulumi-lang-go=\" networkInfo \" pulumi-lang-python=\" network_info \" pulumi-lang-yaml=\" networkInfo \" pulumi-lang-java=\" networkInfo \"\u003e network_info \u003c/span\u003einstead"
                },
                "networkName": {
                    "type": "string",
                    "description": "Network name\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" networkInfo \" pulumi-lang-dotnet=\" NetworkInfo \" pulumi-lang-go=\" networkInfo \" pulumi-lang-python=\" network_info \" pulumi-lang-yaml=\" networkInfo \" pulumi-lang-java=\" networkInfo \"\u003e network_info \u003c/span\u003einstead"
                },
                "sshPassword": {
                    "type": "string",
                    "description": "SSH password\n",
                    "secret": true
                },
                "sshUser": {
                    "type": "string",
                    "description": "SSH username\n"
                },
                "userData": {
                    "type": "string",
                    "description": "UserData content of cloud-init, base64 is supported. If the image does not contain the qemu-guest-agent package, you must install and start qemu-guest-agent using userdata\n"
                },
                "vmAffinity": {
                    "type": "string",
                    "description": "VM affinity, base64 is supported\n"
                },
                "vmNamespace": {
                    "type": "string",
                    "description": "Virtual machine namespace\n"
                }
            },
            "type": "object",
            "required": [
                "sshUser",
                "vmNamespace"
            ]
        },
        "rancher2:index/MachineConfigV2LinodeConfig:MachineConfigV2LinodeConfig": {
            "properties": {
                "authorizedUsers": {
                    "type": "string",
                    "description": "Linode user accounts (seperated by commas) whose Linode SSH keys will be permitted root access to the created node\n"
                },
                "createPrivateIp": {
                    "type": "boolean",
                    "description": "Create private IP for the instance\n"
                },
                "dockerPort": {
                    "type": "string",
                    "description": "Docker Port\n"
                },
                "image": {
                    "type": "string",
                    "description": "Specifies the Linode Instance image which determines the OS distribution and base files\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Specifies the Linode Instance type which determines CPU, memory, disk size, etc.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Linode Instance Label\n"
                },
                "region": {
                    "type": "string",
                    "description": "Specifies the region (location) of the Linode instance\n"
                },
                "rootPass": {
                    "type": "string",
                    "description": "Root Password\n",
                    "secret": true
                },
                "sshPort": {
                    "type": "string",
                    "description": "Linode Instance SSH Port\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "Specifies the user as which docker-machine should log in to the Linode instance to install Docker.\n"
                },
                "stackscript": {
                    "type": "string",
                    "description": "Specifies the Linode StackScript to use to create the instance\n"
                },
                "stackscriptData": {
                    "type": "string",
                    "description": "A JSON string specifying data for the selected StackScript\n"
                },
                "swapSize": {
                    "type": "string",
                    "description": "Linode Instance Swap Size (MB)\n"
                },
                "tags": {
                    "type": "string",
                    "description": "A comma separated list of tags to apply to the the Linode resource\n"
                },
                "token": {
                    "type": "string",
                    "description": "Linode API Token\n",
                    "secret": true
                },
                "uaPrefix": {
                    "type": "string",
                    "description": "Prefix the User-Agent in Linode API calls with some 'product/version'\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/MachineConfigV2OpenstackConfig:MachineConfigV2OpenstackConfig": {
            "properties": {
                "activeTimeout": {
                    "type": "string",
                    "description": "OpenStack active timeout Default \u003cspan pulumi-lang-nodejs=\"`200`\" pulumi-lang-dotnet=\"`200`\" pulumi-lang-go=\"`200`\" pulumi-lang-python=\"`200`\" pulumi-lang-yaml=\"`200`\" pulumi-lang-java=\"`200`\"\u003e`200`\u003c/span\u003e (string)\n"
                },
                "applicationCredentialId": {
                    "type": "string",
                    "description": "OpenStack application credential id. Conflicts with \u003cspan pulumi-lang-nodejs=\"`applicationCredentialName`\" pulumi-lang-dotnet=\"`ApplicationCredentialName`\" pulumi-lang-go=\"`applicationCredentialName`\" pulumi-lang-python=\"`application_credential_name`\" pulumi-lang-yaml=\"`applicationCredentialName`\" pulumi-lang-java=\"`applicationCredentialName`\"\u003e`application_credential_name`\u003c/span\u003e (string)\n"
                },
                "applicationCredentialName": {
                    "type": "string",
                    "description": "OpenStack application credential name. Conflicts with \u003cspan pulumi-lang-nodejs=\"`applicationCredentialId`\" pulumi-lang-dotnet=\"`ApplicationCredentialId`\" pulumi-lang-go=\"`applicationCredentialId`\" pulumi-lang-python=\"`application_credential_id`\" pulumi-lang-yaml=\"`applicationCredentialId`\" pulumi-lang-java=\"`applicationCredentialId`\"\u003e`application_credential_id`\u003c/span\u003e (string)\n"
                },
                "applicationCredentialSecret": {
                    "type": "string",
                    "description": "OpenStack application credential secret (string)\n",
                    "secret": true
                },
                "authUrl": {
                    "type": "string",
                    "description": "OpenStack authentication URL (string)\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "OpenStack availability zone (string)\n"
                },
                "bootFromVolume": {
                    "type": "boolean",
                    "description": "Enable booting from volume. Default is \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "cacert": {
                    "type": "string",
                    "description": "CA certificate bundle to verify against (string)\n"
                },
                "configDrive": {
                    "type": "boolean",
                    "description": "Enables the OpenStack config drive for the instance. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "OpenStack domain ID. Identity v3 only. Conflicts with \u003cspan pulumi-lang-nodejs=\"`domainName`\" pulumi-lang-dotnet=\"`DomainName`\" pulumi-lang-go=\"`domainName`\" pulumi-lang-python=\"`domain_name`\" pulumi-lang-yaml=\"`domainName`\" pulumi-lang-java=\"`domainName`\"\u003e`domain_name`\u003c/span\u003e (string)\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "OpenStack domain name. Identity v3 only. Conflicts with \u003cspan pulumi-lang-nodejs=\"`domainId`\" pulumi-lang-dotnet=\"`DomainId`\" pulumi-lang-go=\"`domainId`\" pulumi-lang-python=\"`domain_id`\" pulumi-lang-yaml=\"`domainId`\" pulumi-lang-java=\"`domainId`\"\u003e`domain_id`\u003c/span\u003e (string)\n"
                },
                "endpointType": {
                    "type": "string",
                    "description": "OpenStack endpoint type. adminURL, internalURL or publicURL (string)\n"
                },
                "flavorId": {
                    "type": "string",
                    "description": "OpenStack flavor id to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`flavorName`\" pulumi-lang-dotnet=\"`FlavorName`\" pulumi-lang-go=\"`flavorName`\" pulumi-lang-python=\"`flavor_name`\" pulumi-lang-yaml=\"`flavorName`\" pulumi-lang-java=\"`flavorName`\"\u003e`flavor_name`\u003c/span\u003e (string)\n"
                },
                "flavorName": {
                    "type": "string",
                    "description": "OpenStack flavor name to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`flavorId`\" pulumi-lang-dotnet=\"`FlavorId`\" pulumi-lang-go=\"`flavorId`\" pulumi-lang-python=\"`flavor_id`\" pulumi-lang-yaml=\"`flavorId`\" pulumi-lang-java=\"`flavorId`\"\u003e`flavor_id`\u003c/span\u003e (string)\n"
                },
                "floatingIpPool": {
                    "type": "string",
                    "description": "OpenStack floating IP pool to get an IP from to assign to the instance (string)\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "OpenStack image id to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`imageName`\" pulumi-lang-dotnet=\"`ImageName`\" pulumi-lang-go=\"`imageName`\" pulumi-lang-python=\"`image_name`\" pulumi-lang-yaml=\"`imageName`\" pulumi-lang-java=\"`imageName`\"\u003e`image_name`\u003c/span\u003e (string)\n"
                },
                "imageName": {
                    "type": "string",
                    "description": "OpenStack image name to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`imageId`\" pulumi-lang-dotnet=\"`ImageId`\" pulumi-lang-go=\"`imageId`\" pulumi-lang-python=\"`image_id`\" pulumi-lang-yaml=\"`imageId`\" pulumi-lang-java=\"`imageId`\"\u003e`image_id`\u003c/span\u003e (string)\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS credential checking. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "OpenStack version of IP address assigned for the machine Default \u003cspan pulumi-lang-nodejs=\"`4`\" pulumi-lang-dotnet=\"`4`\" pulumi-lang-go=\"`4`\" pulumi-lang-python=\"`4`\" pulumi-lang-yaml=\"`4`\" pulumi-lang-java=\"`4`\"\u003e`4`\u003c/span\u003e (string)\n"
                },
                "keypairName": {
                    "type": "string",
                    "description": "OpenStack keypair to use to SSH to the instance (string)\n"
                },
                "netId": {
                    "type": "string",
                    "description": "OpenStack network id the machine will be connected on. Conflicts with \u003cspan pulumi-lang-nodejs=\"`netName`\" pulumi-lang-dotnet=\"`NetName`\" pulumi-lang-go=\"`netName`\" pulumi-lang-python=\"`net_name`\" pulumi-lang-yaml=\"`netName`\" pulumi-lang-java=\"`netName`\"\u003e`net_name`\u003c/span\u003e (string)\n"
                },
                "netName": {
                    "type": "string",
                    "description": "OpenStack network name the machine will be connected on. Conflicts with \u003cspan pulumi-lang-nodejs=\"`netId`\" pulumi-lang-dotnet=\"`NetId`\" pulumi-lang-go=\"`netId`\" pulumi-lang-python=\"`net_id`\" pulumi-lang-yaml=\"`netId`\" pulumi-lang-java=\"`netId`\"\u003e`net_id`\u003c/span\u003e (string)\n"
                },
                "novaNetwork": {
                    "type": "boolean",
                    "description": "Use the nova networking services instead of neutron (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use \u003cspan pulumi-lang-nodejs=\"`rancher2.CloudCredential`\" pulumi-lang-dotnet=\"`rancher2.CloudCredential`\" pulumi-lang-go=\"`CloudCredential`\" pulumi-lang-python=\"`CloudCredential`\" pulumi-lang-yaml=\"`rancher2.CloudCredential`\" pulumi-lang-java=\"`rancher2.CloudCredential`\"\u003e`rancher2.CloudCredential`\u003c/span\u003e from Rancher v2.2.x (string)\n",
                    "secret": true
                },
                "privateKeyFile": {
                    "type": "string",
                    "description": "Private key content to use for SSH (string)\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "OpenStack region name (string)\n"
                },
                "secGroups": {
                    "type": "string",
                    "description": "OpenStack comma separated security groups for the machine (string)\n"
                },
                "sshPort": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh port. Default \u003cspan pulumi-lang-nodejs=\"`22`\" pulumi-lang-dotnet=\"`22`\" pulumi-lang-go=\"`22`\" pulumi-lang-python=\"`22`\" pulumi-lang-yaml=\"`22`\" pulumi-lang-java=\"`22`\"\u003e`22`\u003c/span\u003e (string)\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default \u003cspan pulumi-lang-nodejs=\"`docker`\" pulumi-lang-dotnet=\"`Docker`\" pulumi-lang-go=\"`docker`\" pulumi-lang-python=\"`docker`\" pulumi-lang-yaml=\"`docker`\" pulumi-lang-java=\"`docker`\"\u003e`docker`\u003c/span\u003e. (string)\n"
                },
                "tenantDomainId": {
                    "type": "string",
                    "description": "OpenStack tenant domain id. Conflicts with \u003cspan pulumi-lang-nodejs=\"`tenantDomainName`\" pulumi-lang-dotnet=\"`TenantDomainName`\" pulumi-lang-go=\"`tenantDomainName`\" pulumi-lang-python=\"`tenant_domain_name`\" pulumi-lang-yaml=\"`tenantDomainName`\" pulumi-lang-java=\"`tenantDomainName`\"\u003e`tenant_domain_name`\u003c/span\u003e (string)\n"
                },
                "tenantDomainName": {
                    "type": "string",
                    "description": "OpenStack tenant domain name. Conflicts with \u003cspan pulumi-lang-nodejs=\"`tenantDomainId`\" pulumi-lang-dotnet=\"`TenantDomainId`\" pulumi-lang-go=\"`tenantDomainId`\" pulumi-lang-python=\"`tenant_domain_id`\" pulumi-lang-yaml=\"`tenantDomainId`\" pulumi-lang-java=\"`tenantDomainId`\"\u003e`tenant_domain_id`\u003c/span\u003e (string)\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "OpenStack tenant id. Conflicts with \u003cspan pulumi-lang-nodejs=\"`tenantName`\" pulumi-lang-dotnet=\"`TenantName`\" pulumi-lang-go=\"`tenantName`\" pulumi-lang-python=\"`tenant_name`\" pulumi-lang-yaml=\"`tenantName`\" pulumi-lang-java=\"`tenantName`\"\u003e`tenant_name`\u003c/span\u003e (string)\n"
                },
                "tenantName": {
                    "type": "string",
                    "description": "OpenStack tenant name. Conflicts with \u003cspan pulumi-lang-nodejs=\"`tenantId`\" pulumi-lang-dotnet=\"`TenantId`\" pulumi-lang-go=\"`tenantId`\" pulumi-lang-python=\"`tenant_id`\" pulumi-lang-yaml=\"`tenantId`\" pulumi-lang-java=\"`tenantId`\"\u003e`tenant_id`\u003c/span\u003e (string)\n"
                },
                "userDataFile": {
                    "type": "string",
                    "description": "File containing an openstack userdata script (string)\n"
                },
                "userDomainId": {
                    "type": "string",
                    "description": "OpenStack user domain id. Conflicts with \u003cspan pulumi-lang-nodejs=\"`userDomainName`\" pulumi-lang-dotnet=\"`UserDomainName`\" pulumi-lang-go=\"`userDomainName`\" pulumi-lang-python=\"`user_domain_name`\" pulumi-lang-yaml=\"`userDomainName`\" pulumi-lang-java=\"`userDomainName`\"\u003e`user_domain_name`\u003c/span\u003e (string)\n"
                },
                "userDomainName": {
                    "type": "string",
                    "description": "OpenStack user domain name. Conflicts with \u003cspan pulumi-lang-nodejs=\"`userDomainId`\" pulumi-lang-dotnet=\"`UserDomainId`\" pulumi-lang-go=\"`userDomainId`\" pulumi-lang-python=\"`user_domain_id`\" pulumi-lang-yaml=\"`userDomainId`\" pulumi-lang-java=\"`userDomainId`\"\u003e`user_domain_id`\u003c/span\u003e (string)\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username to be set when logging into the virtual machines (string)\n"
                },
                "volumeDevicePath": {
                    "type": "string",
                    "description": "OpenStack volume device path (attaching). Applicable only when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e. Omit for auto `/dev/vdb`. (string)\n\u003e **Note:**: `Required+` denotes that either the _name or _id is required but you cannot use both.\n\u003e **Note:**: `Required++` denotes that either the _name or _id is required unless \u003cspan pulumi-lang-nodejs=\"`applicationCredentialId`\" pulumi-lang-dotnet=\"`ApplicationCredentialId`\" pulumi-lang-go=\"`applicationCredentialId`\" pulumi-lang-python=\"`application_credential_id`\" pulumi-lang-yaml=\"`applicationCredentialId`\" pulumi-lang-java=\"`applicationCredentialId`\"\u003e`application_credential_id`\u003c/span\u003e is defined.\n\u003e **Note for OpenStack users:**: \u003cspan pulumi-lang-nodejs=\"`keypairName`\" pulumi-lang-dotnet=\"`KeypairName`\" pulumi-lang-go=\"`keypairName`\" pulumi-lang-python=\"`keypair_name`\" pulumi-lang-yaml=\"`keypairName`\" pulumi-lang-java=\"`keypairName`\"\u003e`keypair_name`\u003c/span\u003e is required to be in the schema even if there are no references in rancher itself\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "OpenStack volume id of existing volume. Applicable only when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (string)\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "OpenStack volume name of existing volume. Applicable only when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (string)\n"
                },
                "volumeSize": {
                    "type": "string",
                    "description": "OpenStack volume size (GiB). Required when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (string)\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "OpenStack volume type. Required when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e and openstack cloud does not have a default volume type (string)\n"
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "availabilityZone",
                "region"
            ]
        },
        "rancher2:index/MachineConfigV2VsphereConfig:MachineConfigV2VsphereConfig": {
            "properties": {
                "boot2dockerUrl": {
                    "type": "string",
                    "description": "vSphere URL for boot2docker image\n"
                },
                "cfgparams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere vm configuration parameters (used for guestinfo)\n"
                },
                "cloneFrom": {
                    "type": "string",
                    "description": "If you choose creation type clone a name of what you want to clone is required\n"
                },
                "cloudConfig": {
                    "type": "string",
                    "description": "Filepath to a cloud-config yaml file to put into the ISO user-data\n"
                },
                "cloudinit": {
                    "type": "string",
                    "description": "vSphere cloud-init filepath or url to add to guestinfo\n"
                },
                "contentLibrary": {
                    "type": "string",
                    "description": "If you choose to clone from a content library template specify the name of the library\n"
                },
                "cpuCount": {
                    "type": "string",
                    "description": "vSphere CPU number for docker VM\n"
                },
                "creationType": {
                    "type": "string",
                    "description": "Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy\n"
                },
                "customAttributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere custom attributes, format key/value e.g. '200=my custom value'\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "vSphere datacenter for virtual machine\n"
                },
                "datastore": {
                    "type": "string",
                    "description": "vSphere datastore for virtual machine\n"
                },
                "datastoreCluster": {
                    "type": "string",
                    "description": "vSphere datastore cluster for virtual machine\n"
                },
                "diskSize": {
                    "type": "string",
                    "description": "vSphere size of disk for docker VM (in MB)\n"
                },
                "folder": {
                    "type": "string",
                    "description": "vSphere folder for the docker VM. This folder must already exist in the datacenter\n"
                },
                "gracefulShutdownTimeout": {
                    "type": "string",
                    "description": "Duration in seconds before the graceful shutdown of the VM times out and the VM is destroyed. A force destroy will be performed when the value is zero\n"
                },
                "hostsystem": {
                    "type": "string",
                    "description": "vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS\n"
                },
                "memorySize": {
                    "type": "string",
                    "description": "vSphere size of memory for docker VM (in MB)\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere network where the virtual machine will be attached\n"
                },
                "os": {
                    "type": "string",
                    "description": "Type of virtual machine OS in vSphere\n"
                },
                "password": {
                    "type": "string",
                    "description": "vSphere password\n",
                    "secret": true
                },
                "pool": {
                    "type": "string",
                    "description": "vSphere resource pool for docker VM\n"
                },
                "sshPassword": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh password\n",
                    "secret": true
                },
                "sshPort": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh port\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user\n"
                },
                "sshUserGroup": {
                    "type": "string",
                    "description": "If using a non-B2D image the uploaded keys will need chown'ed, defaults to staff e.g. docker:staff\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere tags id e.g. urn:xxx\n"
                },
                "username": {
                    "type": "string",
                    "description": "vSphere username\n"
                },
                "vappIpAllocationPolicy": {
                    "type": "string",
                    "description": "vSphere vApp IP allocation policy. Supported values are: dhcp, fixed, transient and fixedAllocated\n"
                },
                "vappIpProtocol": {
                    "type": "string",
                    "description": "vSphere vApp IP protocol for this deployment. Supported values are: IPv4 and IPv6\n"
                },
                "vappProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere vApp properties\n"
                },
                "vappTransport": {
                    "type": "string",
                    "description": "vSphere OVF environment transports to use for properties. Supported values are: iso and com.vmware.guestInfo\n"
                },
                "vcenter": {
                    "type": "string",
                    "description": "vSphere IP/hostname for vCenter\n"
                },
                "vcenterPort": {
                    "type": "string",
                    "description": "vSphere Port for vCenter\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/NamespaceContainerResourceLimit:NamespaceContainerResourceLimit": {
            "properties": {
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in namespace (string)\n"
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in namespace (string)\n"
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in namespace (string)\n"
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in namespace (string)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/NamespaceResourceQuota:NamespaceResourceQuota": {
            "properties": {
                "limit": {
                    "$ref": "#/types/rancher2:index/NamespaceResourceQuotaLimit:NamespaceResourceQuotaLimit",
                    "description": "Resource quota limit for namespace (list maxitems:1)\n"
                }
            },
            "type": "object",
            "required": [
                "limit"
            ]
        },
        "rancher2:index/NamespaceResourceQuotaLimit:NamespaceResourceQuotaLimit": {
            "properties": {
                "configMaps": {
                    "type": "string",
                    "description": "Limit for config maps in namespace (string)\n"
                },
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in namespace (string)\n"
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in namespace (string)\n"
                },
                "persistentVolumeClaims": {
                    "type": "string",
                    "description": "Limit for persistent volume claims in namespace (string)\n"
                },
                "pods": {
                    "type": "string",
                    "description": "Limit for pods in namespace (string)\n"
                },
                "replicationControllers": {
                    "type": "string",
                    "description": "Limit for replication controllers in namespace (string)\n"
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in namespace (string)\n"
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in namespace (string)\n"
                },
                "requestsStorage": {
                    "type": "string",
                    "description": "Limit for requests storage in namespace (string)\n"
                },
                "secrets": {
                    "type": "string",
                    "description": "Limit for secrets in namespace (string)\n"
                },
                "services": {
                    "type": "string"
                },
                "servicesLoadBalancers": {
                    "type": "string",
                    "description": "Limit for services load balancers in namespace (string)\n"
                },
                "servicesNodePorts": {
                    "type": "string",
                    "description": "Limit for services node ports in namespace (string)\n\nMore info at [resource-quotas](https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/projects-and-namespaces/resource-quotas/)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/NodePoolNodeTaint:NodePoolNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Taint effect. Supported values : `\"NoExecute\" | \"NoSchedule\" | \"PreferNoSchedule\"` (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Taint key (string)\n"
                },
                "timeAdded": {
                    "type": "string",
                    "description": "Taint time added (string)\n"
                },
                "value": {
                    "type": "string",
                    "description": "Taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "timeAdded",
                        "value"
                    ]
                }
            }
        },
        "rancher2:index/NodeTemplateAmazonec2Config:NodeTemplateAmazonec2Config": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS Access Key\n",
                    "secret": true
                },
                "ami": {
                    "type": "string",
                    "description": "AWS machine image\n"
                },
                "blockDurationMinutes": {
                    "type": "string",
                    "description": "AWS spot instance duration in minutes (60, 120, 180, 240, 300, or 360)\n"
                },
                "deviceName": {
                    "type": "string",
                    "description": "AWS root device name\n"
                },
                "encryptEbsVolume": {
                    "type": "boolean",
                    "description": "Encrypt EBS volume\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Optional endpoint URL (hostname only or fully qualified URI)\n"
                },
                "httpEndpoint": {
                    "type": "string",
                    "description": "Enables or disables the HTTP metadata endpoint on your instances\n"
                },
                "httpTokens": {
                    "type": "string",
                    "description": "The state of token usage for your instance metadata requests\n"
                },
                "iamInstanceProfile": {
                    "type": "string",
                    "description": "AWS IAM Instance Profile\n"
                },
                "insecureTransport": {
                    "type": "boolean",
                    "description": "Disable SSL when sending requests\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "AWS instance type\n"
                },
                "kmsKey": {
                    "type": "string",
                    "description": "Custom KMS key ID using the AWS Managed CMK\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Set this flag to enable CloudWatch monitoring\n"
                },
                "openPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Make the specified port number accessible from the Internet\n"
                },
                "privateAddressOnly": {
                    "type": "boolean",
                    "description": "Only use a private IP address\n"
                },
                "region": {
                    "type": "string",
                    "description": "AWS Region\n"
                },
                "requestSpotInstance": {
                    "type": "boolean",
                    "description": "Set this flag to request spot instance\n"
                },
                "retries": {
                    "type": "string",
                    "description": "Set retry count for recoverable failures (use -1 to disable)\n"
                },
                "rootSize": {
                    "type": "string",
                    "description": "AWS root disk size (in GB)\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "AWS Secret Key\n",
                    "secret": true
                },
                "securityGroupReadonly": {
                    "type": "boolean",
                    "description": "Skip adding default rules to security groups\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "AWS VPC security group\n"
                },
                "sessionToken": {
                    "type": "string",
                    "description": "AWS Session Token\n",
                    "secret": true
                },
                "spotPrice": {
                    "type": "string",
                    "description": "AWS spot instance bid price (in dollar)\n"
                },
                "sshKeypath": {
                    "type": "string",
                    "description": "SSH Key for Instance\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "Set the name of the ssh user\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "AWS VPC subnet id\n"
                },
                "tags": {
                    "type": "string",
                    "description": "AWS Tags (e.g. key1,value1,key2,value2)\n"
                },
                "useEbsOptimizedInstance": {
                    "type": "boolean",
                    "description": "Create an EBS optimized instance\n"
                },
                "usePrivateAddress": {
                    "type": "boolean",
                    "description": "Force the usage of private IP address\n"
                },
                "userdata": {
                    "type": "string",
                    "description": "Path to file with cloud-init user data\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "Amazon EBS volume type\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "AWS VPC id\n"
                },
                "zone": {
                    "type": "string",
                    "description": "AWS zone for instance (i.e. a,b,c,d,e)\n"
                }
            },
            "type": "object",
            "required": [
                "ami",
                "region",
                "securityGroups",
                "subnetId",
                "vpcId",
                "zone"
            ]
        },
        "rancher2:index/NodeTemplateAzureConfig:NodeTemplateAzureConfig": {
            "properties": {
                "acceleratedNetworking": {
                    "type": "boolean",
                    "description": "Enable Accelerated Networking when creating an Azure Network Interface\n"
                },
                "availabilitySet": {
                    "type": "string",
                    "description": "Azure Availability Set to place the virtual machine into\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "The Azure Availability Zone the VM should be created in\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Azure Service Principal Account ID (optional, browser auth is used if not specified)\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Azure Service Principal Account password (optional, browser auth is used if not specified)\n",
                    "secret": true
                },
                "customData": {
                    "type": "string",
                    "description": "Path to file with custom-data\n"
                },
                "diskSize": {
                    "type": "string",
                    "description": "Disk size if using managed disk\n"
                },
                "dns": {
                    "type": "string",
                    "description": "A unique DNS label for the public IP adddress\n"
                },
                "dockerPort": {
                    "type": "string",
                    "description": "Port number for Docker engine\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Azure environment (e.g. AzurePublicCloud, AzureChinaCloud)\n"
                },
                "faultDomainCount": {
                    "type": "string",
                    "description": "Fault domain count to use for availability set\n"
                },
                "image": {
                    "type": "string",
                    "description": "Azure virtual machine OS image\n"
                },
                "location": {
                    "type": "string",
                    "description": "Azure region to create the virtual machine\n"
                },
                "managedDisks": {
                    "type": "boolean",
                    "description": "Configures VM and availability set for managed disks\n"
                },
                "noPublicIp": {
                    "type": "boolean",
                    "description": "Do not create a public IP address for the machine\n"
                },
                "nsg": {
                    "type": "string",
                    "description": "Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine)\n"
                },
                "openPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Make the specified port number accessible from the Internet\n"
                },
                "plan": {
                    "type": "string",
                    "description": "Purchase plan for Azure Virtual Machine (in \u003cpublisher\u003e:\u003cproduct\u003e:\u003cplan\u003e format)\n"
                },
                "privateIpAddress": {
                    "type": "string",
                    "description": "Specify a static private IP address for the machine\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "Azure Resource Group name (will be created if missing)\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size for Azure Virtual Machine\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "Username for SSH login\n"
                },
                "staticPublicIp": {
                    "type": "boolean",
                    "description": "Assign a static public IP address to the machine\n"
                },
                "storageType": {
                    "type": "string",
                    "description": "Type of Storage Account to host the OS Disk for the machine\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "Azure Subnet Name to be used within the Virtual Network\n"
                },
                "subnetPrefix": {
                    "type": "string",
                    "description": "Private CIDR block to be used for the new subnet, should comply RFC 1918\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "Azure Subscription ID\n",
                    "secret": true
                },
                "tags": {
                    "type": "string",
                    "description": "Tags to be applied to the Azure VM instance (e.g. key1,value1,key2,value2)\n"
                },
                "updateDomainCount": {
                    "type": "string",
                    "description": "Update domain count to use for availability set\n"
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "description": "Use private IP address of the machine to connect\n"
                },
                "usePublicIpStandardSku": {
                    "type": "boolean",
                    "description": "Use the Standard SKU when creating a public IP for an Azure VM\n"
                },
                "vnet": {
                    "type": "string",
                    "description": "Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/NodeTemplateDigitaloceanConfig:NodeTemplateDigitaloceanConfig": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Digital Ocean access token\n",
                    "secret": true
                },
                "backups": {
                    "type": "boolean",
                    "description": "Enable backups for droplet\n"
                },
                "image": {
                    "type": "string",
                    "description": "Digital Ocean Image\n"
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Enable ipv6 for droplet\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Enable monitoring for droplet\n"
                },
                "privateNetworking": {
                    "type": "boolean",
                    "description": "Enable private networking for droplet\n"
                },
                "region": {
                    "type": "string",
                    "description": "Digital Ocean region\n"
                },
                "size": {
                    "type": "string",
                    "description": "Digital Ocean size\n"
                },
                "sshKeyFingerprint": {
                    "type": "string",
                    "description": "SSH key fingerprint\n",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "SSH private key path\n"
                },
                "sshPort": {
                    "type": "string",
                    "description": "SSH port\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "SSH username\n"
                },
                "tags": {
                    "type": "string",
                    "description": "Comma-separated list of tags to apply to the Droplet\n"
                },
                "userdata": {
                    "type": "string",
                    "description": "Path to file with cloud-init user-data\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/NodeTemplateHarvesterConfig:NodeTemplateHarvesterConfig": {
            "properties": {
                "cpuCount": {
                    "type": "string",
                    "description": "CPU count\n"
                },
                "diskBus": {
                    "type": "string",
                    "description": "Disk bus\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" diskInfo \" pulumi-lang-dotnet=\" DiskInfo \" pulumi-lang-go=\" diskInfo \" pulumi-lang-python=\" disk_info \" pulumi-lang-yaml=\" diskInfo \" pulumi-lang-java=\" diskInfo \"\u003e disk_info \u003c/span\u003einstead"
                },
                "diskInfo": {
                    "type": "string",
                    "description": "A JSON string specifying info for the disks e.g. `{\"disks\":[{\"imageName\":\"harvester-public/image-57hzg\",\"bootOrder\":1,\"size\":40},{\"storageClassName\":\"node-driver-test\",\"bootOrder\":2,\"size\":1}]}`\n"
                },
                "diskSize": {
                    "type": "string",
                    "description": "Disk size (in GiB)\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" diskInfo \" pulumi-lang-dotnet=\" DiskInfo \" pulumi-lang-go=\" diskInfo \" pulumi-lang-python=\" disk_info \" pulumi-lang-yaml=\" diskInfo \" pulumi-lang-java=\" diskInfo \"\u003e disk_info \u003c/span\u003einstead"
                },
                "imageName": {
                    "type": "string",
                    "description": "Image name\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" diskInfo \" pulumi-lang-dotnet=\" DiskInfo \" pulumi-lang-go=\" diskInfo \" pulumi-lang-python=\" disk_info \" pulumi-lang-yaml=\" diskInfo \" pulumi-lang-java=\" diskInfo \"\u003e disk_info \u003c/span\u003einstead"
                },
                "memorySize": {
                    "type": "string",
                    "description": "Memory size (in GiB)\n"
                },
                "networkData": {
                    "type": "string",
                    "description": "NetworkData content of cloud-init, base64 is supported\n"
                },
                "networkInfo": {
                    "type": "string",
                    "description": "A JSON string specifying info for the networks e.g. `{\"interfaces\":[{\"networkName\":\"harvester-public/vlan1\"},{\"networkName\":\"harvester-public/vlan2\"}]}`\n"
                },
                "networkModel": {
                    "type": "string",
                    "description": "Network model\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" networkInfo \" pulumi-lang-dotnet=\" NetworkInfo \" pulumi-lang-go=\" networkInfo \" pulumi-lang-python=\" network_info \" pulumi-lang-yaml=\" networkInfo \" pulumi-lang-java=\" networkInfo \"\u003e network_info \u003c/span\u003einstead"
                },
                "networkName": {
                    "type": "string",
                    "description": "Network name\n",
                    "deprecationMessage": "Use\u003cspan pulumi-lang-nodejs=\" networkInfo \" pulumi-lang-dotnet=\" NetworkInfo \" pulumi-lang-go=\" networkInfo \" pulumi-lang-python=\" network_info \" pulumi-lang-yaml=\" networkInfo \" pulumi-lang-java=\" networkInfo \"\u003e network_info \u003c/span\u003einstead"
                },
                "sshPassword": {
                    "type": "string",
                    "description": "SSH password\n",
                    "secret": true
                },
                "sshUser": {
                    "type": "string",
                    "description": "SSH username\n"
                },
                "userData": {
                    "type": "string",
                    "description": "UserData content of cloud-init, base64 is supported. If the image does not contain the qemu-guest-agent package, you must install and start qemu-guest-agent using userdata\n"
                },
                "vmAffinity": {
                    "type": "string",
                    "description": "VM affinity, base64 is supported\n"
                },
                "vmNamespace": {
                    "type": "string",
                    "description": "Virtual machine namespace\n"
                }
            },
            "type": "object",
            "required": [
                "sshUser",
                "vmNamespace"
            ]
        },
        "rancher2:index/NodeTemplateHetznerConfig:NodeTemplateHetznerConfig": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Hetzner Cloud project API token\n",
                    "secret": true
                },
                "image": {
                    "type": "string",
                    "description": "Hetzner Cloud server image\n"
                },
                "networks": {
                    "type": "string",
                    "description": "Comma-separated list of network IDs or names which should be attached to the server private network interface\n"
                },
                "serverLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of the labels which will be assigned to the server\n"
                },
                "serverLocation": {
                    "type": "string",
                    "description": "Hetzner Cloud datacenter\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Hetzner Cloud server type\n"
                },
                "usePrivateNetwork": {
                    "type": "boolean",
                    "description": "Use private network\n"
                },
                "userdata": {
                    "type": "string",
                    "description": "Path to file with cloud-init user-data\n"
                },
                "volumes": {
                    "type": "string",
                    "description": "Comma-separated list of volume IDs or names which should be attached to the server\n"
                }
            },
            "type": "object",
            "required": [
                "apiToken"
            ]
        },
        "rancher2:index/NodeTemplateLinodeConfig:NodeTemplateLinodeConfig": {
            "properties": {
                "authorizedUsers": {
                    "type": "string",
                    "description": "Linode user accounts (seperated by commas) whose Linode SSH keys will be permitted root access to the created node\n"
                },
                "createPrivateIp": {
                    "type": "boolean",
                    "description": "Create private IP for the instance\n"
                },
                "dockerPort": {
                    "type": "string",
                    "description": "Docker Port\n"
                },
                "image": {
                    "type": "string",
                    "description": "Specifies the Linode Instance image which determines the OS distribution and base files\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Specifies the Linode Instance type which determines CPU, memory, disk size, etc.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Linode Instance Label\n"
                },
                "region": {
                    "type": "string",
                    "description": "Specifies the region (location) of the Linode instance\n"
                },
                "rootPass": {
                    "type": "string",
                    "description": "Root Password\n",
                    "secret": true
                },
                "sshPort": {
                    "type": "string",
                    "description": "Linode Instance SSH Port\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "Specifies the user as which docker-machine should log in to the Linode instance to install Docker.\n"
                },
                "stackscript": {
                    "type": "string",
                    "description": "Specifies the Linode StackScript to use to create the instance\n"
                },
                "stackscriptData": {
                    "type": "string",
                    "description": "A JSON string specifying data for the selected StackScript\n"
                },
                "swapSize": {
                    "type": "string",
                    "description": "Linode Instance Swap Size (MB)\n"
                },
                "tags": {
                    "type": "string",
                    "description": "A comma separated list of tags to apply to the the Linode resource\n"
                },
                "token": {
                    "type": "string",
                    "description": "Linode API Token\n",
                    "secret": true
                },
                "uaPrefix": {
                    "type": "string",
                    "description": "Prefix the User-Agent in Linode API calls with some 'product/version'\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/NodeTemplateNodeTaint:NodeTemplateNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string",
                    "description": "Taint effect. Supported values : `\"NoExecute\" | \"NoSchedule\" | \"PreferNoSchedule\"` (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Taint key (string)\n"
                },
                "timeAdded": {
                    "type": "string",
                    "description": "Taint time added (string)\n"
                },
                "value": {
                    "type": "string",
                    "description": "Taint value (string)\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "timeAdded",
                        "value"
                    ]
                }
            }
        },
        "rancher2:index/NodeTemplateOpennebulaConfig:NodeTemplateOpennebulaConfig": {
            "properties": {
                "b2dSize": {
                    "type": "string",
                    "description": "Size of the Volatile disk in MB - only for b2d (string)\n"
                },
                "cpu": {
                    "type": "string",
                    "description": "CPU value for the VM (string)\n"
                },
                "devPrefix": {
                    "type": "string",
                    "description": "Dev prefix to use for the images. E.g.: 'vd', 'sd', 'hd' (string)\n"
                },
                "disableVnc": {
                    "type": "boolean",
                    "description": "VNC is enabled by default. Disable it with this flag (bool)\n"
                },
                "diskResize": {
                    "type": "string",
                    "description": "Size of the disk for the VM in MB (string)\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "OpenStack image id to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`imageName`\" pulumi-lang-dotnet=\"`ImageName`\" pulumi-lang-go=\"`imageName`\" pulumi-lang-python=\"`image_name`\" pulumi-lang-yaml=\"`imageName`\" pulumi-lang-java=\"`imageName`\"\u003e`image_name`\u003c/span\u003e (string)\n"
                },
                "imageName": {
                    "type": "string",
                    "description": "OpenStack image name to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`imageId`\" pulumi-lang-dotnet=\"`ImageId`\" pulumi-lang-go=\"`imageId`\" pulumi-lang-python=\"`image_id`\" pulumi-lang-yaml=\"`imageId`\" pulumi-lang-java=\"`imageId`\"\u003e`image_id`\u003c/span\u003e (string)\n"
                },
                "imageOwner": {
                    "type": "string",
                    "description": "Owner of the image to use as the VM OS (string)\n"
                },
                "memory": {
                    "type": "string",
                    "description": "Size of the memory for the VM in MB (string)\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "Opennebula network ID to connect the machine to. Conflicts with \u003cspan pulumi-lang-nodejs=\"`networkName`\" pulumi-lang-dotnet=\"`NetworkName`\" pulumi-lang-go=\"`networkName`\" pulumi-lang-python=\"`network_name`\" pulumi-lang-yaml=\"`networkName`\" pulumi-lang-java=\"`networkName`\"\u003e`network_name`\u003c/span\u003e (string)\n"
                },
                "networkName": {
                    "type": "string",
                    "description": "Opennebula network to connect the machine to. Conflicts with \u003cspan pulumi-lang-nodejs=\"`networkId`\" pulumi-lang-dotnet=\"`NetworkId`\" pulumi-lang-go=\"`networkId`\" pulumi-lang-python=\"`network_id`\" pulumi-lang-yaml=\"`networkId`\" pulumi-lang-java=\"`networkId`\"\u003e`network_id`\u003c/span\u003e (string)\n"
                },
                "networkOwner": {
                    "type": "string",
                    "description": "Opennebula user ID of the Network to connect the machine to (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use \u003cspan pulumi-lang-nodejs=\"`rancher2.CloudCredential`\" pulumi-lang-dotnet=\"`rancher2.CloudCredential`\" pulumi-lang-go=\"`CloudCredential`\" pulumi-lang-python=\"`CloudCredential`\" pulumi-lang-yaml=\"`rancher2.CloudCredential`\" pulumi-lang-java=\"`rancher2.CloudCredential`\"\u003e`rancher2.CloudCredential`\u003c/span\u003e from Rancher v2.2.x (string)\n",
                    "secret": true
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default \u003cspan pulumi-lang-nodejs=\"`docker`\" pulumi-lang-dotnet=\"`Docker`\" pulumi-lang-go=\"`docker`\" pulumi-lang-python=\"`docker`\" pulumi-lang-yaml=\"`docker`\" pulumi-lang-java=\"`docker`\"\u003e`docker`\u003c/span\u003e. From Rancher v2.3.3 (string)\n"
                },
                "templateId": {
                    "type": "string",
                    "description": "Opennebula template ID to use. Conflicts with \u003cspan pulumi-lang-nodejs=\"`templateName`\" pulumi-lang-dotnet=\"`TemplateName`\" pulumi-lang-go=\"`templateName`\" pulumi-lang-python=\"`template_name`\" pulumi-lang-yaml=\"`templateName`\" pulumi-lang-java=\"`templateName`\"\u003e`template_name`\u003c/span\u003e (string)\n"
                },
                "templateName": {
                    "type": "string",
                    "description": "Name of the Opennbula template to use. Conflicts with \u003cspan pulumi-lang-nodejs=\"`templateId`\" pulumi-lang-dotnet=\"`TemplateId`\" pulumi-lang-go=\"`templateId`\" pulumi-lang-python=\"`template_id`\" pulumi-lang-yaml=\"`templateId`\" pulumi-lang-java=\"`templateId`\"\u003e`template_id`\u003c/span\u003e (string)\n"
                },
                "user": {
                    "type": "string",
                    "description": "Set the user for the XML-RPC API authentication (string)\n"
                },
                "vcpu": {
                    "type": "string",
                    "description": "VCPUs for the VM (string)\n\n\u003e **Note:**: `Required*` denotes that one of\u003cspan pulumi-lang-nodejs=\" imageName \" pulumi-lang-dotnet=\" ImageName \" pulumi-lang-go=\" imageName \" pulumi-lang-python=\" image_name \" pulumi-lang-yaml=\" imageName \" pulumi-lang-java=\" imageName \"\u003e image_name \u003c/span\u003e/\u003cspan pulumi-lang-nodejs=\" imageId \" pulumi-lang-dotnet=\" ImageId \" pulumi-lang-go=\" imageId \" pulumi-lang-python=\" image_id \" pulumi-lang-yaml=\" imageId \" pulumi-lang-java=\" imageId \"\u003e image_id \u003c/span\u003eor\u003cspan pulumi-lang-nodejs=\" templateName \" pulumi-lang-dotnet=\" TemplateName \" pulumi-lang-go=\" templateName \" pulumi-lang-python=\" template_name \" pulumi-lang-yaml=\" templateName \" pulumi-lang-java=\" templateName \"\u003e template_name \u003c/span\u003e/\u003cspan pulumi-lang-nodejs=\" templateId \" pulumi-lang-dotnet=\" TemplateId \" pulumi-lang-go=\" templateId \" pulumi-lang-python=\" template_id \" pulumi-lang-yaml=\" templateId \" pulumi-lang-java=\" templateId \"\u003e template_id \u003c/span\u003eis required but you cannot combine them.\n"
                },
                "xmlRpcUrl": {
                    "type": "string",
                    "description": "Set the url for the Opennebula XML-RPC API (string)\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "user",
                "xmlRpcUrl"
            ]
        },
        "rancher2:index/NodeTemplateOpenstackConfig:NodeTemplateOpenstackConfig": {
            "properties": {
                "activeTimeout": {
                    "type": "string",
                    "description": "OpenStack active timeout Default \u003cspan pulumi-lang-nodejs=\"`200`\" pulumi-lang-dotnet=\"`200`\" pulumi-lang-go=\"`200`\" pulumi-lang-python=\"`200`\" pulumi-lang-yaml=\"`200`\" pulumi-lang-java=\"`200`\"\u003e`200`\u003c/span\u003e (string)\n"
                },
                "applicationCredentialId": {
                    "type": "string",
                    "description": "OpenStack application credential id. Conflicts with \u003cspan pulumi-lang-nodejs=\"`applicationCredentialName`\" pulumi-lang-dotnet=\"`ApplicationCredentialName`\" pulumi-lang-go=\"`applicationCredentialName`\" pulumi-lang-python=\"`application_credential_name`\" pulumi-lang-yaml=\"`applicationCredentialName`\" pulumi-lang-java=\"`applicationCredentialName`\"\u003e`application_credential_name`\u003c/span\u003e (string)\n"
                },
                "applicationCredentialName": {
                    "type": "string",
                    "description": "OpenStack application credential name. Conflicts with \u003cspan pulumi-lang-nodejs=\"`applicationCredentialId`\" pulumi-lang-dotnet=\"`ApplicationCredentialId`\" pulumi-lang-go=\"`applicationCredentialId`\" pulumi-lang-python=\"`application_credential_id`\" pulumi-lang-yaml=\"`applicationCredentialId`\" pulumi-lang-java=\"`applicationCredentialId`\"\u003e`application_credential_id`\u003c/span\u003e (string)\n"
                },
                "applicationCredentialSecret": {
                    "type": "string",
                    "description": "OpenStack application credential secret (string)\n",
                    "secret": true
                },
                "authUrl": {
                    "type": "string",
                    "description": "OpenStack authentication URL (string)\n"
                },
                "availabilityZone": {
                    "type": "string",
                    "description": "OpenStack availability zone (string)\n"
                },
                "bootFromVolume": {
                    "type": "boolean",
                    "description": "Enable booting from volume. Default is \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "cacert": {
                    "type": "string",
                    "description": "CA certificate bundle to verify against (string)\n"
                },
                "configDrive": {
                    "type": "boolean",
                    "description": "Enables the OpenStack config drive for the instance. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "domainId": {
                    "type": "string",
                    "description": "OpenStack domain ID. Identity v3 only. Conflicts with \u003cspan pulumi-lang-nodejs=\"`domainName`\" pulumi-lang-dotnet=\"`DomainName`\" pulumi-lang-go=\"`domainName`\" pulumi-lang-python=\"`domain_name`\" pulumi-lang-yaml=\"`domainName`\" pulumi-lang-java=\"`domainName`\"\u003e`domain_name`\u003c/span\u003e (string)\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "OpenStack domain name. Identity v3 only. Conflicts with \u003cspan pulumi-lang-nodejs=\"`domainId`\" pulumi-lang-dotnet=\"`DomainId`\" pulumi-lang-go=\"`domainId`\" pulumi-lang-python=\"`domain_id`\" pulumi-lang-yaml=\"`domainId`\" pulumi-lang-java=\"`domainId`\"\u003e`domain_id`\u003c/span\u003e (string)\n"
                },
                "endpointType": {
                    "type": "string",
                    "description": "OpenStack endpoint type. adminURL, internalURL or publicURL (string)\n"
                },
                "flavorId": {
                    "type": "string",
                    "description": "OpenStack flavor id to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`flavorName`\" pulumi-lang-dotnet=\"`FlavorName`\" pulumi-lang-go=\"`flavorName`\" pulumi-lang-python=\"`flavor_name`\" pulumi-lang-yaml=\"`flavorName`\" pulumi-lang-java=\"`flavorName`\"\u003e`flavor_name`\u003c/span\u003e (string)\n"
                },
                "flavorName": {
                    "type": "string",
                    "description": "OpenStack flavor name to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`flavorId`\" pulumi-lang-dotnet=\"`FlavorId`\" pulumi-lang-go=\"`flavorId`\" pulumi-lang-python=\"`flavor_id`\" pulumi-lang-yaml=\"`flavorId`\" pulumi-lang-java=\"`flavorId`\"\u003e`flavor_id`\u003c/span\u003e (string)\n"
                },
                "floatingIpPool": {
                    "type": "string",
                    "description": "OpenStack floating IP pool to get an IP from to assign to the instance (string)\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "OpenStack image id to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`imageName`\" pulumi-lang-dotnet=\"`ImageName`\" pulumi-lang-go=\"`imageName`\" pulumi-lang-python=\"`image_name`\" pulumi-lang-yaml=\"`imageName`\" pulumi-lang-java=\"`imageName`\"\u003e`image_name`\u003c/span\u003e (string)\n"
                },
                "imageName": {
                    "type": "string",
                    "description": "OpenStack image name to use for the instance. Conflicts with \u003cspan pulumi-lang-nodejs=\"`imageId`\" pulumi-lang-dotnet=\"`ImageId`\" pulumi-lang-go=\"`imageId`\" pulumi-lang-python=\"`image_id`\" pulumi-lang-yaml=\"`imageId`\" pulumi-lang-java=\"`imageId`\"\u003e`image_id`\u003c/span\u003e (string)\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS credential checking. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "OpenStack version of IP address assigned for the machine Default \u003cspan pulumi-lang-nodejs=\"`4`\" pulumi-lang-dotnet=\"`4`\" pulumi-lang-go=\"`4`\" pulumi-lang-python=\"`4`\" pulumi-lang-yaml=\"`4`\" pulumi-lang-java=\"`4`\"\u003e`4`\u003c/span\u003e (string)\n"
                },
                "keypairName": {
                    "type": "string",
                    "description": "OpenStack keypair to use to SSH to the instance (string)\n"
                },
                "netId": {
                    "type": "string",
                    "description": "OpenStack network id the machine will be connected on. Conflicts with \u003cspan pulumi-lang-nodejs=\"`netName`\" pulumi-lang-dotnet=\"`NetName`\" pulumi-lang-go=\"`netName`\" pulumi-lang-python=\"`net_name`\" pulumi-lang-yaml=\"`netName`\" pulumi-lang-java=\"`netName`\"\u003e`net_name`\u003c/span\u003e (string)\n"
                },
                "netName": {
                    "type": "string",
                    "description": "OpenStack network name the machine will be connected on. Conflicts with \u003cspan pulumi-lang-nodejs=\"`netId`\" pulumi-lang-dotnet=\"`NetId`\" pulumi-lang-go=\"`netId`\" pulumi-lang-python=\"`net_id`\" pulumi-lang-yaml=\"`netId`\" pulumi-lang-java=\"`netId`\"\u003e`net_id`\u003c/span\u003e (string)\n"
                },
                "novaNetwork": {
                    "type": "boolean",
                    "description": "Use the nova networking services instead of neutron (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use \u003cspan pulumi-lang-nodejs=\"`rancher2.CloudCredential`\" pulumi-lang-dotnet=\"`rancher2.CloudCredential`\" pulumi-lang-go=\"`CloudCredential`\" pulumi-lang-python=\"`CloudCredential`\" pulumi-lang-yaml=\"`rancher2.CloudCredential`\" pulumi-lang-java=\"`rancher2.CloudCredential`\"\u003e`rancher2.CloudCredential`\u003c/span\u003e from Rancher v2.2.x (string)\n",
                    "secret": true
                },
                "privateKeyFile": {
                    "type": "string",
                    "description": "Private key content to use for SSH (string)\n",
                    "secret": true
                },
                "region": {
                    "type": "string",
                    "description": "AWS region. Default `eu-west-2` (string)\n"
                },
                "secGroups": {
                    "type": "string",
                    "description": "OpenStack comma separated security groups for the machine (string)\n"
                },
                "sshPort": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh port. Default \u003cspan pulumi-lang-nodejs=\"`22`\" pulumi-lang-dotnet=\"`22`\" pulumi-lang-go=\"`22`\" pulumi-lang-python=\"`22`\" pulumi-lang-yaml=\"`22`\" pulumi-lang-java=\"`22`\"\u003e`22`\u003c/span\u003e. From Rancher v2.3.3 (string)\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user. Default \u003cspan pulumi-lang-nodejs=\"`docker`\" pulumi-lang-dotnet=\"`Docker`\" pulumi-lang-go=\"`docker`\" pulumi-lang-python=\"`docker`\" pulumi-lang-yaml=\"`docker`\" pulumi-lang-java=\"`docker`\"\u003e`docker`\u003c/span\u003e. From Rancher v2.3.3 (string)\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "OpenStack tenant id. Conflicts with \u003cspan pulumi-lang-nodejs=\"`tenantName`\" pulumi-lang-dotnet=\"`TenantName`\" pulumi-lang-go=\"`tenantName`\" pulumi-lang-python=\"`tenant_name`\" pulumi-lang-yaml=\"`tenantName`\" pulumi-lang-java=\"`tenantName`\"\u003e`tenant_name`\u003c/span\u003e (string)\n"
                },
                "tenantName": {
                    "type": "string",
                    "description": "OpenStack tenant name. Conflicts with \u003cspan pulumi-lang-nodejs=\"`tenantId`\" pulumi-lang-dotnet=\"`TenantId`\" pulumi-lang-go=\"`tenantId`\" pulumi-lang-python=\"`tenant_id`\" pulumi-lang-yaml=\"`tenantId`\" pulumi-lang-java=\"`tenantId`\"\u003e`tenant_id`\u003c/span\u003e (string)\n"
                },
                "userDataFile": {
                    "type": "string",
                    "description": "File containing an openstack userdata script (string)\n"
                },
                "username": {
                    "type": "string",
                    "description": "vSphere username. Mandatory on Rancher v2.0.x and v2.1.x. Use \u003cspan pulumi-lang-nodejs=\"`rancher2.CloudCredential`\" pulumi-lang-dotnet=\"`rancher2.CloudCredential`\" pulumi-lang-go=\"`CloudCredential`\" pulumi-lang-python=\"`CloudCredential`\" pulumi-lang-yaml=\"`rancher2.CloudCredential`\" pulumi-lang-java=\"`rancher2.CloudCredential`\"\u003e`rancher2.CloudCredential`\u003c/span\u003e from Rancher v2.2.x (string)\n"
                },
                "volumeDevicePath": {
                    "type": "string",
                    "description": "OpenStack volume device path (attaching). Applicable only when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e. Omit for auto `/dev/vdb`. (string)\n\n\u003e **Note:**: `Required*` denotes that either the _name or _id is required but you cannot use both.\n\n\u003e **Note:**: `Required**` denotes that either the _name or _id is required unless \u003cspan pulumi-lang-nodejs=\"`applicationCredentialId`\" pulumi-lang-dotnet=\"`ApplicationCredentialId`\" pulumi-lang-go=\"`applicationCredentialId`\" pulumi-lang-python=\"`application_credential_id`\" pulumi-lang-yaml=\"`applicationCredentialId`\" pulumi-lang-java=\"`applicationCredentialId`\"\u003e`application_credential_id`\u003c/span\u003e is defined.\n\n\u003e **Note for OpenStack users:**: \u003cspan pulumi-lang-nodejs=\"`keypairName`\" pulumi-lang-dotnet=\"`KeypairName`\" pulumi-lang-go=\"`keypairName`\" pulumi-lang-python=\"`keypair_name`\" pulumi-lang-yaml=\"`keypairName`\" pulumi-lang-java=\"`keypairName`\"\u003e`keypair_name`\u003c/span\u003e is required to be in the schema even if there are no references in rancher itself\n"
                },
                "volumeId": {
                    "type": "string",
                    "description": "OpenStack volume id of existing volume. Applicable only when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (string)\n"
                },
                "volumeName": {
                    "type": "string",
                    "description": "OpenStack volume name of existing volume. Applicable only when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (string)\n"
                },
                "volumeSize": {
                    "type": "string",
                    "description": "OpenStack volume size (GiB). Required when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (string)\n"
                },
                "volumeType": {
                    "type": "string",
                    "description": "OpenStack volume type. Required when \u003cspan pulumi-lang-nodejs=\"`bootFromVolume`\" pulumi-lang-dotnet=\"`BootFromVolume`\" pulumi-lang-go=\"`bootFromVolume`\" pulumi-lang-python=\"`boot_from_volume`\" pulumi-lang-yaml=\"`bootFromVolume`\" pulumi-lang-java=\"`bootFromVolume`\"\u003e`boot_from_volume`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e and openstack cloud does not have a default volume type (string)\n"
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "availabilityZone",
                "region"
            ]
        },
        "rancher2:index/NodeTemplateOutscaleConfig:NodeTemplateOutscaleConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Outscale Access Key\n",
                    "secret": true
                },
                "extraTagsAlls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra tags for all created resources (e.g. key1=value1,key2=value2)\n"
                },
                "extraTagsInstances": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra tags only for instances (e.g. key1=value1,key2=value2)\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "Outscale VM type\n"
                },
                "region": {
                    "type": "string",
                    "description": "Outscale Region\n"
                },
                "rootDiskIops": {
                    "type": "integer",
                    "description": "Iops for io1 Root Disk. From 1 to 13000.\n"
                },
                "rootDiskSize": {
                    "type": "integer",
                    "description": "Size of the Root Disk (in GB). From 1 to 14901.\n"
                },
                "rootDiskType": {
                    "type": "string",
                    "description": "Type of the Root Disk. Possible values are :'standard', 'gp2' or 'io1'.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Outscale Secret Key\n",
                    "secret": true
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ids of user defined Security Groups to add to the machine\n"
                },
                "sourceOmi": {
                    "type": "string",
                    "description": "Outscale Machine Image to use as bootstrap for the VM\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "secretKey"
            ]
        },
        "rancher2:index/NodeTemplateVsphereConfig:NodeTemplateVsphereConfig": {
            "properties": {
                "boot2dockerUrl": {
                    "type": "string",
                    "description": "vSphere URL for boot2docker image\n"
                },
                "cfgparams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere vm configuration parameters (used for guestinfo)\n"
                },
                "cloneFrom": {
                    "type": "string",
                    "description": "If you choose creation type clone a name of what you want to clone is required\n"
                },
                "cloudConfig": {
                    "type": "string",
                    "description": "Filepath to a cloud-config yaml file to put into the ISO user-data\n"
                },
                "cloudinit": {
                    "type": "string",
                    "description": "vSphere cloud-init filepath or url to add to guestinfo\n"
                },
                "contentLibrary": {
                    "type": "string",
                    "description": "If you choose to clone from a content library template specify the name of the library\n"
                },
                "cpuCount": {
                    "type": "string",
                    "description": "vSphere CPU number for docker VM\n"
                },
                "creationType": {
                    "type": "string",
                    "description": "Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy\n"
                },
                "customAttributes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere custom attributes, format key/value e.g. '200=my custom value'\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "vSphere datacenter for virtual machine\n"
                },
                "datastore": {
                    "type": "string",
                    "description": "vSphere datastore for virtual machine\n"
                },
                "datastoreCluster": {
                    "type": "string",
                    "description": "vSphere datastore cluster for virtual machine\n"
                },
                "diskSize": {
                    "type": "string",
                    "description": "vSphere size of disk for docker VM (in MB)\n"
                },
                "folder": {
                    "type": "string",
                    "description": "vSphere folder for the docker VM. This folder must already exist in the datacenter\n"
                },
                "gracefulShutdownTimeout": {
                    "type": "string",
                    "description": "Duration in seconds before the graceful shutdown of the VM times out and the VM is destroyed. A force destroy will be performed when the value is zero\n"
                },
                "hostsystem": {
                    "type": "string",
                    "description": "vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS\n"
                },
                "memorySize": {
                    "type": "string",
                    "description": "vSphere size of memory for docker VM (in MB)\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere network where the virtual machine will be attached\n"
                },
                "password": {
                    "type": "string",
                    "description": "vSphere password\n",
                    "secret": true
                },
                "pool": {
                    "type": "string",
                    "description": "vSphere resource pool for docker VM\n"
                },
                "sshPassword": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh password\n",
                    "secret": true
                },
                "sshPort": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh port\n"
                },
                "sshUser": {
                    "type": "string",
                    "description": "If using a non-B2D image you can specify the ssh user\n"
                },
                "sshUserGroup": {
                    "type": "string",
                    "description": "If using a non-B2D image the uploaded keys will need chown'ed, defaults to staff e.g. docker:staff\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere tags id e.g. urn:xxx\n"
                },
                "username": {
                    "type": "string",
                    "description": "vSphere username\n"
                },
                "vappIpAllocationPolicy": {
                    "type": "string",
                    "description": "vSphere vApp IP allocation policy. Supported values are: dhcp, fixed, transient and fixedAllocated\n"
                },
                "vappIpProtocol": {
                    "type": "string",
                    "description": "vSphere vApp IP protocol for this deployment. Supported values are: IPv4 and IPv6\n"
                },
                "vappProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "vSphere vApp properties\n"
                },
                "vappTransport": {
                    "type": "string",
                    "description": "vSphere OVF environment transports to use for properties. Supported values are: iso and com.vmware.guestInfo\n"
                },
                "vcenter": {
                    "type": "string",
                    "description": "vSphere IP/hostname for vCenter\n"
                },
                "vcenterPort": {
                    "type": "string",
                    "description": "vSphere Port for vCenter\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/PodSecurityAdmissionConfigurationTemplateDefaults:PodSecurityAdmissionConfigurationTemplateDefaults": {
            "properties": {
                "audit": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration audit. This audits a pod in violation of privileged, baseline, or restricted policy (default: privileged)\n"
                },
                "auditVersion": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration audit version (default: latest)\n"
                },
                "enforce": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration enforce. This rejects a pod in violation of privileged, baseline, or restricted policy (default: privileged)\n"
                },
                "enforceVersion": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration enforce version (default: latest)\n"
                },
                "warn": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration warn. This warns the user about a pod in violation of privileged, baseline, or restricted policy (default: privileged)\n"
                },
                "warnVersion": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration warn version (default: latest)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/PodSecurityAdmissionConfigurationTemplateExemptions:PodSecurityAdmissionConfigurationTemplateExemptions": {
            "properties": {
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod Security Admission Configuration namespace exemptions\n"
                },
                "runtimeClasses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod Security Admission Configuration runtime class exemptions\n"
                },
                "usernames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod Security Admission Configuration username exemptions\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ProjectContainerResourceLimit:ProjectContainerResourceLimit": {
            "properties": {
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in project (string)\n"
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in project (string)\n"
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in project (string)\n"
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in project (string)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ProjectResourceQuota:ProjectResourceQuota": {
            "properties": {
                "namespaceDefaultLimit": {
                    "$ref": "#/types/rancher2:index/ProjectResourceQuotaNamespaceDefaultLimit:ProjectResourceQuotaNamespaceDefaultLimit",
                    "description": "Default resource quota limit for  namespaces in project (list maxitems:1)\n"
                },
                "projectLimit": {
                    "$ref": "#/types/rancher2:index/ProjectResourceQuotaProjectLimit:ProjectResourceQuotaProjectLimit",
                    "description": "Resource quota limit for project (list maxitems:1)\n"
                }
            },
            "type": "object",
            "required": [
                "namespaceDefaultLimit",
                "projectLimit"
            ]
        },
        "rancher2:index/ProjectResourceQuotaNamespaceDefaultLimit:ProjectResourceQuotaNamespaceDefaultLimit": {
            "properties": {
                "configMaps": {
                    "type": "string",
                    "description": "Limit for config maps in project (string)\n"
                },
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in project (string)\n"
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in project (string)\n"
                },
                "persistentVolumeClaims": {
                    "type": "string",
                    "description": "Limit for persistent volume claims in project (string)\n"
                },
                "pods": {
                    "type": "string",
                    "description": "Limit for pods in project (string)\n"
                },
                "replicationControllers": {
                    "type": "string",
                    "description": "Limit for replication controllers in project (string)\n"
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in project (string)\n"
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in project (string)\n"
                },
                "requestsStorage": {
                    "type": "string",
                    "description": "Limit for requests storage in project (string)\n"
                },
                "secrets": {
                    "type": "string",
                    "description": "Limit for secrets in project (string)\n"
                },
                "services": {
                    "type": "string"
                },
                "servicesLoadBalancers": {
                    "type": "string",
                    "description": "Limit for services load balancers in project (string)\n"
                },
                "servicesNodePorts": {
                    "type": "string",
                    "description": "Limit for services node ports in project (string)\n\nMore info at [resource-quotas](https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/projects-and-namespaces/resource-quotas/)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/ProjectResourceQuotaProjectLimit:ProjectResourceQuotaProjectLimit": {
            "properties": {
                "configMaps": {
                    "type": "string",
                    "description": "Limit for config maps in project (string)\n"
                },
                "limitsCpu": {
                    "type": "string",
                    "description": "Limit for limits cpu in project (string)\n"
                },
                "limitsMemory": {
                    "type": "string",
                    "description": "Limit for limits memory in project (string)\n"
                },
                "persistentVolumeClaims": {
                    "type": "string",
                    "description": "Limit for persistent volume claims in project (string)\n"
                },
                "pods": {
                    "type": "string",
                    "description": "Limit for pods in project (string)\n"
                },
                "replicationControllers": {
                    "type": "string",
                    "description": "Limit for replication controllers in project (string)\n"
                },
                "requestsCpu": {
                    "type": "string",
                    "description": "Limit for requests cpu in project (string)\n"
                },
                "requestsMemory": {
                    "type": "string",
                    "description": "Limit for requests memory in project (string)\n"
                },
                "requestsStorage": {
                    "type": "string",
                    "description": "Limit for requests storage in project (string)\n"
                },
                "secrets": {
                    "type": "string",
                    "description": "Limit for secrets in project (string)\n"
                },
                "services": {
                    "type": "string"
                },
                "servicesLoadBalancers": {
                    "type": "string",
                    "description": "Limit for services load balancers in project (string)\n"
                },
                "servicesNodePorts": {
                    "type": "string",
                    "description": "Limit for services node ports in project (string)\n\nMore info at [resource-quotas](https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/projects-and-namespaces/resource-quotas/)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/RegistryRegistry:RegistryRegistry": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Address for registry.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the registry (string)\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username for the registry (string)\n"
                }
            },
            "type": "object",
            "required": [
                "address"
            ]
        },
        "rancher2:index/RoleTemplateExternalRule:RoleTemplateExternalRule": {
            "properties": {
                "apiGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule api groups\n"
                },
                "nonResourceUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule non resource urls\n"
                },
                "resourceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resource names\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resources\n"
                },
                "verbs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule verbs\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/RoleTemplateRule:RoleTemplateRule": {
            "properties": {
                "apiGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule api groups\n"
                },
                "nonResourceUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule non resource urls\n"
                },
                "resourceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resource names\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resources\n"
                },
                "verbs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule verbs\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterAksConfigV2:getClusterAksConfigV2": {
            "properties": {
                "authBaseUrl": {
                    "type": "string",
                    "description": "The AKS auth base url\n"
                },
                "authorizedIpRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AKS authorized ip ranges\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "The AKS base url\n"
                },
                "cloudCredentialId": {
                    "type": "string",
                    "description": "The AKS Cloud Credential ID to use\n"
                },
                "dnsPrefix": {
                    "type": "string",
                    "description": "The AKS dns prefix. Required if `import=false`\n"
                },
                "httpApplicationRouting": {
                    "type": "boolean",
                    "description": "Enable AKS http application routing?\n"
                },
                "imported": {
                    "type": "boolean",
                    "description": "Is AKS cluster imported?\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The kubernetes master version. Required if `import=false`\n"
                },
                "linuxAdminUsername": {
                    "type": "string",
                    "description": "The AKS linux admin username\n"
                },
                "linuxSshPublicKey": {
                    "type": "string",
                    "description": "The AKS linux ssh public key\n"
                },
                "loadBalancerSku": {
                    "type": "string",
                    "description": "The AKS load balancer sku\n"
                },
                "logAnalyticsWorkspaceGroup": {
                    "type": "string",
                    "description": "The AKS log analytics workspace group\n"
                },
                "logAnalyticsWorkspaceName": {
                    "type": "string",
                    "description": "The AKS log analytics workspace name\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Is AKS cluster monitoring enabled?\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "networkDnsServiceIp": {
                    "type": "string",
                    "description": "The AKS network dns service ip\n"
                },
                "networkDockerBridgeCidr": {
                    "type": "string",
                    "description": "The AKS network docker bridge cidr\n"
                },
                "networkPlugin": {
                    "type": "string",
                    "description": "The AKS network plugin. Required if `import=false`\n"
                },
                "networkPodCidr": {
                    "type": "string",
                    "description": "The AKS network pod cidr\n"
                },
                "networkPolicy": {
                    "type": "string",
                    "description": "The AKS network policy\n"
                },
                "networkServiceCidr": {
                    "type": "string",
                    "description": "The AKS network service cidr\n"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterAksConfigV2NodePool:getClusterAksConfigV2NodePool"
                    },
                    "description": "The AKS node pools to use. Required if `import=false`\n"
                },
                "nodeResourceGroup": {
                    "type": "string",
                    "description": "The AKS node resource group name\n"
                },
                "outboundType": {
                    "type": "string",
                    "description": "The AKS outbound type for the egress traffic\n"
                },
                "privateCluster": {
                    "type": "boolean",
                    "description": "Is AKS cluster private?\n"
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "The AKS resource group\n"
                },
                "resourceLocation": {
                    "type": "string",
                    "description": "The AKS resource location\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The AKS subnet\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The AKS cluster tags\n"
                },
                "virtualNetwork": {
                    "type": "string",
                    "description": "The AKS virtual network\n"
                },
                "virtualNetworkResourceGroup": {
                    "type": "string",
                    "description": "The AKS virtual network resource group\n"
                }
            },
            "type": "object",
            "required": [
                "cloudCredentialId",
                "httpApplicationRouting",
                "linuxAdminUsername",
                "linuxSshPublicKey",
                "loadBalancerSku",
                "logAnalyticsWorkspaceGroup",
                "logAnalyticsWorkspaceName",
                "monitoring",
                "name",
                "networkDnsServiceIp",
                "networkDockerBridgeCidr",
                "networkPodCidr",
                "networkPolicy",
                "networkServiceCidr",
                "nodeResourceGroup",
                "privateCluster",
                "resourceGroup",
                "resourceLocation",
                "subnet",
                "tags",
                "virtualNetwork",
                "virtualNetworkResourceGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterAksConfigV2NodePool:getClusterAksConfigV2NodePool": {
            "properties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AKS node pool availability zones\n"
                },
                "count": {
                    "type": "integer",
                    "description": "The AKS node pool count\n"
                },
                "enableAutoScaling": {
                    "type": "boolean",
                    "description": "Is AKS node pool auto scaling enabled?\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels for Node Pool object (map)\n"
                },
                "maxCount": {
                    "type": "integer",
                    "description": "The AKS node pool max count\n"
                },
                "maxPods": {
                    "type": "integer",
                    "description": "The AKS node pool max pods\n"
                },
                "maxSurge": {
                    "type": "string",
                    "description": "The AKS node pool max surge\n"
                },
                "minCount": {
                    "type": "integer",
                    "description": "The AKS node pool min count\n"
                },
                "mode": {
                    "type": "string",
                    "description": "The AKS node pool mode\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "orchestratorVersion": {
                    "type": "string",
                    "description": "The AKS node pool orchestrator version\n"
                },
                "osDiskSizeGb": {
                    "type": "integer",
                    "description": "The AKS node pool os disk size gb\n"
                },
                "osDiskType": {
                    "type": "string",
                    "description": "The AKS node pool os disk type\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Enable AKS node pool os type\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AKS node pool taints\n"
                },
                "vmSize": {
                    "type": "string",
                    "description": "The AKS node pool vm size\n"
                }
            },
            "type": "object",
            "required": [
                "labels",
                "name",
                "taints",
                "vmSize"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterClusterAuthEndpoint:getClusterClusterAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fqdn": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterClusterRegistrationToken:getClusterClusterRegistrationToken": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Annotations for Node Pool object (map)\n"
                },
                "clusterId": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n"
                },
                "insecureCommand": {
                    "type": "string"
                },
                "insecureNodeCommand": {
                    "type": "string"
                },
                "insecureWindowsNodeCommand": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels for Node Pool object (map)\n"
                },
                "manifestUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "nodeCommand": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "windowsNodeCommand": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "clusterId",
                "command",
                "id",
                "insecureCommand",
                "insecureNodeCommand",
                "insecureWindowsNodeCommand",
                "labels",
                "manifestUrl",
                "name",
                "nodeCommand",
                "token",
                "windowsNodeCommand"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterClusterTemplateAnswers:getClusterClusterTemplateAnswers": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID for answer\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Project ID for answer\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key/values for answer\n"
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "projectId",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterClusterTemplateQuestion:getClusterClusterTemplateQuestion": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "Default variable value\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Required variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Variable type\n"
                },
                "variable": {
                    "type": "string",
                    "description": "Variable name\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "variable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterEksConfigV2:getClusterEksConfigV2": {
            "properties": {
                "cloudCredentialId": {
                    "type": "string",
                    "description": "The AWS Cloud Credential ID to use\n"
                },
                "imported": {
                    "type": "boolean",
                    "description": "Is EKS cluster imported?\n"
                },
                "kmsKey": {
                    "type": "string",
                    "description": "The AWS kms key to use\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The kubernetes master version\n"
                },
                "loggingTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The AWS logging types\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "nodeGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterEksConfigV2NodeGroup:getClusterEksConfigV2NodeGroup"
                    },
                    "description": "The AWS node groups to use\n"
                },
                "privateAccess": {
                    "type": "boolean",
                    "description": "The EKS cluster has private access\n"
                },
                "publicAccess": {
                    "type": "boolean",
                    "description": "The EKS cluster has public access\n"
                },
                "publicAccessSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The EKS cluster public access sources\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS Region to create the EKS cluster in\n"
                },
                "secretsEncryption": {
                    "type": "boolean",
                    "description": "Enable EKS cluster secret encryption\n"
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups to use for the cluster\n"
                },
                "serviceRole": {
                    "type": "string",
                    "description": "The AWS service role to use\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subnets in the virtual network to use\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The EKS cluster tags\n"
                }
            },
            "type": "object",
            "required": [
                "cloudCredentialId",
                "kubernetesVersion",
                "name",
                "nodeGroups",
                "privateAccess",
                "publicAccess",
                "publicAccessSources",
                "secretsEncryption"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterEksConfigV2NodeGroup:getClusterEksConfigV2NodeGroup": {
            "properties": {
                "desiredSize": {
                    "type": "integer",
                    "description": "The EKS node group desired size\n"
                },
                "diskSize": {
                    "type": "integer",
                    "description": "The EKS node group disk size\n"
                },
                "ec2SshKey": {
                    "type": "string",
                    "description": "The EKS node group ssh key\n"
                },
                "gpu": {
                    "type": "boolean",
                    "description": "Is EKS cluster using gpu?\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The EKS node group image ID\n"
                },
                "instanceType": {
                    "type": "string",
                    "description": "The EKS node group instance type\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels for Node Pool object (map)\n"
                },
                "launchTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterEksConfigV2NodeGroupLaunchTemplate:getClusterEksConfigV2NodeGroupLaunchTemplate"
                    },
                    "description": "The EKS node groups launch template\n"
                },
                "maxSize": {
                    "type": "integer",
                    "description": "The EKS node group maximum size\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The EKS node group minimum size\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "nodeRole": {
                    "type": "string",
                    "description": "The EKS node group node role ARN\n"
                },
                "requestSpotInstances": {
                    "type": "boolean",
                    "description": "Enable EKS node group request spot instances\n"
                },
                "resourceTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The EKS node group resource tags\n"
                },
                "spotInstanceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The EKS node group spot instance types\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The EKS node group subnets\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The EKS node group tags\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The EKS node group user data\n"
                },
                "version": {
                    "type": "string",
                    "description": "The EKS node group k8s version\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnets",
                "userData",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterEksConfigV2NodeGroupLaunchTemplate:getClusterEksConfigV2NodeGroupLaunchTemplate": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "version": {
                    "type": "integer",
                    "description": "The EKS node group launch template version\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2:getClusterGkeConfigV2": {
            "properties": {
                "clusterAddons": {
                    "$ref": "#/types/rancher2:index/getClusterGkeConfigV2ClusterAddons:getClusterGkeConfigV2ClusterAddons",
                    "description": "The GKE cluster addons\n"
                },
                "clusterIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE ip v4 cidr block\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Computed) The description for Cluster (string)\n"
                },
                "enableKubernetesAlpha": {
                    "type": "boolean",
                    "description": "Enable Kubernetes alpha\n"
                },
                "googleCredentialSecret": {
                    "type": "string",
                    "description": "Google credential secret\n",
                    "secret": true
                },
                "imported": {
                    "type": "boolean",
                    "description": "Is GKE cluster imported?\n"
                },
                "ipAllocationPolicy": {
                    "$ref": "#/types/rancher2:index/getClusterGkeConfigV2IpAllocationPolicy:getClusterGkeConfigV2IpAllocationPolicy",
                    "description": "The GKE ip allocation policy\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The kubernetes master version\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels for Node Pool object (map)\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The GKE cluster locations\n"
                },
                "loggingService": {
                    "type": "string",
                    "description": "The GKE cluster logging service\n"
                },
                "maintenanceWindow": {
                    "type": "string",
                    "description": "The GKE cluster maintenance window\n"
                },
                "masterAuthorizedNetworksConfig": {
                    "$ref": "#/types/rancher2:index/getClusterGkeConfigV2MasterAuthorizedNetworksConfig:getClusterGkeConfigV2MasterAuthorizedNetworksConfig",
                    "description": "The GKE cluster master authorized networks config\n"
                },
                "monitoringService": {
                    "type": "string",
                    "description": "The GKE cluster monitoring service\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "network": {
                    "type": "string",
                    "description": "The GKE cluster network\n"
                },
                "networkPolicyEnabled": {
                    "type": "boolean",
                    "description": "Is GKE cluster network policy enabled?\n"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterGkeConfigV2NodePool:getClusterGkeConfigV2NodePool"
                    },
                    "description": "The GKE cluster node pools\n"
                },
                "privateClusterConfig": {
                    "$ref": "#/types/rancher2:index/getClusterGkeConfigV2PrivateClusterConfig:getClusterGkeConfigV2PrivateClusterConfig",
                    "description": "The GKE private cluster config\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The GKE project id\n"
                },
                "region": {
                    "type": "string",
                    "description": "The GKE cluster region. Required if \u003cspan pulumi-lang-nodejs=\"`zone`\" pulumi-lang-dotnet=\"`Zone`\" pulumi-lang-go=\"`zone`\" pulumi-lang-python=\"`zone`\" pulumi-lang-yaml=\"`zone`\" pulumi-lang-java=\"`zone`\"\u003e`zone`\u003c/span\u003e is empty\n"
                },
                "subnetwork": {
                    "type": "string",
                    "description": "The GKE cluster subnetwork\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The GKE cluster zone. Required if \u003cspan pulumi-lang-nodejs=\"`region`\" pulumi-lang-dotnet=\"`Region`\" pulumi-lang-go=\"`region`\" pulumi-lang-python=\"`region`\" pulumi-lang-yaml=\"`region`\" pulumi-lang-java=\"`region`\"\u003e`region`\u003c/span\u003e is empty\n"
                }
            },
            "type": "object",
            "required": [
                "clusterAddons",
                "clusterIpv4CidrBlock",
                "description",
                "enableKubernetesAlpha",
                "googleCredentialSecret",
                "ipAllocationPolicy",
                "kubernetesVersion",
                "labels",
                "locations",
                "loggingService",
                "maintenanceWindow",
                "masterAuthorizedNetworksConfig",
                "monitoringService",
                "name",
                "network",
                "networkPolicyEnabled",
                "nodePools",
                "privateClusterConfig",
                "projectId",
                "region",
                "subnetwork",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2ClusterAddons:getClusterGkeConfigV2ClusterAddons": {
            "properties": {
                "horizontalPodAutoscaling": {
                    "type": "boolean",
                    "description": "Enable GKE horizontal pod autoscaling\n"
                },
                "httpLoadBalancing": {
                    "type": "boolean",
                    "description": "Enable GKE HTTP load balancing\n"
                },
                "networkPolicyConfig": {
                    "type": "boolean",
                    "description": "Enable GKE network policy config\n"
                }
            },
            "type": "object",
            "required": [
                "horizontalPodAutoscaling",
                "httpLoadBalancing",
                "networkPolicyConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2IpAllocationPolicy:getClusterGkeConfigV2IpAllocationPolicy": {
            "properties": {
                "clusterIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE cluster ip v4 allocation cidr block\n"
                },
                "clusterSecondaryRangeName": {
                    "type": "string",
                    "description": "The GKE cluster ip v4 allocation secondary range name\n"
                },
                "createSubnetwork": {
                    "type": "boolean",
                    "description": "Create GKE subnetwork?\n"
                },
                "nodeIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE node ip v4 allocation cidr block\n"
                },
                "servicesIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE services ip v4 allocation cidr block\n"
                },
                "servicesSecondaryRangeName": {
                    "type": "string",
                    "description": "The GKE services ip v4 allocation secondary range name\n"
                },
                "subnetworkName": {
                    "type": "string",
                    "description": "The GKE cluster subnetwork name\n"
                },
                "useIpAliases": {
                    "type": "boolean",
                    "description": "Use GKE ip aliases?\n"
                }
            },
            "type": "object",
            "required": [
                "clusterIpv4CidrBlock",
                "clusterSecondaryRangeName",
                "createSubnetwork",
                "nodeIpv4CidrBlock",
                "servicesIpv4CidrBlock",
                "servicesSecondaryRangeName",
                "subnetworkName",
                "useIpAliases"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2MasterAuthorizedNetworksConfig:getClusterGkeConfigV2MasterAuthorizedNetworksConfig": {
            "properties": {
                "cidrBlocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlock:getClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlock"
                    },
                    "description": "The GKE master authorized network config cidr blocks\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable GKE master authorized network config\n"
                }
            },
            "type": "object",
            "required": [
                "cidrBlocks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlock:getClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlock": {
            "properties": {
                "cidrBlock": {
                    "type": "string",
                    "description": "The GKE master authorized network config cidr block\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The GKE master authorized network config cidr block dispaly name\n"
                }
            },
            "type": "object",
            "required": [
                "cidrBlock"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2NodePool:getClusterGkeConfigV2NodePool": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/rancher2:index/getClusterGkeConfigV2NodePoolAutoscaling:getClusterGkeConfigV2NodePoolAutoscaling",
                    "description": "The GKE node pool config autoscaling\n"
                },
                "config": {
                    "$ref": "#/types/rancher2:index/getClusterGkeConfigV2NodePoolConfig:getClusterGkeConfigV2NodePoolConfig",
                    "description": "The GKE node pool node config\n"
                },
                "initialNodeCount": {
                    "type": "integer",
                    "description": "The GKE node pool config initial node count\n"
                },
                "management": {
                    "$ref": "#/types/rancher2:index/getClusterGkeConfigV2NodePoolManagement:getClusterGkeConfigV2NodePoolManagement",
                    "description": "The GKE node pool config management\n"
                },
                "maxPodsConstraint": {
                    "type": "integer",
                    "description": "The GKE node pool config max pods constraint\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "version": {
                    "type": "string",
                    "description": "The GKE node pool config version\n"
                }
            },
            "type": "object",
            "required": [
                "autoscaling",
                "config",
                "initialNodeCount",
                "management",
                "maxPodsConstraint",
                "name",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2NodePoolAutoscaling:getClusterGkeConfigV2NodePoolAutoscaling": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable GKE node pool config autoscaling\n"
                },
                "maxNodeCount": {
                    "type": "integer",
                    "description": "The GKE node pool config max node count\n"
                },
                "minNodeCount": {
                    "type": "integer",
                    "description": "The GKE node pool config min node count\n"
                }
            },
            "type": "object",
            "required": [
                "maxNodeCount",
                "minNodeCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2NodePoolConfig:getClusterGkeConfigV2NodePoolConfig": {
            "properties": {
                "diskSizeGb": {
                    "type": "integer",
                    "description": "The GKE node config disk size (Gb)\n"
                },
                "diskType": {
                    "type": "string",
                    "description": "The GKE node config disk type\n"
                },
                "imageType": {
                    "type": "string",
                    "description": "The GKE node config image type\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels for Node Pool object (map)\n"
                },
                "localSsdCount": {
                    "type": "integer",
                    "description": "The GKE node config local ssd count\n"
                },
                "machineType": {
                    "type": "string",
                    "description": "The GKE node config machine type\n"
                },
                "oauthScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The GKE node config oauth scopes\n"
                },
                "preemptible": {
                    "type": "boolean",
                    "description": "Enable GKE node config preemptible\n"
                },
                "serviceAccount": {
                    "type": "string",
                    "description": "The GKE node config service account\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The GKE node config tags\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterGkeConfigV2NodePoolConfigTaint:getClusterGkeConfigV2NodePoolConfigTaint"
                    },
                    "description": "The GKE node config taints\n"
                }
            },
            "type": "object",
            "required": [
                "labels",
                "oauthScopes",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2NodePoolConfigTaint:getClusterGkeConfigV2NodePoolConfigTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "effect",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2NodePoolManagement:getClusterGkeConfigV2NodePoolManagement": {
            "properties": {
                "autoRepair": {
                    "type": "boolean",
                    "description": "Enable GKE node pool config management auto repair\n"
                },
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Enable GKE node pool config management auto upgrade\n"
                }
            },
            "type": "object",
            "required": [
                "autoRepair",
                "autoUpgrade"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterGkeConfigV2PrivateClusterConfig:getClusterGkeConfigV2PrivateClusterConfig": {
            "properties": {
                "enablePrivateEndpoint": {
                    "type": "boolean",
                    "description": "Enable GKE cluster private endpoint\n"
                },
                "enablePrivateNodes": {
                    "type": "boolean",
                    "description": "Enable GKE cluster private nodes\n"
                },
                "masterIpv4CidrBlock": {
                    "type": "string",
                    "description": "The GKE cluster private master ip v4 cidr block\n"
                }
            },
            "type": "object",
            "required": [
                "masterIpv4CidrBlock"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterImportedConfig:getClusterImportedConfig": {
            "properties": {
                "privateRegistryUrl": {
                    "type": "string",
                    "description": "Private registry URL\n"
                }
            },
            "type": "object",
            "required": [
                "privateRegistryUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterK3sConfig:getClusterK3sConfig": {
            "properties": {
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterK3sConfigUpgradeStrategy:getClusterK3sConfigUpgradeStrategy",
                    "description": "The K3S upgrade strategy\n"
                },
                "version": {
                    "type": "string",
                    "description": "The K3S kubernetes version\n"
                }
            },
            "type": "object",
            "required": [
                "upgradeStrategy",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterK3sConfigUpgradeStrategy:getClusterK3sConfigUpgradeStrategy": {
            "properties": {
                "drainServerNodes": {
                    "type": "boolean",
                    "description": "Drain server nodes\n"
                },
                "drainWorkerNodes": {
                    "type": "boolean",
                    "description": "Drain worker nodes\n"
                },
                "serverConcurrency": {
                    "type": "integer",
                    "description": "Server concurrency\n"
                },
                "workerConcurrency": {
                    "type": "integer",
                    "description": "Worker concurrency\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterOkeConfig:getClusterOkeConfig": {
            "properties": {
                "clusterType": {
                    "type": "string",
                    "description": "Optionally specify a cluster type of basic or enhanced\n"
                },
                "compartmentId": {
                    "type": "string",
                    "description": "The OCID of the compartment in which to create resources (VCN, worker nodes, etc.)\n"
                },
                "controlPlaneSubnetName": {
                    "type": "string",
                    "description": "The (optional) name of a pre-existing subnet (public or private) for the Kubernetes API endpoint\n"
                },
                "customBootVolumeSize": {
                    "type": "integer",
                    "description": "An optional custom boot volume size (in GB) for the nodes\n"
                },
                "description": {
                    "type": "string",
                    "description": "(Computed) The description for Cluster (string)\n"
                },
                "enableKubernetesDashboard": {
                    "type": "boolean",
                    "description": "Enable the kubernetes dashboard\n"
                },
                "enablePrivateControlPlane": {
                    "type": "boolean",
                    "description": "Whether Kubernetes API endpoint is a private IP only accessible from within the VCN\n"
                },
                "enablePrivateNodes": {
                    "type": "boolean",
                    "description": "Whether worker nodes are deployed into a new private subnet\n"
                },
                "evictionGraceDuration": {
                    "type": "string",
                    "description": "The optional grace period in minutes to allow cordon and drain to complete successfuly\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The fingerprint corresponding to the specified user's private API Key\n"
                },
                "flexMemoryInGbs": {
                    "type": "integer",
                    "description": "Optional amount of memory in GB for nodes (requires flexible node_shape)\n"
                },
                "flexOcpus": {
                    "type": "integer",
                    "description": "Optional number of OCPUs for nodes (requires flexible node_shape)\n"
                },
                "forceDeleteAfterGraceDuration": {
                    "type": "boolean",
                    "description": "Whether to send a SIGKILL signal if a pod does not terminate within the specified grace period\n"
                },
                "imageVerificationKmsKeyId": {
                    "type": "string",
                    "description": "Optional specify a comma separated list of master encryption key OCID(s) to verify images\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "Optional specify the OCID of the KMS Vault master key\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The Kubernetes version that will be used for your master *and* worker nodes e.g. v1.33.1\n"
                },
                "limitNodeCount": {
                    "type": "integer",
                    "description": "Optional limit on the total number of nodes in the pool\n"
                },
                "loadBalancerSubnetName1": {
                    "type": "string",
                    "description": "The name of the first existing subnet to use for Kubernetes services / LB\n"
                },
                "loadBalancerSubnetName2": {
                    "type": "string",
                    "description": "The (optional) name of a second existing subnet to use for Kubernetes services / LB\n"
                },
                "nodeImage": {
                    "type": "string",
                    "description": "The OS for the node image\n"
                },
                "nodePoolDnsDomainName": {
                    "type": "string",
                    "description": "Optional name for DNS domain of node pool subnet\n"
                },
                "nodePoolSubnetName": {
                    "type": "string",
                    "description": "Optional pre-existing subnet (public or private) for nodes\n"
                },
                "nodePublicKeyContents": {
                    "type": "string",
                    "description": "The contents of the SSH public key file to use for the nodes\n"
                },
                "nodeShape": {
                    "type": "string",
                    "description": "The shape of the node (determines number of CPUs and  amount of memory on each node)\n"
                },
                "nodeUserDataContents": {
                    "type": "string",
                    "description": "The contents of custom cloud-init /\u003cspan pulumi-lang-nodejs=\" userData \" pulumi-lang-dotnet=\" UserData \" pulumi-lang-go=\" userData \" pulumi-lang-python=\" user_data \" pulumi-lang-yaml=\" userData \" pulumi-lang-java=\" userData \"\u003e user_data \u003c/span\u003efor the nodes - will be base64 encoded internally if it is not already\n"
                },
                "podCidr": {
                    "type": "string",
                    "description": "Optional specify the pod CIDR, defaults to 10.244.0.0/16\n"
                },
                "podNetwork": {
                    "type": "string",
                    "description": "Optional Pod Network plugin. Choose flannel or native. Defaults to flannel\n"
                },
                "podSubnetName": {
                    "type": "string",
                    "description": "The (optional) name of a pre-existing subnet that pods will be assigned IPs from when using native pod networking\n"
                },
                "privateKeyContents": {
                    "type": "string",
                    "description": "The private API key file contents for the specified user, in PEM format\n",
                    "secret": true
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "The passphrase of the private key for the OKE cluster\n",
                    "secret": true
                },
                "quantityOfNodeSubnets": {
                    "type": "integer",
                    "description": "Number of node subnets (defaults to creating 1 regional subnet)\n"
                },
                "quantityPerSubnet": {
                    "type": "integer",
                    "description": "Number of worker nodes in each subnet / availability domain\n"
                },
                "region": {
                    "type": "string",
                    "description": "The availability domain within the region to host the OKE cluster\n"
                },
                "serviceCidr": {
                    "type": "string",
                    "description": "Optional specify the service CIDR, defaults to 10.96.0.0/16\n"
                },
                "serviceDnsDomainName": {
                    "type": "string",
                    "description": "Optional name for DNS domain of service subnet\n"
                },
                "skipVcnDelete": {
                    "type": "boolean",
                    "description": "Whether to skip deleting VCN\n"
                },
                "tenancyId": {
                    "type": "string",
                    "description": "The OCID of the tenancy in which to create resources\n"
                },
                "userOcid": {
                    "type": "string",
                    "description": "The OCID of a user who has access to the tenancy/compartment\n"
                },
                "vcnCompartmentId": {
                    "type": "string",
                    "description": "The OCID of the compartment (if different from compartment_id) in which to find the pre-existing virtual network set with vcn_name.\n"
                },
                "vcnName": {
                    "type": "string",
                    "description": "The optional name of an existing virtual network to use for the cluster creation. A new VCN will be created if not specified.\n"
                },
                "workerNodeIngressCidr": {
                    "type": "string",
                    "description": "Additional CIDR from which to allow ingress to worker nodes\n"
                }
            },
            "type": "object",
            "required": [
                "compartmentId",
                "kubernetesVersion",
                "nodeImage",
                "nodeShape",
                "region",
                "tenancyId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRke2Config:getClusterRke2Config": {
            "properties": {
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterRke2ConfigUpgradeStrategy:getClusterRke2ConfigUpgradeStrategy",
                    "description": "The RKE2 upgrade strategy\n"
                },
                "version": {
                    "type": "string",
                    "description": "The RKE2 kubernetes version\n"
                }
            },
            "type": "object",
            "required": [
                "upgradeStrategy",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRke2ConfigUpgradeStrategy:getClusterRke2ConfigUpgradeStrategy": {
            "properties": {
                "drainServerNodes": {
                    "type": "boolean",
                    "description": "Drain server nodes\n"
                },
                "drainWorkerNodes": {
                    "type": "boolean",
                    "description": "Drain worker nodes\n"
                },
                "serverConcurrency": {
                    "type": "integer",
                    "description": "Server concurrency\n"
                },
                "workerConcurrency": {
                    "type": "integer",
                    "description": "Worker concurrency\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfig:getClusterRkeConfig": {
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "description": "Optional duration in seconds of addon job.\n"
                },
                "addons": {
                    "type": "string",
                    "description": "Optional addons descripton to deploy on rke cluster.\n"
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional addons yaml manisfest to deploy on rke cluster.\n"
                },
                "authentication": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigAuthentication:getClusterRkeConfigAuthentication",
                    "description": "Kubernetes cluster authentication\n"
                },
                "authorization": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigAuthorization:getClusterRkeConfigAuthorization",
                    "description": "Kubernetes cluster authorization\n"
                },
                "bastionHost": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigBastionHost:getClusterRkeConfigBastionHost",
                    "description": "RKE bastion host\n"
                },
                "cloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProvider:getClusterRkeConfigCloudProvider"
                },
                "dns": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigDns:getClusterRkeConfigDns"
                },
                "enableCriDockerd": {
                    "type": "boolean",
                    "description": "Enable/disable using cri-dockerd\n"
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "description": "Optional ignore docker version on nodes\n"
                },
                "ingress": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigIngress:getClusterRkeConfigIngress",
                    "description": "Kubernetes ingress configuration\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "Optional kubernetes version to deploy\n"
                },
                "monitoring": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigMonitoring:getClusterRkeConfigMonitoring",
                    "description": "Kubernetes cluster monitoring\n"
                },
                "network": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigNetwork:getClusterRkeConfigNetwork",
                    "description": "Kubernetes cluster networking\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfigNode:getClusterRkeConfigNode"
                    },
                    "description": "Optional RKE cluster nodes\n"
                },
                "prefixPath": {
                    "type": "string",
                    "description": "Optional prefix to customize kubernetes path\n"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfigPrivateRegistry:getClusterRkeConfigPrivateRegistry"
                    },
                    "description": "Optional private registries for docker images\n"
                },
                "services": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServices:getClusterRkeConfigServices",
                    "description": "Kubernetes cluster services\n"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "Optional use ssh agent auth\n"
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "Optional cluster level SSH certificate path\n"
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "Optional cluster level SSH private key path\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigUpgradeStrategy:getClusterRkeConfigUpgradeStrategy",
                    "description": "RKE upgrade strategy\n"
                },
                "winPrefixPath": {
                    "type": "string",
                    "description": "Optional prefix to customize kubernetes path for windows nodes\n"
                }
            },
            "type": "object",
            "required": [
                "addonJobTimeout",
                "authentication",
                "authorization",
                "bastionHost",
                "cloudProvider",
                "dns",
                "ingress",
                "kubernetesVersion",
                "monitoring",
                "network",
                "prefixPath",
                "services",
                "sshCertPath",
                "sshKeyPath",
                "upgradeStrategy",
                "winPrefixPath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigAuthentication:getClusterRkeConfigAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "strategy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sans",
                "strategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigAuthorization:getClusterRkeConfigAuthorization": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "options"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigBastionHost:getClusterRkeConfigBastionHost": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "sshAgentAuth": {
                    "type": "boolean"
                },
                "sshKey": {
                    "type": "string",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address",
                "sshKey",
                "sshKeyPath",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProvider:getClusterRkeConfigCloudProvider": {
            "properties": {
                "awsCloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderAwsCloudProvider:getClusterRkeConfigCloudProviderAwsCloudProvider"
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderAzureCloudProvider:getClusterRkeConfigCloudProviderAzureCloudProvider"
                },
                "customCloudProvider": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProvider:getClusterRkeConfigCloudProviderOpenstackCloudProvider"
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProvider:getClusterRkeConfigCloudProviderVsphereCloudProvider"
                }
            },
            "type": "object",
            "required": [
                "customCloudProvider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderAwsCloudProvider:getClusterRkeConfigCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderAwsCloudProviderGlobal:getClusterRkeConfigCloudProviderAwsCloudProviderGlobal"
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride:getClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride"
                    }
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderAwsCloudProviderGlobal:getClusterRkeConfigCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean"
                },
                "disableStrictZoneCheck": {
                    "type": "boolean"
                },
                "elbSecurityGroup": {
                    "type": "string"
                },
                "kubernetesClusterId": {
                    "type": "string"
                },
                "kubernetesClusterTag": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                },
                "routeTableId": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "vpc": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "elbSecurityGroup",
                "kubernetesClusterId",
                "kubernetesClusterTag",
                "roleArn",
                "routeTableId",
                "subnetId",
                "vpc",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride:getClusterRkeConfigCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "region": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "signingMethod": {
                    "type": "string"
                },
                "signingName": {
                    "type": "string"
                },
                "signingRegion": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "region",
                "service",
                "signingMethod",
                "signingName",
                "signingRegion",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderAzureCloudProvider:getClusterRkeConfigCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "secret": true
                },
                "aadClientCertPath": {
                    "type": "string"
                },
                "aadClientId": {
                    "type": "string",
                    "secret": true
                },
                "aadClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "cloud": {
                    "type": "string"
                },
                "cloudProviderBackoff": {
                    "type": "boolean"
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer"
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer"
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer"
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer"
                },
                "cloudProviderRateLimit": {
                    "type": "boolean"
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer"
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer"
                },
                "loadBalancerSku": {
                    "type": "string",
                    "description": "Load balancer type (basic | standard). Must be standard for auto-scaling\n"
                },
                "location": {
                    "type": "string"
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer"
                },
                "primaryAvailabilitySetName": {
                    "type": "string"
                },
                "primaryScaleSetName": {
                    "type": "string"
                },
                "resourceGroup": {
                    "type": "string"
                },
                "routeTableName": {
                    "type": "string"
                },
                "securityGroupName": {
                    "type": "string"
                },
                "subnetName": {
                    "type": "string"
                },
                "subscriptionId": {
                    "type": "string",
                    "secret": true
                },
                "tenantId": {
                    "type": "string",
                    "secret": true
                },
                "useInstanceMetadata": {
                    "type": "boolean"
                },
                "useManagedIdentityExtension": {
                    "type": "boolean"
                },
                "vmType": {
                    "type": "string"
                },
                "vnetName": {
                    "type": "string"
                },
                "vnetResourceGroup": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "aadClientCertPassword",
                "aadClientCertPath",
                "aadClientId",
                "aadClientSecret",
                "cloud",
                "cloudProviderBackoff",
                "cloudProviderBackoffDuration",
                "cloudProviderBackoffExponent",
                "cloudProviderBackoffJitter",
                "cloudProviderBackoffRetries",
                "cloudProviderRateLimit",
                "cloudProviderRateLimitBucket",
                "cloudProviderRateLimitQps",
                "location",
                "maximumLoadBalancerRuleCount",
                "primaryAvailabilitySetName",
                "primaryScaleSetName",
                "resourceGroup",
                "routeTableName",
                "securityGroupName",
                "subnetName",
                "subscriptionId",
                "tenantId",
                "useInstanceMetadata",
                "useManagedIdentityExtension",
                "vmType",
                "vnetName",
                "vnetResourceGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProvider:getClusterRkeConfigCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:getClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage"
                },
                "global": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal:getClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal"
                },
                "loadBalancer": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:getClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer"
                },
                "metadata": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata:getClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata"
                },
                "route": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderRoute:getClusterRkeConfigCloudProviderOpenstackCloudProviderRoute"
                }
            },
            "type": "object",
            "required": [
                "blockStorage",
                "global",
                "loadBalancer",
                "metadata",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:getClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string"
                },
                "ignoreVolumeAz": {
                    "type": "boolean"
                },
                "trustDevicePath": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "bsVersion",
                "ignoreVolumeAz",
                "trustDevicePath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal:getClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string"
                },
                "caFile": {
                    "type": "string"
                },
                "domainId": {
                    "type": "string",
                    "secret": true
                },
                "domainName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "region": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "secret": true
                },
                "tenantName": {
                    "type": "string"
                },
                "trustId": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "caFile",
                "domainId",
                "domainName",
                "password",
                "region",
                "tenantId",
                "tenantName",
                "trustId",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:getClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean"
                },
                "floatingNetworkId": {
                    "type": "string"
                },
                "lbMethod": {
                    "type": "string"
                },
                "lbProvider": {
                    "type": "string"
                },
                "lbVersion": {
                    "type": "string"
                },
                "manageSecurityGroups": {
                    "type": "boolean"
                },
                "monitorDelay": {
                    "type": "string"
                },
                "monitorMaxRetries": {
                    "type": "integer"
                },
                "monitorTimeout": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "useOctavia": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "createMonitor",
                "floatingNetworkId",
                "lbMethod",
                "lbProvider",
                "lbVersion",
                "manageSecurityGroups",
                "subnetId",
                "useOctavia"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata:getClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer"
                },
                "searchOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "requestTimeout",
                "searchOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderOpenstackCloudProviderRoute:getClusterRkeConfigCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "routerId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProvider:getClusterRkeConfigCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderDisk:getClusterRkeConfigCloudProviderVsphereCloudProviderDisk"
                },
                "global": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderGlobal:getClusterRkeConfigCloudProviderVsphereCloudProviderGlobal"
                },
                "network": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderNetwork:getClusterRkeConfigCloudProviderVsphereCloudProviderNetwork"
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:getClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter"
                    }
                },
                "workspace": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace:getClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace"
                }
            },
            "type": "object",
            "required": [
                "disk",
                "global",
                "network",
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderDisk:getClusterRkeConfigCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "scsiControllerType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderGlobal:getClusterRkeConfigCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenters": {
                    "type": "string"
                },
                "gracefulShutdownTimeout": {
                    "type": "string"
                },
                "insecureFlag": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "insecureFlag",
                "password",
                "port",
                "soapRoundtripCount",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderNetwork:getClusterRkeConfigCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "publicNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:getClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "port",
                "soapRoundtripCount",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace:getClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string"
                },
                "defaultDatastore": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "resourcepoolPath": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "defaultDatastore",
                "folder",
                "resourcepoolPath",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigDns:getClusterRkeConfigDns": {
            "properties": {
                "linearAutoscalerParams": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigDnsLinearAutoscalerParams:getClusterRkeConfigDnsLinearAutoscalerParams",
                    "description": "Linear Autoscaler Params\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nodelocal": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigDnsNodelocal:getClusterRkeConfigDnsNodelocal",
                    "description": "Nodelocal dns\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfigDnsToleration:getClusterRkeConfigDnsToleration"
                    },
                    "description": "DNS service tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigDnsUpdateStrategy:getClusterRkeConfigDnsUpdateStrategy",
                    "description": "Update deployment strategy\n"
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeSelector",
                "options",
                "reverseCidrs",
                "upstreamNameservers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigDnsLinearAutoscalerParams:getClusterRkeConfigDnsLinearAutoscalerParams": {
            "properties": {
                "coresPerReplica": {
                    "type": "number"
                },
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                },
                "nodesPerReplica": {
                    "type": "number"
                },
                "preventSinglePointFailure": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfigDnsNodelocal:getClusterRkeConfigDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Node selector key pair\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfigDnsToleration:getClusterRkeConfigDnsToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigDnsUpdateStrategy:getClusterRkeConfigDnsUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigDnsUpdateStrategyRollingUpdate:getClusterRkeConfigDnsUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfigDnsUpdateStrategyRollingUpdate:getClusterRkeConfigDnsUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfigIngress:getClusterRkeConfigIngress": {
            "properties": {
                "defaultBackend": {
                    "type": "boolean"
                },
                "dnsPolicy": {
                    "type": "string"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "httpPort": {
                    "type": "integer"
                },
                "httpsPort": {
                    "type": "integer"
                },
                "networkMode": {
                    "type": "string"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfigIngressToleration:getClusterRkeConfigIngressToleration"
                    },
                    "description": "Ingress add-on tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigIngressUpdateStrategy:getClusterRkeConfigIngressUpdateStrategy",
                    "description": "Update daemon set strategy\n"
                }
            },
            "type": "object",
            "required": [
                "dnsPolicy",
                "extraArgs",
                "httpPort",
                "httpsPort",
                "networkMode",
                "nodeSelector",
                "options",
                "provider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigIngressToleration:getClusterRkeConfigIngressToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigIngressUpdateStrategy:getClusterRkeConfigIngressUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigIngressUpdateStrategyRollingUpdate:getClusterRkeConfigIngressUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfigIngressUpdateStrategyRollingUpdate:getClusterRkeConfigIngressUpdateStrategyRollingUpdate": {
            "properties": {
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfigMonitoring:getClusterRkeConfigMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfigMonitoringToleration:getClusterRkeConfigMonitoringToleration"
                    },
                    "description": "Monitoring add-on tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigMonitoringUpdateStrategy:getClusterRkeConfigMonitoringUpdateStrategy",
                    "description": "Update deployment strategy\n"
                }
            },
            "type": "object",
            "required": [
                "options",
                "provider",
                "replicas"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigMonitoringToleration:getClusterRkeConfigMonitoringToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigMonitoringUpdateStrategy:getClusterRkeConfigMonitoringUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigMonitoringUpdateStrategyRollingUpdate:getClusterRkeConfigMonitoringUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfigMonitoringUpdateStrategyRollingUpdate:getClusterRkeConfigMonitoringUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfigNetwork:getClusterRkeConfigNetwork": {
            "properties": {
                "aciNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigNetworkAciNetworkProvider:getClusterRkeConfigNetworkAciNetworkProvider"
                },
                "calicoNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigNetworkCalicoNetworkProvider:getClusterRkeConfigNetworkCalicoNetworkProvider"
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigNetworkCanalNetworkProvider:getClusterRkeConfigNetworkCanalNetworkProvider"
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigNetworkFlannelNetworkProvider:getClusterRkeConfigNetworkFlannelNetworkProvider"
                },
                "mtu": {
                    "type": "integer"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "plugin": {
                    "type": "string"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfigNetworkToleration:getClusterRkeConfigNetworkToleration"
                    },
                    "description": "Network add-on tolerations\n"
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigNetworkWeaveNetworkProvider:getClusterRkeConfigNetworkWeaveNetworkProvider"
                }
            },
            "type": "object",
            "required": [
                "options",
                "plugin"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigNetworkAciNetworkProvider:getClusterRkeConfigNetworkAciNetworkProvider": {
            "properties": {
                "aep": {
                    "type": "string"
                },
                "apicHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "apicRefreshTickerAdjust": {
                    "type": "string"
                },
                "apicRefreshTime": {
                    "type": "string"
                },
                "apicSubscriptionDelay": {
                    "type": "string"
                },
                "apicUserCrt": {
                    "type": "string",
                    "secret": true
                },
                "apicUserKey": {
                    "type": "string",
                    "secret": true
                },
                "apicUserName": {
                    "type": "string"
                },
                "capic": {
                    "type": "string"
                },
                "controllerLogLevel": {
                    "type": "string"
                },
                "disablePeriodicSnatGlobalInfoSync": {
                    "type": "string"
                },
                "disableWaitForNetwork": {
                    "type": "string"
                },
                "dropLogEnable": {
                    "type": "string"
                },
                "durationWaitForNetwork": {
                    "type": "string"
                },
                "enableEndpointSlice": {
                    "type": "string"
                },
                "encapType": {
                    "type": "string"
                },
                "epRegistry": {
                    "type": "string"
                },
                "externDynamic": {
                    "type": "string"
                },
                "externStatic": {
                    "type": "string"
                },
                "gbpPodSubnet": {
                    "type": "string"
                },
                "hostAgentLogLevel": {
                    "type": "string"
                },
                "imagePullPolicy": {
                    "type": "string"
                },
                "imagePullSecret": {
                    "type": "string"
                },
                "infraVlan": {
                    "type": "string"
                },
                "installIstio": {
                    "type": "string"
                },
                "istioProfile": {
                    "type": "string"
                },
                "kafkaBrokers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "kafkaClientCrt": {
                    "type": "string"
                },
                "kafkaClientKey": {
                    "type": "string"
                },
                "kubeApiVlan": {
                    "type": "string"
                },
                "l3out": {
                    "type": "string"
                },
                "l3outExternalNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxNodesSvcGraph": {
                    "type": "string"
                },
                "mcastRangeEnd": {
                    "type": "string"
                },
                "mcastRangeStart": {
                    "type": "string"
                },
                "mtuHeadRoom": {
                    "type": "string"
                },
                "multusDisable": {
                    "type": "string"
                },
                "noPriorityClass": {
                    "type": "string"
                },
                "nodePodIfEnable": {
                    "type": "string"
                },
                "nodeSubnet": {
                    "type": "string"
                },
                "nodeSvcSubnet": {
                    "type": "string"
                },
                "opflexClientSsl": {
                    "type": "string"
                },
                "opflexDeviceDeleteTimeout": {
                    "type": "string"
                },
                "opflexLogLevel": {
                    "type": "string"
                },
                "opflexMode": {
                    "type": "string"
                },
                "opflexServerPort": {
                    "type": "string"
                },
                "overlayVrfName": {
                    "type": "string"
                },
                "ovsMemoryLimit": {
                    "type": "string"
                },
                "pbrTrackingNonSnat": {
                    "type": "string"
                },
                "podSubnetChunkSize": {
                    "type": "string"
                },
                "runGbpContainer": {
                    "type": "string"
                },
                "runOpflexServerContainer": {
                    "type": "string"
                },
                "serviceMonitorInterval": {
                    "type": "string"
                },
                "serviceVlan": {
                    "type": "string"
                },
                "snatContractScope": {
                    "type": "string"
                },
                "snatNamespace": {
                    "type": "string"
                },
                "snatPortRangeEnd": {
                    "type": "string"
                },
                "snatPortRangeStart": {
                    "type": "string"
                },
                "snatPortsPerNode": {
                    "type": "string"
                },
                "sriovEnable": {
                    "type": "string"
                },
                "subnetDomainName": {
                    "type": "string"
                },
                "systemId": {
                    "type": "string"
                },
                "tenant": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "useAciAnywhereCrd": {
                    "type": "string"
                },
                "useAciCniPriorityClass": {
                    "type": "string"
                },
                "useClusterRole": {
                    "type": "string"
                },
                "useHostNetnsVolume": {
                    "type": "string"
                },
                "useOpflexServerVolume": {
                    "type": "string"
                },
                "usePrivilegedContainer": {
                    "type": "string"
                },
                "vmmController": {
                    "type": "string"
                },
                "vmmDomain": {
                    "type": "string"
                },
                "vrfName": {
                    "type": "string"
                },
                "vrfTenant": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "aep",
                "apicHosts",
                "apicUserCrt",
                "apicUserKey",
                "apicUserName",
                "encapType",
                "externDynamic",
                "externStatic",
                "kubeApiVlan",
                "l3out",
                "l3outExternalNetworks",
                "mcastRangeEnd",
                "mcastRangeStart",
                "nodeSubnet",
                "nodeSvcSubnet",
                "serviceVlan",
                "systemId",
                "token",
                "vrfName",
                "vrfTenant"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigNetworkCalicoNetworkProvider:getClusterRkeConfigNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigNetworkCanalNetworkProvider:getClusterRkeConfigNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "iface"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigNetworkFlannelNetworkProvider:getClusterRkeConfigNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "iface"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigNetworkToleration:getClusterRkeConfigNetworkToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigNetworkWeaveNetworkProvider:getClusterRkeConfigNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigNode:getClusterRkeConfigNode": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "dockerSocket": {
                    "type": "string"
                },
                "hostnameOverride": {
                    "type": "string"
                },
                "internalAddress": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels for Node Pool object (map)\n"
                },
                "nodeId": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean"
                },
                "sshKey": {
                    "type": "string",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "address",
                "dockerSocket",
                "roles",
                "sshKey",
                "sshKeyPath",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigPrivateRegistry:getClusterRkeConfigPrivateRegistry": {
            "properties": {
                "ecrCredentialPlugin": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigPrivateRegistryEcrCredentialPlugin:getClusterRkeConfigPrivateRegistryEcrCredentialPlugin",
                    "description": "ECR credential plugin config\n"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigPrivateRegistryEcrCredentialPlugin:getClusterRkeConfigPrivateRegistryEcrCredentialPlugin": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "secret": true
                },
                "awsSessionToken": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterRkeConfigServices:getClusterRkeConfigServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesEtcd:getClusterRkeConfigServicesEtcd"
                },
                "kubeApi": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubeApi:getClusterRkeConfigServicesKubeApi"
                },
                "kubeController": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubeController:getClusterRkeConfigServicesKubeController"
                },
                "kubelet": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubelet:getClusterRkeConfigServicesKubelet"
                },
                "kubeproxy": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubeproxy:getClusterRkeConfigServicesKubeproxy"
                },
                "scheduler": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesScheduler:getClusterRkeConfigServicesScheduler"
                }
            },
            "type": "object",
            "required": [
                "etcd",
                "kubeApi",
                "kubeController",
                "kubelet",
                "kubeproxy",
                "scheduler"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesEtcd:getClusterRkeConfigServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesEtcdBackupConfig:getClusterRkeConfigServicesEtcdBackupConfig"
                },
                "caCert": {
                    "type": "string",
                    "description": "(Computed) K8s cluster ca cert (string)\n"
                },
                "cert": {
                    "type": "string",
                    "secret": true
                },
                "creation": {
                    "type": "string"
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gid": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "path": {
                    "type": "string"
                },
                "retention": {
                    "type": "string"
                },
                "snapshot": {
                    "type": "boolean"
                },
                "uid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "backupConfig",
                "caCert",
                "cert",
                "creation",
                "extraArgs",
                "image",
                "key",
                "path",
                "retention",
                "snapshot"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesEtcdBackupConfig:getClusterRkeConfigServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "intervalHours": {
                    "type": "integer"
                },
                "retention": {
                    "type": "integer"
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig:getClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig"
                },
                "safeTimestamp": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig:getClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "secret": true
                },
                "bucketName": {
                    "type": "string"
                },
                "customCa": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubeApi:getClusterRkeConfigServicesKubeApi": {
            "properties": {
                "admissionConfiguration": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubeApiAdmissionConfiguration:getClusterRkeConfigServicesKubeApiAdmissionConfiguration",
                    "description": "Cluster admission configuration\n"
                },
                "alwaysPullImages": {
                    "type": "boolean"
                },
                "auditLog": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubeApiAuditLog:getClusterRkeConfigServicesKubeApiAuditLog"
                },
                "eventRateLimit": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubeApiEventRateLimit:getClusterRkeConfigServicesKubeApiEventRateLimit"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubeApiSecretsEncryptionConfig:getClusterRkeConfigServicesKubeApiSecretsEncryptionConfig"
                },
                "serviceClusterIpRange": {
                    "type": "string"
                },
                "serviceNodePortRange": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image",
                "serviceClusterIpRange",
                "serviceNodePortRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubeApiAdmissionConfiguration:getClusterRkeConfigServicesKubeApiAdmissionConfiguration": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Admission configuration ApiVersion\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Admission configuration Kind\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubeApiAdmissionConfigurationPlugin:getClusterRkeConfigServicesKubeApiAdmissionConfigurationPlugin"
                    },
                    "description": "Admission configuration plugins\n"
                }
            },
            "type": "object",
            "required": [
                "plugins"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubeApiAdmissionConfigurationPlugin:getClusterRkeConfigServicesKubeApiAdmissionConfigurationPlugin": {
            "properties": {
                "configuration": {
                    "type": "string",
                    "description": "Plugin configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "path": {
                    "type": "string",
                    "description": "Plugin path\n"
                }
            },
            "type": "object",
            "required": [
                "configuration",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubeApiAuditLog:getClusterRkeConfigServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigServicesKubeApiAuditLogConfiguration:getClusterRkeConfigServicesKubeApiAuditLogConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "configuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubeApiAuditLogConfiguration:getClusterRkeConfigServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string"
                },
                "maxAge": {
                    "type": "integer"
                },
                "maxBackup": {
                    "type": "integer"
                },
                "maxSize": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "policy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubeApiEventRateLimit:getClusterRkeConfigServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "configuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubeApiSecretsEncryptionConfig:getClusterRkeConfigServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "customConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubeController:getClusterRkeConfigServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "serviceClusterIpRange": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterCidr",
                "extraArgs",
                "image",
                "serviceClusterIpRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubelet:getClusterRkeConfigServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string"
                },
                "clusterDomain": {
                    "type": "string"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failSwapOn": {
                    "type": "boolean"
                },
                "generateServingCertificate": {
                    "type": "boolean"
                },
                "image": {
                    "type": "string"
                },
                "infraContainerImage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterDnsServer",
                "clusterDomain",
                "extraArgs",
                "failSwapOn",
                "image",
                "infraContainerImage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesKubeproxy:getClusterRkeConfigServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigServicesScheduler:getClusterRkeConfigServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigUpgradeStrategy:getClusterRkeConfigUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean"
                },
                "drainInput": {
                    "$ref": "#/types/rancher2:index/getClusterRkeConfigUpgradeStrategyDrainInput:getClusterRkeConfigUpgradeStrategyDrainInput"
                },
                "maxUnavailableControlplane": {
                    "type": "string"
                },
                "maxUnavailableWorker": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "drainInput"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterRkeConfigUpgradeStrategyDrainInput:getClusterRkeConfigUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean"
                },
                "force": {
                    "type": "boolean"
                },
                "gracePeriod": {
                    "type": "integer"
                },
                "ignoreDaemonSets": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateMember:getClusterTemplateMember": {
            "properties": {
                "accessType": {
                    "type": "string",
                    "description": "Member access type: member, owner, read-only\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "Member group principal id\n"
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "Member user principal id\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevision:getClusterTemplateTemplateRevision": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Annotations for the cluster template (map)\n"
                },
                "clusterConfig": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfig:getClusterTemplateTemplateRevisionClusterConfig",
                    "description": "Cluster configuration\n"
                },
                "clusterTemplateId": {
                    "type": "string",
                    "description": "Cluster template ID\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Default cluster template revision\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable cluster template revision\n"
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels for the cluster template (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionQuestion:getClusterTemplateTemplateRevisionQuestion"
                    },
                    "description": "Cluster template questions\n"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "clusterConfig",
                "clusterTemplateId",
                "id",
                "labels",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfig:getClusterTemplateTemplateRevisionClusterConfig": {
            "properties": {
                "clusterAuthEndpoint": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint:getClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint",
                    "description": "Local cluster auth endpoint\n"
                },
                "defaultClusterRoleForProjectMembers": {
                    "type": "string",
                    "description": "Default cluster role for project members\n"
                },
                "defaultPodSecurityAdmissionConfigurationTemplateName": {
                    "type": "string",
                    "description": "Default pod security admission configuration template name\n"
                },
                "desiredAgentImage": {
                    "type": "string",
                    "description": "Desired agent image\n"
                },
                "desiredAuthImage": {
                    "type": "string",
                    "description": "Desired auth image\n"
                },
                "dockerRootDir": {
                    "type": "string",
                    "description": "Docker Root Dir\n"
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "description": "Enable project network isolation\n"
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfig",
                    "description": "Rancher Kubernetes Engine Config\n"
                },
                "windowsPreferedCluster": {
                    "type": "boolean",
                    "description": "Windows prefered cluster\n"
                }
            },
            "type": "object",
            "required": [
                "clusterAuthEndpoint",
                "defaultClusterRoleForProjectMembers",
                "defaultPodSecurityAdmissionConfigurationTemplateName",
                "desiredAgentImage",
                "desiredAuthImage",
                "dockerRootDir",
                "rkeConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint:getClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fqdn": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfig": {
            "properties": {
                "addonJobTimeout": {
                    "type": "integer",
                    "description": "Optional duration in seconds of addon job.\n"
                },
                "addons": {
                    "type": "string",
                    "description": "Optional addons descripton to deploy on rke cluster.\n"
                },
                "addonsIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional addons yaml manisfest to deploy on rke cluster.\n"
                },
                "authentication": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication:getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication",
                    "description": "Kubernetes cluster authentication\n"
                },
                "authorization": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization:getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization",
                    "description": "Kubernetes cluster authorization\n"
                },
                "bastionHost": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost:getClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost",
                    "description": "RKE bastion host\n"
                },
                "cloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider"
                },
                "dns": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDns:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDns"
                },
                "enableCriDockerd": {
                    "type": "boolean",
                    "description": "Enable/disable using cri-dockerd\n"
                },
                "ignoreDockerVersion": {
                    "type": "boolean",
                    "description": "Optional ignore docker version on nodes\n"
                },
                "ingress": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress",
                    "description": "Kubernetes ingress configuration\n"
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "Optional kubernetes version to deploy\n"
                },
                "monitoring": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring",
                    "description": "Kubernetes cluster monitoring\n"
                },
                "network": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork",
                    "description": "Kubernetes cluster networking\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNode:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNode"
                    },
                    "description": "Optional RKE cluster nodes\n"
                },
                "prefixPath": {
                    "type": "string",
                    "description": "Optional prefix to customize kubernetes path\n"
                },
                "privateRegistries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry:getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry"
                    },
                    "description": "Optional private registries for docker images\n"
                },
                "services": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServices:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServices",
                    "description": "Kubernetes cluster services\n"
                },
                "sshAgentAuth": {
                    "type": "boolean",
                    "description": "Optional use ssh agent auth\n"
                },
                "sshCertPath": {
                    "type": "string",
                    "description": "Optional cluster level SSH certificate path\n"
                },
                "sshKeyPath": {
                    "type": "string",
                    "description": "Optional cluster level SSH private key path\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy",
                    "description": "RKE upgrade strategy\n"
                },
                "winPrefixPath": {
                    "type": "string",
                    "description": "Optional prefix to customize kubernetes path for windows nodes\n"
                }
            },
            "type": "object",
            "required": [
                "addonJobTimeout",
                "authentication",
                "authorization",
                "bastionHost",
                "cloudProvider",
                "dns",
                "ingress",
                "kubernetesVersion",
                "monitoring",
                "network",
                "prefixPath",
                "services",
                "sshCertPath",
                "sshKeyPath",
                "upgradeStrategy",
                "winPrefixPath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication:getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication": {
            "properties": {
                "sans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "strategy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sans",
                "strategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization:getClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "options"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost:getClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "sshAgentAuth": {
                    "type": "boolean"
                },
                "sshKey": {
                    "type": "string",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address",
                "sshKey",
                "sshKeyPath",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider": {
            "properties": {
                "awsCloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider"
                },
                "azureCloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider"
                },
                "customCloudProvider": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "openstackCloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider"
                },
                "vsphereCloudProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider"
                }
            },
            "type": "object",
            "required": [
                "customCloudProvider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProvider": {
            "properties": {
                "global": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal"
                },
                "serviceOverrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride"
                    }
                }
            },
            "type": "object",
            "required": [
                "global"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobal": {
            "properties": {
                "disableSecurityGroupIngress": {
                    "type": "boolean"
                },
                "disableStrictZoneCheck": {
                    "type": "boolean"
                },
                "elbSecurityGroup": {
                    "type": "string"
                },
                "kubernetesClusterId": {
                    "type": "string"
                },
                "kubernetesClusterTag": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                },
                "routeTableId": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "vpc": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "elbSecurityGroup",
                "kubernetesClusterId",
                "kubernetesClusterTag",
                "roleArn",
                "routeTableId",
                "subnetId",
                "vpc",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverride": {
            "properties": {
                "region": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "signingMethod": {
                    "type": "string"
                },
                "signingName": {
                    "type": "string"
                },
                "signingRegion": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "region",
                "service",
                "signingMethod",
                "signingName",
                "signingRegion",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProvider": {
            "properties": {
                "aadClientCertPassword": {
                    "type": "string",
                    "secret": true
                },
                "aadClientCertPath": {
                    "type": "string"
                },
                "aadClientId": {
                    "type": "string",
                    "secret": true
                },
                "aadClientSecret": {
                    "type": "string",
                    "secret": true
                },
                "cloud": {
                    "type": "string"
                },
                "cloudProviderBackoff": {
                    "type": "boolean"
                },
                "cloudProviderBackoffDuration": {
                    "type": "integer"
                },
                "cloudProviderBackoffExponent": {
                    "type": "integer"
                },
                "cloudProviderBackoffJitter": {
                    "type": "integer"
                },
                "cloudProviderBackoffRetries": {
                    "type": "integer"
                },
                "cloudProviderRateLimit": {
                    "type": "boolean"
                },
                "cloudProviderRateLimitBucket": {
                    "type": "integer"
                },
                "cloudProviderRateLimitQps": {
                    "type": "integer"
                },
                "loadBalancerSku": {
                    "type": "string",
                    "description": "Load balancer type (basic | standard). Must be standard for auto-scaling\n"
                },
                "location": {
                    "type": "string"
                },
                "maximumLoadBalancerRuleCount": {
                    "type": "integer"
                },
                "primaryAvailabilitySetName": {
                    "type": "string"
                },
                "primaryScaleSetName": {
                    "type": "string"
                },
                "resourceGroup": {
                    "type": "string"
                },
                "routeTableName": {
                    "type": "string"
                },
                "securityGroupName": {
                    "type": "string"
                },
                "subnetName": {
                    "type": "string"
                },
                "subscriptionId": {
                    "type": "string",
                    "secret": true
                },
                "tenantId": {
                    "type": "string",
                    "secret": true
                },
                "useInstanceMetadata": {
                    "type": "boolean"
                },
                "useManagedIdentityExtension": {
                    "type": "boolean"
                },
                "vmType": {
                    "type": "string"
                },
                "vnetName": {
                    "type": "string"
                },
                "vnetResourceGroup": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "aadClientCertPassword",
                "aadClientCertPath",
                "aadClientId",
                "aadClientSecret",
                "cloud",
                "cloudProviderBackoff",
                "cloudProviderBackoffDuration",
                "cloudProviderBackoffExponent",
                "cloudProviderBackoffJitter",
                "cloudProviderBackoffRetries",
                "cloudProviderRateLimit",
                "cloudProviderRateLimitBucket",
                "cloudProviderRateLimitQps",
                "location",
                "maximumLoadBalancerRuleCount",
                "primaryAvailabilitySetName",
                "primaryScaleSetName",
                "resourceGroup",
                "routeTableName",
                "securityGroupName",
                "subnetName",
                "subscriptionId",
                "tenantId",
                "useInstanceMetadata",
                "useManagedIdentityExtension",
                "vmType",
                "vnetName",
                "vnetResourceGroup"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProvider": {
            "properties": {
                "blockStorage": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage"
                },
                "global": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal"
                },
                "loadBalancer": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer"
                },
                "metadata": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata"
                },
                "route": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute"
                }
            },
            "type": "object",
            "required": [
                "blockStorage",
                "global",
                "loadBalancer",
                "metadata",
                "route"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorage": {
            "properties": {
                "bsVersion": {
                    "type": "string"
                },
                "ignoreVolumeAz": {
                    "type": "boolean"
                },
                "trustDevicePath": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "bsVersion",
                "ignoreVolumeAz",
                "trustDevicePath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobal": {
            "properties": {
                "authUrl": {
                    "type": "string"
                },
                "caFile": {
                    "type": "string"
                },
                "domainId": {
                    "type": "string",
                    "secret": true
                },
                "domainName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "region": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "string",
                    "secret": true
                },
                "tenantName": {
                    "type": "string"
                },
                "trustId": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "authUrl",
                "caFile",
                "domainId",
                "domainName",
                "password",
                "region",
                "tenantId",
                "tenantName",
                "trustId",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer": {
            "properties": {
                "createMonitor": {
                    "type": "boolean"
                },
                "floatingNetworkId": {
                    "type": "string"
                },
                "lbMethod": {
                    "type": "string"
                },
                "lbProvider": {
                    "type": "string"
                },
                "lbVersion": {
                    "type": "string"
                },
                "manageSecurityGroups": {
                    "type": "boolean"
                },
                "monitorDelay": {
                    "type": "string"
                },
                "monitorMaxRetries": {
                    "type": "integer"
                },
                "monitorTimeout": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "useOctavia": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "createMonitor",
                "floatingNetworkId",
                "lbMethod",
                "lbProvider",
                "lbVersion",
                "manageSecurityGroups",
                "subnetId",
                "useOctavia"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadata": {
            "properties": {
                "requestTimeout": {
                    "type": "integer"
                },
                "searchOrder": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "requestTimeout",
                "searchOrder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRoute": {
            "properties": {
                "routerId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "routerId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProvider": {
            "properties": {
                "disk": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk"
                },
                "global": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal"
                },
                "network": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork"
                },
                "virtualCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter"
                    }
                },
                "workspace": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace"
                }
            },
            "type": "object",
            "required": [
                "disk",
                "global",
                "network",
                "virtualCenters",
                "workspace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDisk": {
            "properties": {
                "scsiControllerType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "scsiControllerType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobal": {
            "properties": {
                "datacenters": {
                    "type": "string"
                },
                "gracefulShutdownTimeout": {
                    "type": "string"
                },
                "insecureFlag": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "insecureFlag",
                "password",
                "port",
                "soapRoundtripCount",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetwork": {
            "properties": {
                "publicNetwork": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "publicNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenter": {
            "properties": {
                "datacenters": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "port": {
                    "type": "string"
                },
                "soapRoundtripCount": {
                    "type": "integer"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "datacenters",
                "name",
                "password",
                "port",
                "soapRoundtripCount",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace:getClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspace": {
            "properties": {
                "datacenter": {
                    "type": "string"
                },
                "defaultDatastore": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "resourcepoolPath": {
                    "type": "string"
                },
                "server": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "defaultDatastore",
                "folder",
                "resourcepoolPath",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDns:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDns": {
            "properties": {
                "linearAutoscalerParams": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParams:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParams",
                    "description": "Linear Autoscaler Params\n"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "nodelocal": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal",
                    "description": "Nodelocal dns\n"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "reverseCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsToleration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsToleration"
                    },
                    "description": "DNS service tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategy",
                    "description": "Update deployment strategy\n"
                },
                "upstreamNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "nodeSelector",
                "options",
                "reverseCidrs",
                "upstreamNameservers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParams:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParams": {
            "properties": {
                "coresPerReplica": {
                    "type": "number"
                },
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                },
                "nodesPerReplica": {
                    "type": "number"
                },
                "preventSinglePointFailure": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocal": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Node selector key pair\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsToleration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdate:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdate:getClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress": {
            "properties": {
                "defaultBackend": {
                    "type": "boolean"
                },
                "dnsPolicy": {
                    "type": "string"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "httpPort": {
                    "type": "integer"
                },
                "httpsPort": {
                    "type": "integer"
                },
                "networkMode": {
                    "type": "string"
                },
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressToleration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressToleration"
                    },
                    "description": "Ingress add-on tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategy",
                    "description": "Update daemon set strategy\n"
                }
            },
            "type": "object",
            "required": [
                "dnsPolicy",
                "extraArgs",
                "httpPort",
                "httpsPort",
                "networkMode",
                "nodeSelector",
                "options",
                "provider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressToleration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdate:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdate:getClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdate": {
            "properties": {
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring": {
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "provider": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringToleration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringToleration"
                    },
                    "description": "Monitoring add-on tolerations\n"
                },
                "updateStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy",
                    "description": "Update deployment strategy\n"
                }
            },
            "type": "object",
            "required": [
                "options",
                "provider",
                "replicas"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringToleration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategy": {
            "properties": {
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate",
                    "description": "Rolling update for update strategy\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "Strategy\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate:getClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "integer",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "integer",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork": {
            "properties": {
                "aciNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProvider"
                },
                "calicoNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider"
                },
                "canalNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider"
                },
                "flannelNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider"
                },
                "mtu": {
                    "type": "integer"
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "plugin": {
                    "type": "string"
                },
                "tolerations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkToleration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkToleration"
                    },
                    "description": "Network add-on tolerations\n"
                },
                "weaveNetworkProvider": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider"
                }
            },
            "type": "object",
            "required": [
                "options",
                "plugin"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProvider": {
            "properties": {
                "aep": {
                    "type": "string"
                },
                "apicHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "apicRefreshTickerAdjust": {
                    "type": "string"
                },
                "apicRefreshTime": {
                    "type": "string"
                },
                "apicSubscriptionDelay": {
                    "type": "string"
                },
                "apicUserCrt": {
                    "type": "string",
                    "secret": true
                },
                "apicUserKey": {
                    "type": "string",
                    "secret": true
                },
                "apicUserName": {
                    "type": "string"
                },
                "capic": {
                    "type": "string"
                },
                "controllerLogLevel": {
                    "type": "string"
                },
                "disablePeriodicSnatGlobalInfoSync": {
                    "type": "string"
                },
                "disableWaitForNetwork": {
                    "type": "string"
                },
                "dropLogEnable": {
                    "type": "string"
                },
                "durationWaitForNetwork": {
                    "type": "string"
                },
                "enableEndpointSlice": {
                    "type": "string"
                },
                "encapType": {
                    "type": "string"
                },
                "epRegistry": {
                    "type": "string"
                },
                "externDynamic": {
                    "type": "string"
                },
                "externStatic": {
                    "type": "string"
                },
                "gbpPodSubnet": {
                    "type": "string"
                },
                "hostAgentLogLevel": {
                    "type": "string"
                },
                "imagePullPolicy": {
                    "type": "string"
                },
                "imagePullSecret": {
                    "type": "string"
                },
                "infraVlan": {
                    "type": "string"
                },
                "installIstio": {
                    "type": "string"
                },
                "istioProfile": {
                    "type": "string"
                },
                "kafkaBrokers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "kafkaClientCrt": {
                    "type": "string"
                },
                "kafkaClientKey": {
                    "type": "string"
                },
                "kubeApiVlan": {
                    "type": "string"
                },
                "l3out": {
                    "type": "string"
                },
                "l3outExternalNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxNodesSvcGraph": {
                    "type": "string"
                },
                "mcastRangeEnd": {
                    "type": "string"
                },
                "mcastRangeStart": {
                    "type": "string"
                },
                "mtuHeadRoom": {
                    "type": "string"
                },
                "multusDisable": {
                    "type": "string"
                },
                "noPriorityClass": {
                    "type": "string"
                },
                "nodePodIfEnable": {
                    "type": "string"
                },
                "nodeSubnet": {
                    "type": "string"
                },
                "nodeSvcSubnet": {
                    "type": "string"
                },
                "opflexClientSsl": {
                    "type": "string"
                },
                "opflexDeviceDeleteTimeout": {
                    "type": "string"
                },
                "opflexLogLevel": {
                    "type": "string"
                },
                "opflexMode": {
                    "type": "string"
                },
                "opflexServerPort": {
                    "type": "string"
                },
                "overlayVrfName": {
                    "type": "string"
                },
                "ovsMemoryLimit": {
                    "type": "string"
                },
                "pbrTrackingNonSnat": {
                    "type": "string"
                },
                "podSubnetChunkSize": {
                    "type": "string"
                },
                "runGbpContainer": {
                    "type": "string"
                },
                "runOpflexServerContainer": {
                    "type": "string"
                },
                "serviceMonitorInterval": {
                    "type": "string"
                },
                "serviceVlan": {
                    "type": "string"
                },
                "snatContractScope": {
                    "type": "string"
                },
                "snatNamespace": {
                    "type": "string"
                },
                "snatPortRangeEnd": {
                    "type": "string"
                },
                "snatPortRangeStart": {
                    "type": "string"
                },
                "snatPortsPerNode": {
                    "type": "string"
                },
                "sriovEnable": {
                    "type": "string"
                },
                "subnetDomainName": {
                    "type": "string"
                },
                "systemId": {
                    "type": "string"
                },
                "tenant": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "useAciAnywhereCrd": {
                    "type": "string"
                },
                "useAciCniPriorityClass": {
                    "type": "string"
                },
                "useClusterRole": {
                    "type": "string"
                },
                "useHostNetnsVolume": {
                    "type": "string"
                },
                "useOpflexServerVolume": {
                    "type": "string"
                },
                "usePrivilegedContainer": {
                    "type": "string"
                },
                "vmmController": {
                    "type": "string"
                },
                "vmmDomain": {
                    "type": "string"
                },
                "vrfName": {
                    "type": "string"
                },
                "vrfTenant": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "aep",
                "apicHosts",
                "apicUserCrt",
                "apicUserKey",
                "apicUserName",
                "encapType",
                "externDynamic",
                "externStatic",
                "kubeApiVlan",
                "l3out",
                "l3outExternalNetworks",
                "mcastRangeEnd",
                "mcastRangeStart",
                "nodeSubnet",
                "nodeSvcSubnet",
                "serviceVlan",
                "systemId",
                "token",
                "vrfName",
                "vrfTenant"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProvider": {
            "properties": {
                "cloudProvider": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "iface"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProvider": {
            "properties": {
                "iface": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "iface"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkToleration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkToleration": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "seconds": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "seconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProvider": {
            "properties": {
                "password": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigNode:getClusterTemplateTemplateRevisionClusterConfigRkeConfigNode": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "dockerSocket": {
                    "type": "string"
                },
                "hostnameOverride": {
                    "type": "string"
                },
                "internalAddress": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels for the cluster template (map)\n"
                },
                "nodeId": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sshAgentAuth": {
                    "type": "boolean"
                },
                "sshKey": {
                    "type": "string",
                    "secret": true
                },
                "sshKeyPath": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "address",
                "dockerSocket",
                "roles",
                "sshKey",
                "sshKeyPath",
                "user"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry:getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry": {
            "properties": {
                "ecrCredentialPlugin": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPlugin:getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPlugin",
                    "description": "ECR credential plugin config\n"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPlugin:getClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPlugin": {
            "properties": {
                "awsAccessKeyId": {
                    "type": "string"
                },
                "awsSecretAccessKey": {
                    "type": "string",
                    "secret": true
                },
                "awsSessionToken": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServices:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServices": {
            "properties": {
                "etcd": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd"
                },
                "kubeApi": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi"
                },
                "kubeController": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController"
                },
                "kubelet": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet"
                },
                "kubeproxy": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy"
                },
                "scheduler": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler"
                }
            },
            "type": "object",
            "required": [
                "etcd",
                "kubeApi",
                "kubeController",
                "kubelet",
                "kubeproxy",
                "scheduler"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcd": {
            "properties": {
                "backupConfig": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig"
                },
                "caCert": {
                    "type": "string"
                },
                "cert": {
                    "type": "string",
                    "secret": true
                },
                "creation": {
                    "type": "string"
                },
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gid": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "path": {
                    "type": "string"
                },
                "retention": {
                    "type": "string"
                },
                "snapshot": {
                    "type": "boolean"
                },
                "uid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "backupConfig",
                "caCert",
                "cert",
                "creation",
                "extraArgs",
                "image",
                "key",
                "path",
                "retention",
                "snapshot"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "intervalHours": {
                    "type": "integer"
                },
                "retention": {
                    "type": "integer"
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig"
                },
                "safeTimestamp": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "secret": true
                },
                "bucketName": {
                    "type": "string"
                },
                "customCa": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApi": {
            "properties": {
                "admissionConfiguration": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfiguration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfiguration",
                    "description": "Cluster admission configuration\n"
                },
                "alwaysPullImages": {
                    "type": "boolean"
                },
                "auditLog": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog"
                },
                "eventRateLimit": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "secretsEncryptionConfig": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig"
                },
                "serviceClusterIpRange": {
                    "type": "string"
                },
                "serviceNodePortRange": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image",
                "serviceClusterIpRange",
                "serviceNodePortRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfiguration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfiguration": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Admission configuration ApiVersion\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Admission configuration Kind\n"
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPlugin:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPlugin"
                    },
                    "description": "Admission configuration plugins\n"
                }
            },
            "type": "object",
            "required": [
                "plugins"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPlugin:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPlugin": {
            "properties": {
                "configuration": {
                    "type": "string",
                    "description": "Plugin configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "path": {
                    "type": "string",
                    "description": "Plugin path\n"
                }
            },
            "type": "object",
            "required": [
                "configuration",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLog": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "configuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfiguration": {
            "properties": {
                "format": {
                    "type": "string"
                },
                "maxAge": {
                    "type": "integer"
                },
                "maxBackup": {
                    "type": "integer"
                },
                "maxSize": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "policy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimit": {
            "properties": {
                "configuration": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "configuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfig": {
            "properties": {
                "customConfig": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "customConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeController": {
            "properties": {
                "clusterCidr": {
                    "type": "string"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "serviceClusterIpRange": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterCidr",
                "extraArgs",
                "image",
                "serviceClusterIpRange"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubelet": {
            "properties": {
                "clusterDnsServer": {
                    "type": "string"
                },
                "clusterDomain": {
                    "type": "string"
                },
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failSwapOn": {
                    "type": "boolean"
                },
                "generateServingCertificate": {
                    "type": "boolean"
                },
                "image": {
                    "type": "string"
                },
                "infraContainerImage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clusterDnsServer",
                "clusterDomain",
                "extraArgs",
                "failSwapOn",
                "image",
                "infraContainerImage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxy": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler:getClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesScheduler": {
            "properties": {
                "extraArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extraBinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraEnvs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "extraArgs",
                "image"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy:getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy": {
            "properties": {
                "drain": {
                    "type": "boolean"
                },
                "drainInput": {
                    "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput:getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput"
                },
                "maxUnavailableControlplane": {
                    "type": "string"
                },
                "maxUnavailableWorker": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "drainInput"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput:getClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInput": {
            "properties": {
                "deleteLocalData": {
                    "type": "boolean"
                },
                "force": {
                    "type": "boolean"
                },
                "gracePeriod": {
                    "type": "integer"
                },
                "ignoreDaemonSets": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterTemplateTemplateRevisionQuestion:getClusterTemplateTemplateRevisionQuestion": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "Default variable value\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Required variable\n"
                },
                "type": {
                    "type": "string",
                    "description": "Variable type\n"
                },
                "variable": {
                    "type": "string",
                    "description": "Variable name\n"
                }
            },
            "type": "object",
            "required": [
                "default",
                "variable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2AgentEnvVar:getClusterV2AgentEnvVar": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster v2 (string)\n"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2ClusterRegistrationToken:getClusterV2ClusterRegistrationToken": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource\n"
                },
                "clusterId": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) The ID of the resource (string)\n"
                },
                "insecureCommand": {
                    "type": "string"
                },
                "insecureNodeCommand": {
                    "type": "string"
                },
                "insecureWindowsNodeCommand": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource\n"
                },
                "manifestUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster v2 (string)\n"
                },
                "nodeCommand": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "windowsNodeCommand": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "annotations",
                "clusterId",
                "command",
                "id",
                "insecureCommand",
                "insecureNodeCommand",
                "insecureWindowsNodeCommand",
                "labels",
                "manifestUrl",
                "name",
                "nodeCommand",
                "token",
                "windowsNodeCommand"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfig:getClusterV2RkeConfig": {
            "properties": {
                "additionalManifest": {
                    "type": "string",
                    "description": "Cluster V2 additional manifest\n"
                },
                "chartValues": {
                    "type": "string",
                    "description": "Cluster V2 chart values. It should be in YAML format\n"
                },
                "etcd": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigEtcd:getClusterV2RkeConfigEtcd",
                    "description": "Cluster V2 etcd\n"
                },
                "etcdSnapshotCreate": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigEtcdSnapshotCreate:getClusterV2RkeConfigEtcdSnapshotCreate",
                    "description": "Cluster V2 etcd snapshot create\n"
                },
                "etcdSnapshotRestore": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigEtcdSnapshotRestore:getClusterV2RkeConfigEtcdSnapshotRestore",
                    "description": "Cluster V2 etcd snapshot restore\n"
                },
                "localAuthEndpoint": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigLocalAuthEndpoint:getClusterV2RkeConfigLocalAuthEndpoint",
                    "description": "Cluster V2 local auth endpoint\n",
                    "deprecationMessage": "Use rancher2_cluster_v2.local_auth_endpoint instead"
                },
                "machineGlobalConfig": {
                    "type": "string",
                    "description": "Cluster V2 machine global config\n"
                },
                "machinePoolDefaults": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachinePoolDefault:getClusterV2RkeConfigMachinePoolDefault"
                    },
                    "description": "Default values for machine pool configurations if unset\n"
                },
                "machinePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachinePool:getClusterV2RkeConfigMachinePool"
                    },
                    "description": "Cluster V2 machine pools\n"
                },
                "machineSelectorConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorConfig:getClusterV2RkeConfigMachineSelectorConfig"
                    },
                    "description": "Cluster V2 machine selector config\n"
                },
                "machineSelectorFiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorFile:getClusterV2RkeConfigMachineSelectorFile"
                    },
                    "description": "Cluster V2 machine selector files\n"
                },
                "registries": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigRegistries:getClusterV2RkeConfigRegistries",
                    "description": "Cluster V2 registries\n"
                },
                "rotateCertificates": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigRotateCertificates:getClusterV2RkeConfigRotateCertificates",
                    "description": "Cluster V2 certificate rotation\n"
                },
                "upgradeStrategy": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigUpgradeStrategy:getClusterV2RkeConfigUpgradeStrategy",
                    "description": "Cluster V2 upgrade strategy\n"
                }
            },
            "type": "object",
            "required": [
                "etcd",
                "machinePoolDefaults",
                "machinePools",
                "machineSelectorConfigs",
                "machineSelectorFiles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigEtcd:getClusterV2RkeConfigEtcd": {
            "properties": {
                "disableSnapshots": {
                    "type": "boolean",
                    "description": "Disable ETCD snapshots\n"
                },
                "s3Config": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigEtcdS3Config:getClusterV2RkeConfigEtcdS3Config",
                    "description": "ETCD snapshot S3 config\n"
                },
                "snapshotRetention": {
                    "type": "integer",
                    "description": "ETCD snapshot retention\n"
                },
                "snapshotScheduleCron": {
                    "type": "string",
                    "description": "ETCD snapshot schedule cron (e.g `\"0 */5 * * *\"`)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigEtcdS3Config:getClusterV2RkeConfigEtcdS3Config": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "ETCD snapshot S3 bucket\n"
                },
                "cloudCredentialName": {
                    "type": "string",
                    "description": "ETCD snapshot S3 cloud credential name\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "ETCD snapshot S3 endpoint\n"
                },
                "endpointCa": {
                    "type": "string",
                    "description": "ETCD snapshot S3 endpoint CA\n"
                },
                "folder": {
                    "type": "string",
                    "description": "ETCD snapshot S3 folder\n"
                },
                "region": {
                    "type": "string",
                    "description": "ETCD snapshot S3 region\n"
                },
                "skipSslVerify": {
                    "type": "boolean",
                    "description": "Disable ETCD skip ssl verify\n"
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigEtcdSnapshotCreate:getClusterV2RkeConfigEtcdSnapshotCreate": {
            "properties": {
                "generation": {
                    "type": "integer",
                    "description": "ETCD generation to initiate a snapshot\n"
                }
            },
            "type": "object",
            "required": [
                "generation"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigEtcdSnapshotRestore:getClusterV2RkeConfigEtcdSnapshotRestore": {
            "properties": {
                "generation": {
                    "type": "integer",
                    "description": "ETCD snapshot desired generation\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster v2 (string)\n"
                },
                "restoreRkeConfig": {
                    "type": "string",
                    "description": "ETCD restore RKE config (set to none, all, or kubernetesVersion)\n"
                }
            },
            "type": "object",
            "required": [
                "generation",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigLocalAuthEndpoint:getClusterV2RkeConfigLocalAuthEndpoint": {
            "properties": {
                "caCerts": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fqdn": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigMachinePool:getClusterV2RkeConfigMachinePool": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the MachineDeployment object\n"
                },
                "cloudCredentialSecretName": {
                    "type": "string",
                    "description": "(Computed) Cluster V2 cloud credential secret name (string)\n"
                },
                "controlPlaneRole": {
                    "type": "boolean",
                    "description": "Machine pool control plane role\n"
                },
                "drainBeforeDelete": {
                    "type": "boolean",
                    "description": "Machine pool drain before delete\n"
                },
                "etcdRole": {
                    "type": "boolean",
                    "description": "Machine pool etcd role\n"
                },
                "hostnameLengthLimit": {
                    "type": "integer",
                    "description": "maximum length for autogenerated hostname\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the MachineDeployment object\n"
                },
                "machineConfig": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachinePoolMachineConfig:getClusterV2RkeConfigMachinePoolMachineConfig",
                    "description": "Machine config data\n"
                },
                "machineLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the machine pool nodes\n"
                },
                "machineOs": {
                    "type": "string",
                    "description": "OS Type in machine pool\n"
                },
                "maxUnhealthy": {
                    "type": "string",
                    "description": "max unhealthy nodes for automated replacement to be allowed\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster v2 (string)\n"
                },
                "nodeDrainTimeout": {
                    "type": "integer",
                    "description": "seconds to wait for machine pool drain to complete before machine deletion\n"
                },
                "nodeStartupTimeoutSeconds": {
                    "type": "integer",
                    "description": "seconds a new node has to become active before it is replaced\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "Machine pool paused\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "Machine pool quantity\n"
                },
                "rollingUpdate": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachinePoolRollingUpdate:getClusterV2RkeConfigMachinePoolRollingUpdate",
                    "description": "Machine pool rolling update\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachinePoolTaint:getClusterV2RkeConfigMachinePoolTaint"
                    },
                    "description": "Machine pool taints\n"
                },
                "unhealthyNodeTimeoutSeconds": {
                    "type": "integer",
                    "description": "seconds an unhealthy node has to become active before it is replaced\n"
                },
                "unhealthyRange": {
                    "type": "string",
                    "description": "range of unhealthy nodes for automated replacement to be allowed\n"
                },
                "workerRole": {
                    "type": "boolean",
                    "description": "Machine pool worker role\n"
                }
            },
            "type": "object",
            "required": [
                "machineConfig",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigMachinePoolDefault:getClusterV2RkeConfigMachinePoolDefault": {
            "properties": {
                "hostnameLengthLimit": {
                    "type": "integer",
                    "description": "maximum length for autogenerated hostname\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigMachinePoolMachineConfig:getClusterV2RkeConfigMachinePoolMachineConfig": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Machine config API version\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Machine config kind\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster v2 (string)\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigMachinePoolRollingUpdate:getClusterV2RkeConfigMachinePoolRollingUpdate": {
            "properties": {
                "maxSurge": {
                    "type": "string",
                    "description": "Rolling update max surge\n"
                },
                "maxUnavailable": {
                    "type": "string",
                    "description": "Rolling update max unavailable\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigMachinePoolTaint:getClusterV2RkeConfigMachinePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorConfig:getClusterV2RkeConfigMachineSelectorConfig": {
            "properties": {
                "config": {
                    "type": "string",
                    "description": "Machine selector config\n"
                },
                "machineLabelSelector": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorConfigMachineLabelSelector:getClusterV2RkeConfigMachineSelectorConfigMachineLabelSelector",
                    "description": "Machine label selector\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorConfigMachineLabelSelector:getClusterV2RkeConfigMachineSelectorConfigMachineLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpression:getClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpression"
                    },
                    "description": "Label selector match expressions\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Label selector match labels\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpression:getClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Label selector requirement key\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Label selector operator\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Label selector requirement values\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorFile:getClusterV2RkeConfigMachineSelectorFile": {
            "properties": {
                "fileSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSource:getClusterV2RkeConfigMachineSelectorFileFileSource"
                    },
                    "description": "File sources\n"
                },
                "machineLabelSelector": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorFileMachineLabelSelector:getClusterV2RkeConfigMachineSelectorFileMachineLabelSelector",
                    "description": "Machine label selector\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSource:getClusterV2RkeConfigMachineSelectorFileFileSource": {
            "properties": {
                "configmap": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSourceConfigmap:getClusterV2RkeConfigMachineSelectorFileFileSourceConfigmap",
                    "description": "The configmap which is the source of files\n"
                },
                "secret": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSourceSecret:getClusterV2RkeConfigMachineSelectorFileFileSourceSecret",
                    "description": "The secret which is the source of files\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSourceConfigmap:getClusterV2RkeConfigMachineSelectorFileFileSourceConfigmap": {
            "properties": {
                "defaultPermissions": {
                    "type": "string",
                    "description": "The default permissions to be applied when they are not set at the item level\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSourceConfigmapItem:getClusterV2RkeConfigMachineSelectorFileFileSourceConfigmapItem"
                    },
                    "description": "Items(files) to retrieve from the K8s object\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster v2 (string)\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSourceConfigmapItem:getClusterV2RkeConfigMachineSelectorFileFileSourceConfigmapItem": {
            "properties": {
                "dynamic": {
                    "type": "boolean",
                    "description": "If ture, the file is ignored when determining whether the node should be drained before updating the node plan (default: true).\n"
                },
                "hash": {
                    "type": "string",
                    "description": "The base64 encoded value of the SHA256 checksum of the file's content\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the item(file) to retrieve\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to put the file in the target node\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The numeric representation of the file permissions\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSourceSecret:getClusterV2RkeConfigMachineSelectorFileFileSourceSecret": {
            "properties": {
                "defaultPermissions": {
                    "type": "string",
                    "description": "The default permissions to be applied when they are not set at the item level\n"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSourceSecretItem:getClusterV2RkeConfigMachineSelectorFileFileSourceSecretItem"
                    },
                    "description": "Items(files) to retrieve from the K8s object\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster v2 (string)\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorFileFileSourceSecretItem:getClusterV2RkeConfigMachineSelectorFileFileSourceSecretItem": {
            "properties": {
                "dynamic": {
                    "type": "boolean",
                    "description": "If ture, the file is ignored when determining whether the node should be drained before updating the node plan (default: true).\n"
                },
                "hash": {
                    "type": "string",
                    "description": "The base64 encoded value of the SHA256 checksum of the file's content\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the item(file) to retrieve\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to put the file in the target node\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "The numeric representation of the file permissions\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorFileMachineLabelSelector:getClusterV2RkeConfigMachineSelectorFileMachineLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigMachineSelectorFileMachineLabelSelectorMatchExpression:getClusterV2RkeConfigMachineSelectorFileMachineLabelSelectorMatchExpression"
                    },
                    "description": "Label selector match expressions\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Label selector match labels\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigMachineSelectorFileMachineLabelSelectorMatchExpression:getClusterV2RkeConfigMachineSelectorFileMachineLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Label selector requirement key\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Label selector operator\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Label selector requirement values\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigRegistries:getClusterV2RkeConfigRegistries": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigRegistriesConfig:getClusterV2RkeConfigRegistriesConfig"
                    },
                    "description": "Registry config\n"
                },
                "mirrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfigRegistriesMirror:getClusterV2RkeConfigRegistriesMirror"
                    },
                    "description": "Registry mirrors\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigRegistriesConfig:getClusterV2RkeConfigRegistriesConfig": {
            "properties": {
                "authConfigSecretName": {
                    "type": "string",
                    "description": "Registry auth config secret name\n"
                },
                "caBundle": {
                    "type": "string",
                    "description": "Registry CA bundle\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Registry hostname\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Registry insecure connectivity\n"
                },
                "tlsSecretName": {
                    "type": "string",
                    "description": "Registry TLS secret name. TLS is a pair of Cert/Key\n"
                }
            },
            "type": "object",
            "required": [
                "hostname"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigRegistriesMirror:getClusterV2RkeConfigRegistriesMirror": {
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Registry mirror endpoints\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Registry hostname\n"
                },
                "rewrites": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Registry mirror rewrites\n"
                }
            },
            "type": "object",
            "required": [
                "hostname"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigRotateCertificates:getClusterV2RkeConfigRotateCertificates": {
            "properties": {
                "generation": {
                    "type": "integer",
                    "description": "Desired certificate rotation generation.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Service certificates to rotate with this generation.\n"
                }
            },
            "type": "object",
            "required": [
                "generation"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigUpgradeStrategy:getClusterV2RkeConfigUpgradeStrategy": {
            "properties": {
                "controlPlaneConcurrency": {
                    "type": "string",
                    "description": "How many controlplane nodes should be upgrade at time, 0 is infinite. Percentages are also accepted\n"
                },
                "controlPlaneDrainOptions": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptions:getClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptions",
                    "description": "Controlplane nodes drain options\n"
                },
                "workerConcurrency": {
                    "type": "string",
                    "description": "How many worker nodes should be upgrade at time\n"
                },
                "workerDrainOptions": {
                    "$ref": "#/types/rancher2:index/getClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions:getClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions",
                    "description": "Worker nodes drain options\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptions:getClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptions": {
            "properties": {
                "deleteEmptyDirData": {
                    "type": "boolean",
                    "description": "Drain options delete empty dir data\n"
                },
                "disableEviction": {
                    "type": "boolean",
                    "description": "Drain options disable eviction\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Drain options enabled?\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "Drain options force\n"
                },
                "gracePeriod": {
                    "type": "integer",
                    "description": "Drain options grace period\n"
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "description": "Drain options ignore daemon sets\n"
                },
                "ignoreErrors": {
                    "type": "boolean",
                    "description": "Drain options ignore errors\n"
                },
                "skipWaitForDeleteTimeoutSeconds": {
                    "type": "integer",
                    "description": "Drain options skip wait for delete timeout seconds\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Drain options timeout\n"
                }
            },
            "type": "object",
            "required": [
                "gracePeriod",
                "skipWaitForDeleteTimeoutSeconds",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions:getClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions": {
            "properties": {
                "deleteEmptyDirData": {
                    "type": "boolean",
                    "description": "Drain options delete empty dir data\n"
                },
                "disableEviction": {
                    "type": "boolean",
                    "description": "Drain options disable eviction\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Drain options enabled?\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "Drain options force\n"
                },
                "gracePeriod": {
                    "type": "integer",
                    "description": "Drain options grace period\n"
                },
                "ignoreDaemonSets": {
                    "type": "boolean",
                    "description": "Drain options ignore daemon sets\n"
                },
                "ignoreErrors": {
                    "type": "boolean",
                    "description": "Drain options ignore errors\n"
                },
                "skipWaitForDeleteTimeoutSeconds": {
                    "type": "integer",
                    "description": "Drain options skip wait for delete timeout seconds\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Drain options timeout\n"
                }
            },
            "type": "object",
            "required": [
                "gracePeriod",
                "skipWaitForDeleteTimeoutSeconds",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getEtcdBackupBackupConfig:getEtcdBackupBackupConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "intervalHours": {
                    "type": "integer"
                },
                "retention": {
                    "type": "integer"
                },
                "s3BackupConfig": {
                    "$ref": "#/types/rancher2:index/getEtcdBackupBackupConfigS3BackupConfig:getEtcdBackupBackupConfigS3BackupConfig"
                },
                "safeTimestamp": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getEtcdBackupBackupConfigS3BackupConfig:getEtcdBackupBackupConfigS3BackupConfig": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "secret": true
                },
                "bucketName": {
                    "type": "string"
                },
                "customCa": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "endpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getGlobalRoleRule:getGlobalRoleRule": {
            "properties": {
                "apiGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule api groups\n"
                },
                "nonResourceUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule non resource urls\n"
                },
                "resourceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resource names\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resources\n"
                },
                "verbs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule verbs\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getNamespaceContainerResourceLimit:getNamespaceContainerResourceLimit": {
            "properties": {
                "limitsCpu": {
                    "type": "string"
                },
                "limitsMemory": {
                    "type": "string"
                },
                "requestsCpu": {
                    "type": "string"
                },
                "requestsMemory": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rancher2:index/getNamespaceResourceQuota:getNamespaceResourceQuota": {
            "properties": {
                "limit": {
                    "$ref": "#/types/rancher2:index/getNamespaceResourceQuotaLimit:getNamespaceResourceQuotaLimit"
                }
            },
            "type": "object",
            "required": [
                "limit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getNamespaceResourceQuotaLimit:getNamespaceResourceQuotaLimit": {
            "properties": {
                "configMaps": {
                    "type": "string"
                },
                "limitsCpu": {
                    "type": "string"
                },
                "limitsMemory": {
                    "type": "string"
                },
                "persistentVolumeClaims": {
                    "type": "string"
                },
                "pods": {
                    "type": "string"
                },
                "replicationControllers": {
                    "type": "string"
                },
                "requestsCpu": {
                    "type": "string"
                },
                "requestsMemory": {
                    "type": "string"
                },
                "requestsStorage": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "services": {
                    "type": "string"
                },
                "servicesLoadBalancers": {
                    "type": "string"
                },
                "servicesNodePorts": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rancher2:index/getNodePoolNodeTaint:getNodePoolNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "timeAdded": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "timeAdded",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getNodeTemplateNodeTaint:getNodeTemplateNodeTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "timeAdded": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "timeAdded",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getPodSecurityAdmissionConfigurationTemplateDefaults:getPodSecurityAdmissionConfigurationTemplateDefaults": {
            "properties": {
                "audit": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration audit. This audits a pod in violation of privileged, baseline, or restricted policy (default: privileged)\n"
                },
                "auditVersion": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration audit version (default: latest)\n"
                },
                "enforce": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration enforce. This rejects a pod in violation of privileged, baseline, or restricted policy (default: privileged)\n"
                },
                "enforceVersion": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration enforce version (default: latest)\n"
                },
                "warn": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration warn. This warns the user about a pod in violation of privileged, baseline, or restricted policy (default: privileged)\n"
                },
                "warnVersion": {
                    "type": "string",
                    "description": "Pod Security Admission Configuration warn version (default: latest)\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getPodSecurityAdmissionConfigurationTemplateExemptions:getPodSecurityAdmissionConfigurationTemplateExemptions": {
            "properties": {
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod Security Admission Configuration namespace exemptions\n"
                },
                "runtimeClasses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod Security Admission Configuration runtime class exemptions\n"
                },
                "usernames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pod Security Admission Configuration username exemptions\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getProjectContainerResourceLimit:getProjectContainerResourceLimit": {
            "properties": {
                "limitsCpu": {
                    "type": "string"
                },
                "limitsMemory": {
                    "type": "string"
                },
                "requestsCpu": {
                    "type": "string"
                },
                "requestsMemory": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rancher2:index/getProjectResourceQuota:getProjectResourceQuota": {
            "properties": {
                "namespaceDefaultLimit": {
                    "$ref": "#/types/rancher2:index/getProjectResourceQuotaNamespaceDefaultLimit:getProjectResourceQuotaNamespaceDefaultLimit"
                },
                "projectLimit": {
                    "$ref": "#/types/rancher2:index/getProjectResourceQuotaProjectLimit:getProjectResourceQuotaProjectLimit"
                }
            },
            "type": "object",
            "required": [
                "namespaceDefaultLimit",
                "projectLimit"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getProjectResourceQuotaNamespaceDefaultLimit:getProjectResourceQuotaNamespaceDefaultLimit": {
            "properties": {
                "configMaps": {
                    "type": "string"
                },
                "limitsCpu": {
                    "type": "string"
                },
                "limitsMemory": {
                    "type": "string"
                },
                "persistentVolumeClaims": {
                    "type": "string"
                },
                "pods": {
                    "type": "string"
                },
                "replicationControllers": {
                    "type": "string"
                },
                "requestsCpu": {
                    "type": "string"
                },
                "requestsMemory": {
                    "type": "string"
                },
                "requestsStorage": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "services": {
                    "type": "string"
                },
                "servicesLoadBalancers": {
                    "type": "string"
                },
                "servicesNodePorts": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rancher2:index/getProjectResourceQuotaProjectLimit:getProjectResourceQuotaProjectLimit": {
            "properties": {
                "configMaps": {
                    "type": "string"
                },
                "limitsCpu": {
                    "type": "string"
                },
                "limitsMemory": {
                    "type": "string"
                },
                "persistentVolumeClaims": {
                    "type": "string"
                },
                "pods": {
                    "type": "string"
                },
                "replicationControllers": {
                    "type": "string"
                },
                "requestsCpu": {
                    "type": "string"
                },
                "requestsMemory": {
                    "type": "string"
                },
                "requestsStorage": {
                    "type": "string"
                },
                "secrets": {
                    "type": "string"
                },
                "services": {
                    "type": "string"
                },
                "servicesLoadBalancers": {
                    "type": "string"
                },
                "servicesNodePorts": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rancher2:index/getRegistryRegistry:getRegistryRegistry": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rancher2:index/getRoleTemplateExternalRule:getRoleTemplateExternalRule": {
            "properties": {
                "apiGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule api groups\n"
                },
                "nonResourceUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule non resource urls\n"
                },
                "resourceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resource names\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resources\n"
                },
                "verbs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule verbs\n"
                }
            },
            "type": "object"
        },
        "rancher2:index/getRoleTemplateRule:getRoleTemplateRule": {
            "properties": {
                "apiGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule api groups\n"
                },
                "nonResourceUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule non resource urls\n"
                },
                "resourceNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resource names\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule resources\n"
                },
                "verbs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy rule verbs\n"
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the rancher2 package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessKey": {
                "type": "string",
                "description": "API Key used to authenticate with the rancher server",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "description": "The URL to the rancher API"
            },
            "bootstrap": {
                "type": "boolean",
                "description": "Bootstrap rancher server"
            },
            "caCerts": {
                "type": "string",
                "description": "CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false"
            },
            "insecure": {
                "type": "boolean",
                "description": "Allow insecure connections to Rancher. Mandatory if self signed tls and not\u003cspan pulumi-lang-nodejs=\" caCerts \" pulumi-lang-dotnet=\" CaCerts \" pulumi-lang-go=\" caCerts \" pulumi-lang-python=\" ca_certs \" pulumi-lang-yaml=\" caCerts \" pulumi-lang-java=\" caCerts \"\u003e ca_certs \u003c/span\u003eprovided"
            },
            "retries": {
                "type": "integer",
                "description": "Rancher connection retries",
                "deprecationMessage": "Use timeout instead"
            },
            "secretKey": {
                "type": "string",
                "description": "API secret used to authenticate with the rancher server",
                "secret": true
            },
            "timeout": {
                "type": "string",
                "description": "Rancher connection timeout (retry every 5s). Golang duration format, ex: \"60s\""
            },
            "tokenKey": {
                "type": "string",
                "description": "API token used to authenticate with the rancher server",
                "secret": true
            }
        },
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "API Key used to authenticate with the rancher server",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "description": "The URL to the rancher API"
            },
            "bootstrap": {
                "type": "boolean",
                "description": "Bootstrap rancher server",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RANCHER_BOOTSTRAP"
                    ]
                }
            },
            "caCerts": {
                "type": "string",
                "description": "CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false"
            },
            "insecure": {
                "type": "boolean",
                "description": "Allow insecure connections to Rancher. Mandatory if self signed tls and not\u003cspan pulumi-lang-nodejs=\" caCerts \" pulumi-lang-dotnet=\" CaCerts \" pulumi-lang-go=\" caCerts \" pulumi-lang-python=\" ca_certs \" pulumi-lang-yaml=\" caCerts \" pulumi-lang-java=\" caCerts \"\u003e ca_certs \u003c/span\u003eprovided",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "RANCHER_INSECURE"
                    ]
                }
            },
            "retries": {
                "type": "integer",
                "description": "Rancher connection retries",
                "deprecationMessage": "Use timeout instead"
            },
            "secretKey": {
                "type": "string",
                "description": "API secret used to authenticate with the rancher server",
                "secret": true
            },
            "timeout": {
                "type": "string",
                "description": "Rancher connection timeout (retry every 5s). Golang duration format, ex: \"60s\""
            },
            "tokenKey": {
                "type": "string",
                "description": "API token used to authenticate with the rancher server",
                "secret": true
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:rancher2/terraformConfig"
        }
    },
    "resources": {
        "rancher2:index/appV2:AppV2": {
            "description": "Provides a Rancher App v2 resource. This can be used to manage helm charts for Rancher v2 environments and retrieve their information. App v2 resource is available at Rancher v2.5.x and above.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\nimport * as std from \"@pulumi/std\";\n\n// Create a new Rancher2 App V2 using\nconst foo = new rancher2.AppV2(\"foo\", {\n    clusterId: \"\u003cCLUSTER_ID\u003e\",\n    name: \"rancher-monitoring\",\n    namespace: \"cattle-monitoring-system\",\n    repoName: \"rancher-charts\",\n    chartName: \"rancher-monitoring\",\n    chartVersion: \"9.4.200\",\n    values: std.file({\n        input: \"values.yaml\",\n    }).then(invoke =\u003e invoke.result),\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\nimport pulumi_std as std\n\n# Create a new Rancher2 App V2 using\nfoo = rancher2.AppV2(\"foo\",\n    cluster_id=\"\u003cCLUSTER_ID\u003e\",\n    name=\"rancher-monitoring\",\n    namespace=\"cattle-monitoring-system\",\n    repo_name=\"rancher-charts\",\n    chart_name=\"rancher-monitoring\",\n    chart_version=\"9.4.200\",\n    values=std.file(input=\"values.yaml\").result)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\nusing Std = Pulumi.Std;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new Rancher2 App V2 using\n    var foo = new Rancher2.AppV2(\"foo\", new()\n    {\n        ClusterId = \"\u003cCLUSTER_ID\u003e\",\n        Name = \"rancher-monitoring\",\n        Namespace = \"cattle-monitoring-system\",\n        RepoName = \"rancher-charts\",\n        ChartName = \"rancher-monitoring\",\n        ChartVersion = \"9.4.200\",\n        Values = Std.File.Invoke(new()\n        {\n            Input = \"values.yaml\",\n        }).Apply(invoke =\u003e invoke.Result),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi-std/sdk/go/std\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinvokeFile, err := std.File(ctx, \u0026std.FileArgs{\n\t\t\tInput: \"values.yaml\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new Rancher2 App V2 using\n\t\t_, err = rancher2.NewAppV2(ctx, \"foo\", \u0026rancher2.AppV2Args{\n\t\t\tClusterId:    pulumi.String(\"\u003cCLUSTER_ID\u003e\"),\n\t\t\tName:         pulumi.String(\"rancher-monitoring\"),\n\t\t\tNamespace:    pulumi.String(\"cattle-monitoring-system\"),\n\t\t\tRepoName:     pulumi.String(\"rancher-charts\"),\n\t\t\tChartName:    pulumi.String(\"rancher-monitoring\"),\n\t\t\tChartVersion: pulumi.String(\"9.4.200\"),\n\t\t\tValues:       pulumi.String(invokeFile.Result),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.AppV2;\nimport com.pulumi.rancher2.AppV2Args;\nimport com.pulumi.std.StdFunctions;\nimport com.pulumi.std.inputs.FileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new Rancher2 App V2 using\n        var foo = new AppV2(\"foo\", AppV2Args.builder()\n            .clusterId(\"\u003cCLUSTER_ID\u003e\")\n            .name(\"rancher-monitoring\")\n            .namespace(\"cattle-monitoring-system\")\n            .repoName(\"rancher-charts\")\n            .chartName(\"rancher-monitoring\")\n            .chartVersion(\"9.4.200\")\n            .values(StdFunctions.file(FileArgs.builder()\n                .input(\"values.yaml\")\n                .build()).result())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Rancher2 App V2 using\n  foo:\n    type: rancher2:AppV2\n    properties:\n      clusterId: \u003cCLUSTER_ID\u003e\n      name: rancher-monitoring\n      namespace: cattle-monitoring-system\n      repoName: rancher-charts\n      chartName: rancher-monitoring\n      chartVersion: 9.4.200\n      values:\n        fn::invoke:\n          function: std:file\n          arguments:\n            input: values.yaml\n          return: result\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Create an App from a Helm Chart using a different registry\n\nThe \u003cspan pulumi-lang-nodejs=\"`systemDefaultRegistry`\" pulumi-lang-dotnet=\"`SystemDefaultRegistry`\" pulumi-lang-go=\"`systemDefaultRegistry`\" pulumi-lang-python=\"`system_default_registry`\" pulumi-lang-yaml=\"`systemDefaultRegistry`\" pulumi-lang-java=\"`systemDefaultRegistry`\"\u003e`system_default_registry`\u003c/span\u003e argument can override the global value at App installation. If argument is not provided, the global value for System Default Registry will be used instead.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst cisBenchmark = new rancher2.AppV2(\"cis_benchmark\", {\n    clusterId: \"\u003cCLUSTER_ID\u003e\",\n    name: \"rancher-cis-benchmark\",\n    namespace: \"cis-operator-system\",\n    repoName: \"rancher-charts\",\n    chartName: \"rancher-cis-benchmark\",\n    systemDefaultRegistry: \"\u003csome.dns.here\u003e:\u003cPORT\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\ncis_benchmark = rancher2.AppV2(\"cis_benchmark\",\n    cluster_id=\"\u003cCLUSTER_ID\u003e\",\n    name=\"rancher-cis-benchmark\",\n    namespace=\"cis-operator-system\",\n    repo_name=\"rancher-charts\",\n    chart_name=\"rancher-cis-benchmark\",\n    system_default_registry=\"\u003csome.dns.here\u003e:\u003cPORT\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cisBenchmark = new Rancher2.AppV2(\"cis_benchmark\", new()\n    {\n        ClusterId = \"\u003cCLUSTER_ID\u003e\",\n        Name = \"rancher-cis-benchmark\",\n        Namespace = \"cis-operator-system\",\n        RepoName = \"rancher-charts\",\n        ChartName = \"rancher-cis-benchmark\",\n        SystemDefaultRegistry = \"\u003csome.dns.here\u003e:\u003cPORT\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewAppV2(ctx, \"cis_benchmark\", \u0026rancher2.AppV2Args{\n\t\t\tClusterId:             pulumi.String(\"\u003cCLUSTER_ID\u003e\"),\n\t\t\tName:                  pulumi.String(\"rancher-cis-benchmark\"),\n\t\t\tNamespace:             pulumi.String(\"cis-operator-system\"),\n\t\t\tRepoName:              pulumi.String(\"rancher-charts\"),\n\t\t\tChartName:             pulumi.String(\"rancher-cis-benchmark\"),\n\t\t\tSystemDefaultRegistry: pulumi.String(\"\u003csome.dns.here\u003e:\u003cPORT\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.AppV2;\nimport com.pulumi.rancher2.AppV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cisBenchmark = new AppV2(\"cisBenchmark\", AppV2Args.builder()\n            .clusterId(\"\u003cCLUSTER_ID\u003e\")\n            .name(\"rancher-cis-benchmark\")\n            .namespace(\"cis-operator-system\")\n            .repoName(\"rancher-charts\")\n            .chartName(\"rancher-cis-benchmark\")\n            .systemDefaultRegistry(\"\u003csome.dns.here\u003e:\u003cPORT\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cisBenchmark:\n    type: rancher2:AppV2\n    name: cis_benchmark\n    properties:\n      clusterId: \u003cCLUSTER_ID\u003e\n      name: rancher-cis-benchmark\n      namespace: cis-operator-system\n      repoName: rancher-charts\n      chartName: rancher-cis-benchmark\n      systemDefaultRegistry: \u003csome.dns.here\u003e:\u003cPORT\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nV2 apps can be imported using the Rancher cluster ID and App V2 name, which is composed of `\u003cnamespace\u003e/\u003capplication_name\u003e`.\n\n```sh\n$ pulumi import rancher2:index/appV2:AppV2 foo \u0026lt;CLUSTER_ID\u0026gt;.\u0026lt;APP_V2_NAME\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the app v2 (map)\n"
                },
                "chartName": {
                    "type": "string",
                    "description": "The app v2 chart name (string)\n"
                },
                "chartVersion": {
                    "type": "string",
                    "description": "The app v2 chart version (string)\n"
                },
                "cleanupOnFail": {
                    "type": "boolean",
                    "description": "Cleanup app v2 on failed chart upgrade. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the app (string)\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "(Computed) The cluster name of the app (string)\n"
                },
                "deploymentValues": {
                    "type": "string"
                },
                "disableHooks": {
                    "type": "boolean",
                    "description": "Disable app v2 chart hooks. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "disableOpenApiValidation": {
                    "type": "boolean",
                    "description": "Disable app V2 Open API Validation. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "forceUpgrade": {
                    "type": "boolean",
                    "description": "Force app V2 chart upgrade. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the app v2 (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the app v2 (string)\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace of the app v2 (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Deploy the app v2 within project ID (string)\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Repo name (string)\n"
                },
                "systemDefaultRegistry": {
                    "type": "string",
                    "description": "System default registry providing images for app deployment (string)\n"
                },
                "values": {
                    "type": "string",
                    "description": "The app v2 values yaml. Yaml format is required (string)\n"
                },
                "wait": {
                    "type": "boolean",
                    "description": "Wait until app is deployed. Default: \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                }
            },
            "required": [
                "annotations",
                "chartName",
                "chartVersion",
                "clusterId",
                "clusterName",
                "deploymentValues",
                "labels",
                "name",
                "namespace",
                "repoName",
                "systemDefaultRegistry"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the app v2 (map)\n"
                },
                "chartName": {
                    "type": "string",
                    "description": "The app v2 chart name (string)\n"
                },
                "chartVersion": {
                    "type": "string",
                    "description": "The app v2 chart version (string)\n"
                },
                "cleanupOnFail": {
                    "type": "boolean",
                    "description": "Cleanup app v2 on failed chart upgrade. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the app (string)\n",
                    "willReplaceOnChanges": true
                },
                "disableHooks": {
                    "type": "boolean",
                    "description": "Disable app v2 chart hooks. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "disableOpenApiValidation": {
                    "type": "boolean",
                    "description": "Disable app V2 Open API Validation. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "forceUpgrade": {
                    "type": "boolean",
                    "description": "Force app V2 chart upgrade. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the app v2 (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the app v2 (string)\n",
                    "willReplaceOnChanges": true
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace of the app v2 (string)\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "Deploy the app v2 within project ID (string)\n"
                },
                "repoName": {
                    "type": "string",
                    "description": "Repo name (string)\n"
                },
                "systemDefaultRegistry": {
                    "type": "string",
                    "description": "System default registry providing images for app deployment (string)\n"
                },
                "values": {
                    "type": "string",
                    "description": "The app v2 values yaml. Yaml format is required (string)\n"
                },
                "wait": {
                    "type": "boolean",
                    "description": "Wait until app is deployed. Default: \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                }
            },
            "requiredInputs": [
                "chartName",
                "clusterId",
                "namespace",
                "repoName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppV2 resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the app v2 (map)\n"
                    },
                    "chartName": {
                        "type": "string",
                        "description": "The app v2 chart name (string)\n"
                    },
                    "chartVersion": {
                        "type": "string",
                        "description": "The app v2 chart version (string)\n"
                    },
                    "cleanupOnFail": {
                        "type": "boolean",
                        "description": "Cleanup app v2 on failed chart upgrade. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the app (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "(Computed) The cluster name of the app (string)\n"
                    },
                    "deploymentValues": {
                        "type": "string"
                    },
                    "disableHooks": {
                        "type": "boolean",
                        "description": "Disable app v2 chart hooks. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "disableOpenApiValidation": {
                        "type": "boolean",
                        "description": "Disable app V2 Open API Validation. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "forceUpgrade": {
                        "type": "boolean",
                        "description": "Force app V2 chart upgrade. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the app v2 (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the app v2 (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespace of the app v2 (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Deploy the app v2 within project ID (string)\n"
                    },
                    "repoName": {
                        "type": "string",
                        "description": "Repo name (string)\n"
                    },
                    "systemDefaultRegistry": {
                        "type": "string",
                        "description": "System default registry providing images for app deployment (string)\n"
                    },
                    "values": {
                        "type": "string",
                        "description": "The app v2 values yaml. Yaml format is required (string)\n"
                    },
                    "wait": {
                        "type": "boolean",
                        "description": "Wait until app is deployed. Default: \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigActiveDirectory:AuthConfigActiveDirectory": {
            "description": "Provides a Rancher v2 Auth Config ActiveDirectory resource. This can be used to configure and enable Auth Config ActiveDirectory for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `activedirectory_user://\u003cDN\u003e`  `activedirectory_group://\u003cDN\u003e`. The local admin (`local://\u003cadmin id\u003e`) and the \u003cspan pulumi-lang-nodejs=\"`testUsername`\" pulumi-lang-dotnet=\"`TestUsername`\" pulumi-lang-go=\"`testUsername`\" pulumi-lang-python=\"`test_username`\" pulumi-lang-yaml=\"`testUsername`\" pulumi-lang-java=\"`testUsername`\"\u003e`test_username`\u003c/span\u003e must be added too. (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "CA certificate for TLS if selfsigned (string)\n",
                    "secret": true
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "ActiveDirectory connection timeout. Default \u003cspan pulumi-lang-nodejs=\"`5000`\" pulumi-lang-dotnet=\"`5000`\" pulumi-lang-go=\"`5000`\" pulumi-lang-python=\"`5000`\" pulumi-lang-yaml=\"`5000`\" pulumi-lang-java=\"`5000`\"\u003e`5000`\u003c/span\u003e (int)\n"
                },
                "defaultLoginDomain": {
                    "type": "string",
                    "description": "ActiveDirectory defult login domain (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `distinguishedName` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default \u003cspan pulumi-lang-nodejs=\"`member`\" pulumi-lang-dotnet=\"`Member`\" pulumi-lang-go=\"`member`\" pulumi-lang-python=\"`member`\" pulumi-lang-yaml=\"`member`\" pulumi-lang-java=\"`member`\"\u003e`member`\u003c/span\u003e (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `distinguishedName` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default \u003cspan pulumi-lang-nodejs=\"`group`\" pulumi-lang-dotnet=\"`Group`\" pulumi-lang-go=\"`group`\" pulumi-lang-python=\"`group`\" pulumi-lang-yaml=\"`group`\" pulumi-lang-java=\"`group`\"\u003e`group`\u003c/span\u003e (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default `sAMAccountName` (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "groupSearchFilter": {
                    "type": "string",
                    "description": "Group search filter (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "ActiveDirectory port. Default \u003cspan pulumi-lang-nodejs=\"`389`\" pulumi-lang-dotnet=\"`389`\" pulumi-lang-go=\"`389`\" pulumi-lang-python=\"`389`\" pulumi-lang-yaml=\"`389`\" pulumi-lang-java=\"`389`\"\u003e`389`\u003c/span\u003e (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ActiveDirectory servers list (list)\n"
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access ActiveDirectory service (string)\n",
                    "secret": true
                },
                "serviceAccountUsername": {
                    "type": "string",
                    "description": "Service account DN for access ActiveDirectory service (string)\n",
                    "secret": true
                },
                "startTls": {
                    "type": "boolean",
                    "description": "Enable start TLS connection (bool)\n"
                },
                "testPassword": {
                    "type": "string",
                    "description": "Password for test access to ActiveDirectory service (string)\n",
                    "secret": true
                },
                "testUsername": {
                    "type": "string",
                    "description": "Username for test access to ActiveDirectory service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask. Default \u003cspan pulumi-lang-nodejs=\"`2`\" pulumi-lang-dotnet=\"`2`\" pulumi-lang-go=\"`2`\" pulumi-lang-python=\"`2`\" pulumi-lang-yaml=\"`2`\" pulumi-lang-java=\"`2`\"\u003e`2`\u003c/span\u003e (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default `sAMAccountName` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default \u003cspan pulumi-lang-nodejs=\"`person`\" pulumi-lang-dotnet=\"`Person`\" pulumi-lang-go=\"`person`\" pulumi-lang-python=\"`person`\" pulumi-lang-yaml=\"`person`\" pulumi-lang-java=\"`person`\"\u003e`person`\u003c/span\u003e (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `sAMAccountName|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                },
                "userSearchFilter": {
                    "type": "string",
                    "description": "User search filter (string)\n"
                }
            },
            "required": [
                "annotations",
                "groupDnAttribute",
                "groupMemberMappingAttribute",
                "groupMemberUserAttribute",
                "groupNameAttribute",
                "groupObjectClass",
                "groupSearchAttribute",
                "groupSearchBase",
                "groupSearchFilter",
                "labels",
                "name",
                "nestedGroupMembershipEnabled",
                "servers",
                "serviceAccountPassword",
                "serviceAccountUsername",
                "startTls",
                "testPassword",
                "testUsername",
                "tls",
                "type",
                "userEnabledAttribute",
                "userLoginAttribute",
                "userNameAttribute",
                "userObjectClass",
                "userSearchAttribute",
                "userSearchBase",
                "userSearchFilter"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `activedirectory_user://\u003cDN\u003e`  `activedirectory_group://\u003cDN\u003e`. The local admin (`local://\u003cadmin id\u003e`) and the \u003cspan pulumi-lang-nodejs=\"`testUsername`\" pulumi-lang-dotnet=\"`TestUsername`\" pulumi-lang-go=\"`testUsername`\" pulumi-lang-python=\"`test_username`\" pulumi-lang-yaml=\"`testUsername`\" pulumi-lang-java=\"`testUsername`\"\u003e`test_username`\u003c/span\u003e must be added too. (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "CA certificate for TLS if selfsigned (string)\n",
                    "secret": true
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "ActiveDirectory connection timeout. Default \u003cspan pulumi-lang-nodejs=\"`5000`\" pulumi-lang-dotnet=\"`5000`\" pulumi-lang-go=\"`5000`\" pulumi-lang-python=\"`5000`\" pulumi-lang-yaml=\"`5000`\" pulumi-lang-java=\"`5000`\"\u003e`5000`\u003c/span\u003e (int)\n"
                },
                "defaultLoginDomain": {
                    "type": "string",
                    "description": "ActiveDirectory defult login domain (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `distinguishedName` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default \u003cspan pulumi-lang-nodejs=\"`member`\" pulumi-lang-dotnet=\"`Member`\" pulumi-lang-go=\"`member`\" pulumi-lang-python=\"`member`\" pulumi-lang-yaml=\"`member`\" pulumi-lang-java=\"`member`\"\u003e`member`\u003c/span\u003e (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `distinguishedName` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default \u003cspan pulumi-lang-nodejs=\"`group`\" pulumi-lang-dotnet=\"`Group`\" pulumi-lang-go=\"`group`\" pulumi-lang-python=\"`group`\" pulumi-lang-yaml=\"`group`\" pulumi-lang-java=\"`group`\"\u003e`group`\u003c/span\u003e (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default `sAMAccountName` (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "groupSearchFilter": {
                    "type": "string",
                    "description": "Group search filter (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "ActiveDirectory port. Default \u003cspan pulumi-lang-nodejs=\"`389`\" pulumi-lang-dotnet=\"`389`\" pulumi-lang-go=\"`389`\" pulumi-lang-python=\"`389`\" pulumi-lang-yaml=\"`389`\" pulumi-lang-java=\"`389`\"\u003e`389`\u003c/span\u003e (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ActiveDirectory servers list (list)\n"
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access ActiveDirectory service (string)\n",
                    "secret": true
                },
                "serviceAccountUsername": {
                    "type": "string",
                    "description": "Service account DN for access ActiveDirectory service (string)\n",
                    "secret": true
                },
                "startTls": {
                    "type": "boolean",
                    "description": "Enable start TLS connection (bool)\n"
                },
                "testPassword": {
                    "type": "string",
                    "description": "Password for test access to ActiveDirectory service (string)\n",
                    "secret": true
                },
                "testUsername": {
                    "type": "string",
                    "description": "Username for test access to ActiveDirectory service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask. Default \u003cspan pulumi-lang-nodejs=\"`2`\" pulumi-lang-dotnet=\"`2`\" pulumi-lang-go=\"`2`\" pulumi-lang-python=\"`2`\" pulumi-lang-yaml=\"`2`\" pulumi-lang-java=\"`2`\"\u003e`2`\u003c/span\u003e (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default `sAMAccountName` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default \u003cspan pulumi-lang-nodejs=\"`person`\" pulumi-lang-dotnet=\"`Person`\" pulumi-lang-go=\"`person`\" pulumi-lang-python=\"`person`\" pulumi-lang-yaml=\"`person`\" pulumi-lang-java=\"`person`\"\u003e`person`\u003c/span\u003e (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `sAMAccountName|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                },
                "userSearchFilter": {
                    "type": "string",
                    "description": "User search filter (string)\n"
                }
            },
            "requiredInputs": [
                "servers",
                "serviceAccountPassword",
                "serviceAccountUsername",
                "testPassword",
                "testUsername",
                "userSearchBase"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigActiveDirectory resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `activedirectory_user://\u003cDN\u003e`  `activedirectory_group://\u003cDN\u003e`. The local admin (`local://\u003cadmin id\u003e`) and the \u003cspan pulumi-lang-nodejs=\"`testUsername`\" pulumi-lang-dotnet=\"`TestUsername`\" pulumi-lang-go=\"`testUsername`\" pulumi-lang-python=\"`test_username`\" pulumi-lang-yaml=\"`testUsername`\" pulumi-lang-java=\"`testUsername`\"\u003e`test_username`\u003c/span\u003e must be added too. (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "CA certificate for TLS if selfsigned (string)\n",
                        "secret": true
                    },
                    "connectionTimeout": {
                        "type": "integer",
                        "description": "ActiveDirectory connection timeout. Default \u003cspan pulumi-lang-nodejs=\"`5000`\" pulumi-lang-dotnet=\"`5000`\" pulumi-lang-go=\"`5000`\" pulumi-lang-python=\"`5000`\" pulumi-lang-yaml=\"`5000`\" pulumi-lang-java=\"`5000`\"\u003e`5000`\u003c/span\u003e (int)\n"
                    },
                    "defaultLoginDomain": {
                        "type": "string",
                        "description": "ActiveDirectory defult login domain (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "groupDnAttribute": {
                        "type": "string",
                        "description": "Group DN attribute. Default `distinguishedName` (string)\n"
                    },
                    "groupMemberMappingAttribute": {
                        "type": "string",
                        "description": "Group member mapping attribute. Default \u003cspan pulumi-lang-nodejs=\"`member`\" pulumi-lang-dotnet=\"`Member`\" pulumi-lang-go=\"`member`\" pulumi-lang-python=\"`member`\" pulumi-lang-yaml=\"`member`\" pulumi-lang-java=\"`member`\"\u003e`member`\u003c/span\u003e (string)\n"
                    },
                    "groupMemberUserAttribute": {
                        "type": "string",
                        "description": "Group member user attribute. Default `distinguishedName` (string)\n"
                    },
                    "groupNameAttribute": {
                        "type": "string",
                        "description": "Group name attribute. Default \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e (string)\n"
                    },
                    "groupObjectClass": {
                        "type": "string",
                        "description": "Group object class. Default \u003cspan pulumi-lang-nodejs=\"`group`\" pulumi-lang-dotnet=\"`Group`\" pulumi-lang-go=\"`group`\" pulumi-lang-python=\"`group`\" pulumi-lang-yaml=\"`group`\" pulumi-lang-java=\"`group`\"\u003e`group`\u003c/span\u003e (string)\n"
                    },
                    "groupSearchAttribute": {
                        "type": "string",
                        "description": "Group search attribute. Default `sAMAccountName` (string)\n"
                    },
                    "groupSearchBase": {
                        "type": "string",
                        "description": "Group search base (string)\n"
                    },
                    "groupSearchFilter": {
                        "type": "string",
                        "description": "Group search filter (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "nestedGroupMembershipEnabled": {
                        "type": "boolean",
                        "description": "Nested group membership enable. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "ActiveDirectory port. Default \u003cspan pulumi-lang-nodejs=\"`389`\" pulumi-lang-dotnet=\"`389`\" pulumi-lang-go=\"`389`\" pulumi-lang-python=\"`389`\" pulumi-lang-yaml=\"`389`\" pulumi-lang-java=\"`389`\"\u003e`389`\u003c/span\u003e (int)\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "ActiveDirectory servers list (list)\n"
                    },
                    "serviceAccountPassword": {
                        "type": "string",
                        "description": "Service account password for access ActiveDirectory service (string)\n",
                        "secret": true
                    },
                    "serviceAccountUsername": {
                        "type": "string",
                        "description": "Service account DN for access ActiveDirectory service (string)\n",
                        "secret": true
                    },
                    "startTls": {
                        "type": "boolean",
                        "description": "Enable start TLS connection (bool)\n"
                    },
                    "testPassword": {
                        "type": "string",
                        "description": "Password for test access to ActiveDirectory service (string)\n",
                        "secret": true
                    },
                    "testUsername": {
                        "type": "string",
                        "description": "Username for test access to ActiveDirectory service (string)\n"
                    },
                    "tls": {
                        "type": "boolean",
                        "description": "Enable TLS connection (bool)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "userDisabledBitMask": {
                        "type": "integer",
                        "description": "User disabled bit mask. Default \u003cspan pulumi-lang-nodejs=\"`2`\" pulumi-lang-dotnet=\"`2`\" pulumi-lang-go=\"`2`\" pulumi-lang-python=\"`2`\" pulumi-lang-yaml=\"`2`\" pulumi-lang-java=\"`2`\"\u003e`2`\u003c/span\u003e (int)\n"
                    },
                    "userEnabledAttribute": {
                        "type": "string",
                        "description": "User enable attribute (string)\n"
                    },
                    "userLoginAttribute": {
                        "type": "string",
                        "description": "User login attribute. Default `sAMAccountName` (string)\n"
                    },
                    "userNameAttribute": {
                        "type": "string",
                        "description": "User name attribute. Default \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e (string)\n"
                    },
                    "userObjectClass": {
                        "type": "string",
                        "description": "User object class. Default \u003cspan pulumi-lang-nodejs=\"`person`\" pulumi-lang-dotnet=\"`Person`\" pulumi-lang-go=\"`person`\" pulumi-lang-python=\"`person`\" pulumi-lang-yaml=\"`person`\" pulumi-lang-java=\"`person`\"\u003e`person`\u003c/span\u003e (string)\n"
                    },
                    "userSearchAttribute": {
                        "type": "string",
                        "description": "User search attribute. Default `sAMAccountName|sn|givenName` (string)\n"
                    },
                    "userSearchBase": {
                        "type": "string",
                        "description": "User search base DN (string)\n"
                    },
                    "userSearchFilter": {
                        "type": "string",
                        "description": "User search filter (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigAdfs:AuthConfigAdfs": {
            "description": "Provides a Rancher v2 Auth Config ADFS resource. This can be used to configure and enable Auth Config ADFS for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config ADFS\nconst adfs = new rancher2.AuthConfigAdfs(\"adfs\", {\n    displayNameField: \"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groupsField: \"\u003cGROUPS_FIELD\u003e\",\n    idpMetadataContent: \"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancherApiHost: \"https://\u003cRANCHER_API_HOST\u003e\",\n    spCert: \"\u003cSP_CERT\u003e\",\n    spKey: \"\u003cSP_KEY\u003e\",\n    uidField: \"\u003cUID_FIELD\u003e\",\n    userNameField: \"\u003cUSER_NAME_FIELD\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config ADFS\nadfs = rancher2.AuthConfigAdfs(\"adfs\",\n    display_name_field=\"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groups_field=\"\u003cGROUPS_FIELD\u003e\",\n    idp_metadata_content=\"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancher_api_host=\"https://\u003cRANCHER_API_HOST\u003e\",\n    sp_cert=\"\u003cSP_CERT\u003e\",\n    sp_key=\"\u003cSP_KEY\u003e\",\n    uid_field=\"\u003cUID_FIELD\u003e\",\n    user_name_field=\"\u003cUSER_NAME_FIELD\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Auth Config ADFS\n    var adfs = new Rancher2.AuthConfigAdfs(\"adfs\", new()\n    {\n        DisplayNameField = \"\u003cDISPLAY_NAME_FIELD\u003e\",\n        GroupsField = \"\u003cGROUPS_FIELD\u003e\",\n        IdpMetadataContent = \"\u003cIDP_METADATA_CONTENT\u003e\",\n        RancherApiHost = \"https://\u003cRANCHER_API_HOST\u003e\",\n        SpCert = \"\u003cSP_CERT\u003e\",\n        SpKey = \"\u003cSP_KEY\u003e\",\n        UidField = \"\u003cUID_FIELD\u003e\",\n        UserNameField = \"\u003cUSER_NAME_FIELD\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Auth Config ADFS\n\t\t_, err := rancher2.NewAuthConfigAdfs(ctx, \"adfs\", \u0026rancher2.AuthConfigAdfsArgs{\n\t\t\tDisplayNameField:   pulumi.String(\"\u003cDISPLAY_NAME_FIELD\u003e\"),\n\t\t\tGroupsField:        pulumi.String(\"\u003cGROUPS_FIELD\u003e\"),\n\t\t\tIdpMetadataContent: pulumi.String(\"\u003cIDP_METADATA_CONTENT\u003e\"),\n\t\t\tRancherApiHost:     pulumi.String(\"https://\u003cRANCHER_API_HOST\u003e\"),\n\t\t\tSpCert:             pulumi.String(\"\u003cSP_CERT\u003e\"),\n\t\t\tSpKey:              pulumi.String(\"\u003cSP_KEY\u003e\"),\n\t\t\tUidField:           pulumi.String(\"\u003cUID_FIELD\u003e\"),\n\t\t\tUserNameField:      pulumi.String(\"\u003cUSER_NAME_FIELD\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.AuthConfigAdfs;\nimport com.pulumi.rancher2.AuthConfigAdfsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Auth Config ADFS\n        var adfs = new AuthConfigAdfs(\"adfs\", AuthConfigAdfsArgs.builder()\n            .displayNameField(\"\u003cDISPLAY_NAME_FIELD\u003e\")\n            .groupsField(\"\u003cGROUPS_FIELD\u003e\")\n            .idpMetadataContent(\"\u003cIDP_METADATA_CONTENT\u003e\")\n            .rancherApiHost(\"https://\u003cRANCHER_API_HOST\u003e\")\n            .spCert(\"\u003cSP_CERT\u003e\")\n            .spKey(\"\u003cSP_KEY\u003e\")\n            .uidField(\"\u003cUID_FIELD\u003e\")\n            .userNameField(\"\u003cUSER_NAME_FIELD\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Auth Config ADFS\n  adfs:\n    type: rancher2:AuthConfigAdfs\n    properties:\n      displayNameField: \u003cDISPLAY_NAME_FIELD\u003e\n      groupsField: \u003cGROUPS_FIELD\u003e\n      idpMetadataContent: \u003cIDP_METADATA_CONTENT\u003e\n      rancherApiHost: https://\u003cRANCHER_API_HOST\u003e\n      spCert: \u003cSP_CERT\u003e\n      spKey: \u003cSP_KEY\u003e\n      uidField: \u003cUID_FIELD\u003e\n      userNameField: \u003cUSER_NAME_FIELD\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `adfs_user://\u003cUSER_ID\u003e`  `adfs_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "ADFS display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "ADFS group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "ADFS IDP metadata content (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "ADFS SP cert (string)\n",
                    "secret": true
                },
                "spKey": {
                    "type": "string",
                    "description": "ADFS SP key (string)\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "ADFS UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "ADFS user name field (string)\n"
                }
            },
            "required": [
                "annotations",
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "labels",
                "name",
                "rancherApiHost",
                "spCert",
                "spKey",
                "type",
                "uidField",
                "userNameField"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `adfs_user://\u003cUSER_ID\u003e`  `adfs_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "ADFS display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "ADFS group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "ADFS IDP metadata content (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "ADFS SP cert (string)\n",
                    "secret": true
                },
                "spKey": {
                    "type": "string",
                    "description": "ADFS SP key (string)\n",
                    "secret": true
                },
                "uidField": {
                    "type": "string",
                    "description": "ADFS UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "ADFS user name field (string)\n"
                }
            },
            "requiredInputs": [
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "rancherApiHost",
                "spCert",
                "spKey",
                "uidField",
                "userNameField"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigAdfs resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `adfs_user://\u003cUSER_ID\u003e`  `adfs_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "displayNameField": {
                        "type": "string",
                        "description": "ADFS display name field (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "groupsField": {
                        "type": "string",
                        "description": "ADFS group field (string)\n"
                    },
                    "idpMetadataContent": {
                        "type": "string",
                        "description": "ADFS IDP metadata content (string)\n",
                        "secret": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherApiHost": {
                        "type": "string",
                        "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                    },
                    "spCert": {
                        "type": "string",
                        "description": "ADFS SP cert (string)\n",
                        "secret": true
                    },
                    "spKey": {
                        "type": "string",
                        "description": "ADFS SP key (string)\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "uidField": {
                        "type": "string",
                        "description": "ADFS UID field (string)\n"
                    },
                    "userNameField": {
                        "type": "string",
                        "description": "ADFS user name field (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigAzureAd:AuthConfigAzureAd": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config AzureAD\nconst azuread = new rancher2.AuthConfigAzureAd(\"azuread\", {\n    applicationId: \"\u003cAZUREAD_APP_ID\u003e\",\n    applicationSecret: \"\u003cAZUREAD_APP_SECRET\u003e\",\n    authEndpoint: \"\u003cAZUREAD_AUTH_ENDPOINT\u003e\",\n    graphEndpoint: \"\u003cAZUREAD_GRAPH_ENDPOINT\u003e\",\n    rancherUrl: \"\u003cRANCHER_URL\u003e\",\n    tenantId: \"\u003cAZUREAD_TENANT_ID\u003e\",\n    tokenEndpoint: \"\u003cAZUREAD_TOKEN_ENDPOINT\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config AzureAD\nazuread = rancher2.AuthConfigAzureAd(\"azuread\",\n    application_id=\"\u003cAZUREAD_APP_ID\u003e\",\n    application_secret=\"\u003cAZUREAD_APP_SECRET\u003e\",\n    auth_endpoint=\"\u003cAZUREAD_AUTH_ENDPOINT\u003e\",\n    graph_endpoint=\"\u003cAZUREAD_GRAPH_ENDPOINT\u003e\",\n    rancher_url=\"\u003cRANCHER_URL\u003e\",\n    tenant_id=\"\u003cAZUREAD_TENANT_ID\u003e\",\n    token_endpoint=\"\u003cAZUREAD_TOKEN_ENDPOINT\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Auth Config AzureAD\n    var azuread = new Rancher2.AuthConfigAzureAd(\"azuread\", new()\n    {\n        ApplicationId = \"\u003cAZUREAD_APP_ID\u003e\",\n        ApplicationSecret = \"\u003cAZUREAD_APP_SECRET\u003e\",\n        AuthEndpoint = \"\u003cAZUREAD_AUTH_ENDPOINT\u003e\",\n        GraphEndpoint = \"\u003cAZUREAD_GRAPH_ENDPOINT\u003e\",\n        RancherUrl = \"\u003cRANCHER_URL\u003e\",\n        TenantId = \"\u003cAZUREAD_TENANT_ID\u003e\",\n        TokenEndpoint = \"\u003cAZUREAD_TOKEN_ENDPOINT\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Auth Config AzureAD\n\t\t_, err := rancher2.NewAuthConfigAzureAd(ctx, \"azuread\", \u0026rancher2.AuthConfigAzureAdArgs{\n\t\t\tApplicationId:     pulumi.String(\"\u003cAZUREAD_APP_ID\u003e\"),\n\t\t\tApplicationSecret: pulumi.String(\"\u003cAZUREAD_APP_SECRET\u003e\"),\n\t\t\tAuthEndpoint:      pulumi.String(\"\u003cAZUREAD_AUTH_ENDPOINT\u003e\"),\n\t\t\tGraphEndpoint:     pulumi.String(\"\u003cAZUREAD_GRAPH_ENDPOINT\u003e\"),\n\t\t\tRancherUrl:        pulumi.String(\"\u003cRANCHER_URL\u003e\"),\n\t\t\tTenantId:          pulumi.String(\"\u003cAZUREAD_TENANT_ID\u003e\"),\n\t\t\tTokenEndpoint:     pulumi.String(\"\u003cAZUREAD_TOKEN_ENDPOINT\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.AuthConfigAzureAd;\nimport com.pulumi.rancher2.AuthConfigAzureAdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Auth Config AzureAD\n        var azuread = new AuthConfigAzureAd(\"azuread\", AuthConfigAzureAdArgs.builder()\n            .applicationId(\"\u003cAZUREAD_APP_ID\u003e\")\n            .applicationSecret(\"\u003cAZUREAD_APP_SECRET\u003e\")\n            .authEndpoint(\"\u003cAZUREAD_AUTH_ENDPOINT\u003e\")\n            .graphEndpoint(\"\u003cAZUREAD_GRAPH_ENDPOINT\u003e\")\n            .rancherUrl(\"\u003cRANCHER_URL\u003e\")\n            .tenantId(\"\u003cAZUREAD_TENANT_ID\u003e\")\n            .tokenEndpoint(\"\u003cAZUREAD_TOKEN_ENDPOINT\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Auth Config AzureAD\n  azuread:\n    type: rancher2:AuthConfigAzureAd\n    properties:\n      applicationId: \u003cAZUREAD_APP_ID\u003e\n      applicationSecret: \u003cAZUREAD_APP_SECRET\u003e\n      authEndpoint: \u003cAZUREAD_AUTH_ENDPOINT\u003e\n      graphEndpoint: \u003cAZUREAD_GRAPH_ENDPOINT\u003e\n      rancherUrl: \u003cRANCHER_URL\u003e\n      tenantId: \u003cAZUREAD_TENANT_ID\u003e\n      tokenEndpoint: \u003cAZUREAD_TOKEN_ENDPOINT\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `azuread_user://\u003cUSER_ID\u003e`  `azuread_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "AzureAD auth application ID (string)\n",
                    "secret": true
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "AzureAD auth application secret (string)\n",
                    "secret": true
                },
                "authEndpoint": {
                    "type": "string",
                    "description": "AzureAD auth endpoint (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "AzureAD endpoint. Default `https://login.microsoftonline.com/` (string)\n"
                },
                "graphEndpoint": {
                    "type": "string",
                    "description": "AzureAD graph endpoint (string)\n"
                },
                "groupMembershipFilter": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherUrl": {
                    "type": "string",
                    "description": "Rancher URL (string). \"\u003crancher_url\u003e/verify-auth-azure\"\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "AzureAD tenant ID (string)\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "AzureAD token endpoint (string)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                }
            },
            "required": [
                "annotations",
                "applicationId",
                "applicationSecret",
                "authEndpoint",
                "graphEndpoint",
                "labels",
                "name",
                "rancherUrl",
                "tenantId",
                "tokenEndpoint",
                "type"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `azuread_user://\u003cUSER_ID\u003e`  `azuread_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "AzureAD auth application ID (string)\n",
                    "secret": true
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "AzureAD auth application secret (string)\n",
                    "secret": true
                },
                "authEndpoint": {
                    "type": "string",
                    "description": "AzureAD auth endpoint (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "AzureAD endpoint. Default `https://login.microsoftonline.com/` (string)\n"
                },
                "graphEndpoint": {
                    "type": "string",
                    "description": "AzureAD graph endpoint (string)\n"
                },
                "groupMembershipFilter": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherUrl": {
                    "type": "string",
                    "description": "Rancher URL (string). \"\u003crancher_url\u003e/verify-auth-azure\"\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "AzureAD tenant ID (string)\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "AzureAD token endpoint (string)\n"
                }
            },
            "requiredInputs": [
                "applicationId",
                "applicationSecret",
                "authEndpoint",
                "graphEndpoint",
                "rancherUrl",
                "tenantId",
                "tokenEndpoint"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigAzureAd resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `azuread_user://\u003cUSER_ID\u003e`  `azuread_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "AzureAD auth application ID (string)\n",
                        "secret": true
                    },
                    "applicationSecret": {
                        "type": "string",
                        "description": "AzureAD auth application secret (string)\n",
                        "secret": true
                    },
                    "authEndpoint": {
                        "type": "string",
                        "description": "AzureAD auth endpoint (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "AzureAD endpoint. Default `https://login.microsoftonline.com/` (string)\n"
                    },
                    "graphEndpoint": {
                        "type": "string",
                        "description": "AzureAD graph endpoint (string)\n"
                    },
                    "groupMembershipFilter": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherUrl": {
                        "type": "string",
                        "description": "Rancher URL (string). \"\u003crancher_url\u003e/verify-auth-azure\"\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "AzureAD tenant ID (string)\n"
                    },
                    "tokenEndpoint": {
                        "type": "string",
                        "description": "AzureAD token endpoint (string)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigFreeIpa:AuthConfigFreeIpa": {
            "description": "Provides a Rancher v2 Auth Config FreeIpa resource. This can be used to configure and enable Auth Config FreeIpa for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `freeipa_user://\u003cDN\u003e`  `freeipa_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n",
                    "secret": true
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "FreeIpa connection timeout. Default \u003cspan pulumi-lang-nodejs=\"`5000`\" pulumi-lang-dotnet=\"`5000`\" pulumi-lang-go=\"`5000`\" pulumi-lang-python=\"`5000`\" pulumi-lang-yaml=\"`5000`\" pulumi-lang-java=\"`5000`\"\u003e`5000`\u003c/span\u003e (int)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `entryDN` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default \u003cspan pulumi-lang-nodejs=\"`member`\" pulumi-lang-dotnet=\"`Member`\" pulumi-lang-go=\"`member`\" pulumi-lang-python=\"`member`\" pulumi-lang-yaml=\"`member`\" pulumi-lang-java=\"`member`\"\u003e`member`\u003c/span\u003e (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `entryDN` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `groupOfNames` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "groupSearchFilter": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "FreeIpa port. Default \u003cspan pulumi-lang-nodejs=\"`389`\" pulumi-lang-dotnet=\"`389`\" pulumi-lang-go=\"`389`\" pulumi-lang-python=\"`389`\" pulumi-lang-yaml=\"`389`\" pulumi-lang-java=\"`389`\"\u003e`389`\u003c/span\u003e (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "FreeIpa servers list (list)\n"
                },
                "serviceAccountDistinguishedName": {
                    "type": "string",
                    "description": "Service account DN for access FreeIpa service (string)\n",
                    "secret": true
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access FreeIpa service (string)\n",
                    "secret": true
                },
                "startTls": {
                    "type": "boolean"
                },
                "testPassword": {
                    "type": "string",
                    "description": "Password for test access to FreeIpa service (string)\n",
                    "secret": true
                },
                "testUsername": {
                    "type": "string",
                    "description": "Username for test access to FreeIpa service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default \u003cspan pulumi-lang-nodejs=\"`uid`\" pulumi-lang-dotnet=\"`Uid`\" pulumi-lang-go=\"`uid`\" pulumi-lang-python=\"`uid`\" pulumi-lang-yaml=\"`uid`\" pulumi-lang-java=\"`uid`\"\u003e`uid`\u003c/span\u003e (string)\n"
                },
                "userMemberAttribute": {
                    "type": "string",
                    "description": "User member attribute. Default `memberOf` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `givenName` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default \u003cspan pulumi-lang-nodejs=\"`inetorgperson`\" pulumi-lang-dotnet=\"`Inetorgperson`\" pulumi-lang-go=\"`inetorgperson`\" pulumi-lang-python=\"`inetorgperson`\" pulumi-lang-yaml=\"`inetorgperson`\" pulumi-lang-java=\"`inetorgperson`\"\u003e`inetorgperson`\u003c/span\u003e (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                },
                "userSearchFilter": {
                    "type": "string"
                }
            },
            "required": [
                "annotations",
                "groupDnAttribute",
                "groupMemberMappingAttribute",
                "groupMemberUserAttribute",
                "groupNameAttribute",
                "groupObjectClass",
                "groupSearchAttribute",
                "groupSearchBase",
                "labels",
                "name",
                "nestedGroupMembershipEnabled",
                "servers",
                "serviceAccountDistinguishedName",
                "serviceAccountPassword",
                "startTls",
                "testPassword",
                "testUsername",
                "tls",
                "type",
                "userDisabledBitMask",
                "userEnabledAttribute",
                "userLoginAttribute",
                "userMemberAttribute",
                "userNameAttribute",
                "userObjectClass",
                "userSearchAttribute",
                "userSearchBase"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `freeipa_user://\u003cDN\u003e`  `freeipa_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n",
                    "secret": true
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "FreeIpa connection timeout. Default \u003cspan pulumi-lang-nodejs=\"`5000`\" pulumi-lang-dotnet=\"`5000`\" pulumi-lang-go=\"`5000`\" pulumi-lang-python=\"`5000`\" pulumi-lang-yaml=\"`5000`\" pulumi-lang-java=\"`5000`\"\u003e`5000`\u003c/span\u003e (int)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `entryDN` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default \u003cspan pulumi-lang-nodejs=\"`member`\" pulumi-lang-dotnet=\"`Member`\" pulumi-lang-go=\"`member`\" pulumi-lang-python=\"`member`\" pulumi-lang-yaml=\"`member`\" pulumi-lang-java=\"`member`\"\u003e`member`\u003c/span\u003e (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `entryDN` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `groupOfNames` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "groupSearchFilter": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "FreeIpa port. Default \u003cspan pulumi-lang-nodejs=\"`389`\" pulumi-lang-dotnet=\"`389`\" pulumi-lang-go=\"`389`\" pulumi-lang-python=\"`389`\" pulumi-lang-yaml=\"`389`\" pulumi-lang-java=\"`389`\"\u003e`389`\u003c/span\u003e (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "FreeIpa servers list (list)\n"
                },
                "serviceAccountDistinguishedName": {
                    "type": "string",
                    "description": "Service account DN for access FreeIpa service (string)\n",
                    "secret": true
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access FreeIpa service (string)\n",
                    "secret": true
                },
                "startTls": {
                    "type": "boolean"
                },
                "testPassword": {
                    "type": "string",
                    "description": "Password for test access to FreeIpa service (string)\n",
                    "secret": true
                },
                "testUsername": {
                    "type": "string",
                    "description": "Username for test access to FreeIpa service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default \u003cspan pulumi-lang-nodejs=\"`uid`\" pulumi-lang-dotnet=\"`Uid`\" pulumi-lang-go=\"`uid`\" pulumi-lang-python=\"`uid`\" pulumi-lang-yaml=\"`uid`\" pulumi-lang-java=\"`uid`\"\u003e`uid`\u003c/span\u003e (string)\n"
                },
                "userMemberAttribute": {
                    "type": "string",
                    "description": "User member attribute. Default `memberOf` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `givenName` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default \u003cspan pulumi-lang-nodejs=\"`inetorgperson`\" pulumi-lang-dotnet=\"`Inetorgperson`\" pulumi-lang-go=\"`inetorgperson`\" pulumi-lang-python=\"`inetorgperson`\" pulumi-lang-yaml=\"`inetorgperson`\" pulumi-lang-java=\"`inetorgperson`\"\u003e`inetorgperson`\u003c/span\u003e (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                },
                "userSearchFilter": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "servers",
                "serviceAccountDistinguishedName",
                "serviceAccountPassword",
                "testPassword",
                "testUsername",
                "userSearchBase"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigFreeIpa resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `freeipa_user://\u003cDN\u003e`  `freeipa_group://\u003cDN\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n",
                        "secret": true
                    },
                    "connectionTimeout": {
                        "type": "integer",
                        "description": "FreeIpa connection timeout. Default \u003cspan pulumi-lang-nodejs=\"`5000`\" pulumi-lang-dotnet=\"`5000`\" pulumi-lang-go=\"`5000`\" pulumi-lang-python=\"`5000`\" pulumi-lang-yaml=\"`5000`\" pulumi-lang-java=\"`5000`\"\u003e`5000`\u003c/span\u003e (int)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "groupDnAttribute": {
                        "type": "string",
                        "description": "Group DN attribute. Default `entryDN` (string)\n"
                    },
                    "groupMemberMappingAttribute": {
                        "type": "string",
                        "description": "Group member mapping attribute. Default \u003cspan pulumi-lang-nodejs=\"`member`\" pulumi-lang-dotnet=\"`Member`\" pulumi-lang-go=\"`member`\" pulumi-lang-python=\"`member`\" pulumi-lang-yaml=\"`member`\" pulumi-lang-java=\"`member`\"\u003e`member`\u003c/span\u003e (string)\n"
                    },
                    "groupMemberUserAttribute": {
                        "type": "string",
                        "description": "Group member user attribute. Default `entryDN` (string)\n"
                    },
                    "groupNameAttribute": {
                        "type": "string",
                        "description": "Group name attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                    },
                    "groupObjectClass": {
                        "type": "string",
                        "description": "Group object class. Default `groupOfNames` (string)\n"
                    },
                    "groupSearchAttribute": {
                        "type": "string",
                        "description": "Group search attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                    },
                    "groupSearchBase": {
                        "type": "string",
                        "description": "Group search base (string)\n"
                    },
                    "groupSearchFilter": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "nestedGroupMembershipEnabled": {
                        "type": "boolean",
                        "description": "Nested group membership enable. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "FreeIpa port. Default \u003cspan pulumi-lang-nodejs=\"`389`\" pulumi-lang-dotnet=\"`389`\" pulumi-lang-go=\"`389`\" pulumi-lang-python=\"`389`\" pulumi-lang-yaml=\"`389`\" pulumi-lang-java=\"`389`\"\u003e`389`\u003c/span\u003e (int)\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "FreeIpa servers list (list)\n"
                    },
                    "serviceAccountDistinguishedName": {
                        "type": "string",
                        "description": "Service account DN for access FreeIpa service (string)\n",
                        "secret": true
                    },
                    "serviceAccountPassword": {
                        "type": "string",
                        "description": "Service account password for access FreeIpa service (string)\n",
                        "secret": true
                    },
                    "startTls": {
                        "type": "boolean"
                    },
                    "testPassword": {
                        "type": "string",
                        "description": "Password for test access to FreeIpa service (string)\n",
                        "secret": true
                    },
                    "testUsername": {
                        "type": "string",
                        "description": "Username for test access to FreeIpa service (string)\n"
                    },
                    "tls": {
                        "type": "boolean",
                        "description": "Enable TLS connection (bool)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "userDisabledBitMask": {
                        "type": "integer",
                        "description": "User disabled bit mask (int)\n"
                    },
                    "userEnabledAttribute": {
                        "type": "string",
                        "description": "User enable attribute (string)\n"
                    },
                    "userLoginAttribute": {
                        "type": "string",
                        "description": "User login attribute. Default \u003cspan pulumi-lang-nodejs=\"`uid`\" pulumi-lang-dotnet=\"`Uid`\" pulumi-lang-go=\"`uid`\" pulumi-lang-python=\"`uid`\" pulumi-lang-yaml=\"`uid`\" pulumi-lang-java=\"`uid`\"\u003e`uid`\u003c/span\u003e (string)\n"
                    },
                    "userMemberAttribute": {
                        "type": "string",
                        "description": "User member attribute. Default `memberOf` (string)\n"
                    },
                    "userNameAttribute": {
                        "type": "string",
                        "description": "User name attribute. Default `givenName` (string)\n"
                    },
                    "userObjectClass": {
                        "type": "string",
                        "description": "User object class. Default \u003cspan pulumi-lang-nodejs=\"`inetorgperson`\" pulumi-lang-dotnet=\"`Inetorgperson`\" pulumi-lang-go=\"`inetorgperson`\" pulumi-lang-python=\"`inetorgperson`\" pulumi-lang-yaml=\"`inetorgperson`\" pulumi-lang-java=\"`inetorgperson`\"\u003e`inetorgperson`\u003c/span\u003e (string)\n"
                    },
                    "userSearchAttribute": {
                        "type": "string",
                        "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                    },
                    "userSearchBase": {
                        "type": "string",
                        "description": "User search base DN (string)\n"
                    },
                    "userSearchFilter": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigGithub:AuthConfigGithub": {
            "description": "Provides a Rancher v2 Auth Config Github resource. This can be used to configure and enable Auth Config Github for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config Github\nconst github = new rancher2.AuthConfigGithub(\"github\", {\n    clientId: \"\u003cGITHUB_CLIENT_ID\u003e\",\n    clientSecret: \"\u003cGITHUB_CLIENT_SECRET\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config Github\ngithub = rancher2.AuthConfigGithub(\"github\",\n    client_id=\"\u003cGITHUB_CLIENT_ID\u003e\",\n    client_secret=\"\u003cGITHUB_CLIENT_SECRET\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Auth Config Github\n    var github = new Rancher2.AuthConfigGithub(\"github\", new()\n    {\n        ClientId = \"\u003cGITHUB_CLIENT_ID\u003e\",\n        ClientSecret = \"\u003cGITHUB_CLIENT_SECRET\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Auth Config Github\n\t\t_, err := rancher2.NewAuthConfigGithub(ctx, \"github\", \u0026rancher2.AuthConfigGithubArgs{\n\t\t\tClientId:     pulumi.String(\"\u003cGITHUB_CLIENT_ID\u003e\"),\n\t\t\tClientSecret: pulumi.String(\"\u003cGITHUB_CLIENT_SECRET\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.AuthConfigGithub;\nimport com.pulumi.rancher2.AuthConfigGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Auth Config Github\n        var github = new AuthConfigGithub(\"github\", AuthConfigGithubArgs.builder()\n            .clientId(\"\u003cGITHUB_CLIENT_ID\u003e\")\n            .clientSecret(\"\u003cGITHUB_CLIENT_SECRET\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Auth Config Github\n  github:\n    type: rancher2:AuthConfigGithub\n    properties:\n      clientId: \u003cGITHUB_CLIENT_ID\u003e\n      clientSecret: \u003cGITHUB_CLIENT_SECRET\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `github_user://\u003cUSER_ID\u003e`  `github_team://\u003cGROUP_ID\u003e` `github_org://\u003cORG_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Github auth Client ID (string)\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Github auth Client secret (string)\n",
                    "secret": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Github hostname to connect. Default `github.com` (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                }
            },
            "required": [
                "annotations",
                "clientId",
                "clientSecret",
                "labels",
                "name",
                "type"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `github_user://\u003cUSER_ID\u003e`  `github_team://\u003cGROUP_ID\u003e` `github_org://\u003cORG_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "Github auth Client ID (string)\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Github auth Client secret (string)\n",
                    "secret": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Github hostname to connect. Default `github.com` (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigGithub resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `github_user://\u003cUSER_ID\u003e`  `github_team://\u003cGROUP_ID\u003e` `github_org://\u003cORG_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "Github auth Client ID (string)\n",
                        "secret": true
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "Github auth Client secret (string)\n",
                        "secret": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Github hostname to connect. Default `github.com` (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "tls": {
                        "type": "boolean",
                        "description": "Enable TLS connection. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigKeycloak:AuthConfigKeycloak": {
            "description": "Provides a Rancher v2 Auth Config KeyCloak resource. This can be used to configure and enable Auth Config KeyCloak for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config KeyCloak\nconst keycloak = new rancher2.AuthConfigKeycloak(\"keycloak\", {\n    displayNameField: \"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groupsField: \"\u003cGROUPS_FIELD\u003e\",\n    idpMetadataContent: \"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancherApiHost: \"https://\u003cRANCHER_API_HOST\u003e\",\n    spCert: \"\u003cSP_CERT\u003e\",\n    spKey: \"\u003cSP_KEY\u003e\",\n    uidField: \"\u003cUID_FIELD\u003e\",\n    userNameField: \"\u003cUSER_NAME_FIELD\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config KeyCloak\nkeycloak = rancher2.AuthConfigKeycloak(\"keycloak\",\n    display_name_field=\"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groups_field=\"\u003cGROUPS_FIELD\u003e\",\n    idp_metadata_content=\"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancher_api_host=\"https://\u003cRANCHER_API_HOST\u003e\",\n    sp_cert=\"\u003cSP_CERT\u003e\",\n    sp_key=\"\u003cSP_KEY\u003e\",\n    uid_field=\"\u003cUID_FIELD\u003e\",\n    user_name_field=\"\u003cUSER_NAME_FIELD\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Auth Config KeyCloak\n    var keycloak = new Rancher2.AuthConfigKeycloak(\"keycloak\", new()\n    {\n        DisplayNameField = \"\u003cDISPLAY_NAME_FIELD\u003e\",\n        GroupsField = \"\u003cGROUPS_FIELD\u003e\",\n        IdpMetadataContent = \"\u003cIDP_METADATA_CONTENT\u003e\",\n        RancherApiHost = \"https://\u003cRANCHER_API_HOST\u003e\",\n        SpCert = \"\u003cSP_CERT\u003e\",\n        SpKey = \"\u003cSP_KEY\u003e\",\n        UidField = \"\u003cUID_FIELD\u003e\",\n        UserNameField = \"\u003cUSER_NAME_FIELD\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Auth Config KeyCloak\n\t\t_, err := rancher2.NewAuthConfigKeycloak(ctx, \"keycloak\", \u0026rancher2.AuthConfigKeycloakArgs{\n\t\t\tDisplayNameField:   pulumi.String(\"\u003cDISPLAY_NAME_FIELD\u003e\"),\n\t\t\tGroupsField:        pulumi.String(\"\u003cGROUPS_FIELD\u003e\"),\n\t\t\tIdpMetadataContent: pulumi.String(\"\u003cIDP_METADATA_CONTENT\u003e\"),\n\t\t\tRancherApiHost:     pulumi.String(\"https://\u003cRANCHER_API_HOST\u003e\"),\n\t\t\tSpCert:             pulumi.String(\"\u003cSP_CERT\u003e\"),\n\t\t\tSpKey:              pulumi.String(\"\u003cSP_KEY\u003e\"),\n\t\t\tUidField:           pulumi.String(\"\u003cUID_FIELD\u003e\"),\n\t\t\tUserNameField:      pulumi.String(\"\u003cUSER_NAME_FIELD\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.AuthConfigKeycloak;\nimport com.pulumi.rancher2.AuthConfigKeycloakArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Auth Config KeyCloak\n        var keycloak = new AuthConfigKeycloak(\"keycloak\", AuthConfigKeycloakArgs.builder()\n            .displayNameField(\"\u003cDISPLAY_NAME_FIELD\u003e\")\n            .groupsField(\"\u003cGROUPS_FIELD\u003e\")\n            .idpMetadataContent(\"\u003cIDP_METADATA_CONTENT\u003e\")\n            .rancherApiHost(\"https://\u003cRANCHER_API_HOST\u003e\")\n            .spCert(\"\u003cSP_CERT\u003e\")\n            .spKey(\"\u003cSP_KEY\u003e\")\n            .uidField(\"\u003cUID_FIELD\u003e\")\n            .userNameField(\"\u003cUSER_NAME_FIELD\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Auth Config KeyCloak\n  keycloak:\n    type: rancher2:AuthConfigKeycloak\n    properties:\n      displayNameField: \u003cDISPLAY_NAME_FIELD\u003e\n      groupsField: \u003cGROUPS_FIELD\u003e\n      idpMetadataContent: \u003cIDP_METADATA_CONTENT\u003e\n      rancherApiHost: https://\u003cRANCHER_API_HOST\u003e\n      spCert: \u003cSP_CERT\u003e\n      spKey: \u003cSP_KEY\u003e\n      uidField: \u003cUID_FIELD\u003e\n      userNameField: \u003cUSER_NAME_FIELD\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `keycloak_user://\u003cUSER_ID\u003e`  `keycloak_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "KeyCloak display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "entityId": {
                    "type": "string",
                    "description": "KeyCloak Client ID field (string)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "KeyCloak group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "KeyCloak IDP metadata content (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "KeyCloak SP cert (string)\n",
                    "secret": true
                },
                "spKey": {
                    "type": "string",
                    "description": "KeyCloak SP key (string)\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "KeyCloak UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "KeyCloak user name field (string)\n"
                }
            },
            "required": [
                "annotations",
                "displayNameField",
                "entityId",
                "groupsField",
                "idpMetadataContent",
                "labels",
                "name",
                "rancherApiHost",
                "spCert",
                "spKey",
                "type",
                "uidField",
                "userNameField"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `keycloak_user://\u003cUSER_ID\u003e`  `keycloak_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "KeyCloak display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "entityId": {
                    "type": "string",
                    "description": "KeyCloak Client ID field (string)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "KeyCloak group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "KeyCloak IDP metadata content (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "KeyCloak SP cert (string)\n",
                    "secret": true
                },
                "spKey": {
                    "type": "string",
                    "description": "KeyCloak SP key (string)\n",
                    "secret": true
                },
                "uidField": {
                    "type": "string",
                    "description": "KeyCloak UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "KeyCloak user name field (string)\n"
                }
            },
            "requiredInputs": [
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "rancherApiHost",
                "spCert",
                "spKey",
                "uidField",
                "userNameField"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigKeycloak resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `keycloak_user://\u003cUSER_ID\u003e`  `keycloak_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "displayNameField": {
                        "type": "string",
                        "description": "KeyCloak display name field (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "entityId": {
                        "type": "string",
                        "description": "KeyCloak Client ID field (string)\n"
                    },
                    "groupsField": {
                        "type": "string",
                        "description": "KeyCloak group field (string)\n"
                    },
                    "idpMetadataContent": {
                        "type": "string",
                        "description": "KeyCloak IDP metadata content (string)\n",
                        "secret": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherApiHost": {
                        "type": "string",
                        "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                    },
                    "spCert": {
                        "type": "string",
                        "description": "KeyCloak SP cert (string)\n",
                        "secret": true
                    },
                    "spKey": {
                        "type": "string",
                        "description": "KeyCloak SP key (string)\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "uidField": {
                        "type": "string",
                        "description": "KeyCloak UID field (string)\n"
                    },
                    "userNameField": {
                        "type": "string",
                        "description": "KeyCloak user name field (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigOkta:AuthConfigOkta": {
            "description": "Provides a Rancher v2 Auth Config OKTA resource. This can be used to configure and enable Auth Config OKTA for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config OKTA\nconst okta = new rancher2.AuthConfigOkta(\"okta\", {\n    displayNameField: \"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groupsField: \"\u003cGROUPS_FIELD\u003e\",\n    idpMetadataContent: \"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancherApiHost: \"https://\u003cRANCHER_API_HOST\u003e\",\n    spCert: \"\u003cSP_CERT\u003e\",\n    spKey: \"\u003cSP_KEY\u003e\",\n    uidField: \"\u003cUID_FIELD\u003e\",\n    userNameField: \"\u003cUSER_NAME_FIELD\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config OKTA\nokta = rancher2.AuthConfigOkta(\"okta\",\n    display_name_field=\"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groups_field=\"\u003cGROUPS_FIELD\u003e\",\n    idp_metadata_content=\"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancher_api_host=\"https://\u003cRANCHER_API_HOST\u003e\",\n    sp_cert=\"\u003cSP_CERT\u003e\",\n    sp_key=\"\u003cSP_KEY\u003e\",\n    uid_field=\"\u003cUID_FIELD\u003e\",\n    user_name_field=\"\u003cUSER_NAME_FIELD\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Auth Config OKTA\n    var okta = new Rancher2.AuthConfigOkta(\"okta\", new()\n    {\n        DisplayNameField = \"\u003cDISPLAY_NAME_FIELD\u003e\",\n        GroupsField = \"\u003cGROUPS_FIELD\u003e\",\n        IdpMetadataContent = \"\u003cIDP_METADATA_CONTENT\u003e\",\n        RancherApiHost = \"https://\u003cRANCHER_API_HOST\u003e\",\n        SpCert = \"\u003cSP_CERT\u003e\",\n        SpKey = \"\u003cSP_KEY\u003e\",\n        UidField = \"\u003cUID_FIELD\u003e\",\n        UserNameField = \"\u003cUSER_NAME_FIELD\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Auth Config OKTA\n\t\t_, err := rancher2.NewAuthConfigOkta(ctx, \"okta\", \u0026rancher2.AuthConfigOktaArgs{\n\t\t\tDisplayNameField:   pulumi.String(\"\u003cDISPLAY_NAME_FIELD\u003e\"),\n\t\t\tGroupsField:        pulumi.String(\"\u003cGROUPS_FIELD\u003e\"),\n\t\t\tIdpMetadataContent: pulumi.String(\"\u003cIDP_METADATA_CONTENT\u003e\"),\n\t\t\tRancherApiHost:     pulumi.String(\"https://\u003cRANCHER_API_HOST\u003e\"),\n\t\t\tSpCert:             pulumi.String(\"\u003cSP_CERT\u003e\"),\n\t\t\tSpKey:              pulumi.String(\"\u003cSP_KEY\u003e\"),\n\t\t\tUidField:           pulumi.String(\"\u003cUID_FIELD\u003e\"),\n\t\t\tUserNameField:      pulumi.String(\"\u003cUSER_NAME_FIELD\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.AuthConfigOkta;\nimport com.pulumi.rancher2.AuthConfigOktaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Auth Config OKTA\n        var okta = new AuthConfigOkta(\"okta\", AuthConfigOktaArgs.builder()\n            .displayNameField(\"\u003cDISPLAY_NAME_FIELD\u003e\")\n            .groupsField(\"\u003cGROUPS_FIELD\u003e\")\n            .idpMetadataContent(\"\u003cIDP_METADATA_CONTENT\u003e\")\n            .rancherApiHost(\"https://\u003cRANCHER_API_HOST\u003e\")\n            .spCert(\"\u003cSP_CERT\u003e\")\n            .spKey(\"\u003cSP_KEY\u003e\")\n            .uidField(\"\u003cUID_FIELD\u003e\")\n            .userNameField(\"\u003cUSER_NAME_FIELD\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Auth Config OKTA\n  okta:\n    type: rancher2:AuthConfigOkta\n    properties:\n      displayNameField: \u003cDISPLAY_NAME_FIELD\u003e\n      groupsField: \u003cGROUPS_FIELD\u003e\n      idpMetadataContent: \u003cIDP_METADATA_CONTENT\u003e\n      rancherApiHost: https://\u003cRANCHER_API_HOST\u003e\n      spCert: \u003cSP_CERT\u003e\n      spKey: \u003cSP_KEY\u003e\n      uidField: \u003cUID_FIELD\u003e\n      userNameField: \u003cUSER_NAME_FIELD\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `okta_user://\u003cUSER_ID\u003e`  `okta_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "OKTA display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "OKTA group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "OKTA IDP metadata content (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "OKTA SP cert (string)\n",
                    "secret": true
                },
                "spKey": {
                    "type": "string",
                    "description": "OKTA SP key (string)\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "OKTA UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "OKTA user name field (string)\n"
                }
            },
            "required": [
                "annotations",
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "labels",
                "name",
                "rancherApiHost",
                "spCert",
                "spKey",
                "type",
                "uidField",
                "userNameField"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `okta_user://\u003cUSER_ID\u003e`  `okta_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "OKTA display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "OKTA group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "OKTA IDP metadata content (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "OKTA SP cert (string)\n",
                    "secret": true
                },
                "spKey": {
                    "type": "string",
                    "description": "OKTA SP key (string)\n",
                    "secret": true
                },
                "uidField": {
                    "type": "string",
                    "description": "OKTA UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "OKTA user name field (string)\n"
                }
            },
            "requiredInputs": [
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "rancherApiHost",
                "spCert",
                "spKey",
                "uidField",
                "userNameField"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigOkta resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `okta_user://\u003cUSER_ID\u003e`  `okta_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "displayNameField": {
                        "type": "string",
                        "description": "OKTA display name field (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "groupsField": {
                        "type": "string",
                        "description": "OKTA group field (string)\n"
                    },
                    "idpMetadataContent": {
                        "type": "string",
                        "description": "OKTA IDP metadata content (string)\n",
                        "secret": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherApiHost": {
                        "type": "string",
                        "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                    },
                    "spCert": {
                        "type": "string",
                        "description": "OKTA SP cert (string)\n",
                        "secret": true
                    },
                    "spKey": {
                        "type": "string",
                        "description": "OKTA SP key (string)\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "uidField": {
                        "type": "string",
                        "description": "OKTA UID field (string)\n"
                    },
                    "userNameField": {
                        "type": "string",
                        "description": "OKTA user name field (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigOpenLdap:AuthConfigOpenLdap": {
            "description": "Provides a Rancher v2 Auth Config OpenLdap resource. This can be used to configure and enable Auth Config OpenLdap for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `openldap_user://\u003cDN\u003e`  `openldap_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n",
                    "secret": true
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "OpenLdap connection timeout. Default \u003cspan pulumi-lang-nodejs=\"`5000`\" pulumi-lang-dotnet=\"`5000`\" pulumi-lang-go=\"`5000`\" pulumi-lang-python=\"`5000`\" pulumi-lang-yaml=\"`5000`\" pulumi-lang-java=\"`5000`\"\u003e`5000`\u003c/span\u003e (int)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `entryDN` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default \u003cspan pulumi-lang-nodejs=\"`member`\" pulumi-lang-dotnet=\"`Member`\" pulumi-lang-go=\"`member`\" pulumi-lang-python=\"`member`\" pulumi-lang-yaml=\"`member`\" pulumi-lang-java=\"`member`\"\u003e`member`\u003c/span\u003e (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `entryDN` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `groupOfNames` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "groupSearchFilter": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "OpenLdap port. Default \u003cspan pulumi-lang-nodejs=\"`389`\" pulumi-lang-dotnet=\"`389`\" pulumi-lang-go=\"`389`\" pulumi-lang-python=\"`389`\" pulumi-lang-yaml=\"`389`\" pulumi-lang-java=\"`389`\"\u003e`389`\u003c/span\u003e (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "OpenLdap servers list (list)\n"
                },
                "serviceAccountDistinguishedName": {
                    "type": "string",
                    "description": "Service account DN for access OpenLdap service (string)\n",
                    "secret": true
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access OpenLdap service (string)\n",
                    "secret": true
                },
                "startTls": {
                    "type": "boolean"
                },
                "testPassword": {
                    "type": "string",
                    "description": "Password for test access to OpenLdap service (string)\n",
                    "secret": true
                },
                "testUsername": {
                    "type": "string",
                    "description": "Username for test access to OpenLdap service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default \u003cspan pulumi-lang-nodejs=\"`uid`\" pulumi-lang-dotnet=\"`Uid`\" pulumi-lang-go=\"`uid`\" pulumi-lang-python=\"`uid`\" pulumi-lang-yaml=\"`uid`\" pulumi-lang-java=\"`uid`\"\u003e`uid`\u003c/span\u003e (string)\n"
                },
                "userMemberAttribute": {
                    "type": "string",
                    "description": "User member attribute. Default `memberOf` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `givenName` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default \u003cspan pulumi-lang-nodejs=\"`inetorgperson`\" pulumi-lang-dotnet=\"`Inetorgperson`\" pulumi-lang-go=\"`inetorgperson`\" pulumi-lang-python=\"`inetorgperson`\" pulumi-lang-yaml=\"`inetorgperson`\" pulumi-lang-java=\"`inetorgperson`\"\u003e`inetorgperson`\u003c/span\u003e (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                },
                "userSearchFilter": {
                    "type": "string"
                }
            },
            "required": [
                "annotations",
                "groupDnAttribute",
                "groupMemberMappingAttribute",
                "groupMemberUserAttribute",
                "groupNameAttribute",
                "groupObjectClass",
                "groupSearchAttribute",
                "groupSearchBase",
                "labels",
                "name",
                "nestedGroupMembershipEnabled",
                "servers",
                "serviceAccountDistinguishedName",
                "serviceAccountPassword",
                "startTls",
                "testPassword",
                "testUsername",
                "tls",
                "type",
                "userDisabledBitMask",
                "userEnabledAttribute",
                "userLoginAttribute",
                "userMemberAttribute",
                "userNameAttribute",
                "userObjectClass",
                "userSearchAttribute",
                "userSearchBase"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `openldap_user://\u003cDN\u003e`  `openldap_group://\u003cDN\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n",
                    "secret": true
                },
                "connectionTimeout": {
                    "type": "integer",
                    "description": "OpenLdap connection timeout. Default \u003cspan pulumi-lang-nodejs=\"`5000`\" pulumi-lang-dotnet=\"`5000`\" pulumi-lang-go=\"`5000`\" pulumi-lang-python=\"`5000`\" pulumi-lang-yaml=\"`5000`\" pulumi-lang-java=\"`5000`\"\u003e`5000`\u003c/span\u003e (int)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "groupDnAttribute": {
                    "type": "string",
                    "description": "Group DN attribute. Default `entryDN` (string)\n"
                },
                "groupMemberMappingAttribute": {
                    "type": "string",
                    "description": "Group member mapping attribute. Default \u003cspan pulumi-lang-nodejs=\"`member`\" pulumi-lang-dotnet=\"`Member`\" pulumi-lang-go=\"`member`\" pulumi-lang-python=\"`member`\" pulumi-lang-yaml=\"`member`\" pulumi-lang-java=\"`member`\"\u003e`member`\u003c/span\u003e (string)\n"
                },
                "groupMemberUserAttribute": {
                    "type": "string",
                    "description": "Group member user attribute. Default `entryDN` (string)\n"
                },
                "groupNameAttribute": {
                    "type": "string",
                    "description": "Group name attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                },
                "groupObjectClass": {
                    "type": "string",
                    "description": "Group object class. Default `groupOfNames` (string)\n"
                },
                "groupSearchAttribute": {
                    "type": "string",
                    "description": "Group search attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                },
                "groupSearchBase": {
                    "type": "string",
                    "description": "Group search base (string)\n"
                },
                "groupSearchFilter": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "nestedGroupMembershipEnabled": {
                    "type": "boolean",
                    "description": "Nested group membership enable. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "OpenLdap port. Default \u003cspan pulumi-lang-nodejs=\"`389`\" pulumi-lang-dotnet=\"`389`\" pulumi-lang-go=\"`389`\" pulumi-lang-python=\"`389`\" pulumi-lang-yaml=\"`389`\" pulumi-lang-java=\"`389`\"\u003e`389`\u003c/span\u003e (int)\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "OpenLdap servers list (list)\n"
                },
                "serviceAccountDistinguishedName": {
                    "type": "string",
                    "description": "Service account DN for access OpenLdap service (string)\n",
                    "secret": true
                },
                "serviceAccountPassword": {
                    "type": "string",
                    "description": "Service account password for access OpenLdap service (string)\n",
                    "secret": true
                },
                "startTls": {
                    "type": "boolean"
                },
                "testPassword": {
                    "type": "string",
                    "description": "Password for test access to OpenLdap service (string)\n",
                    "secret": true
                },
                "testUsername": {
                    "type": "string",
                    "description": "Username for test access to OpenLdap service (string)\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS connection (bool)\n"
                },
                "userDisabledBitMask": {
                    "type": "integer",
                    "description": "User disabled bit mask (int)\n"
                },
                "userEnabledAttribute": {
                    "type": "string",
                    "description": "User enable attribute (string)\n"
                },
                "userLoginAttribute": {
                    "type": "string",
                    "description": "User login attribute. Default \u003cspan pulumi-lang-nodejs=\"`uid`\" pulumi-lang-dotnet=\"`Uid`\" pulumi-lang-go=\"`uid`\" pulumi-lang-python=\"`uid`\" pulumi-lang-yaml=\"`uid`\" pulumi-lang-java=\"`uid`\"\u003e`uid`\u003c/span\u003e (string)\n"
                },
                "userMemberAttribute": {
                    "type": "string",
                    "description": "User member attribute. Default `memberOf` (string)\n"
                },
                "userNameAttribute": {
                    "type": "string",
                    "description": "User name attribute. Default `givenName` (string)\n"
                },
                "userObjectClass": {
                    "type": "string",
                    "description": "User object class. Default \u003cspan pulumi-lang-nodejs=\"`inetorgperson`\" pulumi-lang-dotnet=\"`Inetorgperson`\" pulumi-lang-go=\"`inetorgperson`\" pulumi-lang-python=\"`inetorgperson`\" pulumi-lang-yaml=\"`inetorgperson`\" pulumi-lang-java=\"`inetorgperson`\"\u003e`inetorgperson`\u003c/span\u003e (string)\n"
                },
                "userSearchAttribute": {
                    "type": "string",
                    "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                },
                "userSearchBase": {
                    "type": "string",
                    "description": "User search base DN (string)\n"
                },
                "userSearchFilter": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "servers",
                "serviceAccountDistinguishedName",
                "serviceAccountPassword",
                "testPassword",
                "testUsername",
                "userSearchBase"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigOpenLdap resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `openldap_user://\u003cDN\u003e`  `openldap_group://\u003cDN\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "Base64 encoded CA certificate for TLS if self-signed. Use filebase64(\u003cFILE\u003e) for encoding file (string)\n",
                        "secret": true
                    },
                    "connectionTimeout": {
                        "type": "integer",
                        "description": "OpenLdap connection timeout. Default \u003cspan pulumi-lang-nodejs=\"`5000`\" pulumi-lang-dotnet=\"`5000`\" pulumi-lang-go=\"`5000`\" pulumi-lang-python=\"`5000`\" pulumi-lang-yaml=\"`5000`\" pulumi-lang-java=\"`5000`\"\u003e`5000`\u003c/span\u003e (int)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "groupDnAttribute": {
                        "type": "string",
                        "description": "Group DN attribute. Default `entryDN` (string)\n"
                    },
                    "groupMemberMappingAttribute": {
                        "type": "string",
                        "description": "Group member mapping attribute. Default \u003cspan pulumi-lang-nodejs=\"`member`\" pulumi-lang-dotnet=\"`Member`\" pulumi-lang-go=\"`member`\" pulumi-lang-python=\"`member`\" pulumi-lang-yaml=\"`member`\" pulumi-lang-java=\"`member`\"\u003e`member`\u003c/span\u003e (string)\n"
                    },
                    "groupMemberUserAttribute": {
                        "type": "string",
                        "description": "Group member user attribute. Default `entryDN` (string)\n"
                    },
                    "groupNameAttribute": {
                        "type": "string",
                        "description": "Group name attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                    },
                    "groupObjectClass": {
                        "type": "string",
                        "description": "Group object class. Default `groupOfNames` (string)\n"
                    },
                    "groupSearchAttribute": {
                        "type": "string",
                        "description": "Group search attribute. Default \u003cspan pulumi-lang-nodejs=\"`cn`\" pulumi-lang-dotnet=\"`Cn`\" pulumi-lang-go=\"`cn`\" pulumi-lang-python=\"`cn`\" pulumi-lang-yaml=\"`cn`\" pulumi-lang-java=\"`cn`\"\u003e`cn`\u003c/span\u003e (string)\n"
                    },
                    "groupSearchBase": {
                        "type": "string",
                        "description": "Group search base (string)\n"
                    },
                    "groupSearchFilter": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "nestedGroupMembershipEnabled": {
                        "type": "boolean",
                        "description": "Nested group membership enable. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "OpenLdap port. Default \u003cspan pulumi-lang-nodejs=\"`389`\" pulumi-lang-dotnet=\"`389`\" pulumi-lang-go=\"`389`\" pulumi-lang-python=\"`389`\" pulumi-lang-yaml=\"`389`\" pulumi-lang-java=\"`389`\"\u003e`389`\u003c/span\u003e (int)\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "OpenLdap servers list (list)\n"
                    },
                    "serviceAccountDistinguishedName": {
                        "type": "string",
                        "description": "Service account DN for access OpenLdap service (string)\n",
                        "secret": true
                    },
                    "serviceAccountPassword": {
                        "type": "string",
                        "description": "Service account password for access OpenLdap service (string)\n",
                        "secret": true
                    },
                    "startTls": {
                        "type": "boolean"
                    },
                    "testPassword": {
                        "type": "string",
                        "description": "Password for test access to OpenLdap service (string)\n",
                        "secret": true
                    },
                    "testUsername": {
                        "type": "string",
                        "description": "Username for test access to OpenLdap service (string)\n"
                    },
                    "tls": {
                        "type": "boolean",
                        "description": "Enable TLS connection (bool)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "userDisabledBitMask": {
                        "type": "integer",
                        "description": "User disabled bit mask (int)\n"
                    },
                    "userEnabledAttribute": {
                        "type": "string",
                        "description": "User enable attribute (string)\n"
                    },
                    "userLoginAttribute": {
                        "type": "string",
                        "description": "User login attribute. Default \u003cspan pulumi-lang-nodejs=\"`uid`\" pulumi-lang-dotnet=\"`Uid`\" pulumi-lang-go=\"`uid`\" pulumi-lang-python=\"`uid`\" pulumi-lang-yaml=\"`uid`\" pulumi-lang-java=\"`uid`\"\u003e`uid`\u003c/span\u003e (string)\n"
                    },
                    "userMemberAttribute": {
                        "type": "string",
                        "description": "User member attribute. Default `memberOf` (string)\n"
                    },
                    "userNameAttribute": {
                        "type": "string",
                        "description": "User name attribute. Default `givenName` (string)\n"
                    },
                    "userObjectClass": {
                        "type": "string",
                        "description": "User object class. Default \u003cspan pulumi-lang-nodejs=\"`inetorgperson`\" pulumi-lang-dotnet=\"`Inetorgperson`\" pulumi-lang-go=\"`inetorgperson`\" pulumi-lang-python=\"`inetorgperson`\" pulumi-lang-yaml=\"`inetorgperson`\" pulumi-lang-java=\"`inetorgperson`\"\u003e`inetorgperson`\u003c/span\u003e (string)\n"
                    },
                    "userSearchAttribute": {
                        "type": "string",
                        "description": "User search attribute. Default `uid|sn|givenName` (string)\n"
                    },
                    "userSearchBase": {
                        "type": "string",
                        "description": "User search base DN (string)\n"
                    },
                    "userSearchFilter": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/authConfigPing:AuthConfigPing": {
            "description": "Provides a Rancher v2 Auth Config Ping resource. This can be used to configure and enable Auth Config Ping for Rancher v2 RKE clusters and retrieve their information.\n\nIn addition to the built-in local auth, only one external auth config provider can be enabled at a time.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Auth Config Ping\nconst ping = new rancher2.AuthConfigPing(\"ping\", {\n    displayNameField: \"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groupsField: \"\u003cGROUPS_FIELD\u003e\",\n    idpMetadataContent: \"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancherApiHost: \"https://\u003cRANCHER_API_HOST\u003e\",\n    spCert: \"\u003cSP_CERT\u003e\",\n    spKey: \"\u003cSP_KEY\u003e\",\n    uidField: \"\u003cUID_FIELD\u003e\",\n    userNameField: \"\u003cUSER_NAME_FIELD\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Auth Config Ping\nping = rancher2.AuthConfigPing(\"ping\",\n    display_name_field=\"\u003cDISPLAY_NAME_FIELD\u003e\",\n    groups_field=\"\u003cGROUPS_FIELD\u003e\",\n    idp_metadata_content=\"\u003cIDP_METADATA_CONTENT\u003e\",\n    rancher_api_host=\"https://\u003cRANCHER_API_HOST\u003e\",\n    sp_cert=\"\u003cSP_CERT\u003e\",\n    sp_key=\"\u003cSP_KEY\u003e\",\n    uid_field=\"\u003cUID_FIELD\u003e\",\n    user_name_field=\"\u003cUSER_NAME_FIELD\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Auth Config Ping\n    var ping = new Rancher2.AuthConfigPing(\"ping\", new()\n    {\n        DisplayNameField = \"\u003cDISPLAY_NAME_FIELD\u003e\",\n        GroupsField = \"\u003cGROUPS_FIELD\u003e\",\n        IdpMetadataContent = \"\u003cIDP_METADATA_CONTENT\u003e\",\n        RancherApiHost = \"https://\u003cRANCHER_API_HOST\u003e\",\n        SpCert = \"\u003cSP_CERT\u003e\",\n        SpKey = \"\u003cSP_KEY\u003e\",\n        UidField = \"\u003cUID_FIELD\u003e\",\n        UserNameField = \"\u003cUSER_NAME_FIELD\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Auth Config Ping\n\t\t_, err := rancher2.NewAuthConfigPing(ctx, \"ping\", \u0026rancher2.AuthConfigPingArgs{\n\t\t\tDisplayNameField:   pulumi.String(\"\u003cDISPLAY_NAME_FIELD\u003e\"),\n\t\t\tGroupsField:        pulumi.String(\"\u003cGROUPS_FIELD\u003e\"),\n\t\t\tIdpMetadataContent: pulumi.String(\"\u003cIDP_METADATA_CONTENT\u003e\"),\n\t\t\tRancherApiHost:     pulumi.String(\"https://\u003cRANCHER_API_HOST\u003e\"),\n\t\t\tSpCert:             pulumi.String(\"\u003cSP_CERT\u003e\"),\n\t\t\tSpKey:              pulumi.String(\"\u003cSP_KEY\u003e\"),\n\t\t\tUidField:           pulumi.String(\"\u003cUID_FIELD\u003e\"),\n\t\t\tUserNameField:      pulumi.String(\"\u003cUSER_NAME_FIELD\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.AuthConfigPing;\nimport com.pulumi.rancher2.AuthConfigPingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Auth Config Ping\n        var ping = new AuthConfigPing(\"ping\", AuthConfigPingArgs.builder()\n            .displayNameField(\"\u003cDISPLAY_NAME_FIELD\u003e\")\n            .groupsField(\"\u003cGROUPS_FIELD\u003e\")\n            .idpMetadataContent(\"\u003cIDP_METADATA_CONTENT\u003e\")\n            .rancherApiHost(\"https://\u003cRANCHER_API_HOST\u003e\")\n            .spCert(\"\u003cSP_CERT\u003e\")\n            .spKey(\"\u003cSP_KEY\u003e\")\n            .uidField(\"\u003cUID_FIELD\u003e\")\n            .userNameField(\"\u003cUSER_NAME_FIELD\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Auth Config Ping\n  ping:\n    type: rancher2:AuthConfigPing\n    properties:\n      displayNameField: \u003cDISPLAY_NAME_FIELD\u003e\n      groupsField: \u003cGROUPS_FIELD\u003e\n      idpMetadataContent: \u003cIDP_METADATA_CONTENT\u003e\n      rancherApiHost: https://\u003cRANCHER_API_HOST\u003e\n      spCert: \u003cSP_CERT\u003e\n      spKey: \u003cSP_KEY\u003e\n      uidField: \u003cUID_FIELD\u003e\n      userNameField: \u003cUSER_NAME_FIELD\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `ping_user://\u003cUSER_ID\u003e`  `ping_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "Ping display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "entityIdField": {
                    "type": "string",
                    "description": "Ping entity ID field (string)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "Ping group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "Ping IDP metadata content (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The name of the resource (string)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "Ping SP cert (string)\n",
                    "secret": true
                },
                "spKey": {
                    "type": "string",
                    "description": "Ping SP key (string)\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "(Computed) The type of the resource (string)\n"
                },
                "uidField": {
                    "type": "string",
                    "description": "Ping UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "Ping user name field (string)\n"
                }
            },
            "required": [
                "annotations",
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "labels",
                "name",
                "rancherApiHost",
                "spCert",
                "spKey",
                "type",
                "uidField",
                "userNameField"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                },
                "allowedPrincipalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `ping_user://\u003cUSER_ID\u003e`  `ping_group://\u003cGROUP_ID\u003e` (list)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "displayNameField": {
                    "type": "string",
                    "description": "Ping display name field (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "entityIdField": {
                    "type": "string",
                    "description": "Ping entity ID field (string)\n"
                },
                "groupsField": {
                    "type": "string",
                    "description": "Ping group field (string)\n"
                },
                "idpMetadataContent": {
                    "type": "string",
                    "description": "Ping IDP metadata content (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "rancherApiHost": {
                    "type": "string",
                    "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                },
                "spCert": {
                    "type": "string",
                    "description": "Ping SP cert (string)\n",
                    "secret": true
                },
                "spKey": {
                    "type": "string",
                    "description": "Ping SP key (string)\n",
                    "secret": true
                },
                "uidField": {
                    "type": "string",
                    "description": "Ping UID field (string)\n"
                },
                "userNameField": {
                    "type": "string",
                    "description": "Ping user name field (string)\n"
                }
            },
            "requiredInputs": [
                "displayNameField",
                "groupsField",
                "idpMetadataContent",
                "rancherApiHost",
                "spCert",
                "spKey",
                "uidField",
                "userNameField"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthConfigPing resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "Access mode for auth. \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e are supported. Default \u003cspan pulumi-lang-nodejs=\"`unrestricted`\" pulumi-lang-dotnet=\"`Unrestricted`\" pulumi-lang-go=\"`unrestricted`\" pulumi-lang-python=\"`unrestricted`\" pulumi-lang-yaml=\"`unrestricted`\" pulumi-lang-java=\"`unrestricted`\"\u003e`unrestricted`\u003c/span\u003e (string)\n"
                    },
                    "allowedPrincipalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowed principal ids for auth. Required if \u003cspan pulumi-lang-nodejs=\"`accessMode`\" pulumi-lang-dotnet=\"`AccessMode`\" pulumi-lang-go=\"`accessMode`\" pulumi-lang-python=\"`access_mode`\" pulumi-lang-yaml=\"`accessMode`\" pulumi-lang-java=\"`accessMode`\"\u003e`access_mode`\u003c/span\u003e is \u003cspan pulumi-lang-nodejs=\"`required`\" pulumi-lang-dotnet=\"`Required`\" pulumi-lang-go=\"`required`\" pulumi-lang-python=\"`required`\" pulumi-lang-yaml=\"`required`\" pulumi-lang-java=\"`required`\"\u003e`required`\u003c/span\u003e or \u003cspan pulumi-lang-nodejs=\"`restricted`\" pulumi-lang-dotnet=\"`Restricted`\" pulumi-lang-go=\"`restricted`\" pulumi-lang-python=\"`restricted`\" pulumi-lang-yaml=\"`restricted`\" pulumi-lang-java=\"`restricted`\"\u003e`restricted`\u003c/span\u003e. Ex: `ping_user://\u003cUSER_ID\u003e`  `ping_group://\u003cGROUP_ID\u003e` (list)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "displayNameField": {
                        "type": "string",
                        "description": "Ping display name field (string)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable auth config provider. Default \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "entityIdField": {
                        "type": "string",
                        "description": "Ping entity ID field (string)\n"
                    },
                    "groupsField": {
                        "type": "string",
                        "description": "Ping group field (string)\n"
                    },
                    "idpMetadataContent": {
                        "type": "string",
                        "description": "Ping IDP metadata content (string)\n",
                        "secret": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The name of the resource (string)\n"
                    },
                    "rancherApiHost": {
                        "type": "string",
                        "description": "Rancher URL. URL scheme needs to be specified, `https://\u003cRANCHER_API_HOST\u003e` (string)\n"
                    },
                    "spCert": {
                        "type": "string",
                        "description": "Ping SP cert (string)\n",
                        "secret": true
                    },
                    "spKey": {
                        "type": "string",
                        "description": "Ping SP key (string)\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "(Computed) The type of the resource (string)\n"
                    },
                    "uidField": {
                        "type": "string",
                        "description": "Ping UID field (string)\n"
                    },
                    "userNameField": {
                        "type": "string",
                        "description": "Ping user name field (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/bootstrap:Bootstrap": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2_bootstrap\nconst admin = new rancher2.Bootstrap(\"admin\", {password: \"blahblah\"});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2_bootstrap\nadmin = rancher2.Bootstrap(\"admin\", password=\"blahblah\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2_bootstrap\n    var admin = new Rancher2.Bootstrap(\"admin\", new()\n    {\n        Password = \"blahblah\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2_bootstrap\n\t\t_, err := rancher2.NewBootstrap(ctx, \"admin\", \u0026rancher2.BootstrapArgs{\n\t\t\tPassword: pulumi.String(\"blahblah\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Bootstrap;\nimport com.pulumi.rancher2.BootstrapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2_bootstrap\n        var admin = new Bootstrap(\"admin\", BootstrapArgs.builder()\n            .password(\"blahblah\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2_bootstrap\n  admin:\n    type: rancher2:Bootstrap\n    properties:\n      password: blahblah\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2_bootstrap for Rancher v2.6.0 and above\nconst admin = new rancher2.Bootstrap(\"admin\", {\n    initialPassword: \"\u003cINSTALL_PASSWORD\u003e\",\n    password: \"blahblah\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2_bootstrap for Rancher v2.6.0 and above\nadmin = rancher2.Bootstrap(\"admin\",\n    initial_password=\"\u003cINSTALL_PASSWORD\u003e\",\n    password=\"blahblah\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2_bootstrap for Rancher v2.6.0 and above\n    var admin = new Rancher2.Bootstrap(\"admin\", new()\n    {\n        InitialPassword = \"\u003cINSTALL_PASSWORD\u003e\",\n        Password = \"blahblah\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2_bootstrap for Rancher v2.6.0 and above\n\t\t_, err := rancher2.NewBootstrap(ctx, \"admin\", \u0026rancher2.BootstrapArgs{\n\t\t\tInitialPassword: pulumi.String(\"\u003cINSTALL_PASSWORD\u003e\"),\n\t\t\tPassword:        pulumi.String(\"blahblah\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Bootstrap;\nimport com.pulumi.rancher2.BootstrapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2_bootstrap for Rancher v2.6.0 and above\n        var admin = new Bootstrap(\"admin\", BootstrapArgs.builder()\n            .initialPassword(\"\u003cINSTALL_PASSWORD\u003e\")\n            .password(\"blahblah\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2_bootstrap for Rancher v2.6.0 and above\n  admin:\n    type: rancher2:Bootstrap\n    properties:\n      initialPassword: \u003cINSTALL_PASSWORD\u003e\n      password: blahblah\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2_bootstrap using bootstrap provider config\nconst admin = new rancher2.Bootstrap(\"admin\", {password: \"blahblah\"});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2_bootstrap using bootstrap provider config\nadmin = rancher2.Bootstrap(\"admin\", password=\"blahblah\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2_bootstrap using bootstrap provider config\n    var admin = new Rancher2.Bootstrap(\"admin\", new()\n    {\n        Password = \"blahblah\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2_bootstrap using bootstrap provider config\n\t\t_, err := rancher2.NewBootstrap(ctx, \"admin\", \u0026rancher2.BootstrapArgs{\n\t\t\tPassword: pulumi.String(\"blahblah\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Bootstrap;\nimport com.pulumi.rancher2.BootstrapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2_bootstrap using bootstrap provider config\n        var admin = new Bootstrap(\"admin\", BootstrapArgs.builder()\n            .password(\"blahblah\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2_bootstrap using bootstrap provider config\n  admin:\n    type: rancher2:Bootstrap\n    properties:\n      password: blahblah\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "currentPassword": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Current password for Admin user (string)\n",
                    "secret": true
                },
                "initialPassword": {
                    "type": "string",
                    "description": "Initial password for Admin user. Default: \u003cspan pulumi-lang-nodejs=\"`admin`\" pulumi-lang-dotnet=\"`Admin`\" pulumi-lang-go=\"`admin`\" pulumi-lang-python=\"`admin`\" pulumi-lang-yaml=\"`admin`\" pulumi-lang-java=\"`admin`\"\u003e`admin`\u003c/span\u003e (string)\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "Password for Admin user or random generated if empty (string)\n",
                    "secret": true
                },
                "tempToken": {
                    "type": "string",
                    "description": "(Computed) Generated API temporary token as helper. Should be empty (string)\n",
                    "secret": true
                },
                "tempTokenId": {
                    "type": "string",
                    "description": "(Computed) Generated API temporary token id as helper. Should be empty (string)\n"
                },
                "token": {
                    "type": "string",
                    "description": "(Computed) Generated API token for Admin User (string)\n",
                    "secret": true
                },
                "tokenId": {
                    "type": "string",
                    "description": "(Computed) Generated API token id for Admin User (string)\n"
                },
                "tokenTtl": {
                    "type": "integer",
                    "description": "TTL in seconds for generated admin token. Default: \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e  (int)\n"
                },
                "tokenUpdate": {
                    "type": "boolean",
                    "description": "Regenerate admin token. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "uiDefaultLanding": {
                    "type": "string",
                    "description": "Default UI landing for k8s clusters. Available options: \u003cspan pulumi-lang-nodejs=\"`ember`\" pulumi-lang-dotnet=\"`Ember`\" pulumi-lang-go=\"`ember`\" pulumi-lang-python=\"`ember`\" pulumi-lang-yaml=\"`ember`\" pulumi-lang-java=\"`ember`\"\u003e`ember`\u003c/span\u003e (cluster manager ui)  and \u003cspan pulumi-lang-nodejs=\"`vue`\" pulumi-lang-dotnet=\"`Vue`\" pulumi-lang-go=\"`vue`\" pulumi-lang-python=\"`vue`\" pulumi-lang-yaml=\"`vue`\" pulumi-lang-java=\"`vue`\"\u003e`vue`\u003c/span\u003e (cluster explorer ui). Default: \u003cspan pulumi-lang-nodejs=\"`ember`\" pulumi-lang-dotnet=\"`Ember`\" pulumi-lang-go=\"`ember`\" pulumi-lang-python=\"`ember`\" pulumi-lang-yaml=\"`ember`\" pulumi-lang-java=\"`ember`\"\u003e`ember`\u003c/span\u003e (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "(Computed) URL set as server-url (string)\n"
                },
                "user": {
                    "type": "string",
                    "description": "(Computed) Admin username (string)\n"
                }
            },
            "required": [
                "currentPassword",
                "password",
                "tempToken",
                "tempTokenId",
                "token",
                "tokenId",
                "url",
                "user"
            ],
            "inputProperties": {
                "initialPassword": {
                    "type": "string",
                    "description": "Initial password for Admin user. Default: \u003cspan pulumi-lang-nodejs=\"`admin`\" pulumi-lang-dotnet=\"`Admin`\" pulumi-lang-go=\"`admin`\" pulumi-lang-python=\"`admin`\" pulumi-lang-yaml=\"`admin`\" pulumi-lang-java=\"`admin`\"\u003e`admin`\u003c/span\u003e (string)\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "Password for Admin user or random generated if empty (string)\n",
                    "secret": true
                },
                "tokenTtl": {
                    "type": "integer",
                    "description": "TTL in seconds for generated admin token. Default: \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e  (int)\n"
                },
                "tokenUpdate": {
                    "type": "boolean",
                    "description": "Regenerate admin token. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "uiDefaultLanding": {
                    "type": "string",
                    "description": "Default UI landing for k8s clusters. Available options: \u003cspan pulumi-lang-nodejs=\"`ember`\" pulumi-lang-dotnet=\"`Ember`\" pulumi-lang-go=\"`ember`\" pulumi-lang-python=\"`ember`\" pulumi-lang-yaml=\"`ember`\" pulumi-lang-java=\"`ember`\"\u003e`ember`\u003c/span\u003e (cluster manager ui)  and \u003cspan pulumi-lang-nodejs=\"`vue`\" pulumi-lang-dotnet=\"`Vue`\" pulumi-lang-go=\"`vue`\" pulumi-lang-python=\"`vue`\" pulumi-lang-yaml=\"`vue`\" pulumi-lang-java=\"`vue`\"\u003e`vue`\u003c/span\u003e (cluster explorer ui). Default: \u003cspan pulumi-lang-nodejs=\"`ember`\" pulumi-lang-dotnet=\"`Ember`\" pulumi-lang-go=\"`ember`\" pulumi-lang-python=\"`ember`\" pulumi-lang-yaml=\"`ember`\" pulumi-lang-java=\"`ember`\"\u003e`ember`\u003c/span\u003e (string)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Bootstrap resources.\n",
                "properties": {
                    "currentPassword": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Current password for Admin user (string)\n",
                        "secret": true
                    },
                    "initialPassword": {
                        "type": "string",
                        "description": "Initial password for Admin user. Default: \u003cspan pulumi-lang-nodejs=\"`admin`\" pulumi-lang-dotnet=\"`Admin`\" pulumi-lang-go=\"`admin`\" pulumi-lang-python=\"`admin`\" pulumi-lang-yaml=\"`admin`\" pulumi-lang-java=\"`admin`\"\u003e`admin`\u003c/span\u003e (string)\n",
                        "secret": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for Admin user or random generated if empty (string)\n",
                        "secret": true
                    },
                    "tempToken": {
                        "type": "string",
                        "description": "(Computed) Generated API temporary token as helper. Should be empty (string)\n",
                        "secret": true
                    },
                    "tempTokenId": {
                        "type": "string",
                        "description": "(Computed) Generated API temporary token id as helper. Should be empty (string)\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "(Computed) Generated API token for Admin User (string)\n",
                        "secret": true
                    },
                    "tokenId": {
                        "type": "string",
                        "description": "(Computed) Generated API token id for Admin User (string)\n"
                    },
                    "tokenTtl": {
                        "type": "integer",
                        "description": "TTL in seconds for generated admin token. Default: \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e  (int)\n"
                    },
                    "tokenUpdate": {
                        "type": "boolean",
                        "description": "Regenerate admin token. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "uiDefaultLanding": {
                        "type": "string",
                        "description": "Default UI landing for k8s clusters. Available options: \u003cspan pulumi-lang-nodejs=\"`ember`\" pulumi-lang-dotnet=\"`Ember`\" pulumi-lang-go=\"`ember`\" pulumi-lang-python=\"`ember`\" pulumi-lang-yaml=\"`ember`\" pulumi-lang-java=\"`ember`\"\u003e`ember`\u003c/span\u003e (cluster manager ui)  and \u003cspan pulumi-lang-nodejs=\"`vue`\" pulumi-lang-dotnet=\"`Vue`\" pulumi-lang-go=\"`vue`\" pulumi-lang-python=\"`vue`\" pulumi-lang-yaml=\"`vue`\" pulumi-lang-java=\"`vue`\"\u003e`vue`\u003c/span\u003e (cluster explorer ui). Default: \u003cspan pulumi-lang-nodejs=\"`ember`\" pulumi-lang-dotnet=\"`Ember`\" pulumi-lang-go=\"`ember`\" pulumi-lang-python=\"`ember`\" pulumi-lang-yaml=\"`ember`\" pulumi-lang-java=\"`ember`\"\u003e`ember`\u003c/span\u003e (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "(Computed) URL set as server-url (string)\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "(Computed) Admin username (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/catalogV2:CatalogV2": {
            "description": "Provides a Rancher Catalog v2 resource. This can be used to create cluster helm catalogs for Rancher v2 environments and retrieve their information. Catalog v2 resource is available at Rancher v2.5.x and above.\n\n## Import\n\nV2 catalogs can be imported using the Rancher cluster ID and Catalog V2 name.\n\n```sh\n$ pulumi import rancher2:index/catalogV2:CatalogV2 foo \u0026lt;CLUSTER_ID\u0026gt;.\u0026lt;CATALOG_V2_NAME\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the catalog v2 (map)\n"
                },
                "caBundle": {
                    "type": "string",
                    "description": "CA certificate in base64-encoded DER format which will be used to validate the repo's certificate (string)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the catalog V2 (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If disabled the repo clone will not be updated or allowed to be installed from. Default: \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "exponentialBackoffMaxRetries": {
                    "type": "integer",
                    "description": "Maximum number of retries before returning error"
                },
                "exponentialBackoffMaxWait": {
                    "type": "integer",
                    "description": "Maximum amount of seconds to wait before retrying"
                },
                "exponentialBackoffMinWait": {
                    "type": "integer",
                    "description": "Minimum amount of seconds to wait before retrying"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "Git Repository branch containing Helm chart definitions. Default \u003cspan pulumi-lang-nodejs=\"`master`\" pulumi-lang-dotnet=\"`Master`\" pulumi-lang-go=\"`master`\" pulumi-lang-python=\"`master`\" pulumi-lang-yaml=\"`master`\" pulumi-lang-java=\"`master`\"\u003e`master`\u003c/span\u003e (string)\n"
                },
                "gitRepo": {
                    "type": "string",
                    "description": "The url of the catalog v2 repo. Conflicts with \u003cspan pulumi-lang-nodejs=\"`url`\" pulumi-lang-dotnet=\"`Url`\" pulumi-lang-go=\"`url`\" pulumi-lang-python=\"`url`\" pulumi-lang-yaml=\"`url`\" pulumi-lang-java=\"`url`\"\u003e`url`\u003c/span\u003e (string)\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Use insecure HTTPS to download the repo's index. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "insecurePlainHttp": {
                    "type": "boolean",
                    "description": "Only valid for OCI URL's. Allows insecure connections to registries without enforcing TLS checks"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the catalog v2 (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the catalog v2 (string)\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "(Computed) The k8s resource version (string)\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "K8s secret name to be used to connect to the repo (string)\n"
                },
                "secretNamespace": {
                    "type": "string",
                    "description": "K8s secret namespace (string)\n"
                },
                "serviceAccount": {
                    "type": "string",
                    "description": "K8s service account used to deploy charts instead of the end users credentials (string)\n"
                },
                "serviceAccountNamespace": {
                    "type": "string",
                    "description": "The username to access the catalog if needed (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL to an index generated by Helm. Conflicts with \u003cspan pulumi-lang-nodejs=\"`gitRepo`\" pulumi-lang-dotnet=\"`GitRepo`\" pulumi-lang-go=\"`gitRepo`\" pulumi-lang-python=\"`git_repo`\" pulumi-lang-yaml=\"`gitRepo`\" pulumi-lang-java=\"`gitRepo`\"\u003e`git_repo`\u003c/span\u003e (string)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "exponentialBackoffMaxRetries",
                "exponentialBackoffMaxWait",
                "exponentialBackoffMinWait",
                "gitBranch",
                "labels",
                "name",
                "resourceVersion"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the catalog v2 (map)\n"
                },
                "caBundle": {
                    "type": "string",
                    "description": "CA certificate in base64-encoded DER format which will be used to validate the repo's certificate (string)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the catalog V2 (string)\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "If disabled the repo clone will not be updated or allowed to be installed from. Default: \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                },
                "exponentialBackoffMaxRetries": {
                    "type": "integer",
                    "description": "Maximum number of retries before returning error"
                },
                "exponentialBackoffMaxWait": {
                    "type": "integer",
                    "description": "Maximum amount of seconds to wait before retrying"
                },
                "exponentialBackoffMinWait": {
                    "type": "integer",
                    "description": "Minimum amount of seconds to wait before retrying"
                },
                "gitBranch": {
                    "type": "string",
                    "description": "Git Repository branch containing Helm chart definitions. Default \u003cspan pulumi-lang-nodejs=\"`master`\" pulumi-lang-dotnet=\"`Master`\" pulumi-lang-go=\"`master`\" pulumi-lang-python=\"`master`\" pulumi-lang-yaml=\"`master`\" pulumi-lang-java=\"`master`\"\u003e`master`\u003c/span\u003e (string)\n"
                },
                "gitRepo": {
                    "type": "string",
                    "description": "The url of the catalog v2 repo. Conflicts with \u003cspan pulumi-lang-nodejs=\"`url`\" pulumi-lang-dotnet=\"`Url`\" pulumi-lang-go=\"`url`\" pulumi-lang-python=\"`url`\" pulumi-lang-yaml=\"`url`\" pulumi-lang-java=\"`url`\"\u003e`url`\u003c/span\u003e (string)\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Use insecure HTTPS to download the repo's index. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "insecurePlainHttp": {
                    "type": "boolean",
                    "description": "Only valid for OCI URL's. Allows insecure connections to registries without enforcing TLS checks"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the catalog v2 (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the catalog v2 (string)\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "K8s secret name to be used to connect to the repo (string)\n"
                },
                "secretNamespace": {
                    "type": "string",
                    "description": "K8s secret namespace (string)\n"
                },
                "serviceAccount": {
                    "type": "string",
                    "description": "K8s service account used to deploy charts instead of the end users credentials (string)\n"
                },
                "serviceAccountNamespace": {
                    "type": "string",
                    "description": "The username to access the catalog if needed (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL to an index generated by Helm. Conflicts with \u003cspan pulumi-lang-nodejs=\"`gitRepo`\" pulumi-lang-dotnet=\"`GitRepo`\" pulumi-lang-go=\"`gitRepo`\" pulumi-lang-python=\"`git_repo`\" pulumi-lang-yaml=\"`gitRepo`\" pulumi-lang-java=\"`gitRepo`\"\u003e`git_repo`\u003c/span\u003e (string)\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CatalogV2 resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the catalog v2 (map)\n"
                    },
                    "caBundle": {
                        "type": "string",
                        "description": "CA certificate in base64-encoded DER format which will be used to validate the repo's certificate (string)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the catalog V2 (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "If disabled the repo clone will not be updated or allowed to be installed from. Default: \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n"
                    },
                    "exponentialBackoffMaxRetries": {
                        "type": "integer",
                        "description": "Maximum number of retries before returning error"
                    },
                    "exponentialBackoffMaxWait": {
                        "type": "integer",
                        "description": "Maximum amount of seconds to wait before retrying"
                    },
                    "exponentialBackoffMinWait": {
                        "type": "integer",
                        "description": "Minimum amount of seconds to wait before retrying"
                    },
                    "gitBranch": {
                        "type": "string",
                        "description": "Git Repository branch containing Helm chart definitions. Default \u003cspan pulumi-lang-nodejs=\"`master`\" pulumi-lang-dotnet=\"`Master`\" pulumi-lang-go=\"`master`\" pulumi-lang-python=\"`master`\" pulumi-lang-yaml=\"`master`\" pulumi-lang-java=\"`master`\"\u003e`master`\u003c/span\u003e (string)\n"
                    },
                    "gitRepo": {
                        "type": "string",
                        "description": "The url of the catalog v2 repo. Conflicts with \u003cspan pulumi-lang-nodejs=\"`url`\" pulumi-lang-dotnet=\"`Url`\" pulumi-lang-go=\"`url`\" pulumi-lang-python=\"`url`\" pulumi-lang-yaml=\"`url`\" pulumi-lang-java=\"`url`\"\u003e`url`\u003c/span\u003e (string)\n"
                    },
                    "insecure": {
                        "type": "boolean",
                        "description": "Use insecure HTTPS to download the repo's index. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "insecurePlainHttp": {
                        "type": "boolean",
                        "description": "Only valid for OCI URL's. Allows insecure connections to registries without enforcing TLS checks"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the catalog v2 (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the catalog v2 (string)\n"
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "(Computed) The k8s resource version (string)\n"
                    },
                    "secretName": {
                        "type": "string",
                        "description": "K8s secret name to be used to connect to the repo (string)\n"
                    },
                    "secretNamespace": {
                        "type": "string",
                        "description": "K8s secret namespace (string)\n"
                    },
                    "serviceAccount": {
                        "type": "string",
                        "description": "K8s service account used to deploy charts instead of the end users credentials (string)\n"
                    },
                    "serviceAccountNamespace": {
                        "type": "string",
                        "description": "The username to access the catalog if needed (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL to an index generated by Helm. Conflicts with \u003cspan pulumi-lang-nodejs=\"`gitRepo`\" pulumi-lang-dotnet=\"`GitRepo`\" pulumi-lang-go=\"`gitRepo`\" pulumi-lang-python=\"`git_repo`\" pulumi-lang-yaml=\"`gitRepo`\" pulumi-lang-java=\"`gitRepo`\"\u003e`git_repo`\u003c/span\u003e (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/certificate:Certificate": {
            "description": "Provides a Rancher v2 certificate resource. This can be used to create certificates for Rancher v2 environments and retrieve their information.\n\nThere are 2 types of Rancher v2 certificates:\n- Project certificate: Available to all namespaces in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n- Namespaced certificate: Available to just \u003cspan pulumi-lang-nodejs=\"`namespaceId`\" pulumi-lang-dotnet=\"`NamespaceId`\" pulumi-lang-go=\"`namespaceId`\" pulumi-lang-python=\"`namespace_id`\" pulumi-lang-yaml=\"`namespaceId`\" pulumi-lang-java=\"`namespaceId`\"\u003e`namespace_id`\u003c/span\u003e in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for certificate object (map)\n"
                },
                "certs": {
                    "type": "string",
                    "description": "Base64 encoded public certs (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A certificate description (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Base64 encoded private key (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for certificate object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where the namespaced certificate should be created (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where the certificate should be created  (string)\n"
                }
            },
            "required": [
                "annotations",
                "certs",
                "key",
                "labels",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for certificate object (map)\n"
                },
                "certs": {
                    "type": "string",
                    "description": "Base64 encoded public certs (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A certificate description (string)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Base64 encoded private key (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for certificate object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate (string)\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where the namespaced certificate should be created (string)\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where the certificate should be created  (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "certs",
                "key",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for certificate object (map)\n"
                    },
                    "certs": {
                        "type": "string",
                        "description": "Base64 encoded public certs (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A certificate description (string)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Base64 encoded private key (string)\n",
                        "secret": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for certificate object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where the namespaced certificate should be created (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where the certificate should be created  (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/cloudCredential:CloudCredential": {
            "description": "Provides a Rancher v2 Cloud Credential resource. This can be used to create Cloud Credential for Rancher v2.2.x and retrieve their information.\n\namazonec2, azure, digitalocean, harvester, linode, openstack and vsphere credentials config are supported for Cloud Credential.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Cloud Credential\nconst foo = new rancher2.CloudCredential(\"foo\", {\n    name: \"foo\",\n    description: \"foo test\",\n    amazonec2CredentialConfig: {\n        accessKey: \"\u003cAWS_ACCESS_KEY\u003e\",\n        secretKey: \"\u003cAWS_SECRET_KEY\u003e\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Cloud Credential\nfoo = rancher2.CloudCredential(\"foo\",\n    name=\"foo\",\n    description=\"foo test\",\n    amazonec2_credential_config={\n        \"access_key\": \"\u003cAWS_ACCESS_KEY\u003e\",\n        \"secret_key\": \"\u003cAWS_SECRET_KEY\u003e\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Cloud Credential\n    var foo = new Rancher2.CloudCredential(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo test\",\n        Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs\n        {\n            AccessKey = \"\u003cAWS_ACCESS_KEY\u003e\",\n            SecretKey = \"\u003cAWS_SECRET_KEY\u003e\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Cloud Credential\n\t\t_, err := rancher2.NewCloudCredential(ctx, \"foo\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t\tAmazonec2CredentialConfig: \u0026rancher2.CloudCredentialAmazonec2CredentialConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"\u003cAWS_ACCESS_KEY\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003cAWS_SECRET_KEY\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.CloudCredential;\nimport com.pulumi.rancher2.CloudCredentialArgs;\nimport com.pulumi.rancher2.inputs.CloudCredentialAmazonec2CredentialConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Cloud Credential\n        var foo = new CloudCredential(\"foo\", CloudCredentialArgs.builder()\n            .name(\"foo\")\n            .description(\"foo test\")\n            .amazonec2CredentialConfig(CloudCredentialAmazonec2CredentialConfigArgs.builder()\n                .accessKey(\"\u003cAWS_ACCESS_KEY\u003e\")\n                .secretKey(\"\u003cAWS_SECRET_KEY\u003e\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Cloud Credential\n  foo:\n    type: rancher2:CloudCredential\n    properties:\n      name: foo\n      description: foo test\n      amazonec2CredentialConfig:\n        accessKey: \u003cAWS_ACCESS_KEY\u003e\n        secretKey: \u003cAWS_SECRET_KEY\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Get imported harvester cluster info\nconst foo_harvester = rancher2.getClusterV2({\n    name: \"foo-harvester\",\n});\n// Create a new Cloud Credential for an imported Harvester cluster\nconst foo_harvesterCloudCredential = new rancher2.CloudCredential(\"foo-harvester\", {\n    name: \"foo-harvester\",\n    harvesterCredentialConfig: {\n        clusterId: foo_harvester.then(foo_harvester =\u003e foo_harvester.clusterV1Id),\n        clusterType: \"imported\",\n        kubeconfigContent: foo_harvester.then(foo_harvester =\u003e foo_harvester.kubeConfig),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Get imported harvester cluster info\nfoo_harvester = rancher2.get_cluster_v2(name=\"foo-harvester\")\n# Create a new Cloud Credential for an imported Harvester cluster\nfoo_harvester_cloud_credential = rancher2.CloudCredential(\"foo-harvester\",\n    name=\"foo-harvester\",\n    harvester_credential_config={\n        \"cluster_id\": foo_harvester.cluster_v1_id,\n        \"cluster_type\": \"imported\",\n        \"kubeconfig_content\": foo_harvester.kube_config,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get imported harvester cluster info\n    var foo_harvester = Rancher2.GetClusterV2.Invoke(new()\n    {\n        Name = \"foo-harvester\",\n    });\n\n    // Create a new Cloud Credential for an imported Harvester cluster\n    var foo_harvesterCloudCredential = new Rancher2.CloudCredential(\"foo-harvester\", new()\n    {\n        Name = \"foo-harvester\",\n        HarvesterCredentialConfig = new Rancher2.Inputs.CloudCredentialHarvesterCredentialConfigArgs\n        {\n            ClusterId = foo_harvester.Apply(foo_harvester =\u003e foo_harvester.Apply(getClusterV2Result =\u003e getClusterV2Result.ClusterV1Id)),\n            ClusterType = \"imported\",\n            KubeconfigContent = foo_harvester.Apply(foo_harvester =\u003e foo_harvester.Apply(getClusterV2Result =\u003e getClusterV2Result.KubeConfig)),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get imported harvester cluster info\n\t\tfoo_harvester, err := rancher2.LookupClusterV2(ctx, \u0026rancher2.LookupClusterV2Args{\n\t\t\tName: \"foo-harvester\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new Cloud Credential for an imported Harvester cluster\n\t\t_, err = rancher2.NewCloudCredential(ctx, \"foo-harvester\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tName: pulumi.String(\"foo-harvester\"),\n\t\t\tHarvesterCredentialConfig: \u0026rancher2.CloudCredentialHarvesterCredentialConfigArgs{\n\t\t\t\tClusterId:         pulumi.String(foo_harvester.ClusterV1Id),\n\t\t\t\tClusterType:       pulumi.String(\"imported\"),\n\t\t\t\tKubeconfigContent: pulumi.String(foo_harvester.KubeConfig),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetClusterV2Args;\nimport com.pulumi.rancher2.CloudCredential;\nimport com.pulumi.rancher2.CloudCredentialArgs;\nimport com.pulumi.rancher2.inputs.CloudCredentialHarvesterCredentialConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get imported harvester cluster info\n        final var foo-harvester = Rancher2Functions.getClusterV2(GetClusterV2Args.builder()\n            .name(\"foo-harvester\")\n            .build());\n\n        // Create a new Cloud Credential for an imported Harvester cluster\n        var foo_harvesterCloudCredential = new CloudCredential(\"foo-harvesterCloudCredential\", CloudCredentialArgs.builder()\n            .name(\"foo-harvester\")\n            .harvesterCredentialConfig(CloudCredentialHarvesterCredentialConfigArgs.builder()\n                .clusterId(foo_harvester.clusterV1Id())\n                .clusterType(\"imported\")\n                .kubeconfigContent(foo_harvester.kubeConfig())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Cloud Credential for an imported Harvester cluster\n  foo-harvesterCloudCredential:\n    type: rancher2:CloudCredential\n    name: foo-harvester\n    properties:\n      name: foo-harvester\n      harvesterCredentialConfig:\n        clusterId: ${[\"foo-harvester\"].clusterV1Id}\n        clusterType: imported\n        kubeconfigContent: ${[\"foo-harvester\"].kubeConfig}\nvariables:\n  # Get imported harvester cluster info\n  foo-harvester:\n    fn::invoke:\n      function: rancher2:getClusterV2\n      arguments:\n        name: foo-harvester\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nCloud Credential can be imported using the Cloud Credential ID and the Driver name.\n\nbash\n\n```sh\n$ pulumi import rancher2:index/cloudCredential:CloudCredential foo \u0026lt;CLOUD_CREDENTIAL_ID\u0026gt;.\u0026lt;DRIVER\u0026gt;\n```\n\nThe following drivers are supported:\n\n* amazonec2\n\n* azure\n\n* digitalocean\n\n* googlekubernetesengine\n\n* linode\n\n* openstack\n\n* s3\n\n* vmwarevsphere\n\n",
            "properties": {
                "amazonec2CredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialAmazonec2CredentialConfig:CloudCredentialAmazonec2CredentialConfig",
                    "description": "AWS config for the Cloud Credential (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Cloud Credential object (map)\n"
                },
                "azureCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialAzureCredentialConfig:CloudCredentialAzureCredentialConfig",
                    "description": "Azure config for the Cloud Credential (list maxitems:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Cloud Credential (string)\n"
                },
                "digitaloceanCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialDigitaloceanCredentialConfig:CloudCredentialDigitaloceanCredentialConfig",
                    "description": "DigitalOcean config for the Cloud Credential (list maxitems:1)\n"
                },
                "driver": {
                    "type": "string",
                    "description": "(Computed) The driver of the Cloud Credential (string)\n"
                },
                "googleCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialGoogleCredentialConfig:CloudCredentialGoogleCredentialConfig",
                    "description": "Google config for the Cloud Credential (list maxitems:1)\n"
                },
                "harvesterCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialHarvesterCredentialConfig:CloudCredentialHarvesterCredentialConfig",
                    "description": "Harvester config for the Cloud Credential (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Cloud Credential object (map)\n"
                },
                "linodeCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialLinodeCredentialConfig:CloudCredentialLinodeCredentialConfig",
                    "description": "Linode config for the Cloud Credential (list maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloud Credential (string)\n"
                },
                "openstackCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialOpenstackCredentialConfig:CloudCredentialOpenstackCredentialConfig",
                    "description": "OpenStack config for the Cloud Credential (list maxitems:1)\n"
                },
                "s3CredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialS3CredentialConfig:CloudCredentialS3CredentialConfig",
                    "description": "S3 config for the Cloud Credential. For Rancher 2.6.0 and above (list maxitems:1)\n"
                },
                "vsphereCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialVsphereCredentialConfig:CloudCredentialVsphereCredentialConfig",
                    "description": "vSphere config for the Cloud Credential (list maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "driver",
                "labels",
                "name"
            ],
            "inputProperties": {
                "amazonec2CredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialAmazonec2CredentialConfig:CloudCredentialAmazonec2CredentialConfig",
                    "description": "AWS config for the Cloud Credential (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Cloud Credential object (map)\n"
                },
                "azureCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialAzureCredentialConfig:CloudCredentialAzureCredentialConfig",
                    "description": "Azure config for the Cloud Credential (list maxitems:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Cloud Credential (string)\n"
                },
                "digitaloceanCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialDigitaloceanCredentialConfig:CloudCredentialDigitaloceanCredentialConfig",
                    "description": "DigitalOcean config for the Cloud Credential (list maxitems:1)\n"
                },
                "googleCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialGoogleCredentialConfig:CloudCredentialGoogleCredentialConfig",
                    "description": "Google config for the Cloud Credential (list maxitems:1)\n"
                },
                "harvesterCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialHarvesterCredentialConfig:CloudCredentialHarvesterCredentialConfig",
                    "description": "Harvester config for the Cloud Credential (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Cloud Credential object (map)\n"
                },
                "linodeCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialLinodeCredentialConfig:CloudCredentialLinodeCredentialConfig",
                    "description": "Linode config for the Cloud Credential (list maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloud Credential (string)\n"
                },
                "openstackCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialOpenstackCredentialConfig:CloudCredentialOpenstackCredentialConfig",
                    "description": "OpenStack config for the Cloud Credential (list maxitems:1)\n"
                },
                "s3CredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialS3CredentialConfig:CloudCredentialS3CredentialConfig",
                    "description": "S3 config for the Cloud Credential. For Rancher 2.6.0 and above (list maxitems:1)\n"
                },
                "vsphereCredentialConfig": {
                    "$ref": "#/types/rancher2:index/CloudCredentialVsphereCredentialConfig:CloudCredentialVsphereCredentialConfig",
                    "description": "vSphere config for the Cloud Credential (list maxitems:1)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudCredential resources.\n",
                "properties": {
                    "amazonec2CredentialConfig": {
                        "$ref": "#/types/rancher2:index/CloudCredentialAmazonec2CredentialConfig:CloudCredentialAmazonec2CredentialConfig",
                        "description": "AWS config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for Cloud Credential object (map)\n"
                    },
                    "azureCredentialConfig": {
                        "$ref": "#/types/rancher2:index/CloudCredentialAzureCredentialConfig:CloudCredentialAzureCredentialConfig",
                        "description": "Azure config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Cloud Credential (string)\n"
                    },
                    "digitaloceanCredentialConfig": {
                        "$ref": "#/types/rancher2:index/CloudCredentialDigitaloceanCredentialConfig:CloudCredentialDigitaloceanCredentialConfig",
                        "description": "DigitalOcean config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "driver": {
                        "type": "string",
                        "description": "(Computed) The driver of the Cloud Credential (string)\n"
                    },
                    "googleCredentialConfig": {
                        "$ref": "#/types/rancher2:index/CloudCredentialGoogleCredentialConfig:CloudCredentialGoogleCredentialConfig",
                        "description": "Google config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "harvesterCredentialConfig": {
                        "$ref": "#/types/rancher2:index/CloudCredentialHarvesterCredentialConfig:CloudCredentialHarvesterCredentialConfig",
                        "description": "Harvester config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for Cloud Credential object (map)\n"
                    },
                    "linodeCredentialConfig": {
                        "$ref": "#/types/rancher2:index/CloudCredentialLinodeCredentialConfig:CloudCredentialLinodeCredentialConfig",
                        "description": "Linode config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cloud Credential (string)\n"
                    },
                    "openstackCredentialConfig": {
                        "$ref": "#/types/rancher2:index/CloudCredentialOpenstackCredentialConfig:CloudCredentialOpenstackCredentialConfig",
                        "description": "OpenStack config for the Cloud Credential (list maxitems:1)\n"
                    },
                    "s3CredentialConfig": {
                        "$ref": "#/types/rancher2:index/CloudCredentialS3CredentialConfig:CloudCredentialS3CredentialConfig",
                        "description": "S3 config for the Cloud Credential. For Rancher 2.6.0 and above (list maxitems:1)\n"
                    },
                    "vsphereCredentialConfig": {
                        "$ref": "#/types/rancher2:index/CloudCredentialVsphereCredentialConfig:CloudCredentialVsphereCredentialConfig",
                        "description": "vSphere config for the Cloud Credential (list maxitems:1)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/cluster:Cluster": {
            "description": "Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.\n\n## Example Usage\n\n**Note optional/computed arguments** If any `optional/computed` argument of this resource is defined by the user, removing it from tf file will NOT reset its value. To reset it, let its definition at tf file as empty/false object. Ex: \u003cspan pulumi-lang-nodejs=\"`cloudProvider \" pulumi-lang-dotnet=\"`CloudProvider \" pulumi-lang-go=\"`cloudProvider \" pulumi-lang-python=\"`cloud_provider \" pulumi-lang-yaml=\"`cloudProvider \" pulumi-lang-java=\"`cloudProvider \"\u003e`cloud_provider \u003c/span\u003e{}`, `name = \"\"`\n\n### Creating Rancher v2 imported cluster\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 imported Cluster\nconst foo_imported = new rancher2.Cluster(\"foo-imported\", {\n    name: \"foo-imported\",\n    description: \"Foo rancher2 imported cluster\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 imported Cluster\nfoo_imported = rancher2.Cluster(\"foo-imported\",\n    name=\"foo-imported\",\n    description=\"Foo rancher2 imported cluster\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 imported Cluster\n    var foo_imported = new Rancher2.Cluster(\"foo-imported\", new()\n    {\n        Name = \"foo-imported\",\n        Description = \"Foo rancher2 imported cluster\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 imported Cluster\n\t\t_, err := rancher2.NewCluster(ctx, \"foo-imported\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo-imported\"),\n\t\t\tDescription: pulumi.String(\"Foo rancher2 imported cluster\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 imported Cluster\n        var foo_imported = new Cluster(\"foo-imported\", ClusterArgs.builder()\n            .name(\"foo-imported\")\n            .description(\"Foo rancher2 imported cluster\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 imported Cluster\n  foo-imported:\n    type: rancher2:Cluster\n    properties:\n      name: foo-imported\n      description: Foo rancher2 imported cluster\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating Rancher v2 imported cluster with custom configuration. For Rancher v2.11.x and above.\n\nThis configuration can be used to indicate that system images (such as the rancher-agent) should be pulled from an unauthenticated private registry. This can be used for all imported cluster types, including imported hosted clusters (AKS, EKS, GKE).\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 imported Cluster with custom configuration \nconst foo_imported = new rancher2.Cluster(\"foo-imported\", {\n    name: \"foo-imported\",\n    importedConfig: {\n        privateRegistryUrl: \"test.io\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 imported Cluster with custom configuration \nfoo_imported = rancher2.Cluster(\"foo-imported\",\n    name=\"foo-imported\",\n    imported_config={\n        \"private_registry_url\": \"test.io\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 imported Cluster with custom configuration \n    var foo_imported = new Rancher2.Cluster(\"foo-imported\", new()\n    {\n        Name = \"foo-imported\",\n        ImportedConfig = new Rancher2.Inputs.ClusterImportedConfigArgs\n        {\n            PrivateRegistryUrl = \"test.io\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 imported Cluster with custom configuration\n\t\t_, err := rancher2.NewCluster(ctx, \"foo-imported\", \u0026rancher2.ClusterArgs{\n\t\t\tName: pulumi.String(\"foo-imported\"),\n\t\t\tImportedConfig: \u0026rancher2.ClusterImportedConfigArgs{\n\t\t\t\tPrivateRegistryUrl: pulumi.String(\"test.io\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterImportedConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 imported Cluster with custom configuration \n        var foo_imported = new Cluster(\"foo-imported\", ClusterArgs.builder()\n            .name(\"foo-imported\")\n            .importedConfig(ClusterImportedConfigArgs.builder()\n                .privateRegistryUrl(\"test.io\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 imported Cluster with custom configuration\n  foo-imported:\n    type: rancher2:Cluster\n    properties:\n      name: foo-imported\n      importedConfig:\n        privateRegistryUrl: test.io\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating Rancher v2 RKE cluster enabling\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 RKE Cluster\nconst foo_custom = new rancher2.Cluster(\"foo-custom\", {\n    name: \"foo-custom\",\n    description: \"Foo rancher2 custom cluster\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 RKE Cluster\nfoo_custom = rancher2.Cluster(\"foo-custom\",\n    name=\"foo-custom\",\n    description=\"Foo rancher2 custom cluster\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 RKE Cluster\n    var foo_custom = new Rancher2.Cluster(\"foo-custom\", new()\n    {\n        Name = \"foo-custom\",\n        Description = \"Foo rancher2 custom cluster\",\n        RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs\n        {\n            Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs\n            {\n                Plugin = \"canal\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 RKE Cluster\n\t\t_, err := rancher2.NewCluster(ctx, \"foo-custom\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo-custom\"),\n\t\t\tDescription: pulumi.String(\"Foo rancher2 custom cluster\"),\n\t\t\tRkeConfig: \u0026rancher2.ClusterRkeConfigArgs{\n\t\t\t\tNetwork: \u0026rancher2.ClusterRkeConfigNetworkArgs{\n\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 RKE Cluster\n        var foo_custom = new Cluster(\"foo-custom\", ClusterArgs.builder()\n            .name(\"foo-custom\")\n            .description(\"Foo rancher2 custom cluster\")\n            .rkeConfig(ClusterRkeConfigArgs.builder()\n                .network(ClusterRkeConfigNetworkArgs.builder()\n                    .plugin(\"canal\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 RKE Cluster\n  foo-custom:\n    type: rancher2:Cluster\n    properties:\n      name: foo-custom\n      description: Foo rancher2 custom cluster\n      rkeConfig:\n        network:\n          plugin: canal\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating Rancher v2 RKE cluster enabling/customizing istio\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 RKE Cluster\nconst foo_custom = new rancher2.Cluster(\"foo-custom\", {\n    name: \"foo-custom\",\n    description: \"Foo rancher2 custom cluster\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n    },\n});\n// Create a new rancher2 Cluster Sync for foo-custom cluster\nconst foo_customClusterSync = new rancher2.ClusterSync(\"foo-custom\", {clusterId: foo_custom.id});\n// Create a new rancher2 Namespace\nconst foo_istio = new rancher2.Namespace(\"foo-istio\", {\n    name: \"istio-system\",\n    projectId: foo_customClusterSync.systemProjectId,\n    description: \"istio namespace\",\n});\n// Create a new rancher2 App deploying istio\nconst istio = new rancher2.index.App(\"istio\", {\n    catalogName: \"system-library\",\n    name: \"cluster-istio\",\n    description: \"Terraform app acceptance test\",\n    projectId: foo_istio.projectId,\n    templateName: \"rancher-istio\",\n    templateVersion: \"0.1.1\",\n    targetNamespace: foo_istio.id,\n    answers: {\n        \"certmanager.enabled\": false,\n        enableCRDs: true,\n        \"galley.enabled\": true,\n        \"gateways.enabled\": false,\n        \"gateways.istio-ingressgateway.resources.limits.cpu\": \"2000m\",\n        \"gateways.istio-ingressgateway.resources.limits.memory\": \"1024Mi\",\n        \"gateways.istio-ingressgateway.resources.requests.cpu\": \"100m\",\n        \"gateways.istio-ingressgateway.resources.requests.memory\": \"128Mi\",\n        \"gateways.istio-ingressgateway.type\": \"NodePort\",\n        \"global.rancher.clusterId\": foo_customClusterSync.clusterId,\n        \"istio_cni.enabled\": \"false\",\n        \"istiocoredns.enabled\": \"false\",\n        \"kiali.enabled\": \"true\",\n        \"mixer.enabled\": \"true\",\n        \"mixer.policy.enabled\": \"true\",\n        \"mixer.policy.resources.limits.cpu\": \"4800m\",\n        \"mixer.policy.resources.limits.memory\": \"4096Mi\",\n        \"mixer.policy.resources.requests.cpu\": \"1000m\",\n        \"mixer.policy.resources.requests.memory\": \"1024Mi\",\n        \"mixer.telemetry.resources.limits.cpu\": \"4800m\",\n        \"mixer.telemetry.resources.limits.memory\": \"4096Mi\",\n        \"mixer.telemetry.resources.requests.cpu\": \"1000m\",\n        \"mixer.telemetry.resources.requests.memory\": \"1024Mi\",\n        \"mtls.enabled\": false,\n        \"nodeagent.enabled\": false,\n        \"pilot.enabled\": true,\n        \"pilot.resources.limits.cpu\": \"1000m\",\n        \"pilot.resources.limits.memory\": \"4096Mi\",\n        \"pilot.resources.requests.cpu\": \"500m\",\n        \"pilot.resources.requests.memory\": \"2048Mi\",\n        \"pilot.traceSampling\": \"1\",\n        \"security.enabled\": true,\n        \"sidecarInjectorWebhook.enabled\": true,\n        \"tracing.enabled\": true,\n        \"tracing.jaeger.resources.limits.cpu\": \"500m\",\n        \"tracing.jaeger.resources.limits.memory\": \"1024Mi\",\n        \"tracing.jaeger.resources.requests.cpu\": \"100m\",\n        \"tracing.jaeger.resources.requests.memory\": \"100Mi\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 RKE Cluster\nfoo_custom = rancher2.Cluster(\"foo-custom\",\n    name=\"foo-custom\",\n    description=\"Foo rancher2 custom cluster\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n    })\n# Create a new rancher2 Cluster Sync for foo-custom cluster\nfoo_custom_cluster_sync = rancher2.ClusterSync(\"foo-custom\", cluster_id=foo_custom.id)\n# Create a new rancher2 Namespace\nfoo_istio = rancher2.Namespace(\"foo-istio\",\n    name=\"istio-system\",\n    project_id=foo_custom_cluster_sync.system_project_id,\n    description=\"istio namespace\")\n# Create a new rancher2 App deploying istio\nistio = rancher2.index.App(\"istio\",\n    catalog_name=system-library,\n    name=cluster-istio,\n    description=Terraform app acceptance test,\n    project_id=foo_istio.project_id,\n    template_name=rancher-istio,\n    template_version=0.1.1,\n    target_namespace=foo_istio.id,\n    answers={\n        certmanager.enabled: False,\n        enableCRDs: True,\n        galley.enabled: True,\n        gateways.enabled: False,\n        gateways.istio-ingressgateway.resources.limits.cpu: 2000m,\n        gateways.istio-ingressgateway.resources.limits.memory: 1024Mi,\n        gateways.istio-ingressgateway.resources.requests.cpu: 100m,\n        gateways.istio-ingressgateway.resources.requests.memory: 128Mi,\n        gateways.istio-ingressgateway.type: NodePort,\n        global.rancher.clusterId: foo_custom_cluster_sync.cluster_id,\n        istio_cni.enabled: false,\n        istiocoredns.enabled: false,\n        kiali.enabled: true,\n        mixer.enabled: true,\n        mixer.policy.enabled: true,\n        mixer.policy.resources.limits.cpu: 4800m,\n        mixer.policy.resources.limits.memory: 4096Mi,\n        mixer.policy.resources.requests.cpu: 1000m,\n        mixer.policy.resources.requests.memory: 1024Mi,\n        mixer.telemetry.resources.limits.cpu: 4800m,\n        mixer.telemetry.resources.limits.memory: 4096Mi,\n        mixer.telemetry.resources.requests.cpu: 1000m,\n        mixer.telemetry.resources.requests.memory: 1024Mi,\n        mtls.enabled: False,\n        nodeagent.enabled: False,\n        pilot.enabled: True,\n        pilot.resources.limits.cpu: 1000m,\n        pilot.resources.limits.memory: 4096Mi,\n        pilot.resources.requests.cpu: 500m,\n        pilot.resources.requests.memory: 2048Mi,\n        pilot.traceSampling: 1,\n        security.enabled: True,\n        sidecarInjectorWebhook.enabled: True,\n        tracing.enabled: True,\n        tracing.jaeger.resources.limits.cpu: 500m,\n        tracing.jaeger.resources.limits.memory: 1024Mi,\n        tracing.jaeger.resources.requests.cpu: 100m,\n        tracing.jaeger.resources.requests.memory: 100Mi,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 RKE Cluster\n    var foo_custom = new Rancher2.Cluster(\"foo-custom\", new()\n    {\n        Name = \"foo-custom\",\n        Description = \"Foo rancher2 custom cluster\",\n        RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs\n        {\n            Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs\n            {\n                Plugin = \"canal\",\n            },\n        },\n    });\n\n    // Create a new rancher2 Cluster Sync for foo-custom cluster\n    var foo_customClusterSync = new Rancher2.ClusterSync(\"foo-custom\", new()\n    {\n        ClusterId = foo_custom.Id,\n    });\n\n    // Create a new rancher2 Namespace\n    var foo_istio = new Rancher2.Namespace(\"foo-istio\", new()\n    {\n        Name = \"istio-system\",\n        ProjectId = foo_customClusterSync.SystemProjectId,\n        Description = \"istio namespace\",\n    });\n\n    // Create a new rancher2 App deploying istio\n    var istio = new Rancher2.Index.App(\"istio\", new()\n    {\n        CatalogName = \"system-library\",\n        Name = \"cluster-istio\",\n        Description = \"Terraform app acceptance test\",\n        ProjectId = foo_istio.ProjectId,\n        TemplateName = \"rancher-istio\",\n        TemplateVersion = \"0.1.1\",\n        TargetNamespace = foo_istio.Id,\n        Answers = \n        {\n            { \"certmanager.enabled\", false },\n            { \"enableCRDs\", true },\n            { \"galley.enabled\", true },\n            { \"gateways.enabled\", false },\n            { \"gateways.istio-ingressgateway.resources.limits.cpu\", \"2000m\" },\n            { \"gateways.istio-ingressgateway.resources.limits.memory\", \"1024Mi\" },\n            { \"gateways.istio-ingressgateway.resources.requests.cpu\", \"100m\" },\n            { \"gateways.istio-ingressgateway.resources.requests.memory\", \"128Mi\" },\n            { \"gateways.istio-ingressgateway.type\", \"NodePort\" },\n            { \"global.rancher.clusterId\", foo_customClusterSync.ClusterId },\n            { \"istio_cni.enabled\", \"false\" },\n            { \"istiocoredns.enabled\", \"false\" },\n            { \"kiali.enabled\", \"true\" },\n            { \"mixer.enabled\", \"true\" },\n            { \"mixer.policy.enabled\", \"true\" },\n            { \"mixer.policy.resources.limits.cpu\", \"4800m\" },\n            { \"mixer.policy.resources.limits.memory\", \"4096Mi\" },\n            { \"mixer.policy.resources.requests.cpu\", \"1000m\" },\n            { \"mixer.policy.resources.requests.memory\", \"1024Mi\" },\n            { \"mixer.telemetry.resources.limits.cpu\", \"4800m\" },\n            { \"mixer.telemetry.resources.limits.memory\", \"4096Mi\" },\n            { \"mixer.telemetry.resources.requests.cpu\", \"1000m\" },\n            { \"mixer.telemetry.resources.requests.memory\", \"1024Mi\" },\n            { \"mtls.enabled\", false },\n            { \"nodeagent.enabled\", false },\n            { \"pilot.enabled\", true },\n            { \"pilot.resources.limits.cpu\", \"1000m\" },\n            { \"pilot.resources.limits.memory\", \"4096Mi\" },\n            { \"pilot.resources.requests.cpu\", \"500m\" },\n            { \"pilot.resources.requests.memory\", \"2048Mi\" },\n            { \"pilot.traceSampling\", \"1\" },\n            { \"security.enabled\", true },\n            { \"sidecarInjectorWebhook.enabled\", true },\n            { \"tracing.enabled\", true },\n            { \"tracing.jaeger.resources.limits.cpu\", \"500m\" },\n            { \"tracing.jaeger.resources.limits.memory\", \"1024Mi\" },\n            { \"tracing.jaeger.resources.requests.cpu\", \"100m\" },\n            { \"tracing.jaeger.resources.requests.memory\", \"100Mi\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 RKE Cluster\n\t\tfoo_custom, err := rancher2.NewCluster(ctx, \"foo-custom\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo-custom\"),\n\t\t\tDescription: pulumi.String(\"Foo rancher2 custom cluster\"),\n\t\t\tRkeConfig: \u0026rancher2.ClusterRkeConfigArgs{\n\t\t\t\tNetwork: \u0026rancher2.ClusterRkeConfigNetworkArgs{\n\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Cluster Sync for foo-custom cluster\n\t\tfoo_customClusterSync, err := rancher2.NewClusterSync(ctx, \"foo-custom\", \u0026rancher2.ClusterSyncArgs{\n\t\t\tClusterId: foo_custom.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Namespace\n\t\tfoo_istio, err := rancher2.NewNamespace(ctx, \"foo-istio\", \u0026rancher2.NamespaceArgs{\n\t\t\tName:        pulumi.String(\"istio-system\"),\n\t\t\tProjectId:   foo_customClusterSync.SystemProjectId,\n\t\t\tDescription: pulumi.String(\"istio namespace\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 App deploying istio\n\t\t_, err = rancher2.NewApp(ctx, \"istio\", \u0026rancher2.AppArgs{\n\t\t\tCatalogName:     \"system-library\",\n\t\t\tName:            \"cluster-istio\",\n\t\t\tDescription:     \"Terraform app acceptance test\",\n\t\t\tProjectId:       foo_istio.ProjectId,\n\t\t\tTemplateName:    \"rancher-istio\",\n\t\t\tTemplateVersion: \"0.1.1\",\n\t\t\tTargetNamespace: foo_istio.ID(),\n\t\t\tAnswers: map[string]interface{}{\n\t\t\t\t\"certmanager.enabled\": false,\n\t\t\t\t\"enableCRDs\":          true,\n\t\t\t\t\"galley.enabled\":      true,\n\t\t\t\t\"gateways.enabled\":    false,\n\t\t\t\t\"gateways.istio-ingressgateway.resources.limits.cpu\":      \"2000m\",\n\t\t\t\t\"gateways.istio-ingressgateway.resources.limits.memory\":   \"1024Mi\",\n\t\t\t\t\"gateways.istio-ingressgateway.resources.requests.cpu\":    \"100m\",\n\t\t\t\t\"gateways.istio-ingressgateway.resources.requests.memory\": \"128Mi\",\n\t\t\t\t\"gateways.istio-ingressgateway.type\":                      \"NodePort\",\n\t\t\t\t\"global.rancher.clusterId\":                                foo_customClusterSync.ClusterId,\n\t\t\t\t\"istio_cni.enabled\":                                       \"false\",\n\t\t\t\t\"istiocoredns.enabled\":                                    \"false\",\n\t\t\t\t\"kiali.enabled\":                                           \"true\",\n\t\t\t\t\"mixer.enabled\":                                           \"true\",\n\t\t\t\t\"mixer.policy.enabled\":                                    \"true\",\n\t\t\t\t\"mixer.policy.resources.limits.cpu\":                       \"4800m\",\n\t\t\t\t\"mixer.policy.resources.limits.memory\":                    \"4096Mi\",\n\t\t\t\t\"mixer.policy.resources.requests.cpu\":                     \"1000m\",\n\t\t\t\t\"mixer.policy.resources.requests.memory\":                  \"1024Mi\",\n\t\t\t\t\"mixer.telemetry.resources.limits.cpu\":                    \"4800m\",\n\t\t\t\t\"mixer.telemetry.resources.limits.memory\":                 \"4096Mi\",\n\t\t\t\t\"mixer.telemetry.resources.requests.cpu\":                  \"1000m\",\n\t\t\t\t\"mixer.telemetry.resources.requests.memory\":               \"1024Mi\",\n\t\t\t\t\"mtls.enabled\":                                            false,\n\t\t\t\t\"nodeagent.enabled\":                                       false,\n\t\t\t\t\"pilot.enabled\":                                           true,\n\t\t\t\t\"pilot.resources.limits.cpu\":                              \"1000m\",\n\t\t\t\t\"pilot.resources.limits.memory\":                           \"4096Mi\",\n\t\t\t\t\"pilot.resources.requests.cpu\":                            \"500m\",\n\t\t\t\t\"pilot.resources.requests.memory\":                         \"2048Mi\",\n\t\t\t\t\"pilot.traceSampling\":                                     \"1\",\n\t\t\t\t\"security.enabled\":                                        true,\n\t\t\t\t\"sidecarInjectorWebhook.enabled\":                          true,\n\t\t\t\t\"tracing.enabled\":                                         true,\n\t\t\t\t\"tracing.jaeger.resources.limits.cpu\":                     \"500m\",\n\t\t\t\t\"tracing.jaeger.resources.limits.memory\":                  \"1024Mi\",\n\t\t\t\t\"tracing.jaeger.resources.requests.cpu\":                   \"100m\",\n\t\t\t\t\"tracing.jaeger.resources.requests.memory\":                \"100Mi\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;\nimport com.pulumi.rancher2.ClusterSync;\nimport com.pulumi.rancher2.ClusterSyncArgs;\nimport com.pulumi.rancher2.Namespace;\nimport com.pulumi.rancher2.NamespaceArgs;\nimport com.pulumi.rancher2.App;\nimport com.pulumi.rancher2.AppArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 RKE Cluster\n        var foo_custom = new Cluster(\"foo-custom\", ClusterArgs.builder()\n            .name(\"foo-custom\")\n            .description(\"Foo rancher2 custom cluster\")\n            .rkeConfig(ClusterRkeConfigArgs.builder()\n                .network(ClusterRkeConfigNetworkArgs.builder()\n                    .plugin(\"canal\")\n                    .build())\n                .build())\n            .build());\n\n        // Create a new rancher2 Cluster Sync for foo-custom cluster\n        var foo_customClusterSync = new ClusterSync(\"foo-customClusterSync\", ClusterSyncArgs.builder()\n            .clusterId(foo_custom.id())\n            .build());\n\n        // Create a new rancher2 Namespace\n        var foo_istio = new Namespace(\"foo-istio\", NamespaceArgs.builder()\n            .name(\"istio-system\")\n            .projectId(foo_customClusterSync.systemProjectId())\n            .description(\"istio namespace\")\n            .build());\n\n        // Create a new rancher2 App deploying istio\n        var istio = new App(\"istio\", AppArgs.builder()\n            .catalogName(\"system-library\")\n            .name(\"cluster-istio\")\n            .description(\"Terraform app acceptance test\")\n            .projectId(foo_istio.projectId())\n            .templateName(\"rancher-istio\")\n            .templateVersion(\"0.1.1\")\n            .targetNamespace(foo_istio.id())\n            .answers(Map.ofEntries(\n                Map.entry(\"certmanager.enabled\", false),\n                Map.entry(\"enableCRDs\", true),\n                Map.entry(\"galley.enabled\", true),\n                Map.entry(\"gateways.enabled\", false),\n                Map.entry(\"gateways.istio-ingressgateway.resources.limits.cpu\", \"2000m\"),\n                Map.entry(\"gateways.istio-ingressgateway.resources.limits.memory\", \"1024Mi\"),\n                Map.entry(\"gateways.istio-ingressgateway.resources.requests.cpu\", \"100m\"),\n                Map.entry(\"gateways.istio-ingressgateway.resources.requests.memory\", \"128Mi\"),\n                Map.entry(\"gateways.istio-ingressgateway.type\", \"NodePort\"),\n                Map.entry(\"global.rancher.clusterId\", foo_customClusterSync.clusterId()),\n                Map.entry(\"istio_cni.enabled\", \"false\"),\n                Map.entry(\"istiocoredns.enabled\", \"false\"),\n                Map.entry(\"kiali.enabled\", \"true\"),\n                Map.entry(\"mixer.enabled\", \"true\"),\n                Map.entry(\"mixer.policy.enabled\", \"true\"),\n                Map.entry(\"mixer.policy.resources.limits.cpu\", \"4800m\"),\n                Map.entry(\"mixer.policy.resources.limits.memory\", \"4096Mi\"),\n                Map.entry(\"mixer.policy.resources.requests.cpu\", \"1000m\"),\n                Map.entry(\"mixer.policy.resources.requests.memory\", \"1024Mi\"),\n                Map.entry(\"mixer.telemetry.resources.limits.cpu\", \"4800m\"),\n                Map.entry(\"mixer.telemetry.resources.limits.memory\", \"4096Mi\"),\n                Map.entry(\"mixer.telemetry.resources.requests.cpu\", \"1000m\"),\n                Map.entry(\"mixer.telemetry.resources.requests.memory\", \"1024Mi\"),\n                Map.entry(\"mtls.enabled\", false),\n                Map.entry(\"nodeagent.enabled\", false),\n                Map.entry(\"pilot.enabled\", true),\n                Map.entry(\"pilot.resources.limits.cpu\", \"1000m\"),\n                Map.entry(\"pilot.resources.limits.memory\", \"4096Mi\"),\n                Map.entry(\"pilot.resources.requests.cpu\", \"500m\"),\n                Map.entry(\"pilot.resources.requests.memory\", \"2048Mi\"),\n                Map.entry(\"pilot.traceSampling\", \"1\"),\n                Map.entry(\"security.enabled\", true),\n                Map.entry(\"sidecarInjectorWebhook.enabled\", true),\n                Map.entry(\"tracing.enabled\", true),\n                Map.entry(\"tracing.jaeger.resources.limits.cpu\", \"500m\"),\n                Map.entry(\"tracing.jaeger.resources.limits.memory\", \"1024Mi\"),\n                Map.entry(\"tracing.jaeger.resources.requests.cpu\", \"100m\"),\n                Map.entry(\"tracing.jaeger.resources.requests.memory\", \"100Mi\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 RKE Cluster\n  foo-custom:\n    type: rancher2:Cluster\n    properties:\n      name: foo-custom\n      description: Foo rancher2 custom cluster\n      rkeConfig:\n        network:\n          plugin: canal\n  # Create a new rancher2 Cluster Sync for foo-custom cluster\n  foo-customClusterSync:\n    type: rancher2:ClusterSync\n    name: foo-custom\n    properties:\n      clusterId: ${[\"foo-custom\"].id}\n  # Create a new rancher2 Namespace\n  foo-istio:\n    type: rancher2:Namespace\n    properties:\n      name: istio-system\n      projectId: ${[\"foo-customClusterSync\"].systemProjectId}\n      description: istio namespace\n  # Create a new rancher2 App deploying istio\n  istio:\n    type: rancher2:App\n    properties:\n      catalogName: system-library\n      name: cluster-istio\n      description: Terraform app acceptance test\n      projectId: ${[\"foo-istio\"].projectId}\n      templateName: rancher-istio\n      templateVersion: 0.1.1\n      targetNamespace: ${[\"foo-istio\"].id}\n      answers:\n        certmanager.enabled: false\n        enableCRDs: true\n        galley.enabled: true\n        gateways.enabled: false\n        gateways.istio-ingressgateway.resources.limits.cpu: 2000m\n        gateways.istio-ingressgateway.resources.limits.memory: 1024Mi\n        gateways.istio-ingressgateway.resources.requests.cpu: 100m\n        gateways.istio-ingressgateway.resources.requests.memory: 128Mi\n        gateways.istio-ingressgateway.type: NodePort\n        global.rancher.clusterId: ${[\"foo-customClusterSync\"].clusterId}\n        istio_cni.enabled: 'false'\n        istiocoredns.enabled: 'false'\n        kiali.enabled: 'true'\n        mixer.enabled: 'true'\n        mixer.policy.enabled: 'true'\n        mixer.policy.resources.limits.cpu: 4800m\n        mixer.policy.resources.limits.memory: 4096Mi\n        mixer.policy.resources.requests.cpu: 1000m\n        mixer.policy.resources.requests.memory: 1024Mi\n        mixer.telemetry.resources.limits.cpu: 4800m\n        mixer.telemetry.resources.limits.memory: 4096Mi\n        mixer.telemetry.resources.requests.cpu: 1000m\n        mixer.telemetry.resources.requests.memory: 1024Mi\n        mtls.enabled: false\n        nodeagent.enabled: false\n        pilot.enabled: true\n        pilot.resources.limits.cpu: 1000m\n        pilot.resources.limits.memory: 4096Mi\n        pilot.resources.requests.cpu: 500m\n        pilot.resources.requests.memory: 2048Mi\n        pilot.traceSampling: '1'\n        security.enabled: true\n        sidecarInjectorWebhook.enabled: true\n        tracing.enabled: true\n        tracing.jaeger.resources.limits.cpu: 500m\n        tracing.jaeger.resources.limits.memory: 1024Mi\n        tracing.jaeger.resources.requests.cpu: 100m\n        tracing.jaeger.resources.requests.memory: 100Mi\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating Rancher v2 RKE cluster assigning a node pool (overlapped planes)\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 RKE Cluster\nconst foo_custom = new rancher2.Cluster(\"foo-custom\", {\n    name: \"foo-custom\",\n    description: \"Foo rancher2 custom cluster\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n    },\n});\n// Create a new rancher2 Node Template\nconst foo = new rancher2.NodeTemplate(\"foo\", {\n    name: \"foo\",\n    description: \"foo test\",\n    amazonec2Config: {\n        accessKey: \"\u003cAWS_ACCESS_KEY\u003e\",\n        secretKey: \"\u003cAWS_SECRET_KEY\u003e\",\n        ami: \"\u003cAMI_ID\u003e\",\n        region: \"\u003cREGION\u003e\",\n        securityGroups: [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        subnetId: \"\u003cSUBNET_ID\u003e\",\n        vpcId: \"\u003cVPC_ID\u003e\",\n        zone: \"\u003cZONE\u003e\",\n    },\n});\n// Create a new rancher2 Node Pool\nconst fooNodePool = new rancher2.NodePool(\"foo\", {\n    clusterId: foo_custom.id,\n    name: \"foo\",\n    hostnamePrefix: \"foo-cluster-0\",\n    nodeTemplateId: foo.id,\n    quantity: 3,\n    controlPlane: true,\n    etcd: true,\n    worker: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 RKE Cluster\nfoo_custom = rancher2.Cluster(\"foo-custom\",\n    name=\"foo-custom\",\n    description=\"Foo rancher2 custom cluster\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n    })\n# Create a new rancher2 Node Template\nfoo = rancher2.NodeTemplate(\"foo\",\n    name=\"foo\",\n    description=\"foo test\",\n    amazonec2_config={\n        \"access_key\": \"\u003cAWS_ACCESS_KEY\u003e\",\n        \"secret_key\": \"\u003cAWS_SECRET_KEY\u003e\",\n        \"ami\": \"\u003cAMI_ID\u003e\",\n        \"region\": \"\u003cREGION\u003e\",\n        \"security_groups\": [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        \"subnet_id\": \"\u003cSUBNET_ID\u003e\",\n        \"vpc_id\": \"\u003cVPC_ID\u003e\",\n        \"zone\": \"\u003cZONE\u003e\",\n    })\n# Create a new rancher2 Node Pool\nfoo_node_pool = rancher2.NodePool(\"foo\",\n    cluster_id=foo_custom.id,\n    name=\"foo\",\n    hostname_prefix=\"foo-cluster-0\",\n    node_template_id=foo.id,\n    quantity=3,\n    control_plane=True,\n    etcd=True,\n    worker=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 RKE Cluster\n    var foo_custom = new Rancher2.Cluster(\"foo-custom\", new()\n    {\n        Name = \"foo-custom\",\n        Description = \"Foo rancher2 custom cluster\",\n        RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs\n        {\n            Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs\n            {\n                Plugin = \"canal\",\n            },\n        },\n    });\n\n    // Create a new rancher2 Node Template\n    var foo = new Rancher2.NodeTemplate(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo test\",\n        Amazonec2Config = new Rancher2.Inputs.NodeTemplateAmazonec2ConfigArgs\n        {\n            AccessKey = \"\u003cAWS_ACCESS_KEY\u003e\",\n            SecretKey = \"\u003cAWS_SECRET_KEY\u003e\",\n            Ami = \"\u003cAMI_ID\u003e\",\n            Region = \"\u003cREGION\u003e\",\n            SecurityGroups = new[]\n            {\n                \"\u003cAWS_SECURITY_GROUP\u003e\",\n            },\n            SubnetId = \"\u003cSUBNET_ID\u003e\",\n            VpcId = \"\u003cVPC_ID\u003e\",\n            Zone = \"\u003cZONE\u003e\",\n        },\n    });\n\n    // Create a new rancher2 Node Pool\n    var fooNodePool = new Rancher2.NodePool(\"foo\", new()\n    {\n        ClusterId = foo_custom.Id,\n        Name = \"foo\",\n        HostnamePrefix = \"foo-cluster-0\",\n        NodeTemplateId = foo.Id,\n        Quantity = 3,\n        ControlPlane = true,\n        Etcd = true,\n        Worker = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 RKE Cluster\n\t\tfoo_custom, err := rancher2.NewCluster(ctx, \"foo-custom\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo-custom\"),\n\t\t\tDescription: pulumi.String(\"Foo rancher2 custom cluster\"),\n\t\t\tRkeConfig: \u0026rancher2.ClusterRkeConfigArgs{\n\t\t\t\tNetwork: \u0026rancher2.ClusterRkeConfigNetworkArgs{\n\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Node Template\n\t\tfoo, err := rancher2.NewNodeTemplate(ctx, \"foo\", \u0026rancher2.NodeTemplateArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t\tAmazonec2Config: \u0026rancher2.NodeTemplateAmazonec2ConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"\u003cAWS_ACCESS_KEY\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003cAWS_SECRET_KEY\u003e\"),\n\t\t\t\tAmi:       pulumi.String(\"\u003cAMI_ID\u003e\"),\n\t\t\t\tRegion:    pulumi.String(\"\u003cREGION\u003e\"),\n\t\t\t\tSecurityGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"\u003cAWS_SECURITY_GROUP\u003e\"),\n\t\t\t\t},\n\t\t\t\tSubnetId: pulumi.String(\"\u003cSUBNET_ID\u003e\"),\n\t\t\t\tVpcId:    pulumi.String(\"\u003cVPC_ID\u003e\"),\n\t\t\t\tZone:     pulumi.String(\"\u003cZONE\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Node Pool\n\t\t_, err = rancher2.NewNodePool(ctx, \"foo\", \u0026rancher2.NodePoolArgs{\n\t\t\tClusterId:      foo_custom.ID(),\n\t\t\tName:           pulumi.String(\"foo\"),\n\t\t\tHostnamePrefix: pulumi.String(\"foo-cluster-0\"),\n\t\t\tNodeTemplateId: foo.ID(),\n\t\t\tQuantity:       pulumi.Int(3),\n\t\t\tControlPlane:   pulumi.Bool(true),\n\t\t\tEtcd:           pulumi.Bool(true),\n\t\t\tWorker:         pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;\nimport com.pulumi.rancher2.NodeTemplate;\nimport com.pulumi.rancher2.NodeTemplateArgs;\nimport com.pulumi.rancher2.inputs.NodeTemplateAmazonec2ConfigArgs;\nimport com.pulumi.rancher2.NodePool;\nimport com.pulumi.rancher2.NodePoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 RKE Cluster\n        var foo_custom = new Cluster(\"foo-custom\", ClusterArgs.builder()\n            .name(\"foo-custom\")\n            .description(\"Foo rancher2 custom cluster\")\n            .rkeConfig(ClusterRkeConfigArgs.builder()\n                .network(ClusterRkeConfigNetworkArgs.builder()\n                    .plugin(\"canal\")\n                    .build())\n                .build())\n            .build());\n\n        // Create a new rancher2 Node Template\n        var foo = new NodeTemplate(\"foo\", NodeTemplateArgs.builder()\n            .name(\"foo\")\n            .description(\"foo test\")\n            .amazonec2Config(NodeTemplateAmazonec2ConfigArgs.builder()\n                .accessKey(\"\u003cAWS_ACCESS_KEY\u003e\")\n                .secretKey(\"\u003cAWS_SECRET_KEY\u003e\")\n                .ami(\"\u003cAMI_ID\u003e\")\n                .region(\"\u003cREGION\u003e\")\n                .securityGroups(\"\u003cAWS_SECURITY_GROUP\u003e\")\n                .subnetId(\"\u003cSUBNET_ID\u003e\")\n                .vpcId(\"\u003cVPC_ID\u003e\")\n                .zone(\"\u003cZONE\u003e\")\n                .build())\n            .build());\n\n        // Create a new rancher2 Node Pool\n        var fooNodePool = new NodePool(\"fooNodePool\", NodePoolArgs.builder()\n            .clusterId(foo_custom.id())\n            .name(\"foo\")\n            .hostnamePrefix(\"foo-cluster-0\")\n            .nodeTemplateId(foo.id())\n            .quantity(3)\n            .controlPlane(true)\n            .etcd(true)\n            .worker(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 RKE Cluster\n  foo-custom:\n    type: rancher2:Cluster\n    properties:\n      name: foo-custom\n      description: Foo rancher2 custom cluster\n      rkeConfig:\n        network:\n          plugin: canal\n  # Create a new rancher2 Node Template\n  foo:\n    type: rancher2:NodeTemplate\n    properties:\n      name: foo\n      description: foo test\n      amazonec2Config:\n        accessKey: \u003cAWS_ACCESS_KEY\u003e\n        secretKey: \u003cAWS_SECRET_KEY\u003e\n        ami: \u003cAMI_ID\u003e\n        region: \u003cREGION\u003e\n        securityGroups:\n          - \u003cAWS_SECURITY_GROUP\u003e\n        subnetId: \u003cSUBNET_ID\u003e\n        vpcId: \u003cVPC_ID\u003e\n        zone: \u003cZONE\u003e\n  # Create a new rancher2 Node Pool\n  fooNodePool:\n    type: rancher2:NodePool\n    name: foo\n    properties:\n      clusterId: ${[\"foo-custom\"].id}\n      name: foo\n      hostnamePrefix: foo-cluster-0\n      nodeTemplateId: ${foo.id}\n      quantity: 3\n      controlPlane: true\n      etcd: true\n      worker: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating Rancher v2 RKE cluster from template. For Rancher v2.3.x and above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 cluster template\nconst foo = new rancher2.ClusterTemplate(\"foo\", {\n    name: \"foo\",\n    members: [{\n        accessType: \"owner\",\n        userPrincipalId: \"local://user-XXXXX\",\n    }],\n    templateRevisions: [{\n        name: \"V1\",\n        clusterConfig: {\n            rkeConfig: {\n                network: {\n                    plugin: \"canal\",\n                },\n                services: {\n                    etcd: {\n                        creation: \"6h\",\n                        retention: \"24h\",\n                    },\n                },\n            },\n        },\n        \"default\": true,\n    }],\n    description: \"Test cluster template v2\",\n});\n// Create a new rancher2 RKE Cluster from template\nconst fooCluster = new rancher2.Cluster(\"foo\", {\n    name: \"foo\",\n    clusterTemplateId: foo.id,\n    clusterTemplateRevisionId: foo.templateRevisions.apply(templateRevisions =\u003e templateRevisions[0].id),\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 cluster template\nfoo = rancher2.ClusterTemplate(\"foo\",\n    name=\"foo\",\n    members=[{\n        \"access_type\": \"owner\",\n        \"user_principal_id\": \"local://user-XXXXX\",\n    }],\n    template_revisions=[{\n        \"name\": \"V1\",\n        \"cluster_config\": {\n            \"rke_config\": {\n                \"network\": {\n                    \"plugin\": \"canal\",\n                },\n                \"services\": {\n                    \"etcd\": {\n                        \"creation\": \"6h\",\n                        \"retention\": \"24h\",\n                    },\n                },\n            },\n        },\n        \"default\": True,\n    }],\n    description=\"Test cluster template v2\")\n# Create a new rancher2 RKE Cluster from template\nfoo_cluster = rancher2.Cluster(\"foo\",\n    name=\"foo\",\n    cluster_template_id=foo.id,\n    cluster_template_revision_id=foo.template_revisions[0].id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 cluster template\n    var foo = new Rancher2.ClusterTemplate(\"foo\", new()\n    {\n        Name = \"foo\",\n        Members = new[]\n        {\n            new Rancher2.Inputs.ClusterTemplateMemberArgs\n            {\n                AccessType = \"owner\",\n                UserPrincipalId = \"local://user-XXXXX\",\n            },\n        },\n        TemplateRevisions = new[]\n        {\n            new Rancher2.Inputs.ClusterTemplateTemplateRevisionArgs\n            {\n                Name = \"V1\",\n                ClusterConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigArgs\n                {\n                    RkeConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs\n                    {\n                        Network = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs\n                        {\n                            Plugin = \"canal\",\n                        },\n                        Services = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs\n                        {\n                            Etcd = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs\n                            {\n                                Creation = \"6h\",\n                                Retention = \"24h\",\n                            },\n                        },\n                    },\n                },\n                Default = true,\n            },\n        },\n        Description = \"Test cluster template v2\",\n    });\n\n    // Create a new rancher2 RKE Cluster from template\n    var fooCluster = new Rancher2.Cluster(\"foo\", new()\n    {\n        Name = \"foo\",\n        ClusterTemplateId = foo.Id,\n        ClusterTemplateRevisionId = foo.TemplateRevisions.Apply(templateRevisions =\u003e templateRevisions[0].Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 cluster template\n\t\tfoo, err := rancher2.NewClusterTemplate(ctx, \"foo\", \u0026rancher2.ClusterTemplateArgs{\n\t\t\tName: pulumi.String(\"foo\"),\n\t\t\tMembers: rancher2.ClusterTemplateMemberArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateMemberArgs{\n\t\t\t\t\tAccessType:      pulumi.String(\"owner\"),\n\t\t\t\t\tUserPrincipalId: pulumi.String(\"local://user-XXXXX\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateTemplateRevisionArgs{\n\t\t\t\t\tName: pulumi.String(\"V1\"),\n\t\t\t\t\tClusterConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{\n\t\t\t\t\t\tRkeConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{\n\t\t\t\t\t\t\tNetwork: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{\n\t\t\t\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tServices: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{\n\t\t\t\t\t\t\t\tEtcd: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{\n\t\t\t\t\t\t\t\t\tCreation:  pulumi.String(\"6h\"),\n\t\t\t\t\t\t\t\t\tRetention: pulumi.String(\"24h\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDefault: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Test cluster template v2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 RKE Cluster from template\n\t\t_, err = rancher2.NewCluster(ctx, \"foo\", \u0026rancher2.ClusterArgs{\n\t\t\tName:              pulumi.String(\"foo\"),\n\t\t\tClusterTemplateId: foo.ID(),\n\t\t\tClusterTemplateRevisionId: pulumi.String(foo.TemplateRevisions.ApplyT(func(templateRevisions []rancher2.ClusterTemplateTemplateRevision) (*string, error) {\n\t\t\t\treturn \u0026templateRevisions[0].Id, nil\n\t\t\t}).(pulumi.StringPtrOutput)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.ClusterTemplate;\nimport com.pulumi.rancher2.ClusterTemplateArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateMemberArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 cluster template\n        var foo = new ClusterTemplate(\"foo\", ClusterTemplateArgs.builder()\n            .name(\"foo\")\n            .members(ClusterTemplateMemberArgs.builder()\n                .accessType(\"owner\")\n                .userPrincipalId(\"local://user-XXXXX\")\n                .build())\n            .templateRevisions(ClusterTemplateTemplateRevisionArgs.builder()\n                .name(\"V1\")\n                .clusterConfig(ClusterTemplateTemplateRevisionClusterConfigArgs.builder()\n                    .rkeConfig(ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs.builder()\n                        .network(ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs.builder()\n                            .plugin(\"canal\")\n                            .build())\n                        .services(ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs.builder()\n                            .etcd(ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs.builder()\n                                .creation(\"6h\")\n                                .retention(\"24h\")\n                                .build())\n                            .build())\n                        .build())\n                    .build())\n                .default_(true)\n                .build())\n            .description(\"Test cluster template v2\")\n            .build());\n\n        // Create a new rancher2 RKE Cluster from template\n        var fooCluster = new Cluster(\"fooCluster\", ClusterArgs.builder()\n            .name(\"foo\")\n            .clusterTemplateId(foo.id())\n            .clusterTemplateRevisionId(foo.templateRevisions().applyValue(_templateRevisions -\u003e _templateRevisions[0].id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 cluster template\n  foo:\n    type: rancher2:ClusterTemplate\n    properties:\n      name: foo\n      members:\n        - accessType: owner\n          userPrincipalId: local://user-XXXXX\n      templateRevisions:\n        - name: V1\n          clusterConfig:\n            rkeConfig:\n              network:\n                plugin: canal\n              services:\n                etcd:\n                  creation: 6h\n                  retention: 24h\n          default: true\n      description: Test cluster template v2\n  # Create a new rancher2 RKE Cluster from template\n  fooCluster:\n    type: rancher2:Cluster\n    name: foo\n    properties:\n      name: foo\n      clusterTemplateId: ${foo.id}\n      clusterTemplateRevisionId: ${foo.templateRevisions[0].id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x and above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = new rancher2.Cluster(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform custom cluster\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n        services: {\n            etcd: {\n                creation: \"6h\",\n                retention: \"24h\",\n            },\n            kubeApi: {\n                auditLog: {\n                    enabled: true,\n                    configuration: {\n                        maxAge: 5,\n                        maxBackup: 5,\n                        maxSize: 100,\n                        path: \"-\",\n                        format: \"json\",\n                        policy: `apiVersion: audit.k8s.io/v1\nkind: Policy\nmetadata:\n  creationTimestamp: null\nomitStages:\n- RequestReceived\nrules:\n- level: RequestResponse\n  resources:\n  - resources:\n    - pods\n`,\n                    },\n                },\n            },\n        },\n        upgradeStrategy: {\n            drain: true,\n            maxUnavailableWorker: \"20%\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.Cluster(\"foo\",\n    name=\"foo\",\n    description=\"Terraform custom cluster\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n        \"services\": {\n            \"etcd\": {\n                \"creation\": \"6h\",\n                \"retention\": \"24h\",\n            },\n            \"kube_api\": {\n                \"audit_log\": {\n                    \"enabled\": True,\n                    \"configuration\": {\n                        \"max_age\": 5,\n                        \"max_backup\": 5,\n                        \"max_size\": 100,\n                        \"path\": \"-\",\n                        \"format\": \"json\",\n                        \"policy\": \"\"\"apiVersion: audit.k8s.io/v1\nkind: Policy\nmetadata:\n  creationTimestamp: null\nomitStages:\n- RequestReceived\nrules:\n- level: RequestResponse\n  resources:\n  - resources:\n    - pods\n\"\"\",\n                    },\n                },\n            },\n        },\n        \"upgrade_strategy\": {\n            \"drain\": True,\n            \"max_unavailable_worker\": \"20%\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Rancher2.Cluster(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform custom cluster\",\n        RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs\n        {\n            Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs\n            {\n                Plugin = \"canal\",\n            },\n            Services = new Rancher2.Inputs.ClusterRkeConfigServicesArgs\n            {\n                Etcd = new Rancher2.Inputs.ClusterRkeConfigServicesEtcdArgs\n                {\n                    Creation = \"6h\",\n                    Retention = \"24h\",\n                },\n                KubeApi = new Rancher2.Inputs.ClusterRkeConfigServicesKubeApiArgs\n                {\n                    AuditLog = new Rancher2.Inputs.ClusterRkeConfigServicesKubeApiAuditLogArgs\n                    {\n                        Enabled = true,\n                        Configuration = new Rancher2.Inputs.ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs\n                        {\n                            MaxAge = 5,\n                            MaxBackup = 5,\n                            MaxSize = 100,\n                            Path = \"-\",\n                            Format = \"json\",\n                            Policy = @\"apiVersion: audit.k8s.io/v1\nkind: Policy\nmetadata:\n  creationTimestamp: null\nomitStages:\n- RequestReceived\nrules:\n- level: RequestResponse\n  resources:\n  - resources:\n    - pods\n\",\n                        },\n                    },\n                },\n            },\n            UpgradeStrategy = new Rancher2.Inputs.ClusterRkeConfigUpgradeStrategyArgs\n            {\n                Drain = true,\n                MaxUnavailableWorker = \"20%\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewCluster(ctx, \"foo\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform custom cluster\"),\n\t\t\tRkeConfig: \u0026rancher2.ClusterRkeConfigArgs{\n\t\t\t\tNetwork: \u0026rancher2.ClusterRkeConfigNetworkArgs{\n\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t},\n\t\t\t\tServices: \u0026rancher2.ClusterRkeConfigServicesArgs{\n\t\t\t\t\tEtcd: \u0026rancher2.ClusterRkeConfigServicesEtcdArgs{\n\t\t\t\t\t\tCreation:  pulumi.String(\"6h\"),\n\t\t\t\t\t\tRetention: pulumi.String(\"24h\"),\n\t\t\t\t\t},\n\t\t\t\t\tKubeApi: \u0026rancher2.ClusterRkeConfigServicesKubeApiArgs{\n\t\t\t\t\t\tAuditLog: \u0026rancher2.ClusterRkeConfigServicesKubeApiAuditLogArgs{\n\t\t\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\t\t\tConfiguration: \u0026rancher2.ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs{\n\t\t\t\t\t\t\t\tMaxAge:    pulumi.Int(5),\n\t\t\t\t\t\t\t\tMaxBackup: pulumi.Int(5),\n\t\t\t\t\t\t\t\tMaxSize:   pulumi.Int(100),\n\t\t\t\t\t\t\t\tPath:      pulumi.String(\"-\"),\n\t\t\t\t\t\t\t\tFormat:    pulumi.String(\"json\"),\n\t\t\t\t\t\t\t\tPolicy: pulumi.String(`apiVersion: audit.k8s.io/v1\nkind: Policy\nmetadata:\n  creationTimestamp: null\nomitStages:\n- RequestReceived\nrules:\n- level: RequestResponse\n  resources:\n  - resources:\n    - pods\n`),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tUpgradeStrategy: \u0026rancher2.ClusterRkeConfigUpgradeStrategyArgs{\n\t\t\t\t\tDrain:                pulumi.Bool(true),\n\t\t\t\t\tMaxUnavailableWorker: pulumi.String(\"20%\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigServicesArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigServicesEtcdArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeApiArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeApiAuditLogArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigUpgradeStrategyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Cluster(\"foo\", ClusterArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform custom cluster\")\n            .rkeConfig(ClusterRkeConfigArgs.builder()\n                .network(ClusterRkeConfigNetworkArgs.builder()\n                    .plugin(\"canal\")\n                    .build())\n                .services(ClusterRkeConfigServicesArgs.builder()\n                    .etcd(ClusterRkeConfigServicesEtcdArgs.builder()\n                        .creation(\"6h\")\n                        .retention(\"24h\")\n                        .build())\n                    .kubeApi(ClusterRkeConfigServicesKubeApiArgs.builder()\n                        .auditLog(ClusterRkeConfigServicesKubeApiAuditLogArgs.builder()\n                            .enabled(true)\n                            .configuration(ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs.builder()\n                                .maxAge(5)\n                                .maxBackup(5)\n                                .maxSize(100)\n                                .path(\"-\")\n                                .format(\"json\")\n                                .policy(\"\"\"\napiVersion: audit.k8s.io/v1\nkind: Policy\nmetadata:\n  creationTimestamp: null\nomitStages:\n- RequestReceived\nrules:\n- level: RequestResponse\n  resources:\n  - resources:\n    - pods\n                                \"\"\")\n                                .build())\n                            .build())\n                        .build())\n                    .build())\n                .upgradeStrategy(ClusterRkeConfigUpgradeStrategyArgs.builder()\n                    .drain(true)\n                    .maxUnavailableWorker(\"20%\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: rancher2:Cluster\n    properties:\n      name: foo\n      description: Terraform custom cluster\n      rkeConfig:\n        network:\n          plugin: canal\n        services:\n          etcd:\n            creation: 6h\n            retention: 24h\n          kubeApi:\n            auditLog:\n              enabled: true\n              configuration:\n                maxAge: 5\n                maxBackup: 5\n                maxSize: 100\n                path: '-'\n                format: json\n                policy: |\n                  apiVersion: audit.k8s.io/v1\n                  kind: Policy\n                  metadata:\n                    creationTimestamp: null\n                  omitStages:\n                  - RequestReceived\n                  rules:\n                  - level: RequestResponse\n                    resources:\n                    - resources:\n                      - pods\n        upgradeStrategy:\n          drain: true\n          maxUnavailableWorker: 20%\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating Rancher v2 RKE cluster with cluster agent customization. For Rancher v2.7.5 and above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = new rancher2.Cluster(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform cluster with agent customization\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n    },\n    clusterAgentDeploymentCustomizations: [{\n        appendTolerations: [{\n            effect: \"NoSchedule\",\n            key: \"tolerate/control-plane\",\n            value: \"true\",\n        }],\n        overrideAffinity: `{\n  \\\\\"nodeAffinity\\\\\": {\n    \\\\\"requiredDuringSchedulingIgnoredDuringExecution\\\\\": {\n      \\\\\"nodeSelectorTerms\\\\\": [{\n        \\\\\"matchExpressions\\\\\": [{\n          \\\\\"key\\\\\": \\\\\"not.this/nodepool\\\\\",\n          \\\\\"operator\\\\\": \\\\\"In\\\\\",\n          \\\\\"values\\\\\": [\n            \\\\\"true\\\\\"\n          ]\n        }]\n      }]\n    }\n  }\n}\n`,\n        overrideResourceRequirements: [{\n            cpuLimit: \"800\",\n            cpuRequest: \"500\",\n            memoryLimit: \"800\",\n            memoryRequest: \"500\",\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.Cluster(\"foo\",\n    name=\"foo\",\n    description=\"Terraform cluster with agent customization\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n    },\n    cluster_agent_deployment_customizations=[{\n        \"append_tolerations\": [{\n            \"effect\": \"NoSchedule\",\n            \"key\": \"tolerate/control-plane\",\n            \"value\": \"true\",\n        }],\n        \"override_affinity\": \"\"\"{\n  \\\"nodeAffinity\\\": {\n    \\\"requiredDuringSchedulingIgnoredDuringExecution\\\": {\n      \\\"nodeSelectorTerms\\\": [{\n        \\\"matchExpressions\\\": [{\n          \\\"key\\\": \\\"not.this/nodepool\\\",\n          \\\"operator\\\": \\\"In\\\",\n          \\\"values\\\": [\n            \\\"true\\\"\n          ]\n        }]\n      }]\n    }\n  }\n}\n\"\"\",\n        \"override_resource_requirements\": [{\n            \"cpu_limit\": \"800\",\n            \"cpu_request\": \"500\",\n            \"memory_limit\": \"800\",\n            \"memory_request\": \"500\",\n        }],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Rancher2.Cluster(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform cluster with agent customization\",\n        RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs\n        {\n            Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs\n            {\n                Plugin = \"canal\",\n            },\n        },\n        ClusterAgentDeploymentCustomizations = new[]\n        {\n            new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationArgs\n            {\n                AppendTolerations = new[]\n                {\n                    new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs\n                    {\n                        Effect = \"NoSchedule\",\n                        Key = \"tolerate/control-plane\",\n                        Value = \"true\",\n                    },\n                },\n                OverrideAffinity = @\"{\n  \\\"\"nodeAffinity\\\"\": {\n    \\\"\"requiredDuringSchedulingIgnoredDuringExecution\\\"\": {\n      \\\"\"nodeSelectorTerms\\\"\": [{\n        \\\"\"matchExpressions\\\"\": [{\n          \\\"\"key\\\"\": \\\"\"not.this/nodepool\\\"\",\n          \\\"\"operator\\\"\": \\\"\"In\\\"\",\n          \\\"\"values\\\"\": [\n            \\\"\"true\\\"\"\n          ]\n        }]\n      }]\n    }\n  }\n}\n\",\n                OverrideResourceRequirements = new[]\n                {\n                    new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs\n                    {\n                        CpuLimit = \"800\",\n                        CpuRequest = \"500\",\n                        MemoryLimit = \"800\",\n                        MemoryRequest = \"500\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewCluster(ctx, \"foo\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform cluster with agent customization\"),\n\t\t\tRkeConfig: \u0026rancher2.ClusterRkeConfigArgs{\n\t\t\t\tNetwork: \u0026rancher2.ClusterRkeConfigNetworkArgs{\n\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tClusterAgentDeploymentCustomizations: rancher2.ClusterClusterAgentDeploymentCustomizationArray{\n\t\t\t\t\u0026rancher2.ClusterClusterAgentDeploymentCustomizationArgs{\n\t\t\t\t\tAppendTolerations: rancher2.ClusterClusterAgentDeploymentCustomizationAppendTolerationArray{\n\t\t\t\t\t\t\u0026rancher2.ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs{\n\t\t\t\t\t\t\tEffect: pulumi.String(\"NoSchedule\"),\n\t\t\t\t\t\t\tKey:    pulumi.String(\"tolerate/control-plane\"),\n\t\t\t\t\t\t\tValue:  pulumi.String(\"true\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tOverrideAffinity: pulumi.String(`{\n  \\\"nodeAffinity\\\": {\n    \\\"requiredDuringSchedulingIgnoredDuringExecution\\\": {\n      \\\"nodeSelectorTerms\\\": [{\n        \\\"matchExpressions\\\": [{\n          \\\"key\\\": \\\"not.this/nodepool\\\",\n          \\\"operator\\\": \\\"In\\\",\n          \\\"values\\\": [\n            \\\"true\\\"\n          ]\n        }]\n      }]\n    }\n  }\n}\n`),\n\t\t\t\t\tOverrideResourceRequirements: rancher2.ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArray{\n\t\t\t\t\t\t\u0026rancher2.ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs{\n\t\t\t\t\t\t\tCpuLimit:      pulumi.String(\"800\"),\n\t\t\t\t\t\t\tCpuRequest:    pulumi.String(\"500\"),\n\t\t\t\t\t\t\tMemoryLimit:   pulumi.String(\"800\"),\n\t\t\t\t\t\t\tMemoryRequest: pulumi.String(\"500\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;\nimport com.pulumi.rancher2.inputs.ClusterClusterAgentDeploymentCustomizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Cluster(\"foo\", ClusterArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform cluster with agent customization\")\n            .rkeConfig(ClusterRkeConfigArgs.builder()\n                .network(ClusterRkeConfigNetworkArgs.builder()\n                    .plugin(\"canal\")\n                    .build())\n                .build())\n            .clusterAgentDeploymentCustomizations(ClusterClusterAgentDeploymentCustomizationArgs.builder()\n                .appendTolerations(ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs.builder()\n                    .effect(\"NoSchedule\")\n                    .key(\"tolerate/control-plane\")\n                    .value(\"true\")\n                    .build())\n                .overrideAffinity(\"\"\"\n{\n  \\\"nodeAffinity\\\": {\n    \\\"requiredDuringSchedulingIgnoredDuringExecution\\\": {\n      \\\"nodeSelectorTerms\\\": [{\n        \\\"matchExpressions\\\": [{\n          \\\"key\\\": \\\"not.this/nodepool\\\",\n          \\\"operator\\\": \\\"In\\\",\n          \\\"values\\\": [\n            \\\"true\\\"\n          ]\n        }]\n      }]\n    }\n  }\n}\n                \"\"\")\n                .overrideResourceRequirements(ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs.builder()\n                    .cpuLimit(\"800\")\n                    .cpuRequest(\"500\")\n                    .memoryLimit(\"800\")\n                    .memoryRequest(\"500\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: rancher2:Cluster\n    properties:\n      name: foo\n      description: Terraform cluster with agent customization\n      rkeConfig:\n        network:\n          plugin: canal\n      clusterAgentDeploymentCustomizations:\n        - appendTolerations:\n            - effect: NoSchedule\n              key: tolerate/control-plane\n              value: 'true'\n          overrideAffinity: |\n            {\n              \\\"nodeAffinity\\\": {\n                \\\"requiredDuringSchedulingIgnoredDuringExecution\\\": {\n                  \\\"nodeSelectorTerms\\\": [{\n                    \\\"matchExpressions\\\": [{\n                      \\\"key\\\": \\\"not.this/nodepool\\\",\n                      \\\"operator\\\": \\\"In\\\",\n                      \\\"values\\\": [\n                        \\\"true\\\"\n                      ]\n                    }]\n                  }]\n                }\n              }\n            }\n          overrideResourceRequirements:\n            - cpuLimit: '800'\n              cpuRequest: '500'\n              memoryLimit: '800'\n              memoryRequest: '500'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating Rancher v2 RKE cluster with cluster agent scheduling customization. For Custom and Imported clusters provisioned by Rancher v2.11.0 and above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = new rancher2.Cluster(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform cluster with agent customization\",\n    rkeConfig: {},\n    clusterAgentDeploymentCustomizations: [{\n        schedulingCustomizations: [{\n            priorityClasses: [{\n                preemptionPolicy: \"PreemptLowerPriority\",\n                value: 1000000000,\n            }],\n            podDisruptionBudgets: [{\n                minAvailable: \"1\",\n            }],\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.Cluster(\"foo\",\n    name=\"foo\",\n    description=\"Terraform cluster with agent customization\",\n    rke_config={},\n    cluster_agent_deployment_customizations=[{\n        \"scheduling_customizations\": [{\n            \"priority_classes\": [{\n                \"preemption_policy\": \"PreemptLowerPriority\",\n                \"value\": 1000000000,\n            }],\n            \"pod_disruption_budgets\": [{\n                \"min_available\": \"1\",\n            }],\n        }],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Rancher2.Cluster(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform cluster with agent customization\",\n        RkeConfig = null,\n        ClusterAgentDeploymentCustomizations = new[]\n        {\n            new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationArgs\n            {\n                SchedulingCustomizations = new[]\n                {\n                    new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationArgs\n                    {\n                        PriorityClasses = new[]\n                        {\n                            new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClassArgs\n                            {\n                                PreemptionPolicy = \"PreemptLowerPriority\",\n                                Value = 1000000000,\n                            },\n                        },\n                        PodDisruptionBudgets = new[]\n                        {\n                            new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudgetArgs\n                            {\n                                MinAvailable = \"1\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.NewCluster(ctx, \"foo\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform cluster with agent customization\"),\n\t\t\tRkeConfig:   \u0026rancher2.ClusterRkeConfigArgs{},\n\t\t\tClusterAgentDeploymentCustomizations: rancher2.ClusterClusterAgentDeploymentCustomizationArray{\n\t\t\t\t\u0026rancher2.ClusterClusterAgentDeploymentCustomizationArgs{\n\t\t\t\t\tSchedulingCustomizations: rancher2.ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationArray{\n\t\t\t\t\t\t\u0026rancher2.ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationArgs{\n\t\t\t\t\t\t\tPriorityClasses: rancher2.ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClassArray{\n\t\t\t\t\t\t\t\t\u0026rancher2.ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClassArgs{\n\t\t\t\t\t\t\t\t\tPreemptionPolicy: pulumi.String(\"PreemptLowerPriority\"),\n\t\t\t\t\t\t\t\t\tValue:            pulumi.Int(1000000000),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPodDisruptionBudgets: rancher2.ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudgetArray{\n\t\t\t\t\t\t\t\t\u0026rancher2.ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudgetArgs{\n\t\t\t\t\t\t\t\t\tMinAvailable: pulumi.String(\"1\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterClusterAgentDeploymentCustomizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new Cluster(\"foo\", ClusterArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform cluster with agent customization\")\n            .rkeConfig(ClusterRkeConfigArgs.builder()\n                .build())\n            .clusterAgentDeploymentCustomizations(ClusterClusterAgentDeploymentCustomizationArgs.builder()\n                .schedulingCustomizations(ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationArgs.builder()\n                    .priorityClasses(ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPriorityClassArgs.builder()\n                        .preemptionPolicy(\"PreemptLowerPriority\")\n                        .value(1000000000)\n                        .build())\n                    .podDisruptionBudgets(ClusterClusterAgentDeploymentCustomizationSchedulingCustomizationPodDisruptionBudgetArgs.builder()\n                        .minAvailable(\"1\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: rancher2:Cluster\n    properties:\n      name: foo\n      description: Terraform cluster with agent customization\n      rkeConfig: {}\n      clusterAgentDeploymentCustomizations:\n        - schedulingCustomizations:\n            - priorityClasses:\n                - preemptionPolicy: PreemptLowerPriority\n                  value: 1e+09\n              podDisruptionBudgets:\n                - minAvailable: '1'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating Rancher v2 RKE cluster with Pod Security Admission Configuration Template (PSACT). For Rancher v2.7.2 and above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Custom PSACT (if you wish to use your own)\nconst foo = new rancher2.PodSecurityAdmissionConfigurationTemplate(\"foo\", {\n    name: \"custom-psact\",\n    description: \"This is my custom Pod Security Admission Configuration Template\",\n    defaults: {\n        audit: \"restricted\",\n        auditVersion: \"latest\",\n        enforce: \"restricted\",\n        enforceVersion: \"latest\",\n        warn: \"restricted\",\n        warnVersion: \"latest\",\n    },\n    exemptions: {\n        usernames: [\"testuser\"],\n        runtimeClasses: [\"testclass\"],\n        namespaces: [\n            \"ingress-nginx\",\n            \"kube-system\",\n        ],\n    },\n});\nconst fooCluster = new rancher2.Cluster(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform cluster with PSACT\",\n    defaultPodSecurityAdmissionConfigurationTemplateName: \"\u003cname\u003e\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Custom PSACT (if you wish to use your own)\nfoo = rancher2.PodSecurityAdmissionConfigurationTemplate(\"foo\",\n    name=\"custom-psact\",\n    description=\"This is my custom Pod Security Admission Configuration Template\",\n    defaults={\n        \"audit\": \"restricted\",\n        \"audit_version\": \"latest\",\n        \"enforce\": \"restricted\",\n        \"enforce_version\": \"latest\",\n        \"warn\": \"restricted\",\n        \"warn_version\": \"latest\",\n    },\n    exemptions={\n        \"usernames\": [\"testuser\"],\n        \"runtime_classes\": [\"testclass\"],\n        \"namespaces\": [\n            \"ingress-nginx\",\n            \"kube-system\",\n        ],\n    })\nfoo_cluster = rancher2.Cluster(\"foo\",\n    name=\"foo\",\n    description=\"Terraform cluster with PSACT\",\n    default_pod_security_admission_configuration_template_name=\"\u003cname\u003e\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Custom PSACT (if you wish to use your own)\n    var foo = new Rancher2.PodSecurityAdmissionConfigurationTemplate(\"foo\", new()\n    {\n        Name = \"custom-psact\",\n        Description = \"This is my custom Pod Security Admission Configuration Template\",\n        Defaults = new Rancher2.Inputs.PodSecurityAdmissionConfigurationTemplateDefaultsArgs\n        {\n            Audit = \"restricted\",\n            AuditVersion = \"latest\",\n            Enforce = \"restricted\",\n            EnforceVersion = \"latest\",\n            Warn = \"restricted\",\n            WarnVersion = \"latest\",\n        },\n        Exemptions = new Rancher2.Inputs.PodSecurityAdmissionConfigurationTemplateExemptionsArgs\n        {\n            Usernames = new[]\n            {\n                \"testuser\",\n            },\n            RuntimeClasses = new[]\n            {\n                \"testclass\",\n            },\n            Namespaces = new[]\n            {\n                \"ingress-nginx\",\n                \"kube-system\",\n            },\n        },\n    });\n\n    var fooCluster = new Rancher2.Cluster(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform cluster with PSACT\",\n        DefaultPodSecurityAdmissionConfigurationTemplateName = \"\u003cname\u003e\",\n        RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs\n        {\n            Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs\n            {\n                Plugin = \"canal\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Custom PSACT (if you wish to use your own)\n\t\t_, err := rancher2.NewPodSecurityAdmissionConfigurationTemplate(ctx, \"foo\", \u0026rancher2.PodSecurityAdmissionConfigurationTemplateArgs{\n\t\t\tName:        pulumi.String(\"custom-psact\"),\n\t\t\tDescription: pulumi.String(\"This is my custom Pod Security Admission Configuration Template\"),\n\t\t\tDefaults: \u0026rancher2.PodSecurityAdmissionConfigurationTemplateDefaultsArgs{\n\t\t\t\tAudit:          pulumi.String(\"restricted\"),\n\t\t\t\tAuditVersion:   pulumi.String(\"latest\"),\n\t\t\t\tEnforce:        pulumi.String(\"restricted\"),\n\t\t\t\tEnforceVersion: pulumi.String(\"latest\"),\n\t\t\t\tWarn:           pulumi.String(\"restricted\"),\n\t\t\t\tWarnVersion:    pulumi.String(\"latest\"),\n\t\t\t},\n\t\t\tExemptions: \u0026rancher2.PodSecurityAdmissionConfigurationTemplateExemptionsArgs{\n\t\t\t\tUsernames: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"testuser\"),\n\t\t\t\t},\n\t\t\t\tRuntimeClasses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"testclass\"),\n\t\t\t\t},\n\t\t\t\tNamespaces: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ingress-nginx\"),\n\t\t\t\t\tpulumi.String(\"kube-system\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewCluster(ctx, \"foo\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform cluster with PSACT\"),\n\t\t\tDefaultPodSecurityAdmissionConfigurationTemplateName: pulumi.String(\"\u003cname\u003e\"),\n\t\t\tRkeConfig: \u0026rancher2.ClusterRkeConfigArgs{\n\t\t\t\tNetwork: \u0026rancher2.ClusterRkeConfigNetworkArgs{\n\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.PodSecurityAdmissionConfigurationTemplate;\nimport com.pulumi.rancher2.PodSecurityAdmissionConfigurationTemplateArgs;\nimport com.pulumi.rancher2.inputs.PodSecurityAdmissionConfigurationTemplateDefaultsArgs;\nimport com.pulumi.rancher2.inputs.PodSecurityAdmissionConfigurationTemplateExemptionsArgs;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Custom PSACT (if you wish to use your own)\n        var foo = new PodSecurityAdmissionConfigurationTemplate(\"foo\", PodSecurityAdmissionConfigurationTemplateArgs.builder()\n            .name(\"custom-psact\")\n            .description(\"This is my custom Pod Security Admission Configuration Template\")\n            .defaults(PodSecurityAdmissionConfigurationTemplateDefaultsArgs.builder()\n                .audit(\"restricted\")\n                .auditVersion(\"latest\")\n                .enforce(\"restricted\")\n                .enforceVersion(\"latest\")\n                .warn(\"restricted\")\n                .warnVersion(\"latest\")\n                .build())\n            .exemptions(PodSecurityAdmissionConfigurationTemplateExemptionsArgs.builder()\n                .usernames(\"testuser\")\n                .runtimeClasses(\"testclass\")\n                .namespaces(                \n                    \"ingress-nginx\",\n                    \"kube-system\")\n                .build())\n            .build());\n\n        var fooCluster = new Cluster(\"fooCluster\", ClusterArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform cluster with PSACT\")\n            .defaultPodSecurityAdmissionConfigurationTemplateName(\"\u003cname\u003e\")\n            .rkeConfig(ClusterRkeConfigArgs.builder()\n                .network(ClusterRkeConfigNetworkArgs.builder()\n                    .plugin(\"canal\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Custom PSACT (if you wish to use your own)\n  foo:\n    type: rancher2:PodSecurityAdmissionConfigurationTemplate\n    properties:\n      name: custom-psact\n      description: This is my custom Pod Security Admission Configuration Template\n      defaults:\n        audit: restricted\n        auditVersion: latest\n        enforce: restricted\n        enforceVersion: latest\n        warn: restricted\n        warnVersion: latest\n      exemptions:\n        usernames:\n          - testuser\n        runtimeClasses:\n          - testclass\n        namespaces:\n          - ingress-nginx\n          - kube-system\n  fooCluster:\n    type: rancher2:Cluster\n    name: foo\n    properties:\n      name: foo\n      description: Terraform cluster with PSACT\n      defaultPodSecurityAdmissionConfigurationTemplateName: \u003cname\u003e\n      rkeConfig:\n        network:\n          plugin: canal\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Importing EKS cluster to Rancher v2, using \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e. For Rancher v2.5.x and above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = new rancher2.CloudCredential(\"foo\", {\n    name: \"foo\",\n    description: \"foo test\",\n    amazonec2CredentialConfig: {\n        accessKey: \"\u003caws-access-key\u003e\",\n        secretKey: \"\u003caws-secret-key\u003e\",\n    },\n});\nconst fooCluster = new rancher2.Cluster(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform EKS cluster\",\n    eksConfigV2: {\n        cloudCredentialId: foo.id,\n        name: \"\u003ccluster-name\u003e\",\n        region: \"\u003ceks-region\u003e\",\n        imported: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.CloudCredential(\"foo\",\n    name=\"foo\",\n    description=\"foo test\",\n    amazonec2_credential_config={\n        \"access_key\": \"\u003caws-access-key\u003e\",\n        \"secret_key\": \"\u003caws-secret-key\u003e\",\n    })\nfoo_cluster = rancher2.Cluster(\"foo\",\n    name=\"foo\",\n    description=\"Terraform EKS cluster\",\n    eks_config_v2={\n        \"cloud_credential_id\": foo.id,\n        \"name\": \"\u003ccluster-name\u003e\",\n        \"region\": \"\u003ceks-region\u003e\",\n        \"imported\": True,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Rancher2.CloudCredential(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo test\",\n        Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs\n        {\n            AccessKey = \"\u003caws-access-key\u003e\",\n            SecretKey = \"\u003caws-secret-key\u003e\",\n        },\n    });\n\n    var fooCluster = new Rancher2.Cluster(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform EKS cluster\",\n        EksConfigV2 = new Rancher2.Inputs.ClusterEksConfigV2Args\n        {\n            CloudCredentialId = foo.Id,\n            Name = \"\u003ccluster-name\u003e\",\n            Region = \"\u003ceks-region\u003e\",\n            Imported = true,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := rancher2.NewCloudCredential(ctx, \"foo\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t\tAmazonec2CredentialConfig: \u0026rancher2.CloudCredentialAmazonec2CredentialConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"\u003caws-access-key\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003caws-secret-key\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewCluster(ctx, \"foo\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform EKS cluster\"),\n\t\t\tEksConfigV2: \u0026rancher2.ClusterEksConfigV2Args{\n\t\t\t\tCloudCredentialId: foo.ID(),\n\t\t\t\tName:              pulumi.String(\"\u003ccluster-name\u003e\"),\n\t\t\t\tRegion:            pulumi.String(\"\u003ceks-region\u003e\"),\n\t\t\t\tImported:          pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.CloudCredential;\nimport com.pulumi.rancher2.CloudCredentialArgs;\nimport com.pulumi.rancher2.inputs.CloudCredentialAmazonec2CredentialConfigArgs;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterEksConfigV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new CloudCredential(\"foo\", CloudCredentialArgs.builder()\n            .name(\"foo\")\n            .description(\"foo test\")\n            .amazonec2CredentialConfig(CloudCredentialAmazonec2CredentialConfigArgs.builder()\n                .accessKey(\"\u003caws-access-key\u003e\")\n                .secretKey(\"\u003caws-secret-key\u003e\")\n                .build())\n            .build());\n\n        var fooCluster = new Cluster(\"fooCluster\", ClusterArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform EKS cluster\")\n            .eksConfigV2(ClusterEksConfigV2Args.builder()\n                .cloudCredentialId(foo.id())\n                .name(\"\u003ccluster-name\u003e\")\n                .region(\"\u003ceks-region\u003e\")\n                .imported(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: rancher2:CloudCredential\n    properties:\n      name: foo\n      description: foo test\n      amazonec2CredentialConfig:\n        accessKey: \u003caws-access-key\u003e\n        secretKey: \u003caws-secret-key\u003e\n  fooCluster:\n    type: rancher2:Cluster\n    name: foo\n    properties:\n      name: foo\n      description: Terraform EKS cluster\n      eksConfigV2:\n        cloudCredentialId: ${foo.id}\n        name: \u003ccluster-name\u003e\n        region: \u003ceks-region\u003e\n        imported: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating EKS cluster from Rancher v2, using \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e. For Rancher v2.5.x and above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = new rancher2.CloudCredential(\"foo\", {\n    name: \"foo\",\n    description: \"foo test\",\n    amazonec2CredentialConfig: {\n        accessKey: \"\u003caws-access-key\u003e\",\n        secretKey: \"\u003caws-secret-key\u003e\",\n    },\n});\nconst fooCluster = new rancher2.Cluster(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform EKS cluster\",\n    eksConfigV2: {\n        cloudCredentialId: foo.id,\n        region: \"\u003cEKS_REGION\u003e\",\n        kubernetesVersion: \"1.24\",\n        loggingTypes: [\n            \"audit\",\n            \"api\",\n        ],\n        nodeGroups: [\n            {\n                name: \"node_group1\",\n                instanceType: \"t3.medium\",\n                desiredSize: 3,\n                maxSize: 5,\n            },\n            {\n                name: \"node_group2\",\n                instanceType: \"m5.xlarge\",\n                desiredSize: 2,\n                maxSize: 3,\n                nodeRole: \"arn:aws:iam::role/test-NodeInstanceRole\",\n            },\n        ],\n        privateAccess: true,\n        publicAccess: false,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.CloudCredential(\"foo\",\n    name=\"foo\",\n    description=\"foo test\",\n    amazonec2_credential_config={\n        \"access_key\": \"\u003caws-access-key\u003e\",\n        \"secret_key\": \"\u003caws-secret-key\u003e\",\n    })\nfoo_cluster = rancher2.Cluster(\"foo\",\n    name=\"foo\",\n    description=\"Terraform EKS cluster\",\n    eks_config_v2={\n        \"cloud_credential_id\": foo.id,\n        \"region\": \"\u003cEKS_REGION\u003e\",\n        \"kubernetes_version\": \"1.24\",\n        \"logging_types\": [\n            \"audit\",\n            \"api\",\n        ],\n        \"node_groups\": [\n            {\n                \"name\": \"node_group1\",\n                \"instance_type\": \"t3.medium\",\n                \"desired_size\": 3,\n                \"max_size\": 5,\n            },\n            {\n                \"name\": \"node_group2\",\n                \"instance_type\": \"m5.xlarge\",\n                \"desired_size\": 2,\n                \"max_size\": 3,\n                \"node_role\": \"arn:aws:iam::role/test-NodeInstanceRole\",\n            },\n        ],\n        \"private_access\": True,\n        \"public_access\": False,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Rancher2.CloudCredential(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo test\",\n        Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs\n        {\n            AccessKey = \"\u003caws-access-key\u003e\",\n            SecretKey = \"\u003caws-secret-key\u003e\",\n        },\n    });\n\n    var fooCluster = new Rancher2.Cluster(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform EKS cluster\",\n        EksConfigV2 = new Rancher2.Inputs.ClusterEksConfigV2Args\n        {\n            CloudCredentialId = foo.Id,\n            Region = \"\u003cEKS_REGION\u003e\",\n            KubernetesVersion = \"1.24\",\n            LoggingTypes = new[]\n            {\n                \"audit\",\n                \"api\",\n            },\n            NodeGroups = new[]\n            {\n                new Rancher2.Inputs.ClusterEksConfigV2NodeGroupArgs\n                {\n                    Name = \"node_group1\",\n                    InstanceType = \"t3.medium\",\n                    DesiredSize = 3,\n                    MaxSize = 5,\n                },\n                new Rancher2.Inputs.ClusterEksConfigV2NodeGroupArgs\n                {\n                    Name = \"node_group2\",\n                    InstanceType = \"m5.xlarge\",\n                    DesiredSize = 2,\n                    MaxSize = 3,\n                    NodeRole = \"arn:aws:iam::role/test-NodeInstanceRole\",\n                },\n            },\n            PrivateAccess = true,\n            PublicAccess = false,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := rancher2.NewCloudCredential(ctx, \"foo\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t\tAmazonec2CredentialConfig: \u0026rancher2.CloudCredentialAmazonec2CredentialConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"\u003caws-access-key\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003caws-secret-key\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewCluster(ctx, \"foo\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform EKS cluster\"),\n\t\t\tEksConfigV2: \u0026rancher2.ClusterEksConfigV2Args{\n\t\t\t\tCloudCredentialId: foo.ID(),\n\t\t\t\tRegion:            pulumi.String(\"\u003cEKS_REGION\u003e\"),\n\t\t\t\tKubernetesVersion: pulumi.String(\"1.24\"),\n\t\t\t\tLoggingTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"audit\"),\n\t\t\t\t\tpulumi.String(\"api\"),\n\t\t\t\t},\n\t\t\t\tNodeGroups: rancher2.ClusterEksConfigV2NodeGroupArray{\n\t\t\t\t\t\u0026rancher2.ClusterEksConfigV2NodeGroupArgs{\n\t\t\t\t\t\tName:         pulumi.String(\"node_group1\"),\n\t\t\t\t\t\tInstanceType: pulumi.String(\"t3.medium\"),\n\t\t\t\t\t\tDesiredSize:  pulumi.Int(3),\n\t\t\t\t\t\tMaxSize:      pulumi.Int(5),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026rancher2.ClusterEksConfigV2NodeGroupArgs{\n\t\t\t\t\t\tName:         pulumi.String(\"node_group2\"),\n\t\t\t\t\t\tInstanceType: pulumi.String(\"m5.xlarge\"),\n\t\t\t\t\t\tDesiredSize:  pulumi.Int(2),\n\t\t\t\t\t\tMaxSize:      pulumi.Int(3),\n\t\t\t\t\t\tNodeRole:     pulumi.String(\"arn:aws:iam::role/test-NodeInstanceRole\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tPrivateAccess: pulumi.Bool(true),\n\t\t\t\tPublicAccess:  pulumi.Bool(false),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.CloudCredential;\nimport com.pulumi.rancher2.CloudCredentialArgs;\nimport com.pulumi.rancher2.inputs.CloudCredentialAmazonec2CredentialConfigArgs;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterEksConfigV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new CloudCredential(\"foo\", CloudCredentialArgs.builder()\n            .name(\"foo\")\n            .description(\"foo test\")\n            .amazonec2CredentialConfig(CloudCredentialAmazonec2CredentialConfigArgs.builder()\n                .accessKey(\"\u003caws-access-key\u003e\")\n                .secretKey(\"\u003caws-secret-key\u003e\")\n                .build())\n            .build());\n\n        var fooCluster = new Cluster(\"fooCluster\", ClusterArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform EKS cluster\")\n            .eksConfigV2(ClusterEksConfigV2Args.builder()\n                .cloudCredentialId(foo.id())\n                .region(\"\u003cEKS_REGION\u003e\")\n                .kubernetesVersion(\"1.24\")\n                .loggingTypes(                \n                    \"audit\",\n                    \"api\")\n                .nodeGroups(                \n                    ClusterEksConfigV2NodeGroupArgs.builder()\n                        .name(\"node_group1\")\n                        .instanceType(\"t3.medium\")\n                        .desiredSize(3)\n                        .maxSize(5)\n                        .build(),\n                    ClusterEksConfigV2NodeGroupArgs.builder()\n                        .name(\"node_group2\")\n                        .instanceType(\"m5.xlarge\")\n                        .desiredSize(2)\n                        .maxSize(3)\n                        .nodeRole(\"arn:aws:iam::role/test-NodeInstanceRole\")\n                        .build())\n                .privateAccess(true)\n                .publicAccess(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: rancher2:CloudCredential\n    properties:\n      name: foo\n      description: foo test\n      amazonec2CredentialConfig:\n        accessKey: \u003caws-access-key\u003e\n        secretKey: \u003caws-secret-key\u003e\n  fooCluster:\n    type: rancher2:Cluster\n    name: foo\n    properties:\n      name: foo\n      description: Terraform EKS cluster\n      eksConfigV2:\n        cloudCredentialId: ${foo.id}\n        region: \u003cEKS_REGION\u003e\n        kubernetesVersion: '1.24'\n        loggingTypes:\n          - audit\n          - api\n        nodeGroups:\n          - name: node_group1\n            instanceType: t3.medium\n            desiredSize: 3\n            maxSize: 5\n          - name: node_group2\n            instanceType: m5.xlarge\n            desiredSize: 2\n            maxSize: 3\n            nodeRole: arn:aws:iam::role/test-NodeInstanceRole\n        privateAccess: true\n        publicAccess: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating EKS cluster from Rancher v2, using \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e and launch template. For Rancher v2.5.6 and above.\n\nNote: To use \u003cspan pulumi-lang-nodejs=\"`launchTemplate`\" pulumi-lang-dotnet=\"`LaunchTemplate`\" pulumi-lang-go=\"`launchTemplate`\" pulumi-lang-python=\"`launch_template`\" pulumi-lang-yaml=\"`launchTemplate`\" pulumi-lang-java=\"`launchTemplate`\"\u003e`launch_template`\u003c/span\u003e you must provide the ID (seen as `\u003cEC2_LAUNCH_TEMPLATE_ID\u003e`) to the template either as a static value. Or fetched via AWS data-source using one of: aws_ami, aws_ami_ids, or similar data-sources. You can also create a custom \u003cspan pulumi-lang-nodejs=\"`launchTemplate`\" pulumi-lang-dotnet=\"`LaunchTemplate`\" pulumi-lang-go=\"`launchTemplate`\" pulumi-lang-python=\"`launch_template`\" pulumi-lang-yaml=\"`launchTemplate`\" pulumi-lang-java=\"`launchTemplate`\"\u003e`launch_template`\u003c/span\u003e first and provide the ID to that.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = new rancher2.CloudCredential(\"foo\", {\n    name: \"foo\",\n    description: \"foo test\",\n    amazonec2CredentialConfig: {\n        accessKey: \"\u003caws-access-key\u003e\",\n        secretKey: \"\u003caws-secret-key\u003e\",\n    },\n});\nconst fooCluster = new rancher2.Cluster(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform EKS cluster\",\n    eksConfigV2: {\n        cloudCredentialId: foo.id,\n        region: \"\u003cEKS_REGION\u003e\",\n        kubernetesVersion: \"1.24\",\n        loggingTypes: [\n            \"audit\",\n            \"api\",\n        ],\n        nodeGroups: [{\n            desiredSize: 3,\n            maxSize: 5,\n            name: \"node_group1\",\n            launchTemplates: [{\n                id: \"\u003cec2-launch-template-id\u003e\",\n                version: 1,\n            }],\n        }],\n        privateAccess: true,\n        publicAccess: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.CloudCredential(\"foo\",\n    name=\"foo\",\n    description=\"foo test\",\n    amazonec2_credential_config={\n        \"access_key\": \"\u003caws-access-key\u003e\",\n        \"secret_key\": \"\u003caws-secret-key\u003e\",\n    })\nfoo_cluster = rancher2.Cluster(\"foo\",\n    name=\"foo\",\n    description=\"Terraform EKS cluster\",\n    eks_config_v2={\n        \"cloud_credential_id\": foo.id,\n        \"region\": \"\u003cEKS_REGION\u003e\",\n        \"kubernetes_version\": \"1.24\",\n        \"logging_types\": [\n            \"audit\",\n            \"api\",\n        ],\n        \"node_groups\": [{\n            \"desired_size\": 3,\n            \"max_size\": 5,\n            \"name\": \"node_group1\",\n            \"launch_templates\": [{\n                \"id\": \"\u003cec2-launch-template-id\u003e\",\n                \"version\": 1,\n            }],\n        }],\n        \"private_access\": True,\n        \"public_access\": True,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Rancher2.CloudCredential(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo test\",\n        Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs\n        {\n            AccessKey = \"\u003caws-access-key\u003e\",\n            SecretKey = \"\u003caws-secret-key\u003e\",\n        },\n    });\n\n    var fooCluster = new Rancher2.Cluster(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform EKS cluster\",\n        EksConfigV2 = new Rancher2.Inputs.ClusterEksConfigV2Args\n        {\n            CloudCredentialId = foo.Id,\n            Region = \"\u003cEKS_REGION\u003e\",\n            KubernetesVersion = \"1.24\",\n            LoggingTypes = new[]\n            {\n                \"audit\",\n                \"api\",\n            },\n            NodeGroups = new[]\n            {\n                new Rancher2.Inputs.ClusterEksConfigV2NodeGroupArgs\n                {\n                    DesiredSize = 3,\n                    MaxSize = 5,\n                    Name = \"node_group1\",\n                    LaunchTemplates = new[]\n                    {\n                        new Rancher2.Inputs.ClusterEksConfigV2NodeGroupLaunchTemplateArgs\n                        {\n                            Id = \"\u003cec2-launch-template-id\u003e\",\n                            Version = 1,\n                        },\n                    },\n                },\n            },\n            PrivateAccess = true,\n            PublicAccess = true,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := rancher2.NewCloudCredential(ctx, \"foo\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t\tAmazonec2CredentialConfig: \u0026rancher2.CloudCredentialAmazonec2CredentialConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"\u003caws-access-key\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003caws-secret-key\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewCluster(ctx, \"foo\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform EKS cluster\"),\n\t\t\tEksConfigV2: \u0026rancher2.ClusterEksConfigV2Args{\n\t\t\t\tCloudCredentialId: foo.ID(),\n\t\t\t\tRegion:            pulumi.String(\"\u003cEKS_REGION\u003e\"),\n\t\t\t\tKubernetesVersion: pulumi.String(\"1.24\"),\n\t\t\t\tLoggingTypes: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"audit\"),\n\t\t\t\t\tpulumi.String(\"api\"),\n\t\t\t\t},\n\t\t\t\tNodeGroups: rancher2.ClusterEksConfigV2NodeGroupArray{\n\t\t\t\t\t\u0026rancher2.ClusterEksConfigV2NodeGroupArgs{\n\t\t\t\t\t\tDesiredSize: pulumi.Int(3),\n\t\t\t\t\t\tMaxSize:     pulumi.Int(5),\n\t\t\t\t\t\tName:        pulumi.String(\"node_group1\"),\n\t\t\t\t\t\tLaunchTemplates: rancher2.ClusterEksConfigV2NodeGroupLaunchTemplateArray{\n\t\t\t\t\t\t\t\u0026rancher2.ClusterEksConfigV2NodeGroupLaunchTemplateArgs{\n\t\t\t\t\t\t\t\tId:      pulumi.String(\"\u003cec2-launch-template-id\u003e\"),\n\t\t\t\t\t\t\t\tVersion: pulumi.Int(1),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tPrivateAccess: pulumi.Bool(true),\n\t\t\t\tPublicAccess:  pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.CloudCredential;\nimport com.pulumi.rancher2.CloudCredentialArgs;\nimport com.pulumi.rancher2.inputs.CloudCredentialAmazonec2CredentialConfigArgs;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterEksConfigV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new CloudCredential(\"foo\", CloudCredentialArgs.builder()\n            .name(\"foo\")\n            .description(\"foo test\")\n            .amazonec2CredentialConfig(CloudCredentialAmazonec2CredentialConfigArgs.builder()\n                .accessKey(\"\u003caws-access-key\u003e\")\n                .secretKey(\"\u003caws-secret-key\u003e\")\n                .build())\n            .build());\n\n        var fooCluster = new Cluster(\"fooCluster\", ClusterArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform EKS cluster\")\n            .eksConfigV2(ClusterEksConfigV2Args.builder()\n                .cloudCredentialId(foo.id())\n                .region(\"\u003cEKS_REGION\u003e\")\n                .kubernetesVersion(\"1.24\")\n                .loggingTypes(                \n                    \"audit\",\n                    \"api\")\n                .nodeGroups(ClusterEksConfigV2NodeGroupArgs.builder()\n                    .desiredSize(3)\n                    .maxSize(5)\n                    .name(\"node_group1\")\n                    .launchTemplates(ClusterEksConfigV2NodeGroupLaunchTemplateArgs.builder()\n                        .id(\"\u003cec2-launch-template-id\u003e\")\n                        .version(1)\n                        .build())\n                    .build())\n                .privateAccess(true)\n                .publicAccess(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: rancher2:CloudCredential\n    properties:\n      name: foo\n      description: foo test\n      amazonec2CredentialConfig:\n        accessKey: \u003caws-access-key\u003e\n        secretKey: \u003caws-secret-key\u003e\n  fooCluster:\n    type: rancher2:Cluster\n    name: foo\n    properties:\n      name: foo\n      description: Terraform EKS cluster\n      eksConfigV2:\n        cloudCredentialId: ${foo.id}\n        region: \u003cEKS_REGION\u003e\n        kubernetesVersion: '1.24'\n        loggingTypes:\n          - audit\n          - api\n        nodeGroups:\n          - desiredSize: 3\n            maxSize: 5\n            name: node_group1\n            launchTemplates:\n              - id: \u003cec2-launch-template-id\u003e\n                version: 1\n        privateAccess: true\n        publicAccess: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating AKS cluster from Rancher v2, using \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e. For Rancher v2.6.0 and above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo_aks = new rancher2.CloudCredential(\"foo-aks\", {\n    name: \"foo-aks\",\n    azureCredentialConfig: {\n        clientId: \"\u003cclient-id\u003e\",\n        clientSecret: \"\u003cclient-secret\u003e\",\n        subscriptionId: \"\u003csubscription-id\u003e\",\n    },\n});\nconst foo = new rancher2.Cluster(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform AKS cluster\",\n    aksConfigV2: {\n        cloudCredentialId: foo_aks.id,\n        resourceGroup: \"\u003cresource-group\u003e\",\n        resourceLocation: \"\u003cresource-location\u003e\",\n        dnsPrefix: \"\u003cdns-prefix\u003e\",\n        kubernetesVersion: \"1.24.6\",\n        networkPlugin: \"\u003cnetwork-plugin\u003e\",\n        virtualNetwork: \"\u003cvirtual-network\u003e\",\n        virtualNetworkResourceGroup: \"\u003cvirtual-network-resource-group\u003e\",\n        subnet: \"\u003csubnet\u003e\",\n        nodeResourceGroup: \"\u003cnode-resource-group\u003e\",\n        outboundType: \"loadBalancer\",\n        nodePools: [\n            {\n                availabilityZones: [\n                    \"1\",\n                    \"2\",\n                    \"3\",\n                ],\n                name: \"\u003cnodepool-name-1\u003e\",\n                mode: \"System\",\n                count: 1,\n                orchestratorVersion: \"1.21.2\",\n                osDiskSizeGb: 128,\n                vmSize: \"Standard_DS2_v2\",\n            },\n            {\n                availabilityZones: [\n                    \"1\",\n                    \"2\",\n                    \"3\",\n                ],\n                name: \"\u003cnodepool-name-2\u003e\",\n                count: 1,\n                mode: \"User\",\n                orchestratorVersion: \"1.21.2\",\n                osDiskSizeGb: 128,\n                vmSize: \"Standard_DS2_v2\",\n                maxSurge: \"25%\",\n                labels: {\n                    test1: \"data1\",\n                    test2: \"data2\",\n                },\n                taints: [\"none:PreferNoSchedule\"],\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo_aks = rancher2.CloudCredential(\"foo-aks\",\n    name=\"foo-aks\",\n    azure_credential_config={\n        \"client_id\": \"\u003cclient-id\u003e\",\n        \"client_secret\": \"\u003cclient-secret\u003e\",\n        \"subscription_id\": \"\u003csubscription-id\u003e\",\n    })\nfoo = rancher2.Cluster(\"foo\",\n    name=\"foo\",\n    description=\"Terraform AKS cluster\",\n    aks_config_v2={\n        \"cloud_credential_id\": foo_aks.id,\n        \"resource_group\": \"\u003cresource-group\u003e\",\n        \"resource_location\": \"\u003cresource-location\u003e\",\n        \"dns_prefix\": \"\u003cdns-prefix\u003e\",\n        \"kubernetes_version\": \"1.24.6\",\n        \"network_plugin\": \"\u003cnetwork-plugin\u003e\",\n        \"virtual_network\": \"\u003cvirtual-network\u003e\",\n        \"virtual_network_resource_group\": \"\u003cvirtual-network-resource-group\u003e\",\n        \"subnet\": \"\u003csubnet\u003e\",\n        \"node_resource_group\": \"\u003cnode-resource-group\u003e\",\n        \"outbound_type\": \"loadBalancer\",\n        \"node_pools\": [\n            {\n                \"availability_zones\": [\n                    \"1\",\n                    \"2\",\n                    \"3\",\n                ],\n                \"name\": \"\u003cnodepool-name-1\u003e\",\n                \"mode\": \"System\",\n                \"count\": 1,\n                \"orchestrator_version\": \"1.21.2\",\n                \"os_disk_size_gb\": 128,\n                \"vm_size\": \"Standard_DS2_v2\",\n            },\n            {\n                \"availability_zones\": [\n                    \"1\",\n                    \"2\",\n                    \"3\",\n                ],\n                \"name\": \"\u003cnodepool-name-2\u003e\",\n                \"count\": 1,\n                \"mode\": \"User\",\n                \"orchestrator_version\": \"1.21.2\",\n                \"os_disk_size_gb\": 128,\n                \"vm_size\": \"Standard_DS2_v2\",\n                \"max_surge\": \"25%\",\n                \"labels\": {\n                    \"test1\": \"data1\",\n                    \"test2\": \"data2\",\n                },\n                \"taints\": [\"none:PreferNoSchedule\"],\n            },\n        ],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo_aks = new Rancher2.CloudCredential(\"foo-aks\", new()\n    {\n        Name = \"foo-aks\",\n        AzureCredentialConfig = new Rancher2.Inputs.CloudCredentialAzureCredentialConfigArgs\n        {\n            ClientId = \"\u003cclient-id\u003e\",\n            ClientSecret = \"\u003cclient-secret\u003e\",\n            SubscriptionId = \"\u003csubscription-id\u003e\",\n        },\n    });\n\n    var foo = new Rancher2.Cluster(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform AKS cluster\",\n        AksConfigV2 = new Rancher2.Inputs.ClusterAksConfigV2Args\n        {\n            CloudCredentialId = foo_aks.Id,\n            ResourceGroup = \"\u003cresource-group\u003e\",\n            ResourceLocation = \"\u003cresource-location\u003e\",\n            DnsPrefix = \"\u003cdns-prefix\u003e\",\n            KubernetesVersion = \"1.24.6\",\n            NetworkPlugin = \"\u003cnetwork-plugin\u003e\",\n            VirtualNetwork = \"\u003cvirtual-network\u003e\",\n            VirtualNetworkResourceGroup = \"\u003cvirtual-network-resource-group\u003e\",\n            Subnet = \"\u003csubnet\u003e\",\n            NodeResourceGroup = \"\u003cnode-resource-group\u003e\",\n            OutboundType = \"loadBalancer\",\n            NodePools = new[]\n            {\n                new Rancher2.Inputs.ClusterAksConfigV2NodePoolArgs\n                {\n                    AvailabilityZones = new[]\n                    {\n                        \"1\",\n                        \"2\",\n                        \"3\",\n                    },\n                    Name = \"\u003cnodepool-name-1\u003e\",\n                    Mode = \"System\",\n                    Count = 1,\n                    OrchestratorVersion = \"1.21.2\",\n                    OsDiskSizeGb = 128,\n                    VmSize = \"Standard_DS2_v2\",\n                },\n                new Rancher2.Inputs.ClusterAksConfigV2NodePoolArgs\n                {\n                    AvailabilityZones = new[]\n                    {\n                        \"1\",\n                        \"2\",\n                        \"3\",\n                    },\n                    Name = \"\u003cnodepool-name-2\u003e\",\n                    Count = 1,\n                    Mode = \"User\",\n                    OrchestratorVersion = \"1.21.2\",\n                    OsDiskSizeGb = 128,\n                    VmSize = \"Standard_DS2_v2\",\n                    MaxSurge = \"25%\",\n                    Labels = \n                    {\n                        { \"test1\", \"data1\" },\n                        { \"test2\", \"data2\" },\n                    },\n                    Taints = new[]\n                    {\n                        \"none:PreferNoSchedule\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo_aks, err := rancher2.NewCloudCredential(ctx, \"foo-aks\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tName: pulumi.String(\"foo-aks\"),\n\t\t\tAzureCredentialConfig: \u0026rancher2.CloudCredentialAzureCredentialConfigArgs{\n\t\t\t\tClientId:       pulumi.String(\"\u003cclient-id\u003e\"),\n\t\t\t\tClientSecret:   pulumi.String(\"\u003cclient-secret\u003e\"),\n\t\t\t\tSubscriptionId: pulumi.String(\"\u003csubscription-id\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewCluster(ctx, \"foo\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform AKS cluster\"),\n\t\t\tAksConfigV2: \u0026rancher2.ClusterAksConfigV2Args{\n\t\t\t\tCloudCredentialId:           foo_aks.ID(),\n\t\t\t\tResourceGroup:               pulumi.String(\"\u003cresource-group\u003e\"),\n\t\t\t\tResourceLocation:            pulumi.String(\"\u003cresource-location\u003e\"),\n\t\t\t\tDnsPrefix:                   pulumi.String(\"\u003cdns-prefix\u003e\"),\n\t\t\t\tKubernetesVersion:           pulumi.String(\"1.24.6\"),\n\t\t\t\tNetworkPlugin:               pulumi.String(\"\u003cnetwork-plugin\u003e\"),\n\t\t\t\tVirtualNetwork:              pulumi.String(\"\u003cvirtual-network\u003e\"),\n\t\t\t\tVirtualNetworkResourceGroup: pulumi.String(\"\u003cvirtual-network-resource-group\u003e\"),\n\t\t\t\tSubnet:                      pulumi.String(\"\u003csubnet\u003e\"),\n\t\t\t\tNodeResourceGroup:           pulumi.String(\"\u003cnode-resource-group\u003e\"),\n\t\t\t\tOutboundType:                pulumi.String(\"loadBalancer\"),\n\t\t\t\tNodePools: rancher2.ClusterAksConfigV2NodePoolArray{\n\t\t\t\t\t\u0026rancher2.ClusterAksConfigV2NodePoolArgs{\n\t\t\t\t\t\tAvailabilityZones: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"1\"),\n\t\t\t\t\t\t\tpulumi.String(\"2\"),\n\t\t\t\t\t\t\tpulumi.String(\"3\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tName:                pulumi.String(\"\u003cnodepool-name-1\u003e\"),\n\t\t\t\t\t\tMode:                pulumi.String(\"System\"),\n\t\t\t\t\t\tCount:               pulumi.Int(1),\n\t\t\t\t\t\tOrchestratorVersion: pulumi.String(\"1.21.2\"),\n\t\t\t\t\t\tOsDiskSizeGb:        pulumi.Int(128),\n\t\t\t\t\t\tVmSize:              pulumi.String(\"Standard_DS2_v2\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026rancher2.ClusterAksConfigV2NodePoolArgs{\n\t\t\t\t\t\tAvailabilityZones: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"1\"),\n\t\t\t\t\t\t\tpulumi.String(\"2\"),\n\t\t\t\t\t\t\tpulumi.String(\"3\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tName:                pulumi.String(\"\u003cnodepool-name-2\u003e\"),\n\t\t\t\t\t\tCount:               pulumi.Int(1),\n\t\t\t\t\t\tMode:                pulumi.String(\"User\"),\n\t\t\t\t\t\tOrchestratorVersion: pulumi.String(\"1.21.2\"),\n\t\t\t\t\t\tOsDiskSizeGb:        pulumi.Int(128),\n\t\t\t\t\t\tVmSize:              pulumi.String(\"Standard_DS2_v2\"),\n\t\t\t\t\t\tMaxSurge:            pulumi.String(\"25%\"),\n\t\t\t\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\t\t\t\"test1\": pulumi.String(\"data1\"),\n\t\t\t\t\t\t\t\"test2\": pulumi.String(\"data2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTaints: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"none:PreferNoSchedule\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.CloudCredential;\nimport com.pulumi.rancher2.CloudCredentialArgs;\nimport com.pulumi.rancher2.inputs.CloudCredentialAzureCredentialConfigArgs;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterAksConfigV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo_aks = new CloudCredential(\"foo-aks\", CloudCredentialArgs.builder()\n            .name(\"foo-aks\")\n            .azureCredentialConfig(CloudCredentialAzureCredentialConfigArgs.builder()\n                .clientId(\"\u003cclient-id\u003e\")\n                .clientSecret(\"\u003cclient-secret\u003e\")\n                .subscriptionId(\"\u003csubscription-id\u003e\")\n                .build())\n            .build());\n\n        var foo = new Cluster(\"foo\", ClusterArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform AKS cluster\")\n            .aksConfigV2(ClusterAksConfigV2Args.builder()\n                .cloudCredentialId(foo_aks.id())\n                .resourceGroup(\"\u003cresource-group\u003e\")\n                .resourceLocation(\"\u003cresource-location\u003e\")\n                .dnsPrefix(\"\u003cdns-prefix\u003e\")\n                .kubernetesVersion(\"1.24.6\")\n                .networkPlugin(\"\u003cnetwork-plugin\u003e\")\n                .virtualNetwork(\"\u003cvirtual-network\u003e\")\n                .virtualNetworkResourceGroup(\"\u003cvirtual-network-resource-group\u003e\")\n                .subnet(\"\u003csubnet\u003e\")\n                .nodeResourceGroup(\"\u003cnode-resource-group\u003e\")\n                .outboundType(\"loadBalancer\")\n                .nodePools(                \n                    ClusterAksConfigV2NodePoolArgs.builder()\n                        .availabilityZones(                        \n                            \"1\",\n                            \"2\",\n                            \"3\")\n                        .name(\"\u003cnodepool-name-1\u003e\")\n                        .mode(\"System\")\n                        .count(1)\n                        .orchestratorVersion(\"1.21.2\")\n                        .osDiskSizeGb(128)\n                        .vmSize(\"Standard_DS2_v2\")\n                        .build(),\n                    ClusterAksConfigV2NodePoolArgs.builder()\n                        .availabilityZones(                        \n                            \"1\",\n                            \"2\",\n                            \"3\")\n                        .name(\"\u003cnodepool-name-2\u003e\")\n                        .count(1)\n                        .mode(\"User\")\n                        .orchestratorVersion(\"1.21.2\")\n                        .osDiskSizeGb(128)\n                        .vmSize(\"Standard_DS2_v2\")\n                        .maxSurge(\"25%\")\n                        .labels(Map.ofEntries(\n                            Map.entry(\"test1\", \"data1\"),\n                            Map.entry(\"test2\", \"data2\")\n                        ))\n                        .taints(\"none:PreferNoSchedule\")\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo-aks:\n    type: rancher2:CloudCredential\n    properties:\n      name: foo-aks\n      azureCredentialConfig:\n        clientId: \u003cclient-id\u003e\n        clientSecret: \u003cclient-secret\u003e\n        subscriptionId: \u003csubscription-id\u003e\n  foo:\n    type: rancher2:Cluster\n    properties:\n      name: foo\n      description: Terraform AKS cluster\n      aksConfigV2:\n        cloudCredentialId: ${[\"foo-aks\"].id}\n        resourceGroup: \u003cresource-group\u003e\n        resourceLocation: \u003cresource-location\u003e\n        dnsPrefix: \u003cdns-prefix\u003e\n        kubernetesVersion: 1.24.6\n        networkPlugin: \u003cnetwork-plugin\u003e\n        virtualNetwork: \u003cvirtual-network\u003e\n        virtualNetworkResourceGroup: \u003cvirtual-network-resource-group\u003e\n        subnet: \u003csubnet\u003e\n        nodeResourceGroup: \u003cnode-resource-group\u003e\n        outboundType: loadBalancer\n        nodePools:\n          - availabilityZones:\n              - '1'\n              - '2'\n              - '3'\n            name: \u003cnodepool-name-1\u003e\n            mode: System\n            count: 1\n            orchestratorVersion: 1.21.2\n            osDiskSizeGb: 128\n            vmSize: Standard_DS2_v2\n          - availabilityZones:\n              - '1'\n              - '2'\n              - '3'\n            name: \u003cnodepool-name-2\u003e\n            count: 1\n            mode: User\n            orchestratorVersion: 1.21.2\n            osDiskSizeGb: 128\n            vmSize: Standard_DS2_v2\n            maxSurge: 25%\n            labels:\n              test1: data1\n              test2: data2\n            taints:\n              - none:PreferNoSchedule\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nClusters can be imported using the Rancher Cluster ID\n\n```sh\n$ pulumi import rancher2:index/cluster:Cluster foo \u0026lt;CLUSTER_ID\u0026gt;\n```\n",
            "properties": {
                "agentEnvVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterAgentEnvVar:ClusterAgentEnvVar"
                    },
                    "description": "Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)\n"
                },
                "aksConfigV2": {
                    "$ref": "#/types/rancher2:index/ClusterAksConfigV2:ClusterAksConfigV2",
                    "description": "The Azure AKS v2 configuration for creating/import \u003cspan pulumi-lang-nodejs=\"`aks`\" pulumi-lang-dotnet=\"`Aks`\" pulumi-lang-go=\"`aks`\" pulumi-lang-python=\"`aks`\" pulumi-lang-yaml=\"`aks`\" pulumi-lang-java=\"`aks`\"\u003e`aks`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Cluster (map)\n"
                },
                "caCert": {
                    "type": "string",
                    "description": "(Computed/Sensitive) K8s cluster ca cert (string)\n",
                    "secret": true
                },
                "clusterAgentDeploymentCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterClusterAgentDeploymentCustomization:ClusterClusterAgentDeploymentCustomization"
                    },
                    "description": "Optional customization for cluster agent. For Rancher v2.7.5 and above (list)\n"
                },
                "clusterAuthEndpoint": {
                    "$ref": "#/types/rancher2:index/ClusterClusterAuthEndpoint:ClusterClusterAuthEndpoint",
                    "description": "Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)\n"
                },
                "clusterRegistrationToken": {
                    "$ref": "#/types/rancher2:index/ClusterClusterRegistrationToken:ClusterClusterRegistrationToken",
                    "description": "(Computed) Cluster Registration Token generated for the cluster (list maxitems:1)\n"
                },
                "clusterTemplateAnswers": {
                    "$ref": "#/types/rancher2:index/ClusterClusterTemplateAnswers:ClusterClusterTemplateAnswers",
                    "description": "Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)\n"
                },
                "clusterTemplateId": {
                    "type": "string",
                    "description": "Cluster template ID. For Rancher v2.3.x and above (string)\n"
                },
                "clusterTemplateQuestions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterClusterTemplateQuestion:ClusterClusterTemplateQuestion"
                    },
                    "description": "Cluster template questions. For Rancher v2.3.x and above (list)\n"
                },
                "clusterTemplateRevisionId": {
                    "type": "string",
                    "description": "Cluster template revision ID. For Rancher v2.3.x and above (string)\n"
                },
                "defaultPodSecurityAdmissionConfigurationTemplateName": {
                    "type": "string",
                    "description": "The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)\n"
                },
                "defaultProjectId": {
                    "type": "string",
                    "description": "(Computed) Default project ID for the cluster (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for Cluster (string)\n"
                },
                "desiredAgentImage": {
                    "type": "string",
                    "description": "Desired agent image. For Rancher v2.3.x and above (string)\n"
                },
                "desiredAuthImage": {
                    "type": "string",
                    "description": "Desired auth image. For Rancher v2.3.x and above (string)\n"
                },
                "dockerRootDir": {
                    "type": "string",
                    "description": "Desired auth image. For Rancher v2.3.x and above (string)\n"
                },
                "driver": {
                    "type": "string",
                    "description": "(Computed) The driver used for the Cluster. \u003cspan pulumi-lang-nodejs=\"`imported`\" pulumi-lang-dotnet=\"`Imported`\" pulumi-lang-go=\"`imported`\" pulumi-lang-python=\"`imported`\" pulumi-lang-yaml=\"`imported`\" pulumi-lang-java=\"`imported`\"\u003e`imported`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azurekubernetesservice`\" pulumi-lang-dotnet=\"`Azurekubernetesservice`\" pulumi-lang-go=\"`azurekubernetesservice`\" pulumi-lang-python=\"`azurekubernetesservice`\" pulumi-lang-yaml=\"`azurekubernetesservice`\" pulumi-lang-java=\"`azurekubernetesservice`\"\u003e`azurekubernetesservice`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`amazonelasticcontainerservice`\" pulumi-lang-dotnet=\"`Amazonelasticcontainerservice`\" pulumi-lang-go=\"`amazonelasticcontainerservice`\" pulumi-lang-python=\"`amazonelasticcontainerservice`\" pulumi-lang-yaml=\"`amazonelasticcontainerservice`\" pulumi-lang-java=\"`amazonelasticcontainerservice`\"\u003e`amazonelasticcontainerservice`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googlekubernetesengine`\" pulumi-lang-dotnet=\"`Googlekubernetesengine`\" pulumi-lang-go=\"`googlekubernetesengine`\" pulumi-lang-python=\"`googlekubernetesengine`\" pulumi-lang-yaml=\"`googlekubernetesengine`\" pulumi-lang-java=\"`googlekubernetesengine`\"\u003e`googlekubernetesengine`\u003c/span\u003e and `rancherKubernetesEngine` are supported (string)\n"
                },
                "eksConfigV2": {
                    "$ref": "#/types/rancher2:index/ClusterEksConfigV2:ClusterEksConfigV2",
                    "description": "The Amazon EKS V2 configuration to create or import \u003cspan pulumi-lang-nodejs=\"`eks`\" pulumi-lang-dotnet=\"`Eks`\" pulumi-lang-go=\"`eks`\" pulumi-lang-python=\"`eks`\" pulumi-lang-yaml=\"`eks`\" pulumi-lang-java=\"`eks`\"\u003e`eks`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e. For Rancher v2.5.x and above (list maxitems:1)\n"
                },
                "enableClusterIstio": {
                    "type": "boolean",
                    "description": "Deploy istio on \u003cspan pulumi-lang-nodejs=\"`system`\" pulumi-lang-dotnet=\"`System`\" pulumi-lang-go=\"`system`\" pulumi-lang-python=\"`system`\" pulumi-lang-yaml=\"`system`\" pulumi-lang-java=\"`system`\"\u003e`system`\u003c/span\u003e project and `istio-system` namespace, using\u003cspan pulumi-lang-nodejs=\" rancher2App \" pulumi-lang-dotnet=\" Rancher2App \" pulumi-lang-go=\" rancher2App \" pulumi-lang-python=\" rancher2_app \" pulumi-lang-yaml=\" rancher2App \" pulumi-lang-java=\" rancher2App \"\u003e rancher2_app \u003c/span\u003eresource instead. See above example.\n",
                    "deprecationMessage": "Deploy istio using\u003cspan pulumi-lang-nodejs=\" rancher2App \" pulumi-lang-dotnet=\" Rancher2App \" pulumi-lang-go=\" rancher2App \" pulumi-lang-python=\" rancher2_app \" pulumi-lang-yaml=\" rancher2App \" pulumi-lang-java=\" rancher2App \"\u003e rancher2_app \u003c/span\u003eresource instead"
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "description": "Enable project network isolation (bool)\n"
                },
                "fleetAgentDeploymentCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterFleetAgentDeploymentCustomization:ClusterFleetAgentDeploymentCustomization"
                    },
                    "description": "Optional customization for fleet agent. For Rancher v2.7.5 and above (list)\n"
                },
                "fleetWorkspaceName": {
                    "type": "string",
                    "description": "Fleet workspace name (string)\n"
                },
                "gkeConfigV2": {
                    "$ref": "#/types/rancher2:index/ClusterGkeConfigV2:ClusterGkeConfigV2",
                    "description": "The Google GKE V2 configuration for \u003cspan pulumi-lang-nodejs=\"`gke`\" pulumi-lang-dotnet=\"`Gke`\" pulumi-lang-go=\"`gke`\" pulumi-lang-python=\"`gke`\" pulumi-lang-yaml=\"`gke`\" pulumi-lang-java=\"`gke`\"\u003e`gke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e. For Rancher v2.5.8 and above (list maxitems:1)\n"
                },
                "importedConfig": {
                    "$ref": "#/types/rancher2:index/ClusterImportedConfig:ClusterImportedConfig",
                    "description": "The imported configuration for generic imported Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`rke2Config`\" pulumi-lang-dotnet=\"`Rke2Config`\" pulumi-lang-go=\"`rke2Config`\" pulumi-lang-python=\"`rke2_config`\" pulumi-lang-yaml=\"`rke2Config`\" pulumi-lang-java=\"`rke2Config`\"\u003e`rke2_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "istioEnabled": {
                    "type": "boolean",
                    "description": "(Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)\n"
                },
                "k3sConfig": {
                    "$ref": "#/types/rancher2:index/ClusterK3sConfig:ClusterK3sConfig",
                    "description": "The K3S configuration for \u003cspan pulumi-lang-nodejs=\"`k3s`\" pulumi-lang-dotnet=\"`K3s`\" pulumi-lang-go=\"`k3s`\" pulumi-lang-python=\"`k3s`\" pulumi-lang-yaml=\"`k3s`\" pulumi-lang-java=\"`k3s`\"\u003e`k3s`\u003c/span\u003e imported Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has \u003cspan pulumi-lang-nodejs=\"`clusterAuthEndpoint`\" pulumi-lang-dotnet=\"`ClusterAuthEndpoint`\" pulumi-lang-go=\"`clusterAuthEndpoint`\" pulumi-lang-python=\"`cluster_auth_endpoint`\" pulumi-lang-yaml=\"`clusterAuthEndpoint`\" pulumi-lang-java=\"`clusterAuthEndpoint`\"\u003e`cluster_auth_endpoint`\u003c/span\u003e enabled, the\u003cspan pulumi-lang-nodejs=\" kubeConfig \" pulumi-lang-dotnet=\" KubeConfig \" pulumi-lang-go=\" kubeConfig \" pulumi-lang-python=\" kube_config \" pulumi-lang-yaml=\" kubeConfig \" pulumi-lang-java=\" kubeConfig \"\u003e kube_config \u003c/span\u003ewill not be available until the cluster is \u003cspan pulumi-lang-nodejs=\"`connected`\" pulumi-lang-dotnet=\"`Connected`\" pulumi-lang-go=\"`connected`\" pulumi-lang-python=\"`connected`\" pulumi-lang-yaml=\"`connected`\" pulumi-lang-java=\"`connected`\"\u003e`connected`\u003c/span\u003e (string)\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "okeConfig": {
                    "$ref": "#/types/rancher2:index/ClusterOkeConfig:ClusterOkeConfig",
                    "description": "The Oracle OKE configuration for \u003cspan pulumi-lang-nodejs=\"`oke`\" pulumi-lang-dotnet=\"`Oke`\" pulumi-lang-go=\"`oke`\" pulumi-lang-python=\"`oke`\" pulumi-lang-yaml=\"`oke`\" pulumi-lang-java=\"`oke`\"\u003e`oke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "rke2Config": {
                    "$ref": "#/types/rancher2:index/ClusterRke2Config:ClusterRke2Config",
                    "description": "The RKE2 configuration for \u003cspan pulumi-lang-nodejs=\"`rke2`\" pulumi-lang-dotnet=\"`Rke2`\" pulumi-lang-go=\"`rke2`\" pulumi-lang-python=\"`rke2`\" pulumi-lang-yaml=\"`rke2`\" pulumi-lang-java=\"`rke2`\"\u003e`rke2`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfig:ClusterRkeConfig",
                    "description": "The RKE configuration for \u003cspan pulumi-lang-nodejs=\"`rke`\" pulumi-lang-dotnet=\"`Rke`\" pulumi-lang-go=\"`rke`\" pulumi-lang-python=\"`rke`\" pulumi-lang-yaml=\"`rke`\" pulumi-lang-java=\"`rke`\"\u003e`rke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "systemProjectId": {
                    "type": "string",
                    "description": "(Computed) System project ID for the cluster (string)\n"
                },
                "windowsPreferedCluster": {
                    "type": "boolean",
                    "description": "Windows preferred cluster. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                }
            },
            "required": [
                "annotations",
                "caCert",
                "clusterAuthEndpoint",
                "clusterRegistrationToken",
                "clusterTemplateAnswers",
                "clusterTemplateQuestions",
                "defaultPodSecurityAdmissionConfigurationTemplateName",
                "defaultProjectId",
                "desiredAgentImage",
                "desiredAuthImage",
                "dockerRootDir",
                "driver",
                "eksConfigV2",
                "enableClusterIstio",
                "enableNetworkPolicy",
                "fleetWorkspaceName",
                "istioEnabled",
                "k3sConfig",
                "kubeConfig",
                "labels",
                "name",
                "rke2Config",
                "rkeConfig",
                "systemProjectId"
            ],
            "inputProperties": {
                "agentEnvVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterAgentEnvVar:ClusterAgentEnvVar"
                    },
                    "description": "Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)\n"
                },
                "aksConfigV2": {
                    "$ref": "#/types/rancher2:index/ClusterAksConfigV2:ClusterAksConfigV2",
                    "description": "The Azure AKS v2 configuration for creating/import \u003cspan pulumi-lang-nodejs=\"`aks`\" pulumi-lang-dotnet=\"`Aks`\" pulumi-lang-go=\"`aks`\" pulumi-lang-python=\"`aks`\" pulumi-lang-yaml=\"`aks`\" pulumi-lang-java=\"`aks`\"\u003e`aks`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Cluster (map)\n"
                },
                "clusterAgentDeploymentCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterClusterAgentDeploymentCustomization:ClusterClusterAgentDeploymentCustomization"
                    },
                    "description": "Optional customization for cluster agent. For Rancher v2.7.5 and above (list)\n"
                },
                "clusterAuthEndpoint": {
                    "$ref": "#/types/rancher2:index/ClusterClusterAuthEndpoint:ClusterClusterAuthEndpoint",
                    "description": "Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)\n"
                },
                "clusterTemplateAnswers": {
                    "$ref": "#/types/rancher2:index/ClusterClusterTemplateAnswers:ClusterClusterTemplateAnswers",
                    "description": "Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)\n"
                },
                "clusterTemplateId": {
                    "type": "string",
                    "description": "Cluster template ID. For Rancher v2.3.x and above (string)\n"
                },
                "clusterTemplateQuestions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterClusterTemplateQuestion:ClusterClusterTemplateQuestion"
                    },
                    "description": "Cluster template questions. For Rancher v2.3.x and above (list)\n"
                },
                "clusterTemplateRevisionId": {
                    "type": "string",
                    "description": "Cluster template revision ID. For Rancher v2.3.x and above (string)\n"
                },
                "defaultPodSecurityAdmissionConfigurationTemplateName": {
                    "type": "string",
                    "description": "The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for Cluster (string)\n"
                },
                "desiredAgentImage": {
                    "type": "string",
                    "description": "Desired agent image. For Rancher v2.3.x and above (string)\n"
                },
                "desiredAuthImage": {
                    "type": "string",
                    "description": "Desired auth image. For Rancher v2.3.x and above (string)\n"
                },
                "dockerRootDir": {
                    "type": "string",
                    "description": "Desired auth image. For Rancher v2.3.x and above (string)\n"
                },
                "driver": {
                    "type": "string",
                    "description": "(Computed) The driver used for the Cluster. \u003cspan pulumi-lang-nodejs=\"`imported`\" pulumi-lang-dotnet=\"`Imported`\" pulumi-lang-go=\"`imported`\" pulumi-lang-python=\"`imported`\" pulumi-lang-yaml=\"`imported`\" pulumi-lang-java=\"`imported`\"\u003e`imported`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azurekubernetesservice`\" pulumi-lang-dotnet=\"`Azurekubernetesservice`\" pulumi-lang-go=\"`azurekubernetesservice`\" pulumi-lang-python=\"`azurekubernetesservice`\" pulumi-lang-yaml=\"`azurekubernetesservice`\" pulumi-lang-java=\"`azurekubernetesservice`\"\u003e`azurekubernetesservice`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`amazonelasticcontainerservice`\" pulumi-lang-dotnet=\"`Amazonelasticcontainerservice`\" pulumi-lang-go=\"`amazonelasticcontainerservice`\" pulumi-lang-python=\"`amazonelasticcontainerservice`\" pulumi-lang-yaml=\"`amazonelasticcontainerservice`\" pulumi-lang-java=\"`amazonelasticcontainerservice`\"\u003e`amazonelasticcontainerservice`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googlekubernetesengine`\" pulumi-lang-dotnet=\"`Googlekubernetesengine`\" pulumi-lang-go=\"`googlekubernetesengine`\" pulumi-lang-python=\"`googlekubernetesengine`\" pulumi-lang-yaml=\"`googlekubernetesengine`\" pulumi-lang-java=\"`googlekubernetesengine`\"\u003e`googlekubernetesengine`\u003c/span\u003e and `rancherKubernetesEngine` are supported (string)\n"
                },
                "eksConfigV2": {
                    "$ref": "#/types/rancher2:index/ClusterEksConfigV2:ClusterEksConfigV2",
                    "description": "The Amazon EKS V2 configuration to create or import \u003cspan pulumi-lang-nodejs=\"`eks`\" pulumi-lang-dotnet=\"`Eks`\" pulumi-lang-go=\"`eks`\" pulumi-lang-python=\"`eks`\" pulumi-lang-yaml=\"`eks`\" pulumi-lang-java=\"`eks`\"\u003e`eks`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e. For Rancher v2.5.x and above (list maxitems:1)\n"
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "description": "Enable project network isolation (bool)\n"
                },
                "fleetAgentDeploymentCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterFleetAgentDeploymentCustomization:ClusterFleetAgentDeploymentCustomization"
                    },
                    "description": "Optional customization for fleet agent. For Rancher v2.7.5 and above (list)\n"
                },
                "fleetWorkspaceName": {
                    "type": "string",
                    "description": "Fleet workspace name (string)\n"
                },
                "gkeConfigV2": {
                    "$ref": "#/types/rancher2:index/ClusterGkeConfigV2:ClusterGkeConfigV2",
                    "description": "The Google GKE V2 configuration for \u003cspan pulumi-lang-nodejs=\"`gke`\" pulumi-lang-dotnet=\"`Gke`\" pulumi-lang-go=\"`gke`\" pulumi-lang-python=\"`gke`\" pulumi-lang-yaml=\"`gke`\" pulumi-lang-java=\"`gke`\"\u003e`gke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e. For Rancher v2.5.8 and above (list maxitems:1)\n"
                },
                "importedConfig": {
                    "$ref": "#/types/rancher2:index/ClusterImportedConfig:ClusterImportedConfig",
                    "description": "The imported configuration for generic imported Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`rke2Config`\" pulumi-lang-dotnet=\"`Rke2Config`\" pulumi-lang-go=\"`rke2Config`\" pulumi-lang-python=\"`rke2_config`\" pulumi-lang-yaml=\"`rke2Config`\" pulumi-lang-java=\"`rke2Config`\"\u003e`rke2_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "k3sConfig": {
                    "$ref": "#/types/rancher2:index/ClusterK3sConfig:ClusterK3sConfig",
                    "description": "The K3S configuration for \u003cspan pulumi-lang-nodejs=\"`k3s`\" pulumi-lang-dotnet=\"`K3s`\" pulumi-lang-go=\"`k3s`\" pulumi-lang-python=\"`k3s`\" pulumi-lang-yaml=\"`k3s`\" pulumi-lang-java=\"`k3s`\"\u003e`k3s`\u003c/span\u003e imported Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cluster (string)\n"
                },
                "okeConfig": {
                    "$ref": "#/types/rancher2:index/ClusterOkeConfig:ClusterOkeConfig",
                    "description": "The Oracle OKE configuration for \u003cspan pulumi-lang-nodejs=\"`oke`\" pulumi-lang-dotnet=\"`Oke`\" pulumi-lang-go=\"`oke`\" pulumi-lang-python=\"`oke`\" pulumi-lang-yaml=\"`oke`\" pulumi-lang-java=\"`oke`\"\u003e`oke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "rke2Config": {
                    "$ref": "#/types/rancher2:index/ClusterRke2Config:ClusterRke2Config",
                    "description": "The RKE2 configuration for \u003cspan pulumi-lang-nodejs=\"`rke2`\" pulumi-lang-dotnet=\"`Rke2`\" pulumi-lang-go=\"`rke2`\" pulumi-lang-python=\"`rke2`\" pulumi-lang-yaml=\"`rke2`\" pulumi-lang-java=\"`rke2`\"\u003e`rke2`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:index/ClusterRkeConfig:ClusterRkeConfig",
                    "description": "The RKE configuration for \u003cspan pulumi-lang-nodejs=\"`rke`\" pulumi-lang-dotnet=\"`Rke`\" pulumi-lang-go=\"`rke`\" pulumi-lang-python=\"`rke`\" pulumi-lang-yaml=\"`rke`\" pulumi-lang-java=\"`rke`\"\u003e`rke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "windowsPreferedCluster": {
                    "type": "boolean",
                    "description": "Windows preferred cluster. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "agentEnvVars": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterAgentEnvVar:ClusterAgentEnvVar"
                        },
                        "description": "Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)\n"
                    },
                    "aksConfigV2": {
                        "$ref": "#/types/rancher2:index/ClusterAksConfigV2:ClusterAksConfigV2",
                        "description": "The Azure AKS v2 configuration for creating/import \u003cspan pulumi-lang-nodejs=\"`aks`\" pulumi-lang-dotnet=\"`Aks`\" pulumi-lang-go=\"`aks`\" pulumi-lang-python=\"`aks`\" pulumi-lang-yaml=\"`aks`\" pulumi-lang-java=\"`aks`\"\u003e`aks`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Cluster (map)\n"
                    },
                    "caCert": {
                        "type": "string",
                        "description": "(Computed/Sensitive) K8s cluster ca cert (string)\n",
                        "secret": true
                    },
                    "clusterAgentDeploymentCustomizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterClusterAgentDeploymentCustomization:ClusterClusterAgentDeploymentCustomization"
                        },
                        "description": "Optional customization for cluster agent. For Rancher v2.7.5 and above (list)\n"
                    },
                    "clusterAuthEndpoint": {
                        "$ref": "#/types/rancher2:index/ClusterClusterAuthEndpoint:ClusterClusterAuthEndpoint",
                        "description": "Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)\n"
                    },
                    "clusterRegistrationToken": {
                        "$ref": "#/types/rancher2:index/ClusterClusterRegistrationToken:ClusterClusterRegistrationToken",
                        "description": "(Computed) Cluster Registration Token generated for the cluster (list maxitems:1)\n"
                    },
                    "clusterTemplateAnswers": {
                        "$ref": "#/types/rancher2:index/ClusterClusterTemplateAnswers:ClusterClusterTemplateAnswers",
                        "description": "Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)\n"
                    },
                    "clusterTemplateId": {
                        "type": "string",
                        "description": "Cluster template ID. For Rancher v2.3.x and above (string)\n"
                    },
                    "clusterTemplateQuestions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterClusterTemplateQuestion:ClusterClusterTemplateQuestion"
                        },
                        "description": "Cluster template questions. For Rancher v2.3.x and above (list)\n"
                    },
                    "clusterTemplateRevisionId": {
                        "type": "string",
                        "description": "Cluster template revision ID. For Rancher v2.3.x and above (string)\n"
                    },
                    "defaultPodSecurityAdmissionConfigurationTemplateName": {
                        "type": "string",
                        "description": "The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)\n"
                    },
                    "defaultProjectId": {
                        "type": "string",
                        "description": "(Computed) Default project ID for the cluster (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for Cluster (string)\n"
                    },
                    "desiredAgentImage": {
                        "type": "string",
                        "description": "Desired agent image. For Rancher v2.3.x and above (string)\n"
                    },
                    "desiredAuthImage": {
                        "type": "string",
                        "description": "Desired auth image. For Rancher v2.3.x and above (string)\n"
                    },
                    "dockerRootDir": {
                        "type": "string",
                        "description": "Desired auth image. For Rancher v2.3.x and above (string)\n"
                    },
                    "driver": {
                        "type": "string",
                        "description": "(Computed) The driver used for the Cluster. \u003cspan pulumi-lang-nodejs=\"`imported`\" pulumi-lang-dotnet=\"`Imported`\" pulumi-lang-go=\"`imported`\" pulumi-lang-python=\"`imported`\" pulumi-lang-yaml=\"`imported`\" pulumi-lang-java=\"`imported`\"\u003e`imported`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azurekubernetesservice`\" pulumi-lang-dotnet=\"`Azurekubernetesservice`\" pulumi-lang-go=\"`azurekubernetesservice`\" pulumi-lang-python=\"`azurekubernetesservice`\" pulumi-lang-yaml=\"`azurekubernetesservice`\" pulumi-lang-java=\"`azurekubernetesservice`\"\u003e`azurekubernetesservice`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`amazonelasticcontainerservice`\" pulumi-lang-dotnet=\"`Amazonelasticcontainerservice`\" pulumi-lang-go=\"`amazonelasticcontainerservice`\" pulumi-lang-python=\"`amazonelasticcontainerservice`\" pulumi-lang-yaml=\"`amazonelasticcontainerservice`\" pulumi-lang-java=\"`amazonelasticcontainerservice`\"\u003e`amazonelasticcontainerservice`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googlekubernetesengine`\" pulumi-lang-dotnet=\"`Googlekubernetesengine`\" pulumi-lang-go=\"`googlekubernetesengine`\" pulumi-lang-python=\"`googlekubernetesengine`\" pulumi-lang-yaml=\"`googlekubernetesengine`\" pulumi-lang-java=\"`googlekubernetesengine`\"\u003e`googlekubernetesengine`\u003c/span\u003e and `rancherKubernetesEngine` are supported (string)\n"
                    },
                    "eksConfigV2": {
                        "$ref": "#/types/rancher2:index/ClusterEksConfigV2:ClusterEksConfigV2",
                        "description": "The Amazon EKS V2 configuration to create or import \u003cspan pulumi-lang-nodejs=\"`eks`\" pulumi-lang-dotnet=\"`Eks`\" pulumi-lang-go=\"`eks`\" pulumi-lang-python=\"`eks`\" pulumi-lang-yaml=\"`eks`\" pulumi-lang-java=\"`eks`\"\u003e`eks`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e. For Rancher v2.5.x and above (list maxitems:1)\n"
                    },
                    "enableClusterIstio": {
                        "type": "boolean",
                        "description": "Deploy istio on \u003cspan pulumi-lang-nodejs=\"`system`\" pulumi-lang-dotnet=\"`System`\" pulumi-lang-go=\"`system`\" pulumi-lang-python=\"`system`\" pulumi-lang-yaml=\"`system`\" pulumi-lang-java=\"`system`\"\u003e`system`\u003c/span\u003e project and `istio-system` namespace, using\u003cspan pulumi-lang-nodejs=\" rancher2App \" pulumi-lang-dotnet=\" Rancher2App \" pulumi-lang-go=\" rancher2App \" pulumi-lang-python=\" rancher2_app \" pulumi-lang-yaml=\" rancher2App \" pulumi-lang-java=\" rancher2App \"\u003e rancher2_app \u003c/span\u003eresource instead. See above example.\n",
                        "deprecationMessage": "Deploy istio using\u003cspan pulumi-lang-nodejs=\" rancher2App \" pulumi-lang-dotnet=\" Rancher2App \" pulumi-lang-go=\" rancher2App \" pulumi-lang-python=\" rancher2_app \" pulumi-lang-yaml=\" rancher2App \" pulumi-lang-java=\" rancher2App \"\u003e rancher2_app \u003c/span\u003eresource instead"
                    },
                    "enableNetworkPolicy": {
                        "type": "boolean",
                        "description": "Enable project network isolation (bool)\n"
                    },
                    "fleetAgentDeploymentCustomizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterFleetAgentDeploymentCustomization:ClusterFleetAgentDeploymentCustomization"
                        },
                        "description": "Optional customization for fleet agent. For Rancher v2.7.5 and above (list)\n"
                    },
                    "fleetWorkspaceName": {
                        "type": "string",
                        "description": "Fleet workspace name (string)\n"
                    },
                    "gkeConfigV2": {
                        "$ref": "#/types/rancher2:index/ClusterGkeConfigV2:ClusterGkeConfigV2",
                        "description": "The Google GKE V2 configuration for \u003cspan pulumi-lang-nodejs=\"`gke`\" pulumi-lang-dotnet=\"`Gke`\" pulumi-lang-go=\"`gke`\" pulumi-lang-python=\"`gke`\" pulumi-lang-yaml=\"`gke`\" pulumi-lang-java=\"`gke`\"\u003e`gke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e. For Rancher v2.5.8 and above (list maxitems:1)\n"
                    },
                    "importedConfig": {
                        "$ref": "#/types/rancher2:index/ClusterImportedConfig:ClusterImportedConfig",
                        "description": "The imported configuration for generic imported Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`rke2Config`\" pulumi-lang-dotnet=\"`Rke2Config`\" pulumi-lang-go=\"`rke2Config`\" pulumi-lang-python=\"`rke2_config`\" pulumi-lang-yaml=\"`rke2Config`\" pulumi-lang-java=\"`rke2Config`\"\u003e`rke2_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "istioEnabled": {
                        "type": "boolean",
                        "description": "(Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)\n"
                    },
                    "k3sConfig": {
                        "$ref": "#/types/rancher2:index/ClusterK3sConfig:ClusterK3sConfig",
                        "description": "The K3S configuration for \u003cspan pulumi-lang-nodejs=\"`k3s`\" pulumi-lang-dotnet=\"`K3s`\" pulumi-lang-go=\"`k3s`\" pulumi-lang-python=\"`k3s`\" pulumi-lang-yaml=\"`k3s`\" pulumi-lang-java=\"`k3s`\"\u003e`k3s`\u003c/span\u003e imported Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "kubeConfig": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has \u003cspan pulumi-lang-nodejs=\"`clusterAuthEndpoint`\" pulumi-lang-dotnet=\"`ClusterAuthEndpoint`\" pulumi-lang-go=\"`clusterAuthEndpoint`\" pulumi-lang-python=\"`cluster_auth_endpoint`\" pulumi-lang-yaml=\"`clusterAuthEndpoint`\" pulumi-lang-java=\"`clusterAuthEndpoint`\"\u003e`cluster_auth_endpoint`\u003c/span\u003e enabled, the\u003cspan pulumi-lang-nodejs=\" kubeConfig \" pulumi-lang-dotnet=\" KubeConfig \" pulumi-lang-go=\" kubeConfig \" pulumi-lang-python=\" kube_config \" pulumi-lang-yaml=\" kubeConfig \" pulumi-lang-java=\" kubeConfig \"\u003e kube_config \u003c/span\u003ewill not be available until the cluster is \u003cspan pulumi-lang-nodejs=\"`connected`\" pulumi-lang-dotnet=\"`Connected`\" pulumi-lang-go=\"`connected`\" pulumi-lang-python=\"`connected`\" pulumi-lang-yaml=\"`connected`\" pulumi-lang-java=\"`connected`\"\u003e`connected`\u003c/span\u003e (string)\n",
                        "secret": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Cluster (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cluster (string)\n"
                    },
                    "okeConfig": {
                        "$ref": "#/types/rancher2:index/ClusterOkeConfig:ClusterOkeConfig",
                        "description": "The Oracle OKE configuration for \u003cspan pulumi-lang-nodejs=\"`oke`\" pulumi-lang-dotnet=\"`Oke`\" pulumi-lang-go=\"`oke`\" pulumi-lang-python=\"`oke`\" pulumi-lang-yaml=\"`oke`\" pulumi-lang-java=\"`oke`\"\u003e`oke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "rke2Config": {
                        "$ref": "#/types/rancher2:index/ClusterRke2Config:ClusterRke2Config",
                        "description": "The RKE2 configuration for \u003cspan pulumi-lang-nodejs=\"`rke2`\" pulumi-lang-dotnet=\"`Rke2`\" pulumi-lang-go=\"`rke2`\" pulumi-lang-python=\"`rke2`\" pulumi-lang-yaml=\"`rke2`\" pulumi-lang-java=\"`rke2`\"\u003e`rke2`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "rkeConfig": {
                        "$ref": "#/types/rancher2:index/ClusterRkeConfig:ClusterRkeConfig",
                        "description": "The RKE configuration for \u003cspan pulumi-lang-nodejs=\"`rke`\" pulumi-lang-dotnet=\"`Rke`\" pulumi-lang-go=\"`rke`\" pulumi-lang-python=\"`rke`\" pulumi-lang-yaml=\"`rke`\" pulumi-lang-java=\"`rke`\"\u003e`rke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`okeConfig`\" pulumi-lang-dotnet=\"`OkeConfig`\" pulumi-lang-go=\"`okeConfig`\" pulumi-lang-python=\"`oke_config`\" pulumi-lang-yaml=\"`okeConfig`\" pulumi-lang-java=\"`okeConfig`\"\u003e`oke_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "systemProjectId": {
                        "type": "string",
                        "description": "(Computed) System project ID for the cluster (string)\n"
                    },
                    "windowsPreferedCluster": {
                        "type": "boolean",
                        "description": "Windows preferred cluster. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterDriver:ClusterDriver": {
            "description": "Provides a Rancher v2 Cluster Driver resource. This can be used to create Cluster Driver for Rancher v2.2.x Kontainer Engine clusters and retrieve their information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  # Create a new Rancher2 Cluster Driver\n  foo:\n    type: rancher2:ClusterDriver\n    properties:\n      active: true\n      builtin: false\n      checksum: 0x0\n      description: Foo description\n      externalId: foo_external\n      name: foo\n      uiUrl: local://ui\n      url: local://\n      whitelistDomains:\n        - '*.foo.com'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nCluster Driver can be imported using the Rancher Cluster Driver ID\n\n```sh\n$ pulumi import rancher2:index/clusterDriver:ClusterDriver foo \u0026lt;CLUSTER_DRIVER_ID\u0026gt;\n```\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Specify the cluster driver state (bool)\n"
                },
                "actualUrl": {
                    "type": "string",
                    "description": "Actual url of the cluster driver (string)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "Specify whether the cluster driver is an internal cluster driver or not (bool)\n"
                },
                "checksum": {
                    "type": "string",
                    "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster driver (string)\n"
                },
                "uiUrl": {
                    "type": "string",
                    "description": "The URL to load for customized Add Clusters screen for this driver (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                },
                "whitelistDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domains to whitelist for the ui (list)\n"
                }
            },
            "required": [
                "active",
                "annotations",
                "builtin",
                "labels",
                "name",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Specify the cluster driver state (bool)\n"
                },
                "actualUrl": {
                    "type": "string",
                    "description": "Actual url of the cluster driver (string)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "Specify whether the cluster driver is an internal cluster driver or not (bool)\n"
                },
                "checksum": {
                    "type": "string",
                    "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster driver (string)\n"
                },
                "uiUrl": {
                    "type": "string",
                    "description": "The URL to load for customized Add Clusters screen for this driver (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                },
                "whitelistDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domains to whitelist for the ui (list)\n"
                }
            },
            "requiredInputs": [
                "active",
                "builtin",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterDriver resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Specify the cluster driver state (bool)\n"
                    },
                    "actualUrl": {
                        "type": "string",
                        "description": "Actual url of the cluster driver (string)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "Specify whether the cluster driver is an internal cluster driver or not (bool)\n"
                    },
                    "checksum": {
                        "type": "string",
                        "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster driver (string)\n"
                    },
                    "uiUrl": {
                        "type": "string",
                        "description": "The URL to load for customized Add Clusters screen for this driver (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                    },
                    "whitelistDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Domains to whitelist for the ui (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterRoleTemplateBinding:ClusterRoleTemplateBinding": {
            "description": "Provides a Rancher v2 Cluster Role Template Binding resource. This can be used to create Cluster Role Template Bindings for Rancher v2 environments and retrieve their information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new Rancher2 Cluster Role Template Binding\nconst foo = new rancher2.ClusterRoleTemplateBinding(\"foo\", {\n    name: \"foo\",\n    clusterId: \"\u003ccluster_id\u003e\",\n    roleTemplateId: \"\u003crole_template_id\u003e\",\n    userId: \"\u003cuser_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new Rancher2 Cluster Role Template Binding\nfoo = rancher2.ClusterRoleTemplateBinding(\"foo\",\n    name=\"foo\",\n    cluster_id=\"\u003ccluster_id\u003e\",\n    role_template_id=\"\u003crole_template_id\u003e\",\n    user_id=\"\u003cuser_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new Rancher2 Cluster Role Template Binding\n    var foo = new Rancher2.ClusterRoleTemplateBinding(\"foo\", new()\n    {\n        Name = \"foo\",\n        ClusterId = \"\u003ccluster_id\u003e\",\n        RoleTemplateId = \"\u003crole_template_id\u003e\",\n        UserId = \"\u003cuser_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new Rancher2 Cluster Role Template Binding\n\t\t_, err := rancher2.NewClusterRoleTemplateBinding(ctx, \"foo\", \u0026rancher2.ClusterRoleTemplateBindingArgs{\n\t\t\tName:           pulumi.String(\"foo\"),\n\t\t\tClusterId:      pulumi.String(\"\u003ccluster_id\u003e\"),\n\t\t\tRoleTemplateId: pulumi.String(\"\u003crole_template_id\u003e\"),\n\t\t\tUserId:         pulumi.String(\"\u003cuser_id\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.ClusterRoleTemplateBinding;\nimport com.pulumi.rancher2.ClusterRoleTemplateBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new Rancher2 Cluster Role Template Binding\n        var foo = new ClusterRoleTemplateBinding(\"foo\", ClusterRoleTemplateBindingArgs.builder()\n            .name(\"foo\")\n            .clusterId(\"\u003ccluster_id\u003e\")\n            .roleTemplateId(\"\u003crole_template_id\u003e\")\n            .userId(\"\u003cuser_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Rancher2 Cluster Role Template Binding\n  foo:\n    type: rancher2:ClusterRoleTemplateBinding\n    properties:\n      name: foo\n      clusterId: \u003ccluster_id\u003e\n      roleTemplateId: \u003crole_template_id\u003e\n      userId: \u003cuser_id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nCluster Role Template Bindings can be imported using the Rancher cluster Role Template Binding ID\n\n```sh\n$ pulumi import rancher2:index/clusterRoleTemplateBinding:ClusterRoleTemplateBinding foo \u0026lt;CLUSTER_ROLE_TEMPLATE_BINDING_ID\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for cluster role template binding (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where bind cluster role template binding (string)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The group ID to assign cluster role template binding (string)\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The\u003cspan pulumi-lang-nodejs=\" groupPrincipal \" pulumi-lang-dotnet=\" GroupPrincipal \" pulumi-lang-go=\" groupPrincipal \" pulumi-lang-python=\" group_principal \" pulumi-lang-yaml=\" groupPrincipal \" pulumi-lang-java=\" groupPrincipal \"\u003e group_principal \u003c/span\u003eID to assign cluster role template binding (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for cluster role template binding (map)\n\n**Note:** user \u003cspan pulumi-lang-nodejs=\"`userId \" pulumi-lang-dotnet=\"`UserId \" pulumi-lang-go=\"`userId \" pulumi-lang-python=\"`user_id \" pulumi-lang-yaml=\"`userId \" pulumi-lang-java=\"`userId \"\u003e`user_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" userPrincipalId`\" pulumi-lang-dotnet=\" UserPrincipalId`\" pulumi-lang-go=\" userPrincipalId`\" pulumi-lang-python=\" user_principal_id`\" pulumi-lang-yaml=\" userPrincipalId`\" pulumi-lang-java=\" userPrincipalId`\"\u003e user_principal_id`\u003c/span\u003e OR group \u003cspan pulumi-lang-nodejs=\"`groupId \" pulumi-lang-dotnet=\"`GroupId \" pulumi-lang-go=\"`groupId \" pulumi-lang-python=\"`group_id \" pulumi-lang-yaml=\"`groupId \" pulumi-lang-java=\"`groupId \"\u003e`group_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" groupPrincipalId`\" pulumi-lang-dotnet=\" GroupPrincipalId`\" pulumi-lang-go=\" groupPrincipalId`\" pulumi-lang-python=\" group_principal_id`\" pulumi-lang-yaml=\" groupPrincipalId`\" pulumi-lang-java=\" groupPrincipalId`\"\u003e group_principal_id`\u003c/span\u003e must be defined\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster role template binding (string)\n"
                },
                "roleTemplateId": {
                    "type": "string",
                    "description": "The role template id from create cluster role template binding (string)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign cluster role template binding (string)\n"
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "The\u003cspan pulumi-lang-nodejs=\" userPrincipal \" pulumi-lang-dotnet=\" UserPrincipal \" pulumi-lang-go=\" userPrincipal \" pulumi-lang-python=\" user_principal \" pulumi-lang-yaml=\" userPrincipal \" pulumi-lang-java=\" userPrincipal \"\u003e user_principal \u003c/span\u003eID to assign cluster role template binding (string)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "groupId",
                "groupPrincipalId",
                "labels",
                "name",
                "roleTemplateId",
                "userId",
                "userPrincipalId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for cluster role template binding (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where bind cluster role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "groupId": {
                    "type": "string",
                    "description": "The group ID to assign cluster role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The\u003cspan pulumi-lang-nodejs=\" groupPrincipal \" pulumi-lang-dotnet=\" GroupPrincipal \" pulumi-lang-go=\" groupPrincipal \" pulumi-lang-python=\" group_principal \" pulumi-lang-yaml=\" groupPrincipal \" pulumi-lang-java=\" groupPrincipal \"\u003e group_principal \u003c/span\u003eID to assign cluster role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for cluster role template binding (map)\n\n**Note:** user \u003cspan pulumi-lang-nodejs=\"`userId \" pulumi-lang-dotnet=\"`UserId \" pulumi-lang-go=\"`userId \" pulumi-lang-python=\"`user_id \" pulumi-lang-yaml=\"`userId \" pulumi-lang-java=\"`userId \"\u003e`user_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" userPrincipalId`\" pulumi-lang-dotnet=\" UserPrincipalId`\" pulumi-lang-go=\" userPrincipalId`\" pulumi-lang-python=\" user_principal_id`\" pulumi-lang-yaml=\" userPrincipalId`\" pulumi-lang-java=\" userPrincipalId`\"\u003e user_principal_id`\u003c/span\u003e OR group \u003cspan pulumi-lang-nodejs=\"`groupId \" pulumi-lang-dotnet=\"`GroupId \" pulumi-lang-go=\"`groupId \" pulumi-lang-python=\"`group_id \" pulumi-lang-yaml=\"`groupId \" pulumi-lang-java=\"`groupId \"\u003e`group_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" groupPrincipalId`\" pulumi-lang-dotnet=\" GroupPrincipalId`\" pulumi-lang-go=\" groupPrincipalId`\" pulumi-lang-python=\" group_principal_id`\" pulumi-lang-yaml=\" groupPrincipalId`\" pulumi-lang-java=\" groupPrincipalId`\"\u003e group_principal_id`\u003c/span\u003e must be defined\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "roleTemplateId": {
                    "type": "string",
                    "description": "The role template id from create cluster role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign cluster role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "The\u003cspan pulumi-lang-nodejs=\" userPrincipal \" pulumi-lang-dotnet=\" UserPrincipal \" pulumi-lang-go=\" userPrincipal \" pulumi-lang-python=\" user_principal \" pulumi-lang-yaml=\" userPrincipal \" pulumi-lang-java=\" userPrincipal \"\u003e user_principal \u003c/span\u003eID to assign cluster role template binding (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "roleTemplateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterRoleTemplateBinding resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for cluster role template binding (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where bind cluster role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The group ID to assign cluster role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "groupPrincipalId": {
                        "type": "string",
                        "description": "The\u003cspan pulumi-lang-nodejs=\" groupPrincipal \" pulumi-lang-dotnet=\" GroupPrincipal \" pulumi-lang-go=\" groupPrincipal \" pulumi-lang-python=\" group_principal \" pulumi-lang-yaml=\" groupPrincipal \" pulumi-lang-java=\" groupPrincipal \"\u003e group_principal \u003c/span\u003eID to assign cluster role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for cluster role template binding (map)\n\n**Note:** user \u003cspan pulumi-lang-nodejs=\"`userId \" pulumi-lang-dotnet=\"`UserId \" pulumi-lang-go=\"`userId \" pulumi-lang-python=\"`user_id \" pulumi-lang-yaml=\"`userId \" pulumi-lang-java=\"`userId \"\u003e`user_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" userPrincipalId`\" pulumi-lang-dotnet=\" UserPrincipalId`\" pulumi-lang-go=\" userPrincipalId`\" pulumi-lang-python=\" user_principal_id`\" pulumi-lang-yaml=\" userPrincipalId`\" pulumi-lang-java=\" userPrincipalId`\"\u003e user_principal_id`\u003c/span\u003e OR group \u003cspan pulumi-lang-nodejs=\"`groupId \" pulumi-lang-dotnet=\"`GroupId \" pulumi-lang-go=\"`groupId \" pulumi-lang-python=\"`group_id \" pulumi-lang-yaml=\"`groupId \" pulumi-lang-java=\"`groupId \"\u003e`group_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" groupPrincipalId`\" pulumi-lang-dotnet=\" GroupPrincipalId`\" pulumi-lang-go=\" groupPrincipalId`\" pulumi-lang-python=\" group_principal_id`\" pulumi-lang-yaml=\" groupPrincipalId`\" pulumi-lang-java=\" groupPrincipalId`\"\u003e group_principal_id`\u003c/span\u003e must be defined\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "roleTemplateId": {
                        "type": "string",
                        "description": "The role template id from create cluster role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID to assign cluster role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "userPrincipalId": {
                        "type": "string",
                        "description": "The\u003cspan pulumi-lang-nodejs=\" userPrincipal \" pulumi-lang-dotnet=\" UserPrincipal \" pulumi-lang-go=\" userPrincipal \" pulumi-lang-python=\" user_principal \" pulumi-lang-yaml=\" userPrincipal \" pulumi-lang-java=\" userPrincipal \"\u003e user_principal \u003c/span\u003eID to assign cluster role template binding (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterSync:ClusterSync": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 rke Cluster \nconst foo_custom = new rancher2.Cluster(\"foo-custom\", {\n    name: \"foo-custom\",\n    description: \"Foo rancher2 custom cluster\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n    },\n});\n// Create a new rancher2 Node Template\nconst foo = new rancher2.NodeTemplate(\"foo\", {\n    name: \"foo\",\n    description: \"foo test\",\n    amazonec2Config: {\n        accessKey: \"\u003cAWS_ACCESS_KEY\u003e\",\n        secretKey: \"\u003cAWS_SECRET_KEY\u003e\",\n        ami: \"\u003cAMI_ID\u003e\",\n        region: \"\u003cREGION\u003e\",\n        securityGroups: [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        subnetId: \"\u003cSUBNET_ID\u003e\",\n        vpcId: \"\u003cVPC_ID\u003e\",\n        zone: \"\u003cZONE\u003e\",\n    },\n});\n// Create a new rancher2 Node Pool\nconst fooNodePool = new rancher2.NodePool(\"foo\", {\n    clusterId: foo_custom.id,\n    name: \"foo\",\n    hostnamePrefix: \"foo-cluster-0\",\n    nodeTemplateId: foo.id,\n    quantity: 3,\n    controlPlane: true,\n    etcd: true,\n    worker: true,\n});\n// Create a new rancher2 Cluster Sync\nconst foo_customClusterSync = new rancher2.ClusterSync(\"foo-custom\", {\n    clusterId: foo_custom.id,\n    nodePoolIds: [fooNodePool.id],\n});\n// Create a new rancher2 Project\nconst fooProject = new rancher2.Project(\"foo\", {\n    name: \"foo\",\n    clusterId: foo_customClusterSync.id,\n    description: \"Terraform namespace acceptance test\",\n    resourceQuota: {\n        projectLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"2000Mi\",\n            requestsStorage: \"2Gi\",\n        },\n        namespaceDefaultLimit: {\n            limitsCpu: \"500m\",\n            limitsMemory: \"500Mi\",\n            requestsStorage: \"1Gi\",\n        },\n    },\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 rke Cluster \nfoo_custom = rancher2.Cluster(\"foo-custom\",\n    name=\"foo-custom\",\n    description=\"Foo rancher2 custom cluster\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n    })\n# Create a new rancher2 Node Template\nfoo = rancher2.NodeTemplate(\"foo\",\n    name=\"foo\",\n    description=\"foo test\",\n    amazonec2_config={\n        \"access_key\": \"\u003cAWS_ACCESS_KEY\u003e\",\n        \"secret_key\": \"\u003cAWS_SECRET_KEY\u003e\",\n        \"ami\": \"\u003cAMI_ID\u003e\",\n        \"region\": \"\u003cREGION\u003e\",\n        \"security_groups\": [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        \"subnet_id\": \"\u003cSUBNET_ID\u003e\",\n        \"vpc_id\": \"\u003cVPC_ID\u003e\",\n        \"zone\": \"\u003cZONE\u003e\",\n    })\n# Create a new rancher2 Node Pool\nfoo_node_pool = rancher2.NodePool(\"foo\",\n    cluster_id=foo_custom.id,\n    name=\"foo\",\n    hostname_prefix=\"foo-cluster-0\",\n    node_template_id=foo.id,\n    quantity=3,\n    control_plane=True,\n    etcd=True,\n    worker=True)\n# Create a new rancher2 Cluster Sync\nfoo_custom_cluster_sync = rancher2.ClusterSync(\"foo-custom\",\n    cluster_id=foo_custom.id,\n    node_pool_ids=[foo_node_pool.id])\n# Create a new rancher2 Project\nfoo_project = rancher2.Project(\"foo\",\n    name=\"foo\",\n    cluster_id=foo_custom_cluster_sync.id,\n    description=\"Terraform namespace acceptance test\",\n    resource_quota={\n        \"project_limit\": {\n            \"limits_cpu\": \"2000m\",\n            \"limits_memory\": \"2000Mi\",\n            \"requests_storage\": \"2Gi\",\n        },\n        \"namespace_default_limit\": {\n            \"limits_cpu\": \"500m\",\n            \"limits_memory\": \"500Mi\",\n            \"requests_storage\": \"1Gi\",\n        },\n    },\n    container_resource_limit={\n        \"limits_cpu\": \"20m\",\n        \"limits_memory\": \"20Mi\",\n        \"requests_cpu\": \"1m\",\n        \"requests_memory\": \"1Mi\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 rke Cluster \n    var foo_custom = new Rancher2.Cluster(\"foo-custom\", new()\n    {\n        Name = \"foo-custom\",\n        Description = \"Foo rancher2 custom cluster\",\n        RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs\n        {\n            Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs\n            {\n                Plugin = \"canal\",\n            },\n        },\n    });\n\n    // Create a new rancher2 Node Template\n    var foo = new Rancher2.NodeTemplate(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo test\",\n        Amazonec2Config = new Rancher2.Inputs.NodeTemplateAmazonec2ConfigArgs\n        {\n            AccessKey = \"\u003cAWS_ACCESS_KEY\u003e\",\n            SecretKey = \"\u003cAWS_SECRET_KEY\u003e\",\n            Ami = \"\u003cAMI_ID\u003e\",\n            Region = \"\u003cREGION\u003e\",\n            SecurityGroups = new[]\n            {\n                \"\u003cAWS_SECURITY_GROUP\u003e\",\n            },\n            SubnetId = \"\u003cSUBNET_ID\u003e\",\n            VpcId = \"\u003cVPC_ID\u003e\",\n            Zone = \"\u003cZONE\u003e\",\n        },\n    });\n\n    // Create a new rancher2 Node Pool\n    var fooNodePool = new Rancher2.NodePool(\"foo\", new()\n    {\n        ClusterId = foo_custom.Id,\n        Name = \"foo\",\n        HostnamePrefix = \"foo-cluster-0\",\n        NodeTemplateId = foo.Id,\n        Quantity = 3,\n        ControlPlane = true,\n        Etcd = true,\n        Worker = true,\n    });\n\n    // Create a new rancher2 Cluster Sync\n    var foo_customClusterSync = new Rancher2.ClusterSync(\"foo-custom\", new()\n    {\n        ClusterId = foo_custom.Id,\n        NodePoolIds = new[]\n        {\n            fooNodePool.Id,\n        },\n    });\n\n    // Create a new rancher2 Project\n    var fooProject = new Rancher2.Project(\"foo\", new()\n    {\n        Name = \"foo\",\n        ClusterId = foo_customClusterSync.Id,\n        Description = \"Terraform namespace acceptance test\",\n        ResourceQuota = new Rancher2.Inputs.ProjectResourceQuotaArgs\n        {\n            ProjectLimit = new Rancher2.Inputs.ProjectResourceQuotaProjectLimitArgs\n            {\n                LimitsCpu = \"2000m\",\n                LimitsMemory = \"2000Mi\",\n                RequestsStorage = \"2Gi\",\n            },\n            NamespaceDefaultLimit = new Rancher2.Inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs\n            {\n                LimitsCpu = \"500m\",\n                LimitsMemory = \"500Mi\",\n                RequestsStorage = \"1Gi\",\n            },\n        },\n        ContainerResourceLimit = new Rancher2.Inputs.ProjectContainerResourceLimitArgs\n        {\n            LimitsCpu = \"20m\",\n            LimitsMemory = \"20Mi\",\n            RequestsCpu = \"1m\",\n            RequestsMemory = \"1Mi\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 rke Cluster\n\t\tfoo_custom, err := rancher2.NewCluster(ctx, \"foo-custom\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo-custom\"),\n\t\t\tDescription: pulumi.String(\"Foo rancher2 custom cluster\"),\n\t\t\tRkeConfig: \u0026rancher2.ClusterRkeConfigArgs{\n\t\t\t\tNetwork: \u0026rancher2.ClusterRkeConfigNetworkArgs{\n\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Node Template\n\t\tfoo, err := rancher2.NewNodeTemplate(ctx, \"foo\", \u0026rancher2.NodeTemplateArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t\tAmazonec2Config: \u0026rancher2.NodeTemplateAmazonec2ConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"\u003cAWS_ACCESS_KEY\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003cAWS_SECRET_KEY\u003e\"),\n\t\t\t\tAmi:       pulumi.String(\"\u003cAMI_ID\u003e\"),\n\t\t\t\tRegion:    pulumi.String(\"\u003cREGION\u003e\"),\n\t\t\t\tSecurityGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"\u003cAWS_SECURITY_GROUP\u003e\"),\n\t\t\t\t},\n\t\t\t\tSubnetId: pulumi.String(\"\u003cSUBNET_ID\u003e\"),\n\t\t\t\tVpcId:    pulumi.String(\"\u003cVPC_ID\u003e\"),\n\t\t\t\tZone:     pulumi.String(\"\u003cZONE\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Node Pool\n\t\tfooNodePool, err := rancher2.NewNodePool(ctx, \"foo\", \u0026rancher2.NodePoolArgs{\n\t\t\tClusterId:      foo_custom.ID(),\n\t\t\tName:           pulumi.String(\"foo\"),\n\t\t\tHostnamePrefix: pulumi.String(\"foo-cluster-0\"),\n\t\t\tNodeTemplateId: foo.ID(),\n\t\t\tQuantity:       pulumi.Int(3),\n\t\t\tControlPlane:   pulumi.Bool(true),\n\t\t\tEtcd:           pulumi.Bool(true),\n\t\t\tWorker:         pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Cluster Sync\n\t\tfoo_customClusterSync, err := rancher2.NewClusterSync(ctx, \"foo-custom\", \u0026rancher2.ClusterSyncArgs{\n\t\t\tClusterId: foo_custom.ID(),\n\t\t\tNodePoolIds: pulumi.StringArray{\n\t\t\t\tfooNodePool.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Project\n\t\t_, err = rancher2.NewProject(ctx, \"foo\", \u0026rancher2.ProjectArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tClusterId:   foo_customClusterSync.ID(),\n\t\t\tDescription: pulumi.String(\"Terraform namespace acceptance test\"),\n\t\t\tResourceQuota: \u0026rancher2.ProjectResourceQuotaArgs{\n\t\t\t\tProjectLimit: \u0026rancher2.ProjectResourceQuotaProjectLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"2000Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"2Gi\"),\n\t\t\t\t},\n\t\t\t\tNamespaceDefaultLimit: \u0026rancher2.ProjectResourceQuotaNamespaceDefaultLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"500m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"500Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tContainerResourceLimit: \u0026rancher2.ProjectContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;\nimport com.pulumi.rancher2.NodeTemplate;\nimport com.pulumi.rancher2.NodeTemplateArgs;\nimport com.pulumi.rancher2.inputs.NodeTemplateAmazonec2ConfigArgs;\nimport com.pulumi.rancher2.NodePool;\nimport com.pulumi.rancher2.NodePoolArgs;\nimport com.pulumi.rancher2.ClusterSync;\nimport com.pulumi.rancher2.ClusterSyncArgs;\nimport com.pulumi.rancher2.Project;\nimport com.pulumi.rancher2.ProjectArgs;\nimport com.pulumi.rancher2.inputs.ProjectResourceQuotaArgs;\nimport com.pulumi.rancher2.inputs.ProjectResourceQuotaProjectLimitArgs;\nimport com.pulumi.rancher2.inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs;\nimport com.pulumi.rancher2.inputs.ProjectContainerResourceLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 rke Cluster \n        var foo_custom = new Cluster(\"foo-custom\", ClusterArgs.builder()\n            .name(\"foo-custom\")\n            .description(\"Foo rancher2 custom cluster\")\n            .rkeConfig(ClusterRkeConfigArgs.builder()\n                .network(ClusterRkeConfigNetworkArgs.builder()\n                    .plugin(\"canal\")\n                    .build())\n                .build())\n            .build());\n\n        // Create a new rancher2 Node Template\n        var foo = new NodeTemplate(\"foo\", NodeTemplateArgs.builder()\n            .name(\"foo\")\n            .description(\"foo test\")\n            .amazonec2Config(NodeTemplateAmazonec2ConfigArgs.builder()\n                .accessKey(\"\u003cAWS_ACCESS_KEY\u003e\")\n                .secretKey(\"\u003cAWS_SECRET_KEY\u003e\")\n                .ami(\"\u003cAMI_ID\u003e\")\n                .region(\"\u003cREGION\u003e\")\n                .securityGroups(\"\u003cAWS_SECURITY_GROUP\u003e\")\n                .subnetId(\"\u003cSUBNET_ID\u003e\")\n                .vpcId(\"\u003cVPC_ID\u003e\")\n                .zone(\"\u003cZONE\u003e\")\n                .build())\n            .build());\n\n        // Create a new rancher2 Node Pool\n        var fooNodePool = new NodePool(\"fooNodePool\", NodePoolArgs.builder()\n            .clusterId(foo_custom.id())\n            .name(\"foo\")\n            .hostnamePrefix(\"foo-cluster-0\")\n            .nodeTemplateId(foo.id())\n            .quantity(3)\n            .controlPlane(true)\n            .etcd(true)\n            .worker(true)\n            .build());\n\n        // Create a new rancher2 Cluster Sync\n        var foo_customClusterSync = new ClusterSync(\"foo-customClusterSync\", ClusterSyncArgs.builder()\n            .clusterId(foo_custom.id())\n            .nodePoolIds(fooNodePool.id())\n            .build());\n\n        // Create a new rancher2 Project\n        var fooProject = new Project(\"fooProject\", ProjectArgs.builder()\n            .name(\"foo\")\n            .clusterId(foo_customClusterSync.id())\n            .description(\"Terraform namespace acceptance test\")\n            .resourceQuota(ProjectResourceQuotaArgs.builder()\n                .projectLimit(ProjectResourceQuotaProjectLimitArgs.builder()\n                    .limitsCpu(\"2000m\")\n                    .limitsMemory(\"2000Mi\")\n                    .requestsStorage(\"2Gi\")\n                    .build())\n                .namespaceDefaultLimit(ProjectResourceQuotaNamespaceDefaultLimitArgs.builder()\n                    .limitsCpu(\"500m\")\n                    .limitsMemory(\"500Mi\")\n                    .requestsStorage(\"1Gi\")\n                    .build())\n                .build())\n            .containerResourceLimit(ProjectContainerResourceLimitArgs.builder()\n                .limitsCpu(\"20m\")\n                .limitsMemory(\"20Mi\")\n                .requestsCpu(\"1m\")\n                .requestsMemory(\"1Mi\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 rke Cluster\n  foo-custom:\n    type: rancher2:Cluster\n    properties:\n      name: foo-custom\n      description: Foo rancher2 custom cluster\n      rkeConfig:\n        network:\n          plugin: canal\n  # Create a new rancher2 Node Template\n  foo:\n    type: rancher2:NodeTemplate\n    properties:\n      name: foo\n      description: foo test\n      amazonec2Config:\n        accessKey: \u003cAWS_ACCESS_KEY\u003e\n        secretKey: \u003cAWS_SECRET_KEY\u003e\n        ami: \u003cAMI_ID\u003e\n        region: \u003cREGION\u003e\n        securityGroups:\n          - \u003cAWS_SECURITY_GROUP\u003e\n        subnetId: \u003cSUBNET_ID\u003e\n        vpcId: \u003cVPC_ID\u003e\n        zone: \u003cZONE\u003e\n  # Create a new rancher2 Node Pool\n  fooNodePool:\n    type: rancher2:NodePool\n    name: foo\n    properties:\n      clusterId: ${[\"foo-custom\"].id}\n      name: foo\n      hostnamePrefix: foo-cluster-0\n      nodeTemplateId: ${foo.id}\n      quantity: 3\n      controlPlane: true\n      etcd: true\n      worker: true\n  # Create a new rancher2 Cluster Sync\n  foo-customClusterSync:\n    type: rancher2:ClusterSync\n    name: foo-custom\n    properties:\n      clusterId: ${[\"foo-custom\"].id}\n      nodePoolIds:\n        - ${fooNodePool.id}\n  # Create a new rancher2 Project\n  fooProject:\n    type: rancher2:Project\n    name: foo\n    properties:\n      name: foo\n      clusterId: ${[\"foo-customClusterSync\"].id}\n      description: Terraform namespace acceptance test\n      resourceQuota:\n        projectLimit:\n          limitsCpu: 2000m\n          limitsMemory: 2000Mi\n          requestsStorage: 2Gi\n        namespaceDefaultLimit:\n          limitsCpu: 500m\n          limitsMemory: 500Mi\n          requestsStorage: 1Gi\n      containerResourceLimit:\n        limitsCpu: 20m\n        limitsMemory: 20Mi\n        requestsCpu: 1m\n        requestsMemory: 1Mi\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster ID that is syncing (string)\n"
                },
                "defaultProjectId": {
                    "type": "string",
                    "description": "(Computed) Default project ID for the cluster sync (string)\n"
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Kube Config generated for the cluster sync (string)\n",
                    "secret": true
                },
                "nodePoolIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The node pool IDs used by the cluster id (list)\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterSyncNode:ClusterSyncNode"
                    },
                    "description": "(Computed) The cluster nodes (list).\n"
                },
                "stateConfirm": {
                    "type": "integer",
                    "description": "Wait until active status is confirmed a number of times (wait interval of 5s). Default: \u003cspan pulumi-lang-nodejs=\"`1`\" pulumi-lang-dotnet=\"`1`\" pulumi-lang-go=\"`1`\" pulumi-lang-python=\"`1`\" pulumi-lang-yaml=\"`1`\" pulumi-lang-java=\"`1`\"\u003e`1`\u003c/span\u003e means no confirmation (int)\n\n**Note:** \u003cspan pulumi-lang-nodejs=\"`stateConfirm`\" pulumi-lang-dotnet=\"`StateConfirm`\" pulumi-lang-go=\"`stateConfirm`\" pulumi-lang-python=\"`state_confirm`\" pulumi-lang-yaml=\"`stateConfirm`\" pulumi-lang-java=\"`stateConfirm`\"\u003e`state_confirm`\u003c/span\u003e would be useful, if you have troubles for creating/updating custom clusters that eventually are reaching \u003cspan pulumi-lang-nodejs=\"`active`\" pulumi-lang-dotnet=\"`Active`\" pulumi-lang-go=\"`active`\" pulumi-lang-python=\"`active`\" pulumi-lang-yaml=\"`active`\" pulumi-lang-java=\"`active`\"\u003e`active`\u003c/span\u003e state before they are fully installed. For example: setting \u003cspan pulumi-lang-nodejs=\"`stateConfirm \" pulumi-lang-dotnet=\"`StateConfirm \" pulumi-lang-go=\"`stateConfirm \" pulumi-lang-python=\"`state_confirm \" pulumi-lang-yaml=\"`stateConfirm \" pulumi-lang-java=\"`stateConfirm \"\u003e`state_confirm \u003c/span\u003e= 2` will assure that the cluster has been in \u003cspan pulumi-lang-nodejs=\"`active`\" pulumi-lang-dotnet=\"`Active`\" pulumi-lang-go=\"`active`\" pulumi-lang-python=\"`active`\" pulumi-lang-yaml=\"`active`\" pulumi-lang-java=\"`active`\"\u003e`active`\u003c/span\u003e state for at least 5 seconds, \u003cspan pulumi-lang-nodejs=\"`stateConfirm \" pulumi-lang-dotnet=\"`StateConfirm \" pulumi-lang-go=\"`stateConfirm \" pulumi-lang-python=\"`state_confirm \" pulumi-lang-yaml=\"`stateConfirm \" pulumi-lang-java=\"`stateConfirm \"\u003e`state_confirm \u003c/span\u003e= 3` assure at least 10 seconds, etc\n"
                },
                "synced": {
                    "type": "boolean"
                },
                "systemProjectId": {
                    "type": "string",
                    "description": "(Computed) System project ID for the cluster sync (string)\n"
                },
                "waitCatalogs": {
                    "type": "boolean",
                    "description": "Wait until all catalogs are downloaded and active. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                }
            },
            "required": [
                "clusterId",
                "defaultProjectId",
                "kubeConfig",
                "nodes",
                "systemProjectId"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster ID that is syncing (string)\n",
                    "willReplaceOnChanges": true
                },
                "nodePoolIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The node pool IDs used by the cluster id (list)\n"
                },
                "stateConfirm": {
                    "type": "integer",
                    "description": "Wait until active status is confirmed a number of times (wait interval of 5s). Default: \u003cspan pulumi-lang-nodejs=\"`1`\" pulumi-lang-dotnet=\"`1`\" pulumi-lang-go=\"`1`\" pulumi-lang-python=\"`1`\" pulumi-lang-yaml=\"`1`\" pulumi-lang-java=\"`1`\"\u003e`1`\u003c/span\u003e means no confirmation (int)\n\n**Note:** \u003cspan pulumi-lang-nodejs=\"`stateConfirm`\" pulumi-lang-dotnet=\"`StateConfirm`\" pulumi-lang-go=\"`stateConfirm`\" pulumi-lang-python=\"`state_confirm`\" pulumi-lang-yaml=\"`stateConfirm`\" pulumi-lang-java=\"`stateConfirm`\"\u003e`state_confirm`\u003c/span\u003e would be useful, if you have troubles for creating/updating custom clusters that eventually are reaching \u003cspan pulumi-lang-nodejs=\"`active`\" pulumi-lang-dotnet=\"`Active`\" pulumi-lang-go=\"`active`\" pulumi-lang-python=\"`active`\" pulumi-lang-yaml=\"`active`\" pulumi-lang-java=\"`active`\"\u003e`active`\u003c/span\u003e state before they are fully installed. For example: setting \u003cspan pulumi-lang-nodejs=\"`stateConfirm \" pulumi-lang-dotnet=\"`StateConfirm \" pulumi-lang-go=\"`stateConfirm \" pulumi-lang-python=\"`state_confirm \" pulumi-lang-yaml=\"`stateConfirm \" pulumi-lang-java=\"`stateConfirm \"\u003e`state_confirm \u003c/span\u003e= 2` will assure that the cluster has been in \u003cspan pulumi-lang-nodejs=\"`active`\" pulumi-lang-dotnet=\"`Active`\" pulumi-lang-go=\"`active`\" pulumi-lang-python=\"`active`\" pulumi-lang-yaml=\"`active`\" pulumi-lang-java=\"`active`\"\u003e`active`\u003c/span\u003e state for at least 5 seconds, \u003cspan pulumi-lang-nodejs=\"`stateConfirm \" pulumi-lang-dotnet=\"`StateConfirm \" pulumi-lang-go=\"`stateConfirm \" pulumi-lang-python=\"`state_confirm \" pulumi-lang-yaml=\"`stateConfirm \" pulumi-lang-java=\"`stateConfirm \"\u003e`state_confirm \u003c/span\u003e= 3` assure at least 10 seconds, etc\n"
                },
                "synced": {
                    "type": "boolean"
                },
                "waitCatalogs": {
                    "type": "boolean",
                    "description": "Wait until all catalogs are downloaded and active. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterSync resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID that is syncing (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultProjectId": {
                        "type": "string",
                        "description": "(Computed) Default project ID for the cluster sync (string)\n"
                    },
                    "kubeConfig": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Kube Config generated for the cluster sync (string)\n",
                        "secret": true
                    },
                    "nodePoolIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The node pool IDs used by the cluster id (list)\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterSyncNode:ClusterSyncNode"
                        },
                        "description": "(Computed) The cluster nodes (list).\n"
                    },
                    "stateConfirm": {
                        "type": "integer",
                        "description": "Wait until active status is confirmed a number of times (wait interval of 5s). Default: \u003cspan pulumi-lang-nodejs=\"`1`\" pulumi-lang-dotnet=\"`1`\" pulumi-lang-go=\"`1`\" pulumi-lang-python=\"`1`\" pulumi-lang-yaml=\"`1`\" pulumi-lang-java=\"`1`\"\u003e`1`\u003c/span\u003e means no confirmation (int)\n\n**Note:** \u003cspan pulumi-lang-nodejs=\"`stateConfirm`\" pulumi-lang-dotnet=\"`StateConfirm`\" pulumi-lang-go=\"`stateConfirm`\" pulumi-lang-python=\"`state_confirm`\" pulumi-lang-yaml=\"`stateConfirm`\" pulumi-lang-java=\"`stateConfirm`\"\u003e`state_confirm`\u003c/span\u003e would be useful, if you have troubles for creating/updating custom clusters that eventually are reaching \u003cspan pulumi-lang-nodejs=\"`active`\" pulumi-lang-dotnet=\"`Active`\" pulumi-lang-go=\"`active`\" pulumi-lang-python=\"`active`\" pulumi-lang-yaml=\"`active`\" pulumi-lang-java=\"`active`\"\u003e`active`\u003c/span\u003e state before they are fully installed. For example: setting \u003cspan pulumi-lang-nodejs=\"`stateConfirm \" pulumi-lang-dotnet=\"`StateConfirm \" pulumi-lang-go=\"`stateConfirm \" pulumi-lang-python=\"`state_confirm \" pulumi-lang-yaml=\"`stateConfirm \" pulumi-lang-java=\"`stateConfirm \"\u003e`state_confirm \u003c/span\u003e= 2` will assure that the cluster has been in \u003cspan pulumi-lang-nodejs=\"`active`\" pulumi-lang-dotnet=\"`Active`\" pulumi-lang-go=\"`active`\" pulumi-lang-python=\"`active`\" pulumi-lang-yaml=\"`active`\" pulumi-lang-java=\"`active`\"\u003e`active`\u003c/span\u003e state for at least 5 seconds, \u003cspan pulumi-lang-nodejs=\"`stateConfirm \" pulumi-lang-dotnet=\"`StateConfirm \" pulumi-lang-go=\"`stateConfirm \" pulumi-lang-python=\"`state_confirm \" pulumi-lang-yaml=\"`stateConfirm \" pulumi-lang-java=\"`stateConfirm \"\u003e`state_confirm \u003c/span\u003e= 3` assure at least 10 seconds, etc\n"
                    },
                    "synced": {
                        "type": "boolean"
                    },
                    "systemProjectId": {
                        "type": "string",
                        "description": "(Computed) System project ID for the cluster sync (string)\n"
                    },
                    "waitCatalogs": {
                        "type": "boolean",
                        "description": "Wait until all catalogs are downloaded and active. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterTemplate:ClusterTemplate": {
            "description": "Provides a Rancher v2 Cluster Template resource. This can be used to create Cluster Templates for Rancher v2 RKE clusters and retrieve their information. \n\nCluster Templates are available from Rancher v2.3.x and above.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Cluster Template\nconst foo = new rancher2.ClusterTemplate(\"foo\", {\n    name: \"foo\",\n    members: [{\n        accessType: \"owner\",\n        userPrincipalId: \"local://user-XXXXX\",\n    }],\n    templateRevisions: [{\n        name: \"V1\",\n        clusterConfig: {\n            rkeConfig: {\n                network: {\n                    plugin: \"canal\",\n                },\n                services: {\n                    etcd: {\n                        creation: \"6h\",\n                        retention: \"24h\",\n                    },\n                },\n            },\n        },\n        \"default\": true,\n    }],\n    description: \"Terraform cluster template foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Cluster Template\nfoo = rancher2.ClusterTemplate(\"foo\",\n    name=\"foo\",\n    members=[{\n        \"access_type\": \"owner\",\n        \"user_principal_id\": \"local://user-XXXXX\",\n    }],\n    template_revisions=[{\n        \"name\": \"V1\",\n        \"cluster_config\": {\n            \"rke_config\": {\n                \"network\": {\n                    \"plugin\": \"canal\",\n                },\n                \"services\": {\n                    \"etcd\": {\n                        \"creation\": \"6h\",\n                        \"retention\": \"24h\",\n                    },\n                },\n            },\n        },\n        \"default\": True,\n    }],\n    description=\"Terraform cluster template foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Cluster Template\n    var foo = new Rancher2.ClusterTemplate(\"foo\", new()\n    {\n        Name = \"foo\",\n        Members = new[]\n        {\n            new Rancher2.Inputs.ClusterTemplateMemberArgs\n            {\n                AccessType = \"owner\",\n                UserPrincipalId = \"local://user-XXXXX\",\n            },\n        },\n        TemplateRevisions = new[]\n        {\n            new Rancher2.Inputs.ClusterTemplateTemplateRevisionArgs\n            {\n                Name = \"V1\",\n                ClusterConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigArgs\n                {\n                    RkeConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs\n                    {\n                        Network = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs\n                        {\n                            Plugin = \"canal\",\n                        },\n                        Services = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs\n                        {\n                            Etcd = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs\n                            {\n                                Creation = \"6h\",\n                                Retention = \"24h\",\n                            },\n                        },\n                    },\n                },\n                Default = true,\n            },\n        },\n        Description = \"Terraform cluster template foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Cluster Template\n\t\t_, err := rancher2.NewClusterTemplate(ctx, \"foo\", \u0026rancher2.ClusterTemplateArgs{\n\t\t\tName: pulumi.String(\"foo\"),\n\t\t\tMembers: rancher2.ClusterTemplateMemberArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateMemberArgs{\n\t\t\t\t\tAccessType:      pulumi.String(\"owner\"),\n\t\t\t\t\tUserPrincipalId: pulumi.String(\"local://user-XXXXX\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateTemplateRevisionArgs{\n\t\t\t\t\tName: pulumi.String(\"V1\"),\n\t\t\t\t\tClusterConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{\n\t\t\t\t\t\tRkeConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{\n\t\t\t\t\t\t\tNetwork: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{\n\t\t\t\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tServices: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{\n\t\t\t\t\t\t\t\tEtcd: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{\n\t\t\t\t\t\t\t\t\tCreation:  pulumi.String(\"6h\"),\n\t\t\t\t\t\t\t\t\tRetention: pulumi.String(\"24h\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDefault: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Terraform cluster template foo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.ClusterTemplate;\nimport com.pulumi.rancher2.ClusterTemplateArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateMemberArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Cluster Template\n        var foo = new ClusterTemplate(\"foo\", ClusterTemplateArgs.builder()\n            .name(\"foo\")\n            .members(ClusterTemplateMemberArgs.builder()\n                .accessType(\"owner\")\n                .userPrincipalId(\"local://user-XXXXX\")\n                .build())\n            .templateRevisions(ClusterTemplateTemplateRevisionArgs.builder()\n                .name(\"V1\")\n                .clusterConfig(ClusterTemplateTemplateRevisionClusterConfigArgs.builder()\n                    .rkeConfig(ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs.builder()\n                        .network(ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs.builder()\n                            .plugin(\"canal\")\n                            .build())\n                        .services(ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs.builder()\n                            .etcd(ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs.builder()\n                                .creation(\"6h\")\n                                .retention(\"24h\")\n                                .build())\n                            .build())\n                        .build())\n                    .build())\n                .default_(true)\n                .build())\n            .description(\"Terraform cluster template foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Cluster Template\n  foo:\n    type: rancher2:ClusterTemplate\n    properties:\n      name: foo\n      members:\n        - accessType: owner\n          userPrincipalId: local://user-XXXXX\n      templateRevisions:\n        - name: V1\n          clusterConfig:\n            rkeConfig:\n              network:\n                plugin: canal\n              services:\n                etcd:\n                  creation: 6h\n                  retention: 24h\n          default: true\n      description: Terraform cluster template foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreating Rancher v2 RKE cluster template with upgrade strategy. For Rancher v2.4.x and above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Cluster Template\nconst foo = new rancher2.ClusterTemplate(\"foo\", {\n    name: \"foo\",\n    members: [{\n        accessType: \"owner\",\n        userPrincipalId: \"local://user-XXXXX\",\n    }],\n    templateRevisions: [{\n        name: \"V1\",\n        clusterConfig: {\n            rkeConfig: {\n                network: {\n                    plugin: \"canal\",\n                },\n                services: {\n                    etcd: {\n                        creation: \"6h\",\n                        retention: \"24h\",\n                    },\n                },\n                upgradeStrategy: {\n                    drain: true,\n                    maxUnavailableWorker: \"20%\",\n                },\n            },\n        },\n        \"default\": true,\n    }],\n    description: \"Terraform cluster template foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Cluster Template\nfoo = rancher2.ClusterTemplate(\"foo\",\n    name=\"foo\",\n    members=[{\n        \"access_type\": \"owner\",\n        \"user_principal_id\": \"local://user-XXXXX\",\n    }],\n    template_revisions=[{\n        \"name\": \"V1\",\n        \"cluster_config\": {\n            \"rke_config\": {\n                \"network\": {\n                    \"plugin\": \"canal\",\n                },\n                \"services\": {\n                    \"etcd\": {\n                        \"creation\": \"6h\",\n                        \"retention\": \"24h\",\n                    },\n                },\n                \"upgrade_strategy\": {\n                    \"drain\": True,\n                    \"max_unavailable_worker\": \"20%\",\n                },\n            },\n        },\n        \"default\": True,\n    }],\n    description=\"Terraform cluster template foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Cluster Template\n    var foo = new Rancher2.ClusterTemplate(\"foo\", new()\n    {\n        Name = \"foo\",\n        Members = new[]\n        {\n            new Rancher2.Inputs.ClusterTemplateMemberArgs\n            {\n                AccessType = \"owner\",\n                UserPrincipalId = \"local://user-XXXXX\",\n            },\n        },\n        TemplateRevisions = new[]\n        {\n            new Rancher2.Inputs.ClusterTemplateTemplateRevisionArgs\n            {\n                Name = \"V1\",\n                ClusterConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigArgs\n                {\n                    RkeConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs\n                    {\n                        Network = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs\n                        {\n                            Plugin = \"canal\",\n                        },\n                        Services = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs\n                        {\n                            Etcd = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs\n                            {\n                                Creation = \"6h\",\n                                Retention = \"24h\",\n                            },\n                        },\n                        UpgradeStrategy = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs\n                        {\n                            Drain = true,\n                            MaxUnavailableWorker = \"20%\",\n                        },\n                    },\n                },\n                Default = true,\n            },\n        },\n        Description = \"Terraform cluster template foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Cluster Template\n\t\t_, err := rancher2.NewClusterTemplate(ctx, \"foo\", \u0026rancher2.ClusterTemplateArgs{\n\t\t\tName: pulumi.String(\"foo\"),\n\t\t\tMembers: rancher2.ClusterTemplateMemberArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateMemberArgs{\n\t\t\t\t\tAccessType:      pulumi.String(\"owner\"),\n\t\t\t\t\tUserPrincipalId: pulumi.String(\"local://user-XXXXX\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{\n\t\t\t\t\u0026rancher2.ClusterTemplateTemplateRevisionArgs{\n\t\t\t\t\tName: pulumi.String(\"V1\"),\n\t\t\t\t\tClusterConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{\n\t\t\t\t\t\tRkeConfig: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{\n\t\t\t\t\t\t\tNetwork: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{\n\t\t\t\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tServices: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{\n\t\t\t\t\t\t\t\tEtcd: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{\n\t\t\t\t\t\t\t\t\tCreation:  pulumi.String(\"6h\"),\n\t\t\t\t\t\t\t\t\tRetention: pulumi.String(\"24h\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tUpgradeStrategy: \u0026rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs{\n\t\t\t\t\t\t\t\tDrain:                pulumi.Bool(true),\n\t\t\t\t\t\t\t\tMaxUnavailableWorker: pulumi.String(\"20%\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDefault: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Terraform cluster template foo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.ClusterTemplate;\nimport com.pulumi.rancher2.ClusterTemplateArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateMemberArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs;\nimport com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Cluster Template\n        var foo = new ClusterTemplate(\"foo\", ClusterTemplateArgs.builder()\n            .name(\"foo\")\n            .members(ClusterTemplateMemberArgs.builder()\n                .accessType(\"owner\")\n                .userPrincipalId(\"local://user-XXXXX\")\n                .build())\n            .templateRevisions(ClusterTemplateTemplateRevisionArgs.builder()\n                .name(\"V1\")\n                .clusterConfig(ClusterTemplateTemplateRevisionClusterConfigArgs.builder()\n                    .rkeConfig(ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs.builder()\n                        .network(ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs.builder()\n                            .plugin(\"canal\")\n                            .build())\n                        .services(ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs.builder()\n                            .etcd(ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs.builder()\n                                .creation(\"6h\")\n                                .retention(\"24h\")\n                                .build())\n                            .build())\n                        .upgradeStrategy(ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs.builder()\n                            .drain(true)\n                            .maxUnavailableWorker(\"20%\")\n                            .build())\n                        .build())\n                    .build())\n                .default_(true)\n                .build())\n            .description(\"Terraform cluster template foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Cluster Template\n  foo:\n    type: rancher2:ClusterTemplate\n    properties:\n      name: foo\n      members:\n        - accessType: owner\n          userPrincipalId: local://user-XXXXX\n      templateRevisions:\n        - name: V1\n          clusterConfig:\n            rkeConfig:\n              network:\n                plugin: canal\n              services:\n                etcd:\n                  creation: 6h\n                  retention: 24h\n              upgradeStrategy:\n                drain: true\n                maxUnavailableWorker: 20%\n          default: true\n      description: Terraform cluster template foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nCluster Template can be imported using the rancher Cluster Template ID\n\n```sh\n$ pulumi import rancher2:index/clusterTemplate:ClusterTemplate foo \u0026lt;CLUSTER_TEMPLATE_ID\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the cluster template (map)\n"
                },
                "defaultRevisionId": {
                    "type": "string",
                    "description": "(Computed) Default cluster template revision ID (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Cluster template description"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the cluster template (map)\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateMember:ClusterTemplateMember"
                    },
                    "description": "Cluster template members (list)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "templateRevisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevision:ClusterTemplateTemplateRevision"
                    },
                    "description": "Cluster template revisions (list)\n"
                }
            },
            "required": [
                "annotations",
                "defaultRevisionId",
                "labels",
                "name",
                "templateRevisions"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the cluster template (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Cluster template description"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the cluster template (map)\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateMember:ClusterTemplateMember"
                    },
                    "description": "Cluster template members (list)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The cluster template name (string)\n"
                },
                "templateRevisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevision:ClusterTemplateTemplateRevision"
                    },
                    "description": "Cluster template revisions (list)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterTemplate resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the cluster template (map)\n"
                    },
                    "defaultRevisionId": {
                        "type": "string",
                        "description": "(Computed) Default cluster template revision ID (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Cluster template description"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the cluster template (map)\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterTemplateMember:ClusterTemplateMember"
                        },
                        "description": "Cluster template members (list)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster template name (string)\n"
                    },
                    "templateRevisions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterTemplateTemplateRevision:ClusterTemplateTemplateRevision"
                        },
                        "description": "Cluster template revisions (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/clusterV2:ClusterV2": {
            "description": "\n\n## Import\n\nClusters v2 can be imported using the Rancher Cluster v2 ID, that is in the form \u0026lt;FLEET_NAMESPACE\u0026gt;/\u0026lt;CLUSTER_NAME\u0026gt;\n\n```sh\n$ pulumi import rancher2:index/clusterV2:ClusterV2 foo \u003cFLEET_NAMESPACE\u003e/\u003cCLUSTER_NAME\u003e\n```\n",
            "properties": {
                "agentEnvVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2AgentEnvVar:ClusterV2AgentEnvVar"
                    },
                    "description": "Agent env vars is a list of additional environment variables to be appended to the `cattle-cluster-agent` and `fleet-agent` deployment, and the plan for the [system upgrade controller](https://github.com/rancher/system-upgrade-controller) to upgrade nodes.\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Cluster.\n"
                },
                "cloudCredentialSecretName": {
                    "type": "string",
                    "description": "Cloud credential secret name is the secret to be used when a cloud credential secret name is not specified at the machine pool level.\n"
                },
                "clusterAgentDeploymentCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2ClusterAgentDeploymentCustomization:ClusterV2ClusterAgentDeploymentCustomization"
                    },
                    "description": "Cluster agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `cattle-cluster-agent` deployment. This argument is available in Rancher v2.7.5 and above.\n"
                },
                "clusterRegistrationToken": {
                    "$ref": "#/types/rancher2:index/ClusterV2ClusterRegistrationToken:ClusterV2ClusterRegistrationToken",
                    "description": "(Computed, sensitive, list, max length: 1) Cluster Registration Token generated for the cluster.\n",
                    "secret": true
                },
                "clusterV1Id": {
                    "type": "string",
                    "description": "(Computed, string) Cluster v1 id for cluster v2. (e.g. to be used with \u003cspan pulumi-lang-nodejs=\"`rancher2Sync`\" pulumi-lang-dotnet=\"`Rancher2Sync`\" pulumi-lang-go=\"`rancher2Sync`\" pulumi-lang-python=\"`rancher2_sync`\" pulumi-lang-yaml=\"`rancher2Sync`\" pulumi-lang-java=\"`rancher2Sync`\"\u003e`rancher2_sync`\u003c/span\u003e).\n"
                },
                "defaultClusterRoleForProjectMembers": {
                    "type": "string",
                    "description": "Default cluster role for project members.\n"
                },
                "defaultPodSecurityAdmissionConfigurationTemplateName": {
                    "type": "string",
                    "description": "The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above.\n"
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "description": "Enable k8s network policy on the cluster.\n"
                },
                "fleetAgentDeploymentCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2FleetAgentDeploymentCustomization:ClusterV2FleetAgentDeploymentCustomization"
                    },
                    "description": "Fleet agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `fleet-agent` deployment. The argument is available in Rancher v2.7.5 and above.\n"
                },
                "fleetNamespace": {
                    "type": "string",
                    "description": "Fleet namespace is the namespace where the cluster is to create in the local cluster. It is recommended to leave it as the default value.\n"
                },
                "kubeConfig": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Kube Config generated for the cluster. Note: When the cluster has \u003cspan pulumi-lang-nodejs=\"`localAuthEndpoint`\" pulumi-lang-dotnet=\"`LocalAuthEndpoint`\" pulumi-lang-go=\"`localAuthEndpoint`\" pulumi-lang-python=\"`local_auth_endpoint`\" pulumi-lang-yaml=\"`localAuthEndpoint`\" pulumi-lang-java=\"`localAuthEndpoint`\"\u003e`local_auth_endpoint`\u003c/span\u003e enabled, the\u003cspan pulumi-lang-nodejs=\" kubeConfig \" pulumi-lang-dotnet=\" KubeConfig \" pulumi-lang-go=\" kubeConfig \" pulumi-lang-python=\" kube_config \" pulumi-lang-yaml=\" kubeConfig \" pulumi-lang-java=\" kubeConfig \"\u003e kube_config \u003c/span\u003ewill not be available until the cluster is \u003cspan pulumi-lang-nodejs=\"`connected`\" pulumi-lang-dotnet=\"`Connected`\" pulumi-lang-go=\"`connected`\" pulumi-lang-python=\"`connected`\" pulumi-lang-yaml=\"`connected`\" pulumi-lang-java=\"`connected`\"\u003e`connected`\u003c/span\u003e.\n",
                    "secret": true
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The RKE2 or K3s version for the cluster.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster.\n"
                },
                "localAuthEndpoint": {
                    "$ref": "#/types/rancher2:index/ClusterV2LocalAuthEndpoint:ClusterV2LocalAuthEndpoint",
                    "description": "Local auth endpoint configures the Authorized Cluster Endpoint (ACE) which can be used to directly access the Kubernetes API server, without requiring communication through Rancher. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/register-existing-clusters#authorized-cluster-endpoint-support-for-rke2-and-k3s-clusters).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "(Computed, string) Cluster's k8s resource version.\n"
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfig:ClusterV2RkeConfig",
                    "description": "The RKE configuration for the cluster.\n"
                }
            },
            "required": [
                "annotations",
                "clusterRegistrationToken",
                "clusterV1Id",
                "enableNetworkPolicy",
                "kubeConfig",
                "kubernetesVersion",
                "labels",
                "name",
                "resourceVersion",
                "rkeConfig"
            ],
            "inputProperties": {
                "agentEnvVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2AgentEnvVar:ClusterV2AgentEnvVar"
                    },
                    "description": "Agent env vars is a list of additional environment variables to be appended to the `cattle-cluster-agent` and `fleet-agent` deployment, and the plan for the [system upgrade controller](https://github.com/rancher/system-upgrade-controller) to upgrade nodes.\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the Cluster.\n"
                },
                "cloudCredentialSecretName": {
                    "type": "string",
                    "description": "Cloud credential secret name is the secret to be used when a cloud credential secret name is not specified at the machine pool level.\n"
                },
                "clusterAgentDeploymentCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2ClusterAgentDeploymentCustomization:ClusterV2ClusterAgentDeploymentCustomization"
                    },
                    "description": "Cluster agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `cattle-cluster-agent` deployment. This argument is available in Rancher v2.7.5 and above.\n"
                },
                "defaultClusterRoleForProjectMembers": {
                    "type": "string",
                    "description": "Default cluster role for project members.\n"
                },
                "defaultPodSecurityAdmissionConfigurationTemplateName": {
                    "type": "string",
                    "description": "The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above.\n"
                },
                "enableNetworkPolicy": {
                    "type": "boolean",
                    "description": "Enable k8s network policy on the cluster.\n"
                },
                "fleetAgentDeploymentCustomizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/ClusterV2FleetAgentDeploymentCustomization:ClusterV2FleetAgentDeploymentCustomization"
                    },
                    "description": "Fleet agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `fleet-agent` deployment. The argument is available in Rancher v2.7.5 and above.\n"
                },
                "fleetNamespace": {
                    "type": "string",
                    "description": "Fleet namespace is the namespace where the cluster is to create in the local cluster. It is recommended to leave it as the default value.\n",
                    "willReplaceOnChanges": true
                },
                "kubernetesVersion": {
                    "type": "string",
                    "description": "The RKE2 or K3s version for the cluster.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the Cluster.\n"
                },
                "localAuthEndpoint": {
                    "$ref": "#/types/rancher2:index/ClusterV2LocalAuthEndpoint:ClusterV2LocalAuthEndpoint",
                    "description": "Local auth endpoint configures the Authorized Cluster Endpoint (ACE) which can be used to directly access the Kubernetes API server, without requiring communication through Rancher. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/register-existing-clusters#authorized-cluster-endpoint-support-for-rke2-and-k3s-clusters).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cluster.\n",
                    "willReplaceOnChanges": true
                },
                "rkeConfig": {
                    "$ref": "#/types/rancher2:index/ClusterV2RkeConfig:ClusterV2RkeConfig",
                    "description": "The RKE configuration for the cluster.\n"
                }
            },
            "requiredInputs": [
                "kubernetesVersion"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterV2 resources.\n",
                "properties": {
                    "agentEnvVars": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterV2AgentEnvVar:ClusterV2AgentEnvVar"
                        },
                        "description": "Agent env vars is a list of additional environment variables to be appended to the `cattle-cluster-agent` and `fleet-agent` deployment, and the plan for the [system upgrade controller](https://github.com/rancher/system-upgrade-controller) to upgrade nodes.\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the Cluster.\n"
                    },
                    "cloudCredentialSecretName": {
                        "type": "string",
                        "description": "Cloud credential secret name is the secret to be used when a cloud credential secret name is not specified at the machine pool level.\n"
                    },
                    "clusterAgentDeploymentCustomizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterV2ClusterAgentDeploymentCustomization:ClusterV2ClusterAgentDeploymentCustomization"
                        },
                        "description": "Cluster agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `cattle-cluster-agent` deployment. This argument is available in Rancher v2.7.5 and above.\n"
                    },
                    "clusterRegistrationToken": {
                        "$ref": "#/types/rancher2:index/ClusterV2ClusterRegistrationToken:ClusterV2ClusterRegistrationToken",
                        "description": "(Computed, sensitive, list, max length: 1) Cluster Registration Token generated for the cluster.\n",
                        "secret": true
                    },
                    "clusterV1Id": {
                        "type": "string",
                        "description": "(Computed, string) Cluster v1 id for cluster v2. (e.g. to be used with \u003cspan pulumi-lang-nodejs=\"`rancher2Sync`\" pulumi-lang-dotnet=\"`Rancher2Sync`\" pulumi-lang-go=\"`rancher2Sync`\" pulumi-lang-python=\"`rancher2_sync`\" pulumi-lang-yaml=\"`rancher2Sync`\" pulumi-lang-java=\"`rancher2Sync`\"\u003e`rancher2_sync`\u003c/span\u003e).\n"
                    },
                    "defaultClusterRoleForProjectMembers": {
                        "type": "string",
                        "description": "Default cluster role for project members.\n"
                    },
                    "defaultPodSecurityAdmissionConfigurationTemplateName": {
                        "type": "string",
                        "description": "The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above.\n"
                    },
                    "enableNetworkPolicy": {
                        "type": "boolean",
                        "description": "Enable k8s network policy on the cluster.\n"
                    },
                    "fleetAgentDeploymentCustomizations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/ClusterV2FleetAgentDeploymentCustomization:ClusterV2FleetAgentDeploymentCustomization"
                        },
                        "description": "Fleet agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `fleet-agent` deployment. The argument is available in Rancher v2.7.5 and above.\n"
                    },
                    "fleetNamespace": {
                        "type": "string",
                        "description": "Fleet namespace is the namespace where the cluster is to create in the local cluster. It is recommended to leave it as the default value.\n",
                        "willReplaceOnChanges": true
                    },
                    "kubeConfig": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Kube Config generated for the cluster. Note: When the cluster has \u003cspan pulumi-lang-nodejs=\"`localAuthEndpoint`\" pulumi-lang-dotnet=\"`LocalAuthEndpoint`\" pulumi-lang-go=\"`localAuthEndpoint`\" pulumi-lang-python=\"`local_auth_endpoint`\" pulumi-lang-yaml=\"`localAuthEndpoint`\" pulumi-lang-java=\"`localAuthEndpoint`\"\u003e`local_auth_endpoint`\u003c/span\u003e enabled, the\u003cspan pulumi-lang-nodejs=\" kubeConfig \" pulumi-lang-dotnet=\" KubeConfig \" pulumi-lang-go=\" kubeConfig \" pulumi-lang-python=\" kube_config \" pulumi-lang-yaml=\" kubeConfig \" pulumi-lang-java=\" kubeConfig \"\u003e kube_config \u003c/span\u003ewill not be available until the cluster is \u003cspan pulumi-lang-nodejs=\"`connected`\" pulumi-lang-dotnet=\"`Connected`\" pulumi-lang-go=\"`connected`\" pulumi-lang-python=\"`connected`\" pulumi-lang-yaml=\"`connected`\" pulumi-lang-java=\"`connected`\"\u003e`connected`\u003c/span\u003e.\n",
                        "secret": true
                    },
                    "kubernetesVersion": {
                        "type": "string",
                        "description": "The RKE2 or K3s version for the cluster.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the Cluster.\n"
                    },
                    "localAuthEndpoint": {
                        "$ref": "#/types/rancher2:index/ClusterV2LocalAuthEndpoint:ClusterV2LocalAuthEndpoint",
                        "description": "Local auth endpoint configures the Authorized Cluster Endpoint (ACE) which can be used to directly access the Kubernetes API server, without requiring communication through Rancher. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/register-existing-clusters#authorized-cluster-endpoint-support-for-rke2-and-k3s-clusters).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "(Computed, string) Cluster's k8s resource version.\n"
                    },
                    "rkeConfig": {
                        "$ref": "#/types/rancher2:index/ClusterV2RkeConfig:ClusterV2RkeConfig",
                        "description": "The RKE configuration for the cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/configMapV2:ConfigMapV2": {
            "description": "Provides a Rancher ConfigMap v2 resource. This can be used to create k8s configMaps for Rancher v2 environments and retrieve their information. ConfigMap v2 resource is available at Rancher v2.5.x and above.\n\n## Import\n\nV2 configMaps can be imported using the Rancher cluster ID, ConfigMap V2 namespace and name.\n\n```sh\n$ pulumi import rancher2:index/configMapV2:ConfigMapV2 foo \u0026lt;CLUSTER_ID\u0026gt;.\u0026lt;SECRET_V2_NAMESPACE\u0026gt;/\u0026lt;SECRET_V2_NAME\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the configMap v2 (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the configMap V2 (string)\n"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The data of the configMap v2 (map)\n"
                },
                "immutable": {
                    "type": "boolean",
                    "description": "If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the configMap v2 (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configMap v2 (string)\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespaces of the configMap v2. Default: \u003cspan pulumi-lang-nodejs=\"`default`\" pulumi-lang-dotnet=\"`Default`\" pulumi-lang-go=\"`default`\" pulumi-lang-python=\"`default`\" pulumi-lang-yaml=\"`default`\" pulumi-lang-java=\"`default`\"\u003e`default`\u003c/span\u003e (string)\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "(Computed) The k8s resource version (string)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "data",
                "labels",
                "name",
                "resourceVersion"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the configMap v2 (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the configMap V2 (string)\n",
                    "willReplaceOnChanges": true
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The data of the configMap v2 (map)\n"
                },
                "immutable": {
                    "type": "boolean",
                    "description": "If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the configMap v2 (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the configMap v2 (string)\n",
                    "willReplaceOnChanges": true
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespaces of the configMap v2. Default: \u003cspan pulumi-lang-nodejs=\"`default`\" pulumi-lang-dotnet=\"`Default`\" pulumi-lang-go=\"`default`\" pulumi-lang-python=\"`default`\" pulumi-lang-yaml=\"`default`\" pulumi-lang-java=\"`default`\"\u003e`default`\u003c/span\u003e (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "data"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConfigMapV2 resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the configMap v2 (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the configMap V2 (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The data of the configMap v2 (map)\n"
                    },
                    "immutable": {
                        "type": "boolean",
                        "description": "If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the configMap v2 (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the configMap v2 (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespaces of the configMap v2. Default: \u003cspan pulumi-lang-nodejs=\"`default`\" pulumi-lang-dotnet=\"`Default`\" pulumi-lang-go=\"`default`\" pulumi-lang-python=\"`default`\" pulumi-lang-yaml=\"`default`\" pulumi-lang-java=\"`default`\"\u003e`default`\u003c/span\u003e (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "(Computed) The k8s resource version (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/customUserToken:CustomUserToken": {
            "description": "Provides a Rancher v2 Token resource, specifically to create tokens for custom users (i.e. not the 'admin' user configured with the provider config). Custom user tokens can f.e. be used as service account tokens with the Rancher v2 API having limited permissions. To create a custom user token the username/password for the Rancher User must be known.\n\nThere are 2 kind of tokens:\n- not scoped: valid for global system.\n- scoped: valid for just a specific cluster (\u003cspan pulumi-lang-nodejs=\"`clusterId`\" pulumi-lang-dotnet=\"`ClusterId`\" pulumi-lang-go=\"`clusterId`\" pulumi-lang-python=\"`cluster_id`\" pulumi-lang-yaml=\"`clusterId`\" pulumi-lang-java=\"`clusterId`\"\u003e`cluster_id`\u003c/span\u003e should be provided).\n\nTokens can only be created for a Rancher User with at least the `user-base` global role binding in order to enable user login.\n\nTokens can't be updated once created. Any diff in token data will recreate the token. If any token expire, Rancher2 provider will generate a diff to regenerate it.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a rancher2 Token\nconst foo = new rancher2.User(\"foo\", {\n    name: \"foo\",\n    username: \"foo\",\n    password: \"changeme\",\n    enabled: true,\n});\nconst foo_login = new rancher2.GlobalRoleBinding(\"foo-login\", {\n    name: \"foo-login-binding\",\n    globalRoleId: \"user-base\",\n    userId: foo.id,\n});\nconst fooCustomUserToken = new rancher2.CustomUserToken(\"foo\", {\n    username: foo.username,\n    password: foo.password,\n    description: \"foo token\",\n    ttl: 0,\n}, {\n    dependsOn: [foo_login],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a rancher2 Token\nfoo = rancher2.User(\"foo\",\n    name=\"foo\",\n    username=\"foo\",\n    password=\"changeme\",\n    enabled=True)\nfoo_login = rancher2.GlobalRoleBinding(\"foo-login\",\n    name=\"foo-login-binding\",\n    global_role_id=\"user-base\",\n    user_id=foo.id)\nfoo_custom_user_token = rancher2.CustomUserToken(\"foo\",\n    username=foo.username,\n    password=foo.password,\n    description=\"foo token\",\n    ttl=0,\n    opts = pulumi.ResourceOptions(depends_on=[foo_login]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a rancher2 Token\n    var foo = new Rancher2.User(\"foo\", new()\n    {\n        Name = \"foo\",\n        Username = \"foo\",\n        Password = \"changeme\",\n        Enabled = true,\n    });\n\n    var foo_login = new Rancher2.GlobalRoleBinding(\"foo-login\", new()\n    {\n        Name = \"foo-login-binding\",\n        GlobalRoleId = \"user-base\",\n        UserId = foo.Id,\n    });\n\n    var fooCustomUserToken = new Rancher2.CustomUserToken(\"foo\", new()\n    {\n        Username = foo.Username,\n        Password = foo.Password,\n        Description = \"foo token\",\n        Ttl = 0,\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            foo_login,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a rancher2 Token\n\t\tfoo, err := rancher2.NewUser(ctx, \"foo\", \u0026rancher2.UserArgs{\n\t\t\tName:     pulumi.String(\"foo\"),\n\t\t\tUsername: pulumi.String(\"foo\"),\n\t\t\tPassword: pulumi.String(\"changeme\"),\n\t\t\tEnabled:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfoo_login, err := rancher2.NewGlobalRoleBinding(ctx, \"foo-login\", \u0026rancher2.GlobalRoleBindingArgs{\n\t\t\tName:         pulumi.String(\"foo-login-binding\"),\n\t\t\tGlobalRoleId: pulumi.String(\"user-base\"),\n\t\t\tUserId:       foo.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewCustomUserToken(ctx, \"foo\", \u0026rancher2.CustomUserTokenArgs{\n\t\t\tUsername:    foo.Username,\n\t\t\tPassword:    foo.Password,\n\t\t\tDescription: pulumi.String(\"foo token\"),\n\t\t\tTtl:         pulumi.Int(0),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tfoo_login,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.User;\nimport com.pulumi.rancher2.UserArgs;\nimport com.pulumi.rancher2.GlobalRoleBinding;\nimport com.pulumi.rancher2.GlobalRoleBindingArgs;\nimport com.pulumi.rancher2.CustomUserToken;\nimport com.pulumi.rancher2.CustomUserTokenArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a rancher2 Token\n        var foo = new User(\"foo\", UserArgs.builder()\n            .name(\"foo\")\n            .username(\"foo\")\n            .password(\"changeme\")\n            .enabled(true)\n            .build());\n\n        var foo_login = new GlobalRoleBinding(\"foo-login\", GlobalRoleBindingArgs.builder()\n            .name(\"foo-login-binding\")\n            .globalRoleId(\"user-base\")\n            .userId(foo.id())\n            .build());\n\n        var fooCustomUserToken = new CustomUserToken(\"fooCustomUserToken\", CustomUserTokenArgs.builder()\n            .username(foo.username())\n            .password(foo.password())\n            .description(\"foo token\")\n            .ttl(0)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(foo_login)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a rancher2 Token\n  foo:\n    type: rancher2:User\n    properties:\n      name: foo\n      username: foo\n      password: changeme\n      enabled: true\n  foo-login:\n    type: rancher2:GlobalRoleBinding\n    properties:\n      name: foo-login-binding\n      globalRoleId: user-base\n      userId: ${foo.id}\n  fooCustomUserToken:\n    type: rancher2:CustomUserToken\n    name: foo\n    properties:\n      username: ${foo.username}\n      password: ${foo.password}\n      description: foo token\n      ttl: 0\n    options:\n      dependsOn:\n        - ${[\"foo-login\"]}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "(Computed) Token access key part (string)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Annotations of the token (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID for scoped token (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Token description (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Computed) Token is enabled (bool)\n"
                },
                "expired": {
                    "type": "boolean",
                    "description": "(Computed) Token is expired (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels of the token (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) Token name (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user password (string)\n",
                    "secret": true
                },
                "renew": {
                    "type": "boolean",
                    "description": "Renew expired or disabled token"
                },
                "secretKey": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Token secret key part (string)\n",
                    "secret": true
                },
                "tempToken": {
                    "type": "string",
                    "description": "(Computed) Generated API temporary token as helper. Should be empty (string)\n",
                    "secret": true
                },
                "tempTokenId": {
                    "type": "string",
                    "description": "(Computed) Generated API temporary token id as helper. Should be empty (string)\n"
                },
                "token": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Token value (string)\n",
                    "secret": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "Token time to live in seconds. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int) \n\nFrom Rancher v2.4.6 \u003cspan pulumi-lang-nodejs=\"`ttl`\" pulumi-lang-dotnet=\"`Ttl`\" pulumi-lang-go=\"`ttl`\" pulumi-lang-python=\"`ttl`\" pulumi-lang-yaml=\"`ttl`\" pulumi-lang-java=\"`ttl`\"\u003e`ttl`\u003c/span\u003e is read in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "(Computed) Token user ID (string)\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user username (string)\n"
                }
            },
            "required": [
                "accessKey",
                "annotations",
                "enabled",
                "expired",
                "labels",
                "name",
                "password",
                "secretKey",
                "tempToken",
                "tempTokenId",
                "token",
                "userId",
                "username"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Annotations of the token (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID for scoped token (string)\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Token description (string)\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels of the token (map)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user password (string)\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "renew": {
                    "type": "boolean",
                    "description": "Renew expired or disabled token",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "Token time to live in seconds. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int) \n\nFrom Rancher v2.4.6 \u003cspan pulumi-lang-nodejs=\"`ttl`\" pulumi-lang-dotnet=\"`Ttl`\" pulumi-lang-go=\"`ttl`\" pulumi-lang-python=\"`ttl`\" pulumi-lang-yaml=\"`ttl`\" pulumi-lang-java=\"`ttl`\"\u003e`ttl`\u003c/span\u003e is read in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The user username (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomUserToken resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "(Computed) Token access key part (string)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the token (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster ID for scoped token (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Token description (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Computed) Token is enabled (bool)\n"
                    },
                    "expired": {
                        "type": "boolean",
                        "description": "(Computed) Token is expired (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the token (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) Token name (string)\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The user password (string)\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "renew": {
                        "type": "boolean",
                        "description": "Renew expired or disabled token",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Token secret key part (string)\n",
                        "secret": true
                    },
                    "tempToken": {
                        "type": "string",
                        "description": "(Computed) Generated API temporary token as helper. Should be empty (string)\n",
                        "secret": true
                    },
                    "tempTokenId": {
                        "type": "string",
                        "description": "(Computed) Generated API temporary token id as helper. Should be empty (string)\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Token value (string)\n",
                        "secret": true
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Token time to live in seconds. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int) \n\nFrom Rancher v2.4.6 \u003cspan pulumi-lang-nodejs=\"`ttl`\" pulumi-lang-dotnet=\"`Ttl`\" pulumi-lang-go=\"`ttl`\" pulumi-lang-python=\"`ttl`\" pulumi-lang-yaml=\"`ttl`\" pulumi-lang-java=\"`ttl`\"\u003e`ttl`\u003c/span\u003e is read in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "(Computed) Token user ID (string)\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user username (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/etcdBackup:EtcdBackup": {
            "description": "Provides a Rancher v2 Etcd Backup resource. This can be used to create an Etcd Backup for Rancher v2.2.x and above, and to retrieve their information. \n\nThe \u003cspan pulumi-lang-nodejs=\"`rancher2.EtcdBackup`\" pulumi-lang-dotnet=\"`rancher2.EtcdBackup`\" pulumi-lang-go=\"`EtcdBackup`\" pulumi-lang-python=\"`EtcdBackup`\" pulumi-lang-yaml=\"`rancher2.EtcdBackup`\" pulumi-lang-java=\"`rancher2.EtcdBackup`\"\u003e`rancher2.EtcdBackup`\u003c/span\u003e resource is used to define extra etcd backups for a \u003cspan pulumi-lang-nodejs=\"`rancher2.Cluster`\" pulumi-lang-dotnet=\"`rancher2.Cluster`\" pulumi-lang-go=\"`Cluster`\" pulumi-lang-python=\"`Cluster`\" pulumi-lang-yaml=\"`rancher2.Cluster`\" pulumi-lang-java=\"`rancher2.Cluster`\"\u003e`rancher2.Cluster`\u003c/span\u003e, which will be created as a local or S3 backup in accordance with the etcd backup config for the cluster. The main etcd backup config for the cluster should be set on the cluster config\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Etcd Backup\nconst foo = new rancher2.EtcdBackup(\"foo\", {\n    backupConfig: {\n        enabled: true,\n        intervalHours: 20,\n        retention: 10,\n        s3BackupConfig: {\n            accessKey: \"access_key\",\n            bucketName: \"bucket_name\",\n            endpoint: \"endpoint\",\n            folder: \"/folder\",\n            region: \"region\",\n            secretKey: \"secret_key\",\n        },\n    },\n    clusterId: \"\u003cCLUSTER_ID\u003e\",\n    name: \"foo\",\n    filename: \"\u003cFILENAME\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Etcd Backup\nfoo = rancher2.EtcdBackup(\"foo\",\n    backup_config={\n        \"enabled\": True,\n        \"interval_hours\": 20,\n        \"retention\": 10,\n        \"s3_backup_config\": {\n            \"access_key\": \"access_key\",\n            \"bucket_name\": \"bucket_name\",\n            \"endpoint\": \"endpoint\",\n            \"folder\": \"/folder\",\n            \"region\": \"region\",\n            \"secret_key\": \"secret_key\",\n        },\n    },\n    cluster_id=\"\u003cCLUSTER_ID\u003e\",\n    name=\"foo\",\n    filename=\"\u003cFILENAME\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Etcd Backup\n    var foo = new Rancher2.EtcdBackup(\"foo\", new()\n    {\n        BackupConfig = new Rancher2.Inputs.EtcdBackupBackupConfigArgs\n        {\n            Enabled = true,\n            IntervalHours = 20,\n            Retention = 10,\n            S3BackupConfig = new Rancher2.Inputs.EtcdBackupBackupConfigS3BackupConfigArgs\n            {\n                AccessKey = \"access_key\",\n                BucketName = \"bucket_name\",\n                Endpoint = \"endpoint\",\n                Folder = \"/folder\",\n                Region = \"region\",\n                SecretKey = \"secret_key\",\n            },\n        },\n        ClusterId = \"\u003cCLUSTER_ID\u003e\",\n        Name = \"foo\",\n        Filename = \"\u003cFILENAME\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Etcd Backup\n\t\t_, err := rancher2.NewEtcdBackup(ctx, \"foo\", \u0026rancher2.EtcdBackupArgs{\n\t\t\tBackupConfig: \u0026rancher2.EtcdBackupBackupConfigArgs{\n\t\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\t\tIntervalHours: pulumi.Int(20),\n\t\t\t\tRetention:     pulumi.Int(10),\n\t\t\t\tS3BackupConfig: \u0026rancher2.EtcdBackupBackupConfigS3BackupConfigArgs{\n\t\t\t\t\tAccessKey:  pulumi.String(\"access_key\"),\n\t\t\t\t\tBucketName: pulumi.String(\"bucket_name\"),\n\t\t\t\t\tEndpoint:   pulumi.String(\"endpoint\"),\n\t\t\t\t\tFolder:     pulumi.String(\"/folder\"),\n\t\t\t\t\tRegion:     pulumi.String(\"region\"),\n\t\t\t\t\tSecretKey:  pulumi.String(\"secret_key\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tClusterId: pulumi.String(\"\u003cCLUSTER_ID\u003e\"),\n\t\t\tName:      pulumi.String(\"foo\"),\n\t\t\tFilename:  pulumi.String(\"\u003cFILENAME\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.EtcdBackup;\nimport com.pulumi.rancher2.EtcdBackupArgs;\nimport com.pulumi.rancher2.inputs.EtcdBackupBackupConfigArgs;\nimport com.pulumi.rancher2.inputs.EtcdBackupBackupConfigS3BackupConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Etcd Backup\n        var foo = new EtcdBackup(\"foo\", EtcdBackupArgs.builder()\n            .backupConfig(EtcdBackupBackupConfigArgs.builder()\n                .enabled(true)\n                .intervalHours(20)\n                .retention(10)\n                .s3BackupConfig(EtcdBackupBackupConfigS3BackupConfigArgs.builder()\n                    .accessKey(\"access_key\")\n                    .bucketName(\"bucket_name\")\n                    .endpoint(\"endpoint\")\n                    .folder(\"/folder\")\n                    .region(\"region\")\n                    .secretKey(\"secret_key\")\n                    .build())\n                .build())\n            .clusterId(\"\u003cCLUSTER_ID\u003e\")\n            .name(\"foo\")\n            .filename(\"\u003cFILENAME\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Etcd Backup\n  foo:\n    type: rancher2:EtcdBackup\n    properties:\n      backupConfig:\n        enabled: true\n        intervalHours: 20\n        retention: 10\n        s3BackupConfig:\n          accessKey: access_key\n          bucketName: bucket_name\n          endpoint: endpoint\n          folder: /folder\n          region: region\n          secretKey: secret_key\n      clusterId: \u003cCLUSTER_ID\u003e\n      name: foo\n      filename: \u003cFILENAME\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEtcd Backup can be imported using the Rancher etcd backup ID\n\n```sh\n$ pulumi import rancher2:index/etcdBackup:EtcdBackup foo \u0026lt;ETCD_BACKUP_ID\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Etcd Backup object (map)\n"
                },
                "backupConfig": {
                    "$ref": "#/types/rancher2:index/EtcdBackupBackupConfig:EtcdBackupBackupConfig",
                    "description": "Backup config for etcd backup (list maxitems:1)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID to config Etcd Backup (string)\n"
                },
                "filename": {
                    "type": "string",
                    "description": "Filename of the Etcd Backup (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Etcd Backup object (map)\n"
                },
                "manual": {
                    "type": "boolean",
                    "description": "Manual execution of the Etcd Backup. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Etcd Backup (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "Description for the Etcd Backup (string)\n"
                }
            },
            "required": [
                "annotations",
                "backupConfig",
                "clusterId",
                "filename",
                "labels",
                "name",
                "namespaceId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Etcd Backup object (map)\n"
                },
                "backupConfig": {
                    "$ref": "#/types/rancher2:index/EtcdBackupBackupConfig:EtcdBackupBackupConfig",
                    "description": "Backup config for etcd backup (list maxitems:1)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID to config Etcd Backup (string)\n",
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "description": "Filename of the Etcd Backup (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Etcd Backup object (map)\n"
                },
                "manual": {
                    "type": "boolean",
                    "description": "Manual execution of the Etcd Backup. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Etcd Backup (string)\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "Description for the Etcd Backup (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EtcdBackup resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for Etcd Backup object (map)\n"
                    },
                    "backupConfig": {
                        "$ref": "#/types/rancher2:index/EtcdBackupBackupConfig:EtcdBackupBackupConfig",
                        "description": "Backup config for etcd backup (list maxitems:1)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster ID to config Etcd Backup (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "filename": {
                        "type": "string",
                        "description": "Filename of the Etcd Backup (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for Etcd Backup object (map)\n"
                    },
                    "manual": {
                        "type": "boolean",
                        "description": "Manual execution of the Etcd Backup. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Etcd Backup (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "Description for the Etcd Backup (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/feature:Feature": {
            "description": "Provides a Rancher v2 Feature resource. This can be used to enable/disable [experimental features](https://rancher.com/docs/rancher/v2.x/en/installation/resources/feature-flags/) for Rancher v2 environments.\n\nExperimental features already exist at Rancher v2.5.x systems, so they can just be updated: \n* On create, provider will read Feature from Rancher and update its value. It will return an error if feature doesn't exist\n* On destroy, provider will not delete feature from Rancher, just from tfstate\n\n**Note:** Some Rancher features as \u003cspan pulumi-lang-nodejs=\"`fleet`\" pulumi-lang-dotnet=\"`Fleet`\" pulumi-lang-go=\"`fleet`\" pulumi-lang-python=\"`fleet`\" pulumi-lang-yaml=\"`fleet`\" pulumi-lang-java=\"`fleet`\"\u003e`fleet`\u003c/span\u003e, may force a Rancher reboot once updated. The provider will wait until Rancher is rebooted. If you are modifying more than one feature in a row, and any of them requires a Rancher reboot, `pulumi up` may fail on first run. Run `pulumi up` again should work fine.  \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Feature\nconst fleet = new rancher2.Feature(\"fleet\", {\n    name: \"fleet\",\n    value: \"\u003cVALUE\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Feature\nfleet = rancher2.Feature(\"fleet\",\n    name=\"fleet\",\n    value=\"\u003cVALUE\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Feature\n    var fleet = new Rancher2.Feature(\"fleet\", new()\n    {\n        Name = \"fleet\",\n        Value = \"\u003cVALUE\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Feature\n\t\t_, err := rancher2.NewFeature(ctx, \"fleet\", \u0026rancher2.FeatureArgs{\n\t\t\tName:  pulumi.String(\"fleet\"),\n\t\t\tValue: pulumi.Bool(\"\u003cVALUE\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Feature;\nimport com.pulumi.rancher2.FeatureArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Feature\n        var fleet = new Feature(\"fleet\", FeatureArgs.builder()\n            .name(\"fleet\")\n            .value(\"\u003cVALUE\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Feature\n  fleet:\n    type: rancher2:Feature\n    properties:\n      name: fleet\n      value: \u003cVALUE\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for feature object (map)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for feature object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the feature (string)\n"
                },
                "value": {
                    "type": "boolean",
                    "description": "The value of the feature. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for feature object (map)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for feature object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the feature (string)\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "boolean",
                    "description": "The value of the feature. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Feature resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for feature object (map)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for feature object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the feature (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "boolean",
                        "description": "The value of the feature. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/globalRole:GlobalRole": {
            "description": "Provides a Rancher v2 Global Role resource. This can be used to create Global Role for Rancher v2 and retrieve their information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Global Role\nconst foo = new rancher2.GlobalRole(\"foo\", {\n    name: \"foo\",\n    newUserDefault: true,\n    description: \"Terraform global role acceptance test\",\n    rules: [{\n        apiGroups: [\"*\"],\n        resources: [\"secrets\"],\n        verbs: [\"create\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Global Role\nfoo = rancher2.GlobalRole(\"foo\",\n    name=\"foo\",\n    new_user_default=True,\n    description=\"Terraform global role acceptance test\",\n    rules=[{\n        \"api_groups\": [\"*\"],\n        \"resources\": [\"secrets\"],\n        \"verbs\": [\"create\"],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Global Role\n    var foo = new Rancher2.GlobalRole(\"foo\", new()\n    {\n        Name = \"foo\",\n        NewUserDefault = true,\n        Description = \"Terraform global role acceptance test\",\n        Rules = new[]\n        {\n            new Rancher2.Inputs.GlobalRoleRuleArgs\n            {\n                ApiGroups = new[]\n                {\n                    \"*\",\n                },\n                Resources = new[]\n                {\n                    \"secrets\",\n                },\n                Verbs = new[]\n                {\n                    \"create\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Global Role\n\t\t_, err := rancher2.NewGlobalRole(ctx, \"foo\", \u0026rancher2.GlobalRoleArgs{\n\t\t\tName:           pulumi.String(\"foo\"),\n\t\t\tNewUserDefault: pulumi.Bool(true),\n\t\t\tDescription:    pulumi.String(\"Terraform global role acceptance test\"),\n\t\t\tRules: rancher2.GlobalRoleRuleArray{\n\t\t\t\t\u0026rancher2.GlobalRoleRuleArgs{\n\t\t\t\t\tApiGroups: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"secrets\"),\n\t\t\t\t\t},\n\t\t\t\t\tVerbs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"create\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.GlobalRole;\nimport com.pulumi.rancher2.GlobalRoleArgs;\nimport com.pulumi.rancher2.inputs.GlobalRoleRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Global Role\n        var foo = new GlobalRole(\"foo\", GlobalRoleArgs.builder()\n            .name(\"foo\")\n            .newUserDefault(true)\n            .description(\"Terraform global role acceptance test\")\n            .rules(GlobalRoleRuleArgs.builder()\n                .apiGroups(\"*\")\n                .resources(\"secrets\")\n                .verbs(\"create\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Global Role\n  foo:\n    type: rancher2:GlobalRole\n    properties:\n      name: foo\n      newUserDefault: true\n      description: Terraform global role acceptance test\n      rules:\n        - apiGroups:\n            - '*'\n          resources:\n            - secrets\n          verbs:\n            - create\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nGlobal Role can be imported using the Rancher Global Role ID\n\n```sh\n$ pulumi import rancher2:index/globalRole:GlobalRole foo \u0026lt;global_role_id\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for global role object (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "(Computed) Builtin global role (bool)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Global role description (string)\n"
                },
                "inheritedClusterRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of role templates whose permissions are granted by this global role in every cluster besides the local cluster (list)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for global role object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Global role name (string)\n"
                },
                "newUserDefault": {
                    "type": "boolean",
                    "description": "Whether or not this role should be added to new users. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/GlobalRoleRule:GlobalRoleRule"
                    },
                    "description": "Global role policy rules (list)\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "Global role uuid"
                }
            },
            "required": [
                "annotations",
                "builtin",
                "description",
                "labels",
                "name",
                "rules",
                "uuid"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for global role object (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Global role description (string)\n"
                },
                "inheritedClusterRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of role templates whose permissions are granted by this global role in every cluster besides the local cluster (list)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for global role object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Global role name (string)\n"
                },
                "newUserDefault": {
                    "type": "boolean",
                    "description": "Whether or not this role should be added to new users. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/GlobalRoleRule:GlobalRoleRule"
                    },
                    "description": "Global role policy rules (list)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GlobalRole resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for global role object (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "(Computed) Builtin global role (bool)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Global role description (string)\n"
                    },
                    "inheritedClusterRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names of role templates whose permissions are granted by this global role in every cluster besides the local cluster (list)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for global role object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Global role name (string)\n"
                    },
                    "newUserDefault": {
                        "type": "boolean",
                        "description": "Whether or not this role should be added to new users. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/GlobalRoleRule:GlobalRoleRule"
                        },
                        "description": "Global role policy rules (list)\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "Global role uuid"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/globalRoleBinding:GlobalRoleBinding": {
            "description": "Provides a Rancher v2 Global Role Binding resource. This can be used to create Global Role Bindings for Rancher v2 environments and retrieve their information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Global Role Binding using user_id\nconst foo = new rancher2.GlobalRoleBinding(\"foo\", {\n    name: \"foo\",\n    globalRoleId: \"admin\",\n    userId: \"user-XXXXX\",\n});\n// Create a new rancher2 Global Role Binding using group_principal_id\nconst foo2 = new rancher2.GlobalRoleBinding(\"foo2\", {\n    name: \"foo2\",\n    globalRoleId: \"admin\",\n    groupPrincipalId: \"local://g-XXXXX\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Global Role Binding using user_id\nfoo = rancher2.GlobalRoleBinding(\"foo\",\n    name=\"foo\",\n    global_role_id=\"admin\",\n    user_id=\"user-XXXXX\")\n# Create a new rancher2 Global Role Binding using group_principal_id\nfoo2 = rancher2.GlobalRoleBinding(\"foo2\",\n    name=\"foo2\",\n    global_role_id=\"admin\",\n    group_principal_id=\"local://g-XXXXX\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Global Role Binding using user_id\n    var foo = new Rancher2.GlobalRoleBinding(\"foo\", new()\n    {\n        Name = \"foo\",\n        GlobalRoleId = \"admin\",\n        UserId = \"user-XXXXX\",\n    });\n\n    // Create a new rancher2 Global Role Binding using group_principal_id\n    var foo2 = new Rancher2.GlobalRoleBinding(\"foo2\", new()\n    {\n        Name = \"foo2\",\n        GlobalRoleId = \"admin\",\n        GroupPrincipalId = \"local://g-XXXXX\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Global Role Binding using user_id\n\t\t_, err := rancher2.NewGlobalRoleBinding(ctx, \"foo\", \u0026rancher2.GlobalRoleBindingArgs{\n\t\t\tName:         pulumi.String(\"foo\"),\n\t\t\tGlobalRoleId: pulumi.String(\"admin\"),\n\t\t\tUserId:       pulumi.String(\"user-XXXXX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Global Role Binding using group_principal_id\n\t\t_, err = rancher2.NewGlobalRoleBinding(ctx, \"foo2\", \u0026rancher2.GlobalRoleBindingArgs{\n\t\t\tName:             pulumi.String(\"foo2\"),\n\t\t\tGlobalRoleId:     pulumi.String(\"admin\"),\n\t\t\tGroupPrincipalId: pulumi.String(\"local://g-XXXXX\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.GlobalRoleBinding;\nimport com.pulumi.rancher2.GlobalRoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Global Role Binding using user_id\n        var foo = new GlobalRoleBinding(\"foo\", GlobalRoleBindingArgs.builder()\n            .name(\"foo\")\n            .globalRoleId(\"admin\")\n            .userId(\"user-XXXXX\")\n            .build());\n\n        // Create a new rancher2 Global Role Binding using group_principal_id\n        var foo2 = new GlobalRoleBinding(\"foo2\", GlobalRoleBindingArgs.builder()\n            .name(\"foo2\")\n            .globalRoleId(\"admin\")\n            .groupPrincipalId(\"local://g-XXXXX\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Global Role Binding using user_id\n  foo:\n    type: rancher2:GlobalRoleBinding\n    properties:\n      name: foo\n      globalRoleId: admin\n      userId: user-XXXXX\n  # Create a new rancher2 Global Role Binding using group_principal_id\n  foo2:\n    type: rancher2:GlobalRoleBinding\n    properties:\n      name: foo2\n      globalRoleId: admin\n      groupPrincipalId: local://g-XXXXX\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nGlobal Role Bindings can be imported using the Rancher Global Role Binding ID\n\n```sh\n$ pulumi import rancher2:index/globalRoleBinding:GlobalRoleBinding foo \u0026lt;GLOBAL_ROLE_BINDING_ID\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for global role binding (map)\n"
                },
                "globalRoleId": {
                    "type": "string",
                    "description": "The role id from create global role binding (string)\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The group principal ID to assign global role binding (only works with external auth providers that support groups). Rancher v2.4.0 or higher is required (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for global role binding (map)\n\n**Note:** user \u003cspan pulumi-lang-nodejs=\"`userId`\" pulumi-lang-dotnet=\"`UserId`\" pulumi-lang-go=\"`userId`\" pulumi-lang-python=\"`user_id`\" pulumi-lang-yaml=\"`userId`\" pulumi-lang-java=\"`userId`\"\u003e`user_id`\u003c/span\u003e OR group \u003cspan pulumi-lang-nodejs=\"`groupPrincipalId`\" pulumi-lang-dotnet=\"`GroupPrincipalId`\" pulumi-lang-go=\"`groupPrincipalId`\" pulumi-lang-python=\"`group_principal_id`\" pulumi-lang-yaml=\"`groupPrincipalId`\" pulumi-lang-java=\"`groupPrincipalId`\"\u003e`group_principal_id`\u003c/span\u003e must be defined\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the global role binding (string)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign global role binding (string)\n"
                }
            },
            "required": [
                "annotations",
                "globalRoleId",
                "groupPrincipalId",
                "labels",
                "name",
                "userId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for global role binding (map)\n"
                },
                "globalRoleId": {
                    "type": "string",
                    "description": "The role id from create global role binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The group principal ID to assign global role binding (only works with external auth providers that support groups). Rancher v2.4.0 or higher is required (string)\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for global role binding (map)\n\n**Note:** user \u003cspan pulumi-lang-nodejs=\"`userId`\" pulumi-lang-dotnet=\"`UserId`\" pulumi-lang-go=\"`userId`\" pulumi-lang-python=\"`user_id`\" pulumi-lang-yaml=\"`userId`\" pulumi-lang-java=\"`userId`\"\u003e`user_id`\u003c/span\u003e OR group \u003cspan pulumi-lang-nodejs=\"`groupPrincipalId`\" pulumi-lang-dotnet=\"`GroupPrincipalId`\" pulumi-lang-go=\"`groupPrincipalId`\" pulumi-lang-python=\"`group_principal_id`\" pulumi-lang-yaml=\"`groupPrincipalId`\" pulumi-lang-java=\"`groupPrincipalId`\"\u003e`group_principal_id`\u003c/span\u003e must be defined\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the global role binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign global role binding (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "globalRoleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GlobalRoleBinding resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for global role binding (map)\n"
                    },
                    "globalRoleId": {
                        "type": "string",
                        "description": "The role id from create global role binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "groupPrincipalId": {
                        "type": "string",
                        "description": "The group principal ID to assign global role binding (only works with external auth providers that support groups). Rancher v2.4.0 or higher is required (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for global role binding (map)\n\n**Note:** user \u003cspan pulumi-lang-nodejs=\"`userId`\" pulumi-lang-dotnet=\"`UserId`\" pulumi-lang-go=\"`userId`\" pulumi-lang-python=\"`user_id`\" pulumi-lang-yaml=\"`userId`\" pulumi-lang-java=\"`userId`\"\u003e`user_id`\u003c/span\u003e OR group \u003cspan pulumi-lang-nodejs=\"`groupPrincipalId`\" pulumi-lang-dotnet=\"`GroupPrincipalId`\" pulumi-lang-go=\"`groupPrincipalId`\" pulumi-lang-python=\"`group_principal_id`\" pulumi-lang-yaml=\"`groupPrincipalId`\" pulumi-lang-java=\"`groupPrincipalId`\"\u003e`group_principal_id`\u003c/span\u003e must be defined\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the global role binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID to assign global role binding (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/machineConfigV2:MachineConfigV2": {
            "description": "Provides a Rancher v2 Machine config v2 resource. This can be used to create Machine Config v2 for Rancher v2 and retrieve their information. This resource is available from Rancher v2.6.0 and above.\n\nThe supported cloud providers includes \u003cspan pulumi-lang-nodejs=\"`amazonec2`\" pulumi-lang-dotnet=\"`Amazonec2`\" pulumi-lang-go=\"`amazonec2`\" pulumi-lang-python=\"`amazonec2`\" pulumi-lang-yaml=\"`amazonec2`\" pulumi-lang-java=\"`amazonec2`\"\u003e`amazonec2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azure`\" pulumi-lang-dotnet=\"`Azure`\" pulumi-lang-go=\"`azure`\" pulumi-lang-python=\"`azure`\" pulumi-lang-yaml=\"`azure`\" pulumi-lang-java=\"`azure`\"\u003e`azure`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitalocean`\" pulumi-lang-dotnet=\"`Digitalocean`\" pulumi-lang-go=\"`digitalocean`\" pulumi-lang-python=\"`digitalocean`\" pulumi-lang-yaml=\"`digitalocean`\" pulumi-lang-java=\"`digitalocean`\"\u003e`digitalocean`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvester`\" pulumi-lang-dotnet=\"`Harvester`\" pulumi-lang-go=\"`harvester`\" pulumi-lang-python=\"`harvester`\" pulumi-lang-yaml=\"`harvester`\" pulumi-lang-java=\"`harvester`\"\u003e`harvester`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linode`\" pulumi-lang-dotnet=\"`Linode`\" pulumi-lang-go=\"`linode`\" pulumi-lang-python=\"`linode`\" pulumi-lang-yaml=\"`linode`\" pulumi-lang-java=\"`linode`\"\u003e`linode`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstack`\" pulumi-lang-dotnet=\"`Openstack`\" pulumi-lang-go=\"`openstack`\" pulumi-lang-python=\"`openstack`\" pulumi-lang-yaml=\"`openstack`\" pulumi-lang-java=\"`openstack`\"\u003e`openstack`\u003c/span\u003e, and \u003cspan pulumi-lang-nodejs=\"`vsphere`\" pulumi-lang-dotnet=\"`Vsphere`\" pulumi-lang-go=\"`vsphere`\" pulumi-lang-python=\"`vsphere`\" pulumi-lang-yaml=\"`vsphere`\" pulumi-lang-java=\"`vsphere`\"\u003e`vsphere`\u003c/span\u003e.\n\n\nStarting with Rancher v2.12.0 and above, \u003cspan pulumi-lang-nodejs=\"`google`\" pulumi-lang-dotnet=\"`Google`\" pulumi-lang-go=\"`google`\" pulumi-lang-python=\"`google`\" pulumi-lang-yaml=\"`google`\" pulumi-lang-java=\"`google`\"\u003e`google`\u003c/span\u003e is also offered as a supported cloud provider.\n\n### Using the Harvester Node Driver\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Get imported harvester cluster info\nconst foo_harvester = rancher2.getClusterV2({\n    name: \"foo-harvester\",\n});\n// Create a new Cloud Credential for an imported Harvester cluster\nconst foo_harvesterCloudCredential = new rancher2.CloudCredential(\"foo-harvester\", {\n    name: \"foo-harvester\",\n    harvesterCredentialConfig: {\n        clusterId: foo_harvester.then(foo_harvester =\u003e foo_harvester.clusterV1Id),\n        clusterType: \"imported\",\n        kubeconfigContent: foo_harvester.then(foo_harvester =\u003e foo_harvester.kubeConfig),\n    },\n});\n// Create a new rancher2 machine config v2 using harvester node_driver\nconst foo_harvester_v2 = new rancher2.MachineConfigV2(\"foo-harvester-v2\", {\n    generateName: \"foo-harvester-v2\",\n    harvesterConfig: {\n        vmNamespace: \"default\",\n        cpuCount: \"2\",\n        memorySize: \"4\",\n        diskInfo: `    {\n        \\\\\"disks\\\\\": [{\n            \\\\\"imageName\\\\\": \\\\\"harvester-public/image-57hzg\\\\\",\n            \\\\\"size\\\\\": 40,\n            \\\\\"bootOrder\\\\\": 1\n        }]\n    }\n`,\n        networkInfo: `    {\n        \\\\\"interfaces\\\\\": [{\n            \\\\\"networkName\\\\\": \\\\\"harvester-public/vlan1\\\\\"\n        }]\n    }\n`,\n        sshUser: \"ubuntu\",\n        userData: `    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n`,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Get imported harvester cluster info\nfoo_harvester = rancher2.get_cluster_v2(name=\"foo-harvester\")\n# Create a new Cloud Credential for an imported Harvester cluster\nfoo_harvester_cloud_credential = rancher2.CloudCredential(\"foo-harvester\",\n    name=\"foo-harvester\",\n    harvester_credential_config={\n        \"cluster_id\": foo_harvester.cluster_v1_id,\n        \"cluster_type\": \"imported\",\n        \"kubeconfig_content\": foo_harvester.kube_config,\n    })\n# Create a new rancher2 machine config v2 using harvester node_driver\nfoo_harvester_v2 = rancher2.MachineConfigV2(\"foo-harvester-v2\",\n    generate_name=\"foo-harvester-v2\",\n    harvester_config={\n        \"vm_namespace\": \"default\",\n        \"cpu_count\": \"2\",\n        \"memory_size\": \"4\",\n        \"disk_info\": \"\"\"    {\n        \\\"disks\\\": [{\n            \\\"imageName\\\": \\\"harvester-public/image-57hzg\\\",\n            \\\"size\\\": 40,\n            \\\"bootOrder\\\": 1\n        }]\n    }\n\"\"\",\n        \"network_info\": \"\"\"    {\n        \\\"interfaces\\\": [{\n            \\\"networkName\\\": \\\"harvester-public/vlan1\\\"\n        }]\n    }\n\"\"\",\n        \"ssh_user\": \"ubuntu\",\n        \"user_data\": \"\"\"    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n\"\"\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get imported harvester cluster info\n    var foo_harvester = Rancher2.GetClusterV2.Invoke(new()\n    {\n        Name = \"foo-harvester\",\n    });\n\n    // Create a new Cloud Credential for an imported Harvester cluster\n    var foo_harvesterCloudCredential = new Rancher2.CloudCredential(\"foo-harvester\", new()\n    {\n        Name = \"foo-harvester\",\n        HarvesterCredentialConfig = new Rancher2.Inputs.CloudCredentialHarvesterCredentialConfigArgs\n        {\n            ClusterId = foo_harvester.Apply(foo_harvester =\u003e foo_harvester.Apply(getClusterV2Result =\u003e getClusterV2Result.ClusterV1Id)),\n            ClusterType = \"imported\",\n            KubeconfigContent = foo_harvester.Apply(foo_harvester =\u003e foo_harvester.Apply(getClusterV2Result =\u003e getClusterV2Result.KubeConfig)),\n        },\n    });\n\n    // Create a new rancher2 machine config v2 using harvester node_driver\n    var foo_harvester_v2 = new Rancher2.MachineConfigV2(\"foo-harvester-v2\", new()\n    {\n        GenerateName = \"foo-harvester-v2\",\n        HarvesterConfig = new Rancher2.Inputs.MachineConfigV2HarvesterConfigArgs\n        {\n            VmNamespace = \"default\",\n            CpuCount = \"2\",\n            MemorySize = \"4\",\n            DiskInfo = @\"    {\n        \\\"\"disks\\\"\": [{\n            \\\"\"imageName\\\"\": \\\"\"harvester-public/image-57hzg\\\"\",\n            \\\"\"size\\\"\": 40,\n            \\\"\"bootOrder\\\"\": 1\n        }]\n    }\n\",\n            NetworkInfo = @\"    {\n        \\\"\"interfaces\\\"\": [{\n            \\\"\"networkName\\\"\": \\\"\"harvester-public/vlan1\\\"\"\n        }]\n    }\n\",\n            SshUser = \"ubuntu\",\n            UserData = @\"    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get imported harvester cluster info\n\t\tfoo_harvester, err := rancher2.LookupClusterV2(ctx, \u0026rancher2.LookupClusterV2Args{\n\t\t\tName: \"foo-harvester\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new Cloud Credential for an imported Harvester cluster\n\t\t_, err = rancher2.NewCloudCredential(ctx, \"foo-harvester\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tName: pulumi.String(\"foo-harvester\"),\n\t\t\tHarvesterCredentialConfig: \u0026rancher2.CloudCredentialHarvesterCredentialConfigArgs{\n\t\t\t\tClusterId:         pulumi.String(foo_harvester.ClusterV1Id),\n\t\t\t\tClusterType:       pulumi.String(\"imported\"),\n\t\t\t\tKubeconfigContent: pulumi.String(foo_harvester.KubeConfig),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 machine config v2 using harvester node_driver\n\t\t_, err = rancher2.NewMachineConfigV2(ctx, \"foo-harvester-v2\", \u0026rancher2.MachineConfigV2Args{\n\t\t\tGenerateName: pulumi.String(\"foo-harvester-v2\"),\n\t\t\tHarvesterConfig: \u0026rancher2.MachineConfigV2HarvesterConfigArgs{\n\t\t\t\tVmNamespace: pulumi.String(\"default\"),\n\t\t\t\tCpuCount:    pulumi.String(\"2\"),\n\t\t\t\tMemorySize:  pulumi.String(\"4\"),\n\t\t\t\tDiskInfo: pulumi.String(`    {\n        \\\"disks\\\": [{\n            \\\"imageName\\\": \\\"harvester-public/image-57hzg\\\",\n            \\\"size\\\": 40,\n            \\\"bootOrder\\\": 1\n        }]\n    }\n`),\n\t\t\t\tNetworkInfo: pulumi.String(`    {\n        \\\"interfaces\\\": [{\n            \\\"networkName\\\": \\\"harvester-public/vlan1\\\"\n        }]\n    }\n`),\n\t\t\t\tSshUser: pulumi.String(\"ubuntu\"),\n\t\t\t\tUserData: pulumi.String(`    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n`),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetClusterV2Args;\nimport com.pulumi.rancher2.CloudCredential;\nimport com.pulumi.rancher2.CloudCredentialArgs;\nimport com.pulumi.rancher2.inputs.CloudCredentialHarvesterCredentialConfigArgs;\nimport com.pulumi.rancher2.MachineConfigV2;\nimport com.pulumi.rancher2.MachineConfigV2Args;\nimport com.pulumi.rancher2.inputs.MachineConfigV2HarvesterConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get imported harvester cluster info\n        final var foo-harvester = Rancher2Functions.getClusterV2(GetClusterV2Args.builder()\n            .name(\"foo-harvester\")\n            .build());\n\n        // Create a new Cloud Credential for an imported Harvester cluster\n        var foo_harvesterCloudCredential = new CloudCredential(\"foo-harvesterCloudCredential\", CloudCredentialArgs.builder()\n            .name(\"foo-harvester\")\n            .harvesterCredentialConfig(CloudCredentialHarvesterCredentialConfigArgs.builder()\n                .clusterId(foo_harvester.clusterV1Id())\n                .clusterType(\"imported\")\n                .kubeconfigContent(foo_harvester.kubeConfig())\n                .build())\n            .build());\n\n        // Create a new rancher2 machine config v2 using harvester node_driver\n        var foo_harvester_v2 = new MachineConfigV2(\"foo-harvester-v2\", MachineConfigV2Args.builder()\n            .generateName(\"foo-harvester-v2\")\n            .harvesterConfig(MachineConfigV2HarvesterConfigArgs.builder()\n                .vmNamespace(\"default\")\n                .cpuCount(\"2\")\n                .memorySize(\"4\")\n                .diskInfo(\"\"\"\n    {\n        \\\"disks\\\": [{\n            \\\"imageName\\\": \\\"harvester-public/image-57hzg\\\",\n            \\\"size\\\": 40,\n            \\\"bootOrder\\\": 1\n        }]\n    }\n                \"\"\")\n                .networkInfo(\"\"\"\n    {\n        \\\"interfaces\\\": [{\n            \\\"networkName\\\": \\\"harvester-public/vlan1\\\"\n        }]\n    }\n                \"\"\")\n                .sshUser(\"ubuntu\")\n                .userData(\"\"\"\n    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n                \"\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Cloud Credential for an imported Harvester cluster\n  foo-harvesterCloudCredential:\n    type: rancher2:CloudCredential\n    name: foo-harvester\n    properties:\n      name: foo-harvester\n      harvesterCredentialConfig:\n        clusterId: ${[\"foo-harvester\"].clusterV1Id}\n        clusterType: imported\n        kubeconfigContent: ${[\"foo-harvester\"].kubeConfig}\n  # Create a new rancher2 machine config v2 using harvester node_driver\n  foo-harvester-v2:\n    type: rancher2:MachineConfigV2\n    properties:\n      generateName: foo-harvester-v2\n      harvesterConfig:\n        vmNamespace: default\n        cpuCount: '2'\n        memorySize: '4'\n        diskInfo: |2\n              {\n                  \\\"disks\\\": [{\n                      \\\"imageName\\\": \\\"harvester-public/image-57hzg\\\",\n                      \\\"size\\\": 40,\n                      \\\"bootOrder\\\": 1\n                  }]\n              }\n        networkInfo: |2\n              {\n                  \\\"interfaces\\\": [{\n                      \\\"networkName\\\": \\\"harvester-public/vlan1\\\"\n                  }]\n              }\n        sshUser: ubuntu\n        userData: |2\n              package_update: true\n              packages:\n                - qemu-guest-agent\n                - iptables\n              runcmd:\n                - - systemctl\n                  - enable\n                  - '--now'\n                  - qemu-guest-agent.service\nvariables:\n  # Get imported harvester cluster info\n  foo-harvester:\n    fn::invoke:\n      function: rancher2:getClusterV2\n      arguments:\n        name: foo-harvester\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "amazonec2Config": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2Amazonec2Config:MachineConfigV2Amazonec2Config",
                    "description": "AWS config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Machine Config V2 object (map)\n"
                },
                "azureConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2AzureConfig:MachineConfigV2AzureConfig",
                    "description": "Azure config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "digitaloceanConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2DigitaloceanConfig:MachineConfigV2DigitaloceanConfig",
                    "description": "Digitalocean config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "fleetNamespace": {
                    "type": "string",
                    "description": "Cluster V2 fleet namespace\n"
                },
                "generateName": {
                    "type": "string",
                    "description": "Cluster V2 generate name. The pattern to generate machine config name. e.g  generate_name=\\\"prod-pool1\\\" will generate \\\"nc-prod-pool1-?????\\\" name computed at \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e attribute (string)\n"
                },
                "googleConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2GoogleConfig:MachineConfigV2GoogleConfig",
                    "description": "Google config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "harvesterConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2HarvesterConfig:MachineConfigV2HarvesterConfig",
                    "description": "Harvester config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "kind": {
                    "type": "string",
                    "description": "(Computed) The machine config kind (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Machine Config V2 object (map)\n\n**Note:** \u003cspan pulumi-lang-nodejs=\"`labels`\" pulumi-lang-dotnet=\"`Labels`\" pulumi-lang-go=\"`labels`\" pulumi-lang-python=\"`labels`\" pulumi-lang-yaml=\"`labels`\" pulumi-lang-java=\"`labels`\"\u003e`labels`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`nodeTaints`\" pulumi-lang-dotnet=\"`NodeTaints`\" pulumi-lang-go=\"`nodeTaints`\" pulumi-lang-python=\"`node_taints`\" pulumi-lang-yaml=\"`nodeTaints`\" pulumi-lang-java=\"`nodeTaints`\"\u003e`node_taints`\u003c/span\u003e will be applied to nodes deployed using the Machine Config V2\n"
                },
                "linodeConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2LinodeConfig:MachineConfigV2LinodeConfig",
                    "description": "Linode config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) The machine config name (string)\n"
                },
                "openstackConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2OpenstackConfig:MachineConfigV2OpenstackConfig",
                    "description": "Openstack config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "(Computed) The machine config k8s resource version (string)\n"
                },
                "vsphereConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2VsphereConfig:MachineConfigV2VsphereConfig",
                    "description": "vSphere config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e (list maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "generateName",
                "kind",
                "labels",
                "name",
                "resourceVersion"
            ],
            "inputProperties": {
                "amazonec2Config": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2Amazonec2Config:MachineConfigV2Amazonec2Config",
                    "description": "AWS config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Machine Config V2 object (map)\n"
                },
                "azureConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2AzureConfig:MachineConfigV2AzureConfig",
                    "description": "Azure config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "digitaloceanConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2DigitaloceanConfig:MachineConfigV2DigitaloceanConfig",
                    "description": "Digitalocean config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "fleetNamespace": {
                    "type": "string",
                    "description": "Cluster V2 fleet namespace\n",
                    "willReplaceOnChanges": true
                },
                "generateName": {
                    "type": "string",
                    "description": "Cluster V2 generate name. The pattern to generate machine config name. e.g  generate_name=\\\"prod-pool1\\\" will generate \\\"nc-prod-pool1-?????\\\" name computed at \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e attribute (string)\n",
                    "willReplaceOnChanges": true
                },
                "googleConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2GoogleConfig:MachineConfigV2GoogleConfig",
                    "description": "Google config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "harvesterConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2HarvesterConfig:MachineConfigV2HarvesterConfig",
                    "description": "Harvester config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Machine Config V2 object (map)\n\n**Note:** \u003cspan pulumi-lang-nodejs=\"`labels`\" pulumi-lang-dotnet=\"`Labels`\" pulumi-lang-go=\"`labels`\" pulumi-lang-python=\"`labels`\" pulumi-lang-yaml=\"`labels`\" pulumi-lang-java=\"`labels`\"\u003e`labels`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`nodeTaints`\" pulumi-lang-dotnet=\"`NodeTaints`\" pulumi-lang-go=\"`nodeTaints`\" pulumi-lang-python=\"`node_taints`\" pulumi-lang-yaml=\"`nodeTaints`\" pulumi-lang-java=\"`nodeTaints`\"\u003e`node_taints`\u003c/span\u003e will be applied to nodes deployed using the Machine Config V2\n"
                },
                "linodeConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2LinodeConfig:MachineConfigV2LinodeConfig",
                    "description": "Linode config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "openstackConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2OpenstackConfig:MachineConfigV2OpenstackConfig",
                    "description": "Openstack config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                },
                "vsphereConfig": {
                    "$ref": "#/types/rancher2:index/MachineConfigV2VsphereConfig:MachineConfigV2VsphereConfig",
                    "description": "vSphere config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e (list maxitems:1)\n"
                }
            },
            "requiredInputs": [
                "generateName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MachineConfigV2 resources.\n",
                "properties": {
                    "amazonec2Config": {
                        "$ref": "#/types/rancher2:index/MachineConfigV2Amazonec2Config:MachineConfigV2Amazonec2Config",
                        "description": "AWS config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for Machine Config V2 object (map)\n"
                    },
                    "azureConfig": {
                        "$ref": "#/types/rancher2:index/MachineConfigV2AzureConfig:MachineConfigV2AzureConfig",
                        "description": "Azure config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "digitaloceanConfig": {
                        "$ref": "#/types/rancher2:index/MachineConfigV2DigitaloceanConfig:MachineConfigV2DigitaloceanConfig",
                        "description": "Digitalocean config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "fleetNamespace": {
                        "type": "string",
                        "description": "Cluster V2 fleet namespace\n",
                        "willReplaceOnChanges": true
                    },
                    "generateName": {
                        "type": "string",
                        "description": "Cluster V2 generate name. The pattern to generate machine config name. e.g  generate_name=\\\"prod-pool1\\\" will generate \\\"nc-prod-pool1-?????\\\" name computed at \u003cspan pulumi-lang-nodejs=\"`name`\" pulumi-lang-dotnet=\"`Name`\" pulumi-lang-go=\"`name`\" pulumi-lang-python=\"`name`\" pulumi-lang-yaml=\"`name`\" pulumi-lang-java=\"`name`\"\u003e`name`\u003c/span\u003e attribute (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "googleConfig": {
                        "$ref": "#/types/rancher2:index/MachineConfigV2GoogleConfig:MachineConfigV2GoogleConfig",
                        "description": "Google config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "harvesterConfig": {
                        "$ref": "#/types/rancher2:index/MachineConfigV2HarvesterConfig:MachineConfigV2HarvesterConfig",
                        "description": "Harvester config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "(Computed) The machine config kind (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for Machine Config V2 object (map)\n\n**Note:** \u003cspan pulumi-lang-nodejs=\"`labels`\" pulumi-lang-dotnet=\"`Labels`\" pulumi-lang-go=\"`labels`\" pulumi-lang-python=\"`labels`\" pulumi-lang-yaml=\"`labels`\" pulumi-lang-java=\"`labels`\"\u003e`labels`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`nodeTaints`\" pulumi-lang-dotnet=\"`NodeTaints`\" pulumi-lang-go=\"`nodeTaints`\" pulumi-lang-python=\"`node_taints`\" pulumi-lang-yaml=\"`nodeTaints`\" pulumi-lang-java=\"`nodeTaints`\"\u003e`node_taints`\u003c/span\u003e will be applied to nodes deployed using the Machine Config V2\n"
                    },
                    "linodeConfig": {
                        "$ref": "#/types/rancher2:index/MachineConfigV2LinodeConfig:MachineConfigV2LinodeConfig",
                        "description": "Linode config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) The machine config name (string)\n"
                    },
                    "openstackConfig": {
                        "$ref": "#/types/rancher2:index/MachineConfigV2OpenstackConfig:MachineConfigV2OpenstackConfig",
                        "description": "Openstack config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`vsphereConfig`\" pulumi-lang-dotnet=\"`VsphereConfig`\" pulumi-lang-go=\"`vsphereConfig`\" pulumi-lang-python=\"`vsphere_config`\" pulumi-lang-yaml=\"`vsphereConfig`\" pulumi-lang-java=\"`vsphereConfig`\"\u003e`vsphere_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "(Computed) The machine config k8s resource version (string)\n"
                    },
                    "vsphereConfig": {
                        "$ref": "#/types/rancher2:index/MachineConfigV2VsphereConfig:MachineConfigV2VsphereConfig",
                        "description": "vSphere config for the Machine Config V2. Conflicts with \u003cspan pulumi-lang-nodejs=\"`amazonec2Config`\" pulumi-lang-dotnet=\"`Amazonec2Config`\" pulumi-lang-go=\"`amazonec2Config`\" pulumi-lang-python=\"`amazonec2_config`\" pulumi-lang-yaml=\"`amazonec2Config`\" pulumi-lang-java=\"`amazonec2Config`\"\u003e`amazonec2_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azureConfig`\" pulumi-lang-dotnet=\"`AzureConfig`\" pulumi-lang-go=\"`azureConfig`\" pulumi-lang-python=\"`azure_config`\" pulumi-lang-yaml=\"`azureConfig`\" pulumi-lang-java=\"`azureConfig`\"\u003e`azure_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`digitaloceanConfig`\" pulumi-lang-dotnet=\"`DigitaloceanConfig`\" pulumi-lang-go=\"`digitaloceanConfig`\" pulumi-lang-python=\"`digitalocean_config`\" pulumi-lang-yaml=\"`digitaloceanConfig`\" pulumi-lang-java=\"`digitaloceanConfig`\"\u003e`digitalocean_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`harvesterConfig`\" pulumi-lang-dotnet=\"`HarvesterConfig`\" pulumi-lang-go=\"`harvesterConfig`\" pulumi-lang-python=\"`harvester_config`\" pulumi-lang-yaml=\"`harvesterConfig`\" pulumi-lang-java=\"`harvesterConfig`\"\u003e`harvester_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`linodeConfig`\" pulumi-lang-dotnet=\"`LinodeConfig`\" pulumi-lang-go=\"`linodeConfig`\" pulumi-lang-python=\"`linode_config`\" pulumi-lang-yaml=\"`linodeConfig`\" pulumi-lang-java=\"`linodeConfig`\"\u003e`linode_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googleConfig`\" pulumi-lang-dotnet=\"`GoogleConfig`\" pulumi-lang-go=\"`googleConfig`\" pulumi-lang-python=\"`google_config`\" pulumi-lang-yaml=\"`googleConfig`\" pulumi-lang-java=\"`googleConfig`\"\u003e`google_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`openstackConfig`\" pulumi-lang-dotnet=\"`OpenstackConfig`\" pulumi-lang-go=\"`openstackConfig`\" pulumi-lang-python=\"`openstack_config`\" pulumi-lang-yaml=\"`openstackConfig`\" pulumi-lang-java=\"`openstackConfig`\"\u003e`openstack_config`\u003c/span\u003e (list maxitems:1)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/namespace:Namespace": {
            "description": "Provides a Rancher v2 Namespace resource. This can be used to create namespaces for Rancher v2 environments and retrieve their information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Namespace\nconst foo = new rancher2.Namespace(\"foo\", {\n    name: \"foo\",\n    projectId: \"\u003cPROJECT_ID\u003e\",\n    description: \"foo namespace\",\n    resourceQuota: {\n        limit: {\n            limitsCpu: \"100m\",\n            limitsMemory: \"100Mi\",\n            requestsStorage: \"1Gi\",\n        },\n    },\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Namespace\nfoo = rancher2.Namespace(\"foo\",\n    name=\"foo\",\n    project_id=\"\u003cPROJECT_ID\u003e\",\n    description=\"foo namespace\",\n    resource_quota={\n        \"limit\": {\n            \"limits_cpu\": \"100m\",\n            \"limits_memory\": \"100Mi\",\n            \"requests_storage\": \"1Gi\",\n        },\n    },\n    container_resource_limit={\n        \"limits_cpu\": \"20m\",\n        \"limits_memory\": \"20Mi\",\n        \"requests_cpu\": \"1m\",\n        \"requests_memory\": \"1Mi\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Namespace\n    var foo = new Rancher2.Namespace(\"foo\", new()\n    {\n        Name = \"foo\",\n        ProjectId = \"\u003cPROJECT_ID\u003e\",\n        Description = \"foo namespace\",\n        ResourceQuota = new Rancher2.Inputs.NamespaceResourceQuotaArgs\n        {\n            Limit = new Rancher2.Inputs.NamespaceResourceQuotaLimitArgs\n            {\n                LimitsCpu = \"100m\",\n                LimitsMemory = \"100Mi\",\n                RequestsStorage = \"1Gi\",\n            },\n        },\n        ContainerResourceLimit = new Rancher2.Inputs.NamespaceContainerResourceLimitArgs\n        {\n            LimitsCpu = \"20m\",\n            LimitsMemory = \"20Mi\",\n            RequestsCpu = \"1m\",\n            RequestsMemory = \"1Mi\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Namespace\n\t\t_, err := rancher2.NewNamespace(ctx, \"foo\", \u0026rancher2.NamespaceArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tProjectId:   pulumi.String(\"\u003cPROJECT_ID\u003e\"),\n\t\t\tDescription: pulumi.String(\"foo namespace\"),\n\t\t\tResourceQuota: \u0026rancher2.NamespaceResourceQuotaArgs{\n\t\t\t\tLimit: \u0026rancher2.NamespaceResourceQuotaLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"100m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"100Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tContainerResourceLimit: \u0026rancher2.NamespaceContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Namespace;\nimport com.pulumi.rancher2.NamespaceArgs;\nimport com.pulumi.rancher2.inputs.NamespaceResourceQuotaArgs;\nimport com.pulumi.rancher2.inputs.NamespaceResourceQuotaLimitArgs;\nimport com.pulumi.rancher2.inputs.NamespaceContainerResourceLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Namespace\n        var foo = new Namespace(\"foo\", NamespaceArgs.builder()\n            .name(\"foo\")\n            .projectId(\"\u003cPROJECT_ID\u003e\")\n            .description(\"foo namespace\")\n            .resourceQuota(NamespaceResourceQuotaArgs.builder()\n                .limit(NamespaceResourceQuotaLimitArgs.builder()\n                    .limitsCpu(\"100m\")\n                    .limitsMemory(\"100Mi\")\n                    .requestsStorage(\"1Gi\")\n                    .build())\n                .build())\n            .containerResourceLimit(NamespaceContainerResourceLimitArgs.builder()\n                .limitsCpu(\"20m\")\n                .limitsMemory(\"20Mi\")\n                .requestsCpu(\"1m\")\n                .requestsMemory(\"1Mi\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Namespace\n  foo:\n    type: rancher2:Namespace\n    properties:\n      name: foo\n      projectId: \u003cPROJECT_ID\u003e\n      description: foo namespace\n      resourceQuota:\n        limit:\n          limitsCpu: 100m\n          limitsMemory: 100Mi\n          requestsStorage: 1Gi\n      containerResourceLimit:\n        limitsCpu: 20m\n        limitsMemory: 20Mi\n        requestsCpu: 1m\n        requestsMemory: 1Mi\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Cluster \nconst foo_custom = new rancher2.Cluster(\"foo-custom\", {\n    name: \"foo-custom\",\n    description: \"Foo rancher2 custom cluster\",\n    rkeConfig: {\n        network: {\n            plugin: \"canal\",\n        },\n    },\n});\n// Create a new rancher2 Namespace assigned to default cluster project\nconst foo = new rancher2.Namespace(\"foo\", {\n    name: \"foo\",\n    projectId: foo_custom.defaultProjectId,\n    description: \"foo namespace\",\n    resourceQuota: {\n        limit: {\n            limitsCpu: \"100m\",\n            limitsMemory: \"100Mi\",\n            requestsStorage: \"1Gi\",\n        },\n    },\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Cluster \nfoo_custom = rancher2.Cluster(\"foo-custom\",\n    name=\"foo-custom\",\n    description=\"Foo rancher2 custom cluster\",\n    rke_config={\n        \"network\": {\n            \"plugin\": \"canal\",\n        },\n    })\n# Create a new rancher2 Namespace assigned to default cluster project\nfoo = rancher2.Namespace(\"foo\",\n    name=\"foo\",\n    project_id=foo_custom.default_project_id,\n    description=\"foo namespace\",\n    resource_quota={\n        \"limit\": {\n            \"limits_cpu\": \"100m\",\n            \"limits_memory\": \"100Mi\",\n            \"requests_storage\": \"1Gi\",\n        },\n    },\n    container_resource_limit={\n        \"limits_cpu\": \"20m\",\n        \"limits_memory\": \"20Mi\",\n        \"requests_cpu\": \"1m\",\n        \"requests_memory\": \"1Mi\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Cluster \n    var foo_custom = new Rancher2.Cluster(\"foo-custom\", new()\n    {\n        Name = \"foo-custom\",\n        Description = \"Foo rancher2 custom cluster\",\n        RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs\n        {\n            Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs\n            {\n                Plugin = \"canal\",\n            },\n        },\n    });\n\n    // Create a new rancher2 Namespace assigned to default cluster project\n    var foo = new Rancher2.Namespace(\"foo\", new()\n    {\n        Name = \"foo\",\n        ProjectId = foo_custom.DefaultProjectId,\n        Description = \"foo namespace\",\n        ResourceQuota = new Rancher2.Inputs.NamespaceResourceQuotaArgs\n        {\n            Limit = new Rancher2.Inputs.NamespaceResourceQuotaLimitArgs\n            {\n                LimitsCpu = \"100m\",\n                LimitsMemory = \"100Mi\",\n                RequestsStorage = \"1Gi\",\n            },\n        },\n        ContainerResourceLimit = new Rancher2.Inputs.NamespaceContainerResourceLimitArgs\n        {\n            LimitsCpu = \"20m\",\n            LimitsMemory = \"20Mi\",\n            RequestsCpu = \"1m\",\n            RequestsMemory = \"1Mi\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Cluster\n\t\tfoo_custom, err := rancher2.NewCluster(ctx, \"foo-custom\", \u0026rancher2.ClusterArgs{\n\t\t\tName:        pulumi.String(\"foo-custom\"),\n\t\t\tDescription: pulumi.String(\"Foo rancher2 custom cluster\"),\n\t\t\tRkeConfig: \u0026rancher2.ClusterRkeConfigArgs{\n\t\t\t\tNetwork: \u0026rancher2.ClusterRkeConfigNetworkArgs{\n\t\t\t\t\tPlugin: pulumi.String(\"canal\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Namespace assigned to default cluster project\n\t\t_, err = rancher2.NewNamespace(ctx, \"foo\", \u0026rancher2.NamespaceArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tProjectId:   foo_custom.DefaultProjectId,\n\t\t\tDescription: pulumi.String(\"foo namespace\"),\n\t\t\tResourceQuota: \u0026rancher2.NamespaceResourceQuotaArgs{\n\t\t\t\tLimit: \u0026rancher2.NamespaceResourceQuotaLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"100m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"100Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tContainerResourceLimit: \u0026rancher2.NamespaceContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Cluster;\nimport com.pulumi.rancher2.ClusterArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;\nimport com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;\nimport com.pulumi.rancher2.Namespace;\nimport com.pulumi.rancher2.NamespaceArgs;\nimport com.pulumi.rancher2.inputs.NamespaceResourceQuotaArgs;\nimport com.pulumi.rancher2.inputs.NamespaceResourceQuotaLimitArgs;\nimport com.pulumi.rancher2.inputs.NamespaceContainerResourceLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Cluster \n        var foo_custom = new Cluster(\"foo-custom\", ClusterArgs.builder()\n            .name(\"foo-custom\")\n            .description(\"Foo rancher2 custom cluster\")\n            .rkeConfig(ClusterRkeConfigArgs.builder()\n                .network(ClusterRkeConfigNetworkArgs.builder()\n                    .plugin(\"canal\")\n                    .build())\n                .build())\n            .build());\n\n        // Create a new rancher2 Namespace assigned to default cluster project\n        var foo = new Namespace(\"foo\", NamespaceArgs.builder()\n            .name(\"foo\")\n            .projectId(foo_custom.defaultProjectId())\n            .description(\"foo namespace\")\n            .resourceQuota(NamespaceResourceQuotaArgs.builder()\n                .limit(NamespaceResourceQuotaLimitArgs.builder()\n                    .limitsCpu(\"100m\")\n                    .limitsMemory(\"100Mi\")\n                    .requestsStorage(\"1Gi\")\n                    .build())\n                .build())\n            .containerResourceLimit(NamespaceContainerResourceLimitArgs.builder()\n                .limitsCpu(\"20m\")\n                .limitsMemory(\"20Mi\")\n                .requestsCpu(\"1m\")\n                .requestsMemory(\"1Mi\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Cluster\n  foo-custom:\n    type: rancher2:Cluster\n    properties:\n      name: foo-custom\n      description: Foo rancher2 custom cluster\n      rkeConfig:\n        network:\n          plugin: canal\n  # Create a new rancher2 Namespace assigned to default cluster project\n  foo:\n    type: rancher2:Namespace\n    properties:\n      name: foo\n      projectId: ${[\"foo-custom\"].defaultProjectId}\n      description: foo namespace\n      resourceQuota:\n        limit:\n          limitsCpu: 100m\n          limitsMemory: 100Mi\n          requestsStorage: 1Gi\n      containerResourceLimit:\n        limitsCpu: 20m\n        limitsMemory: 20Mi\n        requestsCpu: 1m\n        requestsMemory: 1Mi\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNamespaces can be imported using the namespace ID in the format `\u003cproject_id\u003e.\u003cnamespace_id\u003e`\n\n```sh\n$ pulumi import rancher2:index/namespace:Namespace foo \u0026lt;project_id\u0026gt;.\u0026lt;namespaces_id\u0026gt;\n```\n`\u003cproject_id\u003e` is in the format `\u003ccluster_id\u003e:\u003cid\u003e`, this is the output from `data.rancher2_cluster.downstream_cluster.default_project_id`\n\nThe `\u003cproject_id\u003e` must match the actual resource, importing will error on project mismatch.\n\nIn past versions you could modify the namespace while importing it, this functionality is no longer available.\n\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "containerResourceLimit": {
                    "$ref": "#/types/rancher2:index/NamespaceContainerResourceLimit:NamespaceContainerResourceLimit",
                    "description": "Default containers resource limits on namespace (List maxitem:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A namespace description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the namespace (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where assign namespace. It's on the form `project_id=\u003ccluster_id\u003e:\u003cid\u003e`. Updating `\u003cid\u003e` part on same `\u003ccluster_id\u003e` namespace will be moved between projects (string)\n"
                },
                "resourceQuota": {
                    "$ref": "#/types/rancher2:index/NamespaceResourceQuota:NamespaceResourceQuota",
                    "description": "Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)\n"
                },
                "waitForCluster": {
                    "type": "boolean",
                    "description": "Wait for cluster becomes active. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "projectId",
                "resourceQuota"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "containerResourceLimit": {
                    "$ref": "#/types/rancher2:index/NamespaceContainerResourceLimit:NamespaceContainerResourceLimit",
                    "description": "Default containers resource limits on namespace (List maxitem:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A namespace description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the namespace (string)\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where assign namespace. It's on the form `project_id=\u003ccluster_id\u003e:\u003cid\u003e`. Updating `\u003cid\u003e` part on same `\u003ccluster_id\u003e` namespace will be moved between projects (string)\n"
                },
                "resourceQuota": {
                    "$ref": "#/types/rancher2:index/NamespaceResourceQuota:NamespaceResourceQuota",
                    "description": "Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)\n"
                },
                "waitForCluster": {
                    "type": "boolean",
                    "description": "Wait for cluster becomes active. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Namespace resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for Node Pool object (map)\n"
                    },
                    "containerResourceLimit": {
                        "$ref": "#/types/rancher2:index/NamespaceContainerResourceLimit:NamespaceContainerResourceLimit",
                        "description": "Default containers resource limits on namespace (List maxitem:1)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A namespace description (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for Node Pool object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the namespace (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where assign namespace. It's on the form `project_id=\u003ccluster_id\u003e:\u003cid\u003e`. Updating `\u003cid\u003e` part on same `\u003ccluster_id\u003e` namespace will be moved between projects (string)\n"
                    },
                    "resourceQuota": {
                        "$ref": "#/types/rancher2:index/NamespaceResourceQuota:NamespaceResourceQuota",
                        "description": "Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)\n"
                    },
                    "waitForCluster": {
                        "type": "boolean",
                        "description": "Wait for cluster becomes active. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/nodeDriver:NodeDriver": {
            "description": "Provides a Rancher v2 Node Driver resource. This can be used to create Node Driver for Rancher v2 RKE clusters and retrieve their information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Node Driver\nconst foo = new rancher2.NodeDriver(\"foo\", {\n    active: true,\n    builtin: false,\n    checksum: \"0x0\",\n    description: \"Foo description\",\n    externalId: \"foo_external\",\n    name: \"foo\",\n    uiUrl: \"local://ui\",\n    url: \"local://\",\n    whitelistDomains: [\"*.foo.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Node Driver\nfoo = rancher2.NodeDriver(\"foo\",\n    active=True,\n    builtin=False,\n    checksum=\"0x0\",\n    description=\"Foo description\",\n    external_id=\"foo_external\",\n    name=\"foo\",\n    ui_url=\"local://ui\",\n    url=\"local://\",\n    whitelist_domains=[\"*.foo.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Node Driver\n    var foo = new Rancher2.NodeDriver(\"foo\", new()\n    {\n        Active = true,\n        Builtin = false,\n        Checksum = \"0x0\",\n        Description = \"Foo description\",\n        ExternalId = \"foo_external\",\n        Name = \"foo\",\n        UiUrl = \"local://ui\",\n        Url = \"local://\",\n        WhitelistDomains = new[]\n        {\n            \"*.foo.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Node Driver\n\t\t_, err := rancher2.NewNodeDriver(ctx, \"foo\", \u0026rancher2.NodeDriverArgs{\n\t\t\tActive:      pulumi.Bool(true),\n\t\t\tBuiltin:     pulumi.Bool(false),\n\t\t\tChecksum:    pulumi.String(\"0x0\"),\n\t\t\tDescription: pulumi.String(\"Foo description\"),\n\t\t\tExternalId:  pulumi.String(\"foo_external\"),\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tUiUrl:       pulumi.String(\"local://ui\"),\n\t\t\tUrl:         pulumi.String(\"local://\"),\n\t\t\tWhitelistDomains: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"*.foo.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.NodeDriver;\nimport com.pulumi.rancher2.NodeDriverArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Node Driver\n        var foo = new NodeDriver(\"foo\", NodeDriverArgs.builder()\n            .active(true)\n            .builtin(false)\n            .checksum(\"0x0\")\n            .description(\"Foo description\")\n            .externalId(\"foo_external\")\n            .name(\"foo\")\n            .uiUrl(\"local://ui\")\n            .url(\"local://\")\n            .whitelistDomains(\"*.foo.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Node Driver\n  foo:\n    type: rancher2:NodeDriver\n    properties:\n      active: true\n      builtin: false\n      checksum: 0x0\n      description: Foo description\n      externalId: foo_external\n      name: foo\n      uiUrl: local://ui\n      url: local://\n      whitelistDomains:\n        - '*.foo.com'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNode Driver can be imported using the Rancher Node Driver ID\n\n```sh\n$ pulumi import rancher2:index/nodeDriver:NodeDriver foo \u0026lt;node_driver_id\u0026gt;\n```\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Specify if the node driver state (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "Specify wheter the node driver is an internal node driver or not (bool)\n"
                },
                "checksum": {
                    "type": "string",
                    "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the node driver (string)\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External ID (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the node driver (string)\n"
                },
                "uiUrl": {
                    "type": "string",
                    "description": "The URL to load for customized Add Nodes screen for this driver (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                },
                "whitelistDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domains to whitelist for the ui (list)\n"
                }
            },
            "required": [
                "active",
                "annotations",
                "builtin",
                "labels",
                "name",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Specify if the node driver state (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "Specify wheter the node driver is an internal node driver or not (bool)\n"
                },
                "checksum": {
                    "type": "string",
                    "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the node driver (string)\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "External ID (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the node driver (string)\n"
                },
                "uiUrl": {
                    "type": "string",
                    "description": "The URL to load for customized Add Nodes screen for this driver (string)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                },
                "whitelistDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domains to whitelist for the ui (list)\n"
                }
            },
            "requiredInputs": [
                "active",
                "builtin",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeDriver resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Specify if the node driver state (bool)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "Specify wheter the node driver is an internal node driver or not (bool)\n"
                    },
                    "checksum": {
                        "type": "string",
                        "description": "Verify that the downloaded driver matches the expected checksum (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the node driver (string)\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "External ID (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the node driver (string)\n"
                    },
                    "uiUrl": {
                        "type": "string",
                        "description": "The URL to load for customized Add Nodes screen for this driver (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                    },
                    "whitelistDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Domains to whitelist for the ui (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/nodePool:NodePool": {
            "description": "Provides a Rancher v2 Node Pool resource. This can be used to create Node Pool, using Node template for Rancher v2 RKE clusters and retrieve their information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  # Create a new rancher2 RKE Cluster\n  foo-custom:\n    type: rancher2:Cluster\n    properties:\n      name: foo-custom\n      description: Foo rancher2 custom cluster\n      kind: rke\n      rkeConfig:\n        network:\n          plugin: canal\n  # Create a new rancher2 Cloud Credential\n  foo:\n    type: rancher2:CloudCredential\n    properties:\n      name: foo\n      description: Terraform cloudCredential acceptance test\n      amazonec2CredentialConfig:\n        accessKey: XXXXXXXXXXXXXXXXXXXX\n        secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n  # Create a new rancher2 Node Template\n  fooNodeTemplate:\n    type: rancher2:NodeTemplate\n    name: foo\n    properties:\n      name: foo\n      description: foo test\n      cloudCredentialId: ${foo.id}\n      amazonec2Config:\n        ami: \u003cAMI_ID\u003e\n        region: \u003cREGION\u003e\n        securityGroups:\n          - \u003cAWS_SECURITY_GROUP\u003e\n        subnetId: \u003cSUBNET_ID\u003e\n        vpcId: \u003cVPC_ID\u003e\n        zone: \u003cZONE\u003e\n  # Create a new rancher2 Node Pool\n  fooNodePool:\n    type: rancher2:NodePool\n    name: foo\n    properties:\n      clusterId: ${[\"foo-custom\"].id}\n      name: foo\n      hostnamePrefix: foo-cluster-0\n      nodeTemplateId: ${fooNodeTemplate.id}\n      quantity: 1\n      controlPlane: true\n      etcd: true\n      worker: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nNode Pool can be imported using the Rancher Node Pool ID\n\n```sh\n$ pulumi import rancher2:index/nodePool:NodePool foo \u0026lt;node_pool_id\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The RKE cluster id to use Node Pool (string)\n"
                },
                "controlPlane": {
                    "type": "boolean",
                    "description": "RKE control plane role for created nodes (bool)\n"
                },
                "deleteNotReadyAfterSecs": {
                    "type": "integer",
                    "description": "Delete not ready node after secs. For Rancher v2.3.3 and above. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int)\n"
                },
                "drainBeforeDelete": {
                    "type": "boolean",
                    "description": "Drain nodes before delete. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "etcd": {
                    "type": "boolean",
                    "description": "RKE etcd role for created nodes (bool)\n"
                },
                "hostnamePrefix": {
                    "type": "string",
                    "description": "The prefix for created nodes of the Node Pool (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Node Pool (string)\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/NodePoolNodeTaint:NodePoolNodeTaint"
                    },
                    "description": "Node taints. For Rancher v2.3.3 and above (List)\n"
                },
                "nodeTemplateId": {
                    "type": "string",
                    "description": "The Node Template ID to use for node creation (string)\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of nodes to create on Node Pool. Default \u003cspan pulumi-lang-nodejs=\"`1`\" pulumi-lang-dotnet=\"`1`\" pulumi-lang-go=\"`1`\" pulumi-lang-python=\"`1`\" pulumi-lang-yaml=\"`1`\" pulumi-lang-java=\"`1`\"\u003e`1`\u003c/span\u003e. Only values \u003e= 1 allowed (int)\n"
                },
                "worker": {
                    "type": "boolean",
                    "description": "RKE role role for created nodes (bool)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "hostnamePrefix",
                "labels",
                "name",
                "nodeTemplateId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The RKE cluster id to use Node Pool (string)\n",
                    "willReplaceOnChanges": true
                },
                "controlPlane": {
                    "type": "boolean",
                    "description": "RKE control plane role for created nodes (bool)\n"
                },
                "deleteNotReadyAfterSecs": {
                    "type": "integer",
                    "description": "Delete not ready node after secs. For Rancher v2.3.3 and above. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int)\n"
                },
                "drainBeforeDelete": {
                    "type": "boolean",
                    "description": "Drain nodes before delete. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "etcd": {
                    "type": "boolean",
                    "description": "RKE etcd role for created nodes (bool)\n"
                },
                "hostnamePrefix": {
                    "type": "string",
                    "description": "The prefix for created nodes of the Node Pool (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Node Pool (string)\n",
                    "willReplaceOnChanges": true
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/NodePoolNodeTaint:NodePoolNodeTaint"
                    },
                    "description": "Node taints. For Rancher v2.3.3 and above (List)\n"
                },
                "nodeTemplateId": {
                    "type": "string",
                    "description": "The Node Template ID to use for node creation (string)\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "The number of nodes to create on Node Pool. Default \u003cspan pulumi-lang-nodejs=\"`1`\" pulumi-lang-dotnet=\"`1`\" pulumi-lang-go=\"`1`\" pulumi-lang-python=\"`1`\" pulumi-lang-yaml=\"`1`\" pulumi-lang-java=\"`1`\"\u003e`1`\u003c/span\u003e. Only values \u003e= 1 allowed (int)\n"
                },
                "worker": {
                    "type": "boolean",
                    "description": "RKE role role for created nodes (bool)\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "hostnamePrefix",
                "nodeTemplateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodePool resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for Node Pool object (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The RKE cluster id to use Node Pool (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "controlPlane": {
                        "type": "boolean",
                        "description": "RKE control plane role for created nodes (bool)\n"
                    },
                    "deleteNotReadyAfterSecs": {
                        "type": "integer",
                        "description": "Delete not ready node after secs. For Rancher v2.3.3 and above. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int)\n"
                    },
                    "drainBeforeDelete": {
                        "type": "boolean",
                        "description": "Drain nodes before delete. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "etcd": {
                        "type": "boolean",
                        "description": "RKE etcd role for created nodes (bool)\n"
                    },
                    "hostnamePrefix": {
                        "type": "string",
                        "description": "The prefix for created nodes of the Node Pool (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for Node Pool object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Pool (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "nodeTaints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/NodePoolNodeTaint:NodePoolNodeTaint"
                        },
                        "description": "Node taints. For Rancher v2.3.3 and above (List)\n"
                    },
                    "nodeTemplateId": {
                        "type": "string",
                        "description": "The Node Template ID to use for node creation (string)\n"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "The number of nodes to create on Node Pool. Default \u003cspan pulumi-lang-nodejs=\"`1`\" pulumi-lang-dotnet=\"`1`\" pulumi-lang-go=\"`1`\" pulumi-lang-python=\"`1`\" pulumi-lang-yaml=\"`1`\" pulumi-lang-java=\"`1`\"\u003e`1`\u003c/span\u003e. Only values \u003e= 1 allowed (int)\n"
                    },
                    "worker": {
                        "type": "boolean",
                        "description": "RKE role role for created nodes (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/nodeTemplate:NodeTemplate": {
            "description": "Provides a Rancher v2 Node Template resource. This can be used to create Node Template for Rancher v2 and retrieve their information.\n\namazonec2, azure, digitalocean, harvester, linode, opennebula, openstack, outscale, hetzner and vsphere drivers are supported for node templates.\n\n**Note:** If you are upgrading to Rancher v2.3.3, please take a look to final section\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Node Template up to Rancher 2.1.x\nconst foo = new rancher2.NodeTemplate(\"foo\", {\n    name: \"foo\",\n    description: \"foo test\",\n    amazonec2Config: {\n        accessKey: \"AWS_ACCESS_KEY\",\n        secretKey: \"\u003cAWS_SECRET_KEY\u003e\",\n        ami: \"\u003cAMI_ID\u003e\",\n        region: \"\u003cREGION\u003e\",\n        securityGroups: [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        subnetId: \"\u003cSUBNET_ID\u003e\",\n        vpcId: \"\u003cVPC_ID\u003e\",\n        zone: \"\u003cZONE\u003e\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Node Template up to Rancher 2.1.x\nfoo = rancher2.NodeTemplate(\"foo\",\n    name=\"foo\",\n    description=\"foo test\",\n    amazonec2_config={\n        \"access_key\": \"AWS_ACCESS_KEY\",\n        \"secret_key\": \"\u003cAWS_SECRET_KEY\u003e\",\n        \"ami\": \"\u003cAMI_ID\u003e\",\n        \"region\": \"\u003cREGION\u003e\",\n        \"security_groups\": [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        \"subnet_id\": \"\u003cSUBNET_ID\u003e\",\n        \"vpc_id\": \"\u003cVPC_ID\u003e\",\n        \"zone\": \"\u003cZONE\u003e\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Node Template up to Rancher 2.1.x\n    var foo = new Rancher2.NodeTemplate(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo test\",\n        Amazonec2Config = new Rancher2.Inputs.NodeTemplateAmazonec2ConfigArgs\n        {\n            AccessKey = \"AWS_ACCESS_KEY\",\n            SecretKey = \"\u003cAWS_SECRET_KEY\u003e\",\n            Ami = \"\u003cAMI_ID\u003e\",\n            Region = \"\u003cREGION\u003e\",\n            SecurityGroups = new[]\n            {\n                \"\u003cAWS_SECURITY_GROUP\u003e\",\n            },\n            SubnetId = \"\u003cSUBNET_ID\u003e\",\n            VpcId = \"\u003cVPC_ID\u003e\",\n            Zone = \"\u003cZONE\u003e\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Node Template up to Rancher 2.1.x\n\t\t_, err := rancher2.NewNodeTemplate(ctx, \"foo\", \u0026rancher2.NodeTemplateArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t\tAmazonec2Config: \u0026rancher2.NodeTemplateAmazonec2ConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"AWS_ACCESS_KEY\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003cAWS_SECRET_KEY\u003e\"),\n\t\t\t\tAmi:       pulumi.String(\"\u003cAMI_ID\u003e\"),\n\t\t\t\tRegion:    pulumi.String(\"\u003cREGION\u003e\"),\n\t\t\t\tSecurityGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"\u003cAWS_SECURITY_GROUP\u003e\"),\n\t\t\t\t},\n\t\t\t\tSubnetId: pulumi.String(\"\u003cSUBNET_ID\u003e\"),\n\t\t\t\tVpcId:    pulumi.String(\"\u003cVPC_ID\u003e\"),\n\t\t\t\tZone:     pulumi.String(\"\u003cZONE\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.NodeTemplate;\nimport com.pulumi.rancher2.NodeTemplateArgs;\nimport com.pulumi.rancher2.inputs.NodeTemplateAmazonec2ConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Node Template up to Rancher 2.1.x\n        var foo = new NodeTemplate(\"foo\", NodeTemplateArgs.builder()\n            .name(\"foo\")\n            .description(\"foo test\")\n            .amazonec2Config(NodeTemplateAmazonec2ConfigArgs.builder()\n                .accessKey(\"AWS_ACCESS_KEY\")\n                .secretKey(\"\u003cAWS_SECRET_KEY\u003e\")\n                .ami(\"\u003cAMI_ID\u003e\")\n                .region(\"\u003cREGION\u003e\")\n                .securityGroups(\"\u003cAWS_SECURITY_GROUP\u003e\")\n                .subnetId(\"\u003cSUBNET_ID\u003e\")\n                .vpcId(\"\u003cVPC_ID\u003e\")\n                .zone(\"\u003cZONE\u003e\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Node Template up to Rancher 2.1.x\n  foo:\n    type: rancher2:NodeTemplate\n    properties:\n      name: foo\n      description: foo test\n      amazonec2Config:\n        accessKey: AWS_ACCESS_KEY\n        secretKey: \u003cAWS_SECRET_KEY\u003e\n        ami: \u003cAMI_ID\u003e\n        region: \u003cREGION\u003e\n        securityGroups:\n          - \u003cAWS_SECURITY_GROUP\u003e\n        subnetId: \u003cSUBNET_ID\u003e\n        vpcId: \u003cVPC_ID\u003e\n        zone: \u003cZONE\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Node Template from Rancher 2.2.x\nconst foo = new rancher2.CloudCredential(\"foo\", {\n    name: \"foo\",\n    description: \"foo test\",\n    amazonec2CredentialConfig: {\n        accessKey: \"\u003cAWS_ACCESS_KEY\u003e\",\n        secretKey: \"\u003cAWS_SECRET_KEY\u003e\",\n    },\n});\nconst fooNodeTemplate = new rancher2.NodeTemplate(\"foo\", {\n    name: \"foo\",\n    description: \"foo test\",\n    cloudCredentialId: foo.id,\n    amazonec2Config: {\n        ami: \"\u003cAMI_ID\u003e\",\n        region: \"\u003cREGION\u003e\",\n        securityGroups: [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        subnetId: \"\u003cSUBNET_ID\u003e\",\n        vpcId: \"\u003cVPC_ID\u003e\",\n        zone: \"\u003cZONE\u003e\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Node Template from Rancher 2.2.x\nfoo = rancher2.CloudCredential(\"foo\",\n    name=\"foo\",\n    description=\"foo test\",\n    amazonec2_credential_config={\n        \"access_key\": \"\u003cAWS_ACCESS_KEY\u003e\",\n        \"secret_key\": \"\u003cAWS_SECRET_KEY\u003e\",\n    })\nfoo_node_template = rancher2.NodeTemplate(\"foo\",\n    name=\"foo\",\n    description=\"foo test\",\n    cloud_credential_id=foo.id,\n    amazonec2_config={\n        \"ami\": \"\u003cAMI_ID\u003e\",\n        \"region\": \"\u003cREGION\u003e\",\n        \"security_groups\": [\"\u003cAWS_SECURITY_GROUP\u003e\"],\n        \"subnet_id\": \"\u003cSUBNET_ID\u003e\",\n        \"vpc_id\": \"\u003cVPC_ID\u003e\",\n        \"zone\": \"\u003cZONE\u003e\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Node Template from Rancher 2.2.x\n    var foo = new Rancher2.CloudCredential(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo test\",\n        Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs\n        {\n            AccessKey = \"\u003cAWS_ACCESS_KEY\u003e\",\n            SecretKey = \"\u003cAWS_SECRET_KEY\u003e\",\n        },\n    });\n\n    var fooNodeTemplate = new Rancher2.NodeTemplate(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"foo test\",\n        CloudCredentialId = foo.Id,\n        Amazonec2Config = new Rancher2.Inputs.NodeTemplateAmazonec2ConfigArgs\n        {\n            Ami = \"\u003cAMI_ID\u003e\",\n            Region = \"\u003cREGION\u003e\",\n            SecurityGroups = new[]\n            {\n                \"\u003cAWS_SECURITY_GROUP\u003e\",\n            },\n            SubnetId = \"\u003cSUBNET_ID\u003e\",\n            VpcId = \"\u003cVPC_ID\u003e\",\n            Zone = \"\u003cZONE\u003e\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Node Template from Rancher 2.2.x\n\t\tfoo, err := rancher2.NewCloudCredential(ctx, \"foo\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"foo test\"),\n\t\t\tAmazonec2CredentialConfig: \u0026rancher2.CloudCredentialAmazonec2CredentialConfigArgs{\n\t\t\t\tAccessKey: pulumi.String(\"\u003cAWS_ACCESS_KEY\u003e\"),\n\t\t\t\tSecretKey: pulumi.String(\"\u003cAWS_SECRET_KEY\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewNodeTemplate(ctx, \"foo\", \u0026rancher2.NodeTemplateArgs{\n\t\t\tName:              pulumi.String(\"foo\"),\n\t\t\tDescription:       pulumi.String(\"foo test\"),\n\t\t\tCloudCredentialId: foo.ID(),\n\t\t\tAmazonec2Config: \u0026rancher2.NodeTemplateAmazonec2ConfigArgs{\n\t\t\t\tAmi:    pulumi.String(\"\u003cAMI_ID\u003e\"),\n\t\t\t\tRegion: pulumi.String(\"\u003cREGION\u003e\"),\n\t\t\t\tSecurityGroups: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"\u003cAWS_SECURITY_GROUP\u003e\"),\n\t\t\t\t},\n\t\t\t\tSubnetId: pulumi.String(\"\u003cSUBNET_ID\u003e\"),\n\t\t\t\tVpcId:    pulumi.String(\"\u003cVPC_ID\u003e\"),\n\t\t\t\tZone:     pulumi.String(\"\u003cZONE\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.CloudCredential;\nimport com.pulumi.rancher2.CloudCredentialArgs;\nimport com.pulumi.rancher2.inputs.CloudCredentialAmazonec2CredentialConfigArgs;\nimport com.pulumi.rancher2.NodeTemplate;\nimport com.pulumi.rancher2.NodeTemplateArgs;\nimport com.pulumi.rancher2.inputs.NodeTemplateAmazonec2ConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Node Template from Rancher 2.2.x\n        var foo = new CloudCredential(\"foo\", CloudCredentialArgs.builder()\n            .name(\"foo\")\n            .description(\"foo test\")\n            .amazonec2CredentialConfig(CloudCredentialAmazonec2CredentialConfigArgs.builder()\n                .accessKey(\"\u003cAWS_ACCESS_KEY\u003e\")\n                .secretKey(\"\u003cAWS_SECRET_KEY\u003e\")\n                .build())\n            .build());\n\n        var fooNodeTemplate = new NodeTemplate(\"fooNodeTemplate\", NodeTemplateArgs.builder()\n            .name(\"foo\")\n            .description(\"foo test\")\n            .cloudCredentialId(foo.id())\n            .amazonec2Config(NodeTemplateAmazonec2ConfigArgs.builder()\n                .ami(\"\u003cAMI_ID\u003e\")\n                .region(\"\u003cREGION\u003e\")\n                .securityGroups(\"\u003cAWS_SECURITY_GROUP\u003e\")\n                .subnetId(\"\u003cSUBNET_ID\u003e\")\n                .vpcId(\"\u003cVPC_ID\u003e\")\n                .zone(\"\u003cZONE\u003e\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Node Template from Rancher 2.2.x\n  foo:\n    type: rancher2:CloudCredential\n    properties:\n      name: foo\n      description: foo test\n      amazonec2CredentialConfig:\n        accessKey: \u003cAWS_ACCESS_KEY\u003e\n        secretKey: \u003cAWS_SECRET_KEY\u003e\n  fooNodeTemplate:\n    type: rancher2:NodeTemplate\n    name: foo\n    properties:\n      name: foo\n      description: foo test\n      cloudCredentialId: ${foo.id}\n      amazonec2Config:\n        ami: \u003cAMI_ID\u003e\n        region: \u003cREGION\u003e\n        securityGroups:\n          - \u003cAWS_SECURITY_GROUP\u003e\n        subnetId: \u003cSUBNET_ID\u003e\n        vpcId: \u003cVPC_ID\u003e\n        zone: \u003cZONE\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Using the Harvester Node Driver\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Get imported harvester cluster info\nconst foo_harvester = rancher2.getClusterV2({\n    name: \"foo-harvester\",\n});\n// Create a new Cloud Credential for an imported Harvester cluster\nconst foo_harvesterCloudCredential = new rancher2.CloudCredential(\"foo-harvester\", {\n    name: \"foo-harvester\",\n    harvesterCredentialConfig: {\n        clusterId: foo_harvester.then(foo_harvester =\u003e foo_harvester.clusterV1Id),\n        clusterType: \"imported\",\n        kubeconfigContent: foo_harvester.then(foo_harvester =\u003e foo_harvester.kubeConfig),\n    },\n});\n// Create a new rancher2 Node Template using harvester node_driver\nconst foo_harvesterNodeTemplate = new rancher2.NodeTemplate(\"foo-harvester\", {\n    name: \"foo-harvester\",\n    cloudCredentialId: foo_harvesterCloudCredential.id,\n    engineInstallUrl: \"https://releases.rancher.com/install-docker/20.10.sh\",\n    harvesterConfig: {\n        vmNamespace: \"default\",\n        cpuCount: \"2\",\n        memorySize: \"4\",\n        diskInfo: `    {\n        \\\\\"disks\\\\\": [{\n            \\\\\"imageName\\\\\": \\\\\"harvester-public/image-57hzg\\\\\",\n            \\\\\"size\\\\\": 40,\n            \\\\\"bootOrder\\\\\": 1\n        }]\n    }\n`,\n        networkInfo: `    {\n        \\\\\"interfaces\\\\\": [{\n            \\\\\"networkName\\\\\": \\\\\"harvester-public/vlan1\\\\\"\n        }]\n    }\n`,\n        sshUser: \"ubuntu\",\n        userData: `    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n`,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Get imported harvester cluster info\nfoo_harvester = rancher2.get_cluster_v2(name=\"foo-harvester\")\n# Create a new Cloud Credential for an imported Harvester cluster\nfoo_harvester_cloud_credential = rancher2.CloudCredential(\"foo-harvester\",\n    name=\"foo-harvester\",\n    harvester_credential_config={\n        \"cluster_id\": foo_harvester.cluster_v1_id,\n        \"cluster_type\": \"imported\",\n        \"kubeconfig_content\": foo_harvester.kube_config,\n    })\n# Create a new rancher2 Node Template using harvester node_driver\nfoo_harvester_node_template = rancher2.NodeTemplate(\"foo-harvester\",\n    name=\"foo-harvester\",\n    cloud_credential_id=foo_harvester_cloud_credential.id,\n    engine_install_url=\"https://releases.rancher.com/install-docker/20.10.sh\",\n    harvester_config={\n        \"vm_namespace\": \"default\",\n        \"cpu_count\": \"2\",\n        \"memory_size\": \"4\",\n        \"disk_info\": \"\"\"    {\n        \\\"disks\\\": [{\n            \\\"imageName\\\": \\\"harvester-public/image-57hzg\\\",\n            \\\"size\\\": 40,\n            \\\"bootOrder\\\": 1\n        }]\n    }\n\"\"\",\n        \"network_info\": \"\"\"    {\n        \\\"interfaces\\\": [{\n            \\\"networkName\\\": \\\"harvester-public/vlan1\\\"\n        }]\n    }\n\"\"\",\n        \"ssh_user\": \"ubuntu\",\n        \"user_data\": \"\"\"    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n\"\"\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Get imported harvester cluster info\n    var foo_harvester = Rancher2.GetClusterV2.Invoke(new()\n    {\n        Name = \"foo-harvester\",\n    });\n\n    // Create a new Cloud Credential for an imported Harvester cluster\n    var foo_harvesterCloudCredential = new Rancher2.CloudCredential(\"foo-harvester\", new()\n    {\n        Name = \"foo-harvester\",\n        HarvesterCredentialConfig = new Rancher2.Inputs.CloudCredentialHarvesterCredentialConfigArgs\n        {\n            ClusterId = foo_harvester.Apply(foo_harvester =\u003e foo_harvester.Apply(getClusterV2Result =\u003e getClusterV2Result.ClusterV1Id)),\n            ClusterType = \"imported\",\n            KubeconfigContent = foo_harvester.Apply(foo_harvester =\u003e foo_harvester.Apply(getClusterV2Result =\u003e getClusterV2Result.KubeConfig)),\n        },\n    });\n\n    // Create a new rancher2 Node Template using harvester node_driver\n    var foo_harvesterNodeTemplate = new Rancher2.NodeTemplate(\"foo-harvester\", new()\n    {\n        Name = \"foo-harvester\",\n        CloudCredentialId = foo_harvesterCloudCredential.Id,\n        EngineInstallUrl = \"https://releases.rancher.com/install-docker/20.10.sh\",\n        HarvesterConfig = new Rancher2.Inputs.NodeTemplateHarvesterConfigArgs\n        {\n            VmNamespace = \"default\",\n            CpuCount = \"2\",\n            MemorySize = \"4\",\n            DiskInfo = @\"    {\n        \\\"\"disks\\\"\": [{\n            \\\"\"imageName\\\"\": \\\"\"harvester-public/image-57hzg\\\"\",\n            \\\"\"size\\\"\": 40,\n            \\\"\"bootOrder\\\"\": 1\n        }]\n    }\n\",\n            NetworkInfo = @\"    {\n        \\\"\"interfaces\\\"\": [{\n            \\\"\"networkName\\\"\": \\\"\"harvester-public/vlan1\\\"\"\n        }]\n    }\n\",\n            SshUser = \"ubuntu\",\n            UserData = @\"    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Get imported harvester cluster info\n\t\tfoo_harvester, err := rancher2.LookupClusterV2(ctx, \u0026rancher2.LookupClusterV2Args{\n\t\t\tName: \"foo-harvester\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new Cloud Credential for an imported Harvester cluster\n\t\tfoo_harvesterCloudCredential, err := rancher2.NewCloudCredential(ctx, \"foo-harvester\", \u0026rancher2.CloudCredentialArgs{\n\t\t\tName: pulumi.String(\"foo-harvester\"),\n\t\t\tHarvesterCredentialConfig: \u0026rancher2.CloudCredentialHarvesterCredentialConfigArgs{\n\t\t\t\tClusterId:         pulumi.String(foo_harvester.ClusterV1Id),\n\t\t\t\tClusterType:       pulumi.String(\"imported\"),\n\t\t\t\tKubeconfigContent: pulumi.String(foo_harvester.KubeConfig),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Node Template using harvester node_driver\n\t\t_, err = rancher2.NewNodeTemplate(ctx, \"foo-harvester\", \u0026rancher2.NodeTemplateArgs{\n\t\t\tName:              pulumi.String(\"foo-harvester\"),\n\t\t\tCloudCredentialId: foo_harvesterCloudCredential.ID(),\n\t\t\tEngineInstallUrl:  pulumi.String(\"https://releases.rancher.com/install-docker/20.10.sh\"),\n\t\t\tHarvesterConfig: \u0026rancher2.NodeTemplateHarvesterConfigArgs{\n\t\t\t\tVmNamespace: pulumi.String(\"default\"),\n\t\t\t\tCpuCount:    pulumi.String(\"2\"),\n\t\t\t\tMemorySize:  pulumi.String(\"4\"),\n\t\t\t\tDiskInfo: pulumi.String(`    {\n        \\\"disks\\\": [{\n            \\\"imageName\\\": \\\"harvester-public/image-57hzg\\\",\n            \\\"size\\\": 40,\n            \\\"bootOrder\\\": 1\n        }]\n    }\n`),\n\t\t\t\tNetworkInfo: pulumi.String(`    {\n        \\\"interfaces\\\": [{\n            \\\"networkName\\\": \\\"harvester-public/vlan1\\\"\n        }]\n    }\n`),\n\t\t\t\tSshUser: pulumi.String(\"ubuntu\"),\n\t\t\t\tUserData: pulumi.String(`    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n`),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetClusterV2Args;\nimport com.pulumi.rancher2.CloudCredential;\nimport com.pulumi.rancher2.CloudCredentialArgs;\nimport com.pulumi.rancher2.inputs.CloudCredentialHarvesterCredentialConfigArgs;\nimport com.pulumi.rancher2.NodeTemplate;\nimport com.pulumi.rancher2.NodeTemplateArgs;\nimport com.pulumi.rancher2.inputs.NodeTemplateHarvesterConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Get imported harvester cluster info\n        final var foo-harvester = Rancher2Functions.getClusterV2(GetClusterV2Args.builder()\n            .name(\"foo-harvester\")\n            .build());\n\n        // Create a new Cloud Credential for an imported Harvester cluster\n        var foo_harvesterCloudCredential = new CloudCredential(\"foo-harvesterCloudCredential\", CloudCredentialArgs.builder()\n            .name(\"foo-harvester\")\n            .harvesterCredentialConfig(CloudCredentialHarvesterCredentialConfigArgs.builder()\n                .clusterId(foo_harvester.clusterV1Id())\n                .clusterType(\"imported\")\n                .kubeconfigContent(foo_harvester.kubeConfig())\n                .build())\n            .build());\n\n        // Create a new rancher2 Node Template using harvester node_driver\n        var foo_harvesterNodeTemplate = new NodeTemplate(\"foo-harvesterNodeTemplate\", NodeTemplateArgs.builder()\n            .name(\"foo-harvester\")\n            .cloudCredentialId(foo_harvesterCloudCredential.id())\n            .engineInstallUrl(\"https://releases.rancher.com/install-docker/20.10.sh\")\n            .harvesterConfig(NodeTemplateHarvesterConfigArgs.builder()\n                .vmNamespace(\"default\")\n                .cpuCount(\"2\")\n                .memorySize(\"4\")\n                .diskInfo(\"\"\"\n    {\n        \\\"disks\\\": [{\n            \\\"imageName\\\": \\\"harvester-public/image-57hzg\\\",\n            \\\"size\\\": 40,\n            \\\"bootOrder\\\": 1\n        }]\n    }\n                \"\"\")\n                .networkInfo(\"\"\"\n    {\n        \\\"interfaces\\\": [{\n            \\\"networkName\\\": \\\"harvester-public/vlan1\\\"\n        }]\n    }\n                \"\"\")\n                .sshUser(\"ubuntu\")\n                .userData(\"\"\"\n    package_update: true\n    packages:\n      - qemu-guest-agent\n      - iptables\n    runcmd:\n      - - systemctl\n        - enable\n        - '--now'\n        - qemu-guest-agent.service\n                \"\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new Cloud Credential for an imported Harvester cluster\n  foo-harvesterCloudCredential:\n    type: rancher2:CloudCredential\n    name: foo-harvester\n    properties:\n      name: foo-harvester\n      harvesterCredentialConfig:\n        clusterId: ${[\"foo-harvester\"].clusterV1Id}\n        clusterType: imported\n        kubeconfigContent: ${[\"foo-harvester\"].kubeConfig}\n  # Create a new rancher2 Node Template using harvester node_driver\n  foo-harvesterNodeTemplate:\n    type: rancher2:NodeTemplate\n    name: foo-harvester\n    properties:\n      name: foo-harvester\n      cloudCredentialId: ${[\"foo-harvesterCloudCredential\"].id}\n      engineInstallUrl: https://releases.rancher.com/install-docker/20.10.sh\n      harvesterConfig:\n        vmNamespace: default\n        cpuCount: '2'\n        memorySize: '4'\n        diskInfo: |2\n              {\n                  \\\"disks\\\": [{\n                      \\\"imageName\\\": \\\"harvester-public/image-57hzg\\\",\n                      \\\"size\\\": 40,\n                      \\\"bootOrder\\\": 1\n                  }]\n              }\n        networkInfo: |2\n              {\n                  \\\"interfaces\\\": [{\n                      \\\"networkName\\\": \\\"harvester-public/vlan1\\\"\n                  }]\n              }\n        sshUser: ubuntu\n        userData: |2\n              package_update: true\n              packages:\n                - qemu-guest-agent\n                - iptables\n              runcmd:\n                - - systemctl\n                  - enable\n                  - '--now'\n                  - qemu-guest-agent.service\nvariables:\n  # Get imported harvester cluster info\n  foo-harvester:\n    fn::invoke:\n      function: rancher2:getClusterV2\n      arguments:\n        name: foo-harvester\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Using the Hetzner Node Driver\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Node Template using hetzner node_driver\nconst hetznerNodeDriver = new rancher2.NodeDriver(\"hetzner_node_driver\", {\n    active: true,\n    builtin: false,\n    name: \"Hetzner\",\n    uiUrl: \"https://storage.googleapis.com/hcloud-rancher-v2-ui-driver/component.js\",\n    url: \"https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/download/3.6.0/docker-machine-driver-hetzner_3.6.0_linux_amd64.tar.gz\",\n    whitelistDomains: [\"storage.googleapis.com\"],\n});\nconst myHetznerNodeTemplate = new rancher2.NodeTemplate(\"my_hetzner_node_template\", {\n    name: \"my-hetzner-node-template\",\n    driverId: hetznerNodeDriver.id,\n    hetznerConfig: {\n        apiToken: \"XXXXXXXXXX\",\n        image: \"ubuntu-18.04\",\n        serverLocation: \"nbg1\",\n        serverType: \"cx11\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Node Template using hetzner node_driver\nhetzner_node_driver = rancher2.NodeDriver(\"hetzner_node_driver\",\n    active=True,\n    builtin=False,\n    name=\"Hetzner\",\n    ui_url=\"https://storage.googleapis.com/hcloud-rancher-v2-ui-driver/component.js\",\n    url=\"https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/download/3.6.0/docker-machine-driver-hetzner_3.6.0_linux_amd64.tar.gz\",\n    whitelist_domains=[\"storage.googleapis.com\"])\nmy_hetzner_node_template = rancher2.NodeTemplate(\"my_hetzner_node_template\",\n    name=\"my-hetzner-node-template\",\n    driver_id=hetzner_node_driver.id,\n    hetzner_config={\n        \"api_token\": \"XXXXXXXXXX\",\n        \"image\": \"ubuntu-18.04\",\n        \"server_location\": \"nbg1\",\n        \"server_type\": \"cx11\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Node Template using hetzner node_driver\n    var hetznerNodeDriver = new Rancher2.NodeDriver(\"hetzner_node_driver\", new()\n    {\n        Active = true,\n        Builtin = false,\n        Name = \"Hetzner\",\n        UiUrl = \"https://storage.googleapis.com/hcloud-rancher-v2-ui-driver/component.js\",\n        Url = \"https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/download/3.6.0/docker-machine-driver-hetzner_3.6.0_linux_amd64.tar.gz\",\n        WhitelistDomains = new[]\n        {\n            \"storage.googleapis.com\",\n        },\n    });\n\n    var myHetznerNodeTemplate = new Rancher2.NodeTemplate(\"my_hetzner_node_template\", new()\n    {\n        Name = \"my-hetzner-node-template\",\n        DriverId = hetznerNodeDriver.Id,\n        HetznerConfig = new Rancher2.Inputs.NodeTemplateHetznerConfigArgs\n        {\n            ApiToken = \"XXXXXXXXXX\",\n            Image = \"ubuntu-18.04\",\n            ServerLocation = \"nbg1\",\n            ServerType = \"cx11\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Node Template using hetzner node_driver\n\t\thetznerNodeDriver, err := rancher2.NewNodeDriver(ctx, \"hetzner_node_driver\", \u0026rancher2.NodeDriverArgs{\n\t\t\tActive:  pulumi.Bool(true),\n\t\t\tBuiltin: pulumi.Bool(false),\n\t\t\tName:    pulumi.String(\"Hetzner\"),\n\t\t\tUiUrl:   pulumi.String(\"https://storage.googleapis.com/hcloud-rancher-v2-ui-driver/component.js\"),\n\t\t\tUrl:     pulumi.String(\"https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/download/3.6.0/docker-machine-driver-hetzner_3.6.0_linux_amd64.tar.gz\"),\n\t\t\tWhitelistDomains: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"storage.googleapis.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rancher2.NewNodeTemplate(ctx, \"my_hetzner_node_template\", \u0026rancher2.NodeTemplateArgs{\n\t\t\tName:     pulumi.String(\"my-hetzner-node-template\"),\n\t\t\tDriverId: hetznerNodeDriver.ID(),\n\t\t\tHetznerConfig: \u0026rancher2.NodeTemplateHetznerConfigArgs{\n\t\t\t\tApiToken:       pulumi.String(\"XXXXXXXXXX\"),\n\t\t\t\tImage:          pulumi.String(\"ubuntu-18.04\"),\n\t\t\t\tServerLocation: pulumi.String(\"nbg1\"),\n\t\t\t\tServerType:     pulumi.String(\"cx11\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.NodeDriver;\nimport com.pulumi.rancher2.NodeDriverArgs;\nimport com.pulumi.rancher2.NodeTemplate;\nimport com.pulumi.rancher2.NodeTemplateArgs;\nimport com.pulumi.rancher2.inputs.NodeTemplateHetznerConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Node Template using hetzner node_driver\n        var hetznerNodeDriver = new NodeDriver(\"hetznerNodeDriver\", NodeDriverArgs.builder()\n            .active(true)\n            .builtin(false)\n            .name(\"Hetzner\")\n            .uiUrl(\"https://storage.googleapis.com/hcloud-rancher-v2-ui-driver/component.js\")\n            .url(\"https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/download/3.6.0/docker-machine-driver-hetzner_3.6.0_linux_amd64.tar.gz\")\n            .whitelistDomains(\"storage.googleapis.com\")\n            .build());\n\n        var myHetznerNodeTemplate = new NodeTemplate(\"myHetznerNodeTemplate\", NodeTemplateArgs.builder()\n            .name(\"my-hetzner-node-template\")\n            .driverId(hetznerNodeDriver.id())\n            .hetznerConfig(NodeTemplateHetznerConfigArgs.builder()\n                .apiToken(\"XXXXXXXXXX\")\n                .image(\"ubuntu-18.04\")\n                .serverLocation(\"nbg1\")\n                .serverType(\"cx11\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Node Template using hetzner node_driver\n  hetznerNodeDriver:\n    type: rancher2:NodeDriver\n    name: hetzner_node_driver\n    properties:\n      active: true\n      builtin: false\n      name: Hetzner\n      uiUrl: https://storage.googleapis.com/hcloud-rancher-v2-ui-driver/component.js\n      url: https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/download/3.6.0/docker-machine-driver-hetzner_3.6.0_linux_amd64.tar.gz\n      whitelistDomains:\n        - storage.googleapis.com\n  myHetznerNodeTemplate:\n    type: rancher2:NodeTemplate\n    name: my_hetzner_node_template\n    properties:\n      name: my-hetzner-node-template\n      driverId: ${hetznerNodeDriver.id}\n      hetznerConfig:\n        apiToken: XXXXXXXXXX\n        image: ubuntu-18.04\n        serverLocation: nbg1\n        serverType: cx11\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Upgrading to Rancher v2.3.3\n\n**Important** This process could update \u003cspan pulumi-lang-nodejs=\"`rancher2.NodeTemplate`\" pulumi-lang-dotnet=\"`rancher2.NodeTemplate`\" pulumi-lang-go=\"`NodeTemplate`\" pulumi-lang-python=\"`NodeTemplate`\" pulumi-lang-yaml=\"`rancher2.NodeTemplate`\" pulumi-lang-java=\"`rancher2.NodeTemplate`\"\u003e`rancher2.NodeTemplate`\u003c/span\u003e data on tfstate file. Be sure to save a copy of tfstate file before proceed\n\nDue to [this feature](https://github.com/rancher/rancher/pull/23718) included on Rancher v2.3.3, \u003cspan pulumi-lang-nodejs=\"`rancher2.NodeTemplate`\" pulumi-lang-dotnet=\"`rancher2.NodeTemplate`\" pulumi-lang-go=\"`NodeTemplate`\" pulumi-lang-python=\"`NodeTemplate`\" pulumi-lang-yaml=\"`rancher2.NodeTemplate`\" pulumi-lang-java=\"`rancher2.NodeTemplate`\"\u003e`rancher2.NodeTemplate`\u003c/span\u003e are now global scoped objects with RBAC around them, instead of user scoped objects as they were. This means that existing node templates \u003cspan pulumi-lang-nodejs=\"`id`\" pulumi-lang-dotnet=\"`Id`\" pulumi-lang-go=\"`id`\" pulumi-lang-python=\"`id`\" pulumi-lang-yaml=\"`id`\" pulumi-lang-java=\"`id`\"\u003e`id`\u003c/span\u003e field is changing on upgrade. Provider implements `fixNodeTemplateID()` that will update tfstate with proper id.\n\n## Import\n\nNode Template can be imported using the Rancher Node Template ID\n\n```sh\n$ pulumi import rancher2:index/nodeTemplate:NodeTemplate foo \u0026lt;node_template_id\u0026gt;\n```\n",
            "properties": {
                "amazonec2Config": {
                    "$ref": "#/types/rancher2:index/NodeTemplateAmazonec2Config:NodeTemplateAmazonec2Config",
                    "description": "AWS config for the Node Template (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Node Template object (map)\n"
                },
                "authCertificateAuthority": {
                    "type": "string",
                    "description": "Auth certificate authority for the Node Template (string)\n",
                    "secret": true
                },
                "authKey": {
                    "type": "string",
                    "description": "Auth key for the Node Template (string)\n",
                    "secret": true
                },
                "azureConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateAzureConfig:NodeTemplateAzureConfig",
                    "description": "Azure config for the Node Template (list maxitems:1)\n"
                },
                "cloudCredentialId": {
                    "type": "string",
                    "description": "Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Node Template (string)\n"
                },
                "digitaloceanConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateDigitaloceanConfig:NodeTemplateDigitaloceanConfig",
                    "description": "Digitalocean config for the Node Template (list maxitems:1)\n"
                },
                "driver": {
                    "type": "string",
                    "description": "(Computed) The driver of the node template (string)\n"
                },
                "driverId": {
                    "type": "string",
                    "description": "The node driver id used by the node template. It's required if the node driver isn't built in Rancher (string)\n"
                },
                "engineEnv": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Engine environment for the node template (string)\n"
                },
                "engineInsecureRegistries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Insecure registry for the node template (list)\n"
                },
                "engineInstallUrl": {
                    "type": "string",
                    "description": "Docker engine install URL for the node template. Available install docker versions at `https://github.com/rancher/install-docker` (string)\n"
                },
                "engineLabel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Engine label for the node template (string)\n"
                },
                "engineOpt": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Engine options for the node template (map)\n"
                },
                "engineRegistryMirrors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Engine registry mirror for the node template (list)\n"
                },
                "engineStorageDriver": {
                    "type": "string",
                    "description": "Engine storage driver for the node template (string)\n"
                },
                "harvesterConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateHarvesterConfig:NodeTemplateHarvesterConfig",
                    "description": "Harvester config for the Node Template (list maxitems:1)\n"
                },
                "hetznerConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateHetznerConfig:NodeTemplateHetznerConfig",
                    "description": "Hetzner config for the Node Template (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Node Template object (map)\n\n**Note:** \u003cspan pulumi-lang-nodejs=\"`labels`\" pulumi-lang-dotnet=\"`Labels`\" pulumi-lang-go=\"`labels`\" pulumi-lang-python=\"`labels`\" pulumi-lang-yaml=\"`labels`\" pulumi-lang-java=\"`labels`\"\u003e`labels`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`nodeTaints`\" pulumi-lang-dotnet=\"`NodeTaints`\" pulumi-lang-go=\"`nodeTaints`\" pulumi-lang-python=\"`node_taints`\" pulumi-lang-yaml=\"`nodeTaints`\" pulumi-lang-java=\"`nodeTaints`\"\u003e`node_taints`\u003c/span\u003e will be applied to nodes deployed using the Node Template\n"
                },
                "linodeConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateLinodeConfig:NodeTemplateLinodeConfig",
                    "description": "Linode config for the Node Template (list maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Node Template (string)\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/NodeTemplateNodeTaint:NodeTemplateNodeTaint"
                    },
                    "description": "Node taints. For Rancher v2.3.3 and above (List)\n"
                },
                "opennebulaConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateOpennebulaConfig:NodeTemplateOpennebulaConfig",
                    "description": "Opennebula config for the Node Template (list maxitems:1)\n"
                },
                "openstackConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateOpenstackConfig:NodeTemplateOpenstackConfig",
                    "description": "Openstack config for the Node Template (list maxitems:1)\n"
                },
                "outscaleConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateOutscaleConfig:NodeTemplateOutscaleConfig",
                    "description": "Outscale config for the Node Template (list maxitems:1)\n"
                },
                "useInternalIpAddress": {
                    "type": "boolean",
                    "description": "Engine storage driver for the node template (bool)\n"
                },
                "vsphereConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateVsphereConfig:NodeTemplateVsphereConfig",
                    "description": "vSphere config for the Node Template (list maxitems:1)\n"
                }
            },
            "required": [
                "annotations",
                "driver",
                "driverId",
                "engineInstallUrl",
                "labels",
                "name"
            ],
            "inputProperties": {
                "amazonec2Config": {
                    "$ref": "#/types/rancher2:index/NodeTemplateAmazonec2Config:NodeTemplateAmazonec2Config",
                    "description": "AWS config for the Node Template (list maxitems:1)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Node Template object (map)\n"
                },
                "authCertificateAuthority": {
                    "type": "string",
                    "description": "Auth certificate authority for the Node Template (string)\n",
                    "secret": true
                },
                "authKey": {
                    "type": "string",
                    "description": "Auth key for the Node Template (string)\n",
                    "secret": true
                },
                "azureConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateAzureConfig:NodeTemplateAzureConfig",
                    "description": "Azure config for the Node Template (list maxitems:1)\n"
                },
                "cloudCredentialId": {
                    "type": "string",
                    "description": "Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for the Node Template (string)\n"
                },
                "digitaloceanConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateDigitaloceanConfig:NodeTemplateDigitaloceanConfig",
                    "description": "Digitalocean config for the Node Template (list maxitems:1)\n"
                },
                "driverId": {
                    "type": "string",
                    "description": "The node driver id used by the node template. It's required if the node driver isn't built in Rancher (string)\n"
                },
                "engineEnv": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Engine environment for the node template (string)\n"
                },
                "engineInsecureRegistries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Insecure registry for the node template (list)\n"
                },
                "engineInstallUrl": {
                    "type": "string",
                    "description": "Docker engine install URL for the node template. Available install docker versions at `https://github.com/rancher/install-docker` (string)\n"
                },
                "engineLabel": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Engine label for the node template (string)\n"
                },
                "engineOpt": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Engine options for the node template (map)\n"
                },
                "engineRegistryMirrors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Engine registry mirror for the node template (list)\n"
                },
                "engineStorageDriver": {
                    "type": "string",
                    "description": "Engine storage driver for the node template (string)\n"
                },
                "harvesterConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateHarvesterConfig:NodeTemplateHarvesterConfig",
                    "description": "Harvester config for the Node Template (list maxitems:1)\n"
                },
                "hetznerConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateHetznerConfig:NodeTemplateHetznerConfig",
                    "description": "Hetzner config for the Node Template (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Node Template object (map)\n\n**Note:** \u003cspan pulumi-lang-nodejs=\"`labels`\" pulumi-lang-dotnet=\"`Labels`\" pulumi-lang-go=\"`labels`\" pulumi-lang-python=\"`labels`\" pulumi-lang-yaml=\"`labels`\" pulumi-lang-java=\"`labels`\"\u003e`labels`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`nodeTaints`\" pulumi-lang-dotnet=\"`NodeTaints`\" pulumi-lang-go=\"`nodeTaints`\" pulumi-lang-python=\"`node_taints`\" pulumi-lang-yaml=\"`nodeTaints`\" pulumi-lang-java=\"`nodeTaints`\"\u003e`node_taints`\u003c/span\u003e will be applied to nodes deployed using the Node Template\n"
                },
                "linodeConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateLinodeConfig:NodeTemplateLinodeConfig",
                    "description": "Linode config for the Node Template (list maxitems:1)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Node Template (string)\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/NodeTemplateNodeTaint:NodeTemplateNodeTaint"
                    },
                    "description": "Node taints. For Rancher v2.3.3 and above (List)\n"
                },
                "opennebulaConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateOpennebulaConfig:NodeTemplateOpennebulaConfig",
                    "description": "Opennebula config for the Node Template (list maxitems:1)\n"
                },
                "openstackConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateOpenstackConfig:NodeTemplateOpenstackConfig",
                    "description": "Openstack config for the Node Template (list maxitems:1)\n"
                },
                "outscaleConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateOutscaleConfig:NodeTemplateOutscaleConfig",
                    "description": "Outscale config for the Node Template (list maxitems:1)\n"
                },
                "useInternalIpAddress": {
                    "type": "boolean",
                    "description": "Engine storage driver for the node template (bool)\n"
                },
                "vsphereConfig": {
                    "$ref": "#/types/rancher2:index/NodeTemplateVsphereConfig:NodeTemplateVsphereConfig",
                    "description": "vSphere config for the Node Template (list maxitems:1)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NodeTemplate resources.\n",
                "properties": {
                    "amazonec2Config": {
                        "$ref": "#/types/rancher2:index/NodeTemplateAmazonec2Config:NodeTemplateAmazonec2Config",
                        "description": "AWS config for the Node Template (list maxitems:1)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for Node Template object (map)\n"
                    },
                    "authCertificateAuthority": {
                        "type": "string",
                        "description": "Auth certificate authority for the Node Template (string)\n",
                        "secret": true
                    },
                    "authKey": {
                        "type": "string",
                        "description": "Auth key for the Node Template (string)\n",
                        "secret": true
                    },
                    "azureConfig": {
                        "$ref": "#/types/rancher2:index/NodeTemplateAzureConfig:NodeTemplateAzureConfig",
                        "description": "Azure config for the Node Template (list maxitems:1)\n"
                    },
                    "cloudCredentialId": {
                        "type": "string",
                        "description": "Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for the Node Template (string)\n"
                    },
                    "digitaloceanConfig": {
                        "$ref": "#/types/rancher2:index/NodeTemplateDigitaloceanConfig:NodeTemplateDigitaloceanConfig",
                        "description": "Digitalocean config for the Node Template (list maxitems:1)\n"
                    },
                    "driver": {
                        "type": "string",
                        "description": "(Computed) The driver of the node template (string)\n"
                    },
                    "driverId": {
                        "type": "string",
                        "description": "The node driver id used by the node template. It's required if the node driver isn't built in Rancher (string)\n"
                    },
                    "engineEnv": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Engine environment for the node template (string)\n"
                    },
                    "engineInsecureRegistries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Insecure registry for the node template (list)\n"
                    },
                    "engineInstallUrl": {
                        "type": "string",
                        "description": "Docker engine install URL for the node template. Available install docker versions at `https://github.com/rancher/install-docker` (string)\n"
                    },
                    "engineLabel": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Engine label for the node template (string)\n"
                    },
                    "engineOpt": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Engine options for the node template (map)\n"
                    },
                    "engineRegistryMirrors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Engine registry mirror for the node template (list)\n"
                    },
                    "engineStorageDriver": {
                        "type": "string",
                        "description": "Engine storage driver for the node template (string)\n"
                    },
                    "harvesterConfig": {
                        "$ref": "#/types/rancher2:index/NodeTemplateHarvesterConfig:NodeTemplateHarvesterConfig",
                        "description": "Harvester config for the Node Template (list maxitems:1)\n"
                    },
                    "hetznerConfig": {
                        "$ref": "#/types/rancher2:index/NodeTemplateHetznerConfig:NodeTemplateHetznerConfig",
                        "description": "Hetzner config for the Node Template (list maxitems:1)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for Node Template object (map)\n\n**Note:** \u003cspan pulumi-lang-nodejs=\"`labels`\" pulumi-lang-dotnet=\"`Labels`\" pulumi-lang-go=\"`labels`\" pulumi-lang-python=\"`labels`\" pulumi-lang-yaml=\"`labels`\" pulumi-lang-java=\"`labels`\"\u003e`labels`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`nodeTaints`\" pulumi-lang-dotnet=\"`NodeTaints`\" pulumi-lang-go=\"`nodeTaints`\" pulumi-lang-python=\"`node_taints`\" pulumi-lang-yaml=\"`nodeTaints`\" pulumi-lang-java=\"`nodeTaints`\"\u003e`node_taints`\u003c/span\u003e will be applied to nodes deployed using the Node Template\n"
                    },
                    "linodeConfig": {
                        "$ref": "#/types/rancher2:index/NodeTemplateLinodeConfig:NodeTemplateLinodeConfig",
                        "description": "Linode config for the Node Template (list maxitems:1)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Template (string)\n"
                    },
                    "nodeTaints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/NodeTemplateNodeTaint:NodeTemplateNodeTaint"
                        },
                        "description": "Node taints. For Rancher v2.3.3 and above (List)\n"
                    },
                    "opennebulaConfig": {
                        "$ref": "#/types/rancher2:index/NodeTemplateOpennebulaConfig:NodeTemplateOpennebulaConfig",
                        "description": "Opennebula config for the Node Template (list maxitems:1)\n"
                    },
                    "openstackConfig": {
                        "$ref": "#/types/rancher2:index/NodeTemplateOpenstackConfig:NodeTemplateOpenstackConfig",
                        "description": "Openstack config for the Node Template (list maxitems:1)\n"
                    },
                    "outscaleConfig": {
                        "$ref": "#/types/rancher2:index/NodeTemplateOutscaleConfig:NodeTemplateOutscaleConfig",
                        "description": "Outscale config for the Node Template (list maxitems:1)\n"
                    },
                    "useInternalIpAddress": {
                        "type": "boolean",
                        "description": "Engine storage driver for the node template (bool)\n"
                    },
                    "vsphereConfig": {
                        "$ref": "#/types/rancher2:index/NodeTemplateVsphereConfig:NodeTemplateVsphereConfig",
                        "description": "vSphere config for the Node Template (list maxitems:1)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/podSecurityAdmissionConfigurationTemplate:PodSecurityAdmissionConfigurationTemplate": {
            "description": "Provides a rancher v2 pod security admission configration template resource. \nThis can be used to create pod security admission configration templates and retrieve their information.\n\nFor more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a Pod Security Admission Configuration Template resource\nconst foo = new rancher2.PodSecurityAdmissionConfigurationTemplate(\"foo\", {\n    name: \"custom-psact\",\n    description: \"This is my custom Pod Security Admission Configuration Template\",\n    defaults: {\n        audit: \"restricted\",\n        auditVersion: \"latest\",\n        enforce: \"restricted\",\n        enforceVersion: \"latest\",\n        warn: \"restricted\",\n        warnVersion: \"latest\",\n    },\n    exemptions: {\n        usernames: [\"testuser\"],\n        runtimeClasses: [\"testclass\"],\n        namespaces: [\n            \"ingress-nginx\",\n            \"kube-system\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a Pod Security Admission Configuration Template resource\nfoo = rancher2.PodSecurityAdmissionConfigurationTemplate(\"foo\",\n    name=\"custom-psact\",\n    description=\"This is my custom Pod Security Admission Configuration Template\",\n    defaults={\n        \"audit\": \"restricted\",\n        \"audit_version\": \"latest\",\n        \"enforce\": \"restricted\",\n        \"enforce_version\": \"latest\",\n        \"warn\": \"restricted\",\n        \"warn_version\": \"latest\",\n    },\n    exemptions={\n        \"usernames\": [\"testuser\"],\n        \"runtime_classes\": [\"testclass\"],\n        \"namespaces\": [\n            \"ingress-nginx\",\n            \"kube-system\",\n        ],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a Pod Security Admission Configuration Template resource\n    var foo = new Rancher2.PodSecurityAdmissionConfigurationTemplate(\"foo\", new()\n    {\n        Name = \"custom-psact\",\n        Description = \"This is my custom Pod Security Admission Configuration Template\",\n        Defaults = new Rancher2.Inputs.PodSecurityAdmissionConfigurationTemplateDefaultsArgs\n        {\n            Audit = \"restricted\",\n            AuditVersion = \"latest\",\n            Enforce = \"restricted\",\n            EnforceVersion = \"latest\",\n            Warn = \"restricted\",\n            WarnVersion = \"latest\",\n        },\n        Exemptions = new Rancher2.Inputs.PodSecurityAdmissionConfigurationTemplateExemptionsArgs\n        {\n            Usernames = new[]\n            {\n                \"testuser\",\n            },\n            RuntimeClasses = new[]\n            {\n                \"testclass\",\n            },\n            Namespaces = new[]\n            {\n                \"ingress-nginx\",\n                \"kube-system\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a Pod Security Admission Configuration Template resource\n\t\t_, err := rancher2.NewPodSecurityAdmissionConfigurationTemplate(ctx, \"foo\", \u0026rancher2.PodSecurityAdmissionConfigurationTemplateArgs{\n\t\t\tName:        pulumi.String(\"custom-psact\"),\n\t\t\tDescription: pulumi.String(\"This is my custom Pod Security Admission Configuration Template\"),\n\t\t\tDefaults: \u0026rancher2.PodSecurityAdmissionConfigurationTemplateDefaultsArgs{\n\t\t\t\tAudit:          pulumi.String(\"restricted\"),\n\t\t\t\tAuditVersion:   pulumi.String(\"latest\"),\n\t\t\t\tEnforce:        pulumi.String(\"restricted\"),\n\t\t\t\tEnforceVersion: pulumi.String(\"latest\"),\n\t\t\t\tWarn:           pulumi.String(\"restricted\"),\n\t\t\t\tWarnVersion:    pulumi.String(\"latest\"),\n\t\t\t},\n\t\t\tExemptions: \u0026rancher2.PodSecurityAdmissionConfigurationTemplateExemptionsArgs{\n\t\t\t\tUsernames: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"testuser\"),\n\t\t\t\t},\n\t\t\t\tRuntimeClasses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"testclass\"),\n\t\t\t\t},\n\t\t\t\tNamespaces: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ingress-nginx\"),\n\t\t\t\t\tpulumi.String(\"kube-system\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.PodSecurityAdmissionConfigurationTemplate;\nimport com.pulumi.rancher2.PodSecurityAdmissionConfigurationTemplateArgs;\nimport com.pulumi.rancher2.inputs.PodSecurityAdmissionConfigurationTemplateDefaultsArgs;\nimport com.pulumi.rancher2.inputs.PodSecurityAdmissionConfigurationTemplateExemptionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a Pod Security Admission Configuration Template resource\n        var foo = new PodSecurityAdmissionConfigurationTemplate(\"foo\", PodSecurityAdmissionConfigurationTemplateArgs.builder()\n            .name(\"custom-psact\")\n            .description(\"This is my custom Pod Security Admission Configuration Template\")\n            .defaults(PodSecurityAdmissionConfigurationTemplateDefaultsArgs.builder()\n                .audit(\"restricted\")\n                .auditVersion(\"latest\")\n                .enforce(\"restricted\")\n                .enforceVersion(\"latest\")\n                .warn(\"restricted\")\n                .warnVersion(\"latest\")\n                .build())\n            .exemptions(PodSecurityAdmissionConfigurationTemplateExemptionsArgs.builder()\n                .usernames(\"testuser\")\n                .runtimeClasses(\"testclass\")\n                .namespaces(                \n                    \"ingress-nginx\",\n                    \"kube-system\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a Pod Security Admission Configuration Template resource\n  foo:\n    type: rancher2:PodSecurityAdmissionConfigurationTemplate\n    properties:\n      name: custom-psact\n      description: This is my custom Pod Security Admission Configuration Template\n      defaults:\n        audit: restricted\n        auditVersion: latest\n        enforce: restricted\n        enforceVersion: latest\n        warn: restricted\n        warnVersion: latest\n      exemptions:\n        usernames:\n          - testuser\n        runtimeClasses:\n          - testclass\n        namespaces:\n          - ingress-nginx\n          - kube-system\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPod Security Admission Configration Templates can be imported using its ID:\n\n```sh\n$ pulumi import rancher2:index/podSecurityAdmissionConfigurationTemplate:PodSecurityAdmissionConfigurationTemplate foo \u0026lt;resource_id\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "defaults": {
                    "$ref": "#/types/rancher2:index/PodSecurityAdmissionConfigurationTemplateDefaults:PodSecurityAdmissionConfigurationTemplateDefaults",
                    "description": "The default level labels and version labels to be applied when labels for a mode is not set (list maxitems:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the pod security admission configuration template (string)\n"
                },
                "exemptions": {
                    "$ref": "#/types/rancher2:index/PodSecurityAdmissionConfigurationTemplateExemptions:PodSecurityAdmissionConfigurationTemplateExemptions",
                    "description": "The authenticated usernames, runtime class names, and namespaces to exempt (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the pod security admission configuration template (string)\n"
                }
            },
            "required": [
                "annotations",
                "defaults",
                "labels",
                "name"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "defaults": {
                    "$ref": "#/types/rancher2:index/PodSecurityAdmissionConfigurationTemplateDefaults:PodSecurityAdmissionConfigurationTemplateDefaults",
                    "description": "The default level labels and version labels to be applied when labels for a mode is not set (list maxitems:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the pod security admission configuration template (string)\n"
                },
                "exemptions": {
                    "$ref": "#/types/rancher2:index/PodSecurityAdmissionConfigurationTemplateExemptions:PodSecurityAdmissionConfigurationTemplateExemptions",
                    "description": "The authenticated usernames, runtime class names, and namespaces to exempt (list maxitems:1)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the pod security admission configuration template (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "defaults"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PodSecurityAdmissionConfigurationTemplate resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "defaults": {
                        "$ref": "#/types/rancher2:index/PodSecurityAdmissionConfigurationTemplateDefaults:PodSecurityAdmissionConfigurationTemplateDefaults",
                        "description": "The default level labels and version labels to be applied when labels for a mode is not set (list maxitems:1)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the pod security admission configuration template (string)\n"
                    },
                    "exemptions": {
                        "$ref": "#/types/rancher2:index/PodSecurityAdmissionConfigurationTemplateExemptions:PodSecurityAdmissionConfigurationTemplateExemptions",
                        "description": "The authenticated usernames, runtime class names, and namespaces to exempt (list maxitems:1)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pod security admission configuration template (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/project:Project": {
            "description": "Provides a Rancher v2 Project resource. This can be used to create projects for Rancher v2 environments and retrieve their information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Project\nconst foo = new rancher2.Project(\"foo\", {\n    name: \"foo\",\n    clusterId: \"\u003cCLUSTER_ID\u003e\",\n    resourceQuota: {\n        projectLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"2000Mi\",\n            requestsStorage: \"2Gi\",\n        },\n        namespaceDefaultLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"500Mi\",\n            requestsStorage: \"1Gi\",\n        },\n    },\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Project\nfoo = rancher2.Project(\"foo\",\n    name=\"foo\",\n    cluster_id=\"\u003cCLUSTER_ID\u003e\",\n    resource_quota={\n        \"project_limit\": {\n            \"limits_cpu\": \"2000m\",\n            \"limits_memory\": \"2000Mi\",\n            \"requests_storage\": \"2Gi\",\n        },\n        \"namespace_default_limit\": {\n            \"limits_cpu\": \"2000m\",\n            \"limits_memory\": \"500Mi\",\n            \"requests_storage\": \"1Gi\",\n        },\n    },\n    container_resource_limit={\n        \"limits_cpu\": \"20m\",\n        \"limits_memory\": \"20Mi\",\n        \"requests_cpu\": \"1m\",\n        \"requests_memory\": \"1Mi\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Project\n    var foo = new Rancher2.Project(\"foo\", new()\n    {\n        Name = \"foo\",\n        ClusterId = \"\u003cCLUSTER_ID\u003e\",\n        ResourceQuota = new Rancher2.Inputs.ProjectResourceQuotaArgs\n        {\n            ProjectLimit = new Rancher2.Inputs.ProjectResourceQuotaProjectLimitArgs\n            {\n                LimitsCpu = \"2000m\",\n                LimitsMemory = \"2000Mi\",\n                RequestsStorage = \"2Gi\",\n            },\n            NamespaceDefaultLimit = new Rancher2.Inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs\n            {\n                LimitsCpu = \"2000m\",\n                LimitsMemory = \"500Mi\",\n                RequestsStorage = \"1Gi\",\n            },\n        },\n        ContainerResourceLimit = new Rancher2.Inputs.ProjectContainerResourceLimitArgs\n        {\n            LimitsCpu = \"20m\",\n            LimitsMemory = \"20Mi\",\n            RequestsCpu = \"1m\",\n            RequestsMemory = \"1Mi\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Project\n\t\t_, err := rancher2.NewProject(ctx, \"foo\", \u0026rancher2.ProjectArgs{\n\t\t\tName:      pulumi.String(\"foo\"),\n\t\t\tClusterId: pulumi.String(\"\u003cCLUSTER_ID\u003e\"),\n\t\t\tResourceQuota: \u0026rancher2.ProjectResourceQuotaArgs{\n\t\t\t\tProjectLimit: \u0026rancher2.ProjectResourceQuotaProjectLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"2000Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"2Gi\"),\n\t\t\t\t},\n\t\t\t\tNamespaceDefaultLimit: \u0026rancher2.ProjectResourceQuotaNamespaceDefaultLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"500Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tContainerResourceLimit: \u0026rancher2.ProjectContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Project;\nimport com.pulumi.rancher2.ProjectArgs;\nimport com.pulumi.rancher2.inputs.ProjectResourceQuotaArgs;\nimport com.pulumi.rancher2.inputs.ProjectResourceQuotaProjectLimitArgs;\nimport com.pulumi.rancher2.inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs;\nimport com.pulumi.rancher2.inputs.ProjectContainerResourceLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Project\n        var foo = new Project(\"foo\", ProjectArgs.builder()\n            .name(\"foo\")\n            .clusterId(\"\u003cCLUSTER_ID\u003e\")\n            .resourceQuota(ProjectResourceQuotaArgs.builder()\n                .projectLimit(ProjectResourceQuotaProjectLimitArgs.builder()\n                    .limitsCpu(\"2000m\")\n                    .limitsMemory(\"2000Mi\")\n                    .requestsStorage(\"2Gi\")\n                    .build())\n                .namespaceDefaultLimit(ProjectResourceQuotaNamespaceDefaultLimitArgs.builder()\n                    .limitsCpu(\"2000m\")\n                    .limitsMemory(\"500Mi\")\n                    .requestsStorage(\"1Gi\")\n                    .build())\n                .build())\n            .containerResourceLimit(ProjectContainerResourceLimitArgs.builder()\n                .limitsCpu(\"20m\")\n                .limitsMemory(\"20Mi\")\n                .requestsCpu(\"1m\")\n                .requestsMemory(\"1Mi\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Project\n  foo:\n    type: rancher2:Project\n    properties:\n      name: foo\n      clusterId: \u003cCLUSTER_ID\u003e\n      resourceQuota:\n        projectLimit:\n          limitsCpu: 2000m\n          limitsMemory: 2000Mi\n          requestsStorage: 2Gi\n        namespaceDefaultLimit:\n          limitsCpu: 2000m\n          limitsMemory: 500Mi\n          requestsStorage: 1Gi\n      containerResourceLimit:\n        limitsCpu: 20m\n        limitsMemory: 20Mi\n        requestsCpu: 1m\n        requestsMemory: 1Mi\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Project\nconst foo = new rancher2.Project(\"foo\", {\n    name: \"foo\",\n    clusterId: \"\u003cCLUSTER_ID\u003e\",\n    resourceQuota: {\n        projectLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"2000Mi\",\n            requestsStorage: \"2Gi\",\n        },\n        namespaceDefaultLimit: {\n            limitsCpu: \"2000m\",\n            limitsMemory: \"500Mi\",\n            requestsStorage: \"1Gi\",\n        },\n    },\n    containerResourceLimit: {\n        limitsCpu: \"20m\",\n        limitsMemory: \"20Mi\",\n        requestsCpu: \"1m\",\n        requestsMemory: \"1Mi\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Project\nfoo = rancher2.Project(\"foo\",\n    name=\"foo\",\n    cluster_id=\"\u003cCLUSTER_ID\u003e\",\n    resource_quota={\n        \"project_limit\": {\n            \"limits_cpu\": \"2000m\",\n            \"limits_memory\": \"2000Mi\",\n            \"requests_storage\": \"2Gi\",\n        },\n        \"namespace_default_limit\": {\n            \"limits_cpu\": \"2000m\",\n            \"limits_memory\": \"500Mi\",\n            \"requests_storage\": \"1Gi\",\n        },\n    },\n    container_resource_limit={\n        \"limits_cpu\": \"20m\",\n        \"limits_memory\": \"20Mi\",\n        \"requests_cpu\": \"1m\",\n        \"requests_memory\": \"1Mi\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Project\n    var foo = new Rancher2.Project(\"foo\", new()\n    {\n        Name = \"foo\",\n        ClusterId = \"\u003cCLUSTER_ID\u003e\",\n        ResourceQuota = new Rancher2.Inputs.ProjectResourceQuotaArgs\n        {\n            ProjectLimit = new Rancher2.Inputs.ProjectResourceQuotaProjectLimitArgs\n            {\n                LimitsCpu = \"2000m\",\n                LimitsMemory = \"2000Mi\",\n                RequestsStorage = \"2Gi\",\n            },\n            NamespaceDefaultLimit = new Rancher2.Inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs\n            {\n                LimitsCpu = \"2000m\",\n                LimitsMemory = \"500Mi\",\n                RequestsStorage = \"1Gi\",\n            },\n        },\n        ContainerResourceLimit = new Rancher2.Inputs.ProjectContainerResourceLimitArgs\n        {\n            LimitsCpu = \"20m\",\n            LimitsMemory = \"20Mi\",\n            RequestsCpu = \"1m\",\n            RequestsMemory = \"1Mi\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Project\n\t\t_, err := rancher2.NewProject(ctx, \"foo\", \u0026rancher2.ProjectArgs{\n\t\t\tName:      pulumi.String(\"foo\"),\n\t\t\tClusterId: pulumi.String(\"\u003cCLUSTER_ID\u003e\"),\n\t\t\tResourceQuota: \u0026rancher2.ProjectResourceQuotaArgs{\n\t\t\t\tProjectLimit: \u0026rancher2.ProjectResourceQuotaProjectLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"2000Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"2Gi\"),\n\t\t\t\t},\n\t\t\t\tNamespaceDefaultLimit: \u0026rancher2.ProjectResourceQuotaNamespaceDefaultLimitArgs{\n\t\t\t\t\tLimitsCpu:       pulumi.String(\"2000m\"),\n\t\t\t\t\tLimitsMemory:    pulumi.String(\"500Mi\"),\n\t\t\t\t\tRequestsStorage: pulumi.String(\"1Gi\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tContainerResourceLimit: \u0026rancher2.ProjectContainerResourceLimitArgs{\n\t\t\t\tLimitsCpu:      pulumi.String(\"20m\"),\n\t\t\t\tLimitsMemory:   pulumi.String(\"20Mi\"),\n\t\t\t\tRequestsCpu:    pulumi.String(\"1m\"),\n\t\t\t\tRequestsMemory: pulumi.String(\"1Mi\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Project;\nimport com.pulumi.rancher2.ProjectArgs;\nimport com.pulumi.rancher2.inputs.ProjectResourceQuotaArgs;\nimport com.pulumi.rancher2.inputs.ProjectResourceQuotaProjectLimitArgs;\nimport com.pulumi.rancher2.inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs;\nimport com.pulumi.rancher2.inputs.ProjectContainerResourceLimitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Project\n        var foo = new Project(\"foo\", ProjectArgs.builder()\n            .name(\"foo\")\n            .clusterId(\"\u003cCLUSTER_ID\u003e\")\n            .resourceQuota(ProjectResourceQuotaArgs.builder()\n                .projectLimit(ProjectResourceQuotaProjectLimitArgs.builder()\n                    .limitsCpu(\"2000m\")\n                    .limitsMemory(\"2000Mi\")\n                    .requestsStorage(\"2Gi\")\n                    .build())\n                .namespaceDefaultLimit(ProjectResourceQuotaNamespaceDefaultLimitArgs.builder()\n                    .limitsCpu(\"2000m\")\n                    .limitsMemory(\"500Mi\")\n                    .requestsStorage(\"1Gi\")\n                    .build())\n                .build())\n            .containerResourceLimit(ProjectContainerResourceLimitArgs.builder()\n                .limitsCpu(\"20m\")\n                .limitsMemory(\"20Mi\")\n                .requestsCpu(\"1m\")\n                .requestsMemory(\"1Mi\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Project\n  foo:\n    type: rancher2:Project\n    properties:\n      name: foo\n      clusterId: \u003cCLUSTER_ID\u003e\n      resourceQuota:\n        projectLimit:\n          limitsCpu: 2000m\n          limitsMemory: 2000Mi\n          requestsStorage: 2Gi\n        namespaceDefaultLimit:\n          limitsCpu: 2000m\n          limitsMemory: 500Mi\n          requestsStorage: 1Gi\n      containerResourceLimit:\n        limitsCpu: 20m\n        limitsMemory: 20Mi\n        requestsCpu: 1m\n        requestsMemory: 1Mi\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nProjects can be imported using the Rancher Project ID\n\n```sh\n$ pulumi import rancher2:index/project:Project foo \u0026lt;project_id\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create project (string)\n"
                },
                "containerResourceLimit": {
                    "$ref": "#/types/rancher2:index/ProjectContainerResourceLimit:ProjectContainerResourceLimit",
                    "description": "Default containers resource limits on project (List maxitem:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A project description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project (string)\n"
                },
                "resourceQuota": {
                    "$ref": "#/types/rancher2:index/ProjectResourceQuota:ProjectResourceQuota",
                    "description": "Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)\n"
                },
                "waitForCluster": {
                    "type": "boolean",
                    "description": "Wait for cluster becomes active. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "labels",
                "name"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Node Pool object (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id where create project (string)\n",
                    "willReplaceOnChanges": true
                },
                "containerResourceLimit": {
                    "$ref": "#/types/rancher2:index/ProjectContainerResourceLimit:ProjectContainerResourceLimit",
                    "description": "Default containers resource limits on project (List maxitem:1)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A project description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Node Pool object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project (string)\n"
                },
                "resourceQuota": {
                    "$ref": "#/types/rancher2:index/ProjectResourceQuota:ProjectResourceQuota",
                    "description": "Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)\n"
                },
                "waitForCluster": {
                    "type": "boolean",
                    "description": "Wait for cluster becomes active. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for Node Pool object (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where create project (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "containerResourceLimit": {
                        "$ref": "#/types/rancher2:index/ProjectContainerResourceLimit:ProjectContainerResourceLimit",
                        "description": "Default containers resource limits on project (List maxitem:1)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A project description (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for Node Pool object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project (string)\n"
                    },
                    "resourceQuota": {
                        "$ref": "#/types/rancher2:index/ProjectResourceQuota:ProjectResourceQuota",
                        "description": "Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)\n"
                    },
                    "waitForCluster": {
                        "type": "boolean",
                        "description": "Wait for cluster becomes active. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/projectRoleTemplateBinding:ProjectRoleTemplateBinding": {
            "description": "Provides a Rancher v2 Project Role Template Binding resource. This can be used to create Project Role Template Bindings for Rancher v2 environments and retrieve their information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Project Role Template Binding\nconst foo = new rancher2.ProjectRoleTemplateBinding(\"foo\", {\n    name: \"foo\",\n    projectId: \"\u003cproject_id\u003e\",\n    roleTemplateId: \"\u003crole_template_id\u003e\",\n    userId: \"\u003cuser_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Project Role Template Binding\nfoo = rancher2.ProjectRoleTemplateBinding(\"foo\",\n    name=\"foo\",\n    project_id=\"\u003cproject_id\u003e\",\n    role_template_id=\"\u003crole_template_id\u003e\",\n    user_id=\"\u003cuser_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Project Role Template Binding\n    var foo = new Rancher2.ProjectRoleTemplateBinding(\"foo\", new()\n    {\n        Name = \"foo\",\n        ProjectId = \"\u003cproject_id\u003e\",\n        RoleTemplateId = \"\u003crole_template_id\u003e\",\n        UserId = \"\u003cuser_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Project Role Template Binding\n\t\t_, err := rancher2.NewProjectRoleTemplateBinding(ctx, \"foo\", \u0026rancher2.ProjectRoleTemplateBindingArgs{\n\t\t\tName:           pulumi.String(\"foo\"),\n\t\t\tProjectId:      pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tRoleTemplateId: pulumi.String(\"\u003crole_template_id\u003e\"),\n\t\t\tUserId:         pulumi.String(\"\u003cuser_id\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.ProjectRoleTemplateBinding;\nimport com.pulumi.rancher2.ProjectRoleTemplateBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Project Role Template Binding\n        var foo = new ProjectRoleTemplateBinding(\"foo\", ProjectRoleTemplateBindingArgs.builder()\n            .name(\"foo\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .roleTemplateId(\"\u003crole_template_id\u003e\")\n            .userId(\"\u003cuser_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Project Role Template Binding\n  foo:\n    type: rancher2:ProjectRoleTemplateBinding\n    properties:\n      name: foo\n      projectId: \u003cproject_id\u003e\n      roleTemplateId: \u003crole_template_id\u003e\n      userId: \u003cuser_id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nProject Role Template Bindings can be imported using the Rancher Project Role Template Binding ID\n\n```sh\n$ pulumi import rancher2:index/projectRoleTemplateBinding:ProjectRoleTemplateBinding foo \u0026lt;project_role_template_binding_id\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The group ID to assign project role template binding (string)\n"
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The\u003cspan pulumi-lang-nodejs=\" groupPrincipal \" pulumi-lang-dotnet=\" GroupPrincipal \" pulumi-lang-go=\" groupPrincipal \" pulumi-lang-python=\" group_principal \" pulumi-lang-yaml=\" groupPrincipal \" pulumi-lang-java=\" groupPrincipal \"\u003e group_principal \u003c/span\u003eID to assign project role template binding (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n\n**Note:** user \u003cspan pulumi-lang-nodejs=\"`userId \" pulumi-lang-dotnet=\"`UserId \" pulumi-lang-go=\"`userId \" pulumi-lang-python=\"`user_id \" pulumi-lang-yaml=\"`userId \" pulumi-lang-java=\"`userId \"\u003e`user_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" userPrincipalId`\" pulumi-lang-dotnet=\" UserPrincipalId`\" pulumi-lang-go=\" userPrincipalId`\" pulumi-lang-python=\" user_principal_id`\" pulumi-lang-yaml=\" userPrincipalId`\" pulumi-lang-java=\" userPrincipalId`\"\u003e user_principal_id`\u003c/span\u003e OR group \u003cspan pulumi-lang-nodejs=\"`groupId \" pulumi-lang-dotnet=\"`GroupId \" pulumi-lang-go=\"`groupId \" pulumi-lang-python=\"`group_id \" pulumi-lang-yaml=\"`groupId \" pulumi-lang-java=\"`groupId \"\u003e`group_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" groupPrincipalId`\" pulumi-lang-dotnet=\" GroupPrincipalId`\" pulumi-lang-go=\" groupPrincipalId`\" pulumi-lang-python=\" group_principal_id`\" pulumi-lang-yaml=\" groupPrincipalId`\" pulumi-lang-java=\" groupPrincipalId`\"\u003e group_principal_id`\u003c/span\u003e must be defined\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project role template binding (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where bind project role template, in format `cluster_id:project_id`, e.g. `c-abc12:p-def34` (string)\n"
                },
                "roleTemplateId": {
                    "type": "string",
                    "description": "The role template id from create project role template binding (string)\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign project role template binding (string)\n"
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "The\u003cspan pulumi-lang-nodejs=\" userPrincipal \" pulumi-lang-dotnet=\" UserPrincipal \" pulumi-lang-go=\" userPrincipal \" pulumi-lang-python=\" user_principal \" pulumi-lang-yaml=\" userPrincipal \" pulumi-lang-java=\" userPrincipal \"\u003e user_principal \u003c/span\u003eID to assign project role template binding (string)\n"
                }
            },
            "required": [
                "annotations",
                "groupId",
                "groupPrincipalId",
                "labels",
                "name",
                "projectId",
                "roleTemplateId",
                "userId",
                "userPrincipalId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations of the resource (map)\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "The group ID to assign project role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "groupPrincipalId": {
                    "type": "string",
                    "description": "The\u003cspan pulumi-lang-nodejs=\" groupPrincipal \" pulumi-lang-dotnet=\" GroupPrincipal \" pulumi-lang-go=\" groupPrincipal \" pulumi-lang-python=\" group_principal \" pulumi-lang-yaml=\" groupPrincipal \" pulumi-lang-java=\" groupPrincipal \"\u003e group_principal \u003c/span\u003eID to assign project role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels of the resource (map)\n\n**Note:** user \u003cspan pulumi-lang-nodejs=\"`userId \" pulumi-lang-dotnet=\"`UserId \" pulumi-lang-go=\"`userId \" pulumi-lang-python=\"`user_id \" pulumi-lang-yaml=\"`userId \" pulumi-lang-java=\"`userId \"\u003e`user_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" userPrincipalId`\" pulumi-lang-dotnet=\" UserPrincipalId`\" pulumi-lang-go=\" userPrincipalId`\" pulumi-lang-python=\" user_principal_id`\" pulumi-lang-yaml=\" userPrincipalId`\" pulumi-lang-java=\" userPrincipalId`\"\u003e user_principal_id`\u003c/span\u003e OR group \u003cspan pulumi-lang-nodejs=\"`groupId \" pulumi-lang-dotnet=\"`GroupId \" pulumi-lang-go=\"`groupId \" pulumi-lang-python=\"`group_id \" pulumi-lang-yaml=\"`groupId \" pulumi-lang-java=\"`groupId \"\u003e`group_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" groupPrincipalId`\" pulumi-lang-dotnet=\" GroupPrincipalId`\" pulumi-lang-go=\" groupPrincipalId`\" pulumi-lang-python=\" group_principal_id`\" pulumi-lang-yaml=\" groupPrincipalId`\" pulumi-lang-java=\" groupPrincipalId`\"\u003e group_principal_id`\u003c/span\u003e must be defined\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where bind project role template, in format `cluster_id:project_id`, e.g. `c-abc12:p-def34` (string)\n",
                    "willReplaceOnChanges": true
                },
                "roleTemplateId": {
                    "type": "string",
                    "description": "The role template id from create project role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The user ID to assign project role template binding (string)\n",
                    "willReplaceOnChanges": true
                },
                "userPrincipalId": {
                    "type": "string",
                    "description": "The\u003cspan pulumi-lang-nodejs=\" userPrincipal \" pulumi-lang-dotnet=\" UserPrincipal \" pulumi-lang-go=\" userPrincipal \" pulumi-lang-python=\" user_principal \" pulumi-lang-yaml=\" userPrincipal \" pulumi-lang-java=\" userPrincipal \"\u003e user_principal \u003c/span\u003eID to assign project role template binding (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "roleTemplateId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectRoleTemplateBinding resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations of the resource (map)\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The group ID to assign project role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "groupPrincipalId": {
                        "type": "string",
                        "description": "The\u003cspan pulumi-lang-nodejs=\" groupPrincipal \" pulumi-lang-dotnet=\" GroupPrincipal \" pulumi-lang-go=\" groupPrincipal \" pulumi-lang-python=\" group_principal \" pulumi-lang-yaml=\" groupPrincipal \" pulumi-lang-java=\" groupPrincipal \"\u003e group_principal \u003c/span\u003eID to assign project role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels of the resource (map)\n\n**Note:** user \u003cspan pulumi-lang-nodejs=\"`userId \" pulumi-lang-dotnet=\"`UserId \" pulumi-lang-go=\"`userId \" pulumi-lang-python=\"`user_id \" pulumi-lang-yaml=\"`userId \" pulumi-lang-java=\"`userId \"\u003e`user_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" userPrincipalId`\" pulumi-lang-dotnet=\" UserPrincipalId`\" pulumi-lang-go=\" userPrincipalId`\" pulumi-lang-python=\" user_principal_id`\" pulumi-lang-yaml=\" userPrincipalId`\" pulumi-lang-java=\" userPrincipalId`\"\u003e user_principal_id`\u003c/span\u003e OR group \u003cspan pulumi-lang-nodejs=\"`groupId \" pulumi-lang-dotnet=\"`GroupId \" pulumi-lang-go=\"`groupId \" pulumi-lang-python=\"`group_id \" pulumi-lang-yaml=\"`groupId \" pulumi-lang-java=\"`groupId \"\u003e`group_id \u003c/span\u003e|\u003cspan pulumi-lang-nodejs=\" groupPrincipalId`\" pulumi-lang-dotnet=\" GroupPrincipalId`\" pulumi-lang-go=\" groupPrincipalId`\" pulumi-lang-python=\" group_principal_id`\" pulumi-lang-yaml=\" groupPrincipalId`\" pulumi-lang-java=\" groupPrincipalId`\"\u003e group_principal_id`\u003c/span\u003e must be defined\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where bind project role template, in format `cluster_id:project_id`, e.g. `c-abc12:p-def34` (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "roleTemplateId": {
                        "type": "string",
                        "description": "The role template id from create project role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The user ID to assign project role template binding (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "userPrincipalId": {
                        "type": "string",
                        "description": "The\u003cspan pulumi-lang-nodejs=\" userPrincipal \" pulumi-lang-dotnet=\" UserPrincipal \" pulumi-lang-go=\" userPrincipal \" pulumi-lang-python=\" user_principal \" pulumi-lang-yaml=\" userPrincipal \" pulumi-lang-java=\" userPrincipal \"\u003e user_principal \u003c/span\u003eID to assign project role template binding (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/registry:Registry": {
            "description": "Provides a Rancher v2 Registry resource. This resource creates Kubernetes secrets with the type `kubernetes.io/dockerconfigjson` for authenticating against Docker registries for Rancher v2 environments and retrieving their information.\n\nDepending on the availability, there are 2 types of Rancher v2 Docker registry resources:\n- Project registry resource: Available to all namespaces in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e.\n- Namespaced registry resource: Available to \u003cspan pulumi-lang-nodejs=\"`namespaceId`\" pulumi-lang-dotnet=\"`NamespaceId`\" pulumi-lang-go=\"`namespaceId`\" pulumi-lang-python=\"`namespace_id`\" pulumi-lang-yaml=\"`namespaceId`\" pulumi-lang-java=\"`namespaceId`\"\u003e`namespace_id`\u003c/span\u003e in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Project Registry\nconst foo = new rancher2.Registry(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform registry foo\",\n    projectId: \"\u003cproject_id\u003e\",\n    registries: [{\n        address: \"test.io\",\n        username: \"user\",\n        password: \"pass\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Project Registry\nfoo = rancher2.Registry(\"foo\",\n    name=\"foo\",\n    description=\"Terraform registry foo\",\n    project_id=\"\u003cproject_id\u003e\",\n    registries=[{\n        \"address\": \"test.io\",\n        \"username\": \"user\",\n        \"password\": \"pass\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Project Registry\n    var foo = new Rancher2.Registry(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform registry foo\",\n        ProjectId = \"\u003cproject_id\u003e\",\n        Registries = new[]\n        {\n            new Rancher2.Inputs.RegistryRegistryArgs\n            {\n                Address = \"test.io\",\n                Username = \"user\",\n                Password = \"pass\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Project Registry\n\t\t_, err := rancher2.NewRegistry(ctx, \"foo\", \u0026rancher2.RegistryArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform registry foo\"),\n\t\t\tProjectId:   pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tRegistries: rancher2.RegistryRegistryArray{\n\t\t\t\t\u0026rancher2.RegistryRegistryArgs{\n\t\t\t\t\tAddress:  pulumi.String(\"test.io\"),\n\t\t\t\t\tUsername: pulumi.String(\"user\"),\n\t\t\t\t\tPassword: pulumi.String(\"pass\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Registry;\nimport com.pulumi.rancher2.RegistryArgs;\nimport com.pulumi.rancher2.inputs.RegistryRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Project Registry\n        var foo = new Registry(\"foo\", RegistryArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform registry foo\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .registries(RegistryRegistryArgs.builder()\n                .address(\"test.io\")\n                .username(\"user\")\n                .password(\"pass\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Project Registry\n  foo:\n    type: rancher2:Registry\n    properties:\n      name: foo\n      description: Terraform registry foo\n      projectId: \u003cproject_id\u003e\n      registries:\n        - address: test.io\n          username: user\n          password: pass\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Namespaced Registry\nconst foo = new rancher2.Registry(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform registry foo\",\n    projectId: \"\u003cproject_id\u003e\",\n    namespaceId: \"\u003cnamespace_id\u003e\",\n    registries: [{\n        address: \"test.io\",\n        username: \"user2\",\n        password: \"pass\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Namespaced Registry\nfoo = rancher2.Registry(\"foo\",\n    name=\"foo\",\n    description=\"Terraform registry foo\",\n    project_id=\"\u003cproject_id\u003e\",\n    namespace_id=\"\u003cnamespace_id\u003e\",\n    registries=[{\n        \"address\": \"test.io\",\n        \"username\": \"user2\",\n        \"password\": \"pass\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Namespaced Registry\n    var foo = new Rancher2.Registry(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform registry foo\",\n        ProjectId = \"\u003cproject_id\u003e\",\n        NamespaceId = \"\u003cnamespace_id\u003e\",\n        Registries = new[]\n        {\n            new Rancher2.Inputs.RegistryRegistryArgs\n            {\n                Address = \"test.io\",\n                Username = \"user2\",\n                Password = \"pass\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Namespaced Registry\n\t\t_, err := rancher2.NewRegistry(ctx, \"foo\", \u0026rancher2.RegistryArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform registry foo\"),\n\t\t\tProjectId:   pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tNamespaceId: pulumi.String(\"\u003cnamespace_id\u003e\"),\n\t\t\tRegistries: rancher2.RegistryRegistryArray{\n\t\t\t\t\u0026rancher2.RegistryRegistryArgs{\n\t\t\t\t\tAddress:  pulumi.String(\"test.io\"),\n\t\t\t\t\tUsername: pulumi.String(\"user2\"),\n\t\t\t\t\tPassword: pulumi.String(\"pass\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Registry;\nimport com.pulumi.rancher2.RegistryArgs;\nimport com.pulumi.rancher2.inputs.RegistryRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Namespaced Registry\n        var foo = new Registry(\"foo\", RegistryArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform registry foo\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .namespaceId(\"\u003cnamespace_id\u003e\")\n            .registries(RegistryRegistryArgs.builder()\n                .address(\"test.io\")\n                .username(\"user2\")\n                .password(\"pass\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Namespaced Registry\n  foo:\n    type: rancher2:Registry\n    properties:\n      name: foo\n      description: Terraform registry foo\n      projectId: \u003cproject_id\u003e\n      namespaceId: \u003cnamespace_id\u003e\n      registries:\n        - address: test.io\n          username: user2\n          password: pass\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRegistries can be imported using the registry ID in the format `\u003cnamespace_id\u003e.\u003cproject_id\u003e.\u003cregistry_id\u003e`\n\n```sh\n$ pulumi import rancher2:index/registry:Registry foo \u0026lt;namespace_id\u0026gt;.\u0026lt;project_id\u0026gt;.\u0026lt;registry_id\u0026gt;\n```\n`\u003cnamespace_id\u003e` is optional, just needed for namespaced registry.\n\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Registry object (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A registry description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Registry object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the registry (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where to assign the namespaced registry (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where to assign the registry (string)\n"
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/RegistryRegistry:RegistryRegistry"
                    },
                    "description": "Registries data for registry (list)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "projectId",
                "registries"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for Registry object (map)\n"
                },
                "description": {
                    "type": "string",
                    "description": "A registry description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for Registry object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the registry (string)\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where to assign the namespaced registry (string)\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where to assign the registry (string)\n",
                    "willReplaceOnChanges": true
                },
                "registries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/RegistryRegistry:RegistryRegistry"
                    },
                    "description": "Registries data for registry (list)\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "registries"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Registry resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for Registry object (map)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A registry description (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for Registry object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the registry (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced registry (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the registry (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "registries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/RegistryRegistry:RegistryRegistry"
                        },
                        "description": "Registries data for registry (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/roleTemplate:RoleTemplate": {
            "description": "Provides a Rancher v2 Role Template resource. This can be used to create Role Template for Rancher v2 and retrieve their information. \n\n\u003cspan pulumi-lang-nodejs=\"`cluster`\" pulumi-lang-dotnet=\"`Cluster`\" pulumi-lang-go=\"`cluster`\" pulumi-lang-python=\"`cluster`\" pulumi-lang-yaml=\"`cluster`\" pulumi-lang-java=\"`cluster`\"\u003e`cluster`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`project`\" pulumi-lang-dotnet=\"`Project`\" pulumi-lang-go=\"`project`\" pulumi-lang-python=\"`project`\" pulumi-lang-yaml=\"`project`\" pulumi-lang-java=\"`project`\"\u003e`project`\u003c/span\u003e scopes are supported for role templates.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 cluster Role Template\nconst foo = new rancher2.RoleTemplate(\"foo\", {\n    name: \"foo\",\n    context: \"cluster\",\n    defaultRole: true,\n    description: \"Terraform role template acceptance test\",\n    rules: [{\n        apiGroups: [\"*\"],\n        resources: [\"secrets\"],\n        verbs: [\"create\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 cluster Role Template\nfoo = rancher2.RoleTemplate(\"foo\",\n    name=\"foo\",\n    context=\"cluster\",\n    default_role=True,\n    description=\"Terraform role template acceptance test\",\n    rules=[{\n        \"api_groups\": [\"*\"],\n        \"resources\": [\"secrets\"],\n        \"verbs\": [\"create\"],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 cluster Role Template\n    var foo = new Rancher2.RoleTemplate(\"foo\", new()\n    {\n        Name = \"foo\",\n        Context = \"cluster\",\n        DefaultRole = true,\n        Description = \"Terraform role template acceptance test\",\n        Rules = new[]\n        {\n            new Rancher2.Inputs.RoleTemplateRuleArgs\n            {\n                ApiGroups = new[]\n                {\n                    \"*\",\n                },\n                Resources = new[]\n                {\n                    \"secrets\",\n                },\n                Verbs = new[]\n                {\n                    \"create\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 cluster Role Template\n\t\t_, err := rancher2.NewRoleTemplate(ctx, \"foo\", \u0026rancher2.RoleTemplateArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tContext:     pulumi.String(\"cluster\"),\n\t\t\tDefaultRole: pulumi.Bool(true),\n\t\t\tDescription: pulumi.String(\"Terraform role template acceptance test\"),\n\t\t\tRules: rancher2.RoleTemplateRuleArray{\n\t\t\t\t\u0026rancher2.RoleTemplateRuleArgs{\n\t\t\t\t\tApiGroups: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"secrets\"),\n\t\t\t\t\t},\n\t\t\t\t\tVerbs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"create\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.RoleTemplate;\nimport com.pulumi.rancher2.RoleTemplateArgs;\nimport com.pulumi.rancher2.inputs.RoleTemplateRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 cluster Role Template\n        var foo = new RoleTemplate(\"foo\", RoleTemplateArgs.builder()\n            .name(\"foo\")\n            .context(\"cluster\")\n            .defaultRole(true)\n            .description(\"Terraform role template acceptance test\")\n            .rules(RoleTemplateRuleArgs.builder()\n                .apiGroups(\"*\")\n                .resources(\"secrets\")\n                .verbs(\"create\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 cluster Role Template\n  foo:\n    type: rancher2:RoleTemplate\n    properties:\n      name: foo\n      context: cluster\n      defaultRole: true\n      description: Terraform role template acceptance test\n      rules:\n        - apiGroups:\n            - '*'\n          resources:\n            - secrets\n          verbs:\n            - create\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 project Role Template\nconst foo = new rancher2.RoleTemplate(\"foo\", {\n    name: \"foo\",\n    context: \"project\",\n    defaultRole: true,\n    description: \"Terraform role template acceptance test\",\n    rules: [{\n        apiGroups: [\"*\"],\n        resources: [\"secrets\"],\n        verbs: [\"create\"],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 project Role Template\nfoo = rancher2.RoleTemplate(\"foo\",\n    name=\"foo\",\n    context=\"project\",\n    default_role=True,\n    description=\"Terraform role template acceptance test\",\n    rules=[{\n        \"api_groups\": [\"*\"],\n        \"resources\": [\"secrets\"],\n        \"verbs\": [\"create\"],\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 project Role Template\n    var foo = new Rancher2.RoleTemplate(\"foo\", new()\n    {\n        Name = \"foo\",\n        Context = \"project\",\n        DefaultRole = true,\n        Description = \"Terraform role template acceptance test\",\n        Rules = new[]\n        {\n            new Rancher2.Inputs.RoleTemplateRuleArgs\n            {\n                ApiGroups = new[]\n                {\n                    \"*\",\n                },\n                Resources = new[]\n                {\n                    \"secrets\",\n                },\n                Verbs = new[]\n                {\n                    \"create\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 project Role Template\n\t\t_, err := rancher2.NewRoleTemplate(ctx, \"foo\", \u0026rancher2.RoleTemplateArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tContext:     pulumi.String(\"project\"),\n\t\t\tDefaultRole: pulumi.Bool(true),\n\t\t\tDescription: pulumi.String(\"Terraform role template acceptance test\"),\n\t\t\tRules: rancher2.RoleTemplateRuleArray{\n\t\t\t\t\u0026rancher2.RoleTemplateRuleArgs{\n\t\t\t\t\tApiGroups: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"secrets\"),\n\t\t\t\t\t},\n\t\t\t\t\tVerbs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"create\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.RoleTemplate;\nimport com.pulumi.rancher2.RoleTemplateArgs;\nimport com.pulumi.rancher2.inputs.RoleTemplateRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 project Role Template\n        var foo = new RoleTemplate(\"foo\", RoleTemplateArgs.builder()\n            .name(\"foo\")\n            .context(\"project\")\n            .defaultRole(true)\n            .description(\"Terraform role template acceptance test\")\n            .rules(RoleTemplateRuleArgs.builder()\n                .apiGroups(\"*\")\n                .resources(\"secrets\")\n                .verbs(\"create\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 project Role Template\n  foo:\n    type: rancher2:RoleTemplate\n    properties:\n      name: foo\n      context: project\n      defaultRole: true\n      description: Terraform role template acceptance test\n      rules:\n        - apiGroups:\n            - '*'\n          resources:\n            - secrets\n          verbs:\n            - create\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRole Template can be imported using the Rancher Role Template ID\n\n```sh\n$ pulumi import rancher2:index/roleTemplate:RoleTemplate foo \u0026lt;role_template_id\u0026gt;\n```\n",
            "properties": {
                "administrative": {
                    "type": "boolean",
                    "description": "Administrative role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for role template object (map)\n"
                },
                "builtin": {
                    "type": "boolean",
                    "description": "(Computed) Builtin role template (string)\n"
                },
                "context": {
                    "type": "string",
                    "description": "Role template context. \u003cspan pulumi-lang-nodejs=\"`cluster`\" pulumi-lang-dotnet=\"`Cluster`\" pulumi-lang-go=\"`cluster`\" pulumi-lang-python=\"`cluster`\" pulumi-lang-yaml=\"`cluster`\" pulumi-lang-java=\"`cluster`\"\u003e`cluster`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`project`\" pulumi-lang-dotnet=\"`Project`\" pulumi-lang-go=\"`project`\" pulumi-lang-python=\"`project`\" pulumi-lang-yaml=\"`project`\" pulumi-lang-java=\"`project`\"\u003e`project`\u003c/span\u003e values are supported. Default: \u003cspan pulumi-lang-nodejs=\"`cluster`\" pulumi-lang-dotnet=\"`Cluster`\" pulumi-lang-go=\"`cluster`\" pulumi-lang-python=\"`cluster`\" pulumi-lang-yaml=\"`cluster`\" pulumi-lang-java=\"`cluster`\"\u003e`cluster`\u003c/span\u003e (string)\n"
                },
                "defaultRole": {
                    "type": "boolean",
                    "description": "Default role template for new created cluster or project. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Role template description (string)\n"
                },
                "external": {
                    "type": "boolean",
                    "description": "External role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "externalRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/RoleTemplateExternalRule:RoleTemplateExternalRule"
                    },
                    "description": "External rules used for authorization. This field is required when `external=true` and no underlying ClusterRole exists. (list)\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Hidden role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for role template object (map)\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Locked role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Role template name (string)\n"
                },
                "roleTemplateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Inherit role template IDs (list)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/RoleTemplateRule:RoleTemplateRule"
                    },
                    "description": "Role template policy rules (list)\n"
                }
            },
            "required": [
                "annotations",
                "builtin",
                "description",
                "externalRules",
                "labels",
                "name",
                "roleTemplateIds",
                "rules"
            ],
            "inputProperties": {
                "administrative": {
                    "type": "boolean",
                    "description": "Administrative role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for role template object (map)\n"
                },
                "context": {
                    "type": "string",
                    "description": "Role template context. \u003cspan pulumi-lang-nodejs=\"`cluster`\" pulumi-lang-dotnet=\"`Cluster`\" pulumi-lang-go=\"`cluster`\" pulumi-lang-python=\"`cluster`\" pulumi-lang-yaml=\"`cluster`\" pulumi-lang-java=\"`cluster`\"\u003e`cluster`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`project`\" pulumi-lang-dotnet=\"`Project`\" pulumi-lang-go=\"`project`\" pulumi-lang-python=\"`project`\" pulumi-lang-yaml=\"`project`\" pulumi-lang-java=\"`project`\"\u003e`project`\u003c/span\u003e values are supported. Default: \u003cspan pulumi-lang-nodejs=\"`cluster`\" pulumi-lang-dotnet=\"`Cluster`\" pulumi-lang-go=\"`cluster`\" pulumi-lang-python=\"`cluster`\" pulumi-lang-yaml=\"`cluster`\" pulumi-lang-java=\"`cluster`\"\u003e`cluster`\u003c/span\u003e (string)\n"
                },
                "defaultRole": {
                    "type": "boolean",
                    "description": "Default role template for new created cluster or project. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Role template description (string)\n"
                },
                "external": {
                    "type": "boolean",
                    "description": "External role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "externalRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/RoleTemplateExternalRule:RoleTemplateExternalRule"
                    },
                    "description": "External rules used for authorization. This field is required when `external=true` and no underlying ClusterRole exists. (list)\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Hidden role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for role template object (map)\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Locked role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Role template name (string)\n"
                },
                "roleTemplateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Inherit role template IDs (list)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rancher2:index/RoleTemplateRule:RoleTemplateRule"
                    },
                    "description": "Role template policy rules (list)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleTemplate resources.\n",
                "properties": {
                    "administrative": {
                        "type": "boolean",
                        "description": "Administrative role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for role template object (map)\n"
                    },
                    "builtin": {
                        "type": "boolean",
                        "description": "(Computed) Builtin role template (string)\n"
                    },
                    "context": {
                        "type": "string",
                        "description": "Role template context. \u003cspan pulumi-lang-nodejs=\"`cluster`\" pulumi-lang-dotnet=\"`Cluster`\" pulumi-lang-go=\"`cluster`\" pulumi-lang-python=\"`cluster`\" pulumi-lang-yaml=\"`cluster`\" pulumi-lang-java=\"`cluster`\"\u003e`cluster`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`project`\" pulumi-lang-dotnet=\"`Project`\" pulumi-lang-go=\"`project`\" pulumi-lang-python=\"`project`\" pulumi-lang-yaml=\"`project`\" pulumi-lang-java=\"`project`\"\u003e`project`\u003c/span\u003e values are supported. Default: \u003cspan pulumi-lang-nodejs=\"`cluster`\" pulumi-lang-dotnet=\"`Cluster`\" pulumi-lang-go=\"`cluster`\" pulumi-lang-python=\"`cluster`\" pulumi-lang-yaml=\"`cluster`\" pulumi-lang-java=\"`cluster`\"\u003e`cluster`\u003c/span\u003e (string)\n"
                    },
                    "defaultRole": {
                        "type": "boolean",
                        "description": "Default role template for new created cluster or project. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Role template description (string)\n"
                    },
                    "external": {
                        "type": "boolean",
                        "description": "External role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "externalRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/RoleTemplateExternalRule:RoleTemplateExternalRule"
                        },
                        "description": "External rules used for authorization. This field is required when `external=true` and no underlying ClusterRole exists. (list)\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Hidden role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for role template object (map)\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Locked role template. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Role template name (string)\n"
                    },
                    "roleTemplateIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Inherit role template IDs (list)\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/RoleTemplateRule:RoleTemplateRule"
                        },
                        "description": "Role template policy rules (list)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/secret:Secret": {
            "description": "Provides a Rancher v2 Secret resource. This can be used to create secrets for Rancher v2 environments and retrieve their information.\n\nDepending of the availability, there are 2 types of Rancher v2 secrets:\n- Project secret: Available to all namespaces in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n- Namespaced secret: Available to just \u003cspan pulumi-lang-nodejs=\"`namespaceId`\" pulumi-lang-dotnet=\"`NamespaceId`\" pulumi-lang-go=\"`namespaceId`\" pulumi-lang-python=\"`namespace_id`\" pulumi-lang-yaml=\"`namespaceId`\" pulumi-lang-java=\"`namespaceId`\"\u003e`namespace_id`\u003c/span\u003e in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\nimport * as std from \"@pulumi/std\";\n\n// Create a new rancher2 Project Secret\nconst foo = new rancher2.Secret(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform secret foo\",\n    projectId: \"\u003cproject_id\u003e\",\n    data: {\n        address: std.base64encode({\n            input: \"test.io\",\n        }).then(invoke =\u003e invoke.result),\n        username: std.base64encode({\n            input: \"user2\",\n        }).then(invoke =\u003e invoke.result),\n        password: std.base64encode({\n            input: \"pass\",\n        }).then(invoke =\u003e invoke.result),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\nimport pulumi_std as std\n\n# Create a new rancher2 Project Secret\nfoo = rancher2.Secret(\"foo\",\n    name=\"foo\",\n    description=\"Terraform secret foo\",\n    project_id=\"\u003cproject_id\u003e\",\n    data={\n        \"address\": std.base64encode(input=\"test.io\").result,\n        \"username\": std.base64encode(input=\"user2\").result,\n        \"password\": std.base64encode(input=\"pass\").result,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\nusing Std = Pulumi.Std;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Project Secret\n    var foo = new Rancher2.Secret(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform secret foo\",\n        ProjectId = \"\u003cproject_id\u003e\",\n        Data = \n        {\n            { \"address\", Std.Base64encode.Invoke(new()\n            {\n                Input = \"test.io\",\n            }).Apply(invoke =\u003e invoke.Result) },\n            { \"username\", Std.Base64encode.Invoke(new()\n            {\n                Input = \"user2\",\n            }).Apply(invoke =\u003e invoke.Result) },\n            { \"password\", Std.Base64encode.Invoke(new()\n            {\n                Input = \"pass\",\n            }).Apply(invoke =\u003e invoke.Result) },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi-std/sdk/go/std\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinvokeBase64encode, err := std.Base64encode(ctx, \u0026std.Base64encodeArgs{\n\t\t\tInput: \"test.io\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinvokeBase64encode1, err := std.Base64encode(ctx, \u0026std.Base64encodeArgs{\n\t\t\tInput: \"user2\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinvokeBase64encode2, err := std.Base64encode(ctx, \u0026std.Base64encodeArgs{\n\t\t\tInput: \"pass\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Project Secret\n\t\t_, err = rancher2.NewSecret(ctx, \"foo\", \u0026rancher2.SecretArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform secret foo\"),\n\t\t\tProjectId:   pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tData: pulumi.StringMap{\n\t\t\t\t\"address\":  pulumi.String(invokeBase64encode.Result),\n\t\t\t\t\"username\": pulumi.String(invokeBase64encode1.Result),\n\t\t\t\t\"password\": pulumi.String(invokeBase64encode2.Result),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Secret;\nimport com.pulumi.rancher2.SecretArgs;\nimport com.pulumi.std.StdFunctions;\nimport com.pulumi.std.inputs.Base64encodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Project Secret\n        var foo = new Secret(\"foo\", SecretArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform secret foo\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .data(Map.ofEntries(\n                Map.entry(\"address\", StdFunctions.base64encode(Base64encodeArgs.builder()\n                    .input(\"test.io\")\n                    .build()).result()),\n                Map.entry(\"username\", StdFunctions.base64encode(Base64encodeArgs.builder()\n                    .input(\"user2\")\n                    .build()).result()),\n                Map.entry(\"password\", StdFunctions.base64encode(Base64encodeArgs.builder()\n                    .input(\"pass\")\n                    .build()).result())\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Project Secret\n  foo:\n    type: rancher2:Secret\n    properties:\n      name: foo\n      description: Terraform secret foo\n      projectId: \u003cproject_id\u003e\n      data:\n        address:\n          fn::invoke:\n            function: std:base64encode\n            arguments:\n              input: test.io\n            return: result\n        username:\n          fn::invoke:\n            function: std:base64encode\n            arguments:\n              input: user2\n            return: result\n        password:\n          fn::invoke:\n            function: std:base64encode\n            arguments:\n              input: pass\n            return: result\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\nimport * as std from \"@pulumi/std\";\n\n// Create a new rancher2 Namespaced Secret\nconst foo = new rancher2.Secret(\"foo\", {\n    name: \"foo\",\n    description: \"Terraform secret foo\",\n    projectId: \"\u003cproject_id\u003e\",\n    namespaceId: \"\u003cnamespace_id\u003e\",\n    data: {\n        address: std.base64encode({\n            input: \"test.io\",\n        }).then(invoke =\u003e invoke.result),\n        username: std.base64encode({\n            input: \"user2\",\n        }).then(invoke =\u003e invoke.result),\n        password: std.base64encode({\n            input: \"pass\",\n        }).then(invoke =\u003e invoke.result),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\nimport pulumi_std as std\n\n# Create a new rancher2 Namespaced Secret\nfoo = rancher2.Secret(\"foo\",\n    name=\"foo\",\n    description=\"Terraform secret foo\",\n    project_id=\"\u003cproject_id\u003e\",\n    namespace_id=\"\u003cnamespace_id\u003e\",\n    data={\n        \"address\": std.base64encode(input=\"test.io\").result,\n        \"username\": std.base64encode(input=\"user2\").result,\n        \"password\": std.base64encode(input=\"pass\").result,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\nusing Std = Pulumi.Std;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Namespaced Secret\n    var foo = new Rancher2.Secret(\"foo\", new()\n    {\n        Name = \"foo\",\n        Description = \"Terraform secret foo\",\n        ProjectId = \"\u003cproject_id\u003e\",\n        NamespaceId = \"\u003cnamespace_id\u003e\",\n        Data = \n        {\n            { \"address\", Std.Base64encode.Invoke(new()\n            {\n                Input = \"test.io\",\n            }).Apply(invoke =\u003e invoke.Result) },\n            { \"username\", Std.Base64encode.Invoke(new()\n            {\n                Input = \"user2\",\n            }).Apply(invoke =\u003e invoke.Result) },\n            { \"password\", Std.Base64encode.Invoke(new()\n            {\n                Input = \"pass\",\n            }).Apply(invoke =\u003e invoke.Result) },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi-std/sdk/go/std\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinvokeBase64encode, err := std.Base64encode(ctx, \u0026std.Base64encodeArgs{\n\t\t\tInput: \"test.io\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinvokeBase64encode1, err := std.Base64encode(ctx, \u0026std.Base64encodeArgs{\n\t\t\tInput: \"user2\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinvokeBase64encode2, err := std.Base64encode(ctx, \u0026std.Base64encodeArgs{\n\t\t\tInput: \"pass\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 Namespaced Secret\n\t\t_, err = rancher2.NewSecret(ctx, \"foo\", \u0026rancher2.SecretArgs{\n\t\t\tName:        pulumi.String(\"foo\"),\n\t\t\tDescription: pulumi.String(\"Terraform secret foo\"),\n\t\t\tProjectId:   pulumi.String(\"\u003cproject_id\u003e\"),\n\t\t\tNamespaceId: pulumi.String(\"\u003cnamespace_id\u003e\"),\n\t\t\tData: pulumi.StringMap{\n\t\t\t\t\"address\":  pulumi.String(invokeBase64encode.Result),\n\t\t\t\t\"username\": pulumi.String(invokeBase64encode1.Result),\n\t\t\t\t\"password\": pulumi.String(invokeBase64encode2.Result),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Secret;\nimport com.pulumi.rancher2.SecretArgs;\nimport com.pulumi.std.StdFunctions;\nimport com.pulumi.std.inputs.Base64encodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Namespaced Secret\n        var foo = new Secret(\"foo\", SecretArgs.builder()\n            .name(\"foo\")\n            .description(\"Terraform secret foo\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .namespaceId(\"\u003cnamespace_id\u003e\")\n            .data(Map.ofEntries(\n                Map.entry(\"address\", StdFunctions.base64encode(Base64encodeArgs.builder()\n                    .input(\"test.io\")\n                    .build()).result()),\n                Map.entry(\"username\", StdFunctions.base64encode(Base64encodeArgs.builder()\n                    .input(\"user2\")\n                    .build()).result()),\n                Map.entry(\"password\", StdFunctions.base64encode(Base64encodeArgs.builder()\n                    .input(\"pass\")\n                    .build()).result())\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Namespaced Secret\n  foo:\n    type: rancher2:Secret\n    properties:\n      name: foo\n      description: Terraform secret foo\n      projectId: \u003cproject_id\u003e\n      namespaceId: \u003cnamespace_id\u003e\n      data:\n        address:\n          fn::invoke:\n            function: std:base64encode\n            arguments:\n              input: test.io\n            return: result\n        username:\n          fn::invoke:\n            function: std:base64encode\n            arguments:\n              input: user2\n            return: result\n        password:\n          fn::invoke:\n            function: std:base64encode\n            arguments:\n              input: pass\n            return: result\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSecrets can be imported using the secret ID in the format `\u003cnamespace_id\u003e.\u003cproject_id\u003e.\u003csecret_id\u003e`\n\n```sh\n$ pulumi import rancher2:index/secret:Secret foo \u0026lt;namespace_id\u0026gt;.\u0026lt;project_id\u0026gt;.\u0026lt;secret_id\u0026gt;\n```\n`\u003cnamespace_id\u003e` is optional, just needed for namespaced secret.\n\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for secret object (map)\n"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Secret key/value data. Base64 encoding required for values (map)\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "A secret description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for secret object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret (string)\n"
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where to assign the namespaced secret (string)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where to assign the secret (string)\n"
                }
            },
            "required": [
                "annotations",
                "data",
                "labels",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for secret object (map)\n"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Secret key/value data. Base64 encoding required for values (map)\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "A secret description (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for secret object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret (string)\n",
                    "willReplaceOnChanges": true
                },
                "namespaceId": {
                    "type": "string",
                    "description": "The namespace id where to assign the namespaced secret (string)\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "The project id where to assign the secret (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "data",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for secret object (map)\n"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Secret key/value data. Base64 encoding required for values (map)\n",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "A secret description (string)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for secret object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced secret (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the secret (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/secretV2:SecretV2": {
            "description": "Provides a Rancher Secret v2 resource. This can be used to create k8s secrets for Rancher v2 environments and retrieve their information. Secret v2 resource is available at Rancher v2.5.x and above.\n\n## Import\n\nV2 secrets can be imported using the Rancher cluster ID, Secret V2 namespace and name.\n\n```sh\n$ pulumi import rancher2:index/secretV2:SecretV2 foo \u0026lt;CLUSTER_ID\u0026gt;.\u0026lt;SECRET_V2_NAMESPACE\u0026gt;/\u0026lt;SECRET_V2_NAME\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the secret v2 (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the secret V2 (string)\n"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The data of the secret v2 (map)\n",
                    "secret": true
                },
                "immutable": {
                    "type": "boolean",
                    "description": "If set to true, any secret update will remove and recreate the secret. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the secret v2 (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret v2 (string)\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespaces of the secret v2. Default: \u003cspan pulumi-lang-nodejs=\"`default`\" pulumi-lang-dotnet=\"`Default`\" pulumi-lang-go=\"`default`\" pulumi-lang-python=\"`default`\" pulumi-lang-yaml=\"`default`\" pulumi-lang-java=\"`default`\"\u003e`default`\u003c/span\u003e (string)\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "(Computed) The k8s resource version (string)\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the k8s secret, used to facilitate programmatic handling of secret data, [More info](https://github.com/kubernetes/api/blob/release-1.20/core/v1/types.go#L5772) about k8s secret types and expected format.  Default: `Opaque` (string)\n"
                }
            },
            "required": [
                "annotations",
                "clusterId",
                "data",
                "labels",
                "name",
                "resourceVersion"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the secret v2 (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the secret V2 (string)\n",
                    "willReplaceOnChanges": true
                },
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The data of the secret v2 (map)\n",
                    "secret": true
                },
                "immutable": {
                    "type": "boolean",
                    "description": "If set to true, any secret update will remove and recreate the secret. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the secret v2 (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret v2 (string)\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespaces of the secret v2. Default: \u003cspan pulumi-lang-nodejs=\"`default`\" pulumi-lang-dotnet=\"`Default`\" pulumi-lang-go=\"`default`\" pulumi-lang-python=\"`default`\" pulumi-lang-yaml=\"`default`\" pulumi-lang-java=\"`default`\"\u003e`default`\u003c/span\u003e (string)\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the k8s secret, used to facilitate programmatic handling of secret data, [More info](https://github.com/kubernetes/api/blob/release-1.20/core/v1/types.go#L5772) about k8s secret types and expected format.  Default: `Opaque` (string)\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "data"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecretV2 resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the secret v2 (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the secret V2 (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The data of the secret v2 (map)\n",
                        "secret": true
                    },
                    "immutable": {
                        "type": "boolean",
                        "description": "If set to true, any secret update will remove and recreate the secret. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the secret v2 (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret v2 (string)\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespaces of the secret v2. Default: \u003cspan pulumi-lang-nodejs=\"`default`\" pulumi-lang-dotnet=\"`Default`\" pulumi-lang-go=\"`default`\" pulumi-lang-python=\"`default`\" pulumi-lang-yaml=\"`default`\" pulumi-lang-java=\"`default`\"\u003e`default`\u003c/span\u003e (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "(Computed) The k8s resource version (string)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the k8s secret, used to facilitate programmatic handling of secret data, [More info](https://github.com/kubernetes/api/blob/release-1.20/core/v1/types.go#L5772) about k8s secret types and expected format.  Default: `Opaque` (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/setting:Setting": {
            "description": "Provides a Rancher v2 Setting resource. This can be used to create settings for Rancher v2 environments and retrieve their information.\n\nOn create, if setting already exists, provider will import it and update its value.\n\nOn destroy, if setting is a system setting like `server-url`, provider'll not delete it from Rancher, it'll just update setting value to default and remove it from tfstate. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 Setting\nconst foo = new rancher2.Setting(\"foo\", {\n    name: \"foo\",\n    value: \"\u003cVALUE\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 Setting\nfoo = rancher2.Setting(\"foo\",\n    name=\"foo\",\n    value=\"\u003cVALUE\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 Setting\n    var foo = new Rancher2.Setting(\"foo\", new()\n    {\n        Name = \"foo\",\n        Value = \"\u003cVALUE\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 Setting\n\t\t_, err := rancher2.NewSetting(ctx, \"foo\", \u0026rancher2.SettingArgs{\n\t\t\tName:  pulumi.String(\"foo\"),\n\t\t\tValue: pulumi.String(\"\u003cVALUE\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Setting;\nimport com.pulumi.rancher2.SettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 Setting\n        var foo = new Setting(\"foo\", SettingArgs.builder()\n            .name(\"foo\")\n            .value(\"\u003cVALUE\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 Setting\n  foo:\n    type: rancher2:Setting\n    properties:\n      name: foo\n      value: \u003cVALUE\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSetting can be imported using the Rancher setting ID.\n\n```sh\n$ pulumi import rancher2:index/setting:Setting foo \u0026lt;setting_id\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for setting object (map)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for setting object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the setting (string)\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the setting (string)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "value"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for setting object (map)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for setting object (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the setting (string)\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value of the setting (string)\n"
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Setting resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for setting object (map)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for setting object (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the setting (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the setting (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/storageClassV2:StorageClassV2": {
            "description": "Provides a Rancher Storage Class v2 resource. This can be used to manage k8s storage classes for Rancher v2 clusters and retrieve their information. Storage Class v2 resource is available at Rancher v2.5.x and above.\n\n## Import\n\nV2 storage classs can be imported using the Rancher cluster ID and StorageClass V2 name.\n\n```sh\n$ pulumi import rancher2:index/storageClassV2:StorageClassV2 foo \u0026lt;CLUSTER_ID\u0026gt;.\u0026lt;STORAGE_CLASS_V2_NAME\u0026gt;\n```\n",
            "properties": {
                "allowVolumeExpansion": {
                    "type": "boolean",
                    "description": "Is the provisioner of the storageClass v2 allowing volume expansion? (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the storageClass v2 (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the storageClass V2 (string)\n"
                },
                "k8sProvisioner": {
                    "type": "string",
                    "description": "The provisioner of the storageClass v2 (string)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the storageClass v2 (map)\n"
                },
                "mountOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The mount options for storageClass v2 (list)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the storageClass v2 (string)\n"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The parameters for storageClass v2 (string)\n"
                },
                "reclaimPolicy": {
                    "type": "string",
                    "description": "The reclaim policy for storageClass v2. `Delete`, `Recycle` and `Retain` values are allowed. Default: `Delete` (string)\n"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "(Computed) The k8s resource version (string)\n"
                },
                "volumeBindingMode": {
                    "type": "string",
                    "description": "The volume binding mode for storageClass v2. `Immediate` and `WaitForFirstConsumer` values are allowed. Default: `Immediate` (string)\n"
                }
            },
            "required": [
                "allowVolumeExpansion",
                "annotations",
                "clusterId",
                "k8sProvisioner",
                "labels",
                "mountOptions",
                "name",
                "resourceVersion"
            ],
            "inputProperties": {
                "allowVolumeExpansion": {
                    "type": "boolean",
                    "description": "Is the provisioner of the storageClass v2 allowing volume expansion? (bool)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for the storageClass v2 (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster id of the storageClass V2 (string)\n",
                    "willReplaceOnChanges": true
                },
                "k8sProvisioner": {
                    "type": "string",
                    "description": "The provisioner of the storageClass v2 (string)\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for the storageClass v2 (map)\n"
                },
                "mountOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The mount options for storageClass v2 (list)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the storageClass v2 (string)\n",
                    "willReplaceOnChanges": true
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The parameters for storageClass v2 (string)\n"
                },
                "reclaimPolicy": {
                    "type": "string",
                    "description": "The reclaim policy for storageClass v2. `Delete`, `Recycle` and `Retain` values are allowed. Default: `Delete` (string)\n",
                    "willReplaceOnChanges": true
                },
                "volumeBindingMode": {
                    "type": "string",
                    "description": "The volume binding mode for storageClass v2. `Immediate` and `WaitForFirstConsumer` values are allowed. Default: `Immediate` (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterId",
                "k8sProvisioner"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageClassV2 resources.\n",
                "properties": {
                    "allowVolumeExpansion": {
                        "type": "boolean",
                        "description": "Is the provisioner of the storageClass v2 allowing volume expansion? (bool)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for the storageClass v2 (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the storageClass V2 (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "k8sProvisioner": {
                        "type": "string",
                        "description": "The provisioner of the storageClass v2 (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for the storageClass v2 (map)\n"
                    },
                    "mountOptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The mount options for storageClass v2 (list)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the storageClass v2 (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The parameters for storageClass v2 (string)\n"
                    },
                    "reclaimPolicy": {
                        "type": "string",
                        "description": "The reclaim policy for storageClass v2. `Delete`, `Recycle` and `Retain` values are allowed. Default: `Delete` (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "resourceVersion": {
                        "type": "string",
                        "description": "(Computed) The k8s resource version (string)\n"
                    },
                    "volumeBindingMode": {
                        "type": "string",
                        "description": "The volume binding mode for storageClass v2. `Immediate` and `WaitForFirstConsumer` values are allowed. Default: `Immediate` (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/token:Token": {
            "description": "Provides a Rancher v2 Token resource. This can be used to create Tokens for Rancher v2 provider user and retrieve their information.\n\nThere are 2 kind of tokens:\n- no scoped: valid for global system.\n- scoped: valid for just a specific cluster (\u003cspan pulumi-lang-nodejs=\"`clusterId`\" pulumi-lang-dotnet=\"`ClusterId`\" pulumi-lang-go=\"`clusterId`\" pulumi-lang-python=\"`cluster_id`\" pulumi-lang-yaml=\"`clusterId`\" pulumi-lang-java=\"`clusterId`\"\u003e`cluster_id`\u003c/span\u003e should be provided).\n\nTokens can't be updated once created. Any diff in token data will recreate the token. If any token expire, Rancher2 provider will generate a diff to regenerate it.\n\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "(Computed) Token access key part (string)\n"
                },
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Annotations of the token (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID for scoped token (string)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Token description (string)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "(Computed) Token is enabled (bool)\n"
                },
                "expired": {
                    "type": "boolean",
                    "description": "(Computed) Token is expired (bool)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels of the token (map)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(Computed) Token name (string)\n"
                },
                "renew": {
                    "type": "boolean",
                    "description": "Renew expired or disabled token"
                },
                "secretKey": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Token secret key part (string)\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "(Computed/Sensitive) Token value (string)\n",
                    "language": {
                        "csharp": {
                            "name": "TokenName"
                        }
                    },
                    "secret": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "Token time to live in seconds. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int) \n\nFrom Rancher v2.4.6 \u003cspan pulumi-lang-nodejs=\"`ttl`\" pulumi-lang-dotnet=\"`Ttl`\" pulumi-lang-go=\"`ttl`\" pulumi-lang-python=\"`ttl`\" pulumi-lang-yaml=\"`ttl`\" pulumi-lang-java=\"`ttl`\"\u003e`ttl`\u003c/span\u003e is readed in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "(Computed) Token user ID (string)\n"
                }
            },
            "required": [
                "accessKey",
                "annotations",
                "enabled",
                "expired",
                "labels",
                "name",
                "secretKey",
                "token",
                "userId"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Annotations of the token (map)\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "Cluster ID for scoped token (string)\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Token description (string)\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Computed) Labels of the token (map)\n"
                },
                "renew": {
                    "type": "boolean",
                    "description": "Renew expired or disabled token",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "Token time to live in seconds. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int) \n\nFrom Rancher v2.4.6 \u003cspan pulumi-lang-nodejs=\"`ttl`\" pulumi-lang-dotnet=\"`Ttl`\" pulumi-lang-go=\"`ttl`\" pulumi-lang-python=\"`ttl`\" pulumi-lang-yaml=\"`ttl`\" pulumi-lang-java=\"`ttl`\"\u003e`ttl`\u003c/span\u003e is readed in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "(Computed) Token access key part (string)\n"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the token (map)\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster ID for scoped token (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Token description (string)\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "(Computed) Token is enabled (bool)\n"
                    },
                    "expired": {
                        "type": "boolean",
                        "description": "(Computed) Token is expired (bool)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the token (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) Token name (string)\n"
                    },
                    "renew": {
                        "type": "boolean",
                        "description": "Renew expired or disabled token",
                        "willReplaceOnChanges": true
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Token secret key part (string)\n",
                        "secret": true
                    },
                    "token": {
                        "type": "string",
                        "description": "(Computed/Sensitive) Token value (string)\n",
                        "language": {
                            "csharp": {
                                "name": "TokenName"
                            }
                        },
                        "secret": true
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "Token time to live in seconds. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int) \n\nFrom Rancher v2.4.6 \u003cspan pulumi-lang-nodejs=\"`ttl`\" pulumi-lang-dotnet=\"`Ttl`\" pulumi-lang-go=\"`ttl`\" pulumi-lang-python=\"`ttl`\" pulumi-lang-yaml=\"`ttl`\" pulumi-lang-java=\"`ttl`\"\u003e`ttl`\u003c/span\u003e is readed in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "(Computed) Token user ID (string)\n"
                    }
                },
                "type": "object"
            }
        },
        "rancher2:index/user:User": {
            "description": "Provides a Rancher v2 User resource. This can be used to create Users for Rancher v2 environments and retrieve their information.\n\nWhen a Rancher User is created, it doesn't have a global role binding. At least, `user-base` global role binding in needed in order to enable user login.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Create a new rancher2 User\nconst foo = new rancher2.User(\"foo\", {\n    name: \"Foo user\",\n    username: \"foo\",\n    password: \"changeme\",\n    enabled: true,\n    mustChangePassword: true,\n});\n// Create a new rancher2 global_role_binding for User\nconst fooGlobalRoleBinding = new rancher2.GlobalRoleBinding(\"foo\", {\n    name: \"foo\",\n    globalRoleId: \"user-base\",\n    userId: foo.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Create a new rancher2 User\nfoo = rancher2.User(\"foo\",\n    name=\"Foo user\",\n    username=\"foo\",\n    password=\"changeme\",\n    enabled=True,\n    must_change_password=True)\n# Create a new rancher2 global_role_binding for User\nfoo_global_role_binding = rancher2.GlobalRoleBinding(\"foo\",\n    name=\"foo\",\n    global_role_id=\"user-base\",\n    user_id=foo.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new rancher2 User\n    var foo = new Rancher2.User(\"foo\", new()\n    {\n        Name = \"Foo user\",\n        Username = \"foo\",\n        Password = \"changeme\",\n        Enabled = true,\n        MustChangePassword = true,\n    });\n\n    // Create a new rancher2 global_role_binding for User\n    var fooGlobalRoleBinding = new Rancher2.GlobalRoleBinding(\"foo\", new()\n    {\n        Name = \"foo\",\n        GlobalRoleId = \"user-base\",\n        UserId = foo.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a new rancher2 User\n\t\tfoo, err := rancher2.NewUser(ctx, \"foo\", \u0026rancher2.UserArgs{\n\t\t\tName:               pulumi.String(\"Foo user\"),\n\t\t\tUsername:           pulumi.String(\"foo\"),\n\t\t\tPassword:           pulumi.String(\"changeme\"),\n\t\t\tEnabled:            pulumi.Bool(true),\n\t\t\tMustChangePassword: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a new rancher2 global_role_binding for User\n\t\t_, err = rancher2.NewGlobalRoleBinding(ctx, \"foo\", \u0026rancher2.GlobalRoleBindingArgs{\n\t\t\tName:         pulumi.String(\"foo\"),\n\t\t\tGlobalRoleId: pulumi.String(\"user-base\"),\n\t\t\tUserId:       foo.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.User;\nimport com.pulumi.rancher2.UserArgs;\nimport com.pulumi.rancher2.GlobalRoleBinding;\nimport com.pulumi.rancher2.GlobalRoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a new rancher2 User\n        var foo = new User(\"foo\", UserArgs.builder()\n            .name(\"Foo user\")\n            .username(\"foo\")\n            .password(\"changeme\")\n            .enabled(true)\n            .mustChangePassword(true)\n            .build());\n\n        // Create a new rancher2 global_role_binding for User\n        var fooGlobalRoleBinding = new GlobalRoleBinding(\"fooGlobalRoleBinding\", GlobalRoleBindingArgs.builder()\n            .name(\"foo\")\n            .globalRoleId(\"user-base\")\n            .userId(foo.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new rancher2 User\n  foo:\n    type: rancher2:User\n    properties:\n      name: Foo user\n      username: foo\n      password: changeme\n      enabled: true\n      mustChangePassword: true\n  # Create a new rancher2 global_role_binding for User\n  fooGlobalRoleBinding:\n    type: rancher2:GlobalRoleBinding\n    name: foo\n    properties:\n      name: foo\n      globalRoleId: user-base\n      userId: ${foo.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nUsers can be imported using the Rancher User ID\n\n```sh\n$ pulumi import rancher2:index/user:User foo \u0026lt;user_id\u0026gt;\n```\n",
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for global role binding (map)\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for global role binding (map)\n"
                },
                "mustChangePassword": {
                    "type": "boolean",
                    "description": "The user must change password at first login (bool)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user full name (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user password (string)\n",
                    "secret": true
                },
                "principalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Computed) The user principal IDs (list)\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user username (string)\n"
                }
            },
            "required": [
                "annotations",
                "labels",
                "name",
                "password",
                "principalIds",
                "username"
            ],
            "inputProperties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations for global role binding (map)\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels for global role binding (map)\n"
                },
                "mustChangePassword": {
                    "type": "boolean",
                    "description": "The user must change password at first login (bool)\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The user full name (string)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user password (string)\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "The user username (string)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Annotations for global role binding (map)\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels for global role binding (map)\n"
                    },
                    "mustChangePassword": {
                        "type": "boolean",
                        "description": "The user must change password at first login (bool)\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The user full name (string)\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The user password (string)\n",
                        "secret": true
                    },
                    "principalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) The user principal IDs (list)\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user username (string)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "pulumi:providers:rancher2/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/provider"
                    }
                },
                "type": "pulumi:providers:rancher2/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getCatalogV2:getCatalogV2": {
            "description": "Use this data source to retrieve information about a Rancher2 catalog v2. Catalog v2 resource is available at Rancher v2.5.x and above.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCatalogV2.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the catalog V2 (string)\n"
                    },
                    "exponentialBackoffMaxRetries": {
                        "type": "integer"
                    },
                    "exponentialBackoffMaxWait": {
                        "type": "integer"
                    },
                    "exponentialBackoffMinWait": {
                        "type": "integer"
                    },
                    "insecurePlainHttp": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the catalog v2 (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCatalogV2.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for the catalog v2 (map)\n",
                        "type": "object"
                    },
                    "caBundle": {
                        "description": "(Computed) PEM encoded CA bundle which will be used to validate the repo's certificate (string)\n",
                        "type": "string"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "enabled": {
                        "description": "(Computed) If disabled the repo clone will not be updated or allowed to be installed from. Default: \u003cspan pulumi-lang-nodejs=\"`true`\" pulumi-lang-dotnet=\"`True`\" pulumi-lang-go=\"`true`\" pulumi-lang-python=\"`true`\" pulumi-lang-yaml=\"`true`\" pulumi-lang-java=\"`true`\"\u003e`true`\u003c/span\u003e (bool)\n",
                        "type": "boolean"
                    },
                    "exponentialBackoffMaxRetries": {
                        "type": "integer"
                    },
                    "exponentialBackoffMaxWait": {
                        "type": "integer"
                    },
                    "exponentialBackoffMinWait": {
                        "type": "integer"
                    },
                    "gitBranch": {
                        "description": "(Computed) Git Repository branch containing Helm chart definitions. Default \u003cspan pulumi-lang-nodejs=\"`master`\" pulumi-lang-dotnet=\"`Master`\" pulumi-lang-go=\"`master`\" pulumi-lang-python=\"`master`\" pulumi-lang-yaml=\"`master`\" pulumi-lang-java=\"`master`\"\u003e`master`\u003c/span\u003e (string)\n",
                        "type": "string"
                    },
                    "gitRepo": {
                        "description": "(Computed) The url of the catalog v2 repo (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "insecure": {
                        "description": "(Computed) Use insecure HTTPS to download the repo's index. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n",
                        "type": "boolean"
                    },
                    "insecurePlainHttp": {
                        "type": "boolean"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for the catalog v2 (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "description": "(Computed) The k8s resource version (string)\n",
                        "type": "string"
                    },
                    "secretName": {
                        "description": "(Computed) K8s secret name to be used to connect to the repo (string)\n",
                        "type": "string"
                    },
                    "secretNamespace": {
                        "description": "(Computed) K8s secret namespace (string)\n",
                        "type": "string"
                    },
                    "serviceAccount": {
                        "description": "(Computed) K8s service account used to deploy charts instead of the end users credentials (string)\n",
                        "type": "string"
                    },
                    "serviceAccountNamespace": {
                        "description": "(Computed) The username to access the catalog if needed (string)\n",
                        "type": "string"
                    },
                    "url": {
                        "description": "(Computed) URL to an index generated by Helm (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "caBundle",
                    "clusterId",
                    "enabled",
                    "exponentialBackoffMaxRetries",
                    "exponentialBackoffMaxWait",
                    "exponentialBackoffMinWait",
                    "gitBranch",
                    "gitRepo",
                    "insecure",
                    "labels",
                    "name",
                    "resourceVersion",
                    "secretName",
                    "secretNamespace",
                    "serviceAccount",
                    "serviceAccountNamespace",
                    "url",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getCertificate:getCertificate": {
            "description": "Use this data source to retrieve information about a Rancher v2 certificate.\n\nDepending of the availability, there are 2 types of Rancher v2 certificates:\n- Project certificate: Available to all namespaces in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n- Namespaced certificate: Available to just \u003cspan pulumi-lang-nodejs=\"`namespaceId`\" pulumi-lang-dotnet=\"`NamespaceId`\" pulumi-lang-go=\"`namespaceId`\" pulumi-lang-python=\"`namespace_id`\" pulumi-lang-yaml=\"`namespaceId`\" pulumi-lang-java=\"`namespaceId`\"\u003e`namespace_id`\u003c/span\u003e in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Project Certificate\nconst foo = rancher2.getCertificate({\n    name: \"\u003cname\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Retrieve a rancher2 Project Certificate\nfoo = rancher2.get_certificate(name=\"\u003cname\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Retrieve a rancher2 Project Certificate\n    var foo = Rancher2.GetCertificate.Invoke(new()\n    {\n        Name = \"\u003cname\u003e\",\n        ProjectId = \"\u003cproject_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Retrieve a rancher2 Project Certificate\n\t\t_, err := rancher2.LookupCertificate(ctx, \u0026rancher2.LookupCertificateArgs{\n\t\t\tName:      \"\u003cname\u003e\",\n\t\t\tProjectId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Retrieve a rancher2 Project Certificate\n        final var foo = Rancher2Functions.getCertificate(GetCertificateArgs.builder()\n            .name(\"\u003cname\u003e\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Retrieve a rancher2 Project Certificate\n  foo:\n    fn::invoke:\n      function: rancher2:getCertificate\n      arguments:\n        name: \u003cname\u003e\n        projectId: \u003cproject_id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Namespaced Certificate\nconst foo = rancher2.getCertificate({\n    name: \"\u003cname\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n    namespaceId: \"\u003cnamespace_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Retrieve a rancher2 Namespaced Certificate\nfoo = rancher2.get_certificate(name=\"\u003cname\u003e\",\n    project_id=\"\u003cproject_id\u003e\",\n    namespace_id=\"\u003cnamespace_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Retrieve a rancher2 Namespaced Certificate\n    var foo = Rancher2.GetCertificate.Invoke(new()\n    {\n        Name = \"\u003cname\u003e\",\n        ProjectId = \"\u003cproject_id\u003e\",\n        NamespaceId = \"\u003cnamespace_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Retrieve a rancher2 Namespaced Certificate\n\t\t_, err := rancher2.LookupCertificate(ctx, \u0026rancher2.LookupCertificateArgs{\n\t\t\tName:        \"\u003cname\u003e\",\n\t\t\tProjectId:   \"\u003cproject_id\u003e\",\n\t\t\tNamespaceId: pulumi.StringRef(\"\u003cnamespace_id\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Retrieve a rancher2 Namespaced Certificate\n        final var foo = Rancher2Functions.getCertificate(GetCertificateArgs.builder()\n            .name(\"\u003cname\u003e\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .namespaceId(\"\u003cnamespace_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Retrieve a rancher2 Namespaced Certificate\n  foo:\n    fn::invoke:\n      function: rancher2:getCertificate\n      arguments:\n        name: \u003cname\u003e\n        projectId: \u003cproject_id\u003e\n        namespaceId: \u003cnamespace_id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificate.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the certificate (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced certificate (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the certificate (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCertificate.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for certificate object (map)\n",
                        "type": "object"
                    },
                    "certs": {
                        "description": "(Computed) Base64 encoded certs (string)\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "(Computed) A certificate description (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for certificate object (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "certs",
                    "description",
                    "labels",
                    "name",
                    "projectId",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getCloudCredential:getCloudCredential": {
            "description": "Use this data source to retrieve information about a Rancher v2 Cloud Credential.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst test = rancher2.getCloudCredential({\n    name: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\ntest = rancher2.get_cloud_credential(name=\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Rancher2.GetCloudCredential.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupCloudCredential(ctx, \u0026rancher2.LookupCloudCredentialArgs{\n\t\t\tName: \"test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetCloudCredentialArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = Rancher2Functions.getCloudCredential(GetCloudCredentialArgs.builder()\n            .name(\"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      function: rancher2:getCloudCredential\n      arguments:\n        name: test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudCredential.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The Cloud Credential name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudCredential.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for the Cloud Credential (map)\n",
                        "type": "object"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for the Cloud Credential (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "labels",
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getCluster:getCluster": {
            "description": "Use this data source to retrieve information about a Rancher v2 cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo_custom = rancher2.getCluster({\n    name: \"foo-custom\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo_custom = rancher2.get_cluster(name=\"foo-custom\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo_custom = Rancher2.GetCluster.Invoke(new()\n    {\n        Name = \"foo-custom\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupCluster(ctx, \u0026rancher2.LookupClusterArgs{\n\t\t\tName: \"foo-custom\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo-custom = Rancher2Functions.getCluster(GetClusterArgs.builder()\n            .name(\"foo-custom\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo-custom:\n    fn::invoke:\n      function: rancher2:getCluster\n      arguments:\n        name: foo-custom\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "defaultPodSecurityAdmissionConfigurationTemplateName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cluster (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "agentEnvVars": {
                        "description": "(Computed) Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "aksConfigV2": {
                        "$ref": "#/types/rancher2:index/getClusterAksConfigV2:getClusterAksConfigV2",
                        "description": "(Optional) The Azure AKS v2 configuration for creating/import \u003cspan pulumi-lang-nodejs=\"`aks`\" pulumi-lang-dotnet=\"`Aks`\" pulumi-lang-go=\"`aks`\" pulumi-lang-python=\"`aks`\" pulumi-lang-yaml=\"`aks`\" pulumi-lang-java=\"`aks`\"\u003e`aks`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for Node Pool object (map)\n",
                        "type": "object"
                    },
                    "caCert": {
                        "description": "(Computed) K8s cluster ca cert (string)\n",
                        "secret": true,
                        "type": "string"
                    },
                    "clusterAuthEndpoint": {
                        "$ref": "#/types/rancher2:index/getClusterClusterAuthEndpoint:getClusterClusterAuthEndpoint",
                        "description": "(Computed) Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)\n"
                    },
                    "clusterRegistrationToken": {
                        "$ref": "#/types/rancher2:index/getClusterClusterRegistrationToken:getClusterClusterRegistrationToken",
                        "description": "(Computed) Cluster Registration Token generated for the cluster (list maxitems:1)\n"
                    },
                    "clusterTemplateAnswers": {
                        "$ref": "#/types/rancher2:index/getClusterClusterTemplateAnswers:getClusterClusterTemplateAnswers",
                        "description": "(Computed) Cluster template answers (list maxitems:1)\n"
                    },
                    "clusterTemplateId": {
                        "description": "(Computed) Cluster template ID (string)\n",
                        "type": "string"
                    },
                    "clusterTemplateQuestions": {
                        "description": "(Computed) Cluster template questions (list)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getClusterClusterTemplateQuestion:getClusterClusterTemplateQuestion"
                        },
                        "type": "array"
                    },
                    "clusterTemplateRevisionId": {
                        "description": "(Computed) Cluster template revision ID (string)\n",
                        "type": "string"
                    },
                    "defaultPodSecurityAdmissionConfigurationTemplateName": {
                        "type": "string"
                    },
                    "defaultProjectId": {
                        "description": "(Computed) Default project ID for the cluster (string)\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "(Computed) The description for Cluster (string)\n",
                        "type": "string"
                    },
                    "driver": {
                        "description": "(Computed) The driver used for the Cluster. \u003cspan pulumi-lang-nodejs=\"`imported`\" pulumi-lang-dotnet=\"`Imported`\" pulumi-lang-go=\"`imported`\" pulumi-lang-python=\"`imported`\" pulumi-lang-yaml=\"`imported`\" pulumi-lang-java=\"`imported`\"\u003e`imported`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`azurekubernetesservice`\" pulumi-lang-dotnet=\"`Azurekubernetesservice`\" pulumi-lang-go=\"`azurekubernetesservice`\" pulumi-lang-python=\"`azurekubernetesservice`\" pulumi-lang-yaml=\"`azurekubernetesservice`\" pulumi-lang-java=\"`azurekubernetesservice`\"\u003e`azurekubernetesservice`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`amazonelasticcontainerservice`\" pulumi-lang-dotnet=\"`Amazonelasticcontainerservice`\" pulumi-lang-go=\"`amazonelasticcontainerservice`\" pulumi-lang-python=\"`amazonelasticcontainerservice`\" pulumi-lang-yaml=\"`amazonelasticcontainerservice`\" pulumi-lang-java=\"`amazonelasticcontainerservice`\"\u003e`amazonelasticcontainerservice`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`googlekubernetesengine`\" pulumi-lang-dotnet=\"`Googlekubernetesengine`\" pulumi-lang-go=\"`googlekubernetesengine`\" pulumi-lang-python=\"`googlekubernetesengine`\" pulumi-lang-yaml=\"`googlekubernetesengine`\" pulumi-lang-java=\"`googlekubernetesengine`\"\u003e`googlekubernetesengine`\u003c/span\u003e and `rancherKubernetesEngine` are supported (string)\n",
                        "type": "string"
                    },
                    "eksConfigV2": {
                        "$ref": "#/types/rancher2:index/getClusterEksConfigV2:getClusterEksConfigV2",
                        "description": "(Computed) The Amazon EKS V2 configuration to create or import \u003cspan pulumi-lang-nodejs=\"`eks`\" pulumi-lang-dotnet=\"`Eks`\" pulumi-lang-go=\"`eks`\" pulumi-lang-python=\"`eks`\" pulumi-lang-yaml=\"`eks`\" pulumi-lang-java=\"`eks`\"\u003e`eks`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e. For Rancher v2.5.x and above (list maxitems:1)\n"
                    },
                    "enableNetworkPolicy": {
                        "description": "(Computed) Enable project network isolation. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n",
                        "type": "boolean"
                    },
                    "fleetWorkspaceName": {
                        "description": "(Computed) Fleet workspace name (string)\n",
                        "type": "string"
                    },
                    "gkeConfigV2": {
                        "$ref": "#/types/rancher2:index/getClusterGkeConfigV2:getClusterGkeConfigV2",
                        "description": "(Computed) The Google GKE V2 configuration for \u003cspan pulumi-lang-nodejs=\"`gke`\" pulumi-lang-dotnet=\"`Gke`\" pulumi-lang-go=\"`gke`\" pulumi-lang-python=\"`gke`\" pulumi-lang-yaml=\"`gke`\" pulumi-lang-java=\"`gke`\"\u003e`gke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e. For Rancher v2.5.8 and above (list maxitems:1)\n"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "importedConfigs": {
                        "items": {
                            "$ref": "#/types/rancher2:index/getClusterImportedConfig:getClusterImportedConfig"
                        },
                        "type": "array"
                    },
                    "k3sConfig": {
                        "$ref": "#/types/rancher2:index/getClusterK3sConfig:getClusterK3sConfig",
                        "description": "(Computed) The K3S configuration for \u003cspan pulumi-lang-nodejs=\"`k3s`\" pulumi-lang-dotnet=\"`K3s`\" pulumi-lang-go=\"`k3s`\" pulumi-lang-python=\"`k3s`\" pulumi-lang-yaml=\"`k3s`\" pulumi-lang-java=\"`k3s`\"\u003e`k3s`\u003c/span\u003e imported Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "kubeConfig": {
                        "description": "(Computed) Kube Config generated for the cluster (string)\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for Node Pool object (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "okeConfig": {
                        "$ref": "#/types/rancher2:index/getClusterOkeConfig:getClusterOkeConfig",
                        "description": "(Computed) The Oracle OKE configuration for \u003cspan pulumi-lang-nodejs=\"`oke`\" pulumi-lang-dotnet=\"`Oke`\" pulumi-lang-go=\"`oke`\" pulumi-lang-python=\"`oke`\" pulumi-lang-yaml=\"`oke`\" pulumi-lang-java=\"`oke`\"\u003e`oke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "rke2Config": {
                        "$ref": "#/types/rancher2:index/getClusterRke2Config:getClusterRke2Config",
                        "description": "(Computed) The RKE2 configuration for \u003cspan pulumi-lang-nodejs=\"`rke2`\" pulumi-lang-dotnet=\"`Rke2`\" pulumi-lang-go=\"`rke2`\" pulumi-lang-python=\"`rke2`\" pulumi-lang-yaml=\"`rke2`\" pulumi-lang-java=\"`rke2`\"\u003e`rke2`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfig`\" pulumi-lang-dotnet=\"`GkeConfig`\" pulumi-lang-go=\"`gkeConfig`\" pulumi-lang-python=\"`gke_config`\" pulumi-lang-yaml=\"`gkeConfig`\" pulumi-lang-java=\"`gkeConfig`\"\u003e`gke_config`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rkeConfig`\" pulumi-lang-dotnet=\"`RkeConfig`\" pulumi-lang-go=\"`rkeConfig`\" pulumi-lang-python=\"`rke_config`\" pulumi-lang-yaml=\"`rkeConfig`\" pulumi-lang-java=\"`rkeConfig`\"\u003e`rke_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "rkeConfig": {
                        "$ref": "#/types/rancher2:index/getClusterRkeConfig:getClusterRkeConfig",
                        "description": "(Computed) The RKE configuration for \u003cspan pulumi-lang-nodejs=\"`rke`\" pulumi-lang-dotnet=\"`Rke`\" pulumi-lang-go=\"`rke`\" pulumi-lang-python=\"`rke`\" pulumi-lang-yaml=\"`rke`\" pulumi-lang-java=\"`rke`\"\u003e`rke`\u003c/span\u003e Clusters. Conflicts with \u003cspan pulumi-lang-nodejs=\"`aksConfigV2`\" pulumi-lang-dotnet=\"`AksConfigV2`\" pulumi-lang-go=\"`aksConfigV2`\" pulumi-lang-python=\"`aks_config_v2`\" pulumi-lang-yaml=\"`aksConfigV2`\" pulumi-lang-java=\"`aksConfigV2`\"\u003e`aks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`eksConfigV2`\" pulumi-lang-dotnet=\"`EksConfigV2`\" pulumi-lang-go=\"`eksConfigV2`\" pulumi-lang-python=\"`eks_config_v2`\" pulumi-lang-yaml=\"`eksConfigV2`\" pulumi-lang-java=\"`eksConfigV2`\"\u003e`eks_config_v2`\u003c/span\u003e, \u003cspan pulumi-lang-nodejs=\"`gkeConfigV2`\" pulumi-lang-dotnet=\"`GkeConfigV2`\" pulumi-lang-go=\"`gkeConfigV2`\" pulumi-lang-python=\"`gke_config_v2`\" pulumi-lang-yaml=\"`gkeConfigV2`\" pulumi-lang-java=\"`gkeConfigV2`\"\u003e`gke_config_v2`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`k3sConfig`\" pulumi-lang-dotnet=\"`K3sConfig`\" pulumi-lang-go=\"`k3sConfig`\" pulumi-lang-python=\"`k3s_config`\" pulumi-lang-yaml=\"`k3sConfig`\" pulumi-lang-java=\"`k3sConfig`\"\u003e`k3s_config`\u003c/span\u003e (list maxitems:1)\n"
                    },
                    "systemProjectId": {
                        "description": "(Computed) System project ID for the cluster (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "agentEnvVars",
                    "aksConfigV2",
                    "annotations",
                    "caCert",
                    "clusterAuthEndpoint",
                    "clusterRegistrationToken",
                    "clusterTemplateAnswers",
                    "clusterTemplateId",
                    "clusterTemplateQuestions",
                    "clusterTemplateRevisionId",
                    "defaultPodSecurityAdmissionConfigurationTemplateName",
                    "defaultProjectId",
                    "description",
                    "driver",
                    "eksConfigV2",
                    "enableNetworkPolicy",
                    "fleetWorkspaceName",
                    "gkeConfigV2",
                    "importedConfigs",
                    "k3sConfig",
                    "kubeConfig",
                    "labels",
                    "name",
                    "okeConfig",
                    "rke2Config",
                    "rkeConfig",
                    "systemProjectId",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getClusterDriver:getClusterDriver": {
            "description": "Use this data source to retrieve information about a Rancher v2 Cluster Driver resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getClusterDriver({\n    name: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_driver(name=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetClusterDriver.Invoke(new()\n    {\n        Name = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterDriver(ctx, \u0026rancher2.LookupClusterDriverArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetClusterDriverArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getClusterDriver(GetClusterDriverArgs.builder()\n            .name(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getClusterDriver\n      arguments:\n        name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterDriver.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster driver (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterDriver.\n",
                "properties": {
                    "active": {
                        "description": "(Computed) Specify if the cluster driver state (bool)\n",
                        "type": "boolean"
                    },
                    "actualUrl": {
                        "description": "(Computed) Actual url of the cluster driver (string)\n",
                        "type": "string"
                    },
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n",
                        "type": "object"
                    },
                    "builtin": {
                        "description": "(Computed) Specify whether the cluster driver is an internal cluster driver or not (bool)\n",
                        "type": "boolean"
                    },
                    "checksum": {
                        "description": "(Computed) Verify that the downloaded driver matches the expected checksum (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the resource (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uiUrl": {
                        "description": "(Computed) The URL to load for customized Add Clusters screen for this driver (string)\n",
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "whitelistDomains": {
                        "description": "(Computed) Domains to whitelist for the ui (list)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "active",
                    "actualUrl",
                    "annotations",
                    "builtin",
                    "checksum",
                    "labels",
                    "name",
                    "uiUrl",
                    "url",
                    "whitelistDomains",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getClusterRoleTemplateBinding:getClusterRoleTemplateBinding": {
            "description": "Use this data source to retrieve information about a Rancher v2 cluster role template binding.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getClusterRoleTemplateBinding({\n    name: \"foo\",\n    clusterId: \"foo_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_role_template_binding(name=\"foo\",\n    cluster_id=\"foo_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetClusterRoleTemplateBinding.Invoke(new()\n    {\n        Name = \"foo\",\n        ClusterId = \"foo_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterRoleTemplateBinding(ctx, \u0026rancher2.LookupClusterRoleTemplateBindingArgs{\n\t\t\tName:      \"foo\",\n\t\t\tClusterId: \"foo_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetClusterRoleTemplateBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getClusterRoleTemplateBinding(GetClusterRoleTemplateBindingArgs.builder()\n            .name(\"foo\")\n            .clusterId(\"foo_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getClusterRoleTemplateBinding\n      arguments:\n        name: foo\n        clusterId: foo_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterRoleTemplateBinding.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id where bind cluster role template (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cluster role template binding (string)\n"
                    },
                    "roleTemplateId": {
                        "type": "string",
                        "description": "The role template id from create cluster role template binding (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterRoleTemplateBinding.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n",
                        "type": "object"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "groupId": {
                        "description": "(Computed) The group ID to assign cluster role template binding (string)\n",
                        "type": "string"
                    },
                    "groupPrincipalId": {
                        "description": "(Computed) The\u003cspan pulumi-lang-nodejs=\" groupPrincipal \" pulumi-lang-dotnet=\" GroupPrincipal \" pulumi-lang-go=\" groupPrincipal \" pulumi-lang-python=\" group_principal \" pulumi-lang-yaml=\" groupPrincipal \" pulumi-lang-java=\" groupPrincipal \"\u003e group_principal \u003c/span\u003eID to assign cluster role template binding (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the resource (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "roleTemplateId": {
                        "type": "string"
                    },
                    "userId": {
                        "description": "(Computed) The user ID to assign cluster role template binding (string)\n",
                        "type": "string"
                    },
                    "userPrincipalId": {
                        "description": "(Computed) The\u003cspan pulumi-lang-nodejs=\" userPrincipal \" pulumi-lang-dotnet=\" UserPrincipal \" pulumi-lang-go=\" userPrincipal \" pulumi-lang-python=\" user_principal \" pulumi-lang-yaml=\" userPrincipal \" pulumi-lang-java=\" userPrincipal \"\u003e user_principal \u003c/span\u003eID to assign cluster role template binding (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "clusterId",
                    "groupId",
                    "groupPrincipalId",
                    "labels",
                    "name",
                    "roleTemplateId",
                    "userId",
                    "userPrincipalId",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getClusterTemplate:getClusterTemplate": {
            "description": "Use this data source to retrieve information about a Rancher v2 cluster template.\n\nCluster Templates are available from Rancher v2.3.x and above.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getClusterTemplate({\n    name: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_template(name=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetClusterTemplate.Invoke(new()\n    {\n        Name = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterTemplate(ctx, \u0026rancher2.LookupClusterTemplateArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetClusterTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getClusterTemplate(GetClusterTemplateArgs.builder()\n            .name(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getClusterTemplate\n      arguments:\n        name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterTemplate.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for the cluster template (map)\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for the cluster template (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The cluster template name (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterTemplate.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for the cluster template (map)\n",
                        "type": "object"
                    },
                    "defaultRevisionId": {
                        "description": "(Computed) Default cluster template revision ID (string)\n",
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for the cluster template (map)\n",
                        "type": "object"
                    },
                    "members": {
                        "description": "(Computed) Cluster template members (list)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getClusterTemplateMember:getClusterTemplateMember"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "templateRevisions": {
                        "description": "(Computed) Cluster template revisions (list)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getClusterTemplateTemplateRevision:getClusterTemplateTemplateRevision"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "annotations",
                    "defaultRevisionId",
                    "description",
                    "labels",
                    "members",
                    "name",
                    "templateRevisions",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getClusterV2:getClusterV2": {
            "description": "Use this data source to retrieve information about a Rancher v2 cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getClusterV2({\n    name: \"foo\",\n    fleetNamespace: \"fleet-ns\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_cluster_v2(name=\"foo\",\n    fleet_namespace=\"fleet-ns\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetClusterV2.Invoke(new()\n    {\n        Name = \"foo\",\n        FleetNamespace = \"fleet-ns\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupClusterV2(ctx, \u0026rancher2.LookupClusterV2Args{\n\t\t\tName:           \"foo\",\n\t\t\tFleetNamespace: pulumi.StringRef(\"fleet-ns\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetClusterV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getClusterV2(GetClusterV2Args.builder()\n            .name(\"foo\")\n            .fleetNamespace(\"fleet-ns\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getClusterV2\n      arguments:\n        name: foo\n        fleetNamespace: fleet-ns\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getClusterV2.\n",
                "properties": {
                    "fleetNamespace": {
                        "type": "string",
                        "description": "The fleet namespace of the Cluster v2. Default: `\\\"fleet-default\\\"` (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cluster v2 (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusterV2.\n",
                "properties": {
                    "agentEnvVars": {
                        "description": "(Computed) Optional Agent Env Vars for Rancher agent (list)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getClusterV2AgentEnvVar:getClusterV2AgentEnvVar"
                        },
                        "type": "array"
                    },
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "cloudCredentialSecretName": {
                        "description": "(Computed) Cluster V2 cloud credential secret name (string)\n",
                        "type": "string"
                    },
                    "clusterRegistrationToken": {
                        "$ref": "#/types/rancher2:index/getClusterV2ClusterRegistrationToken:getClusterV2ClusterRegistrationToken",
                        "description": "(Computed/Sensitive) Cluster Registration Token generated for the cluster v2 (list maxitems:1)\n",
                        "secret": true
                    },
                    "clusterV1Id": {
                        "description": "(Computed) Cluster v1 id for cluster v2 (string)\n",
                        "type": "string"
                    },
                    "defaultClusterRoleForProjectMembers": {
                        "description": "(Computed) Cluster V2 default cluster role for project members (string)\n",
                        "type": "string"
                    },
                    "defaultPodSecurityAdmissionConfigurationTemplateName": {
                        "description": "(Computed) Cluster V2 default pod security admission configuration template name (string)\n",
                        "type": "string"
                    },
                    "enableNetworkPolicy": {
                        "description": "(Computed) Enable k8s network policy at Cluster V2 (bool)\n",
                        "type": "boolean"
                    },
                    "fleetNamespace": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "kubeConfig": {
                        "description": "(Computed/Sensitive) Kube Config generated for the cluster v2 (string)\n",
                        "secret": true,
                        "type": "string"
                    },
                    "kubernetesVersion": {
                        "description": "(Computed) The kubernetes version of the Cluster v2 (list maxitems:1)\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "description": "(Computed) Cluster v2 k8s resource version (string)\n",
                        "type": "string"
                    },
                    "rkeConfig": {
                        "$ref": "#/types/rancher2:index/getClusterV2RkeConfig:getClusterV2RkeConfig",
                        "description": "(Computed) The RKE configuration for \u003cspan pulumi-lang-nodejs=\"`k3s`\" pulumi-lang-dotnet=\"`K3s`\" pulumi-lang-go=\"`k3s`\" pulumi-lang-python=\"`k3s`\" pulumi-lang-yaml=\"`k3s`\" pulumi-lang-java=\"`k3s`\"\u003e`k3s`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`rke2`\" pulumi-lang-dotnet=\"`Rke2`\" pulumi-lang-go=\"`rke2`\" pulumi-lang-python=\"`rke2`\" pulumi-lang-yaml=\"`rke2`\" pulumi-lang-java=\"`rke2`\"\u003e`rke2`\u003c/span\u003e Clusters v2. (list maxitems:1)\n"
                    }
                },
                "required": [
                    "agentEnvVars",
                    "annotations",
                    "cloudCredentialSecretName",
                    "clusterRegistrationToken",
                    "clusterV1Id",
                    "defaultClusterRoleForProjectMembers",
                    "defaultPodSecurityAdmissionConfigurationTemplateName",
                    "enableNetworkPolicy",
                    "kubeConfig",
                    "kubernetesVersion",
                    "labels",
                    "name",
                    "resourceVersion",
                    "rkeConfig",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getConfigMapV2:getConfigMapV2": {
            "description": "Use this data source to retrieve information about a Rancher2 configMap v2. ConfigMap v2 resource is available at Rancher v2.5.x and above.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getConfigMapV2.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the configMap V2 (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the configMap v2 (string)\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespaces of the configMap v2. Default: \u003cspan pulumi-lang-nodejs=\"`default`\" pulumi-lang-dotnet=\"`Default`\" pulumi-lang-go=\"`default`\" pulumi-lang-python=\"`default`\" pulumi-lang-yaml=\"`default`\" pulumi-lang-java=\"`default`\"\u003e`default`\u003c/span\u003e (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConfigMapV2.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for the configMap v2 (map)\n",
                        "type": "object"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "data": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) The data of the configMap v2 (map)\n",
                        "type": "object"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "immutable": {
                        "description": "(Computed) If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate (bool)\n",
                        "type": "boolean"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for the configMap v2 (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "description": "(Computed) The k8s resource version (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "clusterId",
                    "data",
                    "immutable",
                    "labels",
                    "name",
                    "resourceVersion",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getEtcdBackup:getEtcdBackup": {
            "description": "Use this data source to retrieve information about a Rancher v2 etcd backup.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getEtcdBackup({\n    clusterId: \"\u003cCLUSTER_ID\u003e\",\n    name: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_etcd_backup(cluster_id=\"\u003cCLUSTER_ID\u003e\",\n    name=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetEtcdBackup.Invoke(new()\n    {\n        ClusterId = \"\u003cCLUSTER_ID\u003e\",\n        Name = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupEtcdBackup(ctx, \u0026rancher2.LookupEtcdBackupArgs{\n\t\t\tClusterId: \"\u003cCLUSTER_ID\u003e\",\n\t\t\tName:      \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetEtcdBackupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getEtcdBackup(GetEtcdBackupArgs.builder()\n            .clusterId(\"\u003cCLUSTER_ID\u003e\")\n            .name(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getEtcdBackup\n      arguments:\n        clusterId: \u003cCLUSTER_ID\u003e\n        name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEtcdBackup.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "Cluster ID to config Etcd Backup (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Etcd Backup (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEtcdBackup.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for Etcd Backup object (map)\n",
                        "type": "object"
                    },
                    "backupConfig": {
                        "$ref": "#/types/rancher2:index/getEtcdBackupBackupConfig:getEtcdBackupBackupConfig",
                        "description": "(Computed) Backup config for etcd backup (list maxitems:1)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "filename": {
                        "description": "(Computed) Filename of the Etcd Backup (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for Etcd Backup object (map)\n",
                        "type": "object"
                    },
                    "manual": {
                        "description": "(Computed) Manual execution of the Etcd Backup. Default \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n",
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "description": "(Computed) Description for the Etcd Backup (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "backupConfig",
                    "clusterId",
                    "filename",
                    "labels",
                    "manual",
                    "name",
                    "namespaceId",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getGlobalRole:getGlobalRole": {
            "description": "Use this data source to retrieve information about a Rancher v2 global role resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getGlobalRole({\n    name: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_global_role(name=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetGlobalRole.Invoke(new()\n    {\n        Name = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupGlobalRole(ctx, \u0026rancher2.LookupGlobalRoleArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetGlobalRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getGlobalRole(GetGlobalRoleArgs.builder()\n            .name(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getGlobalRole\n      arguments:\n        name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGlobalRole.\n",
                "properties": {
                    "inheritedClusterRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) Names of role templates whose permissions are granted by this global role in every cluster besides the local cluster (list)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Global Role (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGlobalRole.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for global role object (map)\n",
                        "type": "object"
                    },
                    "builtin": {
                        "description": "(Computed) Builtin global role (bool)\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "(Computed) Global role description (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "inheritedClusterRoles": {
                        "description": "(Optional) Names of role templates whose permissions are granted by this global role in every cluster besides the local cluster (list)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for global role object (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "newUserDefault": {
                        "description": "(Computed) Whether or not this role should be added to new users (bool)\n",
                        "type": "boolean"
                    },
                    "rules": {
                        "description": "(Computed) Global role policy rules (list)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getGlobalRoleRule:getGlobalRoleRule"
                        },
                        "type": "array"
                    },
                    "uuid": {
                        "description": "(Computed) Global role uuid (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "builtin",
                    "description",
                    "labels",
                    "name",
                    "newUserDefault",
                    "rules",
                    "uuid",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getGlobalRoleBinding:getGlobalRoleBinding": {
            "description": "Use this data source to retrieve information about a Rancher v2 global role binding.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getGlobalRoleBinding({\n    name: \"foo\",\n    globalRoleId: \"foo_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_global_role_binding(name=\"foo\",\n    global_role_id=\"foo_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetGlobalRoleBinding.Invoke(new()\n    {\n        Name = \"foo\",\n        GlobalRoleId = \"foo_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupGlobalRoleBinding(ctx, \u0026rancher2.LookupGlobalRoleBindingArgs{\n\t\t\tName:         \"foo\",\n\t\t\tGlobalRoleId: pulumi.StringRef(\"foo_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetGlobalRoleBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getGlobalRoleBinding(GetGlobalRoleBindingArgs.builder()\n            .name(\"foo\")\n            .globalRoleId(\"foo_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getGlobalRoleBinding\n      arguments:\n        name: foo\n        globalRoleId: foo_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGlobalRoleBinding.\n",
                "properties": {
                    "globalRoleId": {
                        "type": "string",
                        "description": "The global role id (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the global role binding (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGlobalRoleBinding.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n",
                        "type": "object"
                    },
                    "globalRoleId": {
                        "type": "string"
                    },
                    "groupPrincipalId": {
                        "description": "(Computed) The group principal ID to assign global role binding. Rancher v2.4.0 or higher is required (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the resource (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "userId": {
                        "description": "(Computed) The user ID to assign global role binding (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "globalRoleId",
                    "groupPrincipalId",
                    "labels",
                    "name",
                    "userId",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getNamespace:getNamespace": {
            "description": "Use this data source to retrieve information about a Rancher v2 namespace.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getNamespace({\n    name: \"foo\",\n    projectId: foo_custom.defaultProjectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_namespace(name=\"foo\",\n    project_id=foo_custom[\"defaultProjectId\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetNamespace.Invoke(new()\n    {\n        Name = \"foo\",\n        ProjectId = foo_custom.DefaultProjectId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupNamespace(ctx, \u0026rancher2.LookupNamespaceArgs{\n\t\t\tName:      \"foo\",\n\t\t\tProjectId: foo_custom.DefaultProjectId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetNamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getNamespace(GetNamespaceArgs.builder()\n            .name(\"foo\")\n            .projectId(foo_custom.defaultProjectId())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getNamespace\n      arguments:\n        name: foo\n        projectId: ${[\"foo-custom\"].defaultProjectId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNamespace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the namespace (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where namespace is assigned (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNamespace.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for Node Pool object (map)\n",
                        "type": "object"
                    },
                    "containerResourceLimit": {
                        "$ref": "#/types/rancher2:index/getNamespaceContainerResourceLimit:getNamespaceContainerResourceLimit",
                        "description": "(Computed) Default containers resource limits on namespace (List maxitem:1)\n"
                    },
                    "description": {
                        "description": "(Computed) A namespace description (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for Node Pool object (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "resourceQuota": {
                        "$ref": "#/types/rancher2:index/getNamespaceResourceQuota:getNamespaceResourceQuota",
                        "description": "(Computed) Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)\n"
                    }
                },
                "required": [
                    "annotations",
                    "containerResourceLimit",
                    "description",
                    "labels",
                    "name",
                    "projectId",
                    "resourceQuota",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getNodeDriver:getNodeDriver": {
            "description": "Use this data source to retrieve information about a Rancher v2 Node Driver resource. \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getNodeDriver({\n    name: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_node_driver(name=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetNodeDriver.Invoke(new()\n    {\n        Name = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupNodeDriver(ctx, \u0026rancher2.LookupNodeDriverArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetNodeDriverArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getNodeDriver(GetNodeDriverArgs.builder()\n            .name(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getNodeDriver\n      arguments:\n        name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeDriver.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the node driver (string)\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to download the machine driver binary for 64-bit Linux (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeDriver.\n",
                "properties": {
                    "active": {
                        "description": "(Computed) Specify if the node driver state (bool)\n",
                        "type": "boolean"
                    },
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n",
                        "type": "object"
                    },
                    "builtin": {
                        "description": "(Computed) Specify wheter the node driver is an internal cluster driver or not (bool)\n",
                        "type": "boolean"
                    },
                    "checksum": {
                        "description": "(Computed) Verify that the downloaded driver matches the expected checksum (string)\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "(Computed) Description of the node driver (string)\n",
                        "type": "string"
                    },
                    "externalId": {
                        "description": "(Computed) External ID (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the resource (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uiUrl": {
                        "description": "(Computed) The URL to load for customized Add Node screen for this driver (string)\n",
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "whitelistDomains": {
                        "description": "(Computed) Domains to whitelist for the ui (list)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "active",
                    "annotations",
                    "builtin",
                    "checksum",
                    "description",
                    "externalId",
                    "labels",
                    "name",
                    "uiUrl",
                    "url",
                    "whitelistDomains",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getNodePool:getNodePool": {
            "description": "Use this data source to retrieve information about a Rancher v2 Node Pool resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getNodePool({\n    clusterId: foo_custom.id,\n    name: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_node_pool(cluster_id=foo_custom[\"id\"],\n    name=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetNodePool.Invoke(new()\n    {\n        ClusterId = foo_custom.Id,\n        Name = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupNodePool(ctx, \u0026rancher2.LookupNodePoolArgs{\n\t\t\tClusterId: foo_custom.Id,\n\t\t\tName:      \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetNodePoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getNodePool(GetNodePoolArgs.builder()\n            .clusterId(foo_custom.id())\n            .name(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getNodePool\n      arguments:\n        clusterId: ${[\"foo-custom\"].id}\n        name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodePool.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The RKE cluster id to use Node Pool (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Pool (string)\n"
                    },
                    "nodeTemplateId": {
                        "type": "string",
                        "description": "The Node Template ID to use for node creation (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodePool.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for Node Pool object (map)\n",
                        "type": "object"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "controlPlane": {
                        "description": "(Computed) RKE control plane role for created nodes (bool)\n",
                        "type": "boolean"
                    },
                    "deleteNotReadyAfterSecs": {
                        "description": "(Computed) Delete not ready node after secs. Default \u003cspan pulumi-lang-nodejs=\"`0`\" pulumi-lang-dotnet=\"`0`\" pulumi-lang-go=\"`0`\" pulumi-lang-python=\"`0`\" pulumi-lang-yaml=\"`0`\" pulumi-lang-java=\"`0`\"\u003e`0`\u003c/span\u003e (int)\n",
                        "type": "integer"
                    },
                    "etcd": {
                        "description": "(Computed) RKE etcd role for created nodes (bool)\n",
                        "type": "boolean"
                    },
                    "hostnamePrefix": {
                        "description": "(Computed) The prefix for created nodes of the Node Pool (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for Node Pool object (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeTaints": {
                        "description": "(Computed) Node taints (List)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getNodePoolNodeTaint:getNodePoolNodeTaint"
                        },
                        "type": "array"
                    },
                    "nodeTemplateId": {
                        "type": "string"
                    },
                    "quantity": {
                        "description": "(Computed) The number of nodes to create on Node Pool (int)\n",
                        "type": "integer"
                    },
                    "worker": {
                        "description": "(Computed) RKE role role for created nodes (bool)\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "annotations",
                    "clusterId",
                    "controlPlane",
                    "deleteNotReadyAfterSecs",
                    "etcd",
                    "hostnamePrefix",
                    "labels",
                    "name",
                    "nodeTaints",
                    "nodeTemplateId",
                    "quantity",
                    "worker",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getNodeTemplate:getNodeTemplate": {
            "description": "Use this data source to retrieve information about a Rancher v2 Node Template resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getNodeTemplate({\n    name: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_node_template(name=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetNodeTemplate.Invoke(new()\n    {\n        Name = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupNodeTemplate(ctx, \u0026rancher2.LookupNodeTemplateArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetNodeTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getNodeTemplate(GetNodeTemplateArgs.builder()\n            .name(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getNodeTemplate\n      arguments:\n        name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNodeTemplate.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Node Template (string)\n"
                    },
                    "useInternalIpAddress": {
                        "type": "boolean",
                        "description": "(Computed) Engine storage driver for the node template (bool)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNodeTemplate.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for Node Template object (map)\n",
                        "type": "object"
                    },
                    "cloudCredentialId": {
                        "description": "(Computed) Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)\n",
                        "type": "string"
                    },
                    "description": {
                        "description": "(Computed) Description for the Node Template (string)\n",
                        "type": "string"
                    },
                    "driver": {
                        "description": "(Computed) The driver of the node template (string)\n",
                        "type": "string"
                    },
                    "engineEnv": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Engine environment for the node template (string)\n",
                        "type": "object"
                    },
                    "engineInsecureRegistries": {
                        "description": "(Computed) Insecure registry for the node template (list)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "engineInstallUrl": {
                        "description": "(Computed) Docker engine install URL for the node template (string)\n",
                        "type": "string"
                    },
                    "engineLabel": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Engine label for the node template (string)\n",
                        "type": "object"
                    },
                    "engineOpt": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Engine options for the node template (map)\n",
                        "type": "object"
                    },
                    "engineRegistryMirrors": {
                        "description": "(Computed) Engine registry mirror for the node template (list)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "engineStorageDriver": {
                        "description": "(Computed) Engine storage driver for the node template (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for Node Template object (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nodeTaints": {
                        "description": "(Computed) Node taints (List)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getNodeTemplateNodeTaint:getNodeTemplateNodeTaint"
                        },
                        "type": "array"
                    },
                    "useInternalIpAddress": {
                        "description": "(Computed) Engine storage driver for the node template (bool)\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "annotations",
                    "cloudCredentialId",
                    "description",
                    "driver",
                    "engineEnv",
                    "engineInsecureRegistries",
                    "engineInstallUrl",
                    "engineLabel",
                    "engineOpt",
                    "engineRegistryMirrors",
                    "engineStorageDriver",
                    "labels",
                    "name",
                    "nodeTaints",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getPodSecurityAdmissionConfigurationTemplate:getPodSecurityAdmissionConfigurationTemplate": {
            "description": "Use this data source to retrieve information about a rancher v2 pod security admission configration template.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getPodSecurityAdmissionConfigurationTemplate({\n    name: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_pod_security_admission_configuration_template(name=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetPodSecurityAdmissionConfigurationTemplate.Invoke(new()\n    {\n        Name = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupPodSecurityAdmissionConfigurationTemplate(ctx, \u0026rancher2.LookupPodSecurityAdmissionConfigurationTemplateArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetPodSecurityAdmissionConfigurationTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getPodSecurityAdmissionConfigurationTemplate(GetPodSecurityAdmissionConfigurationTemplateArgs.builder()\n            .name(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getPodSecurityAdmissionConfigurationTemplate\n      arguments:\n        name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPodSecurityAdmissionConfigurationTemplate.\n",
                "properties": {
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the resource (map)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pod security admission configuration template (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPodSecurityAdmissionConfigurationTemplate.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n",
                        "type": "object"
                    },
                    "defaults": {
                        "$ref": "#/types/rancher2:index/getPodSecurityAdmissionConfigurationTemplateDefaults:getPodSecurityAdmissionConfigurationTemplateDefaults",
                        "description": "(Computed) The default level labels and version labels to be applied when labels for a mode is not set (list maxitems:1)\n"
                    },
                    "description": {
                        "description": "(Computed) The description of the pod security admission configuration template (string)\n",
                        "type": "string"
                    },
                    "exemptions": {
                        "$ref": "#/types/rancher2:index/getPodSecurityAdmissionConfigurationTemplateExemptions:getPodSecurityAdmissionConfigurationTemplateExemptions",
                        "description": "(Computed) The authenticated usernames, runtime class names, and namespaces to exempt (list maxitems:1)\n"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the resource (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "defaults",
                    "description",
                    "exemptions",
                    "labels",
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getPrincipal:getPrincipal": {
            "description": "Use this data source to retrieve information about a Rancher v2 Principal resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getPrincipal({\n    name: \"user@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_principal(name=\"user@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetPrincipal.Invoke(new()\n    {\n        Name = \"user@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.GetPrincipal(ctx, \u0026rancher2.GetPrincipalArgs{\n\t\t\tName: \"user@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetPrincipalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getPrincipal(GetPrincipalArgs.builder()\n            .name(\"user@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getPrincipal\n      arguments:\n        name: user@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPrincipal.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The full name of the principal (string)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the identity (string). Defaults to \u003cspan pulumi-lang-nodejs=\"`user`\" pulumi-lang-dotnet=\"`User`\" pulumi-lang-go=\"`user`\" pulumi-lang-python=\"`user`\" pulumi-lang-yaml=\"`user`\" pulumi-lang-java=\"`user`\"\u003e`user`\u003c/span\u003e. Only \u003cspan pulumi-lang-nodejs=\"`user`\" pulumi-lang-dotnet=\"`User`\" pulumi-lang-go=\"`user`\" pulumi-lang-python=\"`user`\" pulumi-lang-yaml=\"`user`\" pulumi-lang-java=\"`user`\"\u003e`user`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`group`\" pulumi-lang-dotnet=\"`Group`\" pulumi-lang-go=\"`group`\" pulumi-lang-python=\"`group`\" pulumi-lang-yaml=\"`group`\" pulumi-lang-java=\"`group`\"\u003e`group`\u003c/span\u003e values are supported (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrincipal.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getProject:getProject": {
            "description": "## Example Usage\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "ID of the Rancher 2 cluster (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The project name (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the rancher2 project (map)\n",
                        "type": "object"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "containerResourceLimit": {
                        "$ref": "#/types/rancher2:index/getProjectContainerResourceLimit:getProjectContainerResourceLimit",
                        "description": "(Computed) Default containers resource limits on project (List maxitem:1)\n"
                    },
                    "description": {
                        "description": "(Computed) The project's description (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the rancher2 project (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "resourceQuota": {
                        "$ref": "#/types/rancher2:index/getProjectResourceQuota:getProjectResourceQuota",
                        "description": "(Computed) Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)\n"
                    },
                    "uuid": {
                        "description": "(Computed) UUID of the project as stored by Rancher 2 (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "clusterId",
                    "containerResourceLimit",
                    "description",
                    "labels",
                    "name",
                    "resourceQuota",
                    "uuid",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getProjectRoleTemplateBinding:getProjectRoleTemplateBinding": {
            "description": "Use this data source to retrieve information about a Rancher v2 project role template binding.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getProjectRoleTemplateBinding({\n    name: \"foo\",\n    projectId: \"foo_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_project_role_template_binding(name=\"foo\",\n    project_id=\"foo_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetProjectRoleTemplateBinding.Invoke(new()\n    {\n        Name = \"foo\",\n        ProjectId = \"foo_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupProjectRoleTemplateBinding(ctx, \u0026rancher2.LookupProjectRoleTemplateBindingArgs{\n\t\t\tName:      \"foo\",\n\t\t\tProjectId: \"foo_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetProjectRoleTemplateBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getProjectRoleTemplateBinding(GetProjectRoleTemplateBindingArgs.builder()\n            .name(\"foo\")\n            .projectId(\"foo_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getProjectRoleTemplateBinding\n      arguments:\n        name: foo\n        projectId: foo_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectRoleTemplateBinding.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the project role template binding (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where bind project role template (string)\n"
                    },
                    "roleTemplateId": {
                        "type": "string",
                        "description": "The role template id from create project role template binding (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectRoleTemplateBinding.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n",
                        "type": "object"
                    },
                    "groupId": {
                        "description": "(Computed) The group ID to assign project role template binding (string)\n",
                        "type": "string"
                    },
                    "groupPrincipalId": {
                        "description": "(Computed) The\u003cspan pulumi-lang-nodejs=\" groupPrincipal \" pulumi-lang-dotnet=\" GroupPrincipal \" pulumi-lang-go=\" groupPrincipal \" pulumi-lang-python=\" group_principal \" pulumi-lang-yaml=\" groupPrincipal \" pulumi-lang-java=\" groupPrincipal \"\u003e group_principal \u003c/span\u003eID to assign project role template binding (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the resource (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "roleTemplateId": {
                        "type": "string"
                    },
                    "userId": {
                        "description": "(Computed) The user ID to assign project role template binding (string)\n",
                        "type": "string"
                    },
                    "userPrincipalId": {
                        "description": "(Computed) The\u003cspan pulumi-lang-nodejs=\" userPrincipal \" pulumi-lang-dotnet=\" UserPrincipal \" pulumi-lang-go=\" userPrincipal \" pulumi-lang-python=\" user_principal \" pulumi-lang-yaml=\" userPrincipal \" pulumi-lang-java=\" userPrincipal \"\u003e user_principal \u003c/span\u003eID to assign project role template binding (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "groupId",
                    "groupPrincipalId",
                    "labels",
                    "name",
                    "projectId",
                    "roleTemplateId",
                    "userId",
                    "userPrincipalId",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getRegistry:getRegistry": {
            "description": "Use this data source to retrieve information about a Rancher v2 docker registry.\n\nDepending of the availability, there are 2 types of Rancher v2 docker registries:\n- Project registry: Available to all namespaces in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n- Namespaced registry: Available to just \u003cspan pulumi-lang-nodejs=\"`namespaceId`\" pulumi-lang-dotnet=\"`NamespaceId`\" pulumi-lang-go=\"`namespaceId`\" pulumi-lang-python=\"`namespace_id`\" pulumi-lang-yaml=\"`namespaceId`\" pulumi-lang-java=\"`namespaceId`\"\u003e`namespace_id`\u003c/span\u003e in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Project Registry\nconst foo = rancher2.getRegistry({\n    name: \"\u003cname\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Retrieve a rancher2 Project Registry\nfoo = rancher2.get_registry(name=\"\u003cname\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Retrieve a rancher2 Project Registry\n    var foo = Rancher2.GetRegistry.Invoke(new()\n    {\n        Name = \"\u003cname\u003e\",\n        ProjectId = \"\u003cproject_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Retrieve a rancher2 Project Registry\n\t\t_, err := rancher2.LookupRegistry(ctx, \u0026rancher2.LookupRegistryArgs{\n\t\t\tName:      \"\u003cname\u003e\",\n\t\t\tProjectId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Retrieve a rancher2 Project Registry\n        final var foo = Rancher2Functions.getRegistry(GetRegistryArgs.builder()\n            .name(\"\u003cname\u003e\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Retrieve a rancher2 Project Registry\n  foo:\n    fn::invoke:\n      function: rancher2:getRegistry\n      arguments:\n        name: \u003cname\u003e\n        projectId: \u003cproject_id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Namespaced Registry\nconst foo = rancher2.getRegistry({\n    name: \"\u003cname\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n    namespaceId: \"\u003cnamespace_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Retrieve a rancher2 Namespaced Registry\nfoo = rancher2.get_registry(name=\"\u003cname\u003e\",\n    project_id=\"\u003cproject_id\u003e\",\n    namespace_id=\"\u003cnamespace_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Retrieve a rancher2 Namespaced Registry\n    var foo = Rancher2.GetRegistry.Invoke(new()\n    {\n        Name = \"\u003cname\u003e\",\n        ProjectId = \"\u003cproject_id\u003e\",\n        NamespaceId = \"\u003cnamespace_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Retrieve a rancher2 Namespaced Registry\n\t\t_, err := rancher2.LookupRegistry(ctx, \u0026rancher2.LookupRegistryArgs{\n\t\t\tName:        \"\u003cname\u003e\",\n\t\t\tProjectId:   \"\u003cproject_id\u003e\",\n\t\t\tNamespaceId: pulumi.StringRef(\"\u003cnamespace_id\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Retrieve a rancher2 Namespaced Registry\n        final var foo = Rancher2Functions.getRegistry(GetRegistryArgs.builder()\n            .name(\"\u003cname\u003e\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .namespaceId(\"\u003cnamespace_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Retrieve a rancher2 Namespaced Registry\n  foo:\n    fn::invoke:\n      function: rancher2:getRegistry\n      arguments:\n        name: \u003cname\u003e\n        projectId: \u003cproject_id\u003e\n        namespaceId: \u003cnamespace_id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRegistry.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the registry (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced registry (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the registry (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRegistry.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for Registry object (map)\n",
                        "type": "object"
                    },
                    "description": {
                        "description": "(Computed) A registry description (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for Registry object (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "registries": {
                        "description": "(Computed) Registries data for registry (list)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getRegistryRegistry:getRegistryRegistry"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "annotations",
                    "description",
                    "labels",
                    "name",
                    "projectId",
                    "registries",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getRoleTemplate:getRoleTemplate": {
            "description": "Use this data source to retrieve information about a Rancher v2 role template resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getRoleTemplate({\n    name: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_role_template(name=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetRoleTemplate.Invoke(new()\n    {\n        Name = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupRoleTemplate(ctx, \u0026rancher2.LookupRoleTemplateArgs{\n\t\t\tName: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetRoleTemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getRoleTemplate(GetRoleTemplateArgs.builder()\n            .name(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getRoleTemplate\n      arguments:\n        name: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRoleTemplate.\n",
                "properties": {
                    "context": {
                        "type": "string",
                        "description": "Role template context. \u003cspan pulumi-lang-nodejs=\"`cluster`\" pulumi-lang-dotnet=\"`Cluster`\" pulumi-lang-go=\"`cluster`\" pulumi-lang-python=\"`cluster`\" pulumi-lang-yaml=\"`cluster`\" pulumi-lang-java=\"`cluster`\"\u003e`cluster`\u003c/span\u003e and \u003cspan pulumi-lang-nodejs=\"`project`\" pulumi-lang-dotnet=\"`Project`\" pulumi-lang-go=\"`project`\" pulumi-lang-python=\"`project`\" pulumi-lang-yaml=\"`project`\" pulumi-lang-java=\"`project`\"\u003e`project`\u003c/span\u003e values are supported (string)\n"
                    },
                    "externalRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rancher2:index/getRoleTemplateExternalRule:getRoleTemplateExternalRule"
                        },
                        "description": "(Computed) External rules used for authorization. (list)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Role Template (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRoleTemplate.\n",
                "properties": {
                    "administrative": {
                        "description": "(Computed) Administrative role template (bool)\n",
                        "type": "boolean"
                    },
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for role template object (map)\n",
                        "type": "object"
                    },
                    "builtin": {
                        "description": "(Computed) Builtin role template (string)\n",
                        "type": "boolean"
                    },
                    "context": {
                        "type": "string"
                    },
                    "defaultRole": {
                        "description": "(Computed) Default role template for new created cluster or project (bool)\n",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "(Computed) Role template description (string)\n",
                        "type": "string"
                    },
                    "external": {
                        "description": "(Computed) External role template (bool)\n",
                        "type": "boolean"
                    },
                    "externalRules": {
                        "description": "(Computed) External rules used for authorization. (list)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getRoleTemplateExternalRule:getRoleTemplateExternalRule"
                        },
                        "type": "array"
                    },
                    "hidden": {
                        "description": "(Computed) Hidden role template (bool)\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for role template object (map)\n",
                        "type": "object"
                    },
                    "locked": {
                        "description": "(Computed) Locked role template (bool)\n",
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "roleTemplateIds": {
                        "description": "(Computed) Inherit role template IDs (list)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "rules": {
                        "description": "(Computed) Role template policy rules (list)\n",
                        "items": {
                            "$ref": "#/types/rancher2:index/getRoleTemplateRule:getRoleTemplateRule"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "administrative",
                    "annotations",
                    "builtin",
                    "context",
                    "defaultRole",
                    "description",
                    "external",
                    "externalRules",
                    "hidden",
                    "labels",
                    "locked",
                    "name",
                    "roleTemplateIds",
                    "rules",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getSecret:getSecret": {
            "description": "Use this data source to retrieve information about a Rancher v2 secret.\n\nDepending of the availability, there are 2 types of Rancher v2 secrets:\n- Project secret: Available to all namespaces in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n- Namespaced secret: Available to just \u003cspan pulumi-lang-nodejs=\"`namespaceId`\" pulumi-lang-dotnet=\"`NamespaceId`\" pulumi-lang-go=\"`namespaceId`\" pulumi-lang-python=\"`namespace_id`\" pulumi-lang-yaml=\"`namespaceId`\" pulumi-lang-java=\"`namespaceId`\"\u003e`namespace_id`\u003c/span\u003e in the \u003cspan pulumi-lang-nodejs=\"`projectId`\" pulumi-lang-dotnet=\"`ProjectId`\" pulumi-lang-go=\"`projectId`\" pulumi-lang-python=\"`project_id`\" pulumi-lang-yaml=\"`projectId`\" pulumi-lang-java=\"`projectId`\"\u003e`project_id`\u003c/span\u003e\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Project Secret\nconst foo = rancher2.getSecret({\n    name: \"\u003cname\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Retrieve a rancher2 Project Secret\nfoo = rancher2.get_secret(name=\"\u003cname\u003e\",\n    project_id=\"\u003cproject_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Retrieve a rancher2 Project Secret\n    var foo = Rancher2.GetSecret.Invoke(new()\n    {\n        Name = \"\u003cname\u003e\",\n        ProjectId = \"\u003cproject_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Retrieve a rancher2 Project Secret\n\t\t_, err := rancher2.LookupSecret(ctx, \u0026rancher2.LookupSecretArgs{\n\t\t\tName:      \"\u003cname\u003e\",\n\t\t\tProjectId: \"\u003cproject_id\u003e\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Retrieve a rancher2 Project Secret\n        final var foo = Rancher2Functions.getSecret(GetSecretArgs.builder()\n            .name(\"\u003cname\u003e\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Retrieve a rancher2 Project Secret\n  foo:\n    fn::invoke:\n      function: rancher2:getSecret\n      arguments:\n        name: \u003cname\u003e\n        projectId: \u003cproject_id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\n// Retrieve a rancher2 Namespaced Secret\nconst foo = rancher2.getSecret({\n    name: \"\u003cname\u003e\",\n    projectId: \"\u003cproject_id\u003e\",\n    namespaceId: \"\u003cnamespace_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\n# Retrieve a rancher2 Namespaced Secret\nfoo = rancher2.get_secret(name=\"\u003cname\u003e\",\n    project_id=\"\u003cproject_id\u003e\",\n    namespace_id=\"\u003cnamespace_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Retrieve a rancher2 Namespaced Secret\n    var foo = Rancher2.GetSecret.Invoke(new()\n    {\n        Name = \"\u003cname\u003e\",\n        ProjectId = \"\u003cproject_id\u003e\",\n        NamespaceId = \"\u003cnamespace_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Retrieve a rancher2 Namespaced Secret\n\t\t_, err := rancher2.LookupSecret(ctx, \u0026rancher2.LookupSecretArgs{\n\t\t\tName:        \"\u003cname\u003e\",\n\t\t\tProjectId:   \"\u003cproject_id\u003e\",\n\t\t\tNamespaceId: pulumi.StringRef(\"\u003cnamespace_id\u003e\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Retrieve a rancher2 Namespaced Secret\n        final var foo = Rancher2Functions.getSecret(GetSecretArgs.builder()\n            .name(\"\u003cname\u003e\")\n            .projectId(\"\u003cproject_id\u003e\")\n            .namespaceId(\"\u003cnamespace_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  # Retrieve a rancher2 Namespaced Secret\n  foo:\n    fn::invoke:\n      function: rancher2:getSecret\n      arguments:\n        name: \u003cname\u003e\n        projectId: \u003cproject_id\u003e\n        namespaceId: \u003cnamespace_id\u003e\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecret.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the secret (string)\n"
                    },
                    "namespaceId": {
                        "type": "string",
                        "description": "The namespace id where to assign the namespaced secret (string)\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The project id where to assign the secret (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecret.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for secret object (map)\n",
                        "type": "object"
                    },
                    "data": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Secret key/value data. Base64 encoding required for values (map)\n",
                        "type": "object"
                    },
                    "description": {
                        "description": "(Computed) A secret description (string)\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for secret object (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespaceId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "data",
                    "description",
                    "labels",
                    "name",
                    "projectId",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getSecretV2:getSecretV2": {
            "description": "Use this data source to retrieve information about a Rancher2 secret v2. Secret v2 resource is available at Rancher v2.5.x and above.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecretV2.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the secret V2 (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret v2 (string)\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "The namespaces of the secret v2. Default: \u003cspan pulumi-lang-nodejs=\"`default`\" pulumi-lang-dotnet=\"`Default`\" pulumi-lang-go=\"`default`\" pulumi-lang-python=\"`default`\" pulumi-lang-yaml=\"`default`\" pulumi-lang-java=\"`default`\"\u003e`default`\u003c/span\u003e (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecretV2.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for the secret v2 (map)\n",
                        "type": "object"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "data": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed/Sensitive) The data of the secret v2 (map)\n",
                        "type": "object"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "immutable": {
                        "description": "(Computed) If set to true, any secret update will remove and recreate the secret. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate (bool)\n",
                        "type": "boolean"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for the secret v2 (map)\n",
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namespace": {
                        "type": "string"
                    },
                    "resourceVersion": {
                        "description": "(Computed) The k8s resource version (string)\n",
                        "type": "string"
                    },
                    "type": {
                        "description": "(Computed) The type of the k8s secret, used to facilitate programmatic handling of secret data, [More info](https://github.com/kubernetes/api/blob/release-1.20/core/v1/types.go#L5772) about k8s secret types and expected format (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "clusterId",
                    "data",
                    "immutable",
                    "labels",
                    "name",
                    "resourceVersion",
                    "type",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getSetting:getSetting": {
            "description": "Use this data source to retrieve information about a Rancher v2 setting.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst server_image = rancher2.getSetting({\n    name: \"server-image\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nserver_image = rancher2.get_setting(name=\"server-image\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var server_image = Rancher2.GetSetting.Invoke(new()\n    {\n        Name = \"server-image\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupSetting(ctx, \u0026rancher2.LookupSettingArgs{\n\t\t\tName: \"server-image\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var server-image = Rancher2Functions.getSetting(GetSettingArgs.builder()\n            .name(\"server-image\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  server-image:\n    fn::invoke:\n      function: rancher2:getSetting\n      arguments:\n        name: server-image\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSetting.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The setting name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSetting.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "description": "the settting's value.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "value",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getStorageClassV2:getStorageClassV2": {
            "description": "Use this data source to retrieve information about a Rancher2 Storage Class v2. Storage Class v2 resource is available at Rancher v2.5.x and above.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStorageClassV2.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster id of the storageClass V2 (string)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the storageClass v2 (string)\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStorageClassV2.\n",
                "properties": {
                    "allowVolumeExpansion": {
                        "description": "(Computed) Is the provisioner of the storageClass v2 allowing volume expansion? (bool)\n",
                        "type": "boolean"
                    },
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations for the storageClass v2 (map)\n",
                        "type": "object"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "k8sProvisioner": {
                        "description": "(Computed) The provisioner of the storageClass v2 (string)\n",
                        "type": "string"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels for the storageClass v2 (map)\n",
                        "type": "object"
                    },
                    "mountOptions": {
                        "description": "(Computed) The mount options for storageClass v2 (list)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parameters": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) The parameters for storageClass v2 (string)\n",
                        "type": "object"
                    },
                    "reclaimPolicy": {
                        "description": "(Computed) The reclaim policy for storageClass v2 (string)\n",
                        "type": "string"
                    },
                    "resourceVersion": {
                        "description": "(Computed) The k8s resource version (string)\n",
                        "type": "string"
                    },
                    "volumeBindingMode": {
                        "description": "(Computed) The volume binding mode for storageClass v2 (string)\n",
                        "type": "string"
                    }
                },
                "required": [
                    "allowVolumeExpansion",
                    "annotations",
                    "clusterId",
                    "k8sProvisioner",
                    "labels",
                    "mountOptions",
                    "name",
                    "parameters",
                    "reclaimPolicy",
                    "resourceVersion",
                    "volumeBindingMode",
                    "id"
                ],
                "type": "object"
            }
        },
        "rancher2:index/getUser:getUser": {
            "description": "Use this data source to retrieve information about a Rancher v2 user\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rancher2 from \"@pulumi/rancher2\";\n\nconst foo = rancher2.getUser({\n    username: \"foo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rancher2 as rancher2\n\nfoo = rancher2.get_user(username=\"foo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rancher2 = Pulumi.Rancher2;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Rancher2.GetUser.Invoke(new()\n    {\n        Username = \"foo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rancher2/sdk/v10/go/rancher2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rancher2.LookupUser(ctx, \u0026rancher2.LookupUserArgs{\n\t\t\tUsername: pulumi.StringRef(\"foo\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rancher2.Rancher2Functions;\nimport com.pulumi.rancher2.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Rancher2Functions.getUser(GetUserArgs.builder()\n            .username(\"foo\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      function: rancher2:getUser\n      arguments:\n        username: foo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "isExternal": {
                        "type": "boolean",
                        "description": "Set is the user if the user is external. Default: \u003cspan pulumi-lang-nodejs=\"`false`\" pulumi-lang-dotnet=\"`False`\" pulumi-lang-go=\"`false`\" pulumi-lang-python=\"`false`\" pulumi-lang-yaml=\"`false`\" pulumi-lang-java=\"`false`\"\u003e`false`\u003c/span\u003e (bool)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user (string)\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the user (string)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "annotations": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Annotations of the resource (map)\n",
                        "type": "object"
                    },
                    "enabled": {
                        "description": "(Computed) The user is enabled (bool)\n",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.",
                        "type": "string"
                    },
                    "isExternal": {
                        "type": "boolean"
                    },
                    "labels": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) Labels of the resource (map)\n",
                        "type": "object"
                    },
                    "mustChangePassword": {
                        "description": "(Computed) The user must change password at first login (bool)\n",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "(Computed) The user common name (string)\n",
                        "type": "string"
                    },
                    "principalIds": {
                        "description": "(Computed) The user principal IDs (list)\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "required": [
                    "annotations",
                    "enabled",
                    "labels",
                    "mustChangePassword",
                    "name",
                    "principalIds",
                    "username",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}