// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs Empty = new ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs();

    /**
     * if `delete_empty_dir_data` is set to true, continue draining even if there are pods using emptyDir (local storage).
     * 
     */
    @Import(name="deleteEmptyDirData")
    private @Nullable Output<Boolean> deleteEmptyDirData;

    /**
     * @return if `delete_empty_dir_data` is set to true, continue draining even if there are pods using emptyDir (local storage).
     * 
     */
    public Optional<Output<Boolean>> deleteEmptyDirData() {
        return Optional.ofNullable(this.deleteEmptyDirData);
    }

    /**
     * If `disable_eviction` is set to true, force drain to use delete rather than evict.
     * 
     */
    @Import(name="disableEviction")
    private @Nullable Output<Boolean> disableEviction;

    /**
     * @return If `disable_eviction` is set to true, force drain to use delete rather than evict.
     * 
     */
    public Optional<Output<Boolean>> disableEviction() {
        return Optional.ofNullable(this.disableEviction);
    }

    /**
     * If `enabled` is set to true, nodes will be drained before upgrade.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return If `enabled` is set to true, nodes will be drained before upgrade.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * If `force` is set to true, drain nodes even if there are standalone pods that are not managed by a ReplicationController, Job, or DaemonSet. Drain will not proceed without `force` set to true if there are such pods.
     * 
     */
    @Import(name="force")
    private @Nullable Output<Boolean> force;

    /**
     * @return If `force` is set to true, drain nodes even if there are standalone pods that are not managed by a ReplicationController, Job, or DaemonSet. Drain will not proceed without `force` set to true if there are such pods.
     * 
     */
    public Optional<Output<Boolean>> force() {
        return Optional.ofNullable(this.force);
    }

    /**
     * Time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
     * 
     */
    @Import(name="gracePeriod")
    private @Nullable Output<Integer> gracePeriod;

    /**
     * @return Time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
     * 
     */
    public Optional<Output<Integer>> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }

    /**
     * If `ignore_daemon_sets` is set to false, drain will not proceed if there are DaemonSet-managed pods.
     * 
     */
    @Import(name="ignoreDaemonSets")
    private @Nullable Output<Boolean> ignoreDaemonSets;

    /**
     * @return If `ignore_daemon_sets` is set to false, drain will not proceed if there are DaemonSet-managed pods.
     * 
     */
    public Optional<Output<Boolean>> ignoreDaemonSets() {
        return Optional.ofNullable(this.ignoreDaemonSets);
    }

    /**
     * If `ignore_errors` is set to true,  errors that occurred between drain nodes in group are ignored.
     * 
     */
    @Import(name="ignoreErrors")
    private @Nullable Output<Boolean> ignoreErrors;

    /**
     * @return If `ignore_errors` is set to true,  errors that occurred between drain nodes in group are ignored.
     * 
     */
    public Optional<Output<Boolean>> ignoreErrors() {
        return Optional.ofNullable(this.ignoreErrors);
    }

    /**
     * Skip waiting for the pods that have a DeletionTimeStamp &gt; N seconds to be deleted. Seconds must be greater than 0 to skip. Such pods will be force deleted.
     * 
     */
    @Import(name="skipWaitForDeleteTimeoutSeconds")
    private @Nullable Output<Integer> skipWaitForDeleteTimeoutSeconds;

    /**
     * @return Skip waiting for the pods that have a DeletionTimeStamp &gt; N seconds to be deleted. Seconds must be greater than 0 to skip. Such pods will be force deleted.
     * 
     */
    public Optional<Output<Integer>> skipWaitForDeleteTimeoutSeconds() {
        return Optional.ofNullable(this.skipWaitForDeleteTimeoutSeconds);
    }

    /**
     * Time to wait (in seconds) before giving up for one try.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return Time to wait (in seconds) before giving up for one try.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs() {}

    private ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs(ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs $) {
        this.deleteEmptyDirData = $.deleteEmptyDirData;
        this.disableEviction = $.disableEviction;
        this.enabled = $.enabled;
        this.force = $.force;
        this.gracePeriod = $.gracePeriod;
        this.ignoreDaemonSets = $.ignoreDaemonSets;
        this.ignoreErrors = $.ignoreErrors;
        this.skipWaitForDeleteTimeoutSeconds = $.skipWaitForDeleteTimeoutSeconds;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs $;

        public Builder() {
            $ = new ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs();
        }

        public Builder(ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs defaults) {
            $ = new ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteEmptyDirData if `delete_empty_dir_data` is set to true, continue draining even if there are pods using emptyDir (local storage).
         * 
         * @return builder
         * 
         */
        public Builder deleteEmptyDirData(@Nullable Output<Boolean> deleteEmptyDirData) {
            $.deleteEmptyDirData = deleteEmptyDirData;
            return this;
        }

        /**
         * @param deleteEmptyDirData if `delete_empty_dir_data` is set to true, continue draining even if there are pods using emptyDir (local storage).
         * 
         * @return builder
         * 
         */
        public Builder deleteEmptyDirData(Boolean deleteEmptyDirData) {
            return deleteEmptyDirData(Output.of(deleteEmptyDirData));
        }

        /**
         * @param disableEviction If `disable_eviction` is set to true, force drain to use delete rather than evict.
         * 
         * @return builder
         * 
         */
        public Builder disableEviction(@Nullable Output<Boolean> disableEviction) {
            $.disableEviction = disableEviction;
            return this;
        }

        /**
         * @param disableEviction If `disable_eviction` is set to true, force drain to use delete rather than evict.
         * 
         * @return builder
         * 
         */
        public Builder disableEviction(Boolean disableEviction) {
            return disableEviction(Output.of(disableEviction));
        }

        /**
         * @param enabled If `enabled` is set to true, nodes will be drained before upgrade.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled If `enabled` is set to true, nodes will be drained before upgrade.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param force If `force` is set to true, drain nodes even if there are standalone pods that are not managed by a ReplicationController, Job, or DaemonSet. Drain will not proceed without `force` set to true if there are such pods.
         * 
         * @return builder
         * 
         */
        public Builder force(@Nullable Output<Boolean> force) {
            $.force = force;
            return this;
        }

        /**
         * @param force If `force` is set to true, drain nodes even if there are standalone pods that are not managed by a ReplicationController, Job, or DaemonSet. Drain will not proceed without `force` set to true if there are such pods.
         * 
         * @return builder
         * 
         */
        public Builder force(Boolean force) {
            return force(Output.of(force));
        }

        /**
         * @param gracePeriod Time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(@Nullable Output<Integer> gracePeriod) {
            $.gracePeriod = gracePeriod;
            return this;
        }

        /**
         * @param gracePeriod Time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
         * 
         * @return builder
         * 
         */
        public Builder gracePeriod(Integer gracePeriod) {
            return gracePeriod(Output.of(gracePeriod));
        }

        /**
         * @param ignoreDaemonSets If `ignore_daemon_sets` is set to false, drain will not proceed if there are DaemonSet-managed pods.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDaemonSets(@Nullable Output<Boolean> ignoreDaemonSets) {
            $.ignoreDaemonSets = ignoreDaemonSets;
            return this;
        }

        /**
         * @param ignoreDaemonSets If `ignore_daemon_sets` is set to false, drain will not proceed if there are DaemonSet-managed pods.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDaemonSets(Boolean ignoreDaemonSets) {
            return ignoreDaemonSets(Output.of(ignoreDaemonSets));
        }

        /**
         * @param ignoreErrors If `ignore_errors` is set to true,  errors that occurred between drain nodes in group are ignored.
         * 
         * @return builder
         * 
         */
        public Builder ignoreErrors(@Nullable Output<Boolean> ignoreErrors) {
            $.ignoreErrors = ignoreErrors;
            return this;
        }

        /**
         * @param ignoreErrors If `ignore_errors` is set to true,  errors that occurred between drain nodes in group are ignored.
         * 
         * @return builder
         * 
         */
        public Builder ignoreErrors(Boolean ignoreErrors) {
            return ignoreErrors(Output.of(ignoreErrors));
        }

        /**
         * @param skipWaitForDeleteTimeoutSeconds Skip waiting for the pods that have a DeletionTimeStamp &gt; N seconds to be deleted. Seconds must be greater than 0 to skip. Such pods will be force deleted.
         * 
         * @return builder
         * 
         */
        public Builder skipWaitForDeleteTimeoutSeconds(@Nullable Output<Integer> skipWaitForDeleteTimeoutSeconds) {
            $.skipWaitForDeleteTimeoutSeconds = skipWaitForDeleteTimeoutSeconds;
            return this;
        }

        /**
         * @param skipWaitForDeleteTimeoutSeconds Skip waiting for the pods that have a DeletionTimeStamp &gt; N seconds to be deleted. Seconds must be greater than 0 to skip. Such pods will be force deleted.
         * 
         * @return builder
         * 
         */
        public Builder skipWaitForDeleteTimeoutSeconds(Integer skipWaitForDeleteTimeoutSeconds) {
            return skipWaitForDeleteTimeoutSeconds(Output.of(skipWaitForDeleteTimeoutSeconds));
        }

        /**
         * @param timeout Time to wait (in seconds) before giving up for one try.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Time to wait (in seconds) before giving up for one try.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs build() {
            return $;
        }
    }

}
