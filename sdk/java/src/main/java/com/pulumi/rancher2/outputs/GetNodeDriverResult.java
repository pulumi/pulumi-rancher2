// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNodeDriverResult {
    /**
     * @return (Computed) Specify if the node driver state (bool)
     * 
     */
    private Boolean active;
    /**
     * @return (Computed) Annotations of the resource (map)
     * 
     */
    private Map<String,Object> annotations;
    /**
     * @return (Computed) Specify wheter the node driver is an internal cluster driver or not (bool)
     * 
     */
    private Boolean builtin;
    /**
     * @return (Computed) Verify that the downloaded driver matches the expected checksum (string)
     * 
     */
    private String checksum;
    /**
     * @return (Computed) Description of the node driver (string)
     * 
     */
    private String description;
    /**
     * @return (Computed) External ID (string)
     * 
     */
    private String externalId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) Labels of the resource (map)
     * 
     */
    private Map<String,Object> labels;
    private String name;
    /**
     * @return (Computed) The URL to load for customized Add Node screen for this driver (string)
     * 
     */
    private String uiUrl;
    private String url;
    /**
     * @return (Computed) Domains to whitelist for the ui (list)
     * 
     */
    private List<String> whitelistDomains;

    private GetNodeDriverResult() {}
    /**
     * @return (Computed) Specify if the node driver state (bool)
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return (Computed) Annotations of the resource (map)
     * 
     */
    public Map<String,Object> annotations() {
        return this.annotations;
    }
    /**
     * @return (Computed) Specify wheter the node driver is an internal cluster driver or not (bool)
     * 
     */
    public Boolean builtin() {
        return this.builtin;
    }
    /**
     * @return (Computed) Verify that the downloaded driver matches the expected checksum (string)
     * 
     */
    public String checksum() {
        return this.checksum;
    }
    /**
     * @return (Computed) Description of the node driver (string)
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return (Computed) External ID (string)
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) Labels of the resource (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) The URL to load for customized Add Node screen for this driver (string)
     * 
     */
    public String uiUrl() {
        return this.uiUrl;
    }
    public String url() {
        return this.url;
    }
    /**
     * @return (Computed) Domains to whitelist for the ui (list)
     * 
     */
    public List<String> whitelistDomains() {
        return this.whitelistDomains;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodeDriverResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private Map<String,Object> annotations;
        private Boolean builtin;
        private String checksum;
        private String description;
        private String externalId;
        private String id;
        private Map<String,Object> labels;
        private String name;
        private String uiUrl;
        private String url;
        private List<String> whitelistDomains;
        public Builder() {}
        public Builder(GetNodeDriverResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.annotations = defaults.annotations;
    	      this.builtin = defaults.builtin;
    	      this.checksum = defaults.checksum;
    	      this.description = defaults.description;
    	      this.externalId = defaults.externalId;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.uiUrl = defaults.uiUrl;
    	      this.url = defaults.url;
    	      this.whitelistDomains = defaults.whitelistDomains;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }
        @CustomType.Setter
        public Builder annotations(Map<String,Object> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        @CustomType.Setter
        public Builder builtin(Boolean builtin) {
            this.builtin = Objects.requireNonNull(builtin);
            return this;
        }
        @CustomType.Setter
        public Builder checksum(String checksum) {
            this.checksum = Objects.requireNonNull(checksum);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            this.externalId = Objects.requireNonNull(externalId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder uiUrl(String uiUrl) {
            this.uiUrl = Objects.requireNonNull(uiUrl);
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        @CustomType.Setter
        public Builder whitelistDomains(List<String> whitelistDomains) {
            this.whitelistDomains = Objects.requireNonNull(whitelistDomains);
            return this;
        }
        public Builder whitelistDomains(String... whitelistDomains) {
            return whitelistDomains(List.of(whitelistDomains));
        }
        public GetNodeDriverResult build() {
            final var o = new GetNodeDriverResult();
            o.active = active;
            o.annotations = annotations;
            o.builtin = builtin;
            o.checksum = checksum;
            o.description = description;
            o.externalId = externalId;
            o.id = id;
            o.labels = labels;
            o.name = name;
            o.uiUrl = uiUrl;
            o.url = url;
            o.whitelistDomains = whitelistDomains;
            return o;
        }
    }
}
