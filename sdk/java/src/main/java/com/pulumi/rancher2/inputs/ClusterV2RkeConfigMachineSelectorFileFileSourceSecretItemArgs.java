// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs Empty = new ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs();

    /**
     * If true, the file is ignored when determining whether the node should be drained before updating the node plan.
     * 
     */
    @Import(name="dynamic")
    private @Nullable Output<Boolean> dynamic;

    /**
     * @return If true, the file is ignored when determining whether the node should be drained before updating the node plan.
     * 
     */
    public Optional<Output<Boolean>> dynamic() {
        return Optional.ofNullable(this.dynamic);
    }

    /**
     * Hash is the base64 encoded value of the SHA256 checksum of the file&#39;s content. If specified, it is used to validate the integrity of the file content.
     * 
     */
    @Import(name="hash")
    private @Nullable Output<String> hash;

    /**
     * @return Hash is the base64 encoded value of the SHA256 checksum of the file&#39;s content. If specified, it is used to validate the integrity of the file content.
     * 
     */
    public Optional<Output<String>> hash() {
        return Optional.ofNullable(this.hash);
    }

    /**
     * Key is the name of the key of the item to retrieve.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return Key is the name of the key of the item to retrieve.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * Path is the absolute path to put the file in the target node.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return Path is the absolute path to put the file in the target node.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * Permissions is the numeric representation of the file permission. It takes precedence over the default permissions at the outer level.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<String> permissions;

    /**
     * @return Permissions is the numeric representation of the file permission. It takes precedence over the default permissions at the outer level.
     * 
     */
    public Optional<Output<String>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    private ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs() {}

    private ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs(ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs $) {
        this.dynamic = $.dynamic;
        this.hash = $.hash;
        this.key = $.key;
        this.path = $.path;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs $;

        public Builder() {
            $ = new ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs();
        }

        public Builder(ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs defaults) {
            $ = new ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dynamic If true, the file is ignored when determining whether the node should be drained before updating the node plan.
         * 
         * @return builder
         * 
         */
        public Builder dynamic(@Nullable Output<Boolean> dynamic) {
            $.dynamic = dynamic;
            return this;
        }

        /**
         * @param dynamic If true, the file is ignored when determining whether the node should be drained before updating the node plan.
         * 
         * @return builder
         * 
         */
        public Builder dynamic(Boolean dynamic) {
            return dynamic(Output.of(dynamic));
        }

        /**
         * @param hash Hash is the base64 encoded value of the SHA256 checksum of the file&#39;s content. If specified, it is used to validate the integrity of the file content.
         * 
         * @return builder
         * 
         */
        public Builder hash(@Nullable Output<String> hash) {
            $.hash = hash;
            return this;
        }

        /**
         * @param hash Hash is the base64 encoded value of the SHA256 checksum of the file&#39;s content. If specified, it is used to validate the integrity of the file content.
         * 
         * @return builder
         * 
         */
        public Builder hash(String hash) {
            return hash(Output.of(hash));
        }

        /**
         * @param key Key is the name of the key of the item to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Key is the name of the key of the item to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param path Path is the absolute path to put the file in the target node.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path is the absolute path to put the file in the target node.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param permissions Permissions is the numeric representation of the file permission. It takes precedence over the default permissions at the outer level.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable Output<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions Permissions is the numeric representation of the file permission. It takes precedence over the default permissions at the outer level.
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            return permissions(Output.of(permissions));
        }

        public ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs build() {
            if ($.key == null) {
                throw new MissingRequiredPropertyException("ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs", "key");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("ClusterV2RkeConfigMachineSelectorFileFileSourceSecretItemArgs", "path");
            }
            return $;
        }
    }

}
