// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterEksConfig {
    private String accessKey;
    private @Nullable String ami;
    private @Nullable Boolean associateWorkerNodePublicIp;
    private @Nullable Integer desiredNodes;
    private @Nullable Boolean ebsEncryption;
    private @Nullable String instanceType;
    private @Nullable String keyPairName;
    private String kubernetesVersion;
    private @Nullable Integer maximumNodes;
    private @Nullable Integer minimumNodes;
    private @Nullable Integer nodeVolumeSize;
    private @Nullable String region;
    private String secretKey;
    private @Nullable List<String> securityGroups;
    private @Nullable String serviceRole;
    private @Nullable String sessionToken;
    private @Nullable List<String> subnets;
    private String userData;
    private @Nullable String virtualNetwork;

    private GetClusterEksConfig() {}
    public String accessKey() {
        return this.accessKey;
    }
    public Optional<String> ami() {
        return Optional.ofNullable(this.ami);
    }
    public Optional<Boolean> associateWorkerNodePublicIp() {
        return Optional.ofNullable(this.associateWorkerNodePublicIp);
    }
    public Optional<Integer> desiredNodes() {
        return Optional.ofNullable(this.desiredNodes);
    }
    public Optional<Boolean> ebsEncryption() {
        return Optional.ofNullable(this.ebsEncryption);
    }
    public Optional<String> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }
    public Optional<String> keyPairName() {
        return Optional.ofNullable(this.keyPairName);
    }
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    public Optional<Integer> maximumNodes() {
        return Optional.ofNullable(this.maximumNodes);
    }
    public Optional<Integer> minimumNodes() {
        return Optional.ofNullable(this.minimumNodes);
    }
    public Optional<Integer> nodeVolumeSize() {
        return Optional.ofNullable(this.nodeVolumeSize);
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public String secretKey() {
        return this.secretKey;
    }
    public List<String> securityGroups() {
        return this.securityGroups == null ? List.of() : this.securityGroups;
    }
    public Optional<String> serviceRole() {
        return Optional.ofNullable(this.serviceRole);
    }
    public Optional<String> sessionToken() {
        return Optional.ofNullable(this.sessionToken);
    }
    public List<String> subnets() {
        return this.subnets == null ? List.of() : this.subnets;
    }
    public String userData() {
        return this.userData;
    }
    public Optional<String> virtualNetwork() {
        return Optional.ofNullable(this.virtualNetwork);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterEksConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessKey;
        private @Nullable String ami;
        private @Nullable Boolean associateWorkerNodePublicIp;
        private @Nullable Integer desiredNodes;
        private @Nullable Boolean ebsEncryption;
        private @Nullable String instanceType;
        private @Nullable String keyPairName;
        private String kubernetesVersion;
        private @Nullable Integer maximumNodes;
        private @Nullable Integer minimumNodes;
        private @Nullable Integer nodeVolumeSize;
        private @Nullable String region;
        private String secretKey;
        private @Nullable List<String> securityGroups;
        private @Nullable String serviceRole;
        private @Nullable String sessionToken;
        private @Nullable List<String> subnets;
        private String userData;
        private @Nullable String virtualNetwork;
        public Builder() {}
        public Builder(GetClusterEksConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.ami = defaults.ami;
    	      this.associateWorkerNodePublicIp = defaults.associateWorkerNodePublicIp;
    	      this.desiredNodes = defaults.desiredNodes;
    	      this.ebsEncryption = defaults.ebsEncryption;
    	      this.instanceType = defaults.instanceType;
    	      this.keyPairName = defaults.keyPairName;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.maximumNodes = defaults.maximumNodes;
    	      this.minimumNodes = defaults.minimumNodes;
    	      this.nodeVolumeSize = defaults.nodeVolumeSize;
    	      this.region = defaults.region;
    	      this.secretKey = defaults.secretKey;
    	      this.securityGroups = defaults.securityGroups;
    	      this.serviceRole = defaults.serviceRole;
    	      this.sessionToken = defaults.sessionToken;
    	      this.subnets = defaults.subnets;
    	      this.userData = defaults.userData;
    	      this.virtualNetwork = defaults.virtualNetwork;
        }

        @CustomType.Setter
        public Builder accessKey(String accessKey) {
            if (accessKey == null) {
              throw new MissingRequiredPropertyException("GetClusterEksConfig", "accessKey");
            }
            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder ami(@Nullable String ami) {

            this.ami = ami;
            return this;
        }
        @CustomType.Setter
        public Builder associateWorkerNodePublicIp(@Nullable Boolean associateWorkerNodePublicIp) {

            this.associateWorkerNodePublicIp = associateWorkerNodePublicIp;
            return this;
        }
        @CustomType.Setter
        public Builder desiredNodes(@Nullable Integer desiredNodes) {

            this.desiredNodes = desiredNodes;
            return this;
        }
        @CustomType.Setter
        public Builder ebsEncryption(@Nullable Boolean ebsEncryption) {

            this.ebsEncryption = ebsEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(@Nullable String instanceType) {

            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder keyPairName(@Nullable String keyPairName) {

            this.keyPairName = keyPairName;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            if (kubernetesVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterEksConfig", "kubernetesVersion");
            }
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        @CustomType.Setter
        public Builder maximumNodes(@Nullable Integer maximumNodes) {

            this.maximumNodes = maximumNodes;
            return this;
        }
        @CustomType.Setter
        public Builder minimumNodes(@Nullable Integer minimumNodes) {

            this.minimumNodes = minimumNodes;
            return this;
        }
        @CustomType.Setter
        public Builder nodeVolumeSize(@Nullable Integer nodeVolumeSize) {

            this.nodeVolumeSize = nodeVolumeSize;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(String secretKey) {
            if (secretKey == null) {
              throw new MissingRequiredPropertyException("GetClusterEksConfig", "secretKey");
            }
            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroups(@Nullable List<String> securityGroups) {

            this.securityGroups = securityGroups;
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        @CustomType.Setter
        public Builder serviceRole(@Nullable String serviceRole) {

            this.serviceRole = serviceRole;
            return this;
        }
        @CustomType.Setter
        public Builder sessionToken(@Nullable String sessionToken) {

            this.sessionToken = sessionToken;
            return this;
        }
        @CustomType.Setter
        public Builder subnets(@Nullable List<String> subnets) {

            this.subnets = subnets;
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        @CustomType.Setter
        public Builder userData(String userData) {
            if (userData == null) {
              throw new MissingRequiredPropertyException("GetClusterEksConfig", "userData");
            }
            this.userData = userData;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetwork(@Nullable String virtualNetwork) {

            this.virtualNetwork = virtualNetwork;
            return this;
        }
        public GetClusterEksConfig build() {
            final var _resultValue = new GetClusterEksConfig();
            _resultValue.accessKey = accessKey;
            _resultValue.ami = ami;
            _resultValue.associateWorkerNodePublicIp = associateWorkerNodePublicIp;
            _resultValue.desiredNodes = desiredNodes;
            _resultValue.ebsEncryption = ebsEncryption;
            _resultValue.instanceType = instanceType;
            _resultValue.keyPairName = keyPairName;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.maximumNodes = maximumNodes;
            _resultValue.minimumNodes = minimumNodes;
            _resultValue.nodeVolumeSize = nodeVolumeSize;
            _resultValue.region = region;
            _resultValue.secretKey = secretKey;
            _resultValue.securityGroups = securityGroups;
            _resultValue.serviceRole = serviceRole;
            _resultValue.sessionToken = sessionToken;
            _resultValue.subnets = subnets;
            _resultValue.userData = userData;
            _resultValue.virtualNetwork = virtualNetwork;
            return _resultValue;
        }
    }
}
