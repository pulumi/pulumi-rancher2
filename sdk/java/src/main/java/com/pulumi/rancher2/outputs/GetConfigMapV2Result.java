// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConfigMapV2Result {
    /**
     * @return (Computed) Annotations for the configMap v2 (map)
     * 
     */
    private Map<String,Object> annotations;
    private String clusterId;
    /**
     * @return (Computed) The data of the configMap v2 (map)
     * 
     */
    private Map<String,Object> data;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate (bool)
     * 
     */
    private Boolean immutable;
    /**
     * @return (Computed) Labels for the configMap v2 (map)
     * 
     */
    private Map<String,Object> labels;
    private String name;
    private @Nullable String namespace;
    /**
     * @return (Computed) The k8s resource version (string)
     * 
     */
    private String resourceVersion;

    private GetConfigMapV2Result() {}
    /**
     * @return (Computed) Annotations for the configMap v2 (map)
     * 
     */
    public Map<String,Object> annotations() {
        return this.annotations;
    }
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return (Computed) The data of the configMap v2 (map)
     * 
     */
    public Map<String,Object> data() {
        return this.data;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate (bool)
     * 
     */
    public Boolean immutable() {
        return this.immutable;
    }
    /**
     * @return (Computed) Labels for the configMap v2 (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    /**
     * @return (Computed) The k8s resource version (string)
     * 
     */
    public String resourceVersion() {
        return this.resourceVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfigMapV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> annotations;
        private String clusterId;
        private Map<String,Object> data;
        private String id;
        private Boolean immutable;
        private Map<String,Object> labels;
        private String name;
        private @Nullable String namespace;
        private String resourceVersion;
        public Builder() {}
        public Builder(GetConfigMapV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.clusterId = defaults.clusterId;
    	      this.data = defaults.data;
    	      this.id = defaults.id;
    	      this.immutable = defaults.immutable;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.resourceVersion = defaults.resourceVersion;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,Object> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder data(Map<String,Object> data) {
            this.data = Objects.requireNonNull(data);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder immutable(Boolean immutable) {
            this.immutable = Objects.requireNonNull(immutable);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder resourceVersion(String resourceVersion) {
            this.resourceVersion = Objects.requireNonNull(resourceVersion);
            return this;
        }
        public GetConfigMapV2Result build() {
            final var o = new GetConfigMapV2Result();
            o.annotations = annotations;
            o.clusterId = clusterId;
            o.data = data;
            o.id = id;
            o.immutable = immutable;
            o.labels = labels;
            o.name = name;
            o.namespace = namespace;
            o.resourceVersion = resourceVersion;
            return o;
        }
    }
}
