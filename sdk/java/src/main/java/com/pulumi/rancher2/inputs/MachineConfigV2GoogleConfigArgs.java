// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MachineConfigV2GoogleConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MachineConfigV2GoogleConfigArgs Empty = new MachineConfigV2GoogleConfigArgs();

    /**
     * GCE Instance External IP
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return GCE Instance External IP
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * GCE service account auth json file path
     * 
     */
    @Import(name="authEncodedJson")
    private @Nullable Output<String> authEncodedJson;

    /**
     * @return GCE service account auth json file path
     * 
     */
    public Optional<Output<String>> authEncodedJson() {
        return Optional.ofNullable(this.authEncodedJson);
    }

    /**
     * GCE Instance Disk Size (in GB)
     * 
     */
    @Import(name="diskSize", required=true)
    private Output<String> diskSize;

    /**
     * @return GCE Instance Disk Size (in GB)
     * 
     */
    public Output<String> diskSize() {
        return this.diskSize;
    }

    /**
     * GCE Instance Disk Type
     * 
     */
    @Import(name="diskType", required=true)
    private Output<String> diskType;

    /**
     * @return GCE Instance Disk Type
     * 
     */
    public Output<String> diskType() {
        return this.diskType;
    }

    /**
     * A prefix to be added to firewall rules created when exposing ports publicly. Required if exposing ports publicly.
     * 
     */
    @Import(name="externalFirewallRulePrefix")
    private @Nullable Output<String> externalFirewallRulePrefix;

    /**
     * @return A prefix to be added to firewall rules created when exposing ports publicly. Required if exposing ports publicly.
     * 
     */
    public Optional<Output<String>> externalFirewallRulePrefix() {
        return Optional.ofNullable(this.externalFirewallRulePrefix);
    }

    /**
     * A prefix to be added to an internal firewall rule created to ensure virtual machines can communicate with one another.
     * 
     */
    @Import(name="internalFirewallRulePrefix")
    private @Nullable Output<String> internalFirewallRulePrefix;

    /**
     * @return A prefix to be added to an internal firewall rule created to ensure virtual machines can communicate with one another.
     * 
     */
    public Optional<Output<String>> internalFirewallRulePrefix() {
        return Optional.ofNullable(this.internalFirewallRulePrefix);
    }

    /**
     * GCE instance image absolute URL
     * 
     */
    @Import(name="machineImage", required=true)
    private Output<String> machineImage;

    /**
     * @return GCE instance image absolute URL
     * 
     */
    public Output<String> machineImage() {
        return this.machineImage;
    }

    /**
     * GCE instance type
     * 
     */
    @Import(name="machineType", required=true)
    private Output<String> machineType;

    /**
     * @return GCE instance type
     * 
     */
    public Output<String> machineType() {
        return this.machineType;
    }

    /**
     * The network to provision virtual machines within
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return The network to provision virtual machines within
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * A list of ports to be opened publicly. &#39;external_firewall_rule_prefix&#39; must also be set
     * 
     */
    @Import(name="openPorts")
    private @Nullable Output<List<String>> openPorts;

    /**
     * @return A list of ports to be opened publicly. &#39;external_firewall_rule_prefix&#39; must also be set
     * 
     */
    public Optional<Output<List<String>>> openPorts() {
        return Optional.ofNullable(this.openPorts);
    }

    /**
     * Indicates if the virtual machine can be preempted
     * 
     */
    @Import(name="preemptable")
    private @Nullable Output<Boolean> preemptable;

    /**
     * @return Indicates if the virtual machine can be preempted
     * 
     */
    public Optional<Output<Boolean>> preemptable() {
        return Optional.ofNullable(this.preemptable);
    }

    /**
     * The GCP project to create virtual machines within
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The GCP project to create virtual machines within
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * Access scopes to be set on the virtual machine
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<String> scopes;

    /**
     * @return Access scopes to be set on the virtual machine
     * 
     */
    public Optional<Output<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The subnetwork to provision virtual machines within
     * 
     */
    @Import(name="subNetwork")
    private @Nullable Output<String> subNetwork;

    /**
     * @return The subnetwork to provision virtual machines within
     * 
     */
    public Optional<Output<String>> subNetwork() {
        return Optional.ofNullable(this.subNetwork);
    }

    /**
     * A set of network tags to be added to each VM, in the format of &#39;tag1,tag2&#39;
     * 
     */
    @Import(name="tags")
    private @Nullable Output<String> tags;

    /**
     * @return A set of network tags to be added to each VM, in the format of &#39;tag1,tag2&#39;
     * 
     */
    public Optional<Output<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Indicates if an existing VM should be used. This is not currently support in Rancher.
     * 
     */
    @Import(name="useExisting")
    private @Nullable Output<Boolean> useExisting;

    /**
     * @return Indicates if an existing VM should be used. This is not currently support in Rancher.
     * 
     */
    public Optional<Output<Boolean>> useExisting() {
        return Optional.ofNullable(this.useExisting);
    }

    /**
     * Indicates if the virtual machines should use an internal IP
     * 
     */
    @Import(name="useInternalIp")
    private @Nullable Output<Boolean> useInternalIp;

    /**
     * @return Indicates if the virtual machines should use an internal IP
     * 
     */
    public Optional<Output<Boolean>> useInternalIp() {
        return Optional.ofNullable(this.useInternalIp);
    }

    /**
     * Indicates if the virtual machines should use an internal IP only and not be assigned a public IP
     * 
     */
    @Import(name="useInternalIpOnly")
    private @Nullable Output<Boolean> useInternalIpOnly;

    /**
     * @return Indicates if the virtual machines should use an internal IP only and not be assigned a public IP
     * 
     */
    public Optional<Output<Boolean>> useInternalIpOnly() {
        return Optional.ofNullable(this.useInternalIpOnly);
    }

    /**
     * GCE user-data file path
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return GCE user-data file path
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * The username to be set when logging into the virtual machines
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username to be set when logging into the virtual machines
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * A set of labels to be added to each VM, in the format of &#39;key1,value1,key2,value2&#39;
     * 
     */
    @Import(name="vmLabels")
    private @Nullable Output<String> vmLabels;

    /**
     * @return A set of labels to be added to each VM, in the format of &#39;key1,value1,key2,value2&#39;
     * 
     */
    public Optional<Output<String>> vmLabels() {
        return Optional.ofNullable(this.vmLabels);
    }

    /**
     * The region and zone to create virtual machines within (e.g. us-east1-b)
     * 
     */
    @Import(name="zone", required=true)
    private Output<String> zone;

    /**
     * @return The region and zone to create virtual machines within (e.g. us-east1-b)
     * 
     */
    public Output<String> zone() {
        return this.zone;
    }

    private MachineConfigV2GoogleConfigArgs() {}

    private MachineConfigV2GoogleConfigArgs(MachineConfigV2GoogleConfigArgs $) {
        this.address = $.address;
        this.authEncodedJson = $.authEncodedJson;
        this.diskSize = $.diskSize;
        this.diskType = $.diskType;
        this.externalFirewallRulePrefix = $.externalFirewallRulePrefix;
        this.internalFirewallRulePrefix = $.internalFirewallRulePrefix;
        this.machineImage = $.machineImage;
        this.machineType = $.machineType;
        this.network = $.network;
        this.openPorts = $.openPorts;
        this.preemptable = $.preemptable;
        this.project = $.project;
        this.scopes = $.scopes;
        this.subNetwork = $.subNetwork;
        this.tags = $.tags;
        this.useExisting = $.useExisting;
        this.useInternalIp = $.useInternalIp;
        this.useInternalIpOnly = $.useInternalIpOnly;
        this.userData = $.userData;
        this.username = $.username;
        this.vmLabels = $.vmLabels;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachineConfigV2GoogleConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachineConfigV2GoogleConfigArgs $;

        public Builder() {
            $ = new MachineConfigV2GoogleConfigArgs();
        }

        public Builder(MachineConfigV2GoogleConfigArgs defaults) {
            $ = new MachineConfigV2GoogleConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address GCE Instance External IP
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address GCE Instance External IP
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param authEncodedJson GCE service account auth json file path
         * 
         * @return builder
         * 
         */
        public Builder authEncodedJson(@Nullable Output<String> authEncodedJson) {
            $.authEncodedJson = authEncodedJson;
            return this;
        }

        /**
         * @param authEncodedJson GCE service account auth json file path
         * 
         * @return builder
         * 
         */
        public Builder authEncodedJson(String authEncodedJson) {
            return authEncodedJson(Output.of(authEncodedJson));
        }

        /**
         * @param diskSize GCE Instance Disk Size (in GB)
         * 
         * @return builder
         * 
         */
        public Builder diskSize(Output<String> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize GCE Instance Disk Size (in GB)
         * 
         * @return builder
         * 
         */
        public Builder diskSize(String diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param diskType GCE Instance Disk Type
         * 
         * @return builder
         * 
         */
        public Builder diskType(Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType GCE Instance Disk Type
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param externalFirewallRulePrefix A prefix to be added to firewall rules created when exposing ports publicly. Required if exposing ports publicly.
         * 
         * @return builder
         * 
         */
        public Builder externalFirewallRulePrefix(@Nullable Output<String> externalFirewallRulePrefix) {
            $.externalFirewallRulePrefix = externalFirewallRulePrefix;
            return this;
        }

        /**
         * @param externalFirewallRulePrefix A prefix to be added to firewall rules created when exposing ports publicly. Required if exposing ports publicly.
         * 
         * @return builder
         * 
         */
        public Builder externalFirewallRulePrefix(String externalFirewallRulePrefix) {
            return externalFirewallRulePrefix(Output.of(externalFirewallRulePrefix));
        }

        /**
         * @param internalFirewallRulePrefix A prefix to be added to an internal firewall rule created to ensure virtual machines can communicate with one another.
         * 
         * @return builder
         * 
         */
        public Builder internalFirewallRulePrefix(@Nullable Output<String> internalFirewallRulePrefix) {
            $.internalFirewallRulePrefix = internalFirewallRulePrefix;
            return this;
        }

        /**
         * @param internalFirewallRulePrefix A prefix to be added to an internal firewall rule created to ensure virtual machines can communicate with one another.
         * 
         * @return builder
         * 
         */
        public Builder internalFirewallRulePrefix(String internalFirewallRulePrefix) {
            return internalFirewallRulePrefix(Output.of(internalFirewallRulePrefix));
        }

        /**
         * @param machineImage GCE instance image absolute URL
         * 
         * @return builder
         * 
         */
        public Builder machineImage(Output<String> machineImage) {
            $.machineImage = machineImage;
            return this;
        }

        /**
         * @param machineImage GCE instance image absolute URL
         * 
         * @return builder
         * 
         */
        public Builder machineImage(String machineImage) {
            return machineImage(Output.of(machineImage));
        }

        /**
         * @param machineType GCE instance type
         * 
         * @return builder
         * 
         */
        public Builder machineType(Output<String> machineType) {
            $.machineType = machineType;
            return this;
        }

        /**
         * @param machineType GCE instance type
         * 
         * @return builder
         * 
         */
        public Builder machineType(String machineType) {
            return machineType(Output.of(machineType));
        }

        /**
         * @param network The network to provision virtual machines within
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The network to provision virtual machines within
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param openPorts A list of ports to be opened publicly. &#39;external_firewall_rule_prefix&#39; must also be set
         * 
         * @return builder
         * 
         */
        public Builder openPorts(@Nullable Output<List<String>> openPorts) {
            $.openPorts = openPorts;
            return this;
        }

        /**
         * @param openPorts A list of ports to be opened publicly. &#39;external_firewall_rule_prefix&#39; must also be set
         * 
         * @return builder
         * 
         */
        public Builder openPorts(List<String> openPorts) {
            return openPorts(Output.of(openPorts));
        }

        /**
         * @param openPorts A list of ports to be opened publicly. &#39;external_firewall_rule_prefix&#39; must also be set
         * 
         * @return builder
         * 
         */
        public Builder openPorts(String... openPorts) {
            return openPorts(List.of(openPorts));
        }

        /**
         * @param preemptable Indicates if the virtual machine can be preempted
         * 
         * @return builder
         * 
         */
        public Builder preemptable(@Nullable Output<Boolean> preemptable) {
            $.preemptable = preemptable;
            return this;
        }

        /**
         * @param preemptable Indicates if the virtual machine can be preempted
         * 
         * @return builder
         * 
         */
        public Builder preemptable(Boolean preemptable) {
            return preemptable(Output.of(preemptable));
        }

        /**
         * @param project The GCP project to create virtual machines within
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The GCP project to create virtual machines within
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param scopes Access scopes to be set on the virtual machine
         * 
         * @return builder
         * 
         */
        public Builder scopes(@Nullable Output<String> scopes) {
            $.scopes = scopes;
            return this;
        }

        /**
         * @param scopes Access scopes to be set on the virtual machine
         * 
         * @return builder
         * 
         */
        public Builder scopes(String scopes) {
            return scopes(Output.of(scopes));
        }

        /**
         * @param subNetwork The subnetwork to provision virtual machines within
         * 
         * @return builder
         * 
         */
        public Builder subNetwork(@Nullable Output<String> subNetwork) {
            $.subNetwork = subNetwork;
            return this;
        }

        /**
         * @param subNetwork The subnetwork to provision virtual machines within
         * 
         * @return builder
         * 
         */
        public Builder subNetwork(String subNetwork) {
            return subNetwork(Output.of(subNetwork));
        }

        /**
         * @param tags A set of network tags to be added to each VM, in the format of &#39;tag1,tag2&#39;
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A set of network tags to be added to each VM, in the format of &#39;tag1,tag2&#39;
         * 
         * @return builder
         * 
         */
        public Builder tags(String tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param useExisting Indicates if an existing VM should be used. This is not currently support in Rancher.
         * 
         * @return builder
         * 
         */
        public Builder useExisting(@Nullable Output<Boolean> useExisting) {
            $.useExisting = useExisting;
            return this;
        }

        /**
         * @param useExisting Indicates if an existing VM should be used. This is not currently support in Rancher.
         * 
         * @return builder
         * 
         */
        public Builder useExisting(Boolean useExisting) {
            return useExisting(Output.of(useExisting));
        }

        /**
         * @param useInternalIp Indicates if the virtual machines should use an internal IP
         * 
         * @return builder
         * 
         */
        public Builder useInternalIp(@Nullable Output<Boolean> useInternalIp) {
            $.useInternalIp = useInternalIp;
            return this;
        }

        /**
         * @param useInternalIp Indicates if the virtual machines should use an internal IP
         * 
         * @return builder
         * 
         */
        public Builder useInternalIp(Boolean useInternalIp) {
            return useInternalIp(Output.of(useInternalIp));
        }

        /**
         * @param useInternalIpOnly Indicates if the virtual machines should use an internal IP only and not be assigned a public IP
         * 
         * @return builder
         * 
         */
        public Builder useInternalIpOnly(@Nullable Output<Boolean> useInternalIpOnly) {
            $.useInternalIpOnly = useInternalIpOnly;
            return this;
        }

        /**
         * @param useInternalIpOnly Indicates if the virtual machines should use an internal IP only and not be assigned a public IP
         * 
         * @return builder
         * 
         */
        public Builder useInternalIpOnly(Boolean useInternalIpOnly) {
            return useInternalIpOnly(Output.of(useInternalIpOnly));
        }

        /**
         * @param userData GCE user-data file path
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData GCE user-data file path
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param username The username to be set when logging into the virtual machines
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to be set when logging into the virtual machines
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param vmLabels A set of labels to be added to each VM, in the format of &#39;key1,value1,key2,value2&#39;
         * 
         * @return builder
         * 
         */
        public Builder vmLabels(@Nullable Output<String> vmLabels) {
            $.vmLabels = vmLabels;
            return this;
        }

        /**
         * @param vmLabels A set of labels to be added to each VM, in the format of &#39;key1,value1,key2,value2&#39;
         * 
         * @return builder
         * 
         */
        public Builder vmLabels(String vmLabels) {
            return vmLabels(Output.of(vmLabels));
        }

        /**
         * @param zone The region and zone to create virtual machines within (e.g. us-east1-b)
         * 
         * @return builder
         * 
         */
        public Builder zone(Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The region and zone to create virtual machines within (e.g. us-east1-b)
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public MachineConfigV2GoogleConfigArgs build() {
            if ($.diskSize == null) {
                throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfigArgs", "diskSize");
            }
            if ($.diskType == null) {
                throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfigArgs", "diskType");
            }
            if ($.machineImage == null) {
                throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfigArgs", "machineImage");
            }
            if ($.machineType == null) {
                throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfigArgs", "machineType");
            }
            if ($.network == null) {
                throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfigArgs", "network");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfigArgs", "project");
            }
            if ($.zone == null) {
                throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfigArgs", "zone");
            }
            return $;
        }
    }

}
