// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CloudCredentialS3CredentialConfig {
    /**
     * @return AWS Access Key
     * 
     */
    private String accessKey;
    /**
     * @return AWS default bucket
     * 
     */
    private @Nullable String defaultBucket;
    /**
     * @return AWS default endpoint
     * 
     */
    private @Nullable String defaultEndpoint;
    /**
     * @return AWS default endpoint CA
     * 
     */
    private @Nullable String defaultEndpointCa;
    /**
     * @return AWS default folder
     * 
     */
    private @Nullable String defaultFolder;
    /**
     * @return AWS default region
     * 
     */
    private @Nullable String defaultRegion;
    /**
     * @return AWS default skip ssl verify
     * 
     */
    private @Nullable Boolean defaultSkipSslVerify;
    /**
     * @return AWS Secret Key
     * 
     */
    private String secretKey;

    private CloudCredentialS3CredentialConfig() {}
    /**
     * @return AWS Access Key
     * 
     */
    public String accessKey() {
        return this.accessKey;
    }
    /**
     * @return AWS default bucket
     * 
     */
    public Optional<String> defaultBucket() {
        return Optional.ofNullable(this.defaultBucket);
    }
    /**
     * @return AWS default endpoint
     * 
     */
    public Optional<String> defaultEndpoint() {
        return Optional.ofNullable(this.defaultEndpoint);
    }
    /**
     * @return AWS default endpoint CA
     * 
     */
    public Optional<String> defaultEndpointCa() {
        return Optional.ofNullable(this.defaultEndpointCa);
    }
    /**
     * @return AWS default folder
     * 
     */
    public Optional<String> defaultFolder() {
        return Optional.ofNullable(this.defaultFolder);
    }
    /**
     * @return AWS default region
     * 
     */
    public Optional<String> defaultRegion() {
        return Optional.ofNullable(this.defaultRegion);
    }
    /**
     * @return AWS default skip ssl verify
     * 
     */
    public Optional<Boolean> defaultSkipSslVerify() {
        return Optional.ofNullable(this.defaultSkipSslVerify);
    }
    /**
     * @return AWS Secret Key
     * 
     */
    public String secretKey() {
        return this.secretKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloudCredentialS3CredentialConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessKey;
        private @Nullable String defaultBucket;
        private @Nullable String defaultEndpoint;
        private @Nullable String defaultEndpointCa;
        private @Nullable String defaultFolder;
        private @Nullable String defaultRegion;
        private @Nullable Boolean defaultSkipSslVerify;
        private String secretKey;
        public Builder() {}
        public Builder(CloudCredentialS3CredentialConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.defaultBucket = defaults.defaultBucket;
    	      this.defaultEndpoint = defaults.defaultEndpoint;
    	      this.defaultEndpointCa = defaults.defaultEndpointCa;
    	      this.defaultFolder = defaults.defaultFolder;
    	      this.defaultRegion = defaults.defaultRegion;
    	      this.defaultSkipSslVerify = defaults.defaultSkipSslVerify;
    	      this.secretKey = defaults.secretKey;
        }

        @CustomType.Setter
        public Builder accessKey(String accessKey) {
            if (accessKey == null) {
              throw new MissingRequiredPropertyException("CloudCredentialS3CredentialConfig", "accessKey");
            }
            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder defaultBucket(@Nullable String defaultBucket) {

            this.defaultBucket = defaultBucket;
            return this;
        }
        @CustomType.Setter
        public Builder defaultEndpoint(@Nullable String defaultEndpoint) {

            this.defaultEndpoint = defaultEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder defaultEndpointCa(@Nullable String defaultEndpointCa) {

            this.defaultEndpointCa = defaultEndpointCa;
            return this;
        }
        @CustomType.Setter
        public Builder defaultFolder(@Nullable String defaultFolder) {

            this.defaultFolder = defaultFolder;
            return this;
        }
        @CustomType.Setter
        public Builder defaultRegion(@Nullable String defaultRegion) {

            this.defaultRegion = defaultRegion;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSkipSslVerify(@Nullable Boolean defaultSkipSslVerify) {

            this.defaultSkipSslVerify = defaultSkipSslVerify;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(String secretKey) {
            if (secretKey == null) {
              throw new MissingRequiredPropertyException("CloudCredentialS3CredentialConfig", "secretKey");
            }
            this.secretKey = secretKey;
            return this;
        }
        public CloudCredentialS3CredentialConfig build() {
            final var _resultValue = new CloudCredentialS3CredentialConfig();
            _resultValue.accessKey = accessKey;
            _resultValue.defaultBucket = defaultBucket;
            _resultValue.defaultEndpoint = defaultEndpoint;
            _resultValue.defaultEndpointCa = defaultEndpointCa;
            _resultValue.defaultFolder = defaultFolder;
            _resultValue.defaultRegion = defaultRegion;
            _resultValue.defaultSkipSslVerify = defaultSkipSslVerify;
            _resultValue.secretKey = secretKey;
            return _resultValue;
        }
    }
}
