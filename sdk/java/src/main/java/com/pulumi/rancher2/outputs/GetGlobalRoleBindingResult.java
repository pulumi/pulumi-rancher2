// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetGlobalRoleBindingResult {
    /**
     * @return (Computed) Annotations of the resource (map)
     * 
     */
    private Map<String,Object> annotations;
    private String globalRoleId;
    /**
     * @return (Computed) The group principal ID to assign global role binding. Rancher v2.4.0 or higher is required (string)
     * 
     */
    private String groupPrincipalId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) Labels of the resource (map)
     * 
     */
    private Map<String,Object> labels;
    private String name;
    /**
     * @return (Computed) The user ID to assign global role binding (string)
     * 
     */
    private String userId;

    private GetGlobalRoleBindingResult() {}
    /**
     * @return (Computed) Annotations of the resource (map)
     * 
     */
    public Map<String,Object> annotations() {
        return this.annotations;
    }
    public String globalRoleId() {
        return this.globalRoleId;
    }
    /**
     * @return (Computed) The group principal ID to assign global role binding. Rancher v2.4.0 or higher is required (string)
     * 
     */
    public String groupPrincipalId() {
        return this.groupPrincipalId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) Labels of the resource (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) The user ID to assign global role binding (string)
     * 
     */
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGlobalRoleBindingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> annotations;
        private String globalRoleId;
        private String groupPrincipalId;
        private String id;
        private Map<String,Object> labels;
        private String name;
        private String userId;
        public Builder() {}
        public Builder(GetGlobalRoleBindingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.globalRoleId = defaults.globalRoleId;
    	      this.groupPrincipalId = defaults.groupPrincipalId;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,Object> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetGlobalRoleBindingResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder globalRoleId(String globalRoleId) {
            if (globalRoleId == null) {
              throw new MissingRequiredPropertyException("GetGlobalRoleBindingResult", "globalRoleId");
            }
            this.globalRoleId = globalRoleId;
            return this;
        }
        @CustomType.Setter
        public Builder groupPrincipalId(String groupPrincipalId) {
            if (groupPrincipalId == null) {
              throw new MissingRequiredPropertyException("GetGlobalRoleBindingResult", "groupPrincipalId");
            }
            this.groupPrincipalId = groupPrincipalId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGlobalRoleBindingResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetGlobalRoleBindingResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGlobalRoleBindingResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetGlobalRoleBindingResult", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetGlobalRoleBindingResult build() {
            final var _resultValue = new GetGlobalRoleBindingResult();
            _resultValue.annotations = annotations;
            _resultValue.globalRoleId = globalRoleId;
            _resultValue.groupPrincipalId = groupPrincipalId;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}
