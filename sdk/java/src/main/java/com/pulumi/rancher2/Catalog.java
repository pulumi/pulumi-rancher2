// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.CatalogArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.CatalogState;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Rancher v2 Catalog resource. This can be used to create cluster, global and/or project catalogs for Rancher v2 environments and retrieve their information.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Catalog;
 * import com.pulumi.rancher2.CatalogArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo_global = new Catalog(&#34;foo-global&#34;, CatalogArgs.builder()        
 *             .url(&#34;https://&lt;CATALOG_URL&gt;&#34;)
 *             .build());
 * 
 *         var foo_cluster = new Catalog(&#34;foo-cluster&#34;, CatalogArgs.builder()        
 *             .scope(&#34;cluster&#34;)
 *             .url(&#34;https://&lt;CATALOG_URL&gt;&#34;)
 *             .build());
 * 
 *         var foo_project = new Catalog(&#34;foo-project&#34;, CatalogArgs.builder()        
 *             .scope(&#34;project&#34;)
 *             .url(&#34;https://&lt;CATALOG_URL&gt;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Catalogs can be imported using the Rancher Catalog ID and its scope.
 * 
 * ```sh
 * $ pulumi import rancher2:index/catalog:Catalog foo &amp;lt;SCOPE&amp;gt;.&amp;lt;CATALOG_ID_ID&amp;gt;
 * ```
 * 
 */
@ResourceType(type="rancher2:index/catalog:Catalog")
public class Catalog extends com.pulumi.resources.CustomResource {
    /**
     * Annotations for the catalog (map)
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> annotations;

    /**
     * @return Annotations for the catalog (map)
     * 
     */
    public Output<Map<String,Object>> annotations() {
        return this.annotations;
    }
    /**
     * The branch of the catalog repo to use. Default `master` (string)
     * 
     */
    @Export(name="branch", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> branch;

    /**
     * @return The branch of the catalog repo to use. Default `master` (string)
     * 
     */
    public Output<Optional<String>> branch() {
        return Codegen.optional(this.branch);
    }
    /**
     * The cluster id of the catalog. Mandatory if `scope = cluster` (string)
     * 
     */
    @Export(name="clusterId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clusterId;

    /**
     * @return The cluster id of the catalog. Mandatory if `scope = cluster` (string)
     * 
     */
    public Output<Optional<String>> clusterId() {
        return Codegen.optional(this.clusterId);
    }
    /**
     * A catalog description (string)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A catalog description (string)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The kind of the catalog. Just helm by the moment (string)
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> kind;

    /**
     * @return The kind of the catalog. Just helm by the moment (string)
     * 
     */
    public Output<Optional<String>> kind() {
        return Codegen.optional(this.kind);
    }
    /**
     * Labels for the catalog (map)
     * 
     */
    @Export(name="labels", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> labels;

    /**
     * @return Labels for the catalog (map)
     * 
     */
    public Output<Map<String,Object>> labels() {
        return this.labels;
    }
    /**
     * The name of the catalog (string)
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the catalog (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The password to access the catalog if needed (string)
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return The password to access the catalog if needed (string)
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * The project id of the catalog. Mandatory if `scope = project` (string)
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> projectId;

    /**
     * @return The project id of the catalog. Mandatory if `scope = project` (string)
     * 
     */
    public Output<Optional<String>> projectId() {
        return Codegen.optional(this.projectId);
    }
    /**
     * Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
     * 
     */
    @Export(name="refresh", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> refresh;

    /**
     * @return Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
     * 
     */
    public Output<Optional<Boolean>> refresh() {
        return Codegen.optional(this.refresh);
    }
    /**
     * The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
     * 
     */
    @Export(name="scope", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scope;

    /**
     * @return The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
     * 
     */
    public Output<Optional<String>> scope() {
        return Codegen.optional(this.scope);
    }
    /**
     * The url of the catalog repo (string)
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output<String> url;

    /**
     * @return The url of the catalog repo (string)
     * 
     */
    public Output<String> url() {
        return this.url;
    }
    /**
     * The username to access the catalog if needed (string)
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> username;

    /**
     * @return The username to access the catalog if needed (string)
     * 
     */
    public Output<Optional<String>> username() {
        return Codegen.optional(this.username);
    }
    /**
     * Helm version for the catalog. Available options: `helm_v2` and `helm_v3` (string)
     * 
     */
    @Export(name="version", refs={String.class}, tree="[0]")
    private Output<String> version;

    /**
     * @return Helm version for the catalog. Available options: `helm_v2` and `helm_v3` (string)
     * 
     */
    public Output<String> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Catalog(String name) {
        this(name, CatalogArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Catalog(String name, CatalogArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Catalog(String name, CatalogArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/catalog:Catalog", name, args == null ? CatalogArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Catalog(String name, Output<String> id, @Nullable CatalogState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/catalog:Catalog", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password",
                "username"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Catalog get(String name, Output<String> id, @Nullable CatalogState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Catalog(name, id, state, options);
    }
}
