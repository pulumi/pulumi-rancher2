// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.NamespaceArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.NamespaceState;
import com.pulumi.rancher2.outputs.NamespaceContainerResourceLimit;
import com.pulumi.rancher2.outputs.NamespaceResourceQuota;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Rancher v2 Namespace resource. This can be used to create namespaces for Rancher v2 environments and retrieve their information.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Namespace;
 * import com.pulumi.rancher2.NamespaceArgs;
 * import com.pulumi.rancher2.inputs.NamespaceResourceQuotaArgs;
 * import com.pulumi.rancher2.inputs.NamespaceResourceQuotaLimitArgs;
 * import com.pulumi.rancher2.inputs.NamespaceContainerResourceLimitArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 Namespace
 *         var foo = new Namespace("foo", NamespaceArgs.builder()
 *             .name("foo")
 *             .projectId("<PROJECT_ID>")
 *             .description("foo namespace")
 *             .resourceQuota(NamespaceResourceQuotaArgs.builder()
 *                 .limit(NamespaceResourceQuotaLimitArgs.builder()
 *                     .limitsCpu("100m")
 *                     .limitsMemory("100Mi")
 *                     .requestsStorage("1Gi")
 *                     .build())
 *                 .build())
 *             .containerResourceLimit(NamespaceContainerResourceLimitArgs.builder()
 *                 .limitsCpu("20m")
 *                 .limitsMemory("20Mi")
 *                 .requestsCpu("1m")
 *                 .requestsMemory("1Mi")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;
 * import com.pulumi.rancher2.Namespace;
 * import com.pulumi.rancher2.NamespaceArgs;
 * import com.pulumi.rancher2.inputs.NamespaceResourceQuotaArgs;
 * import com.pulumi.rancher2.inputs.NamespaceResourceQuotaLimitArgs;
 * import com.pulumi.rancher2.inputs.NamespaceContainerResourceLimitArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 Cluster 
 *         var foo_custom = new Cluster("foo-custom", ClusterArgs.builder()
 *             .name("foo-custom")
 *             .description("Foo rancher2 custom cluster")
 *             .rkeConfig(ClusterRkeConfigArgs.builder()
 *                 .network(ClusterRkeConfigNetworkArgs.builder()
 *                     .plugin("canal")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         // Create a new rancher2 Namespace assigned to default cluster project
 *         var foo = new Namespace("foo", NamespaceArgs.builder()
 *             .name("foo")
 *             .projectId(foo_custom.defaultProjectId())
 *             .description("foo namespace")
 *             .resourceQuota(NamespaceResourceQuotaArgs.builder()
 *                 .limit(NamespaceResourceQuotaLimitArgs.builder()
 *                     .limitsCpu("100m")
 *                     .limitsMemory("100Mi")
 *                     .requestsStorage("1Gi")
 *                     .build())
 *                 .build())
 *             .containerResourceLimit(NamespaceContainerResourceLimitArgs.builder()
 *                 .limitsCpu("20m")
 *                 .limitsMemory("20Mi")
 *                 .requestsCpu("1m")
 *                 .requestsMemory("1Mi")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Namespaces can be imported using the namespace ID in the format `&lt;project_id&gt;.&lt;namespace_id&gt;`
 * 
 * ```sh
 * $ pulumi import rancher2:index/namespace:Namespace foo &amp;lt;project_id&amp;gt;.&amp;lt;namespaces_id&amp;gt;
 * ```
 * 
 * `&lt;project_id&gt;` is in the format `&lt;cluster_id&gt;:&lt;id&gt;`, but &lt;id&gt; part is optional:
 * 
 * - If full project_id is provided, `&lt;project_id&gt;=&lt;cluster_id&gt;:&lt;id&gt;`, the namespace&#39;ll be assigned to corresponding cluster project once it&#39;s imported.
 * 
 * - If `&lt;id&gt;` part is omitted `&lt;project_id&gt;=&lt;cluster_id&gt;`, the namespace&#39;ll not be assigned to any project. To move it into a project, `&lt;project_id&gt;=&lt;cluster_id&gt;:&lt;id&gt;` needs to be updated in tf file. Namespace movement is only supported inside same `cluster_id`.
 * 
 */
@ResourceType(type="rancher2:index/namespace:Namespace")
public class Namespace extends com.pulumi.resources.CustomResource {
    /**
     * Annotations for Node Pool object (map)
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> annotations;

    /**
     * @return Annotations for Node Pool object (map)
     * 
     */
    public Output<Map<String,Object>> annotations() {
        return this.annotations;
    }
    /**
     * Default containers resource limits on namespace (List maxitem:1)
     * 
     */
    @Export(name="containerResourceLimit", refs={NamespaceContainerResourceLimit.class}, tree="[0]")
    private Output</* @Nullable */ NamespaceContainerResourceLimit> containerResourceLimit;

    /**
     * @return Default containers resource limits on namespace (List maxitem:1)
     * 
     */
    public Output<Optional<NamespaceContainerResourceLimit>> containerResourceLimit() {
        return Codegen.optional(this.containerResourceLimit);
    }
    /**
     * A namespace description (string)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A namespace description (string)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Labels for Node Pool object (map)
     * 
     */
    @Export(name="labels", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> labels;

    /**
     * @return Labels for Node Pool object (map)
     * 
     */
    public Output<Map<String,Object>> labels() {
        return this.labels;
    }
    /**
     * The name of the namespace (string)
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the namespace (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The project id where assign namespace. It&#39;s on the form `project_id=&lt;cluster_id&gt;:&lt;id&gt;`. Updating `&lt;id&gt;` part on same `&lt;cluster_id&gt;` namespace will be moved between projects (string)
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The project id where assign namespace. It&#39;s on the form `project_id=&lt;cluster_id&gt;:&lt;id&gt;`. Updating `&lt;id&gt;` part on same `&lt;cluster_id&gt;` namespace will be moved between projects (string)
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)
     * 
     */
    @Export(name="resourceQuota", refs={NamespaceResourceQuota.class}, tree="[0]")
    private Output<NamespaceResourceQuota> resourceQuota;

    /**
     * @return Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)
     * 
     */
    public Output<NamespaceResourceQuota> resourceQuota() {
        return this.resourceQuota;
    }
    /**
     * Wait for cluster becomes active. Default `false` (bool)
     * 
     */
    @Export(name="waitForCluster", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> waitForCluster;

    /**
     * @return Wait for cluster becomes active. Default `false` (bool)
     * 
     */
    public Output<Optional<Boolean>> waitForCluster() {
        return Codegen.optional(this.waitForCluster);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Namespace(java.lang.String name) {
        this(name, NamespaceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Namespace(java.lang.String name, NamespaceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Namespace(java.lang.String name, NamespaceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/namespace:Namespace", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Namespace(java.lang.String name, Output<java.lang.String> id, @Nullable NamespaceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/namespace:Namespace", name, state, makeResourceOptions(options, id), false);
    }

    private static NamespaceArgs makeArgs(NamespaceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NamespaceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Namespace get(java.lang.String name, Output<java.lang.String> id, @Nullable NamespaceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Namespace(name, id, state, options);
    }
}
