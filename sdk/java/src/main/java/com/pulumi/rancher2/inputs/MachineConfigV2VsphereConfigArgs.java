// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MachineConfigV2VsphereConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MachineConfigV2VsphereConfigArgs Empty = new MachineConfigV2VsphereConfigArgs();

    /**
     * vSphere URL for boot2docker iso image. Default `https://releases.rancher.com/os/latest/rancheros-vmware.iso` (string)
     * 
     */
    @Import(name="boot2dockerUrl")
    private @Nullable Output<String> boot2dockerUrl;

    /**
     * @return vSphere URL for boot2docker iso image. Default `https://releases.rancher.com/os/latest/rancheros-vmware.iso` (string)
     * 
     */
    public Optional<Output<String>> boot2dockerUrl() {
        return Optional.ofNullable(this.boot2dockerUrl);
    }

    /**
     * vSphere vm configuration parameters (used for guestinfo) (list)
     * 
     */
    @Import(name="cfgparams")
    private @Nullable Output<List<String>> cfgparams;

    /**
     * @return vSphere vm configuration parameters (used for guestinfo) (list)
     * 
     */
    public Optional<Output<List<String>>> cfgparams() {
        return Optional.ofNullable(this.cfgparams);
    }

    /**
     * If you choose creation type vm (clone vm) a name of what vm you want to clone is required (string)
     * 
     */
    @Import(name="cloneFrom")
    private @Nullable Output<String> cloneFrom;

    /**
     * @return If you choose creation type vm (clone vm) a name of what vm you want to clone is required (string)
     * 
     */
    public Optional<Output<String>> cloneFrom() {
        return Optional.ofNullable(this.cloneFrom);
    }

    /**
     * Filepath to a cloud-config yaml file to put into the ISO user-data (string)
     * 
     */
    @Import(name="cloudConfig")
    private @Nullable Output<String> cloudConfig;

    /**
     * @return Filepath to a cloud-config yaml file to put into the ISO user-data (string)
     * 
     */
    public Optional<Output<String>> cloudConfig() {
        return Optional.ofNullable(this.cloudConfig);
    }

    /**
     * vSphere cloud-init file or url to set in the guestinfo (string)
     * 
     */
    @Import(name="cloudinit")
    private @Nullable Output<String> cloudinit;

    /**
     * @return vSphere cloud-init file or url to set in the guestinfo (string)
     * 
     */
    public Optional<Output<String>> cloudinit() {
        return Optional.ofNullable(this.cloudinit);
    }

    /**
     * If you choose to clone from a content library template specify the name of the library (string)
     * 
     */
    @Import(name="contentLibrary")
    private @Nullable Output<String> contentLibrary;

    /**
     * @return If you choose to clone from a content library template specify the name of the library (string)
     * 
     */
    public Optional<Output<String>> contentLibrary() {
        return Optional.ofNullable(this.contentLibrary);
    }

    /**
     * vSphere CPU number for docker VM. Default `2` (string)
     * 
     */
    @Import(name="cpuCount")
    private @Nullable Output<String> cpuCount;

    /**
     * @return vSphere CPU number for docker VM. Default `2` (string)
     * 
     */
    public Optional<Output<String>> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }

    /**
     * Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy. Default `legacy` (string)
     * 
     */
    @Import(name="creationType")
    private @Nullable Output<String> creationType;

    /**
     * @return Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy. Default `legacy` (string)
     * 
     */
    public Optional<Output<String>> creationType() {
        return Optional.ofNullable(this.creationType);
    }

    /**
     * vSphere custom attributes, format key/value e.g. `200=my custom value` (List)
     * 
     */
    @Import(name="customAttributes")
    private @Nullable Output<List<String>> customAttributes;

    /**
     * @return vSphere custom attributes, format key/value e.g. `200=my custom value` (List)
     * 
     */
    public Optional<Output<List<String>>> customAttributes() {
        return Optional.ofNullable(this.customAttributes);
    }

    /**
     * vSphere datacenter for docker VM (string)
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return vSphere datacenter for docker VM (string)
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * vSphere datastore for docker VM (string)
     * 
     */
    @Import(name="datastore")
    private @Nullable Output<String> datastore;

    /**
     * @return vSphere datastore for docker VM (string)
     * 
     */
    public Optional<Output<String>> datastore() {
        return Optional.ofNullable(this.datastore);
    }

    /**
     * vSphere datastore cluster for virtual machine (string)
     * 
     */
    @Import(name="datastoreCluster")
    private @Nullable Output<String> datastoreCluster;

    /**
     * @return vSphere datastore cluster for virtual machine (string)
     * 
     */
    public Optional<Output<String>> datastoreCluster() {
        return Optional.ofNullable(this.datastoreCluster);
    }

    /**
     * vSphere size of disk for docker VM (in MB). Default `20480` (string)
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<String> diskSize;

    /**
     * @return vSphere size of disk for docker VM (in MB). Default `20480` (string)
     * 
     */
    public Optional<Output<String>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * vSphere folder for the docker VM. This folder must already exist in the datacenter (string)
     * 
     */
    @Import(name="folder")
    private @Nullable Output<String> folder;

    /**
     * @return vSphere folder for the docker VM. This folder must already exist in the datacenter (string)
     * 
     */
    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Duration in seconds before the graceful shutdown of the VM times out and the VM is destroyed. A force destroy will be performed when the value is zero (string)
     * 
     */
    @Import(name="gracefulShutdownTimeout")
    private @Nullable Output<String> gracefulShutdownTimeout;

    /**
     * @return Duration in seconds before the graceful shutdown of the VM times out and the VM is destroyed. A force destroy will be performed when the value is zero (string)
     * 
     */
    public Optional<Output<String>> gracefulShutdownTimeout() {
        return Optional.ofNullable(this.gracefulShutdownTimeout);
    }

    /**
     * vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS (string)
     * 
     */
    @Import(name="hostsystem")
    private @Nullable Output<String> hostsystem;

    /**
     * @return vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS (string)
     * 
     */
    public Optional<Output<String>> hostsystem() {
        return Optional.ofNullable(this.hostsystem);
    }

    /**
     * vSphere size of memory for docker VM (in MB). Default `2048` (string)
     * 
     */
    @Import(name="memorySize")
    private @Nullable Output<String> memorySize;

    /**
     * @return vSphere size of memory for docker VM (in MB). Default `2048` (string)
     * 
     */
    public Optional<Output<String>> memorySize() {
        return Optional.ofNullable(this.memorySize);
    }

    /**
     * vSphere network where the docker VM will be attached (list)
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    /**
     * @return vSphere network where the docker VM will be attached (list)
     * 
     */
    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * vSphere resource pool for docker VM (string)
     * 
     */
    @Import(name="pool")
    private @Nullable Output<String> pool;

    /**
     * @return vSphere resource pool for docker VM (string)
     * 
     */
    public Optional<Output<String>> pool() {
        return Optional.ofNullable(this.pool);
    }

    /**
     * If using a non-B2D image you can specify the ssh password. Default `tcuser` (string)
     * 
     */
    @Import(name="sshPassword")
    private @Nullable Output<String> sshPassword;

    /**
     * @return If using a non-B2D image you can specify the ssh password. Default `tcuser` (string)
     * 
     */
    public Optional<Output<String>> sshPassword() {
        return Optional.ofNullable(this.sshPassword);
    }

    /**
     * If using a non-B2D image you can specify the ssh port. Default `22` (string)
     * 
     */
    @Import(name="sshPort")
    private @Nullable Output<String> sshPort;

    /**
     * @return If using a non-B2D image you can specify the ssh port. Default `22` (string)
     * 
     */
    public Optional<Output<String>> sshPort() {
        return Optional.ofNullable(this.sshPort);
    }

    /**
     * If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
     * 
     */
    @Import(name="sshUser")
    private @Nullable Output<String> sshUser;

    /**
     * @return If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
     * 
     */
    public Optional<Output<String>> sshUser() {
        return Optional.ofNullable(this.sshUser);
    }

    /**
     * If using a non-B2D image the uploaded keys will need chown&#39;ed. Default `staff` (string)
     * 
     */
    @Import(name="sshUserGroup")
    private @Nullable Output<String> sshUserGroup;

    /**
     * @return If using a non-B2D image the uploaded keys will need chown&#39;ed. Default `staff` (string)
     * 
     */
    public Optional<Output<String>> sshUserGroup() {
        return Optional.ofNullable(this.sshUserGroup);
    }

    /**
     * vSphere tags id e.g. `urn:xxx` (list)
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return vSphere tags id e.g. `urn:xxx` (list)
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * OpenStack username (string)
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return OpenStack username (string)
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * vSphere vApp IP allocation policy. Supported values are: `dhcp`, `fixed`, `transient` and `fixedAllocated` (string)
     * 
     */
    @Import(name="vappIpAllocationPolicy")
    private @Nullable Output<String> vappIpAllocationPolicy;

    /**
     * @return vSphere vApp IP allocation policy. Supported values are: `dhcp`, `fixed`, `transient` and `fixedAllocated` (string)
     * 
     */
    public Optional<Output<String>> vappIpAllocationPolicy() {
        return Optional.ofNullable(this.vappIpAllocationPolicy);
    }

    /**
     * vSphere vApp IP protocol for this deployment. Supported values are: `IPv4` and `IPv6` (string)
     * 
     */
    @Import(name="vappIpProtocol")
    private @Nullable Output<String> vappIpProtocol;

    /**
     * @return vSphere vApp IP protocol for this deployment. Supported values are: `IPv4` and `IPv6` (string)
     * 
     */
    public Optional<Output<String>> vappIpProtocol() {
        return Optional.ofNullable(this.vappIpProtocol);
    }

    /**
     * vSphere vApp properties (list)
     * 
     */
    @Import(name="vappProperties")
    private @Nullable Output<List<String>> vappProperties;

    /**
     * @return vSphere vApp properties (list)
     * 
     */
    public Optional<Output<List<String>>> vappProperties() {
        return Optional.ofNullable(this.vappProperties);
    }

    /**
     * vSphere OVF environment transports to use for properties. Supported values are: `iso` and `com.vmware.guestInfo` (string)
     * 
     */
    @Import(name="vappTransport")
    private @Nullable Output<String> vappTransport;

    /**
     * @return vSphere OVF environment transports to use for properties. Supported values are: `iso` and `com.vmware.guestInfo` (string)
     * 
     */
    public Optional<Output<String>> vappTransport() {
        return Optional.ofNullable(this.vappTransport);
    }

    /**
     * vSphere IP/hostname for vCenter (string)
     * 
     */
    @Import(name="vcenter")
    private @Nullable Output<String> vcenter;

    /**
     * @return vSphere IP/hostname for vCenter (string)
     * 
     */
    public Optional<Output<String>> vcenter() {
        return Optional.ofNullable(this.vcenter);
    }

    /**
     * vSphere Port for vCenter Default `443` (string)
     * 
     */
    @Import(name="vcenterPort")
    private @Nullable Output<String> vcenterPort;

    /**
     * @return vSphere Port for vCenter Default `443` (string)
     * 
     */
    public Optional<Output<String>> vcenterPort() {
        return Optional.ofNullable(this.vcenterPort);
    }

    private MachineConfigV2VsphereConfigArgs() {}

    private MachineConfigV2VsphereConfigArgs(MachineConfigV2VsphereConfigArgs $) {
        this.boot2dockerUrl = $.boot2dockerUrl;
        this.cfgparams = $.cfgparams;
        this.cloneFrom = $.cloneFrom;
        this.cloudConfig = $.cloudConfig;
        this.cloudinit = $.cloudinit;
        this.contentLibrary = $.contentLibrary;
        this.cpuCount = $.cpuCount;
        this.creationType = $.creationType;
        this.customAttributes = $.customAttributes;
        this.datacenter = $.datacenter;
        this.datastore = $.datastore;
        this.datastoreCluster = $.datastoreCluster;
        this.diskSize = $.diskSize;
        this.folder = $.folder;
        this.gracefulShutdownTimeout = $.gracefulShutdownTimeout;
        this.hostsystem = $.hostsystem;
        this.memorySize = $.memorySize;
        this.networks = $.networks;
        this.password = $.password;
        this.pool = $.pool;
        this.sshPassword = $.sshPassword;
        this.sshPort = $.sshPort;
        this.sshUser = $.sshUser;
        this.sshUserGroup = $.sshUserGroup;
        this.tags = $.tags;
        this.username = $.username;
        this.vappIpAllocationPolicy = $.vappIpAllocationPolicy;
        this.vappIpProtocol = $.vappIpProtocol;
        this.vappProperties = $.vappProperties;
        this.vappTransport = $.vappTransport;
        this.vcenter = $.vcenter;
        this.vcenterPort = $.vcenterPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachineConfigV2VsphereConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachineConfigV2VsphereConfigArgs $;

        public Builder() {
            $ = new MachineConfigV2VsphereConfigArgs();
        }

        public Builder(MachineConfigV2VsphereConfigArgs defaults) {
            $ = new MachineConfigV2VsphereConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param boot2dockerUrl vSphere URL for boot2docker iso image. Default `https://releases.rancher.com/os/latest/rancheros-vmware.iso` (string)
         * 
         * @return builder
         * 
         */
        public Builder boot2dockerUrl(@Nullable Output<String> boot2dockerUrl) {
            $.boot2dockerUrl = boot2dockerUrl;
            return this;
        }

        /**
         * @param boot2dockerUrl vSphere URL for boot2docker iso image. Default `https://releases.rancher.com/os/latest/rancheros-vmware.iso` (string)
         * 
         * @return builder
         * 
         */
        public Builder boot2dockerUrl(String boot2dockerUrl) {
            return boot2dockerUrl(Output.of(boot2dockerUrl));
        }

        /**
         * @param cfgparams vSphere vm configuration parameters (used for guestinfo) (list)
         * 
         * @return builder
         * 
         */
        public Builder cfgparams(@Nullable Output<List<String>> cfgparams) {
            $.cfgparams = cfgparams;
            return this;
        }

        /**
         * @param cfgparams vSphere vm configuration parameters (used for guestinfo) (list)
         * 
         * @return builder
         * 
         */
        public Builder cfgparams(List<String> cfgparams) {
            return cfgparams(Output.of(cfgparams));
        }

        /**
         * @param cfgparams vSphere vm configuration parameters (used for guestinfo) (list)
         * 
         * @return builder
         * 
         */
        public Builder cfgparams(String... cfgparams) {
            return cfgparams(List.of(cfgparams));
        }

        /**
         * @param cloneFrom If you choose creation type vm (clone vm) a name of what vm you want to clone is required (string)
         * 
         * @return builder
         * 
         */
        public Builder cloneFrom(@Nullable Output<String> cloneFrom) {
            $.cloneFrom = cloneFrom;
            return this;
        }

        /**
         * @param cloneFrom If you choose creation type vm (clone vm) a name of what vm you want to clone is required (string)
         * 
         * @return builder
         * 
         */
        public Builder cloneFrom(String cloneFrom) {
            return cloneFrom(Output.of(cloneFrom));
        }

        /**
         * @param cloudConfig Filepath to a cloud-config yaml file to put into the ISO user-data (string)
         * 
         * @return builder
         * 
         */
        public Builder cloudConfig(@Nullable Output<String> cloudConfig) {
            $.cloudConfig = cloudConfig;
            return this;
        }

        /**
         * @param cloudConfig Filepath to a cloud-config yaml file to put into the ISO user-data (string)
         * 
         * @return builder
         * 
         */
        public Builder cloudConfig(String cloudConfig) {
            return cloudConfig(Output.of(cloudConfig));
        }

        /**
         * @param cloudinit vSphere cloud-init file or url to set in the guestinfo (string)
         * 
         * @return builder
         * 
         */
        public Builder cloudinit(@Nullable Output<String> cloudinit) {
            $.cloudinit = cloudinit;
            return this;
        }

        /**
         * @param cloudinit vSphere cloud-init file or url to set in the guestinfo (string)
         * 
         * @return builder
         * 
         */
        public Builder cloudinit(String cloudinit) {
            return cloudinit(Output.of(cloudinit));
        }

        /**
         * @param contentLibrary If you choose to clone from a content library template specify the name of the library (string)
         * 
         * @return builder
         * 
         */
        public Builder contentLibrary(@Nullable Output<String> contentLibrary) {
            $.contentLibrary = contentLibrary;
            return this;
        }

        /**
         * @param contentLibrary If you choose to clone from a content library template specify the name of the library (string)
         * 
         * @return builder
         * 
         */
        public Builder contentLibrary(String contentLibrary) {
            return contentLibrary(Output.of(contentLibrary));
        }

        /**
         * @param cpuCount vSphere CPU number for docker VM. Default `2` (string)
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(@Nullable Output<String> cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        /**
         * @param cpuCount vSphere CPU number for docker VM. Default `2` (string)
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(String cpuCount) {
            return cpuCount(Output.of(cpuCount));
        }

        /**
         * @param creationType Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy. Default `legacy` (string)
         * 
         * @return builder
         * 
         */
        public Builder creationType(@Nullable Output<String> creationType) {
            $.creationType = creationType;
            return this;
        }

        /**
         * @param creationType Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy. Default `legacy` (string)
         * 
         * @return builder
         * 
         */
        public Builder creationType(String creationType) {
            return creationType(Output.of(creationType));
        }

        /**
         * @param customAttributes vSphere custom attributes, format key/value e.g. `200=my custom value` (List)
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(@Nullable Output<List<String>> customAttributes) {
            $.customAttributes = customAttributes;
            return this;
        }

        /**
         * @param customAttributes vSphere custom attributes, format key/value e.g. `200=my custom value` (List)
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(List<String> customAttributes) {
            return customAttributes(Output.of(customAttributes));
        }

        /**
         * @param customAttributes vSphere custom attributes, format key/value e.g. `200=my custom value` (List)
         * 
         * @return builder
         * 
         */
        public Builder customAttributes(String... customAttributes) {
            return customAttributes(List.of(customAttributes));
        }

        /**
         * @param datacenter vSphere datacenter for docker VM (string)
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter vSphere datacenter for docker VM (string)
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param datastore vSphere datastore for docker VM (string)
         * 
         * @return builder
         * 
         */
        public Builder datastore(@Nullable Output<String> datastore) {
            $.datastore = datastore;
            return this;
        }

        /**
         * @param datastore vSphere datastore for docker VM (string)
         * 
         * @return builder
         * 
         */
        public Builder datastore(String datastore) {
            return datastore(Output.of(datastore));
        }

        /**
         * @param datastoreCluster vSphere datastore cluster for virtual machine (string)
         * 
         * @return builder
         * 
         */
        public Builder datastoreCluster(@Nullable Output<String> datastoreCluster) {
            $.datastoreCluster = datastoreCluster;
            return this;
        }

        /**
         * @param datastoreCluster vSphere datastore cluster for virtual machine (string)
         * 
         * @return builder
         * 
         */
        public Builder datastoreCluster(String datastoreCluster) {
            return datastoreCluster(Output.of(datastoreCluster));
        }

        /**
         * @param diskSize vSphere size of disk for docker VM (in MB). Default `20480` (string)
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<String> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize vSphere size of disk for docker VM (in MB). Default `20480` (string)
         * 
         * @return builder
         * 
         */
        public Builder diskSize(String diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param folder vSphere folder for the docker VM. This folder must already exist in the datacenter (string)
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder vSphere folder for the docker VM. This folder must already exist in the datacenter (string)
         * 
         * @return builder
         * 
         */
        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param gracefulShutdownTimeout Duration in seconds before the graceful shutdown of the VM times out and the VM is destroyed. A force destroy will be performed when the value is zero (string)
         * 
         * @return builder
         * 
         */
        public Builder gracefulShutdownTimeout(@Nullable Output<String> gracefulShutdownTimeout) {
            $.gracefulShutdownTimeout = gracefulShutdownTimeout;
            return this;
        }

        /**
         * @param gracefulShutdownTimeout Duration in seconds before the graceful shutdown of the VM times out and the VM is destroyed. A force destroy will be performed when the value is zero (string)
         * 
         * @return builder
         * 
         */
        public Builder gracefulShutdownTimeout(String gracefulShutdownTimeout) {
            return gracefulShutdownTimeout(Output.of(gracefulShutdownTimeout));
        }

        /**
         * @param hostsystem vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS (string)
         * 
         * @return builder
         * 
         */
        public Builder hostsystem(@Nullable Output<String> hostsystem) {
            $.hostsystem = hostsystem;
            return this;
        }

        /**
         * @param hostsystem vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS (string)
         * 
         * @return builder
         * 
         */
        public Builder hostsystem(String hostsystem) {
            return hostsystem(Output.of(hostsystem));
        }

        /**
         * @param memorySize vSphere size of memory for docker VM (in MB). Default `2048` (string)
         * 
         * @return builder
         * 
         */
        public Builder memorySize(@Nullable Output<String> memorySize) {
            $.memorySize = memorySize;
            return this;
        }

        /**
         * @param memorySize vSphere size of memory for docker VM (in MB). Default `2048` (string)
         * 
         * @return builder
         * 
         */
        public Builder memorySize(String memorySize) {
            return memorySize(Output.of(memorySize));
        }

        /**
         * @param networks vSphere network where the docker VM will be attached (list)
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks vSphere network where the docker VM will be attached (list)
         * 
         * @return builder
         * 
         */
        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks vSphere network where the docker VM will be attached (list)
         * 
         * @return builder
         * 
         */
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param password OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param pool vSphere resource pool for docker VM (string)
         * 
         * @return builder
         * 
         */
        public Builder pool(@Nullable Output<String> pool) {
            $.pool = pool;
            return this;
        }

        /**
         * @param pool vSphere resource pool for docker VM (string)
         * 
         * @return builder
         * 
         */
        public Builder pool(String pool) {
            return pool(Output.of(pool));
        }

        /**
         * @param sshPassword If using a non-B2D image you can specify the ssh password. Default `tcuser` (string)
         * 
         * @return builder
         * 
         */
        public Builder sshPassword(@Nullable Output<String> sshPassword) {
            $.sshPassword = sshPassword;
            return this;
        }

        /**
         * @param sshPassword If using a non-B2D image you can specify the ssh password. Default `tcuser` (string)
         * 
         * @return builder
         * 
         */
        public Builder sshPassword(String sshPassword) {
            return sshPassword(Output.of(sshPassword));
        }

        /**
         * @param sshPort If using a non-B2D image you can specify the ssh port. Default `22` (string)
         * 
         * @return builder
         * 
         */
        public Builder sshPort(@Nullable Output<String> sshPort) {
            $.sshPort = sshPort;
            return this;
        }

        /**
         * @param sshPort If using a non-B2D image you can specify the ssh port. Default `22` (string)
         * 
         * @return builder
         * 
         */
        public Builder sshPort(String sshPort) {
            return sshPort(Output.of(sshPort));
        }

        /**
         * @param sshUser If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUser(@Nullable Output<String> sshUser) {
            $.sshUser = sshUser;
            return this;
        }

        /**
         * @param sshUser If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUser(String sshUser) {
            return sshUser(Output.of(sshUser));
        }

        /**
         * @param sshUserGroup If using a non-B2D image the uploaded keys will need chown&#39;ed. Default `staff` (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUserGroup(@Nullable Output<String> sshUserGroup) {
            $.sshUserGroup = sshUserGroup;
            return this;
        }

        /**
         * @param sshUserGroup If using a non-B2D image the uploaded keys will need chown&#39;ed. Default `staff` (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUserGroup(String sshUserGroup) {
            return sshUserGroup(Output.of(sshUserGroup));
        }

        /**
         * @param tags vSphere tags id e.g. `urn:xxx` (list)
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags vSphere tags id e.g. `urn:xxx` (list)
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags vSphere tags id e.g. `urn:xxx` (list)
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param username OpenStack username (string)
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username OpenStack username (string)
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param vappIpAllocationPolicy vSphere vApp IP allocation policy. Supported values are: `dhcp`, `fixed`, `transient` and `fixedAllocated` (string)
         * 
         * @return builder
         * 
         */
        public Builder vappIpAllocationPolicy(@Nullable Output<String> vappIpAllocationPolicy) {
            $.vappIpAllocationPolicy = vappIpAllocationPolicy;
            return this;
        }

        /**
         * @param vappIpAllocationPolicy vSphere vApp IP allocation policy. Supported values are: `dhcp`, `fixed`, `transient` and `fixedAllocated` (string)
         * 
         * @return builder
         * 
         */
        public Builder vappIpAllocationPolicy(String vappIpAllocationPolicy) {
            return vappIpAllocationPolicy(Output.of(vappIpAllocationPolicy));
        }

        /**
         * @param vappIpProtocol vSphere vApp IP protocol for this deployment. Supported values are: `IPv4` and `IPv6` (string)
         * 
         * @return builder
         * 
         */
        public Builder vappIpProtocol(@Nullable Output<String> vappIpProtocol) {
            $.vappIpProtocol = vappIpProtocol;
            return this;
        }

        /**
         * @param vappIpProtocol vSphere vApp IP protocol for this deployment. Supported values are: `IPv4` and `IPv6` (string)
         * 
         * @return builder
         * 
         */
        public Builder vappIpProtocol(String vappIpProtocol) {
            return vappIpProtocol(Output.of(vappIpProtocol));
        }

        /**
         * @param vappProperties vSphere vApp properties (list)
         * 
         * @return builder
         * 
         */
        public Builder vappProperties(@Nullable Output<List<String>> vappProperties) {
            $.vappProperties = vappProperties;
            return this;
        }

        /**
         * @param vappProperties vSphere vApp properties (list)
         * 
         * @return builder
         * 
         */
        public Builder vappProperties(List<String> vappProperties) {
            return vappProperties(Output.of(vappProperties));
        }

        /**
         * @param vappProperties vSphere vApp properties (list)
         * 
         * @return builder
         * 
         */
        public Builder vappProperties(String... vappProperties) {
            return vappProperties(List.of(vappProperties));
        }

        /**
         * @param vappTransport vSphere OVF environment transports to use for properties. Supported values are: `iso` and `com.vmware.guestInfo` (string)
         * 
         * @return builder
         * 
         */
        public Builder vappTransport(@Nullable Output<String> vappTransport) {
            $.vappTransport = vappTransport;
            return this;
        }

        /**
         * @param vappTransport vSphere OVF environment transports to use for properties. Supported values are: `iso` and `com.vmware.guestInfo` (string)
         * 
         * @return builder
         * 
         */
        public Builder vappTransport(String vappTransport) {
            return vappTransport(Output.of(vappTransport));
        }

        /**
         * @param vcenter vSphere IP/hostname for vCenter (string)
         * 
         * @return builder
         * 
         */
        public Builder vcenter(@Nullable Output<String> vcenter) {
            $.vcenter = vcenter;
            return this;
        }

        /**
         * @param vcenter vSphere IP/hostname for vCenter (string)
         * 
         * @return builder
         * 
         */
        public Builder vcenter(String vcenter) {
            return vcenter(Output.of(vcenter));
        }

        /**
         * @param vcenterPort vSphere Port for vCenter Default `443` (string)
         * 
         * @return builder
         * 
         */
        public Builder vcenterPort(@Nullable Output<String> vcenterPort) {
            $.vcenterPort = vcenterPort;
            return this;
        }

        /**
         * @param vcenterPort vSphere Port for vCenter Default `443` (string)
         * 
         * @return builder
         * 
         */
        public Builder vcenterPort(String vcenterPort) {
            return vcenterPort(Output.of(vcenterPort));
        }

        public MachineConfigV2VsphereConfigArgs build() {
            return $;
        }
    }

}
