// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudCredentialVsphereCredentialConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloudCredentialVsphereCredentialConfigArgs Empty = new CloudCredentialVsphereCredentialConfigArgs();

    /**
     * vSphere password (string)
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return vSphere password (string)
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * vSphere username (string)
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return vSphere username (string)
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     * vSphere IP/hostname for vCenter (string)
     * 
     */
    @Import(name="vcenter", required=true)
    private Output<String> vcenter;

    /**
     * @return vSphere IP/hostname for vCenter (string)
     * 
     */
    public Output<String> vcenter() {
        return this.vcenter;
    }

    /**
     * vSphere Port for vCenter. Default `443` (string)
     * 
     */
    @Import(name="vcenterPort")
    private @Nullable Output<String> vcenterPort;

    /**
     * @return vSphere Port for vCenter. Default `443` (string)
     * 
     */
    public Optional<Output<String>> vcenterPort() {
        return Optional.ofNullable(this.vcenterPort);
    }

    private CloudCredentialVsphereCredentialConfigArgs() {}

    private CloudCredentialVsphereCredentialConfigArgs(CloudCredentialVsphereCredentialConfigArgs $) {
        this.password = $.password;
        this.username = $.username;
        this.vcenter = $.vcenter;
        this.vcenterPort = $.vcenterPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudCredentialVsphereCredentialConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudCredentialVsphereCredentialConfigArgs $;

        public Builder() {
            $ = new CloudCredentialVsphereCredentialConfigArgs();
        }

        public Builder(CloudCredentialVsphereCredentialConfigArgs defaults) {
            $ = new CloudCredentialVsphereCredentialConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password vSphere password (string)
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password vSphere password (string)
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param username vSphere username (string)
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username vSphere username (string)
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param vcenter vSphere IP/hostname for vCenter (string)
         * 
         * @return builder
         * 
         */
        public Builder vcenter(Output<String> vcenter) {
            $.vcenter = vcenter;
            return this;
        }

        /**
         * @param vcenter vSphere IP/hostname for vCenter (string)
         * 
         * @return builder
         * 
         */
        public Builder vcenter(String vcenter) {
            return vcenter(Output.of(vcenter));
        }

        /**
         * @param vcenterPort vSphere Port for vCenter. Default `443` (string)
         * 
         * @return builder
         * 
         */
        public Builder vcenterPort(@Nullable Output<String> vcenterPort) {
            $.vcenterPort = vcenterPort;
            return this;
        }

        /**
         * @param vcenterPort vSphere Port for vCenter. Default `443` (string)
         * 
         * @return builder
         * 
         */
        public Builder vcenterPort(String vcenterPort) {
            return vcenterPort(Output.of(vcenterPort));
        }

        public CloudCredentialVsphereCredentialConfigArgs build() {
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            $.vcenter = Objects.requireNonNull($.vcenter, "expected parameter 'vcenter' to be non-null");
            return $;
        }
    }

}
