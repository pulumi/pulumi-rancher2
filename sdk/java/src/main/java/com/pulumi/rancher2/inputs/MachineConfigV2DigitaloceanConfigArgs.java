// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MachineConfigV2DigitaloceanConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MachineConfigV2DigitaloceanConfigArgs Empty = new MachineConfigV2DigitaloceanConfigArgs();

    /**
     * Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    @Import(name="accessToken")
    private @Nullable Output<String> accessToken;

    /**
     * @return Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    public Optional<Output<String>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * Enable backups for droplet. Default `false` (bool)
     * 
     */
    @Import(name="backups")
    private @Nullable Output<Boolean> backups;

    /**
     * @return Enable backups for droplet. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> backups() {
        return Optional.ofNullable(this.backups);
    }

    /**
     * Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Enable ipv6 for droplet. Default `false` (bool)
     * 
     */
    @Import(name="ipv6")
    private @Nullable Output<Boolean> ipv6;

    /**
     * @return Enable ipv6 for droplet. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> ipv6() {
        return Optional.ofNullable(this.ipv6);
    }

    /**
     * Enable monitoring for droplet. Default `false` (bool)
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<Boolean> monitoring;

    /**
     * @return Enable monitoring for droplet. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * Enable private networking for droplet. Default `false` (bool)
     * 
     */
    @Import(name="privateNetworking")
    private @Nullable Output<Boolean> privateNetworking;

    /**
     * @return Enable private networking for droplet. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> privateNetworking() {
        return Optional.ofNullable(this.privateNetworking);
    }

    /**
     * OpenStack region name (string)
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return OpenStack region name (string)
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Digital Ocean size. Default `s-1vcpu-1gb` (string)
     * 
     */
    @Import(name="size")
    private @Nullable Output<String> size;

    /**
     * @return Digital Ocean size. Default `s-1vcpu-1gb` (string)
     * 
     */
    public Optional<Output<String>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * SSH private key contents (string)
     * 
     */
    @Import(name="sshKeyContents")
    private @Nullable Output<String> sshKeyContents;

    /**
     * @return SSH private key contents (string)
     * 
     */
    public Optional<Output<String>> sshKeyContents() {
        return Optional.ofNullable(this.sshKeyContents);
    }

    /**
     * SSH key fingerprint (string)
     * 
     */
    @Import(name="sshKeyFingerprint")
    private @Nullable Output<String> sshKeyFingerprint;

    /**
     * @return SSH key fingerprint (string)
     * 
     */
    public Optional<Output<String>> sshKeyFingerprint() {
        return Optional.ofNullable(this.sshKeyFingerprint);
    }

    /**
     * If using a non-B2D image you can specify the ssh port. Default `22` (string)
     * 
     */
    @Import(name="sshPort")
    private @Nullable Output<String> sshPort;

    /**
     * @return If using a non-B2D image you can specify the ssh port. Default `22` (string)
     * 
     */
    public Optional<Output<String>> sshPort() {
        return Optional.ofNullable(this.sshPort);
    }

    /**
     * If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
     * 
     */
    @Import(name="sshUser")
    private @Nullable Output<String> sshUser;

    /**
     * @return If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
     * 
     */
    public Optional<Output<String>> sshUser() {
        return Optional.ofNullable(this.sshUser);
    }

    /**
     * vSphere tags id e.g. `urn:xxx` (list)
     * 
     */
    @Import(name="tags")
    private @Nullable Output<String> tags;

    /**
     * @return vSphere tags id e.g. `urn:xxx` (list)
     * 
     */
    public Optional<Output<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Path to file with cloud-init user-data (string)
     * 
     */
    @Import(name="userdata")
    private @Nullable Output<String> userdata;

    /**
     * @return Path to file with cloud-init user-data (string)
     * 
     */
    public Optional<Output<String>> userdata() {
        return Optional.ofNullable(this.userdata);
    }

    private MachineConfigV2DigitaloceanConfigArgs() {}

    private MachineConfigV2DigitaloceanConfigArgs(MachineConfigV2DigitaloceanConfigArgs $) {
        this.accessToken = $.accessToken;
        this.backups = $.backups;
        this.image = $.image;
        this.ipv6 = $.ipv6;
        this.monitoring = $.monitoring;
        this.privateNetworking = $.privateNetworking;
        this.region = $.region;
        this.size = $.size;
        this.sshKeyContents = $.sshKeyContents;
        this.sshKeyFingerprint = $.sshKeyFingerprint;
        this.sshPort = $.sshPort;
        this.sshUser = $.sshUser;
        this.tags = $.tags;
        this.userdata = $.userdata;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachineConfigV2DigitaloceanConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachineConfigV2DigitaloceanConfigArgs $;

        public Builder() {
            $ = new MachineConfigV2DigitaloceanConfigArgs();
        }

        public Builder(MachineConfigV2DigitaloceanConfigArgs defaults) {
            $ = new MachineConfigV2DigitaloceanConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder accessToken(@Nullable Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param backups Enable backups for droplet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder backups(@Nullable Output<Boolean> backups) {
            $.backups = backups;
            return this;
        }

        /**
         * @param backups Enable backups for droplet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder backups(Boolean backups) {
            return backups(Output.of(backups));
        }

        /**
         * @param image Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param ipv6 Enable ipv6 for droplet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder ipv6(@Nullable Output<Boolean> ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        /**
         * @param ipv6 Enable ipv6 for droplet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder ipv6(Boolean ipv6) {
            return ipv6(Output.of(ipv6));
        }

        /**
         * @param monitoring Enable monitoring for droplet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder monitoring(@Nullable Output<Boolean> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        /**
         * @param monitoring Enable monitoring for droplet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder monitoring(Boolean monitoring) {
            return monitoring(Output.of(monitoring));
        }

        /**
         * @param privateNetworking Enable private networking for droplet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder privateNetworking(@Nullable Output<Boolean> privateNetworking) {
            $.privateNetworking = privateNetworking;
            return this;
        }

        /**
         * @param privateNetworking Enable private networking for droplet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder privateNetworking(Boolean privateNetworking) {
            return privateNetworking(Output.of(privateNetworking));
        }

        /**
         * @param region OpenStack region name (string)
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region OpenStack region name (string)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param size Digital Ocean size. Default `s-1vcpu-1gb` (string)
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<String> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Digital Ocean size. Default `s-1vcpu-1gb` (string)
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Output.of(size));
        }

        /**
         * @param sshKeyContents SSH private key contents (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKeyContents(@Nullable Output<String> sshKeyContents) {
            $.sshKeyContents = sshKeyContents;
            return this;
        }

        /**
         * @param sshKeyContents SSH private key contents (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKeyContents(String sshKeyContents) {
            return sshKeyContents(Output.of(sshKeyContents));
        }

        /**
         * @param sshKeyFingerprint SSH key fingerprint (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKeyFingerprint(@Nullable Output<String> sshKeyFingerprint) {
            $.sshKeyFingerprint = sshKeyFingerprint;
            return this;
        }

        /**
         * @param sshKeyFingerprint SSH key fingerprint (string)
         * 
         * @return builder
         * 
         */
        public Builder sshKeyFingerprint(String sshKeyFingerprint) {
            return sshKeyFingerprint(Output.of(sshKeyFingerprint));
        }

        /**
         * @param sshPort If using a non-B2D image you can specify the ssh port. Default `22` (string)
         * 
         * @return builder
         * 
         */
        public Builder sshPort(@Nullable Output<String> sshPort) {
            $.sshPort = sshPort;
            return this;
        }

        /**
         * @param sshPort If using a non-B2D image you can specify the ssh port. Default `22` (string)
         * 
         * @return builder
         * 
         */
        public Builder sshPort(String sshPort) {
            return sshPort(Output.of(sshPort));
        }

        /**
         * @param sshUser If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUser(@Nullable Output<String> sshUser) {
            $.sshUser = sshUser;
            return this;
        }

        /**
         * @param sshUser If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUser(String sshUser) {
            return sshUser(Output.of(sshUser));
        }

        /**
         * @param tags vSphere tags id e.g. `urn:xxx` (list)
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags vSphere tags id e.g. `urn:xxx` (list)
         * 
         * @return builder
         * 
         */
        public Builder tags(String tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param userdata Path to file with cloud-init user-data (string)
         * 
         * @return builder
         * 
         */
        public Builder userdata(@Nullable Output<String> userdata) {
            $.userdata = userdata;
            return this;
        }

        /**
         * @param userdata Path to file with cloud-init user-data (string)
         * 
         * @return builder
         * 
         */
        public Builder userdata(String userdata) {
            return userdata(Output.of(userdata));
        }

        public MachineConfigV2DigitaloceanConfigArgs build() {
            return $;
        }
    }

}
