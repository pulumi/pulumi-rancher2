// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterAksConfig {
    /**
     * @return The secret of an Azure Active Directory server application (string)
     * 
     */
    private @Nullable String aadServerAppSecret;
    /**
     * @return The ID of an Azure Active Directory tenant (string)
     * 
     */
    private @Nullable String aadTenantId;
    /**
     * @return The ID of an Azure Active Directory client application of type \&#34;Native\&#34;. This application is for user login via kubectl (string)
     * 
     */
    private @Nullable String addClientAppId;
    /**
     * @return The ID of an Azure Active Directory server application of type \&#34;Web app/API\&#34;. This application represents the managed cluster&#39;s apiserver (Server application) (string)
     * 
     */
    private @Nullable String addServerAppId;
    /**
     * @return The administrator username to use for Linux hosts. Default `azureuser` (string)
     * 
     */
    private @Nullable String adminUsername;
    /**
     * @return DNS prefix to be used to create the FQDN for the agent pool (string)
     * 
     */
    private String agentDnsPrefix;
    /**
     * @return GB size to be used to specify the disk for every machine in the agent pool. If you specify 0, it will apply the default according to the \&#34;agent vm size\&#34; specified. Default `0` (int)
     * 
     */
    private @Nullable Integer agentOsDiskSize;
    /**
     * @return Name for the agent pool, upto 12 alphanumeric characters. Default `agentpool0` (string)
     * 
     */
    private @Nullable String agentPoolName;
    /**
     * @return Storage profile specifies what kind of storage used on machine in the agent pool. Chooses from [ManagedDisks StorageAccount]. Default `ManagedDisks` (string)
     * 
     */
    private @Nullable String agentStorageProfile;
    /**
     * @return Size of machine in the agent pool. Default `Standard_D1_v2` (string)
     * 
     */
    private @Nullable String agentVmSize;
    /**
     * @return The AKS auth base url (string)
     * 
     */
    private @Nullable String authBaseUrl;
    /**
     * @return The AKS base url (string)
     * 
     */
    private @Nullable String baseUrl;
    /**
     * @return Azure client ID to use (string)
     * 
     */
    private String clientId;
    /**
     * @return Azure client secret associated with the \&#34;client id\&#34; (string)
     * 
     */
    private String clientSecret;
    /**
     * @return The AKS node pool count. Default: `1` (int)
     * 
     */
    private @Nullable Integer count;
    /**
     * @return An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes Service address range specified in \&#34;service cidr\&#34;. Default `10.0.0.10` (string)
     * 
     */
    private @Nullable String dnsServiceIp;
    /**
     * @return A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes Service address range specified in \&#34;service cidr\&#34;. Default `172.17.0.1/16` (string)
     * 
     */
    private @Nullable String dockerBridgeCidr;
    /**
     * @return Enable the Kubernetes ingress with automatic public DNS name creation. Default `false` (bool)
     * 
     */
    private @Nullable Boolean enableHttpApplicationRouting;
    /**
     * @return Turn on Azure Log Analytics monitoring. Uses the Log Analytics \&#34;Default\&#34; workspace if it exists, else creates one. if using an existing workspace, specifies \&#34;log analytics workspace resource id\&#34;. Default `true` (bool)
     * 
     */
    private @Nullable Boolean enableMonitoring;
    /**
     * @return The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    private String kubernetesVersion;
    /**
     * @return The AKS load balancer sku (string)
     * 
     */
    private @Nullable String loadBalancerSku;
    /**
     * @return Azure Kubernetes cluster location. Default `eastus` (string)
     * 
     */
    private @Nullable String location;
    /**
     * @return The name of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses &#39;{resource group}-{subscription id}-{location code}&#39; (string)
     * 
     */
    private @Nullable String logAnalyticsWorkspace;
    /**
     * @return The resource group of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses the &#39;Cluster&#39; resource group (string)
     * 
     */
    private @Nullable String logAnalyticsWorkspaceResourceGroup;
    /**
     * @return DNS prefix to use the Kubernetes cluster control pane (string)
     * 
     */
    private String masterDnsPrefix;
    /**
     * @return The AKS node pool max pods. Default: `110` (int)
     * 
     */
    private @Nullable Integer maxPods;
    /**
     * @return The AKS network plugin. Required if `imported=false` (string)
     * 
     */
    private @Nullable String networkPlugin;
    /**
     * @return The AKS network policy (string)
     * 
     */
    private @Nullable String networkPolicy;
    /**
     * @return A CIDR IP range from which to assign Kubernetes Pod IPs (string)
     * 
     */
    private @Nullable String podCidr;
    /**
     * @return The AKS resource group (string)
     * 
     */
    private String resourceGroup;
    /**
     * @return A CIDR IP range from which to assign Kubernetes Service IPs (string)
     * 
     */
    private @Nullable String serviceCidr;
    /**
     * @return Contents of the SSH public key used to authenticate with Linux hosts (string)
     * 
     */
    private String sshPublicKeyContents;
    /**
     * @return The AKS subnet (string)
     * 
     */
    private String subnet;
    /**
     * @return Subscription credentials which uniquely identify Microsoft Azure subscription (string)
     * 
     */
    private String subscriptionId;
    /**
     * @return Use `tags` argument instead as []string
     * 
     * @deprecated
     * Use tags argument instead as []string
     * 
     */
    @Deprecated /* Use tags argument instead as []string */
    private @Nullable Map<String,Object> tag;
    /**
     * @return The GKE node config tags (List)
     * 
     */
    private @Nullable List<String> tags;
    /**
     * @return Azure tenant ID to use (string)
     * 
     */
    private String tenantId;
    /**
     * @return The name of the virtual network to use. If it&#39;s not specified Rancher will create a new VPC (string)
     * 
     */
    private String virtualNetwork;
    /**
     * @return The AKS virtual network resource group (string)
     * 
     */
    private String virtualNetworkResourceGroup;

    private ClusterAksConfig() {}
    /**
     * @return The secret of an Azure Active Directory server application (string)
     * 
     */
    public Optional<String> aadServerAppSecret() {
        return Optional.ofNullable(this.aadServerAppSecret);
    }
    /**
     * @return The ID of an Azure Active Directory tenant (string)
     * 
     */
    public Optional<String> aadTenantId() {
        return Optional.ofNullable(this.aadTenantId);
    }
    /**
     * @return The ID of an Azure Active Directory client application of type \&#34;Native\&#34;. This application is for user login via kubectl (string)
     * 
     */
    public Optional<String> addClientAppId() {
        return Optional.ofNullable(this.addClientAppId);
    }
    /**
     * @return The ID of an Azure Active Directory server application of type \&#34;Web app/API\&#34;. This application represents the managed cluster&#39;s apiserver (Server application) (string)
     * 
     */
    public Optional<String> addServerAppId() {
        return Optional.ofNullable(this.addServerAppId);
    }
    /**
     * @return The administrator username to use for Linux hosts. Default `azureuser` (string)
     * 
     */
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    /**
     * @return DNS prefix to be used to create the FQDN for the agent pool (string)
     * 
     */
    public String agentDnsPrefix() {
        return this.agentDnsPrefix;
    }
    /**
     * @return GB size to be used to specify the disk for every machine in the agent pool. If you specify 0, it will apply the default according to the \&#34;agent vm size\&#34; specified. Default `0` (int)
     * 
     */
    public Optional<Integer> agentOsDiskSize() {
        return Optional.ofNullable(this.agentOsDiskSize);
    }
    /**
     * @return Name for the agent pool, upto 12 alphanumeric characters. Default `agentpool0` (string)
     * 
     */
    public Optional<String> agentPoolName() {
        return Optional.ofNullable(this.agentPoolName);
    }
    /**
     * @return Storage profile specifies what kind of storage used on machine in the agent pool. Chooses from [ManagedDisks StorageAccount]. Default `ManagedDisks` (string)
     * 
     */
    public Optional<String> agentStorageProfile() {
        return Optional.ofNullable(this.agentStorageProfile);
    }
    /**
     * @return Size of machine in the agent pool. Default `Standard_D1_v2` (string)
     * 
     */
    public Optional<String> agentVmSize() {
        return Optional.ofNullable(this.agentVmSize);
    }
    /**
     * @return The AKS auth base url (string)
     * 
     */
    public Optional<String> authBaseUrl() {
        return Optional.ofNullable(this.authBaseUrl);
    }
    /**
     * @return The AKS base url (string)
     * 
     */
    public Optional<String> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }
    /**
     * @return Azure client ID to use (string)
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Azure client secret associated with the \&#34;client id\&#34; (string)
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return The AKS node pool count. Default: `1` (int)
     * 
     */
    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }
    /**
     * @return An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes Service address range specified in \&#34;service cidr\&#34;. Default `10.0.0.10` (string)
     * 
     */
    public Optional<String> dnsServiceIp() {
        return Optional.ofNullable(this.dnsServiceIp);
    }
    /**
     * @return A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes Service address range specified in \&#34;service cidr\&#34;. Default `172.17.0.1/16` (string)
     * 
     */
    public Optional<String> dockerBridgeCidr() {
        return Optional.ofNullable(this.dockerBridgeCidr);
    }
    /**
     * @return Enable the Kubernetes ingress with automatic public DNS name creation. Default `false` (bool)
     * 
     */
    public Optional<Boolean> enableHttpApplicationRouting() {
        return Optional.ofNullable(this.enableHttpApplicationRouting);
    }
    /**
     * @return Turn on Azure Log Analytics monitoring. Uses the Log Analytics \&#34;Default\&#34; workspace if it exists, else creates one. if using an existing workspace, specifies \&#34;log analytics workspace resource id\&#34;. Default `true` (bool)
     * 
     */
    public Optional<Boolean> enableMonitoring() {
        return Optional.ofNullable(this.enableMonitoring);
    }
    /**
     * @return The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    /**
     * @return The AKS load balancer sku (string)
     * 
     */
    public Optional<String> loadBalancerSku() {
        return Optional.ofNullable(this.loadBalancerSku);
    }
    /**
     * @return Azure Kubernetes cluster location. Default `eastus` (string)
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return The name of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses &#39;{resource group}-{subscription id}-{location code}&#39; (string)
     * 
     */
    public Optional<String> logAnalyticsWorkspace() {
        return Optional.ofNullable(this.logAnalyticsWorkspace);
    }
    /**
     * @return The resource group of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses the &#39;Cluster&#39; resource group (string)
     * 
     */
    public Optional<String> logAnalyticsWorkspaceResourceGroup() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceResourceGroup);
    }
    /**
     * @return DNS prefix to use the Kubernetes cluster control pane (string)
     * 
     */
    public String masterDnsPrefix() {
        return this.masterDnsPrefix;
    }
    /**
     * @return The AKS node pool max pods. Default: `110` (int)
     * 
     */
    public Optional<Integer> maxPods() {
        return Optional.ofNullable(this.maxPods);
    }
    /**
     * @return The AKS network plugin. Required if `imported=false` (string)
     * 
     */
    public Optional<String> networkPlugin() {
        return Optional.ofNullable(this.networkPlugin);
    }
    /**
     * @return The AKS network policy (string)
     * 
     */
    public Optional<String> networkPolicy() {
        return Optional.ofNullable(this.networkPolicy);
    }
    /**
     * @return A CIDR IP range from which to assign Kubernetes Pod IPs (string)
     * 
     */
    public Optional<String> podCidr() {
        return Optional.ofNullable(this.podCidr);
    }
    /**
     * @return The AKS resource group (string)
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return A CIDR IP range from which to assign Kubernetes Service IPs (string)
     * 
     */
    public Optional<String> serviceCidr() {
        return Optional.ofNullable(this.serviceCidr);
    }
    /**
     * @return Contents of the SSH public key used to authenticate with Linux hosts (string)
     * 
     */
    public String sshPublicKeyContents() {
        return this.sshPublicKeyContents;
    }
    /**
     * @return The AKS subnet (string)
     * 
     */
    public String subnet() {
        return this.subnet;
    }
    /**
     * @return Subscription credentials which uniquely identify Microsoft Azure subscription (string)
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return Use `tags` argument instead as []string
     * 
     * @deprecated
     * Use tags argument instead as []string
     * 
     */
    @Deprecated /* Use tags argument instead as []string */
    public Map<String,Object> tag() {
        return this.tag == null ? Map.of() : this.tag;
    }
    /**
     * @return The GKE node config tags (List)
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    /**
     * @return Azure tenant ID to use (string)
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return The name of the virtual network to use. If it&#39;s not specified Rancher will create a new VPC (string)
     * 
     */
    public String virtualNetwork() {
        return this.virtualNetwork;
    }
    /**
     * @return The AKS virtual network resource group (string)
     * 
     */
    public String virtualNetworkResourceGroup() {
        return this.virtualNetworkResourceGroup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterAksConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aadServerAppSecret;
        private @Nullable String aadTenantId;
        private @Nullable String addClientAppId;
        private @Nullable String addServerAppId;
        private @Nullable String adminUsername;
        private String agentDnsPrefix;
        private @Nullable Integer agentOsDiskSize;
        private @Nullable String agentPoolName;
        private @Nullable String agentStorageProfile;
        private @Nullable String agentVmSize;
        private @Nullable String authBaseUrl;
        private @Nullable String baseUrl;
        private String clientId;
        private String clientSecret;
        private @Nullable Integer count;
        private @Nullable String dnsServiceIp;
        private @Nullable String dockerBridgeCidr;
        private @Nullable Boolean enableHttpApplicationRouting;
        private @Nullable Boolean enableMonitoring;
        private String kubernetesVersion;
        private @Nullable String loadBalancerSku;
        private @Nullable String location;
        private @Nullable String logAnalyticsWorkspace;
        private @Nullable String logAnalyticsWorkspaceResourceGroup;
        private String masterDnsPrefix;
        private @Nullable Integer maxPods;
        private @Nullable String networkPlugin;
        private @Nullable String networkPolicy;
        private @Nullable String podCidr;
        private String resourceGroup;
        private @Nullable String serviceCidr;
        private String sshPublicKeyContents;
        private String subnet;
        private String subscriptionId;
        private @Nullable Map<String,Object> tag;
        private @Nullable List<String> tags;
        private String tenantId;
        private String virtualNetwork;
        private String virtualNetworkResourceGroup;
        public Builder() {}
        public Builder(ClusterAksConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadServerAppSecret = defaults.aadServerAppSecret;
    	      this.aadTenantId = defaults.aadTenantId;
    	      this.addClientAppId = defaults.addClientAppId;
    	      this.addServerAppId = defaults.addServerAppId;
    	      this.adminUsername = defaults.adminUsername;
    	      this.agentDnsPrefix = defaults.agentDnsPrefix;
    	      this.agentOsDiskSize = defaults.agentOsDiskSize;
    	      this.agentPoolName = defaults.agentPoolName;
    	      this.agentStorageProfile = defaults.agentStorageProfile;
    	      this.agentVmSize = defaults.agentVmSize;
    	      this.authBaseUrl = defaults.authBaseUrl;
    	      this.baseUrl = defaults.baseUrl;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.count = defaults.count;
    	      this.dnsServiceIp = defaults.dnsServiceIp;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.enableHttpApplicationRouting = defaults.enableHttpApplicationRouting;
    	      this.enableMonitoring = defaults.enableMonitoring;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.location = defaults.location;
    	      this.logAnalyticsWorkspace = defaults.logAnalyticsWorkspace;
    	      this.logAnalyticsWorkspaceResourceGroup = defaults.logAnalyticsWorkspaceResourceGroup;
    	      this.masterDnsPrefix = defaults.masterDnsPrefix;
    	      this.maxPods = defaults.maxPods;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.podCidr = defaults.podCidr;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.serviceCidr = defaults.serviceCidr;
    	      this.sshPublicKeyContents = defaults.sshPublicKeyContents;
    	      this.subnet = defaults.subnet;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tag = defaults.tag;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.virtualNetwork = defaults.virtualNetwork;
    	      this.virtualNetworkResourceGroup = defaults.virtualNetworkResourceGroup;
        }

        @CustomType.Setter
        public Builder aadServerAppSecret(@Nullable String aadServerAppSecret) {

            this.aadServerAppSecret = aadServerAppSecret;
            return this;
        }
        @CustomType.Setter
        public Builder aadTenantId(@Nullable String aadTenantId) {

            this.aadTenantId = aadTenantId;
            return this;
        }
        @CustomType.Setter
        public Builder addClientAppId(@Nullable String addClientAppId) {

            this.addClientAppId = addClientAppId;
            return this;
        }
        @CustomType.Setter
        public Builder addServerAppId(@Nullable String addServerAppId) {

            this.addServerAppId = addServerAppId;
            return this;
        }
        @CustomType.Setter
        public Builder adminUsername(@Nullable String adminUsername) {

            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder agentDnsPrefix(String agentDnsPrefix) {
            if (agentDnsPrefix == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "agentDnsPrefix");
            }
            this.agentDnsPrefix = agentDnsPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder agentOsDiskSize(@Nullable Integer agentOsDiskSize) {

            this.agentOsDiskSize = agentOsDiskSize;
            return this;
        }
        @CustomType.Setter
        public Builder agentPoolName(@Nullable String agentPoolName) {

            this.agentPoolName = agentPoolName;
            return this;
        }
        @CustomType.Setter
        public Builder agentStorageProfile(@Nullable String agentStorageProfile) {

            this.agentStorageProfile = agentStorageProfile;
            return this;
        }
        @CustomType.Setter
        public Builder agentVmSize(@Nullable String agentVmSize) {

            this.agentVmSize = agentVmSize;
            return this;
        }
        @CustomType.Setter
        public Builder authBaseUrl(@Nullable String authBaseUrl) {

            this.authBaseUrl = authBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder baseUrl(@Nullable String baseUrl) {

            this.baseUrl = baseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder count(@Nullable Integer count) {

            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServiceIp(@Nullable String dnsServiceIp) {

            this.dnsServiceIp = dnsServiceIp;
            return this;
        }
        @CustomType.Setter
        public Builder dockerBridgeCidr(@Nullable String dockerBridgeCidr) {

            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        @CustomType.Setter
        public Builder enableHttpApplicationRouting(@Nullable Boolean enableHttpApplicationRouting) {

            this.enableHttpApplicationRouting = enableHttpApplicationRouting;
            return this;
        }
        @CustomType.Setter
        public Builder enableMonitoring(@Nullable Boolean enableMonitoring) {

            this.enableMonitoring = enableMonitoring;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            if (kubernetesVersion == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "kubernetesVersion");
            }
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerSku(@Nullable String loadBalancerSku) {

            this.loadBalancerSku = loadBalancerSku;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspace(@Nullable String logAnalyticsWorkspace) {

            this.logAnalyticsWorkspace = logAnalyticsWorkspace;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspaceResourceGroup(@Nullable String logAnalyticsWorkspaceResourceGroup) {

            this.logAnalyticsWorkspaceResourceGroup = logAnalyticsWorkspaceResourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder masterDnsPrefix(String masterDnsPrefix) {
            if (masterDnsPrefix == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "masterDnsPrefix");
            }
            this.masterDnsPrefix = masterDnsPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder maxPods(@Nullable Integer maxPods) {

            this.maxPods = maxPods;
            return this;
        }
        @CustomType.Setter
        public Builder networkPlugin(@Nullable String networkPlugin) {

            this.networkPlugin = networkPlugin;
            return this;
        }
        @CustomType.Setter
        public Builder networkPolicy(@Nullable String networkPolicy) {

            this.networkPolicy = networkPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder podCidr(@Nullable String podCidr) {

            this.podCidr = podCidr;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            if (resourceGroup == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "resourceGroup");
            }
            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder serviceCidr(@Nullable String serviceCidr) {

            this.serviceCidr = serviceCidr;
            return this;
        }
        @CustomType.Setter
        public Builder sshPublicKeyContents(String sshPublicKeyContents) {
            if (sshPublicKeyContents == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "sshPublicKeyContents");
            }
            this.sshPublicKeyContents = sshPublicKeyContents;
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            if (subnet == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "subnet");
            }
            this.subnet = subnet;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            if (subscriptionId == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "subscriptionId");
            }
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder tag(@Nullable Map<String,Object> tag) {

            this.tag = tag;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetwork(String virtualNetwork) {
            if (virtualNetwork == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "virtualNetwork");
            }
            this.virtualNetwork = virtualNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkResourceGroup(String virtualNetworkResourceGroup) {
            if (virtualNetworkResourceGroup == null) {
              throw new MissingRequiredPropertyException("ClusterAksConfig", "virtualNetworkResourceGroup");
            }
            this.virtualNetworkResourceGroup = virtualNetworkResourceGroup;
            return this;
        }
        public ClusterAksConfig build() {
            final var _resultValue = new ClusterAksConfig();
            _resultValue.aadServerAppSecret = aadServerAppSecret;
            _resultValue.aadTenantId = aadTenantId;
            _resultValue.addClientAppId = addClientAppId;
            _resultValue.addServerAppId = addServerAppId;
            _resultValue.adminUsername = adminUsername;
            _resultValue.agentDnsPrefix = agentDnsPrefix;
            _resultValue.agentOsDiskSize = agentOsDiskSize;
            _resultValue.agentPoolName = agentPoolName;
            _resultValue.agentStorageProfile = agentStorageProfile;
            _resultValue.agentVmSize = agentVmSize;
            _resultValue.authBaseUrl = authBaseUrl;
            _resultValue.baseUrl = baseUrl;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.count = count;
            _resultValue.dnsServiceIp = dnsServiceIp;
            _resultValue.dockerBridgeCidr = dockerBridgeCidr;
            _resultValue.enableHttpApplicationRouting = enableHttpApplicationRouting;
            _resultValue.enableMonitoring = enableMonitoring;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.loadBalancerSku = loadBalancerSku;
            _resultValue.location = location;
            _resultValue.logAnalyticsWorkspace = logAnalyticsWorkspace;
            _resultValue.logAnalyticsWorkspaceResourceGroup = logAnalyticsWorkspaceResourceGroup;
            _resultValue.masterDnsPrefix = masterDnsPrefix;
            _resultValue.maxPods = maxPods;
            _resultValue.networkPlugin = networkPlugin;
            _resultValue.networkPolicy = networkPolicy;
            _resultValue.podCidr = podCidr;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.serviceCidr = serviceCidr;
            _resultValue.sshPublicKeyContents = sshPublicKeyContents;
            _resultValue.subnet = subnet;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.tag = tag;
            _resultValue.tags = tags;
            _resultValue.tenantId = tenantId;
            _resultValue.virtualNetwork = virtualNetwork;
            _resultValue.virtualNetworkResourceGroup = virtualNetworkResourceGroup;
            return _resultValue;
        }
    }
}
