// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MachineConfigV2GoogleConfig {
    /**
     * @return GCE Instance External IP
     * 
     */
    private @Nullable String address;
    /**
     * @return GCE service account auth json file path
     * 
     */
    private @Nullable String authEncodedJson;
    /**
     * @return GCE Instance Disk Size (in GB)
     * 
     */
    private String diskSize;
    /**
     * @return GCE Instance Disk Type
     * 
     */
    private String diskType;
    /**
     * @return A prefix to be added to firewall rules created when exposing ports publicly. Required if exposing ports publicly.
     * 
     */
    private @Nullable String externalFirewallRulePrefix;
    /**
     * @return A prefix to be added to an internal firewall rule created to ensure virtual machines can communicate with one another.
     * 
     */
    private @Nullable String internalFirewallRulePrefix;
    /**
     * @return GCE instance image absolute URL
     * 
     */
    private String machineImage;
    /**
     * @return GCE instance type
     * 
     */
    private String machineType;
    /**
     * @return The network to provision virtual machines within
     * 
     */
    private String network;
    /**
     * @return A list of ports to be opened publicly. &#39;external_firewall_rule_prefix&#39; must also be set
     * 
     */
    private @Nullable List<String> openPorts;
    /**
     * @return Indicates if the virtual machine can be preempted
     * 
     */
    private @Nullable Boolean preemptable;
    /**
     * @return The GCP project to create virtual machines within
     * 
     */
    private String project;
    /**
     * @return Access scopes to be set on the virtual machine
     * 
     */
    private @Nullable String scopes;
    /**
     * @return The subnetwork to provision virtual machines within
     * 
     */
    private @Nullable String subNetwork;
    /**
     * @return A set of network tags to be added to each VM, in the format of &#39;tag1,tag2&#39;
     * 
     */
    private @Nullable String tags;
    /**
     * @return Indicates if an existing VM should be used. This is not currently support in Rancher.
     * 
     */
    private @Nullable Boolean useExisting;
    /**
     * @return Indicates if the virtual machines should use an internal IP
     * 
     */
    private @Nullable Boolean useInternalIp;
    /**
     * @return Indicates if the virtual machines should use an internal IP only and not be assigned a public IP
     * 
     */
    private @Nullable Boolean useInternalIpOnly;
    /**
     * @return GCE user-data file path
     * 
     */
    private @Nullable String userData;
    /**
     * @return The username to be set when logging into the virtual machines
     * 
     */
    private @Nullable String username;
    /**
     * @return A set of labels to be added to each VM, in the format of &#39;key1,value1,key2,value2&#39;
     * 
     */
    private @Nullable String vmLabels;
    /**
     * @return The region and zone to create virtual machines within (e.g. us-east1-b)
     * 
     */
    private String zone;

    private MachineConfigV2GoogleConfig() {}
    /**
     * @return GCE Instance External IP
     * 
     */
    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }
    /**
     * @return GCE service account auth json file path
     * 
     */
    public Optional<String> authEncodedJson() {
        return Optional.ofNullable(this.authEncodedJson);
    }
    /**
     * @return GCE Instance Disk Size (in GB)
     * 
     */
    public String diskSize() {
        return this.diskSize;
    }
    /**
     * @return GCE Instance Disk Type
     * 
     */
    public String diskType() {
        return this.diskType;
    }
    /**
     * @return A prefix to be added to firewall rules created when exposing ports publicly. Required if exposing ports publicly.
     * 
     */
    public Optional<String> externalFirewallRulePrefix() {
        return Optional.ofNullable(this.externalFirewallRulePrefix);
    }
    /**
     * @return A prefix to be added to an internal firewall rule created to ensure virtual machines can communicate with one another.
     * 
     */
    public Optional<String> internalFirewallRulePrefix() {
        return Optional.ofNullable(this.internalFirewallRulePrefix);
    }
    /**
     * @return GCE instance image absolute URL
     * 
     */
    public String machineImage() {
        return this.machineImage;
    }
    /**
     * @return GCE instance type
     * 
     */
    public String machineType() {
        return this.machineType;
    }
    /**
     * @return The network to provision virtual machines within
     * 
     */
    public String network() {
        return this.network;
    }
    /**
     * @return A list of ports to be opened publicly. &#39;external_firewall_rule_prefix&#39; must also be set
     * 
     */
    public List<String> openPorts() {
        return this.openPorts == null ? List.of() : this.openPorts;
    }
    /**
     * @return Indicates if the virtual machine can be preempted
     * 
     */
    public Optional<Boolean> preemptable() {
        return Optional.ofNullable(this.preemptable);
    }
    /**
     * @return The GCP project to create virtual machines within
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return Access scopes to be set on the virtual machine
     * 
     */
    public Optional<String> scopes() {
        return Optional.ofNullable(this.scopes);
    }
    /**
     * @return The subnetwork to provision virtual machines within
     * 
     */
    public Optional<String> subNetwork() {
        return Optional.ofNullable(this.subNetwork);
    }
    /**
     * @return A set of network tags to be added to each VM, in the format of &#39;tag1,tag2&#39;
     * 
     */
    public Optional<String> tags() {
        return Optional.ofNullable(this.tags);
    }
    /**
     * @return Indicates if an existing VM should be used. This is not currently support in Rancher.
     * 
     */
    public Optional<Boolean> useExisting() {
        return Optional.ofNullable(this.useExisting);
    }
    /**
     * @return Indicates if the virtual machines should use an internal IP
     * 
     */
    public Optional<Boolean> useInternalIp() {
        return Optional.ofNullable(this.useInternalIp);
    }
    /**
     * @return Indicates if the virtual machines should use an internal IP only and not be assigned a public IP
     * 
     */
    public Optional<Boolean> useInternalIpOnly() {
        return Optional.ofNullable(this.useInternalIpOnly);
    }
    /**
     * @return GCE user-data file path
     * 
     */
    public Optional<String> userData() {
        return Optional.ofNullable(this.userData);
    }
    /**
     * @return The username to be set when logging into the virtual machines
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    /**
     * @return A set of labels to be added to each VM, in the format of &#39;key1,value1,key2,value2&#39;
     * 
     */
    public Optional<String> vmLabels() {
        return Optional.ofNullable(this.vmLabels);
    }
    /**
     * @return The region and zone to create virtual machines within (e.g. us-east1-b)
     * 
     */
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MachineConfigV2GoogleConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String address;
        private @Nullable String authEncodedJson;
        private String diskSize;
        private String diskType;
        private @Nullable String externalFirewallRulePrefix;
        private @Nullable String internalFirewallRulePrefix;
        private String machineImage;
        private String machineType;
        private String network;
        private @Nullable List<String> openPorts;
        private @Nullable Boolean preemptable;
        private String project;
        private @Nullable String scopes;
        private @Nullable String subNetwork;
        private @Nullable String tags;
        private @Nullable Boolean useExisting;
        private @Nullable Boolean useInternalIp;
        private @Nullable Boolean useInternalIpOnly;
        private @Nullable String userData;
        private @Nullable String username;
        private @Nullable String vmLabels;
        private String zone;
        public Builder() {}
        public Builder(MachineConfigV2GoogleConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.authEncodedJson = defaults.authEncodedJson;
    	      this.diskSize = defaults.diskSize;
    	      this.diskType = defaults.diskType;
    	      this.externalFirewallRulePrefix = defaults.externalFirewallRulePrefix;
    	      this.internalFirewallRulePrefix = defaults.internalFirewallRulePrefix;
    	      this.machineImage = defaults.machineImage;
    	      this.machineType = defaults.machineType;
    	      this.network = defaults.network;
    	      this.openPorts = defaults.openPorts;
    	      this.preemptable = defaults.preemptable;
    	      this.project = defaults.project;
    	      this.scopes = defaults.scopes;
    	      this.subNetwork = defaults.subNetwork;
    	      this.tags = defaults.tags;
    	      this.useExisting = defaults.useExisting;
    	      this.useInternalIp = defaults.useInternalIp;
    	      this.useInternalIpOnly = defaults.useInternalIpOnly;
    	      this.userData = defaults.userData;
    	      this.username = defaults.username;
    	      this.vmLabels = defaults.vmLabels;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder address(@Nullable String address) {

            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder authEncodedJson(@Nullable String authEncodedJson) {

            this.authEncodedJson = authEncodedJson;
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(String diskSize) {
            if (diskSize == null) {
              throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfig", "diskSize");
            }
            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            if (diskType == null) {
              throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfig", "diskType");
            }
            this.diskType = diskType;
            return this;
        }
        @CustomType.Setter
        public Builder externalFirewallRulePrefix(@Nullable String externalFirewallRulePrefix) {

            this.externalFirewallRulePrefix = externalFirewallRulePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder internalFirewallRulePrefix(@Nullable String internalFirewallRulePrefix) {

            this.internalFirewallRulePrefix = internalFirewallRulePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder machineImage(String machineImage) {
            if (machineImage == null) {
              throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfig", "machineImage");
            }
            this.machineImage = machineImage;
            return this;
        }
        @CustomType.Setter
        public Builder machineType(String machineType) {
            if (machineType == null) {
              throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfig", "machineType");
            }
            this.machineType = machineType;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfig", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder openPorts(@Nullable List<String> openPorts) {

            this.openPorts = openPorts;
            return this;
        }
        public Builder openPorts(String... openPorts) {
            return openPorts(List.of(openPorts));
        }
        @CustomType.Setter
        public Builder preemptable(@Nullable Boolean preemptable) {

            this.preemptable = preemptable;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfig", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(@Nullable String scopes) {

            this.scopes = scopes;
            return this;
        }
        @CustomType.Setter
        public Builder subNetwork(@Nullable String subNetwork) {

            this.subNetwork = subNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable String tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder useExisting(@Nullable Boolean useExisting) {

            this.useExisting = useExisting;
            return this;
        }
        @CustomType.Setter
        public Builder useInternalIp(@Nullable Boolean useInternalIp) {

            this.useInternalIp = useInternalIp;
            return this;
        }
        @CustomType.Setter
        public Builder useInternalIpOnly(@Nullable Boolean useInternalIpOnly) {

            this.useInternalIpOnly = useInternalIpOnly;
            return this;
        }
        @CustomType.Setter
        public Builder userData(@Nullable String userData) {

            this.userData = userData;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder vmLabels(@Nullable String vmLabels) {

            this.vmLabels = vmLabels;
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            if (zone == null) {
              throw new MissingRequiredPropertyException("MachineConfigV2GoogleConfig", "zone");
            }
            this.zone = zone;
            return this;
        }
        public MachineConfigV2GoogleConfig build() {
            final var _resultValue = new MachineConfigV2GoogleConfig();
            _resultValue.address = address;
            _resultValue.authEncodedJson = authEncodedJson;
            _resultValue.diskSize = diskSize;
            _resultValue.diskType = diskType;
            _resultValue.externalFirewallRulePrefix = externalFirewallRulePrefix;
            _resultValue.internalFirewallRulePrefix = internalFirewallRulePrefix;
            _resultValue.machineImage = machineImage;
            _resultValue.machineType = machineType;
            _resultValue.network = network;
            _resultValue.openPorts = openPorts;
            _resultValue.preemptable = preemptable;
            _resultValue.project = project;
            _resultValue.scopes = scopes;
            _resultValue.subNetwork = subNetwork;
            _resultValue.tags = tags;
            _resultValue.useExisting = useExisting;
            _resultValue.useInternalIp = useInternalIp;
            _resultValue.useInternalIpOnly = useInternalIpOnly;
            _resultValue.userData = userData;
            _resultValue.username = username;
            _resultValue.vmLabels = vmLabels;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
