// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterGkeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterGkeConfigArgs Empty = new ClusterGkeConfigArgs();

    /**
     * The IP address range of the container pods (string)
     * 
     */
    @Import(name="clusterIpv4Cidr", required=true)
    private Output<String> clusterIpv4Cidr;

    /**
     * @return The IP address range of the container pods (string)
     * 
     */
    public Output<String> clusterIpv4Cidr() {
        return this.clusterIpv4Cidr;
    }

    /**
     * The contents of the GC credential file (string)
     * 
     */
    @Import(name="credential", required=true)
    private Output<String> credential;

    /**
     * @return The contents of the GC credential file (string)
     * 
     */
    public Output<String> credential() {
        return this.credential;
    }

    /**
     * An optional description of this cluster (string)
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of this cluster (string)
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The GKE node config disk size Gb (int)
     * 
     */
    @Import(name="diskSizeGb")
    private @Nullable Output<Integer> diskSizeGb;

    /**
     * @return The GKE node config disk size Gb (int)
     * 
     */
    public Optional<Output<Integer>> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }

    /**
     * The GKE node config disk type (string)
     * 
     */
    @Import(name="diskType", required=true)
    private Output<String> diskType;

    /**
     * @return The GKE node config disk type (string)
     * 
     */
    public Output<String> diskType() {
        return this.diskType;
    }

    /**
     * To enable Kubernetes alpha feature. Default `true` (bool)
     * 
     */
    @Import(name="enableAlphaFeature")
    private @Nullable Output<Boolean> enableAlphaFeature;

    /**
     * @return To enable Kubernetes alpha feature. Default `true` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableAlphaFeature() {
        return Optional.ofNullable(this.enableAlphaFeature);
    }

    /**
     * Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
     * 
     */
    @Import(name="enableAutoRepair")
    private @Nullable Output<Boolean> enableAutoRepair;

    /**
     * @return Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableAutoRepair() {
        return Optional.ofNullable(this.enableAutoRepair);
    }

    /**
     * Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
     * 
     */
    @Import(name="enableAutoUpgrade")
    private @Nullable Output<Boolean> enableAutoUpgrade;

    /**
     * @return Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableAutoUpgrade() {
        return Optional.ofNullable(this.enableAutoUpgrade);
    }

    /**
     * Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
     * 
     */
    @Import(name="enableHorizontalPodAutoscaling")
    private @Nullable Output<Boolean> enableHorizontalPodAutoscaling;

    /**
     * @return Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableHorizontalPodAutoscaling() {
        return Optional.ofNullable(this.enableHorizontalPodAutoscaling);
    }

    /**
     * Enable HTTP load balancing on GKE cluster. Default `true` (bool)
     * 
     */
    @Import(name="enableHttpLoadBalancing")
    private @Nullable Output<Boolean> enableHttpLoadBalancing;

    /**
     * @return Enable HTTP load balancing on GKE cluster. Default `true` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableHttpLoadBalancing() {
        return Optional.ofNullable(this.enableHttpLoadBalancing);
    }

    /**
     * Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
     * 
     */
    @Import(name="enableKubernetesDashboard")
    private @Nullable Output<Boolean> enableKubernetesDashboard;

    /**
     * @return Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableKubernetesDashboard() {
        return Optional.ofNullable(this.enableKubernetesDashboard);
    }

    /**
     * Whether to enable legacy abac on the cluster. Default `false` (bool)
     * 
     */
    @Import(name="enableLegacyAbac")
    private @Nullable Output<Boolean> enableLegacyAbac;

    /**
     * @return Whether to enable legacy abac on the cluster. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableLegacyAbac() {
        return Optional.ofNullable(this.enableLegacyAbac);
    }

    /**
     * Enable master authorized network. Set to `true` if `master_authorized_network_cidr_blocks` is set. Default `false` (bool)
     * 
     */
    @Import(name="enableMasterAuthorizedNetwork")
    private @Nullable Output<Boolean> enableMasterAuthorizedNetwork;

    /**
     * @return Enable master authorized network. Set to `true` if `master_authorized_network_cidr_blocks` is set. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableMasterAuthorizedNetwork() {
        return Optional.ofNullable(this.enableMasterAuthorizedNetwork);
    }

    /**
     * Enable network policy config for the cluster. Default `true` (bool)
     * 
     */
    @Import(name="enableNetworkPolicyConfig")
    private @Nullable Output<Boolean> enableNetworkPolicyConfig;

    /**
     * @return Enable network policy config for the cluster. Default `true` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableNetworkPolicyConfig() {
        return Optional.ofNullable(this.enableNetworkPolicyConfig);
    }

    /**
     * Enable nodepool autoscaling. Default `false` (bool)
     * 
     */
    @Import(name="enableNodepoolAutoscaling")
    private @Nullable Output<Boolean> enableNodepoolAutoscaling;

    /**
     * @return Enable nodepool autoscaling. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableNodepoolAutoscaling() {
        return Optional.ofNullable(this.enableNodepoolAutoscaling);
    }

    /**
     * Enable GKE cluster private endpoint. Default: `false` (bool)
     * 
     */
    @Import(name="enablePrivateEndpoint")
    private @Nullable Output<Boolean> enablePrivateEndpoint;

    /**
     * @return Enable GKE cluster private endpoint. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enablePrivateEndpoint() {
        return Optional.ofNullable(this.enablePrivateEndpoint);
    }

    /**
     * Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
     * 
     */
    @Import(name="enablePrivateNodes")
    private @Nullable Output<Boolean> enablePrivateNodes;

    /**
     * @return Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enablePrivateNodes() {
        return Optional.ofNullable(this.enablePrivateNodes);
    }

    /**
     * Enable stackdriver monitoring. Default `true` (bool)
     * 
     */
    @Import(name="enableStackdriverLogging")
    private @Nullable Output<Boolean> enableStackdriverLogging;

    /**
     * @return Enable stackdriver monitoring. Default `true` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableStackdriverLogging() {
        return Optional.ofNullable(this.enableStackdriverLogging);
    }

    /**
     * Enable stackdriver monitoring on GKE cluster (bool)
     * 
     */
    @Import(name="enableStackdriverMonitoring")
    private @Nullable Output<Boolean> enableStackdriverMonitoring;

    /**
     * @return Enable stackdriver monitoring on GKE cluster (bool)
     * 
     */
    public Optional<Output<Boolean>> enableStackdriverMonitoring() {
        return Optional.ofNullable(this.enableStackdriverMonitoring);
    }

    /**
     * The GKE node config image type (string)
     * 
     */
    @Import(name="imageType", required=true)
    private Output<String> imageType;

    /**
     * @return The GKE node config image type (string)
     * 
     */
    public Output<String> imageType() {
        return this.imageType;
    }

    /**
     * The IP address range for the cluster pod IPs (string)
     * 
     */
    @Import(name="ipPolicyClusterIpv4CidrBlock", required=true)
    private Output<String> ipPolicyClusterIpv4CidrBlock;

    /**
     * @return The IP address range for the cluster pod IPs (string)
     * 
     */
    public Output<String> ipPolicyClusterIpv4CidrBlock() {
        return this.ipPolicyClusterIpv4CidrBlock;
    }

    /**
     * The name of the secondary range to be used for the cluster CIDR block (string)
     * 
     */
    @Import(name="ipPolicyClusterSecondaryRangeName", required=true)
    private Output<String> ipPolicyClusterSecondaryRangeName;

    /**
     * @return The name of the secondary range to be used for the cluster CIDR block (string)
     * 
     */
    public Output<String> ipPolicyClusterSecondaryRangeName() {
        return this.ipPolicyClusterSecondaryRangeName;
    }

    /**
     * Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
     * 
     */
    @Import(name="ipPolicyCreateSubnetwork")
    private @Nullable Output<Boolean> ipPolicyCreateSubnetwork;

    /**
     * @return Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> ipPolicyCreateSubnetwork() {
        return Optional.ofNullable(this.ipPolicyCreateSubnetwork);
    }

    /**
     * The IP address range of the instance IPs in this cluster (string)
     * 
     */
    @Import(name="ipPolicyNodeIpv4CidrBlock", required=true)
    private Output<String> ipPolicyNodeIpv4CidrBlock;

    /**
     * @return The IP address range of the instance IPs in this cluster (string)
     * 
     */
    public Output<String> ipPolicyNodeIpv4CidrBlock() {
        return this.ipPolicyNodeIpv4CidrBlock;
    }

    /**
     * The IP address range of the services IPs in this cluster (string)
     * 
     */
    @Import(name="ipPolicyServicesIpv4CidrBlock", required=true)
    private Output<String> ipPolicyServicesIpv4CidrBlock;

    /**
     * @return The IP address range of the services IPs in this cluster (string)
     * 
     */
    public Output<String> ipPolicyServicesIpv4CidrBlock() {
        return this.ipPolicyServicesIpv4CidrBlock;
    }

    /**
     * The name of the secondary range to be used for the services CIDR block (string)
     * 
     */
    @Import(name="ipPolicyServicesSecondaryRangeName", required=true)
    private Output<String> ipPolicyServicesSecondaryRangeName;

    /**
     * @return The name of the secondary range to be used for the services CIDR block (string)
     * 
     */
    public Output<String> ipPolicyServicesSecondaryRangeName() {
        return this.ipPolicyServicesSecondaryRangeName;
    }

    /**
     * A custom subnetwork name to be used if createSubnetwork is true (string)
     * 
     */
    @Import(name="ipPolicySubnetworkName", required=true)
    private Output<String> ipPolicySubnetworkName;

    /**
     * @return A custom subnetwork name to be used if createSubnetwork is true (string)
     * 
     */
    public Output<String> ipPolicySubnetworkName() {
        return this.ipPolicySubnetworkName;
    }

    /**
     * Issue a client certificate. Default `false` (bool)
     * 
     */
    @Import(name="issueClientCertificate")
    private @Nullable Output<Boolean> issueClientCertificate;

    /**
     * @return Issue a client certificate. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> issueClientCertificate() {
        return Optional.ofNullable(this.issueClientCertificate);
    }

    /**
     * Enable the Kubernetes dashboard. Default `false` (bool)
     * 
     */
    @Import(name="kubernetesDashboard")
    private @Nullable Output<Boolean> kubernetesDashboard;

    /**
     * @return Enable the Kubernetes dashboard. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> kubernetesDashboard() {
        return Optional.ofNullable(this.kubernetesDashboard);
    }

    /**
     * Labels for cluster registration token object (map)
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,Object>> labels;

    /**
     * @return Labels for cluster registration token object (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The GKE node config local ssd count (int)
     * 
     */
    @Import(name="localSsdCount")
    private @Nullable Output<Integer> localSsdCount;

    /**
     * @return The GKE node config local ssd count (int)
     * 
     */
    public Optional<Output<Integer>> localSsdCount() {
        return Optional.ofNullable(this.localSsdCount);
    }

    /**
     * The GKE cluster locations (List)
     * 
     */
    @Import(name="locations", required=true)
    private Output<List<String>> locations;

    /**
     * @return The GKE cluster locations (List)
     * 
     */
    public Output<List<String>> locations() {
        return this.locations;
    }

    /**
     * The GKE node config machine type (string)
     * 
     */
    @Import(name="machineType", required=true)
    private Output<String> machineType;

    /**
     * @return The GKE node config machine type (string)
     * 
     */
    public Output<String> machineType() {
        return this.machineType;
    }

    /**
     * The GKE cluster maintenance window (string)
     * 
     */
    @Import(name="maintenanceWindow", required=true)
    private Output<String> maintenanceWindow;

    /**
     * @return The GKE cluster maintenance window (string)
     * 
     */
    public Output<String> maintenanceWindow() {
        return this.maintenanceWindow;
    }

    /**
     * Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
     * 
     */
    @Import(name="masterAuthorizedNetworkCidrBlocks")
    private @Nullable Output<List<String>> masterAuthorizedNetworkCidrBlocks;

    /**
     * @return Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
     * 
     */
    public Optional<Output<List<String>>> masterAuthorizedNetworkCidrBlocks() {
        return Optional.ofNullable(this.masterAuthorizedNetworkCidrBlocks);
    }

    /**
     * The GKE cluster private master ip v4 cidr block (string)
     * 
     */
    @Import(name="masterIpv4CidrBlock", required=true)
    private Output<String> masterIpv4CidrBlock;

    /**
     * @return The GKE cluster private master ip v4 cidr block (string)
     * 
     */
    public Output<String> masterIpv4CidrBlock() {
        return this.masterIpv4CidrBlock;
    }

    /**
     * Master version for GKE cluster (string)
     * 
     */
    @Import(name="masterVersion", required=true)
    private Output<String> masterVersion;

    /**
     * @return Master version for GKE cluster (string)
     * 
     */
    public Output<String> masterVersion() {
        return this.masterVersion;
    }

    /**
     * The GKE node pool config max node count (int)
     * 
     */
    @Import(name="maxNodeCount")
    private @Nullable Output<Integer> maxNodeCount;

    /**
     * @return The GKE node pool config max node count (int)
     * 
     */
    public Optional<Output<Integer>> maxNodeCount() {
        return Optional.ofNullable(this.maxNodeCount);
    }

    /**
     * The GKE node pool config min node count (int)
     * 
     */
    @Import(name="minNodeCount")
    private @Nullable Output<Integer> minNodeCount;

    /**
     * @return The GKE node pool config min node count (int)
     * 
     */
    public Optional<Output<Integer>> minNodeCount() {
        return Optional.ofNullable(this.minNodeCount);
    }

    /**
     * The GKE cluster network. Required for create new cluster (string)
     * 
     */
    @Import(name="network", required=true)
    private Output<String> network;

    /**
     * @return The GKE cluster network. Required for create new cluster (string)
     * 
     */
    public Output<String> network() {
        return this.network;
    }

    /**
     * Node count for GKE cluster. Default `3` (int)
     * 
     */
    @Import(name="nodeCount")
    private @Nullable Output<Integer> nodeCount;

    /**
     * @return Node count for GKE cluster. Default `3` (int)
     * 
     */
    public Optional<Output<Integer>> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }

    /**
     * The ID of the cluster node pool (string)
     * 
     */
    @Import(name="nodePool", required=true)
    private Output<String> nodePool;

    /**
     * @return The ID of the cluster node pool (string)
     * 
     */
    public Output<String> nodePool() {
        return this.nodePool;
    }

    /**
     * Node version for GKE cluster (string)
     * 
     */
    @Import(name="nodeVersion", required=true)
    private Output<String> nodeVersion;

    /**
     * @return Node version for GKE cluster (string)
     * 
     */
    public Output<String> nodeVersion() {
        return this.nodeVersion;
    }

    /**
     * The GKE node config oauth scopes (List)
     * 
     */
    @Import(name="oauthScopes", required=true)
    private Output<List<String>> oauthScopes;

    /**
     * @return The GKE node config oauth scopes (List)
     * 
     */
    public Output<List<String>> oauthScopes() {
        return this.oauthScopes;
    }

    /**
     * Enable GKE node config preemptible. Default: `false` (bool)
     * 
     */
    @Import(name="preemptible")
    private @Nullable Output<Boolean> preemptible;

    /**
     * @return Enable GKE node config preemptible. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> preemptible() {
        return Optional.ofNullable(this.preemptible);
    }

    /**
     * Project ID to apply answer (string)
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Project ID to apply answer (string)
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The map of Kubernetes labels to be applied to each cluster (map)
     * 
     */
    @Import(name="resourceLabels")
    private @Nullable Output<Map<String,Object>> resourceLabels;

    /**
     * @return The map of Kubernetes labels to be applied to each cluster (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> resourceLabels() {
        return Optional.ofNullable(this.resourceLabels);
    }

    /**
     * The Google Cloud Platform Service Account to be used by the node VMs (string)
     * 
     */
    @Import(name="serviceAccount", required=true)
    private Output<String> serviceAccount;

    /**
     * @return The Google Cloud Platform Service Account to be used by the node VMs (string)
     * 
     */
    public Output<String> serviceAccount() {
        return this.serviceAccount;
    }

    /**
     * Subnetwork for GKE cluster (string)
     * 
     */
    @Import(name="subNetwork", required=true)
    private Output<String> subNetwork;

    /**
     * @return Subnetwork for GKE cluster (string)
     * 
     */
    public Output<String> subNetwork() {
        return this.subNetwork;
    }

    /**
     * The GKE node config taints (List)
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<String>> taints;

    /**
     * @return The GKE node config taints (List)
     * 
     */
    public Optional<Output<List<String>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * Use GKE ip aliases? Default: `true` (bool)
     * 
     */
    @Import(name="useIpAliases")
    private @Nullable Output<Boolean> useIpAliases;

    /**
     * @return Use GKE ip aliases? Default: `true` (bool)
     * 
     */
    public Optional<Output<Boolean>> useIpAliases() {
        return Optional.ofNullable(this.useIpAliases);
    }

    /**
     * The GKE cluster zone. Required if `region` not set (string)
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return The GKE cluster zone. Required if `region` not set (string)
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private ClusterGkeConfigArgs() {}

    private ClusterGkeConfigArgs(ClusterGkeConfigArgs $) {
        this.clusterIpv4Cidr = $.clusterIpv4Cidr;
        this.credential = $.credential;
        this.description = $.description;
        this.diskSizeGb = $.diskSizeGb;
        this.diskType = $.diskType;
        this.enableAlphaFeature = $.enableAlphaFeature;
        this.enableAutoRepair = $.enableAutoRepair;
        this.enableAutoUpgrade = $.enableAutoUpgrade;
        this.enableHorizontalPodAutoscaling = $.enableHorizontalPodAutoscaling;
        this.enableHttpLoadBalancing = $.enableHttpLoadBalancing;
        this.enableKubernetesDashboard = $.enableKubernetesDashboard;
        this.enableLegacyAbac = $.enableLegacyAbac;
        this.enableMasterAuthorizedNetwork = $.enableMasterAuthorizedNetwork;
        this.enableNetworkPolicyConfig = $.enableNetworkPolicyConfig;
        this.enableNodepoolAutoscaling = $.enableNodepoolAutoscaling;
        this.enablePrivateEndpoint = $.enablePrivateEndpoint;
        this.enablePrivateNodes = $.enablePrivateNodes;
        this.enableStackdriverLogging = $.enableStackdriverLogging;
        this.enableStackdriverMonitoring = $.enableStackdriverMonitoring;
        this.imageType = $.imageType;
        this.ipPolicyClusterIpv4CidrBlock = $.ipPolicyClusterIpv4CidrBlock;
        this.ipPolicyClusterSecondaryRangeName = $.ipPolicyClusterSecondaryRangeName;
        this.ipPolicyCreateSubnetwork = $.ipPolicyCreateSubnetwork;
        this.ipPolicyNodeIpv4CidrBlock = $.ipPolicyNodeIpv4CidrBlock;
        this.ipPolicyServicesIpv4CidrBlock = $.ipPolicyServicesIpv4CidrBlock;
        this.ipPolicyServicesSecondaryRangeName = $.ipPolicyServicesSecondaryRangeName;
        this.ipPolicySubnetworkName = $.ipPolicySubnetworkName;
        this.issueClientCertificate = $.issueClientCertificate;
        this.kubernetesDashboard = $.kubernetesDashboard;
        this.labels = $.labels;
        this.localSsdCount = $.localSsdCount;
        this.locations = $.locations;
        this.machineType = $.machineType;
        this.maintenanceWindow = $.maintenanceWindow;
        this.masterAuthorizedNetworkCidrBlocks = $.masterAuthorizedNetworkCidrBlocks;
        this.masterIpv4CidrBlock = $.masterIpv4CidrBlock;
        this.masterVersion = $.masterVersion;
        this.maxNodeCount = $.maxNodeCount;
        this.minNodeCount = $.minNodeCount;
        this.network = $.network;
        this.nodeCount = $.nodeCount;
        this.nodePool = $.nodePool;
        this.nodeVersion = $.nodeVersion;
        this.oauthScopes = $.oauthScopes;
        this.preemptible = $.preemptible;
        this.projectId = $.projectId;
        this.region = $.region;
        this.resourceLabels = $.resourceLabels;
        this.serviceAccount = $.serviceAccount;
        this.subNetwork = $.subNetwork;
        this.taints = $.taints;
        this.useIpAliases = $.useIpAliases;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterGkeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterGkeConfigArgs $;

        public Builder() {
            $ = new ClusterGkeConfigArgs();
        }

        public Builder(ClusterGkeConfigArgs defaults) {
            $ = new ClusterGkeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterIpv4Cidr The IP address range of the container pods (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv4Cidr(Output<String> clusterIpv4Cidr) {
            $.clusterIpv4Cidr = clusterIpv4Cidr;
            return this;
        }

        /**
         * @param clusterIpv4Cidr The IP address range of the container pods (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterIpv4Cidr(String clusterIpv4Cidr) {
            return clusterIpv4Cidr(Output.of(clusterIpv4Cidr));
        }

        /**
         * @param credential The contents of the GC credential file (string)
         * 
         * @return builder
         * 
         */
        public Builder credential(Output<String> credential) {
            $.credential = credential;
            return this;
        }

        /**
         * @param credential The contents of the GC credential file (string)
         * 
         * @return builder
         * 
         */
        public Builder credential(String credential) {
            return credential(Output.of(credential));
        }

        /**
         * @param description An optional description of this cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of this cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param diskSizeGb The GKE node config disk size Gb (int)
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(@Nullable Output<Integer> diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskSizeGb The GKE node config disk size Gb (int)
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(Integer diskSizeGb) {
            return diskSizeGb(Output.of(diskSizeGb));
        }

        /**
         * @param diskType The GKE node config disk type (string)
         * 
         * @return builder
         * 
         */
        public Builder diskType(Output<String> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType The GKE node config disk type (string)
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param enableAlphaFeature To enable Kubernetes alpha feature. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableAlphaFeature(@Nullable Output<Boolean> enableAlphaFeature) {
            $.enableAlphaFeature = enableAlphaFeature;
            return this;
        }

        /**
         * @param enableAlphaFeature To enable Kubernetes alpha feature. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableAlphaFeature(Boolean enableAlphaFeature) {
            return enableAlphaFeature(Output.of(enableAlphaFeature));
        }

        /**
         * @param enableAutoRepair Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableAutoRepair(@Nullable Output<Boolean> enableAutoRepair) {
            $.enableAutoRepair = enableAutoRepair;
            return this;
        }

        /**
         * @param enableAutoRepair Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableAutoRepair(Boolean enableAutoRepair) {
            return enableAutoRepair(Output.of(enableAutoRepair));
        }

        /**
         * @param enableAutoUpgrade Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableAutoUpgrade(@Nullable Output<Boolean> enableAutoUpgrade) {
            $.enableAutoUpgrade = enableAutoUpgrade;
            return this;
        }

        /**
         * @param enableAutoUpgrade Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableAutoUpgrade(Boolean enableAutoUpgrade) {
            return enableAutoUpgrade(Output.of(enableAutoUpgrade));
        }

        /**
         * @param enableHorizontalPodAutoscaling Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableHorizontalPodAutoscaling(@Nullable Output<Boolean> enableHorizontalPodAutoscaling) {
            $.enableHorizontalPodAutoscaling = enableHorizontalPodAutoscaling;
            return this;
        }

        /**
         * @param enableHorizontalPodAutoscaling Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableHorizontalPodAutoscaling(Boolean enableHorizontalPodAutoscaling) {
            return enableHorizontalPodAutoscaling(Output.of(enableHorizontalPodAutoscaling));
        }

        /**
         * @param enableHttpLoadBalancing Enable HTTP load balancing on GKE cluster. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableHttpLoadBalancing(@Nullable Output<Boolean> enableHttpLoadBalancing) {
            $.enableHttpLoadBalancing = enableHttpLoadBalancing;
            return this;
        }

        /**
         * @param enableHttpLoadBalancing Enable HTTP load balancing on GKE cluster. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableHttpLoadBalancing(Boolean enableHttpLoadBalancing) {
            return enableHttpLoadBalancing(Output.of(enableHttpLoadBalancing));
        }

        /**
         * @param enableKubernetesDashboard Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableKubernetesDashboard(@Nullable Output<Boolean> enableKubernetesDashboard) {
            $.enableKubernetesDashboard = enableKubernetesDashboard;
            return this;
        }

        /**
         * @param enableKubernetesDashboard Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableKubernetesDashboard(Boolean enableKubernetesDashboard) {
            return enableKubernetesDashboard(Output.of(enableKubernetesDashboard));
        }

        /**
         * @param enableLegacyAbac Whether to enable legacy abac on the cluster. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableLegacyAbac(@Nullable Output<Boolean> enableLegacyAbac) {
            $.enableLegacyAbac = enableLegacyAbac;
            return this;
        }

        /**
         * @param enableLegacyAbac Whether to enable legacy abac on the cluster. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableLegacyAbac(Boolean enableLegacyAbac) {
            return enableLegacyAbac(Output.of(enableLegacyAbac));
        }

        /**
         * @param enableMasterAuthorizedNetwork Enable master authorized network. Set to `true` if `master_authorized_network_cidr_blocks` is set. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableMasterAuthorizedNetwork(@Nullable Output<Boolean> enableMasterAuthorizedNetwork) {
            $.enableMasterAuthorizedNetwork = enableMasterAuthorizedNetwork;
            return this;
        }

        /**
         * @param enableMasterAuthorizedNetwork Enable master authorized network. Set to `true` if `master_authorized_network_cidr_blocks` is set. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableMasterAuthorizedNetwork(Boolean enableMasterAuthorizedNetwork) {
            return enableMasterAuthorizedNetwork(Output.of(enableMasterAuthorizedNetwork));
        }

        /**
         * @param enableNetworkPolicyConfig Enable network policy config for the cluster. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableNetworkPolicyConfig(@Nullable Output<Boolean> enableNetworkPolicyConfig) {
            $.enableNetworkPolicyConfig = enableNetworkPolicyConfig;
            return this;
        }

        /**
         * @param enableNetworkPolicyConfig Enable network policy config for the cluster. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableNetworkPolicyConfig(Boolean enableNetworkPolicyConfig) {
            return enableNetworkPolicyConfig(Output.of(enableNetworkPolicyConfig));
        }

        /**
         * @param enableNodepoolAutoscaling Enable nodepool autoscaling. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableNodepoolAutoscaling(@Nullable Output<Boolean> enableNodepoolAutoscaling) {
            $.enableNodepoolAutoscaling = enableNodepoolAutoscaling;
            return this;
        }

        /**
         * @param enableNodepoolAutoscaling Enable nodepool autoscaling. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableNodepoolAutoscaling(Boolean enableNodepoolAutoscaling) {
            return enableNodepoolAutoscaling(Output.of(enableNodepoolAutoscaling));
        }

        /**
         * @param enablePrivateEndpoint Enable GKE cluster private endpoint. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateEndpoint(@Nullable Output<Boolean> enablePrivateEndpoint) {
            $.enablePrivateEndpoint = enablePrivateEndpoint;
            return this;
        }

        /**
         * @param enablePrivateEndpoint Enable GKE cluster private endpoint. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateEndpoint(Boolean enablePrivateEndpoint) {
            return enablePrivateEndpoint(Output.of(enablePrivateEndpoint));
        }

        /**
         * @param enablePrivateNodes Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateNodes(@Nullable Output<Boolean> enablePrivateNodes) {
            $.enablePrivateNodes = enablePrivateNodes;
            return this;
        }

        /**
         * @param enablePrivateNodes Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateNodes(Boolean enablePrivateNodes) {
            return enablePrivateNodes(Output.of(enablePrivateNodes));
        }

        /**
         * @param enableStackdriverLogging Enable stackdriver monitoring. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableStackdriverLogging(@Nullable Output<Boolean> enableStackdriverLogging) {
            $.enableStackdriverLogging = enableStackdriverLogging;
            return this;
        }

        /**
         * @param enableStackdriverLogging Enable stackdriver monitoring. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableStackdriverLogging(Boolean enableStackdriverLogging) {
            return enableStackdriverLogging(Output.of(enableStackdriverLogging));
        }

        /**
         * @param enableStackdriverMonitoring Enable stackdriver monitoring on GKE cluster (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableStackdriverMonitoring(@Nullable Output<Boolean> enableStackdriverMonitoring) {
            $.enableStackdriverMonitoring = enableStackdriverMonitoring;
            return this;
        }

        /**
         * @param enableStackdriverMonitoring Enable stackdriver monitoring on GKE cluster (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableStackdriverMonitoring(Boolean enableStackdriverMonitoring) {
            return enableStackdriverMonitoring(Output.of(enableStackdriverMonitoring));
        }

        /**
         * @param imageType The GKE node config image type (string)
         * 
         * @return builder
         * 
         */
        public Builder imageType(Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType The GKE node config image type (string)
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        /**
         * @param ipPolicyClusterIpv4CidrBlock The IP address range for the cluster pod IPs (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyClusterIpv4CidrBlock(Output<String> ipPolicyClusterIpv4CidrBlock) {
            $.ipPolicyClusterIpv4CidrBlock = ipPolicyClusterIpv4CidrBlock;
            return this;
        }

        /**
         * @param ipPolicyClusterIpv4CidrBlock The IP address range for the cluster pod IPs (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyClusterIpv4CidrBlock(String ipPolicyClusterIpv4CidrBlock) {
            return ipPolicyClusterIpv4CidrBlock(Output.of(ipPolicyClusterIpv4CidrBlock));
        }

        /**
         * @param ipPolicyClusterSecondaryRangeName The name of the secondary range to be used for the cluster CIDR block (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyClusterSecondaryRangeName(Output<String> ipPolicyClusterSecondaryRangeName) {
            $.ipPolicyClusterSecondaryRangeName = ipPolicyClusterSecondaryRangeName;
            return this;
        }

        /**
         * @param ipPolicyClusterSecondaryRangeName The name of the secondary range to be used for the cluster CIDR block (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyClusterSecondaryRangeName(String ipPolicyClusterSecondaryRangeName) {
            return ipPolicyClusterSecondaryRangeName(Output.of(ipPolicyClusterSecondaryRangeName));
        }

        /**
         * @param ipPolicyCreateSubnetwork Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyCreateSubnetwork(@Nullable Output<Boolean> ipPolicyCreateSubnetwork) {
            $.ipPolicyCreateSubnetwork = ipPolicyCreateSubnetwork;
            return this;
        }

        /**
         * @param ipPolicyCreateSubnetwork Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyCreateSubnetwork(Boolean ipPolicyCreateSubnetwork) {
            return ipPolicyCreateSubnetwork(Output.of(ipPolicyCreateSubnetwork));
        }

        /**
         * @param ipPolicyNodeIpv4CidrBlock The IP address range of the instance IPs in this cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyNodeIpv4CidrBlock(Output<String> ipPolicyNodeIpv4CidrBlock) {
            $.ipPolicyNodeIpv4CidrBlock = ipPolicyNodeIpv4CidrBlock;
            return this;
        }

        /**
         * @param ipPolicyNodeIpv4CidrBlock The IP address range of the instance IPs in this cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyNodeIpv4CidrBlock(String ipPolicyNodeIpv4CidrBlock) {
            return ipPolicyNodeIpv4CidrBlock(Output.of(ipPolicyNodeIpv4CidrBlock));
        }

        /**
         * @param ipPolicyServicesIpv4CidrBlock The IP address range of the services IPs in this cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyServicesIpv4CidrBlock(Output<String> ipPolicyServicesIpv4CidrBlock) {
            $.ipPolicyServicesIpv4CidrBlock = ipPolicyServicesIpv4CidrBlock;
            return this;
        }

        /**
         * @param ipPolicyServicesIpv4CidrBlock The IP address range of the services IPs in this cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyServicesIpv4CidrBlock(String ipPolicyServicesIpv4CidrBlock) {
            return ipPolicyServicesIpv4CidrBlock(Output.of(ipPolicyServicesIpv4CidrBlock));
        }

        /**
         * @param ipPolicyServicesSecondaryRangeName The name of the secondary range to be used for the services CIDR block (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyServicesSecondaryRangeName(Output<String> ipPolicyServicesSecondaryRangeName) {
            $.ipPolicyServicesSecondaryRangeName = ipPolicyServicesSecondaryRangeName;
            return this;
        }

        /**
         * @param ipPolicyServicesSecondaryRangeName The name of the secondary range to be used for the services CIDR block (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicyServicesSecondaryRangeName(String ipPolicyServicesSecondaryRangeName) {
            return ipPolicyServicesSecondaryRangeName(Output.of(ipPolicyServicesSecondaryRangeName));
        }

        /**
         * @param ipPolicySubnetworkName A custom subnetwork name to be used if createSubnetwork is true (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicySubnetworkName(Output<String> ipPolicySubnetworkName) {
            $.ipPolicySubnetworkName = ipPolicySubnetworkName;
            return this;
        }

        /**
         * @param ipPolicySubnetworkName A custom subnetwork name to be used if createSubnetwork is true (string)
         * 
         * @return builder
         * 
         */
        public Builder ipPolicySubnetworkName(String ipPolicySubnetworkName) {
            return ipPolicySubnetworkName(Output.of(ipPolicySubnetworkName));
        }

        /**
         * @param issueClientCertificate Issue a client certificate. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder issueClientCertificate(@Nullable Output<Boolean> issueClientCertificate) {
            $.issueClientCertificate = issueClientCertificate;
            return this;
        }

        /**
         * @param issueClientCertificate Issue a client certificate. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder issueClientCertificate(Boolean issueClientCertificate) {
            return issueClientCertificate(Output.of(issueClientCertificate));
        }

        /**
         * @param kubernetesDashboard Enable the Kubernetes dashboard. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder kubernetesDashboard(@Nullable Output<Boolean> kubernetesDashboard) {
            $.kubernetesDashboard = kubernetesDashboard;
            return this;
        }

        /**
         * @param kubernetesDashboard Enable the Kubernetes dashboard. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder kubernetesDashboard(Boolean kubernetesDashboard) {
            return kubernetesDashboard(Output.of(kubernetesDashboard));
        }

        /**
         * @param labels Labels for cluster registration token object (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,Object>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for cluster registration token object (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,Object> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param localSsdCount The GKE node config local ssd count (int)
         * 
         * @return builder
         * 
         */
        public Builder localSsdCount(@Nullable Output<Integer> localSsdCount) {
            $.localSsdCount = localSsdCount;
            return this;
        }

        /**
         * @param localSsdCount The GKE node config local ssd count (int)
         * 
         * @return builder
         * 
         */
        public Builder localSsdCount(Integer localSsdCount) {
            return localSsdCount(Output.of(localSsdCount));
        }

        /**
         * @param locations The GKE cluster locations (List)
         * 
         * @return builder
         * 
         */
        public Builder locations(Output<List<String>> locations) {
            $.locations = locations;
            return this;
        }

        /**
         * @param locations The GKE cluster locations (List)
         * 
         * @return builder
         * 
         */
        public Builder locations(List<String> locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param locations The GKE cluster locations (List)
         * 
         * @return builder
         * 
         */
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        /**
         * @param machineType The GKE node config machine type (string)
         * 
         * @return builder
         * 
         */
        public Builder machineType(Output<String> machineType) {
            $.machineType = machineType;
            return this;
        }

        /**
         * @param machineType The GKE node config machine type (string)
         * 
         * @return builder
         * 
         */
        public Builder machineType(String machineType) {
            return machineType(Output.of(machineType));
        }

        /**
         * @param maintenanceWindow The GKE cluster maintenance window (string)
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(Output<String> maintenanceWindow) {
            $.maintenanceWindow = maintenanceWindow;
            return this;
        }

        /**
         * @param maintenanceWindow The GKE cluster maintenance window (string)
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindow(String maintenanceWindow) {
            return maintenanceWindow(Output.of(maintenanceWindow));
        }

        /**
         * @param masterAuthorizedNetworkCidrBlocks Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
         * 
         * @return builder
         * 
         */
        public Builder masterAuthorizedNetworkCidrBlocks(@Nullable Output<List<String>> masterAuthorizedNetworkCidrBlocks) {
            $.masterAuthorizedNetworkCidrBlocks = masterAuthorizedNetworkCidrBlocks;
            return this;
        }

        /**
         * @param masterAuthorizedNetworkCidrBlocks Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
         * 
         * @return builder
         * 
         */
        public Builder masterAuthorizedNetworkCidrBlocks(List<String> masterAuthorizedNetworkCidrBlocks) {
            return masterAuthorizedNetworkCidrBlocks(Output.of(masterAuthorizedNetworkCidrBlocks));
        }

        /**
         * @param masterAuthorizedNetworkCidrBlocks Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
         * 
         * @return builder
         * 
         */
        public Builder masterAuthorizedNetworkCidrBlocks(String... masterAuthorizedNetworkCidrBlocks) {
            return masterAuthorizedNetworkCidrBlocks(List.of(masterAuthorizedNetworkCidrBlocks));
        }

        /**
         * @param masterIpv4CidrBlock The GKE cluster private master ip v4 cidr block (string)
         * 
         * @return builder
         * 
         */
        public Builder masterIpv4CidrBlock(Output<String> masterIpv4CidrBlock) {
            $.masterIpv4CidrBlock = masterIpv4CidrBlock;
            return this;
        }

        /**
         * @param masterIpv4CidrBlock The GKE cluster private master ip v4 cidr block (string)
         * 
         * @return builder
         * 
         */
        public Builder masterIpv4CidrBlock(String masterIpv4CidrBlock) {
            return masterIpv4CidrBlock(Output.of(masterIpv4CidrBlock));
        }

        /**
         * @param masterVersion Master version for GKE cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder masterVersion(Output<String> masterVersion) {
            $.masterVersion = masterVersion;
            return this;
        }

        /**
         * @param masterVersion Master version for GKE cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder masterVersion(String masterVersion) {
            return masterVersion(Output.of(masterVersion));
        }

        /**
         * @param maxNodeCount The GKE node pool config max node count (int)
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(@Nullable Output<Integer> maxNodeCount) {
            $.maxNodeCount = maxNodeCount;
            return this;
        }

        /**
         * @param maxNodeCount The GKE node pool config max node count (int)
         * 
         * @return builder
         * 
         */
        public Builder maxNodeCount(Integer maxNodeCount) {
            return maxNodeCount(Output.of(maxNodeCount));
        }

        /**
         * @param minNodeCount The GKE node pool config min node count (int)
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(@Nullable Output<Integer> minNodeCount) {
            $.minNodeCount = minNodeCount;
            return this;
        }

        /**
         * @param minNodeCount The GKE node pool config min node count (int)
         * 
         * @return builder
         * 
         */
        public Builder minNodeCount(Integer minNodeCount) {
            return minNodeCount(Output.of(minNodeCount));
        }

        /**
         * @param network The GKE cluster network. Required for create new cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder network(Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The GKE cluster network. Required for create new cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param nodeCount Node count for GKE cluster. Default `3` (int)
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(@Nullable Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount Node count for GKE cluster. Default `3` (int)
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param nodePool The ID of the cluster node pool (string)
         * 
         * @return builder
         * 
         */
        public Builder nodePool(Output<String> nodePool) {
            $.nodePool = nodePool;
            return this;
        }

        /**
         * @param nodePool The ID of the cluster node pool (string)
         * 
         * @return builder
         * 
         */
        public Builder nodePool(String nodePool) {
            return nodePool(Output.of(nodePool));
        }

        /**
         * @param nodeVersion Node version for GKE cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeVersion(Output<String> nodeVersion) {
            $.nodeVersion = nodeVersion;
            return this;
        }

        /**
         * @param nodeVersion Node version for GKE cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeVersion(String nodeVersion) {
            return nodeVersion(Output.of(nodeVersion));
        }

        /**
         * @param oauthScopes The GKE node config oauth scopes (List)
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(Output<List<String>> oauthScopes) {
            $.oauthScopes = oauthScopes;
            return this;
        }

        /**
         * @param oauthScopes The GKE node config oauth scopes (List)
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(List<String> oauthScopes) {
            return oauthScopes(Output.of(oauthScopes));
        }

        /**
         * @param oauthScopes The GKE node config oauth scopes (List)
         * 
         * @return builder
         * 
         */
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }

        /**
         * @param preemptible Enable GKE node config preemptible. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder preemptible(@Nullable Output<Boolean> preemptible) {
            $.preemptible = preemptible;
            return this;
        }

        /**
         * @param preemptible Enable GKE node config preemptible. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder preemptible(Boolean preemptible) {
            return preemptible(Output.of(preemptible));
        }

        /**
         * @param projectId Project ID to apply answer (string)
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to apply answer (string)
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param resourceLabels The map of Kubernetes labels to be applied to each cluster (map)
         * 
         * @return builder
         * 
         */
        public Builder resourceLabels(@Nullable Output<Map<String,Object>> resourceLabels) {
            $.resourceLabels = resourceLabels;
            return this;
        }

        /**
         * @param resourceLabels The map of Kubernetes labels to be applied to each cluster (map)
         * 
         * @return builder
         * 
         */
        public Builder resourceLabels(Map<String,Object> resourceLabels) {
            return resourceLabels(Output.of(resourceLabels));
        }

        /**
         * @param serviceAccount The Google Cloud Platform Service Account to be used by the node VMs (string)
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        /**
         * @param serviceAccount The Google Cloud Platform Service Account to be used by the node VMs (string)
         * 
         * @return builder
         * 
         */
        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        /**
         * @param subNetwork Subnetwork for GKE cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder subNetwork(Output<String> subNetwork) {
            $.subNetwork = subNetwork;
            return this;
        }

        /**
         * @param subNetwork Subnetwork for GKE cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder subNetwork(String subNetwork) {
            return subNetwork(Output.of(subNetwork));
        }

        /**
         * @param taints The GKE node config taints (List)
         * 
         * @return builder
         * 
         */
        public Builder taints(@Nullable Output<List<String>> taints) {
            $.taints = taints;
            return this;
        }

        /**
         * @param taints The GKE node config taints (List)
         * 
         * @return builder
         * 
         */
        public Builder taints(List<String> taints) {
            return taints(Output.of(taints));
        }

        /**
         * @param taints The GKE node config taints (List)
         * 
         * @return builder
         * 
         */
        public Builder taints(String... taints) {
            return taints(List.of(taints));
        }

        /**
         * @param useIpAliases Use GKE ip aliases? Default: `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder useIpAliases(@Nullable Output<Boolean> useIpAliases) {
            $.useIpAliases = useIpAliases;
            return this;
        }

        /**
         * @param useIpAliases Use GKE ip aliases? Default: `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder useIpAliases(Boolean useIpAliases) {
            return useIpAliases(Output.of(useIpAliases));
        }

        /**
         * @param zone The GKE cluster zone. Required if `region` not set (string)
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone The GKE cluster zone. Required if `region` not set (string)
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public ClusterGkeConfigArgs build() {
            $.clusterIpv4Cidr = Objects.requireNonNull($.clusterIpv4Cidr, "expected parameter 'clusterIpv4Cidr' to be non-null");
            $.credential = Objects.requireNonNull($.credential, "expected parameter 'credential' to be non-null");
            $.diskType = Objects.requireNonNull($.diskType, "expected parameter 'diskType' to be non-null");
            $.imageType = Objects.requireNonNull($.imageType, "expected parameter 'imageType' to be non-null");
            $.ipPolicyClusterIpv4CidrBlock = Objects.requireNonNull($.ipPolicyClusterIpv4CidrBlock, "expected parameter 'ipPolicyClusterIpv4CidrBlock' to be non-null");
            $.ipPolicyClusterSecondaryRangeName = Objects.requireNonNull($.ipPolicyClusterSecondaryRangeName, "expected parameter 'ipPolicyClusterSecondaryRangeName' to be non-null");
            $.ipPolicyNodeIpv4CidrBlock = Objects.requireNonNull($.ipPolicyNodeIpv4CidrBlock, "expected parameter 'ipPolicyNodeIpv4CidrBlock' to be non-null");
            $.ipPolicyServicesIpv4CidrBlock = Objects.requireNonNull($.ipPolicyServicesIpv4CidrBlock, "expected parameter 'ipPolicyServicesIpv4CidrBlock' to be non-null");
            $.ipPolicyServicesSecondaryRangeName = Objects.requireNonNull($.ipPolicyServicesSecondaryRangeName, "expected parameter 'ipPolicyServicesSecondaryRangeName' to be non-null");
            $.ipPolicySubnetworkName = Objects.requireNonNull($.ipPolicySubnetworkName, "expected parameter 'ipPolicySubnetworkName' to be non-null");
            $.locations = Objects.requireNonNull($.locations, "expected parameter 'locations' to be non-null");
            $.machineType = Objects.requireNonNull($.machineType, "expected parameter 'machineType' to be non-null");
            $.maintenanceWindow = Objects.requireNonNull($.maintenanceWindow, "expected parameter 'maintenanceWindow' to be non-null");
            $.masterIpv4CidrBlock = Objects.requireNonNull($.masterIpv4CidrBlock, "expected parameter 'masterIpv4CidrBlock' to be non-null");
            $.masterVersion = Objects.requireNonNull($.masterVersion, "expected parameter 'masterVersion' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.nodePool = Objects.requireNonNull($.nodePool, "expected parameter 'nodePool' to be non-null");
            $.nodeVersion = Objects.requireNonNull($.nodeVersion, "expected parameter 'nodeVersion' to be non-null");
            $.oauthScopes = Objects.requireNonNull($.oauthScopes, "expected parameter 'oauthScopes' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.serviceAccount = Objects.requireNonNull($.serviceAccount, "expected parameter 'serviceAccount' to be non-null");
            $.subNetwork = Objects.requireNonNull($.subNetwork, "expected parameter 'subNetwork' to be non-null");
            return $;
        }
    }

}
