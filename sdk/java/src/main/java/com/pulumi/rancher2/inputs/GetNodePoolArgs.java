// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNodePoolArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodePoolArgs Empty = new GetNodePoolArgs();

    /**
     * The RKE cluster id to use Node Pool (string)
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The RKE cluster id to use Node Pool (string)
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * The name of the Node Pool (string)
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the Node Pool (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The Node Template ID to use for node creation (string)
     * 
     */
    @Import(name="nodeTemplateId")
    private @Nullable Output<String> nodeTemplateId;

    /**
     * @return The Node Template ID to use for node creation (string)
     * 
     */
    public Optional<Output<String>> nodeTemplateId() {
        return Optional.ofNullable(this.nodeTemplateId);
    }

    private GetNodePoolArgs() {}

    private GetNodePoolArgs(GetNodePoolArgs $) {
        this.clusterId = $.clusterId;
        this.name = $.name;
        this.nodeTemplateId = $.nodeTemplateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodePoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodePoolArgs $;

        public Builder() {
            $ = new GetNodePoolArgs();
        }

        public Builder(GetNodePoolArgs defaults) {
            $ = new GetNodePoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The RKE cluster id to use Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The RKE cluster id to use Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param name The name of the Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeTemplateId The Node Template ID to use for node creation (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeTemplateId(@Nullable Output<String> nodeTemplateId) {
            $.nodeTemplateId = nodeTemplateId;
            return this;
        }

        /**
         * @param nodeTemplateId The Node Template ID to use for node creation (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeTemplateId(String nodeTemplateId) {
            return nodeTemplateId(Output.of(nodeTemplateId));
        }

        public GetNodePoolArgs build() {
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
