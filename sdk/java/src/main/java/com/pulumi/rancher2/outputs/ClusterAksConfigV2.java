// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.ClusterAksConfigV2NodePool;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterAksConfigV2 {
    /**
     * @return The AKS auth base url (string)
     * 
     */
    private final @Nullable String authBaseUrl;
    /**
     * @return The AKS authorized ip ranges (list)
     * 
     */
    private final @Nullable List<String> authorizedIpRanges;
    /**
     * @return The AKS base url (string)
     * 
     */
    private final @Nullable String baseUrl;
    /**
     * @return The EKS cloud_credential id (string)
     * 
     */
    private final String cloudCredentialId;
    /**
     * @return The AKS dns prefix. Required if `imported=false` (string)
     * 
     */
    private final @Nullable String dnsPrefix;
    /**
     * @return Enable AKS http application routing? (bool)
     * 
     */
    private final @Nullable Boolean httpApplicationRouting;
    /**
     * @return Is GKE cluster imported? Default: `false` (bool)
     * 
     */
    private final @Nullable Boolean imported;
    /**
     * @return The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    private final @Nullable String kubernetesVersion;
    /**
     * @return The AKS linux admin username (string)
     * 
     */
    private final @Nullable String linuxAdminUsername;
    /**
     * @return The AKS linux ssh public key (string)
     * 
     */
    private final @Nullable String linuxSshPublicKey;
    /**
     * @return The AKS load balancer sku (string)
     * 
     */
    private final @Nullable String loadBalancerSku;
    /**
     * @return The AKS log analytics workspace group (string)
     * 
     */
    private final @Nullable String logAnalyticsWorkspaceGroup;
    /**
     * @return The AKS log analytics workspace name (string)
     * 
     */
    private final @Nullable String logAnalyticsWorkspaceName;
    /**
     * @return Is AKS cluster monitoring enabled? (bool)
     * 
     */
    private final @Nullable Boolean monitoring;
    /**
     * @return Name of cluster registration token (string)
     * 
     */
    private final @Nullable String name;
    /**
     * @return The AKS network dns service ip (string)
     * 
     */
    private final @Nullable String networkDnsServiceIp;
    /**
     * @return The AKS network docker bridge cidr (string)
     * 
     */
    private final @Nullable String networkDockerBridgeCidr;
    /**
     * @return The AKS network plugin. Required if `imported=false` (string)
     * 
     */
    private final @Nullable String networkPlugin;
    /**
     * @return The AKS network pod cidr (string)
     * 
     */
    private final @Nullable String networkPodCidr;
    /**
     * @return The AKS network policy (string)
     * 
     */
    private final @Nullable String networkPolicy;
    /**
     * @return The AKS network service cidr (string)
     * 
     */
    private final @Nullable String networkServiceCidr;
    /**
     * @return The GKE cluster node pools. Required for create new cluster (List)
     * 
     */
    private final @Nullable List<ClusterAksConfigV2NodePool> nodePools;
    /**
     * @return Is AKS cluster private? (bool)
     * 
     */
    private final @Nullable Boolean privateCluster;
    /**
     * @return The AKS resource group (string)
     * 
     */
    private final String resourceGroup;
    /**
     * @return The AKS resource location (string)
     * 
     */
    private final String resourceLocation;
    /**
     * @return The AKS subnet (string)
     * 
     */
    private final @Nullable String subnet;
    /**
     * @return The GKE node config tags (List)
     * 
     */
    private final @Nullable Map<String,Object> tags;
    /**
     * @return The name of the virtual network to use. If it&#39;s not specified Rancher will create a new VPC (string)
     * 
     */
    private final @Nullable String virtualNetwork;
    /**
     * @return The AKS virtual network resource group (string)
     * 
     */
    private final @Nullable String virtualNetworkResourceGroup;

    @CustomType.Constructor
    private ClusterAksConfigV2(
        @CustomType.Parameter("authBaseUrl") @Nullable String authBaseUrl,
        @CustomType.Parameter("authorizedIpRanges") @Nullable List<String> authorizedIpRanges,
        @CustomType.Parameter("baseUrl") @Nullable String baseUrl,
        @CustomType.Parameter("cloudCredentialId") String cloudCredentialId,
        @CustomType.Parameter("dnsPrefix") @Nullable String dnsPrefix,
        @CustomType.Parameter("httpApplicationRouting") @Nullable Boolean httpApplicationRouting,
        @CustomType.Parameter("imported") @Nullable Boolean imported,
        @CustomType.Parameter("kubernetesVersion") @Nullable String kubernetesVersion,
        @CustomType.Parameter("linuxAdminUsername") @Nullable String linuxAdminUsername,
        @CustomType.Parameter("linuxSshPublicKey") @Nullable String linuxSshPublicKey,
        @CustomType.Parameter("loadBalancerSku") @Nullable String loadBalancerSku,
        @CustomType.Parameter("logAnalyticsWorkspaceGroup") @Nullable String logAnalyticsWorkspaceGroup,
        @CustomType.Parameter("logAnalyticsWorkspaceName") @Nullable String logAnalyticsWorkspaceName,
        @CustomType.Parameter("monitoring") @Nullable Boolean monitoring,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("networkDnsServiceIp") @Nullable String networkDnsServiceIp,
        @CustomType.Parameter("networkDockerBridgeCidr") @Nullable String networkDockerBridgeCidr,
        @CustomType.Parameter("networkPlugin") @Nullable String networkPlugin,
        @CustomType.Parameter("networkPodCidr") @Nullable String networkPodCidr,
        @CustomType.Parameter("networkPolicy") @Nullable String networkPolicy,
        @CustomType.Parameter("networkServiceCidr") @Nullable String networkServiceCidr,
        @CustomType.Parameter("nodePools") @Nullable List<ClusterAksConfigV2NodePool> nodePools,
        @CustomType.Parameter("privateCluster") @Nullable Boolean privateCluster,
        @CustomType.Parameter("resourceGroup") String resourceGroup,
        @CustomType.Parameter("resourceLocation") String resourceLocation,
        @CustomType.Parameter("subnet") @Nullable String subnet,
        @CustomType.Parameter("tags") @Nullable Map<String,Object> tags,
        @CustomType.Parameter("virtualNetwork") @Nullable String virtualNetwork,
        @CustomType.Parameter("virtualNetworkResourceGroup") @Nullable String virtualNetworkResourceGroup) {
        this.authBaseUrl = authBaseUrl;
        this.authorizedIpRanges = authorizedIpRanges;
        this.baseUrl = baseUrl;
        this.cloudCredentialId = cloudCredentialId;
        this.dnsPrefix = dnsPrefix;
        this.httpApplicationRouting = httpApplicationRouting;
        this.imported = imported;
        this.kubernetesVersion = kubernetesVersion;
        this.linuxAdminUsername = linuxAdminUsername;
        this.linuxSshPublicKey = linuxSshPublicKey;
        this.loadBalancerSku = loadBalancerSku;
        this.logAnalyticsWorkspaceGroup = logAnalyticsWorkspaceGroup;
        this.logAnalyticsWorkspaceName = logAnalyticsWorkspaceName;
        this.monitoring = monitoring;
        this.name = name;
        this.networkDnsServiceIp = networkDnsServiceIp;
        this.networkDockerBridgeCidr = networkDockerBridgeCidr;
        this.networkPlugin = networkPlugin;
        this.networkPodCidr = networkPodCidr;
        this.networkPolicy = networkPolicy;
        this.networkServiceCidr = networkServiceCidr;
        this.nodePools = nodePools;
        this.privateCluster = privateCluster;
        this.resourceGroup = resourceGroup;
        this.resourceLocation = resourceLocation;
        this.subnet = subnet;
        this.tags = tags;
        this.virtualNetwork = virtualNetwork;
        this.virtualNetworkResourceGroup = virtualNetworkResourceGroup;
    }

    /**
     * @return The AKS auth base url (string)
     * 
     */
    public Optional<String> authBaseUrl() {
        return Optional.ofNullable(this.authBaseUrl);
    }
    /**
     * @return The AKS authorized ip ranges (list)
     * 
     */
    public List<String> authorizedIpRanges() {
        return this.authorizedIpRanges == null ? List.of() : this.authorizedIpRanges;
    }
    /**
     * @return The AKS base url (string)
     * 
     */
    public Optional<String> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }
    /**
     * @return The EKS cloud_credential id (string)
     * 
     */
    public String cloudCredentialId() {
        return this.cloudCredentialId;
    }
    /**
     * @return The AKS dns prefix. Required if `imported=false` (string)
     * 
     */
    public Optional<String> dnsPrefix() {
        return Optional.ofNullable(this.dnsPrefix);
    }
    /**
     * @return Enable AKS http application routing? (bool)
     * 
     */
    public Optional<Boolean> httpApplicationRouting() {
        return Optional.ofNullable(this.httpApplicationRouting);
    }
    /**
     * @return Is GKE cluster imported? Default: `false` (bool)
     * 
     */
    public Optional<Boolean> imported() {
        return Optional.ofNullable(this.imported);
    }
    /**
     * @return The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    public Optional<String> kubernetesVersion() {
        return Optional.ofNullable(this.kubernetesVersion);
    }
    /**
     * @return The AKS linux admin username (string)
     * 
     */
    public Optional<String> linuxAdminUsername() {
        return Optional.ofNullable(this.linuxAdminUsername);
    }
    /**
     * @return The AKS linux ssh public key (string)
     * 
     */
    public Optional<String> linuxSshPublicKey() {
        return Optional.ofNullable(this.linuxSshPublicKey);
    }
    /**
     * @return The AKS load balancer sku (string)
     * 
     */
    public Optional<String> loadBalancerSku() {
        return Optional.ofNullable(this.loadBalancerSku);
    }
    /**
     * @return The AKS log analytics workspace group (string)
     * 
     */
    public Optional<String> logAnalyticsWorkspaceGroup() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceGroup);
    }
    /**
     * @return The AKS log analytics workspace name (string)
     * 
     */
    public Optional<String> logAnalyticsWorkspaceName() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceName);
    }
    /**
     * @return Is AKS cluster monitoring enabled? (bool)
     * 
     */
    public Optional<Boolean> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }
    /**
     * @return Name of cluster registration token (string)
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The AKS network dns service ip (string)
     * 
     */
    public Optional<String> networkDnsServiceIp() {
        return Optional.ofNullable(this.networkDnsServiceIp);
    }
    /**
     * @return The AKS network docker bridge cidr (string)
     * 
     */
    public Optional<String> networkDockerBridgeCidr() {
        return Optional.ofNullable(this.networkDockerBridgeCidr);
    }
    /**
     * @return The AKS network plugin. Required if `imported=false` (string)
     * 
     */
    public Optional<String> networkPlugin() {
        return Optional.ofNullable(this.networkPlugin);
    }
    /**
     * @return The AKS network pod cidr (string)
     * 
     */
    public Optional<String> networkPodCidr() {
        return Optional.ofNullable(this.networkPodCidr);
    }
    /**
     * @return The AKS network policy (string)
     * 
     */
    public Optional<String> networkPolicy() {
        return Optional.ofNullable(this.networkPolicy);
    }
    /**
     * @return The AKS network service cidr (string)
     * 
     */
    public Optional<String> networkServiceCidr() {
        return Optional.ofNullable(this.networkServiceCidr);
    }
    /**
     * @return The GKE cluster node pools. Required for create new cluster (List)
     * 
     */
    public List<ClusterAksConfigV2NodePool> nodePools() {
        return this.nodePools == null ? List.of() : this.nodePools;
    }
    /**
     * @return Is AKS cluster private? (bool)
     * 
     */
    public Optional<Boolean> privateCluster() {
        return Optional.ofNullable(this.privateCluster);
    }
    /**
     * @return The AKS resource group (string)
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * @return The AKS resource location (string)
     * 
     */
    public String resourceLocation() {
        return this.resourceLocation;
    }
    /**
     * @return The AKS subnet (string)
     * 
     */
    public Optional<String> subnet() {
        return Optional.ofNullable(this.subnet);
    }
    /**
     * @return The GKE node config tags (List)
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The name of the virtual network to use. If it&#39;s not specified Rancher will create a new VPC (string)
     * 
     */
    public Optional<String> virtualNetwork() {
        return Optional.ofNullable(this.virtualNetwork);
    }
    /**
     * @return The AKS virtual network resource group (string)
     * 
     */
    public Optional<String> virtualNetworkResourceGroup() {
        return Optional.ofNullable(this.virtualNetworkResourceGroup);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterAksConfigV2 defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String authBaseUrl;
        private @Nullable List<String> authorizedIpRanges;
        private @Nullable String baseUrl;
        private String cloudCredentialId;
        private @Nullable String dnsPrefix;
        private @Nullable Boolean httpApplicationRouting;
        private @Nullable Boolean imported;
        private @Nullable String kubernetesVersion;
        private @Nullable String linuxAdminUsername;
        private @Nullable String linuxSshPublicKey;
        private @Nullable String loadBalancerSku;
        private @Nullable String logAnalyticsWorkspaceGroup;
        private @Nullable String logAnalyticsWorkspaceName;
        private @Nullable Boolean monitoring;
        private @Nullable String name;
        private @Nullable String networkDnsServiceIp;
        private @Nullable String networkDockerBridgeCidr;
        private @Nullable String networkPlugin;
        private @Nullable String networkPodCidr;
        private @Nullable String networkPolicy;
        private @Nullable String networkServiceCidr;
        private @Nullable List<ClusterAksConfigV2NodePool> nodePools;
        private @Nullable Boolean privateCluster;
        private String resourceGroup;
        private String resourceLocation;
        private @Nullable String subnet;
        private @Nullable Map<String,Object> tags;
        private @Nullable String virtualNetwork;
        private @Nullable String virtualNetworkResourceGroup;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterAksConfigV2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authBaseUrl = defaults.authBaseUrl;
    	      this.authorizedIpRanges = defaults.authorizedIpRanges;
    	      this.baseUrl = defaults.baseUrl;
    	      this.cloudCredentialId = defaults.cloudCredentialId;
    	      this.dnsPrefix = defaults.dnsPrefix;
    	      this.httpApplicationRouting = defaults.httpApplicationRouting;
    	      this.imported = defaults.imported;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.linuxAdminUsername = defaults.linuxAdminUsername;
    	      this.linuxSshPublicKey = defaults.linuxSshPublicKey;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.logAnalyticsWorkspaceGroup = defaults.logAnalyticsWorkspaceGroup;
    	      this.logAnalyticsWorkspaceName = defaults.logAnalyticsWorkspaceName;
    	      this.monitoring = defaults.monitoring;
    	      this.name = defaults.name;
    	      this.networkDnsServiceIp = defaults.networkDnsServiceIp;
    	      this.networkDockerBridgeCidr = defaults.networkDockerBridgeCidr;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPodCidr = defaults.networkPodCidr;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.networkServiceCidr = defaults.networkServiceCidr;
    	      this.nodePools = defaults.nodePools;
    	      this.privateCluster = defaults.privateCluster;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.resourceLocation = defaults.resourceLocation;
    	      this.subnet = defaults.subnet;
    	      this.tags = defaults.tags;
    	      this.virtualNetwork = defaults.virtualNetwork;
    	      this.virtualNetworkResourceGroup = defaults.virtualNetworkResourceGroup;
        }

        public Builder authBaseUrl(@Nullable String authBaseUrl) {
            this.authBaseUrl = authBaseUrl;
            return this;
        }
        public Builder authorizedIpRanges(@Nullable List<String> authorizedIpRanges) {
            this.authorizedIpRanges = authorizedIpRanges;
            return this;
        }
        public Builder authorizedIpRanges(String... authorizedIpRanges) {
            return authorizedIpRanges(List.of(authorizedIpRanges));
        }
        public Builder baseUrl(@Nullable String baseUrl) {
            this.baseUrl = baseUrl;
            return this;
        }
        public Builder cloudCredentialId(String cloudCredentialId) {
            this.cloudCredentialId = Objects.requireNonNull(cloudCredentialId);
            return this;
        }
        public Builder dnsPrefix(@Nullable String dnsPrefix) {
            this.dnsPrefix = dnsPrefix;
            return this;
        }
        public Builder httpApplicationRouting(@Nullable Boolean httpApplicationRouting) {
            this.httpApplicationRouting = httpApplicationRouting;
            return this;
        }
        public Builder imported(@Nullable Boolean imported) {
            this.imported = imported;
            return this;
        }
        public Builder kubernetesVersion(@Nullable String kubernetesVersion) {
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        public Builder linuxAdminUsername(@Nullable String linuxAdminUsername) {
            this.linuxAdminUsername = linuxAdminUsername;
            return this;
        }
        public Builder linuxSshPublicKey(@Nullable String linuxSshPublicKey) {
            this.linuxSshPublicKey = linuxSshPublicKey;
            return this;
        }
        public Builder loadBalancerSku(@Nullable String loadBalancerSku) {
            this.loadBalancerSku = loadBalancerSku;
            return this;
        }
        public Builder logAnalyticsWorkspaceGroup(@Nullable String logAnalyticsWorkspaceGroup) {
            this.logAnalyticsWorkspaceGroup = logAnalyticsWorkspaceGroup;
            return this;
        }
        public Builder logAnalyticsWorkspaceName(@Nullable String logAnalyticsWorkspaceName) {
            this.logAnalyticsWorkspaceName = logAnalyticsWorkspaceName;
            return this;
        }
        public Builder monitoring(@Nullable Boolean monitoring) {
            this.monitoring = monitoring;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder networkDnsServiceIp(@Nullable String networkDnsServiceIp) {
            this.networkDnsServiceIp = networkDnsServiceIp;
            return this;
        }
        public Builder networkDockerBridgeCidr(@Nullable String networkDockerBridgeCidr) {
            this.networkDockerBridgeCidr = networkDockerBridgeCidr;
            return this;
        }
        public Builder networkPlugin(@Nullable String networkPlugin) {
            this.networkPlugin = networkPlugin;
            return this;
        }
        public Builder networkPodCidr(@Nullable String networkPodCidr) {
            this.networkPodCidr = networkPodCidr;
            return this;
        }
        public Builder networkPolicy(@Nullable String networkPolicy) {
            this.networkPolicy = networkPolicy;
            return this;
        }
        public Builder networkServiceCidr(@Nullable String networkServiceCidr) {
            this.networkServiceCidr = networkServiceCidr;
            return this;
        }
        public Builder nodePools(@Nullable List<ClusterAksConfigV2NodePool> nodePools) {
            this.nodePools = nodePools;
            return this;
        }
        public Builder nodePools(ClusterAksConfigV2NodePool... nodePools) {
            return nodePools(List.of(nodePools));
        }
        public Builder privateCluster(@Nullable Boolean privateCluster) {
            this.privateCluster = privateCluster;
            return this;
        }
        public Builder resourceGroup(String resourceGroup) {
            this.resourceGroup = Objects.requireNonNull(resourceGroup);
            return this;
        }
        public Builder resourceLocation(String resourceLocation) {
            this.resourceLocation = Objects.requireNonNull(resourceLocation);
            return this;
        }
        public Builder subnet(@Nullable String subnet) {
            this.subnet = subnet;
            return this;
        }
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        public Builder virtualNetwork(@Nullable String virtualNetwork) {
            this.virtualNetwork = virtualNetwork;
            return this;
        }
        public Builder virtualNetworkResourceGroup(@Nullable String virtualNetworkResourceGroup) {
            this.virtualNetworkResourceGroup = virtualNetworkResourceGroup;
            return this;
        }        public ClusterAksConfigV2 build() {
            return new ClusterAksConfigV2(authBaseUrl, authorizedIpRanges, baseUrl, cloudCredentialId, dnsPrefix, httpApplicationRouting, imported, kubernetesVersion, linuxAdminUsername, linuxSshPublicKey, loadBalancerSku, logAnalyticsWorkspaceGroup, logAnalyticsWorkspaceName, monitoring, name, networkDnsServiceIp, networkDockerBridgeCidr, networkPlugin, networkPodCidr, networkPolicy, networkServiceCidr, nodePools, privateCluster, resourceGroup, resourceLocation, subnet, tags, virtualNetwork, virtualNetworkResourceGroup);
        }
    }
}
