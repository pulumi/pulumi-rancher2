// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterAksConfig;
import com.pulumi.rancher2.outputs.GetClusterAksConfigV2;
import com.pulumi.rancher2.outputs.GetClusterClusterAuthEndpoint;
import com.pulumi.rancher2.outputs.GetClusterClusterMonitoringInput;
import com.pulumi.rancher2.outputs.GetClusterClusterRegistrationToken;
import com.pulumi.rancher2.outputs.GetClusterClusterTemplateAnswers;
import com.pulumi.rancher2.outputs.GetClusterClusterTemplateQuestion;
import com.pulumi.rancher2.outputs.GetClusterEksConfig;
import com.pulumi.rancher2.outputs.GetClusterEksConfigV2;
import com.pulumi.rancher2.outputs.GetClusterGkeConfig;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2;
import com.pulumi.rancher2.outputs.GetClusterK3sConfig;
import com.pulumi.rancher2.outputs.GetClusterOkeConfig;
import com.pulumi.rancher2.outputs.GetClusterRke2Config;
import com.pulumi.rancher2.outputs.GetClusterRkeConfig;
import com.pulumi.rancher2.outputs.GetClusterScheduledClusterScan;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterResult {
    /**
     * @return (Computed) Optional Agent Env Vars for Rancher agent. Just for Rancher v2.5.6 and above (list)
     * 
     */
    private final List<String> agentEnvVars;
    /**
     * @return (Computed) The Azure aks configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    private final GetClusterAksConfig aksConfig;
    /**
     * @return (Optional) The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    private final GetClusterAksConfigV2 aksConfigV2;
    /**
     * @return (Computed) Annotations for Node Pool object (map)
     * 
     */
    private final Map<String,Object> annotations;
    /**
     * @return (Computed) K8s cluster ca cert (string)
     * 
     */
    private final String caCert;
    /**
     * @return (Computed) Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     * 
     */
    private final GetClusterClusterAuthEndpoint clusterAuthEndpoint;
    /**
     * @return (Computed) Cluster monitoring config (list maxitems:1)
     * 
     */
    private final GetClusterClusterMonitoringInput clusterMonitoringInput;
    /**
     * @return (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     * 
     */
    private final GetClusterClusterRegistrationToken clusterRegistrationToken;
    /**
     * @return (Computed) Cluster template answers (list maxitems:1)
     * 
     */
    private final GetClusterClusterTemplateAnswers clusterTemplateAnswers;
    /**
     * @return (Computed) Cluster template ID (string)
     * 
     */
    private final String clusterTemplateId;
    /**
     * @return (Computed) Cluster template questions (list)
     * 
     */
    private final List<GetClusterClusterTemplateQuestion> clusterTemplateQuestions;
    /**
     * @return (Computed) Cluster template revision ID (string)
     * 
     */
    private final String clusterTemplateRevisionId;
    /**
     * @return (Optional/Computed) [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     * 
     */
    private final String defaultPodSecurityPolicyTemplateId;
    /**
     * @return (Computed) Default project ID for the cluster (string)
     * 
     */
    private final String defaultProjectId;
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    private final String description;
    /**
     * @return (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     * 
     */
    private final String driver;
    /**
     * @return (Computed) The Amazon eks configuration for `eks` Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    private final GetClusterEksConfig eksConfig;
    /**
     * @return (Computed) The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.x or above (list maxitems:1)
     * 
     */
    private final GetClusterEksConfigV2 eksConfigV2;
    private final Boolean enableClusterAlerting;
    /**
     * @return (Computed) Enable built-in cluster monitoring. Default `false` (bool)
     * 
     */
    private final Boolean enableClusterMonitoring;
    /**
     * @return (Computed) Enable project network isolation. Default `false` (bool)
     * 
     */
    private final Boolean enableNetworkPolicy;
    /**
     * @return (Computed) Fleet workspace name (string)
     * 
     */
    private final String fleetWorkspaceName;
    /**
     * @return (Computed) The Google gke configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1) (list maxitems:1)
     * 
     */
    private final GetClusterGkeConfig gkeConfig;
    /**
     * @return (Computed) The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 or above (list maxitems:1)
     * 
     */
    private final GetClusterGkeConfigV2 gkeConfigV2;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return (Computed) The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
     * 
     */
    private final GetClusterK3sConfig k3sConfig;
    /**
     * @return (Computed) Kube Config generated for the cluster (string)
     * 
     */
    private final String kubeConfig;
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    private final Map<String,Object> labels;
    private final String name;
    /**
     * @return (Computed) The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    private final GetClusterOkeConfig okeConfig;
    /**
     * @return (Computed) The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    private final GetClusterRke2Config rke2Config;
    /**
     * @return (Computed) The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
     * 
     */
    private final GetClusterRkeConfig rkeConfig;
    private final List<GetClusterScheduledClusterScan> scheduledClusterScans;
    /**
     * @return (Computed) System project ID for the cluster (string)
     * 
     */
    private final String systemProjectId;

    @CustomType.Constructor
    private GetClusterResult(
        @CustomType.Parameter("agentEnvVars") List<String> agentEnvVars,
        @CustomType.Parameter("aksConfig") GetClusterAksConfig aksConfig,
        @CustomType.Parameter("aksConfigV2") GetClusterAksConfigV2 aksConfigV2,
        @CustomType.Parameter("annotations") Map<String,Object> annotations,
        @CustomType.Parameter("caCert") String caCert,
        @CustomType.Parameter("clusterAuthEndpoint") GetClusterClusterAuthEndpoint clusterAuthEndpoint,
        @CustomType.Parameter("clusterMonitoringInput") GetClusterClusterMonitoringInput clusterMonitoringInput,
        @CustomType.Parameter("clusterRegistrationToken") GetClusterClusterRegistrationToken clusterRegistrationToken,
        @CustomType.Parameter("clusterTemplateAnswers") GetClusterClusterTemplateAnswers clusterTemplateAnswers,
        @CustomType.Parameter("clusterTemplateId") String clusterTemplateId,
        @CustomType.Parameter("clusterTemplateQuestions") List<GetClusterClusterTemplateQuestion> clusterTemplateQuestions,
        @CustomType.Parameter("clusterTemplateRevisionId") String clusterTemplateRevisionId,
        @CustomType.Parameter("defaultPodSecurityPolicyTemplateId") String defaultPodSecurityPolicyTemplateId,
        @CustomType.Parameter("defaultProjectId") String defaultProjectId,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("driver") String driver,
        @CustomType.Parameter("eksConfig") GetClusterEksConfig eksConfig,
        @CustomType.Parameter("eksConfigV2") GetClusterEksConfigV2 eksConfigV2,
        @CustomType.Parameter("enableClusterAlerting") Boolean enableClusterAlerting,
        @CustomType.Parameter("enableClusterMonitoring") Boolean enableClusterMonitoring,
        @CustomType.Parameter("enableNetworkPolicy") Boolean enableNetworkPolicy,
        @CustomType.Parameter("fleetWorkspaceName") String fleetWorkspaceName,
        @CustomType.Parameter("gkeConfig") GetClusterGkeConfig gkeConfig,
        @CustomType.Parameter("gkeConfigV2") GetClusterGkeConfigV2 gkeConfigV2,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("k3sConfig") GetClusterK3sConfig k3sConfig,
        @CustomType.Parameter("kubeConfig") String kubeConfig,
        @CustomType.Parameter("labels") Map<String,Object> labels,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("okeConfig") GetClusterOkeConfig okeConfig,
        @CustomType.Parameter("rke2Config") GetClusterRke2Config rke2Config,
        @CustomType.Parameter("rkeConfig") GetClusterRkeConfig rkeConfig,
        @CustomType.Parameter("scheduledClusterScans") List<GetClusterScheduledClusterScan> scheduledClusterScans,
        @CustomType.Parameter("systemProjectId") String systemProjectId) {
        this.agentEnvVars = agentEnvVars;
        this.aksConfig = aksConfig;
        this.aksConfigV2 = aksConfigV2;
        this.annotations = annotations;
        this.caCert = caCert;
        this.clusterAuthEndpoint = clusterAuthEndpoint;
        this.clusterMonitoringInput = clusterMonitoringInput;
        this.clusterRegistrationToken = clusterRegistrationToken;
        this.clusterTemplateAnswers = clusterTemplateAnswers;
        this.clusterTemplateId = clusterTemplateId;
        this.clusterTemplateQuestions = clusterTemplateQuestions;
        this.clusterTemplateRevisionId = clusterTemplateRevisionId;
        this.defaultPodSecurityPolicyTemplateId = defaultPodSecurityPolicyTemplateId;
        this.defaultProjectId = defaultProjectId;
        this.description = description;
        this.driver = driver;
        this.eksConfig = eksConfig;
        this.eksConfigV2 = eksConfigV2;
        this.enableClusterAlerting = enableClusterAlerting;
        this.enableClusterMonitoring = enableClusterMonitoring;
        this.enableNetworkPolicy = enableNetworkPolicy;
        this.fleetWorkspaceName = fleetWorkspaceName;
        this.gkeConfig = gkeConfig;
        this.gkeConfigV2 = gkeConfigV2;
        this.id = id;
        this.k3sConfig = k3sConfig;
        this.kubeConfig = kubeConfig;
        this.labels = labels;
        this.name = name;
        this.okeConfig = okeConfig;
        this.rke2Config = rke2Config;
        this.rkeConfig = rkeConfig;
        this.scheduledClusterScans = scheduledClusterScans;
        this.systemProjectId = systemProjectId;
    }

    /**
     * @return (Computed) Optional Agent Env Vars for Rancher agent. Just for Rancher v2.5.6 and above (list)
     * 
     */
    public List<String> agentEnvVars() {
        return this.agentEnvVars;
    }
    /**
     * @return (Computed) The Azure aks configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public GetClusterAksConfig aksConfig() {
        return this.aksConfig;
    }
    /**
     * @return (Optional) The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public GetClusterAksConfigV2 aksConfigV2() {
        return this.aksConfigV2;
    }
    /**
     * @return (Computed) Annotations for Node Pool object (map)
     * 
     */
    public Map<String,Object> annotations() {
        return this.annotations;
    }
    /**
     * @return (Computed) K8s cluster ca cert (string)
     * 
     */
    public String caCert() {
        return this.caCert;
    }
    /**
     * @return (Computed) Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     * 
     */
    public GetClusterClusterAuthEndpoint clusterAuthEndpoint() {
        return this.clusterAuthEndpoint;
    }
    /**
     * @return (Computed) Cluster monitoring config (list maxitems:1)
     * 
     */
    public GetClusterClusterMonitoringInput clusterMonitoringInput() {
        return this.clusterMonitoringInput;
    }
    /**
     * @return (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     * 
     */
    public GetClusterClusterRegistrationToken clusterRegistrationToken() {
        return this.clusterRegistrationToken;
    }
    /**
     * @return (Computed) Cluster template answers (list maxitems:1)
     * 
     */
    public GetClusterClusterTemplateAnswers clusterTemplateAnswers() {
        return this.clusterTemplateAnswers;
    }
    /**
     * @return (Computed) Cluster template ID (string)
     * 
     */
    public String clusterTemplateId() {
        return this.clusterTemplateId;
    }
    /**
     * @return (Computed) Cluster template questions (list)
     * 
     */
    public List<GetClusterClusterTemplateQuestion> clusterTemplateQuestions() {
        return this.clusterTemplateQuestions;
    }
    /**
     * @return (Computed) Cluster template revision ID (string)
     * 
     */
    public String clusterTemplateRevisionId() {
        return this.clusterTemplateRevisionId;
    }
    /**
     * @return (Optional/Computed) [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     * 
     */
    public String defaultPodSecurityPolicyTemplateId() {
        return this.defaultPodSecurityPolicyTemplateId;
    }
    /**
     * @return (Computed) Default project ID for the cluster (string)
     * 
     */
    public String defaultProjectId() {
        return this.defaultProjectId;
    }
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     * 
     */
    public String driver() {
        return this.driver;
    }
    /**
     * @return (Computed) The Amazon eks configuration for `eks` Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public GetClusterEksConfig eksConfig() {
        return this.eksConfig;
    }
    /**
     * @return (Computed) The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.x or above (list maxitems:1)
     * 
     */
    public GetClusterEksConfigV2 eksConfigV2() {
        return this.eksConfigV2;
    }
    public Boolean enableClusterAlerting() {
        return this.enableClusterAlerting;
    }
    /**
     * @return (Computed) Enable built-in cluster monitoring. Default `false` (bool)
     * 
     */
    public Boolean enableClusterMonitoring() {
        return this.enableClusterMonitoring;
    }
    /**
     * @return (Computed) Enable project network isolation. Default `false` (bool)
     * 
     */
    public Boolean enableNetworkPolicy() {
        return this.enableNetworkPolicy;
    }
    /**
     * @return (Computed) Fleet workspace name (string)
     * 
     */
    public String fleetWorkspaceName() {
        return this.fleetWorkspaceName;
    }
    /**
     * @return (Computed) The Google gke configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1) (list maxitems:1)
     * 
     */
    public GetClusterGkeConfig gkeConfig() {
        return this.gkeConfig;
    }
    /**
     * @return (Computed) The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 or above (list maxitems:1)
     * 
     */
    public GetClusterGkeConfigV2 gkeConfigV2() {
        return this.gkeConfigV2;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
     * 
     */
    public GetClusterK3sConfig k3sConfig() {
        return this.k3sConfig;
    }
    /**
     * @return (Computed) Kube Config generated for the cluster (string)
     * 
     */
    public String kubeConfig() {
        return this.kubeConfig;
    }
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public GetClusterOkeConfig okeConfig() {
        return this.okeConfig;
    }
    /**
     * @return (Computed) The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public GetClusterRke2Config rke2Config() {
        return this.rke2Config;
    }
    /**
     * @return (Computed) The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
     * 
     */
    public GetClusterRkeConfig rkeConfig() {
        return this.rkeConfig;
    }
    public List<GetClusterScheduledClusterScan> scheduledClusterScans() {
        return this.scheduledClusterScans;
    }
    /**
     * @return (Computed) System project ID for the cluster (string)
     * 
     */
    public String systemProjectId() {
        return this.systemProjectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> agentEnvVars;
        private GetClusterAksConfig aksConfig;
        private GetClusterAksConfigV2 aksConfigV2;
        private Map<String,Object> annotations;
        private String caCert;
        private GetClusterClusterAuthEndpoint clusterAuthEndpoint;
        private GetClusterClusterMonitoringInput clusterMonitoringInput;
        private GetClusterClusterRegistrationToken clusterRegistrationToken;
        private GetClusterClusterTemplateAnswers clusterTemplateAnswers;
        private String clusterTemplateId;
        private List<GetClusterClusterTemplateQuestion> clusterTemplateQuestions;
        private String clusterTemplateRevisionId;
        private String defaultPodSecurityPolicyTemplateId;
        private String defaultProjectId;
        private String description;
        private String driver;
        private GetClusterEksConfig eksConfig;
        private GetClusterEksConfigV2 eksConfigV2;
        private Boolean enableClusterAlerting;
        private Boolean enableClusterMonitoring;
        private Boolean enableNetworkPolicy;
        private String fleetWorkspaceName;
        private GetClusterGkeConfig gkeConfig;
        private GetClusterGkeConfigV2 gkeConfigV2;
        private String id;
        private GetClusterK3sConfig k3sConfig;
        private String kubeConfig;
        private Map<String,Object> labels;
        private String name;
        private GetClusterOkeConfig okeConfig;
        private GetClusterRke2Config rke2Config;
        private GetClusterRkeConfig rkeConfig;
        private List<GetClusterScheduledClusterScan> scheduledClusterScans;
        private String systemProjectId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentEnvVars = defaults.agentEnvVars;
    	      this.aksConfig = defaults.aksConfig;
    	      this.aksConfigV2 = defaults.aksConfigV2;
    	      this.annotations = defaults.annotations;
    	      this.caCert = defaults.caCert;
    	      this.clusterAuthEndpoint = defaults.clusterAuthEndpoint;
    	      this.clusterMonitoringInput = defaults.clusterMonitoringInput;
    	      this.clusterRegistrationToken = defaults.clusterRegistrationToken;
    	      this.clusterTemplateAnswers = defaults.clusterTemplateAnswers;
    	      this.clusterTemplateId = defaults.clusterTemplateId;
    	      this.clusterTemplateQuestions = defaults.clusterTemplateQuestions;
    	      this.clusterTemplateRevisionId = defaults.clusterTemplateRevisionId;
    	      this.defaultPodSecurityPolicyTemplateId = defaults.defaultPodSecurityPolicyTemplateId;
    	      this.defaultProjectId = defaults.defaultProjectId;
    	      this.description = defaults.description;
    	      this.driver = defaults.driver;
    	      this.eksConfig = defaults.eksConfig;
    	      this.eksConfigV2 = defaults.eksConfigV2;
    	      this.enableClusterAlerting = defaults.enableClusterAlerting;
    	      this.enableClusterMonitoring = defaults.enableClusterMonitoring;
    	      this.enableNetworkPolicy = defaults.enableNetworkPolicy;
    	      this.fleetWorkspaceName = defaults.fleetWorkspaceName;
    	      this.gkeConfig = defaults.gkeConfig;
    	      this.gkeConfigV2 = defaults.gkeConfigV2;
    	      this.id = defaults.id;
    	      this.k3sConfig = defaults.k3sConfig;
    	      this.kubeConfig = defaults.kubeConfig;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.okeConfig = defaults.okeConfig;
    	      this.rke2Config = defaults.rke2Config;
    	      this.rkeConfig = defaults.rkeConfig;
    	      this.scheduledClusterScans = defaults.scheduledClusterScans;
    	      this.systemProjectId = defaults.systemProjectId;
        }

        public Builder agentEnvVars(List<String> agentEnvVars) {
            this.agentEnvVars = Objects.requireNonNull(agentEnvVars);
            return this;
        }
        public Builder agentEnvVars(String... agentEnvVars) {
            return agentEnvVars(List.of(agentEnvVars));
        }
        public Builder aksConfig(GetClusterAksConfig aksConfig) {
            this.aksConfig = Objects.requireNonNull(aksConfig);
            return this;
        }
        public Builder aksConfigV2(GetClusterAksConfigV2 aksConfigV2) {
            this.aksConfigV2 = Objects.requireNonNull(aksConfigV2);
            return this;
        }
        public Builder annotations(Map<String,Object> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        public Builder caCert(String caCert) {
            this.caCert = Objects.requireNonNull(caCert);
            return this;
        }
        public Builder clusterAuthEndpoint(GetClusterClusterAuthEndpoint clusterAuthEndpoint) {
            this.clusterAuthEndpoint = Objects.requireNonNull(clusterAuthEndpoint);
            return this;
        }
        public Builder clusterMonitoringInput(GetClusterClusterMonitoringInput clusterMonitoringInput) {
            this.clusterMonitoringInput = Objects.requireNonNull(clusterMonitoringInput);
            return this;
        }
        public Builder clusterRegistrationToken(GetClusterClusterRegistrationToken clusterRegistrationToken) {
            this.clusterRegistrationToken = Objects.requireNonNull(clusterRegistrationToken);
            return this;
        }
        public Builder clusterTemplateAnswers(GetClusterClusterTemplateAnswers clusterTemplateAnswers) {
            this.clusterTemplateAnswers = Objects.requireNonNull(clusterTemplateAnswers);
            return this;
        }
        public Builder clusterTemplateId(String clusterTemplateId) {
            this.clusterTemplateId = Objects.requireNonNull(clusterTemplateId);
            return this;
        }
        public Builder clusterTemplateQuestions(List<GetClusterClusterTemplateQuestion> clusterTemplateQuestions) {
            this.clusterTemplateQuestions = Objects.requireNonNull(clusterTemplateQuestions);
            return this;
        }
        public Builder clusterTemplateQuestions(GetClusterClusterTemplateQuestion... clusterTemplateQuestions) {
            return clusterTemplateQuestions(List.of(clusterTemplateQuestions));
        }
        public Builder clusterTemplateRevisionId(String clusterTemplateRevisionId) {
            this.clusterTemplateRevisionId = Objects.requireNonNull(clusterTemplateRevisionId);
            return this;
        }
        public Builder defaultPodSecurityPolicyTemplateId(String defaultPodSecurityPolicyTemplateId) {
            this.defaultPodSecurityPolicyTemplateId = Objects.requireNonNull(defaultPodSecurityPolicyTemplateId);
            return this;
        }
        public Builder defaultProjectId(String defaultProjectId) {
            this.defaultProjectId = Objects.requireNonNull(defaultProjectId);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder driver(String driver) {
            this.driver = Objects.requireNonNull(driver);
            return this;
        }
        public Builder eksConfig(GetClusterEksConfig eksConfig) {
            this.eksConfig = Objects.requireNonNull(eksConfig);
            return this;
        }
        public Builder eksConfigV2(GetClusterEksConfigV2 eksConfigV2) {
            this.eksConfigV2 = Objects.requireNonNull(eksConfigV2);
            return this;
        }
        public Builder enableClusterAlerting(Boolean enableClusterAlerting) {
            this.enableClusterAlerting = Objects.requireNonNull(enableClusterAlerting);
            return this;
        }
        public Builder enableClusterMonitoring(Boolean enableClusterMonitoring) {
            this.enableClusterMonitoring = Objects.requireNonNull(enableClusterMonitoring);
            return this;
        }
        public Builder enableNetworkPolicy(Boolean enableNetworkPolicy) {
            this.enableNetworkPolicy = Objects.requireNonNull(enableNetworkPolicy);
            return this;
        }
        public Builder fleetWorkspaceName(String fleetWorkspaceName) {
            this.fleetWorkspaceName = Objects.requireNonNull(fleetWorkspaceName);
            return this;
        }
        public Builder gkeConfig(GetClusterGkeConfig gkeConfig) {
            this.gkeConfig = Objects.requireNonNull(gkeConfig);
            return this;
        }
        public Builder gkeConfigV2(GetClusterGkeConfigV2 gkeConfigV2) {
            this.gkeConfigV2 = Objects.requireNonNull(gkeConfigV2);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder k3sConfig(GetClusterK3sConfig k3sConfig) {
            this.k3sConfig = Objects.requireNonNull(k3sConfig);
            return this;
        }
        public Builder kubeConfig(String kubeConfig) {
            this.kubeConfig = Objects.requireNonNull(kubeConfig);
            return this;
        }
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder okeConfig(GetClusterOkeConfig okeConfig) {
            this.okeConfig = Objects.requireNonNull(okeConfig);
            return this;
        }
        public Builder rke2Config(GetClusterRke2Config rke2Config) {
            this.rke2Config = Objects.requireNonNull(rke2Config);
            return this;
        }
        public Builder rkeConfig(GetClusterRkeConfig rkeConfig) {
            this.rkeConfig = Objects.requireNonNull(rkeConfig);
            return this;
        }
        public Builder scheduledClusterScans(List<GetClusterScheduledClusterScan> scheduledClusterScans) {
            this.scheduledClusterScans = Objects.requireNonNull(scheduledClusterScans);
            return this;
        }
        public Builder scheduledClusterScans(GetClusterScheduledClusterScan... scheduledClusterScans) {
            return scheduledClusterScans(List.of(scheduledClusterScans));
        }
        public Builder systemProjectId(String systemProjectId) {
            this.systemProjectId = Objects.requireNonNull(systemProjectId);
            return this;
        }        public GetClusterResult build() {
            return new GetClusterResult(agentEnvVars, aksConfig, aksConfigV2, annotations, caCert, clusterAuthEndpoint, clusterMonitoringInput, clusterRegistrationToken, clusterTemplateAnswers, clusterTemplateId, clusterTemplateQuestions, clusterTemplateRevisionId, defaultPodSecurityPolicyTemplateId, defaultProjectId, description, driver, eksConfig, eksConfigV2, enableClusterAlerting, enableClusterMonitoring, enableNetworkPolicy, fleetWorkspaceName, gkeConfig, gkeConfigV2, id, k3sConfig, kubeConfig, labels, name, okeConfig, rke2Config, rkeConfig, scheduledClusterScans, systemProjectId);
        }
    }
}
