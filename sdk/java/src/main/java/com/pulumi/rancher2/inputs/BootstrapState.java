// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BootstrapState extends com.pulumi.resources.ResourceArgs {

    public static final BootstrapState Empty = new BootstrapState();

    /**
     * (Computed/Sensitive) Current password for Admin user (string)
     * 
     */
    @Import(name="currentPassword")
    private @Nullable Output<String> currentPassword;

    /**
     * @return (Computed/Sensitive) Current password for Admin user (string)
     * 
     */
    public Optional<Output<String>> currentPassword() {
        return Optional.ofNullable(this.currentPassword);
    }

    /**
     * Initial password for Admin user. Default: `admin` (string)
     * 
     */
    @Import(name="initialPassword")
    private @Nullable Output<String> initialPassword;

    /**
     * @return Initial password for Admin user. Default: `admin` (string)
     * 
     */
    public Optional<Output<String>> initialPassword() {
        return Optional.ofNullable(this.initialPassword);
    }

    /**
     * Password for Admin user or random generated if empty (string)
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for Admin user or random generated if empty (string)
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Send telemetry anonymous data. Default: `false` (bool)
     * 
     */
    @Import(name="telemetry")
    private @Nullable Output<Boolean> telemetry;

    /**
     * @return Send telemetry anonymous data. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> telemetry() {
        return Optional.ofNullable(this.telemetry);
    }

    /**
     * (Computed) Generated API temporary token as helper. Should be empty (string)
     * 
     */
    @Import(name="tempToken")
    private @Nullable Output<String> tempToken;

    /**
     * @return (Computed) Generated API temporary token as helper. Should be empty (string)
     * 
     */
    public Optional<Output<String>> tempToken() {
        return Optional.ofNullable(this.tempToken);
    }

    /**
     * (Computed) Generated API temporary token id as helper. Should be empty (string)
     * 
     */
    @Import(name="tempTokenId")
    private @Nullable Output<String> tempTokenId;

    /**
     * @return (Computed) Generated API temporary token id as helper. Should be empty (string)
     * 
     */
    public Optional<Output<String>> tempTokenId() {
        return Optional.ofNullable(this.tempTokenId);
    }

    /**
     * (Computed) Generated API token for Admin User (string)
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return (Computed) Generated API token for Admin User (string)
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * (Computed) Generated API token id for Admin User (string)
     * 
     */
    @Import(name="tokenId")
    private @Nullable Output<String> tokenId;

    /**
     * @return (Computed) Generated API token id for Admin User (string)
     * 
     */
    public Optional<Output<String>> tokenId() {
        return Optional.ofNullable(this.tokenId);
    }

    /**
     * TTL in seconds for generated admin token. Default: `0`  (int)
     * 
     */
    @Import(name="tokenTtl")
    private @Nullable Output<Integer> tokenTtl;

    /**
     * @return TTL in seconds for generated admin token. Default: `0`  (int)
     * 
     */
    public Optional<Output<Integer>> tokenTtl() {
        return Optional.ofNullable(this.tokenTtl);
    }

    /**
     * Regenerate admin token. Default: `false` (bool)
     * 
     */
    @Import(name="tokenUpdate")
    private @Nullable Output<Boolean> tokenUpdate;

    /**
     * @return Regenerate admin token. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> tokenUpdate() {
        return Optional.ofNullable(this.tokenUpdate);
    }

    /**
     * Default UI landing for k8s clusters. Available options: `ember` (cluster manager ui)  and `vue` (cluster explorer ui). Default: `ember` (string)
     * 
     */
    @Import(name="uiDefaultLanding")
    private @Nullable Output<String> uiDefaultLanding;

    /**
     * @return Default UI landing for k8s clusters. Available options: `ember` (cluster manager ui)  and `vue` (cluster explorer ui). Default: `ember` (string)
     * 
     */
    public Optional<Output<String>> uiDefaultLanding() {
        return Optional.ofNullable(this.uiDefaultLanding);
    }

    /**
     * (Computed) URL set as server-url (string)
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return (Computed) URL set as server-url (string)
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * (Computed) Admin username (string)
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return (Computed) Admin username (string)
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private BootstrapState() {}

    private BootstrapState(BootstrapState $) {
        this.currentPassword = $.currentPassword;
        this.initialPassword = $.initialPassword;
        this.password = $.password;
        this.telemetry = $.telemetry;
        this.tempToken = $.tempToken;
        this.tempTokenId = $.tempTokenId;
        this.token = $.token;
        this.tokenId = $.tokenId;
        this.tokenTtl = $.tokenTtl;
        this.tokenUpdate = $.tokenUpdate;
        this.uiDefaultLanding = $.uiDefaultLanding;
        this.url = $.url;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BootstrapState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BootstrapState $;

        public Builder() {
            $ = new BootstrapState();
        }

        public Builder(BootstrapState defaults) {
            $ = new BootstrapState(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentPassword (Computed/Sensitive) Current password for Admin user (string)
         * 
         * @return builder
         * 
         */
        public Builder currentPassword(@Nullable Output<String> currentPassword) {
            $.currentPassword = currentPassword;
            return this;
        }

        /**
         * @param currentPassword (Computed/Sensitive) Current password for Admin user (string)
         * 
         * @return builder
         * 
         */
        public Builder currentPassword(String currentPassword) {
            return currentPassword(Output.of(currentPassword));
        }

        /**
         * @param initialPassword Initial password for Admin user. Default: `admin` (string)
         * 
         * @return builder
         * 
         */
        public Builder initialPassword(@Nullable Output<String> initialPassword) {
            $.initialPassword = initialPassword;
            return this;
        }

        /**
         * @param initialPassword Initial password for Admin user. Default: `admin` (string)
         * 
         * @return builder
         * 
         */
        public Builder initialPassword(String initialPassword) {
            return initialPassword(Output.of(initialPassword));
        }

        /**
         * @param password Password for Admin user or random generated if empty (string)
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for Admin user or random generated if empty (string)
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param telemetry Send telemetry anonymous data. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder telemetry(@Nullable Output<Boolean> telemetry) {
            $.telemetry = telemetry;
            return this;
        }

        /**
         * @param telemetry Send telemetry anonymous data. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder telemetry(Boolean telemetry) {
            return telemetry(Output.of(telemetry));
        }

        /**
         * @param tempToken (Computed) Generated API temporary token as helper. Should be empty (string)
         * 
         * @return builder
         * 
         */
        public Builder tempToken(@Nullable Output<String> tempToken) {
            $.tempToken = tempToken;
            return this;
        }

        /**
         * @param tempToken (Computed) Generated API temporary token as helper. Should be empty (string)
         * 
         * @return builder
         * 
         */
        public Builder tempToken(String tempToken) {
            return tempToken(Output.of(tempToken));
        }

        /**
         * @param tempTokenId (Computed) Generated API temporary token id as helper. Should be empty (string)
         * 
         * @return builder
         * 
         */
        public Builder tempTokenId(@Nullable Output<String> tempTokenId) {
            $.tempTokenId = tempTokenId;
            return this;
        }

        /**
         * @param tempTokenId (Computed) Generated API temporary token id as helper. Should be empty (string)
         * 
         * @return builder
         * 
         */
        public Builder tempTokenId(String tempTokenId) {
            return tempTokenId(Output.of(tempTokenId));
        }

        /**
         * @param token (Computed) Generated API token for Admin User (string)
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token (Computed) Generated API token for Admin User (string)
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param tokenId (Computed) Generated API token id for Admin User (string)
         * 
         * @return builder
         * 
         */
        public Builder tokenId(@Nullable Output<String> tokenId) {
            $.tokenId = tokenId;
            return this;
        }

        /**
         * @param tokenId (Computed) Generated API token id for Admin User (string)
         * 
         * @return builder
         * 
         */
        public Builder tokenId(String tokenId) {
            return tokenId(Output.of(tokenId));
        }

        /**
         * @param tokenTtl TTL in seconds for generated admin token. Default: `0`  (int)
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(@Nullable Output<Integer> tokenTtl) {
            $.tokenTtl = tokenTtl;
            return this;
        }

        /**
         * @param tokenTtl TTL in seconds for generated admin token. Default: `0`  (int)
         * 
         * @return builder
         * 
         */
        public Builder tokenTtl(Integer tokenTtl) {
            return tokenTtl(Output.of(tokenTtl));
        }

        /**
         * @param tokenUpdate Regenerate admin token. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder tokenUpdate(@Nullable Output<Boolean> tokenUpdate) {
            $.tokenUpdate = tokenUpdate;
            return this;
        }

        /**
         * @param tokenUpdate Regenerate admin token. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder tokenUpdate(Boolean tokenUpdate) {
            return tokenUpdate(Output.of(tokenUpdate));
        }

        /**
         * @param uiDefaultLanding Default UI landing for k8s clusters. Available options: `ember` (cluster manager ui)  and `vue` (cluster explorer ui). Default: `ember` (string)
         * 
         * @return builder
         * 
         */
        public Builder uiDefaultLanding(@Nullable Output<String> uiDefaultLanding) {
            $.uiDefaultLanding = uiDefaultLanding;
            return this;
        }

        /**
         * @param uiDefaultLanding Default UI landing for k8s clusters. Available options: `ember` (cluster manager ui)  and `vue` (cluster explorer ui). Default: `ember` (string)
         * 
         * @return builder
         * 
         */
        public Builder uiDefaultLanding(String uiDefaultLanding) {
            return uiDefaultLanding(Output.of(uiDefaultLanding));
        }

        /**
         * @param url (Computed) URL set as server-url (string)
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url (Computed) URL set as server-url (string)
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param user (Computed) Admin username (string)
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user (Computed) Admin username (string)
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public BootstrapState build() {
            return $;
        }
    }

}
