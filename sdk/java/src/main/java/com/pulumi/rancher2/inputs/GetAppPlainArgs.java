// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAppPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAppPlainArgs Empty = new GetAppPlainArgs();

    /**
     * (Computed) Annotations for the catalog (map)
     * 
     */
    @Import(name="annotations")
    private @Nullable Map<String,String> annotations;

    /**
     * @return (Computed) Annotations for the catalog (map)
     * 
     */
    public Optional<Map<String,String>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The app name (string)
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The app name (string)
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The id of the project where the app is deployed (string)
     * 
     */
    @Import(name="projectId", required=true)
    private String projectId;

    /**
     * @return The id of the project where the app is deployed (string)
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    /**
     * The namespace name where the app is deployed (string)
     * 
     */
    @Import(name="targetNamespace")
    private @Nullable String targetNamespace;

    /**
     * @return The namespace name where the app is deployed (string)
     * 
     */
    public Optional<String> targetNamespace() {
        return Optional.ofNullable(this.targetNamespace);
    }

    private GetAppPlainArgs() {}

    private GetAppPlainArgs(GetAppPlainArgs $) {
        this.annotations = $.annotations;
        this.name = $.name;
        this.projectId = $.projectId;
        this.targetNamespace = $.targetNamespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAppPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAppPlainArgs $;

        public Builder() {
            $ = new GetAppPlainArgs();
        }

        public Builder(GetAppPlainArgs defaults) {
            $ = new GetAppPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations (Computed) Annotations for the catalog (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Map<String,String> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param name The app name (string)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param projectId The id of the project where the app is deployed (string)
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param targetNamespace The namespace name where the app is deployed (string)
         * 
         * @return builder
         * 
         */
        public Builder targetNamespace(@Nullable String targetNamespace) {
            $.targetNamespace = targetNamespace;
            return this;
        }

        public GetAppPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetAppPlainArgs", "name");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetAppPlainArgs", "projectId");
            }
            return $;
        }
    }

}
