// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterRke2ConfigUpgradeStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterRke2ConfigUpgradeStrategyArgs Empty = new ClusterRke2ConfigUpgradeStrategyArgs();

    /**
     * Drain server nodes. Default: `false` (bool)
     * 
     */
    @Import(name="drainServerNodes")
    private @Nullable Output<Boolean> drainServerNodes;

    /**
     * @return Drain server nodes. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> drainServerNodes() {
        return Optional.ofNullable(this.drainServerNodes);
    }

    /**
     * Drain worker nodes. Default: `false` (bool)
     * 
     */
    @Import(name="drainWorkerNodes")
    private @Nullable Output<Boolean> drainWorkerNodes;

    /**
     * @return Drain worker nodes. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> drainWorkerNodes() {
        return Optional.ofNullable(this.drainWorkerNodes);
    }

    /**
     * Server concurrency. Default: `1` (int)
     * 
     */
    @Import(name="serverConcurrency")
    private @Nullable Output<Integer> serverConcurrency;

    /**
     * @return Server concurrency. Default: `1` (int)
     * 
     */
    public Optional<Output<Integer>> serverConcurrency() {
        return Optional.ofNullable(this.serverConcurrency);
    }

    /**
     * Worker concurrency. Default: `1` (int)
     * 
     */
    @Import(name="workerConcurrency")
    private @Nullable Output<Integer> workerConcurrency;

    /**
     * @return Worker concurrency. Default: `1` (int)
     * 
     */
    public Optional<Output<Integer>> workerConcurrency() {
        return Optional.ofNullable(this.workerConcurrency);
    }

    private ClusterRke2ConfigUpgradeStrategyArgs() {}

    private ClusterRke2ConfigUpgradeStrategyArgs(ClusterRke2ConfigUpgradeStrategyArgs $) {
        this.drainServerNodes = $.drainServerNodes;
        this.drainWorkerNodes = $.drainWorkerNodes;
        this.serverConcurrency = $.serverConcurrency;
        this.workerConcurrency = $.workerConcurrency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterRke2ConfigUpgradeStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterRke2ConfigUpgradeStrategyArgs $;

        public Builder() {
            $ = new ClusterRke2ConfigUpgradeStrategyArgs();
        }

        public Builder(ClusterRke2ConfigUpgradeStrategyArgs defaults) {
            $ = new ClusterRke2ConfigUpgradeStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param drainServerNodes Drain server nodes. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder drainServerNodes(@Nullable Output<Boolean> drainServerNodes) {
            $.drainServerNodes = drainServerNodes;
            return this;
        }

        /**
         * @param drainServerNodes Drain server nodes. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder drainServerNodes(Boolean drainServerNodes) {
            return drainServerNodes(Output.of(drainServerNodes));
        }

        /**
         * @param drainWorkerNodes Drain worker nodes. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder drainWorkerNodes(@Nullable Output<Boolean> drainWorkerNodes) {
            $.drainWorkerNodes = drainWorkerNodes;
            return this;
        }

        /**
         * @param drainWorkerNodes Drain worker nodes. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder drainWorkerNodes(Boolean drainWorkerNodes) {
            return drainWorkerNodes(Output.of(drainWorkerNodes));
        }

        /**
         * @param serverConcurrency Server concurrency. Default: `1` (int)
         * 
         * @return builder
         * 
         */
        public Builder serverConcurrency(@Nullable Output<Integer> serverConcurrency) {
            $.serverConcurrency = serverConcurrency;
            return this;
        }

        /**
         * @param serverConcurrency Server concurrency. Default: `1` (int)
         * 
         * @return builder
         * 
         */
        public Builder serverConcurrency(Integer serverConcurrency) {
            return serverConcurrency(Output.of(serverConcurrency));
        }

        /**
         * @param workerConcurrency Worker concurrency. Default: `1` (int)
         * 
         * @return builder
         * 
         */
        public Builder workerConcurrency(@Nullable Output<Integer> workerConcurrency) {
            $.workerConcurrency = workerConcurrency;
            return this;
        }

        /**
         * @param workerConcurrency Worker concurrency. Default: `1` (int)
         * 
         * @return builder
         * 
         */
        public Builder workerConcurrency(Integer workerConcurrency) {
            return workerConcurrency(Output.of(workerConcurrency));
        }

        public ClusterRke2ConfigUpgradeStrategyArgs build() {
            return $;
        }
    }

}
