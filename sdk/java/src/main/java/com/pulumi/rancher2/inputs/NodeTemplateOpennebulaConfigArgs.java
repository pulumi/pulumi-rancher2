// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeTemplateOpennebulaConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeTemplateOpennebulaConfigArgs Empty = new NodeTemplateOpennebulaConfigArgs();

    /**
     * Size of the Volatile disk in MB - only for b2d (string)
     * 
     */
    @Import(name="b2dSize")
    private @Nullable Output<String> b2dSize;

    /**
     * @return Size of the Volatile disk in MB - only for b2d (string)
     * 
     */
    public Optional<Output<String>> b2dSize() {
        return Optional.ofNullable(this.b2dSize);
    }

    /**
     * CPU value for the VM (string)
     * 
     */
    @Import(name="cpu")
    private @Nullable Output<String> cpu;

    /**
     * @return CPU value for the VM (string)
     * 
     */
    public Optional<Output<String>> cpu() {
        return Optional.ofNullable(this.cpu);
    }

    /**
     * Dev prefix to use for the images. E.g.: &#39;vd&#39;, &#39;sd&#39;, &#39;hd&#39; (string)
     * 
     */
    @Import(name="devPrefix")
    private @Nullable Output<String> devPrefix;

    /**
     * @return Dev prefix to use for the images. E.g.: &#39;vd&#39;, &#39;sd&#39;, &#39;hd&#39; (string)
     * 
     */
    public Optional<Output<String>> devPrefix() {
        return Optional.ofNullable(this.devPrefix);
    }

    /**
     * VNC is enabled by default. Disable it with this flag (bool)
     * 
     */
    @Import(name="disableVnc")
    private @Nullable Output<Boolean> disableVnc;

    /**
     * @return VNC is enabled by default. Disable it with this flag (bool)
     * 
     */
    public Optional<Output<Boolean>> disableVnc() {
        return Optional.ofNullable(this.disableVnc);
    }

    /**
     * Size of the disk for the VM in MB (string)
     * 
     */
    @Import(name="diskResize")
    private @Nullable Output<String> diskResize;

    /**
     * @return Size of the disk for the VM in MB (string)
     * 
     */
    public Optional<Output<String>> diskResize() {
        return Optional.ofNullable(this.diskResize);
    }

    /**
     * OpenStack image id to use for the instance. Conflicts with `image_name` (string)
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return OpenStack image id to use for the instance. Conflicts with `image_name` (string)
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * OpenStack image name to use for the instance. Conflicts with `image_id` (string)
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return OpenStack image name to use for the instance. Conflicts with `image_id` (string)
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * Owner of the image to use as the VM OS (string)
     * 
     */
    @Import(name="imageOwner")
    private @Nullable Output<String> imageOwner;

    /**
     * @return Owner of the image to use as the VM OS (string)
     * 
     */
    public Optional<Output<String>> imageOwner() {
        return Optional.ofNullable(this.imageOwner);
    }

    /**
     * Size of the memory for the VM in MB (string)
     * 
     */
    @Import(name="memory")
    private @Nullable Output<String> memory;

    /**
     * @return Size of the memory for the VM in MB (string)
     * 
     */
    public Optional<Output<String>> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * Opennebula network ID to connect the machine to. Conflicts with `network_name` (string)
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<String> networkId;

    /**
     * @return Opennebula network ID to connect the machine to. Conflicts with `network_name` (string)
     * 
     */
    public Optional<Output<String>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Opennebula network to connect the machine to. Conflicts with `network_id` (string)
     * 
     */
    @Import(name="networkName")
    private @Nullable Output<String> networkName;

    /**
     * @return Opennebula network to connect the machine to. Conflicts with `network_id` (string)
     * 
     */
    public Optional<Output<String>> networkName() {
        return Optional.ofNullable(this.networkName);
    }

    /**
     * Opennebula user ID of the Network to connect the machine to (string)
     * 
     */
    @Import(name="networkOwner")
    private @Nullable Output<String> networkOwner;

    /**
     * @return Opennebula user ID of the Network to connect the machine to (string)
     * 
     */
    public Optional<Output<String>> networkOwner() {
        return Optional.ofNullable(this.networkOwner);
    }

    /**
     * vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
     * 
     */
    @Import(name="sshUser")
    private @Nullable Output<String> sshUser;

    /**
     * @return If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
     * 
     */
    public Optional<Output<String>> sshUser() {
        return Optional.ofNullable(this.sshUser);
    }

    /**
     * Opennebula template ID to use. Conflicts with `template_name` (string)
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return Opennebula template ID to use. Conflicts with `template_name` (string)
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    /**
     * Name of the Opennbula template to use. Conflicts with `template_id` (string)
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return Name of the Opennbula template to use. Conflicts with `template_id` (string)
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    /**
     * Set the user for the XML-RPC API authentication (string)
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return Set the user for the XML-RPC API authentication (string)
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    /**
     * VCPUs for the VM (string)
     * 
     * &gt; **Note:**: `Required*` denotes that one of image_name / image_id or template_name / template_id is required but you cannot combine them.
     * 
     */
    @Import(name="vcpu")
    private @Nullable Output<String> vcpu;

    /**
     * @return VCPUs for the VM (string)
     * 
     * &gt; **Note:**: `Required*` denotes that one of image_name / image_id or template_name / template_id is required but you cannot combine them.
     * 
     */
    public Optional<Output<String>> vcpu() {
        return Optional.ofNullable(this.vcpu);
    }

    /**
     * Set the url for the Opennebula XML-RPC API (string)
     * 
     */
    @Import(name="xmlRpcUrl", required=true)
    private Output<String> xmlRpcUrl;

    /**
     * @return Set the url for the Opennebula XML-RPC API (string)
     * 
     */
    public Output<String> xmlRpcUrl() {
        return this.xmlRpcUrl;
    }

    private NodeTemplateOpennebulaConfigArgs() {}

    private NodeTemplateOpennebulaConfigArgs(NodeTemplateOpennebulaConfigArgs $) {
        this.b2dSize = $.b2dSize;
        this.cpu = $.cpu;
        this.devPrefix = $.devPrefix;
        this.disableVnc = $.disableVnc;
        this.diskResize = $.diskResize;
        this.imageId = $.imageId;
        this.imageName = $.imageName;
        this.imageOwner = $.imageOwner;
        this.memory = $.memory;
        this.networkId = $.networkId;
        this.networkName = $.networkName;
        this.networkOwner = $.networkOwner;
        this.password = $.password;
        this.sshUser = $.sshUser;
        this.templateId = $.templateId;
        this.templateName = $.templateName;
        this.user = $.user;
        this.vcpu = $.vcpu;
        this.xmlRpcUrl = $.xmlRpcUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeTemplateOpennebulaConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeTemplateOpennebulaConfigArgs $;

        public Builder() {
            $ = new NodeTemplateOpennebulaConfigArgs();
        }

        public Builder(NodeTemplateOpennebulaConfigArgs defaults) {
            $ = new NodeTemplateOpennebulaConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param b2dSize Size of the Volatile disk in MB - only for b2d (string)
         * 
         * @return builder
         * 
         */
        public Builder b2dSize(@Nullable Output<String> b2dSize) {
            $.b2dSize = b2dSize;
            return this;
        }

        /**
         * @param b2dSize Size of the Volatile disk in MB - only for b2d (string)
         * 
         * @return builder
         * 
         */
        public Builder b2dSize(String b2dSize) {
            return b2dSize(Output.of(b2dSize));
        }

        /**
         * @param cpu CPU value for the VM (string)
         * 
         * @return builder
         * 
         */
        public Builder cpu(@Nullable Output<String> cpu) {
            $.cpu = cpu;
            return this;
        }

        /**
         * @param cpu CPU value for the VM (string)
         * 
         * @return builder
         * 
         */
        public Builder cpu(String cpu) {
            return cpu(Output.of(cpu));
        }

        /**
         * @param devPrefix Dev prefix to use for the images. E.g.: &#39;vd&#39;, &#39;sd&#39;, &#39;hd&#39; (string)
         * 
         * @return builder
         * 
         */
        public Builder devPrefix(@Nullable Output<String> devPrefix) {
            $.devPrefix = devPrefix;
            return this;
        }

        /**
         * @param devPrefix Dev prefix to use for the images. E.g.: &#39;vd&#39;, &#39;sd&#39;, &#39;hd&#39; (string)
         * 
         * @return builder
         * 
         */
        public Builder devPrefix(String devPrefix) {
            return devPrefix(Output.of(devPrefix));
        }

        /**
         * @param disableVnc VNC is enabled by default. Disable it with this flag (bool)
         * 
         * @return builder
         * 
         */
        public Builder disableVnc(@Nullable Output<Boolean> disableVnc) {
            $.disableVnc = disableVnc;
            return this;
        }

        /**
         * @param disableVnc VNC is enabled by default. Disable it with this flag (bool)
         * 
         * @return builder
         * 
         */
        public Builder disableVnc(Boolean disableVnc) {
            return disableVnc(Output.of(disableVnc));
        }

        /**
         * @param diskResize Size of the disk for the VM in MB (string)
         * 
         * @return builder
         * 
         */
        public Builder diskResize(@Nullable Output<String> diskResize) {
            $.diskResize = diskResize;
            return this;
        }

        /**
         * @param diskResize Size of the disk for the VM in MB (string)
         * 
         * @return builder
         * 
         */
        public Builder diskResize(String diskResize) {
            return diskResize(Output.of(diskResize));
        }

        /**
         * @param imageId OpenStack image id to use for the instance. Conflicts with `image_name` (string)
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId OpenStack image id to use for the instance. Conflicts with `image_name` (string)
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param imageName OpenStack image name to use for the instance. Conflicts with `image_id` (string)
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName OpenStack image name to use for the instance. Conflicts with `image_id` (string)
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param imageOwner Owner of the image to use as the VM OS (string)
         * 
         * @return builder
         * 
         */
        public Builder imageOwner(@Nullable Output<String> imageOwner) {
            $.imageOwner = imageOwner;
            return this;
        }

        /**
         * @param imageOwner Owner of the image to use as the VM OS (string)
         * 
         * @return builder
         * 
         */
        public Builder imageOwner(String imageOwner) {
            return imageOwner(Output.of(imageOwner));
        }

        /**
         * @param memory Size of the memory for the VM in MB (string)
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Output<String> memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param memory Size of the memory for the VM in MB (string)
         * 
         * @return builder
         * 
         */
        public Builder memory(String memory) {
            return memory(Output.of(memory));
        }

        /**
         * @param networkId Opennebula network ID to connect the machine to. Conflicts with `network_name` (string)
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId Opennebula network ID to connect the machine to. Conflicts with `network_name` (string)
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param networkName Opennebula network to connect the machine to. Conflicts with `network_id` (string)
         * 
         * @return builder
         * 
         */
        public Builder networkName(@Nullable Output<String> networkName) {
            $.networkName = networkName;
            return this;
        }

        /**
         * @param networkName Opennebula network to connect the machine to. Conflicts with `network_id` (string)
         * 
         * @return builder
         * 
         */
        public Builder networkName(String networkName) {
            return networkName(Output.of(networkName));
        }

        /**
         * @param networkOwner Opennebula user ID of the Network to connect the machine to (string)
         * 
         * @return builder
         * 
         */
        public Builder networkOwner(@Nullable Output<String> networkOwner) {
            $.networkOwner = networkOwner;
            return this;
        }

        /**
         * @param networkOwner Opennebula user ID of the Network to connect the machine to (string)
         * 
         * @return builder
         * 
         */
        public Builder networkOwner(String networkOwner) {
            return networkOwner(Output.of(networkOwner));
        }

        /**
         * @param password vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param sshUser If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUser(@Nullable Output<String> sshUser) {
            $.sshUser = sshUser;
            return this;
        }

        /**
         * @param sshUser If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUser(String sshUser) {
            return sshUser(Output.of(sshUser));
        }

        /**
         * @param templateId Opennebula template ID to use. Conflicts with `template_name` (string)
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId Opennebula template ID to use. Conflicts with `template_name` (string)
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        /**
         * @param templateName Name of the Opennbula template to use. Conflicts with `template_id` (string)
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName Name of the Opennbula template to use. Conflicts with `template_id` (string)
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param user Set the user for the XML-RPC API authentication (string)
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Set the user for the XML-RPC API authentication (string)
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        /**
         * @param vcpu VCPUs for the VM (string)
         * 
         * &gt; **Note:**: `Required*` denotes that one of image_name / image_id or template_name / template_id is required but you cannot combine them.
         * 
         * @return builder
         * 
         */
        public Builder vcpu(@Nullable Output<String> vcpu) {
            $.vcpu = vcpu;
            return this;
        }

        /**
         * @param vcpu VCPUs for the VM (string)
         * 
         * &gt; **Note:**: `Required*` denotes that one of image_name / image_id or template_name / template_id is required but you cannot combine them.
         * 
         * @return builder
         * 
         */
        public Builder vcpu(String vcpu) {
            return vcpu(Output.of(vcpu));
        }

        /**
         * @param xmlRpcUrl Set the url for the Opennebula XML-RPC API (string)
         * 
         * @return builder
         * 
         */
        public Builder xmlRpcUrl(Output<String> xmlRpcUrl) {
            $.xmlRpcUrl = xmlRpcUrl;
            return this;
        }

        /**
         * @param xmlRpcUrl Set the url for the Opennebula XML-RPC API (string)
         * 
         * @return builder
         * 
         */
        public Builder xmlRpcUrl(String xmlRpcUrl) {
            return xmlRpcUrl(Output.of(xmlRpcUrl));
        }

        public NodeTemplateOpennebulaConfigArgs build() {
            if ($.password == null) {
                throw new MissingRequiredPropertyException("NodeTemplateOpennebulaConfigArgs", "password");
            }
            if ($.user == null) {
                throw new MissingRequiredPropertyException("NodeTemplateOpennebulaConfigArgs", "user");
            }
            if ($.xmlRpcUrl == null) {
                throw new MissingRequiredPropertyException("NodeTemplateOpennebulaConfigArgs", "xmlRpcUrl");
            }
            return $;
        }
    }

}
