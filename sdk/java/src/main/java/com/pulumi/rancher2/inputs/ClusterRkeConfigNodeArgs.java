// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterRkeConfigNodeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterRkeConfigNodeArgs Empty = new ClusterRkeConfigNodeArgs();

    @Import(name="address", required=true)
    private Output<String> address;

    public Output<String> address() {
        return this.address;
    }

    @Import(name="dockerSocket")
    private @Nullable Output<String> dockerSocket;

    public Optional<Output<String>> dockerSocket() {
        return Optional.ofNullable(this.dockerSocket);
    }

    @Import(name="hostnameOverride")
    private @Nullable Output<String> hostnameOverride;

    public Optional<Output<String>> hostnameOverride() {
        return Optional.ofNullable(this.hostnameOverride);
    }

    @Import(name="internalAddress")
    private @Nullable Output<String> internalAddress;

    public Optional<Output<String>> internalAddress() {
        return Optional.ofNullable(this.internalAddress);
    }

    /**
     * Labels for the Cluster (map)
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,Object>> labels;

    /**
     * @return Labels for the Cluster (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    @Import(name="nodeId")
    private @Nullable Output<String> nodeId;

    public Optional<Output<String>> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }

    @Import(name="port")
    private @Nullable Output<String> port;

    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="roles", required=true)
    private Output<List<String>> roles;

    public Output<List<String>> roles() {
        return this.roles;
    }

    @Import(name="sshAgentAuth")
    private @Nullable Output<Boolean> sshAgentAuth;

    public Optional<Output<Boolean>> sshAgentAuth() {
        return Optional.ofNullable(this.sshAgentAuth);
    }

    @Import(name="sshKey")
    private @Nullable Output<String> sshKey;

    public Optional<Output<String>> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    @Import(name="sshKeyPath")
    private @Nullable Output<String> sshKeyPath;

    public Optional<Output<String>> sshKeyPath() {
        return Optional.ofNullable(this.sshKeyPath);
    }

    @Import(name="user", required=true)
    private Output<String> user;

    public Output<String> user() {
        return this.user;
    }

    private ClusterRkeConfigNodeArgs() {}

    private ClusterRkeConfigNodeArgs(ClusterRkeConfigNodeArgs $) {
        this.address = $.address;
        this.dockerSocket = $.dockerSocket;
        this.hostnameOverride = $.hostnameOverride;
        this.internalAddress = $.internalAddress;
        this.labels = $.labels;
        this.nodeId = $.nodeId;
        this.port = $.port;
        this.roles = $.roles;
        this.sshAgentAuth = $.sshAgentAuth;
        this.sshKey = $.sshKey;
        this.sshKeyPath = $.sshKeyPath;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterRkeConfigNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterRkeConfigNodeArgs $;

        public Builder() {
            $ = new ClusterRkeConfigNodeArgs();
        }

        public Builder(ClusterRkeConfigNodeArgs defaults) {
            $ = new ClusterRkeConfigNodeArgs(Objects.requireNonNull(defaults));
        }

        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        public Builder address(String address) {
            return address(Output.of(address));
        }

        public Builder dockerSocket(@Nullable Output<String> dockerSocket) {
            $.dockerSocket = dockerSocket;
            return this;
        }

        public Builder dockerSocket(String dockerSocket) {
            return dockerSocket(Output.of(dockerSocket));
        }

        public Builder hostnameOverride(@Nullable Output<String> hostnameOverride) {
            $.hostnameOverride = hostnameOverride;
            return this;
        }

        public Builder hostnameOverride(String hostnameOverride) {
            return hostnameOverride(Output.of(hostnameOverride));
        }

        public Builder internalAddress(@Nullable Output<String> internalAddress) {
            $.internalAddress = internalAddress;
            return this;
        }

        public Builder internalAddress(String internalAddress) {
            return internalAddress(Output.of(internalAddress));
        }

        /**
         * @param labels Labels for the Cluster (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,Object>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for the Cluster (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,Object> labels) {
            return labels(Output.of(labels));
        }

        public Builder nodeId(@Nullable Output<String> nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        public Builder nodeId(String nodeId) {
            return nodeId(Output.of(nodeId));
        }

        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        public Builder port(String port) {
            return port(Output.of(port));
        }

        public Builder roles(Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        public Builder sshAgentAuth(@Nullable Output<Boolean> sshAgentAuth) {
            $.sshAgentAuth = sshAgentAuth;
            return this;
        }

        public Builder sshAgentAuth(Boolean sshAgentAuth) {
            return sshAgentAuth(Output.of(sshAgentAuth));
        }

        public Builder sshKey(@Nullable Output<String> sshKey) {
            $.sshKey = sshKey;
            return this;
        }

        public Builder sshKey(String sshKey) {
            return sshKey(Output.of(sshKey));
        }

        public Builder sshKeyPath(@Nullable Output<String> sshKeyPath) {
            $.sshKeyPath = sshKeyPath;
            return this;
        }

        public Builder sshKeyPath(String sshKeyPath) {
            return sshKeyPath(Output.of(sshKeyPath));
        }

        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ClusterRkeConfigNodeArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("ClusterRkeConfigNodeArgs", "address");
            }
            if ($.roles == null) {
                throw new MissingRequiredPropertyException("ClusterRkeConfigNodeArgs", "roles");
            }
            if ($.user == null) {
                throw new MissingRequiredPropertyException("ClusterRkeConfigNodeArgs", "user");
            }
            return $;
        }
    }

}
