// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterTemplateTemplateRevisionClusterConfig {
    /**
     * @return Local cluster auth endpoint
     * 
     */
    private GetClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint clusterAuthEndpoint;
    /**
     * @return Default cluster role for project members
     * 
     */
    private String defaultClusterRoleForProjectMembers;
    /**
     * @return Default pod security admission configuration template name
     * 
     */
    private String defaultPodSecurityAdmissionConfigurationTemplateName;
    /**
     * @return Default pod security policy template ID
     * 
     */
    private String defaultPodSecurityPolicyTemplateId;
    /**
     * @return Desired agent image
     * 
     */
    private String desiredAgentImage;
    /**
     * @return Desired auth image
     * 
     */
    private String desiredAuthImage;
    /**
     * @return Docker Root Dir
     * 
     */
    private String dockerRootDir;
    /**
     * @return Enable built-in cluster alerting
     * 
     */
    private @Nullable Boolean enableClusterAlerting;
    /**
     * @return Enable built-in cluster monitoring
     * 
     */
    private @Nullable Boolean enableClusterMonitoring;
    /**
     * @return Enable project network isolation
     * 
     */
    private @Nullable Boolean enableNetworkPolicy;
    /**
     * @return Rancher Kubernetes Engine Config
     * 
     */
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfig rkeConfig;
    /**
     * @return Windows prefered cluster
     * 
     */
    private @Nullable Boolean windowsPreferedCluster;

    private GetClusterTemplateTemplateRevisionClusterConfig() {}
    /**
     * @return Local cluster auth endpoint
     * 
     */
    public GetClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint clusterAuthEndpoint() {
        return this.clusterAuthEndpoint;
    }
    /**
     * @return Default cluster role for project members
     * 
     */
    public String defaultClusterRoleForProjectMembers() {
        return this.defaultClusterRoleForProjectMembers;
    }
    /**
     * @return Default pod security admission configuration template name
     * 
     */
    public String defaultPodSecurityAdmissionConfigurationTemplateName() {
        return this.defaultPodSecurityAdmissionConfigurationTemplateName;
    }
    /**
     * @return Default pod security policy template ID
     * 
     */
    public String defaultPodSecurityPolicyTemplateId() {
        return this.defaultPodSecurityPolicyTemplateId;
    }
    /**
     * @return Desired agent image
     * 
     */
    public String desiredAgentImage() {
        return this.desiredAgentImage;
    }
    /**
     * @return Desired auth image
     * 
     */
    public String desiredAuthImage() {
        return this.desiredAuthImage;
    }
    /**
     * @return Docker Root Dir
     * 
     */
    public String dockerRootDir() {
        return this.dockerRootDir;
    }
    /**
     * @return Enable built-in cluster alerting
     * 
     */
    public Optional<Boolean> enableClusterAlerting() {
        return Optional.ofNullable(this.enableClusterAlerting);
    }
    /**
     * @return Enable built-in cluster monitoring
     * 
     */
    public Optional<Boolean> enableClusterMonitoring() {
        return Optional.ofNullable(this.enableClusterMonitoring);
    }
    /**
     * @return Enable project network isolation
     * 
     */
    public Optional<Boolean> enableNetworkPolicy() {
        return Optional.ofNullable(this.enableNetworkPolicy);
    }
    /**
     * @return Rancher Kubernetes Engine Config
     * 
     */
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfig rkeConfig() {
        return this.rkeConfig;
    }
    /**
     * @return Windows prefered cluster
     * 
     */
    public Optional<Boolean> windowsPreferedCluster() {
        return Optional.ofNullable(this.windowsPreferedCluster);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterTemplateTemplateRevisionClusterConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint clusterAuthEndpoint;
        private String defaultClusterRoleForProjectMembers;
        private String defaultPodSecurityAdmissionConfigurationTemplateName;
        private String defaultPodSecurityPolicyTemplateId;
        private String desiredAgentImage;
        private String desiredAuthImage;
        private String dockerRootDir;
        private @Nullable Boolean enableClusterAlerting;
        private @Nullable Boolean enableClusterMonitoring;
        private @Nullable Boolean enableNetworkPolicy;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfig rkeConfig;
        private @Nullable Boolean windowsPreferedCluster;
        public Builder() {}
        public Builder(GetClusterTemplateTemplateRevisionClusterConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterAuthEndpoint = defaults.clusterAuthEndpoint;
    	      this.defaultClusterRoleForProjectMembers = defaults.defaultClusterRoleForProjectMembers;
    	      this.defaultPodSecurityAdmissionConfigurationTemplateName = defaults.defaultPodSecurityAdmissionConfigurationTemplateName;
    	      this.defaultPodSecurityPolicyTemplateId = defaults.defaultPodSecurityPolicyTemplateId;
    	      this.desiredAgentImage = defaults.desiredAgentImage;
    	      this.desiredAuthImage = defaults.desiredAuthImage;
    	      this.dockerRootDir = defaults.dockerRootDir;
    	      this.enableClusterAlerting = defaults.enableClusterAlerting;
    	      this.enableClusterMonitoring = defaults.enableClusterMonitoring;
    	      this.enableNetworkPolicy = defaults.enableNetworkPolicy;
    	      this.rkeConfig = defaults.rkeConfig;
    	      this.windowsPreferedCluster = defaults.windowsPreferedCluster;
        }

        @CustomType.Setter
        public Builder clusterAuthEndpoint(GetClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpoint clusterAuthEndpoint) {
            if (clusterAuthEndpoint == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfig", "clusterAuthEndpoint");
            }
            this.clusterAuthEndpoint = clusterAuthEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder defaultClusterRoleForProjectMembers(String defaultClusterRoleForProjectMembers) {
            if (defaultClusterRoleForProjectMembers == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfig", "defaultClusterRoleForProjectMembers");
            }
            this.defaultClusterRoleForProjectMembers = defaultClusterRoleForProjectMembers;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPodSecurityAdmissionConfigurationTemplateName(String defaultPodSecurityAdmissionConfigurationTemplateName) {
            if (defaultPodSecurityAdmissionConfigurationTemplateName == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfig", "defaultPodSecurityAdmissionConfigurationTemplateName");
            }
            this.defaultPodSecurityAdmissionConfigurationTemplateName = defaultPodSecurityAdmissionConfigurationTemplateName;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPodSecurityPolicyTemplateId(String defaultPodSecurityPolicyTemplateId) {
            if (defaultPodSecurityPolicyTemplateId == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfig", "defaultPodSecurityPolicyTemplateId");
            }
            this.defaultPodSecurityPolicyTemplateId = defaultPodSecurityPolicyTemplateId;
            return this;
        }
        @CustomType.Setter
        public Builder desiredAgentImage(String desiredAgentImage) {
            if (desiredAgentImage == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfig", "desiredAgentImage");
            }
            this.desiredAgentImage = desiredAgentImage;
            return this;
        }
        @CustomType.Setter
        public Builder desiredAuthImage(String desiredAuthImage) {
            if (desiredAuthImage == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfig", "desiredAuthImage");
            }
            this.desiredAuthImage = desiredAuthImage;
            return this;
        }
        @CustomType.Setter
        public Builder dockerRootDir(String dockerRootDir) {
            if (dockerRootDir == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfig", "dockerRootDir");
            }
            this.dockerRootDir = dockerRootDir;
            return this;
        }
        @CustomType.Setter
        public Builder enableClusterAlerting(@Nullable Boolean enableClusterAlerting) {

            this.enableClusterAlerting = enableClusterAlerting;
            return this;
        }
        @CustomType.Setter
        public Builder enableClusterMonitoring(@Nullable Boolean enableClusterMonitoring) {

            this.enableClusterMonitoring = enableClusterMonitoring;
            return this;
        }
        @CustomType.Setter
        public Builder enableNetworkPolicy(@Nullable Boolean enableNetworkPolicy) {

            this.enableNetworkPolicy = enableNetworkPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder rkeConfig(GetClusterTemplateTemplateRevisionClusterConfigRkeConfig rkeConfig) {
            if (rkeConfig == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfig", "rkeConfig");
            }
            this.rkeConfig = rkeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder windowsPreferedCluster(@Nullable Boolean windowsPreferedCluster) {

            this.windowsPreferedCluster = windowsPreferedCluster;
            return this;
        }
        public GetClusterTemplateTemplateRevisionClusterConfig build() {
            final var _resultValue = new GetClusterTemplateTemplateRevisionClusterConfig();
            _resultValue.clusterAuthEndpoint = clusterAuthEndpoint;
            _resultValue.defaultClusterRoleForProjectMembers = defaultClusterRoleForProjectMembers;
            _resultValue.defaultPodSecurityAdmissionConfigurationTemplateName = defaultPodSecurityAdmissionConfigurationTemplateName;
            _resultValue.defaultPodSecurityPolicyTemplateId = defaultPodSecurityPolicyTemplateId;
            _resultValue.desiredAgentImage = desiredAgentImage;
            _resultValue.desiredAuthImage = desiredAuthImage;
            _resultValue.dockerRootDir = dockerRootDir;
            _resultValue.enableClusterAlerting = enableClusterAlerting;
            _resultValue.enableClusterMonitoring = enableClusterMonitoring;
            _resultValue.enableNetworkPolicy = enableNetworkPolicy;
            _resultValue.rkeConfig = rkeConfig;
            _resultValue.windowsPreferedCluster = windowsPreferedCluster;
            return _resultValue;
        }
    }
}
