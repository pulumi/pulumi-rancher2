// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.ClusterArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.ClusterState;
import com.pulumi.rancher2.outputs.ClusterAgentEnvVar;
import com.pulumi.rancher2.outputs.ClusterAksConfig;
import com.pulumi.rancher2.outputs.ClusterAksConfigV2;
import com.pulumi.rancher2.outputs.ClusterClusterAgentDeploymentCustomization;
import com.pulumi.rancher2.outputs.ClusterClusterAuthEndpoint;
import com.pulumi.rancher2.outputs.ClusterClusterMonitoringInput;
import com.pulumi.rancher2.outputs.ClusterClusterRegistrationToken;
import com.pulumi.rancher2.outputs.ClusterClusterTemplateAnswers;
import com.pulumi.rancher2.outputs.ClusterClusterTemplateQuestion;
import com.pulumi.rancher2.outputs.ClusterEksConfig;
import com.pulumi.rancher2.outputs.ClusterEksConfigV2;
import com.pulumi.rancher2.outputs.ClusterFleetAgentDeploymentCustomization;
import com.pulumi.rancher2.outputs.ClusterGkeConfig;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2;
import com.pulumi.rancher2.outputs.ClusterK3sConfig;
import com.pulumi.rancher2.outputs.ClusterOkeConfig;
import com.pulumi.rancher2.outputs.ClusterRke2Config;
import com.pulumi.rancher2.outputs.ClusterRkeConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
 * 
 * ## Example Usage
 * 
 * **Note optional/computed arguments** If any `optional/computed` argument of this resource is defined by the user, removing it from tf file will NOT reset its value. To reset it, let its definition at tf file as empty/false object. Ex: `enable_cluster_monitoring = false`, `cloud_provider {}`, `name = &#34;&#34;`
 * 
 * ### Creating Rancher v2 imported cluster
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 imported Cluster
 *         var foo_imported = new Cluster("foo-imported", ClusterArgs.builder()
 *             .name("foo-imported")
 *             .description("Foo rancher2 imported cluster")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * Creating Rancher v2 RKE cluster
 * 
 * ### Creating Rancher v2 RKE cluster enabling and customizing monitoring
 * 
 * **Note** Cluster monitoring version `0.2.0` and above, can&#39;t be enabled until cluster is fully deployed as [`kubeVersion`](https://github.com/rancher/system-charts/blob/52be656700468904b9bf15c3f39cd7112e1f8c9b/charts/rancher-monitoring/v0.2.0/Chart.yaml#L12) requirement has been introduced to helm chart
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;
 * import com.pulumi.rancher2.inputs.ClusterClusterMonitoringInputArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 RKE Cluster
 *         var foo_custom = new Cluster("foo-custom", ClusterArgs.builder()
 *             .name("foo-custom")
 *             .description("Foo rancher2 custom cluster")
 *             .rkeConfig(ClusterRkeConfigArgs.builder()
 *                 .network(ClusterRkeConfigNetworkArgs.builder()
 *                     .plugin("canal")
 *                     .build())
 *                 .build())
 *             .enableClusterMonitoring(true)
 *             .clusterMonitoringInput(ClusterClusterMonitoringInputArgs.builder()
 *                 .answers(Map.ofEntries(
 *                     Map.entry("exporter-kubelets.https", true),
 *                     Map.entry("exporter-node.enabled", true),
 *                     Map.entry("exporter-node.ports.metrics.port", 9796),
 *                     Map.entry("exporter-node.resources.limits.cpu", "200m"),
 *                     Map.entry("exporter-node.resources.limits.memory", "200Mi"),
 *                     Map.entry("grafana.persistence.enabled", false),
 *                     Map.entry("grafana.persistence.size", "10Gi"),
 *                     Map.entry("grafana.persistence.storageClass", "default"),
 *                     Map.entry("operator.resources.limits.memory", "500Mi"),
 *                     Map.entry("prometheus.persistence.enabled", "false"),
 *                     Map.entry("prometheus.persistence.size", "50Gi"),
 *                     Map.entry("prometheus.persistence.storageClass", "default"),
 *                     Map.entry("prometheus.persistent.useReleaseName", "true"),
 *                     Map.entry("prometheus.resources.core.limits.cpu", "1000m"),
 *                     Map.entry("prometheus.resources.core.limits.memory", "1500Mi"),
 *                     Map.entry("prometheus.resources.core.requests.cpu", "750m"),
 *                     Map.entry("prometheus.resources.core.requests.memory", "750Mi"),
 *                     Map.entry("prometheus.retention", "12h")
 *                 ))
 *                 .version("0.1.0")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Creating Rancher v2 RKE cluster enabling/customizing monitoring and istio
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;
 * import com.pulumi.rancher2.inputs.ClusterClusterMonitoringInputArgs;
 * import com.pulumi.rancher2.ClusterSync;
 * import com.pulumi.rancher2.ClusterSyncArgs;
 * import com.pulumi.rancher2.Namespace;
 * import com.pulumi.rancher2.NamespaceArgs;
 * import com.pulumi.rancher2.App;
 * import com.pulumi.rancher2.AppArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 RKE Cluster
 *         var foo_custom = new Cluster("foo-custom", ClusterArgs.builder()
 *             .name("foo-custom")
 *             .description("Foo rancher2 custom cluster")
 *             .rkeConfig(ClusterRkeConfigArgs.builder()
 *                 .network(ClusterRkeConfigNetworkArgs.builder()
 *                     .plugin("canal")
 *                     .build())
 *                 .build())
 *             .enableClusterMonitoring(true)
 *             .clusterMonitoringInput(ClusterClusterMonitoringInputArgs.builder()
 *                 .answers(Map.ofEntries(
 *                     Map.entry("exporter-kubelets.https", true),
 *                     Map.entry("exporter-node.enabled", true),
 *                     Map.entry("exporter-node.ports.metrics.port", 9796),
 *                     Map.entry("exporter-node.resources.limits.cpu", "200m"),
 *                     Map.entry("exporter-node.resources.limits.memory", "200Mi"),
 *                     Map.entry("grafana.persistence.enabled", false),
 *                     Map.entry("grafana.persistence.size", "10Gi"),
 *                     Map.entry("grafana.persistence.storageClass", "default"),
 *                     Map.entry("operator.resources.limits.memory", "500Mi"),
 *                     Map.entry("prometheus.persistence.enabled", "false"),
 *                     Map.entry("prometheus.persistence.size", "50Gi"),
 *                     Map.entry("prometheus.persistence.storageClass", "default"),
 *                     Map.entry("prometheus.persistent.useReleaseName", "true"),
 *                     Map.entry("prometheus.resources.core.limits.cpu", "1000m"),
 *                     Map.entry("prometheus.resources.core.limits.memory", "1500Mi"),
 *                     Map.entry("prometheus.resources.core.requests.cpu", "750m"),
 *                     Map.entry("prometheus.resources.core.requests.memory", "750Mi"),
 *                     Map.entry("prometheus.retention", "12h")
 *                 ))
 *                 .version("0.1.0")
 *                 .build())
 *             .build());
 * 
 *         // Create a new rancher2 Cluster Sync for foo-custom cluster
 *         var foo_customClusterSync = new ClusterSync("foo-customClusterSync", ClusterSyncArgs.builder()
 *             .clusterId(foo_custom.id())
 *             .waitMonitoring(foo_custom.enableClusterMonitoring())
 *             .build());
 * 
 *         // Create a new rancher2 Namespace
 *         var foo_istio = new Namespace("foo-istio", NamespaceArgs.builder()
 *             .name("istio-system")
 *             .projectId(foo_customClusterSync.systemProjectId())
 *             .description("istio namespace")
 *             .build());
 * 
 *         // Create a new rancher2 App deploying istio (should wait until monitoring is up and running)
 *         var istio = new App("istio", AppArgs.builder()
 *             .catalogName("system-library")
 *             .name("cluster-istio")
 *             .description("Terraform app acceptance test")
 *             .projectId(foo_istio.projectId())
 *             .templateName("rancher-istio")
 *             .templateVersion("0.1.1")
 *             .targetNamespace(foo_istio.id())
 *             .answers(Map.ofEntries(
 *                 Map.entry("certmanager.enabled", false),
 *                 Map.entry("enableCRDs", true),
 *                 Map.entry("galley.enabled", true),
 *                 Map.entry("gateways.enabled", false),
 *                 Map.entry("gateways.istio-ingressgateway.resources.limits.cpu", "2000m"),
 *                 Map.entry("gateways.istio-ingressgateway.resources.limits.memory", "1024Mi"),
 *                 Map.entry("gateways.istio-ingressgateway.resources.requests.cpu", "100m"),
 *                 Map.entry("gateways.istio-ingressgateway.resources.requests.memory", "128Mi"),
 *                 Map.entry("gateways.istio-ingressgateway.type", "NodePort"),
 *                 Map.entry("global.monitoring.type", "cluster-monitoring"),
 *                 Map.entry("global.rancher.clusterId", foo_customClusterSync.clusterId()),
 *                 Map.entry("istio_cni.enabled", "false"),
 *                 Map.entry("istiocoredns.enabled", "false"),
 *                 Map.entry("kiali.enabled", "true"),
 *                 Map.entry("mixer.enabled", "true"),
 *                 Map.entry("mixer.policy.enabled", "true"),
 *                 Map.entry("mixer.policy.resources.limits.cpu", "4800m"),
 *                 Map.entry("mixer.policy.resources.limits.memory", "4096Mi"),
 *                 Map.entry("mixer.policy.resources.requests.cpu", "1000m"),
 *                 Map.entry("mixer.policy.resources.requests.memory", "1024Mi"),
 *                 Map.entry("mixer.telemetry.resources.limits.cpu", "4800m"),
 *                 Map.entry("mixer.telemetry.resources.limits.memory", "4096Mi"),
 *                 Map.entry("mixer.telemetry.resources.requests.cpu", "1000m"),
 *                 Map.entry("mixer.telemetry.resources.requests.memory", "1024Mi"),
 *                 Map.entry("mtls.enabled", false),
 *                 Map.entry("nodeagent.enabled", false),
 *                 Map.entry("pilot.enabled", true),
 *                 Map.entry("pilot.resources.limits.cpu", "1000m"),
 *                 Map.entry("pilot.resources.limits.memory", "4096Mi"),
 *                 Map.entry("pilot.resources.requests.cpu", "500m"),
 *                 Map.entry("pilot.resources.requests.memory", "2048Mi"),
 *                 Map.entry("pilot.traceSampling", "1"),
 *                 Map.entry("security.enabled", true),
 *                 Map.entry("sidecarInjectorWebhook.enabled", true),
 *                 Map.entry("tracing.enabled", true),
 *                 Map.entry("tracing.jaeger.resources.limits.cpu", "500m"),
 *                 Map.entry("tracing.jaeger.resources.limits.memory", "1024Mi"),
 *                 Map.entry("tracing.jaeger.resources.requests.cpu", "100m"),
 *                 Map.entry("tracing.jaeger.resources.requests.memory", "100Mi")
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Creating Rancher v2 RKE cluster assigning a node pool (overlapped planes)
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;
 * import com.pulumi.rancher2.NodeTemplate;
 * import com.pulumi.rancher2.NodeTemplateArgs;
 * import com.pulumi.rancher2.inputs.NodeTemplateAmazonec2ConfigArgs;
 * import com.pulumi.rancher2.NodePool;
 * import com.pulumi.rancher2.NodePoolArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 RKE Cluster
 *         var foo_custom = new Cluster("foo-custom", ClusterArgs.builder()
 *             .name("foo-custom")
 *             .description("Foo rancher2 custom cluster")
 *             .rkeConfig(ClusterRkeConfigArgs.builder()
 *                 .network(ClusterRkeConfigNetworkArgs.builder()
 *                     .plugin("canal")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         // Create a new rancher2 Node Template
 *         var foo = new NodeTemplate("foo", NodeTemplateArgs.builder()
 *             .name("foo")
 *             .description("foo test")
 *             .amazonec2Config(NodeTemplateAmazonec2ConfigArgs.builder()
 *                 .accessKey("<AWS_ACCESS_KEY>")
 *                 .secretKey("<AWS_SECRET_KEY>")
 *                 .ami("<AMI_ID>")
 *                 .region("<REGION>")
 *                 .securityGroups("<AWS_SECURITY_GROUP>")
 *                 .subnetId("<SUBNET_ID>")
 *                 .vpcId("<VPC_ID>")
 *                 .zone("<ZONE>")
 *                 .build())
 *             .build());
 * 
 *         // Create a new rancher2 Node Pool
 *         var fooNodePool = new NodePool("fooNodePool", NodePoolArgs.builder()
 *             .clusterId(foo_custom.id())
 *             .name("foo")
 *             .hostnamePrefix("foo-cluster-0")
 *             .nodeTemplateId(foo.id())
 *             .quantity(3)
 *             .controlPlane(true)
 *             .etcd(true)
 *             .worker(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Creating Rancher v2 RKE cluster from template. For Rancher v2.3.x and above.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.ClusterTemplate;
 * import com.pulumi.rancher2.ClusterTemplateArgs;
 * import com.pulumi.rancher2.inputs.ClusterTemplateMemberArgs;
 * import com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionArgs;
 * import com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs;
 * import com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs;
 * import com.pulumi.rancher2.inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 cluster template
 *         var foo = new ClusterTemplate("foo", ClusterTemplateArgs.builder()
 *             .name("foo")
 *             .members(ClusterTemplateMemberArgs.builder()
 *                 .accessType("owner")
 *                 .userPrincipalId("local://user-XXXXX")
 *                 .build())
 *             .templateRevisions(ClusterTemplateTemplateRevisionArgs.builder()
 *                 .name("V1")
 *                 .clusterConfig(ClusterTemplateTemplateRevisionClusterConfigArgs.builder()
 *                     .rkeConfig(ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs.builder()
 *                         .network(ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs.builder()
 *                             .plugin("canal")
 *                             .build())
 *                         .services(ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs.builder()
 *                             .etcd(ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs.builder()
 *                                 .creation("6h")
 *                                 .retention("24h")
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .default_(true)
 *                 .build())
 *             .description("Test cluster template v2")
 *             .build());
 * 
 *         // Create a new rancher2 RKE Cluster from template
 *         var fooCluster = new Cluster("fooCluster", ClusterArgs.builder()
 *             .name("foo")
 *             .clusterTemplateId(foo.id())
 *             .clusterTemplateRevisionId(foo.templateRevisions().applyValue(templateRevisions -> templateRevisions[0].id()))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x and above.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesEtcdArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeApiArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeApiAuditLogArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigUpgradeStrategyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Cluster("foo", ClusterArgs.builder()
 *             .name("foo")
 *             .description("Terraform custom cluster")
 *             .rkeConfig(ClusterRkeConfigArgs.builder()
 *                 .network(ClusterRkeConfigNetworkArgs.builder()
 *                     .plugin("canal")
 *                     .build())
 *                 .services(ClusterRkeConfigServicesArgs.builder()
 *                     .etcd(ClusterRkeConfigServicesEtcdArgs.builder()
 *                         .creation("6h")
 *                         .retention("24h")
 *                         .build())
 *                     .kubeApi(ClusterRkeConfigServicesKubeApiArgs.builder()
 *                         .auditLog(ClusterRkeConfigServicesKubeApiAuditLogArgs.builder()
 *                             .enabled(true)
 *                             .configuration(ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs.builder()
 *                                 .maxAge(5)
 *                                 .maxBackup(5)
 *                                 .maxSize(100)
 *                                 .path("-")
 *                                 .format("json")
 *                                 .policy("""
 * apiVersion: audit.k8s.io/v1
 * kind: Policy
 * metadata:
 *   creationTimestamp: null
 * omitStages:
 * - RequestReceived
 * rules:
 * - level: RequestResponse
 *   resources:
 *   - resources:
 *     - pods
 *                                 """)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .upgradeStrategy(ClusterRkeConfigUpgradeStrategyArgs.builder()
 *                     .drain(true)
 *                     .maxUnavailableWorker("20%")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Creating Rancher v2 RKE cluster with cluster agent customization. For Rancher v2.7.5 and above.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;
 * import com.pulumi.rancher2.inputs.ClusterClusterAgentDeploymentCustomizationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Cluster("foo", ClusterArgs.builder()
 *             .name("foo")
 *             .description("Terraform cluster with agent customization")
 *             .rkeConfig(ClusterRkeConfigArgs.builder()
 *                 .network(ClusterRkeConfigNetworkArgs.builder()
 *                     .plugin("canal")
 *                     .build())
 *                 .build())
 *             .clusterAgentDeploymentCustomizations(ClusterClusterAgentDeploymentCustomizationArgs.builder()
 *                 .appendTolerations(ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs.builder()
 *                     .effect("NoSchedule")
 *                     .key("tolerate/control-plane")
 *                     .value("true")
 *                     .build())
 *                 .overrideAffinity("""
 * {
 *   "nodeAffinity": {
 *     "requiredDuringSchedulingIgnoredDuringExecution": {
 *       "nodeSelectorTerms": [{
 *         "matchExpressions": [{
 *           "key": "not.this/nodepool",
 *           "operator": "In",
 *           "values": [
 *             "true"
 *           ]
 *         }]
 *       }]
 *     }
 *   }
 * }
 *                 """)
 *                 .overrideResourceRequirements(ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs.builder()
 *                     .cpuLimit("800")
 *                     .cpuRequest("500")
 *                     .memoryLimit("800")
 *                     .memoryRequest("500")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Creating Rancher v2 RKE cluster with Pod Security Admission Configuration Template (PSACT). For Rancher v2.7.2 and above.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.PodSecurityAdmissionConfigurationTemplate;
 * import com.pulumi.rancher2.PodSecurityAdmissionConfigurationTemplateArgs;
 * import com.pulumi.rancher2.inputs.PodSecurityAdmissionConfigurationTemplateDefaultsArgs;
 * import com.pulumi.rancher2.inputs.PodSecurityAdmissionConfigurationTemplateExemptionsArgs;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Custom PSACT (if you wish to use your own)
 *         var foo = new PodSecurityAdmissionConfigurationTemplate("foo", PodSecurityAdmissionConfigurationTemplateArgs.builder()
 *             .name("custom-psact")
 *             .description("This is my custom Pod Security Admission Configuration Template")
 *             .defaults(PodSecurityAdmissionConfigurationTemplateDefaultsArgs.builder()
 *                 .audit("restricted")
 *                 .auditVersion("latest")
 *                 .enforce("restricted")
 *                 .enforceVersion("latest")
 *                 .warn("restricted")
 *                 .warnVersion("latest")
 *                 .build())
 *             .exemptions(PodSecurityAdmissionConfigurationTemplateExemptionsArgs.builder()
 *                 .usernames("testuser")
 *                 .runtimeClasses("testclass")
 *                 .namespaces(                
 *                     "ingress-nginx",
 *                     "kube-system")
 *                 .build())
 *             .build());
 * 
 *         var fooCluster = new Cluster("fooCluster", ClusterArgs.builder()
 *             .name("foo")
 *             .description("Terraform cluster with PSACT")
 *             .defaultPodSecurityAdmissionConfigurationTemplateName("<name>")
 *             .rkeConfig(ClusterRkeConfigArgs.builder()
 *                 .network(ClusterRkeConfigNetworkArgs.builder()
 *                     .plugin("canal")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Importing EKS cluster to Rancher v2, using `eks_config_v2`. For Rancher v2.5.x and above.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.CloudCredential;
 * import com.pulumi.rancher2.CloudCredentialArgs;
 * import com.pulumi.rancher2.inputs.CloudCredentialAmazonec2CredentialConfigArgs;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterEksConfigV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new CloudCredential("foo", CloudCredentialArgs.builder()
 *             .name("foo")
 *             .description("foo test")
 *             .amazonec2CredentialConfig(CloudCredentialAmazonec2CredentialConfigArgs.builder()
 *                 .accessKey("<aws-access-key>")
 *                 .secretKey("<aws-secret-key>")
 *                 .build())
 *             .build());
 * 
 *         var fooCluster = new Cluster("fooCluster", ClusterArgs.builder()
 *             .name("foo")
 *             .description("Terraform EKS cluster")
 *             .eksConfigV2(ClusterEksConfigV2Args.builder()
 *                 .cloudCredentialId(foo.id())
 *                 .name("<cluster-name>")
 *                 .region("<eks-region>")
 *                 .imported(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Creating EKS cluster from Rancher v2, using `eks_config_v2`. For Rancher v2.5.x and above.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.CloudCredential;
 * import com.pulumi.rancher2.CloudCredentialArgs;
 * import com.pulumi.rancher2.inputs.CloudCredentialAmazonec2CredentialConfigArgs;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterEksConfigV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new CloudCredential("foo", CloudCredentialArgs.builder()
 *             .name("foo")
 *             .description("foo test")
 *             .amazonec2CredentialConfig(CloudCredentialAmazonec2CredentialConfigArgs.builder()
 *                 .accessKey("<aws-access-key>")
 *                 .secretKey("<aws-secret-key>")
 *                 .build())
 *             .build());
 * 
 *         var fooCluster = new Cluster("fooCluster", ClusterArgs.builder()
 *             .name("foo")
 *             .description("Terraform EKS cluster")
 *             .eksConfigV2(ClusterEksConfigV2Args.builder()
 *                 .cloudCredentialId(foo.id())
 *                 .region("<EKS_REGION>")
 *                 .kubernetesVersion("1.24")
 *                 .loggingTypes(                
 *                     "audit",
 *                     "api")
 *                 .nodeGroups(                
 *                     ClusterEksConfigV2NodeGroupArgs.builder()
 *                         .name("node_group1")
 *                         .instanceType("t3.medium")
 *                         .desiredSize(3)
 *                         .maxSize(5)
 *                         .build(),
 *                     ClusterEksConfigV2NodeGroupArgs.builder()
 *                         .name("node_group2")
 *                         .instanceType("m5.xlarge")
 *                         .desiredSize(2)
 *                         .maxSize(3)
 *                         .nodeRole("arn:aws:iam::role/test-NodeInstanceRole")
 *                         .build())
 *                 .privateAccess(true)
 *                 .publicAccess(false)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Creating EKS cluster from Rancher v2, using `eks_config_v2` and launch template. For Rancher v2.5.6 and above.
 * 
 * Note: To use `launch_template` you must provide the ID (seen as `&lt;EC2_LAUNCH_TEMPLATE_ID&gt;`) to the template either as a static value. Or fetched via AWS data-source using one of: aws_ami first and provide the ID to that.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.CloudCredential;
 * import com.pulumi.rancher2.CloudCredentialArgs;
 * import com.pulumi.rancher2.inputs.CloudCredentialAmazonec2CredentialConfigArgs;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterEksConfigV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new CloudCredential("foo", CloudCredentialArgs.builder()
 *             .name("foo")
 *             .description("foo test")
 *             .amazonec2CredentialConfig(CloudCredentialAmazonec2CredentialConfigArgs.builder()
 *                 .accessKey("<aws-access-key>")
 *                 .secretKey("<aws-secret-key>")
 *                 .build())
 *             .build());
 * 
 *         var fooCluster = new Cluster("fooCluster", ClusterArgs.builder()
 *             .name("foo")
 *             .description("Terraform EKS cluster")
 *             .eksConfigV2(ClusterEksConfigV2Args.builder()
 *                 .cloudCredentialId(foo.id())
 *                 .region("<EKS_REGION>")
 *                 .kubernetesVersion("1.24")
 *                 .loggingTypes(                
 *                     "audit",
 *                     "api")
 *                 .nodeGroups(ClusterEksConfigV2NodeGroupArgs.builder()
 *                     .desiredSize(3)
 *                     .maxSize(5)
 *                     .name("node_group1")
 *                     .launchTemplates(ClusterEksConfigV2NodeGroupLaunchTemplateArgs.builder()
 *                         .id("<ec2-launch-template-id>")
 *                         .version(1)
 *                         .build())
 *                     .build())
 *                 .privateAccess(true)
 *                 .publicAccess(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Creating AKS cluster from Rancher v2, using `aks_config_v2`. For Rancher v2.6.0 and above.
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.CloudCredential;
 * import com.pulumi.rancher2.CloudCredentialArgs;
 * import com.pulumi.rancher2.inputs.CloudCredentialAzureCredentialConfigArgs;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterAksConfigV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo_aks = new CloudCredential("foo-aks", CloudCredentialArgs.builder()
 *             .name("foo-aks")
 *             .azureCredentialConfig(CloudCredentialAzureCredentialConfigArgs.builder()
 *                 .clientId("<client-id>")
 *                 .clientSecret("<client-secret>")
 *                 .subscriptionId("<subscription-id>")
 *                 .build())
 *             .build());
 * 
 *         var foo = new Cluster("foo", ClusterArgs.builder()
 *             .name("foo")
 *             .description("Terraform AKS cluster")
 *             .aksConfigV2(ClusterAksConfigV2Args.builder()
 *                 .cloudCredentialId(foo_aks.id())
 *                 .resourceGroup("<resource-group>")
 *                 .resourceLocation("<resource-location>")
 *                 .dnsPrefix("<dns-prefix>")
 *                 .kubernetesVersion("1.24.6")
 *                 .networkPlugin("<network-plugin>")
 *                 .virtualNetwork("<virtual-network>")
 *                 .virtualNetworkResourceGroup("<virtual-network-resource-group>")
 *                 .subnet("<subnet>")
 *                 .nodeResourceGroup("<node-resource-group>")
 *                 .nodePools(                
 *                     ClusterAksConfigV2NodePoolArgs.builder()
 *                         .availabilityZones(                        
 *                             "1",
 *                             "2",
 *                             "3")
 *                         .name("<nodepool-name-1>")
 *                         .mode("System")
 *                         .count(1)
 *                         .orchestratorVersion("1.21.2")
 *                         .osDiskSizeGb(128)
 *                         .vmSize("Standard_DS2_v2")
 *                         .build(),
 *                     ClusterAksConfigV2NodePoolArgs.builder()
 *                         .availabilityZones(                        
 *                             "1",
 *                             "2",
 *                             "3")
 *                         .name("<nodepool-name-2>")
 *                         .count(1)
 *                         .mode("User")
 *                         .orchestratorVersion("1.21.2")
 *                         .osDiskSizeGb(128)
 *                         .vmSize("Standard_DS2_v2")
 *                         .maxSurge("25%")
 *                         .labels(Map.ofEntries(
 *                             Map.entry("test1", "data1"),
 *                             Map.entry("test2", "data2")
 *                         ))
 *                         .taints("none:PreferNoSchedule")
 *                         .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Clusters can be imported using the Rancher Cluster ID
 * 
 * ```sh
 * $ pulumi import rancher2:index/cluster:Cluster foo &amp;lt;CLUSTER_ID&amp;gt;
 * ```
 * 
 */
@ResourceType(type="rancher2:index/cluster:Cluster")
public class Cluster extends com.pulumi.resources.CustomResource {
    /**
     * Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
     * 
     */
    @Export(name="agentEnvVars", refs={List.class,ClusterAgentEnvVar.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ClusterAgentEnvVar>> agentEnvVars;

    /**
     * @return Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
     * 
     */
    public Output<Optional<List<ClusterAgentEnvVar>>> agentEnvVars() {
        return Codegen.optional(this.agentEnvVars);
    }
    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    @Export(name="aksConfig", refs={ClusterAksConfig.class}, tree="[0]")
    private Output</* @Nullable */ ClusterAksConfig> aksConfig;

    /**
     * @return The Azure AKS configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ClusterAksConfig>> aksConfig() {
        return Codegen.optional(this.aksConfig);
    }
    /**
     * The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    @Export(name="aksConfigV2", refs={ClusterAksConfigV2.class}, tree="[0]")
    private Output</* @Nullable */ ClusterAksConfigV2> aksConfigV2;

    /**
     * @return The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ClusterAksConfigV2>> aksConfigV2() {
        return Codegen.optional(this.aksConfigV2);
    }
    /**
     * Annotations for the Cluster (map)
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> annotations;

    /**
     * @return Annotations for the Cluster (map)
     * 
     */
    public Output<Map<String,String>> annotations() {
        return this.annotations;
    }
    /**
     * (Computed/Sensitive) K8s cluster ca cert (string)
     * 
     */
    @Export(name="caCert", refs={String.class}, tree="[0]")
    private Output<String> caCert;

    /**
     * @return (Computed/Sensitive) K8s cluster ca cert (string)
     * 
     */
    public Output<String> caCert() {
        return this.caCert;
    }
    /**
     * Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
     * 
     */
    @Export(name="clusterAgentDeploymentCustomizations", refs={List.class,ClusterClusterAgentDeploymentCustomization.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ClusterClusterAgentDeploymentCustomization>> clusterAgentDeploymentCustomizations;

    /**
     * @return Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
     * 
     */
    public Output<Optional<List<ClusterClusterAgentDeploymentCustomization>>> clusterAgentDeploymentCustomizations() {
        return Codegen.optional(this.clusterAgentDeploymentCustomizations);
    }
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     * 
     */
    @Export(name="clusterAuthEndpoint", refs={ClusterClusterAuthEndpoint.class}, tree="[0]")
    private Output<ClusterClusterAuthEndpoint> clusterAuthEndpoint;

    /**
     * @return Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     * 
     */
    public Output<ClusterClusterAuthEndpoint> clusterAuthEndpoint() {
        return this.clusterAuthEndpoint;
    }
    /**
     * Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
     * 
     */
    @Export(name="clusterMonitoringInput", refs={ClusterClusterMonitoringInput.class}, tree="[0]")
    private Output</* @Nullable */ ClusterClusterMonitoringInput> clusterMonitoringInput;

    /**
     * @return Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
     * 
     */
    public Output<Optional<ClusterClusterMonitoringInput>> clusterMonitoringInput() {
        return Codegen.optional(this.clusterMonitoringInput);
    }
    /**
     * (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     * 
     */
    @Export(name="clusterRegistrationToken", refs={ClusterClusterRegistrationToken.class}, tree="[0]")
    private Output<ClusterClusterRegistrationToken> clusterRegistrationToken;

    /**
     * @return (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     * 
     */
    public Output<ClusterClusterRegistrationToken> clusterRegistrationToken() {
        return this.clusterRegistrationToken;
    }
    /**
     * Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
     * 
     */
    @Export(name="clusterTemplateAnswers", refs={ClusterClusterTemplateAnswers.class}, tree="[0]")
    private Output<ClusterClusterTemplateAnswers> clusterTemplateAnswers;

    /**
     * @return Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
     * 
     */
    public Output<ClusterClusterTemplateAnswers> clusterTemplateAnswers() {
        return this.clusterTemplateAnswers;
    }
    /**
     * Cluster template ID. For Rancher v2.3.x and above (string)
     * 
     */
    @Export(name="clusterTemplateId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clusterTemplateId;

    /**
     * @return Cluster template ID. For Rancher v2.3.x and above (string)
     * 
     */
    public Output<Optional<String>> clusterTemplateId() {
        return Codegen.optional(this.clusterTemplateId);
    }
    /**
     * Cluster template questions. For Rancher v2.3.x and above (list)
     * 
     */
    @Export(name="clusterTemplateQuestions", refs={List.class,ClusterClusterTemplateQuestion.class}, tree="[0,1]")
    private Output<List<ClusterClusterTemplateQuestion>> clusterTemplateQuestions;

    /**
     * @return Cluster template questions. For Rancher v2.3.x and above (list)
     * 
     */
    public Output<List<ClusterClusterTemplateQuestion>> clusterTemplateQuestions() {
        return this.clusterTemplateQuestions;
    }
    /**
     * Cluster template revision ID. For Rancher v2.3.x and above (string)
     * 
     */
    @Export(name="clusterTemplateRevisionId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clusterTemplateRevisionId;

    /**
     * @return Cluster template revision ID. For Rancher v2.3.x and above (string)
     * 
     */
    public Output<Optional<String>> clusterTemplateRevisionId() {
        return Codegen.optional(this.clusterTemplateRevisionId);
    }
    /**
     * The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)
     * 
     */
    @Export(name="defaultPodSecurityAdmissionConfigurationTemplateName", refs={String.class}, tree="[0]")
    private Output<String> defaultPodSecurityAdmissionConfigurationTemplateName;

    /**
     * @return The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)
     * 
     */
    public Output<String> defaultPodSecurityAdmissionConfigurationTemplateName() {
        return this.defaultPodSecurityAdmissionConfigurationTemplateName;
    }
    /**
     * [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     * 
     */
    @Export(name="defaultPodSecurityPolicyTemplateId", refs={String.class}, tree="[0]")
    private Output<String> defaultPodSecurityPolicyTemplateId;

    /**
     * @return [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     * 
     */
    public Output<String> defaultPodSecurityPolicyTemplateId() {
        return this.defaultPodSecurityPolicyTemplateId;
    }
    /**
     * (Computed) Default project ID for the cluster (string)
     * 
     */
    @Export(name="defaultProjectId", refs={String.class}, tree="[0]")
    private Output<String> defaultProjectId;

    /**
     * @return (Computed) Default project ID for the cluster (string)
     * 
     */
    public Output<String> defaultProjectId() {
        return this.defaultProjectId;
    }
    /**
     * The description for Cluster (string)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description for Cluster (string)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Desired agent image. For Rancher v2.3.x and above (string)
     * 
     */
    @Export(name="desiredAgentImage", refs={String.class}, tree="[0]")
    private Output<String> desiredAgentImage;

    /**
     * @return Desired agent image. For Rancher v2.3.x and above (string)
     * 
     */
    public Output<String> desiredAgentImage() {
        return this.desiredAgentImage;
    }
    /**
     * Desired auth image. For Rancher v2.3.x and above (string)
     * 
     */
    @Export(name="desiredAuthImage", refs={String.class}, tree="[0]")
    private Output<String> desiredAuthImage;

    /**
     * @return Desired auth image. For Rancher v2.3.x and above (string)
     * 
     */
    public Output<String> desiredAuthImage() {
        return this.desiredAuthImage;
    }
    /**
     * Desired auth image. For Rancher v2.3.x and above (string)
     * 
     */
    @Export(name="dockerRootDir", refs={String.class}, tree="[0]")
    private Output<String> dockerRootDir;

    /**
     * @return Desired auth image. For Rancher v2.3.x and above (string)
     * 
     */
    public Output<String> dockerRootDir() {
        return this.dockerRootDir;
    }
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     * 
     */
    @Export(name="driver", refs={String.class}, tree="[0]")
    private Output<String> driver;

    /**
     * @return (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     * 
     */
    public Output<String> driver() {
        return this.driver;
    }
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    @Export(name="eksConfig", refs={ClusterEksConfig.class}, tree="[0]")
    private Output</* @Nullable */ ClusterEksConfig> eksConfig;

    /**
     * @return The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ClusterEksConfig>> eksConfig() {
        return Codegen.optional(this.eksConfig);
    }
    /**
     * The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x and above (list maxitems:1)
     * 
     */
    @Export(name="eksConfigV2", refs={ClusterEksConfigV2.class}, tree="[0]")
    private Output<ClusterEksConfigV2> eksConfigV2;

    /**
     * @return The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x and above (list maxitems:1)
     * 
     */
    public Output<ClusterEksConfigV2> eksConfigV2() {
        return this.eksConfigV2;
    }
    /**
     * Enable built-in cluster alerting (bool)
     * 
     */
    @Export(name="enableClusterAlerting", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableClusterAlerting;

    /**
     * @return Enable built-in cluster alerting (bool)
     * 
     */
    public Output<Boolean> enableClusterAlerting() {
        return this.enableClusterAlerting;
    }
    /**
     * Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
     * 
     * @deprecated
     * Deploy istio using rancher2.App resource instead
     * 
     */
    @Deprecated /* Deploy istio using rancher2.App resource instead */
    @Export(name="enableClusterIstio", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableClusterIstio;

    /**
     * @return Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
     * 
     */
    public Output<Boolean> enableClusterIstio() {
        return this.enableClusterIstio;
    }
    /**
     * Enable built-in cluster monitoring (bool)
     * 
     */
    @Export(name="enableClusterMonitoring", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableClusterMonitoring;

    /**
     * @return Enable built-in cluster monitoring (bool)
     * 
     */
    public Output<Boolean> enableClusterMonitoring() {
        return this.enableClusterMonitoring;
    }
    /**
     * Enable project network isolation (bool)
     * 
     */
    @Export(name="enableNetworkPolicy", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableNetworkPolicy;

    /**
     * @return Enable project network isolation (bool)
     * 
     */
    public Output<Boolean> enableNetworkPolicy() {
        return this.enableNetworkPolicy;
    }
    /**
     * Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
     * 
     */
    @Export(name="fleetAgentDeploymentCustomizations", refs={List.class,ClusterFleetAgentDeploymentCustomization.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ClusterFleetAgentDeploymentCustomization>> fleetAgentDeploymentCustomizations;

    /**
     * @return Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
     * 
     */
    public Output<Optional<List<ClusterFleetAgentDeploymentCustomization>>> fleetAgentDeploymentCustomizations() {
        return Codegen.optional(this.fleetAgentDeploymentCustomizations);
    }
    /**
     * Fleet workspace name (string)
     * 
     */
    @Export(name="fleetWorkspaceName", refs={String.class}, tree="[0]")
    private Output<String> fleetWorkspaceName;

    /**
     * @return Fleet workspace name (string)
     * 
     */
    public Output<String> fleetWorkspaceName() {
        return this.fleetWorkspaceName;
    }
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    @Export(name="gkeConfig", refs={ClusterGkeConfig.class}, tree="[0]")
    private Output</* @Nullable */ ClusterGkeConfig> gkeConfig;

    /**
     * @return The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ClusterGkeConfig>> gkeConfig() {
        return Codegen.optional(this.gkeConfig);
    }
    /**
     * The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 and above (list maxitems:1)
     * 
     */
    @Export(name="gkeConfigV2", refs={ClusterGkeConfigV2.class}, tree="[0]")
    private Output</* @Nullable */ ClusterGkeConfigV2> gkeConfigV2;

    /**
     * @return The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 and above (list maxitems:1)
     * 
     */
    public Output<Optional<ClusterGkeConfigV2>> gkeConfigV2() {
        return Codegen.optional(this.gkeConfigV2);
    }
    /**
     * (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
     * 
     */
    @Export(name="istioEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> istioEnabled;

    /**
     * @return (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
     * 
     */
    public Output<Boolean> istioEnabled() {
        return this.istioEnabled;
    }
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
     * 
     */
    @Export(name="k3sConfig", refs={ClusterK3sConfig.class}, tree="[0]")
    private Output<ClusterK3sConfig> k3sConfig;

    /**
     * @return The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
     * 
     */
    public Output<ClusterK3sConfig> k3sConfig() {
        return this.k3sConfig;
    }
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `cluster_auth_endpoint` enabled, the kube_config will not be available until the cluster is `connected` (string)
     * 
     */
    @Export(name="kubeConfig", refs={String.class}, tree="[0]")
    private Output<String> kubeConfig;

    /**
     * @return (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `cluster_auth_endpoint` enabled, the kube_config will not be available until the cluster is `connected` (string)
     * 
     */
    public Output<String> kubeConfig() {
        return this.kubeConfig;
    }
    /**
     * Labels for the Cluster (map)
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> labels;

    /**
     * @return Labels for the Cluster (map)
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    /**
     * The name of the Cluster (string)
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Cluster (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    @Export(name="okeConfig", refs={ClusterOkeConfig.class}, tree="[0]")
    private Output</* @Nullable */ ClusterOkeConfig> okeConfig;

    /**
     * @return The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ClusterOkeConfig>> okeConfig() {
        return Codegen.optional(this.okeConfig);
    }
    /**
     * The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    @Export(name="rke2Config", refs={ClusterRke2Config.class}, tree="[0]")
    private Output<ClusterRke2Config> rke2Config;

    /**
     * @return The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
     * 
     */
    public Output<ClusterRke2Config> rke2Config() {
        return this.rke2Config;
    }
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
     * 
     */
    @Export(name="rkeConfig", refs={ClusterRkeConfig.class}, tree="[0]")
    private Output<ClusterRkeConfig> rkeConfig;

    /**
     * @return The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
     * 
     */
    public Output<ClusterRkeConfig> rkeConfig() {
        return this.rkeConfig;
    }
    /**
     * (Computed) System project ID for the cluster (string)
     * 
     */
    @Export(name="systemProjectId", refs={String.class}, tree="[0]")
    private Output<String> systemProjectId;

    /**
     * @return (Computed) System project ID for the cluster (string)
     * 
     */
    public Output<String> systemProjectId() {
        return this.systemProjectId;
    }
    /**
     * Windows preferred cluster. Default: `false` (bool)
     * 
     */
    @Export(name="windowsPreferedCluster", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> windowsPreferedCluster;

    /**
     * @return Windows preferred cluster. Default: `false` (bool)
     * 
     */
    public Output<Optional<Boolean>> windowsPreferedCluster() {
        return Codegen.optional(this.windowsPreferedCluster);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Cluster(java.lang.String name) {
        this(name, ClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Cluster(java.lang.String name, @Nullable ClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Cluster(java.lang.String name, @Nullable ClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/cluster:Cluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Cluster(java.lang.String name, Output<java.lang.String> id, @Nullable ClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/cluster:Cluster", name, state, makeResourceOptions(options, id), false);
    }

    private static ClusterArgs makeArgs(@Nullable ClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "caCert",
                "kubeConfig"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Cluster get(java.lang.String name, Output<java.lang.String> id, @Nullable ClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Cluster(name, id, state, options);
    }
}
