// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigMonitoringToleration;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigMonitoringUpdateStrategy;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterRkeConfigMonitoring {
    private @Nullable Map<String,Object> nodeSelector;
    private Map<String,Object> options;
    private String provider;
    private Integer replicas;
    private @Nullable List<GetClusterRkeConfigMonitoringToleration> tolerations;
    private @Nullable GetClusterRkeConfigMonitoringUpdateStrategy updateStrategy;

    private GetClusterRkeConfigMonitoring() {}
    public Map<String,Object> nodeSelector() {
        return this.nodeSelector == null ? Map.of() : this.nodeSelector;
    }
    public Map<String,Object> options() {
        return this.options;
    }
    public String provider() {
        return this.provider;
    }
    public Integer replicas() {
        return this.replicas;
    }
    public List<GetClusterRkeConfigMonitoringToleration> tolerations() {
        return this.tolerations == null ? List.of() : this.tolerations;
    }
    public Optional<GetClusterRkeConfigMonitoringUpdateStrategy> updateStrategy() {
        return Optional.ofNullable(this.updateStrategy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterRkeConfigMonitoring defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,Object> nodeSelector;
        private Map<String,Object> options;
        private String provider;
        private Integer replicas;
        private @Nullable List<GetClusterRkeConfigMonitoringToleration> tolerations;
        private @Nullable GetClusterRkeConfigMonitoringUpdateStrategy updateStrategy;
        public Builder() {}
        public Builder(GetClusterRkeConfigMonitoring defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nodeSelector = defaults.nodeSelector;
    	      this.options = defaults.options;
    	      this.provider = defaults.provider;
    	      this.replicas = defaults.replicas;
    	      this.tolerations = defaults.tolerations;
    	      this.updateStrategy = defaults.updateStrategy;
        }

        @CustomType.Setter
        public Builder nodeSelector(@Nullable Map<String,Object> nodeSelector) {
            this.nodeSelector = nodeSelector;
            return this;
        }
        @CustomType.Setter
        public Builder options(Map<String,Object> options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        @CustomType.Setter
        public Builder provider(String provider) {
            this.provider = Objects.requireNonNull(provider);
            return this;
        }
        @CustomType.Setter
        public Builder replicas(Integer replicas) {
            this.replicas = Objects.requireNonNull(replicas);
            return this;
        }
        @CustomType.Setter
        public Builder tolerations(@Nullable List<GetClusterRkeConfigMonitoringToleration> tolerations) {
            this.tolerations = tolerations;
            return this;
        }
        public Builder tolerations(GetClusterRkeConfigMonitoringToleration... tolerations) {
            return tolerations(List.of(tolerations));
        }
        @CustomType.Setter
        public Builder updateStrategy(@Nullable GetClusterRkeConfigMonitoringUpdateStrategy updateStrategy) {
            this.updateStrategy = updateStrategy;
            return this;
        }
        public GetClusterRkeConfigMonitoring build() {
            final var o = new GetClusterRkeConfigMonitoring();
            o.nodeSelector = nodeSelector;
            o.options = options;
            o.provider = provider;
            o.replicas = replicas;
            o.tolerations = tolerations;
            o.updateStrategy = updateStrategy;
            return o;
        }
    }
}
