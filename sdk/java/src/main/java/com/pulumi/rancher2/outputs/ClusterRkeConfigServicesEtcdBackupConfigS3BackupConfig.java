// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig {
    /**
     * @return The AWS Client ID to use (string)
     * 
     */
    private @Nullable String accessKey;
    /**
     * @return Bucket name for S3 service (string)
     * 
     */
    private String bucketName;
    /**
     * @return Base64 encoded custom CA for S3 service. Use filebase64(&lt;FILE&gt;) for encoding file. Available from Rancher v2.2.5 (string)
     * 
     */
    private @Nullable String customCa;
    /**
     * @return Endpoint for S3 service (string)
     * 
     */
    private String endpoint;
    /**
     * @return Folder for S3 service. Available from Rancher v2.2.7 (string)
     * 
     */
    private @Nullable String folder;
    /**
     * @return The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    private @Nullable String region;
    /**
     * @return The AWS Client Secret associated with the Client ID (string)
     * 
     */
    private @Nullable String secretKey;

    private ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig() {}
    /**
     * @return The AWS Client ID to use (string)
     * 
     */
    public Optional<String> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }
    /**
     * @return Bucket name for S3 service (string)
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return Base64 encoded custom CA for S3 service. Use filebase64(&lt;FILE&gt;) for encoding file. Available from Rancher v2.2.5 (string)
     * 
     */
    public Optional<String> customCa() {
        return Optional.ofNullable(this.customCa);
    }
    /**
     * @return Endpoint for S3 service (string)
     * 
     */
    public String endpoint() {
        return this.endpoint;
    }
    /**
     * @return Folder for S3 service. Available from Rancher v2.2.7 (string)
     * 
     */
    public Optional<String> folder() {
        return Optional.ofNullable(this.folder);
    }
    /**
     * @return The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return The AWS Client Secret associated with the Client ID (string)
     * 
     */
    public Optional<String> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKey;
        private String bucketName;
        private @Nullable String customCa;
        private String endpoint;
        private @Nullable String folder;
        private @Nullable String region;
        private @Nullable String secretKey;
        public Builder() {}
        public Builder(ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.bucketName = defaults.bucketName;
    	      this.customCa = defaults.customCa;
    	      this.endpoint = defaults.endpoint;
    	      this.folder = defaults.folder;
    	      this.region = defaults.region;
    	      this.secretKey = defaults.secretKey;
        }

        @CustomType.Setter
        public Builder accessKey(@Nullable String accessKey) {

            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder customCa(@Nullable String customCa) {

            this.customCa = customCa;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            if (endpoint == null) {
              throw new MissingRequiredPropertyException("ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig", "endpoint");
            }
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder folder(@Nullable String folder) {

            this.folder = folder;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(@Nullable String secretKey) {

            this.secretKey = secretKey;
            return this;
        }
        public ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig build() {
            final var _resultValue = new ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig();
            _resultValue.accessKey = accessKey;
            _resultValue.bucketName = bucketName;
            _resultValue.customCa = customCa;
            _resultValue.endpoint = endpoint;
            _resultValue.folder = folder;
            _resultValue.region = region;
            _resultValue.secretKey = secretKey;
            return _resultValue;
        }
    }
}
