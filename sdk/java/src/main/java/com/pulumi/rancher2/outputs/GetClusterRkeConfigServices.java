// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigServicesEtcd;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigServicesKubeApi;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigServicesKubeController;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigServicesKubelet;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigServicesKubeproxy;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigServicesScheduler;
import java.util.Objects;

@CustomType
public final class GetClusterRkeConfigServices {
    private GetClusterRkeConfigServicesEtcd etcd;
    private GetClusterRkeConfigServicesKubeApi kubeApi;
    private GetClusterRkeConfigServicesKubeController kubeController;
    private GetClusterRkeConfigServicesKubelet kubelet;
    private GetClusterRkeConfigServicesKubeproxy kubeproxy;
    private GetClusterRkeConfigServicesScheduler scheduler;

    private GetClusterRkeConfigServices() {}
    public GetClusterRkeConfigServicesEtcd etcd() {
        return this.etcd;
    }
    public GetClusterRkeConfigServicesKubeApi kubeApi() {
        return this.kubeApi;
    }
    public GetClusterRkeConfigServicesKubeController kubeController() {
        return this.kubeController;
    }
    public GetClusterRkeConfigServicesKubelet kubelet() {
        return this.kubelet;
    }
    public GetClusterRkeConfigServicesKubeproxy kubeproxy() {
        return this.kubeproxy;
    }
    public GetClusterRkeConfigServicesScheduler scheduler() {
        return this.scheduler;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterRkeConfigServices defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetClusterRkeConfigServicesEtcd etcd;
        private GetClusterRkeConfigServicesKubeApi kubeApi;
        private GetClusterRkeConfigServicesKubeController kubeController;
        private GetClusterRkeConfigServicesKubelet kubelet;
        private GetClusterRkeConfigServicesKubeproxy kubeproxy;
        private GetClusterRkeConfigServicesScheduler scheduler;
        public Builder() {}
        public Builder(GetClusterRkeConfigServices defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.etcd = defaults.etcd;
    	      this.kubeApi = defaults.kubeApi;
    	      this.kubeController = defaults.kubeController;
    	      this.kubelet = defaults.kubelet;
    	      this.kubeproxy = defaults.kubeproxy;
    	      this.scheduler = defaults.scheduler;
        }

        @CustomType.Setter
        public Builder etcd(GetClusterRkeConfigServicesEtcd etcd) {
            this.etcd = Objects.requireNonNull(etcd);
            return this;
        }
        @CustomType.Setter
        public Builder kubeApi(GetClusterRkeConfigServicesKubeApi kubeApi) {
            this.kubeApi = Objects.requireNonNull(kubeApi);
            return this;
        }
        @CustomType.Setter
        public Builder kubeController(GetClusterRkeConfigServicesKubeController kubeController) {
            this.kubeController = Objects.requireNonNull(kubeController);
            return this;
        }
        @CustomType.Setter
        public Builder kubelet(GetClusterRkeConfigServicesKubelet kubelet) {
            this.kubelet = Objects.requireNonNull(kubelet);
            return this;
        }
        @CustomType.Setter
        public Builder kubeproxy(GetClusterRkeConfigServicesKubeproxy kubeproxy) {
            this.kubeproxy = Objects.requireNonNull(kubeproxy);
            return this;
        }
        @CustomType.Setter
        public Builder scheduler(GetClusterRkeConfigServicesScheduler scheduler) {
            this.scheduler = Objects.requireNonNull(scheduler);
            return this;
        }
        public GetClusterRkeConfigServices build() {
            final var _resultValue = new GetClusterRkeConfigServices();
            _resultValue.etcd = etcd;
            _resultValue.kubeApi = kubeApi;
            _resultValue.kubeController = kubeController;
            _resultValue.kubelet = kubelet;
            _resultValue.kubeproxy = kubeproxy;
            _resultValue.scheduler = scheduler;
            return _resultValue;
        }
    }
}
