// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2ClusterAddons;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2IpAllocationPolicy;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2MasterAuthorizedNetworksConfig;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2NodePool;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2PrivateClusterConfig;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterGkeConfigV2 {
    private GetClusterGkeConfigV2ClusterAddons clusterAddons;
    private String clusterIpv4CidrBlock;
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    private String description;
    private Boolean enableKubernetesAlpha;
    private String googleCredentialSecret;
    private @Nullable Boolean imported;
    private GetClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy;
    private String kubernetesVersion;
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    private Map<String,Object> labels;
    private List<String> locations;
    private String loggingService;
    private String maintenanceWindow;
    private GetClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig;
    private String monitoringService;
    /**
     * @return The name of the Cluster (string)
     * 
     */
    private String name;
    private String network;
    private Boolean networkPolicyEnabled;
    private List<GetClusterGkeConfigV2NodePool> nodePools;
    private GetClusterGkeConfigV2PrivateClusterConfig privateClusterConfig;
    private String projectId;
    private String region;
    private String subnetwork;
    private String zone;

    private GetClusterGkeConfigV2() {}
    public GetClusterGkeConfigV2ClusterAddons clusterAddons() {
        return this.clusterAddons;
    }
    public String clusterIpv4CidrBlock() {
        return this.clusterIpv4CidrBlock;
    }
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    public String description() {
        return this.description;
    }
    public Boolean enableKubernetesAlpha() {
        return this.enableKubernetesAlpha;
    }
    public String googleCredentialSecret() {
        return this.googleCredentialSecret;
    }
    public Optional<Boolean> imported() {
        return Optional.ofNullable(this.imported);
    }
    public GetClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy() {
        return this.ipAllocationPolicy;
    }
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public List<String> locations() {
        return this.locations;
    }
    public String loggingService() {
        return this.loggingService;
    }
    public String maintenanceWindow() {
        return this.maintenanceWindow;
    }
    public GetClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig() {
        return this.masterAuthorizedNetworksConfig;
    }
    public String monitoringService() {
        return this.monitoringService;
    }
    /**
     * @return The name of the Cluster (string)
     * 
     */
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public Boolean networkPolicyEnabled() {
        return this.networkPolicyEnabled;
    }
    public List<GetClusterGkeConfigV2NodePool> nodePools() {
        return this.nodePools;
    }
    public GetClusterGkeConfigV2PrivateClusterConfig privateClusterConfig() {
        return this.privateClusterConfig;
    }
    public String projectId() {
        return this.projectId;
    }
    public String region() {
        return this.region;
    }
    public String subnetwork() {
        return this.subnetwork;
    }
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterGkeConfigV2 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetClusterGkeConfigV2ClusterAddons clusterAddons;
        private String clusterIpv4CidrBlock;
        private String description;
        private Boolean enableKubernetesAlpha;
        private String googleCredentialSecret;
        private @Nullable Boolean imported;
        private GetClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy;
        private String kubernetesVersion;
        private Map<String,Object> labels;
        private List<String> locations;
        private String loggingService;
        private String maintenanceWindow;
        private GetClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig;
        private String monitoringService;
        private String name;
        private String network;
        private Boolean networkPolicyEnabled;
        private List<GetClusterGkeConfigV2NodePool> nodePools;
        private GetClusterGkeConfigV2PrivateClusterConfig privateClusterConfig;
        private String projectId;
        private String region;
        private String subnetwork;
        private String zone;
        public Builder() {}
        public Builder(GetClusterGkeConfigV2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterAddons = defaults.clusterAddons;
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.description = defaults.description;
    	      this.enableKubernetesAlpha = defaults.enableKubernetesAlpha;
    	      this.googleCredentialSecret = defaults.googleCredentialSecret;
    	      this.imported = defaults.imported;
    	      this.ipAllocationPolicy = defaults.ipAllocationPolicy;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.labels = defaults.labels;
    	      this.locations = defaults.locations;
    	      this.loggingService = defaults.loggingService;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.masterAuthorizedNetworksConfig = defaults.masterAuthorizedNetworksConfig;
    	      this.monitoringService = defaults.monitoringService;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkPolicyEnabled = defaults.networkPolicyEnabled;
    	      this.nodePools = defaults.nodePools;
    	      this.privateClusterConfig = defaults.privateClusterConfig;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.subnetwork = defaults.subnetwork;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder clusterAddons(GetClusterGkeConfigV2ClusterAddons clusterAddons) {
            if (clusterAddons == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "clusterAddons");
            }
            this.clusterAddons = clusterAddons;
            return this;
        }
        @CustomType.Setter
        public Builder clusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
            if (clusterIpv4CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "clusterIpv4CidrBlock");
            }
            this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableKubernetesAlpha(Boolean enableKubernetesAlpha) {
            if (enableKubernetesAlpha == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "enableKubernetesAlpha");
            }
            this.enableKubernetesAlpha = enableKubernetesAlpha;
            return this;
        }
        @CustomType.Setter
        public Builder googleCredentialSecret(String googleCredentialSecret) {
            if (googleCredentialSecret == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "googleCredentialSecret");
            }
            this.googleCredentialSecret = googleCredentialSecret;
            return this;
        }
        @CustomType.Setter
        public Builder imported(@Nullable Boolean imported) {

            this.imported = imported;
            return this;
        }
        @CustomType.Setter
        public Builder ipAllocationPolicy(GetClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy) {
            if (ipAllocationPolicy == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "ipAllocationPolicy");
            }
            this.ipAllocationPolicy = ipAllocationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            if (kubernetesVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "kubernetesVersion");
            }
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder locations(List<String> locations) {
            if (locations == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "locations");
            }
            this.locations = locations;
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder loggingService(String loggingService) {
            if (loggingService == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "loggingService");
            }
            this.loggingService = loggingService;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindow(String maintenanceWindow) {
            if (maintenanceWindow == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "maintenanceWindow");
            }
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder masterAuthorizedNetworksConfig(GetClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig) {
            if (masterAuthorizedNetworksConfig == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "masterAuthorizedNetworksConfig");
            }
            this.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringService(String monitoringService) {
            if (monitoringService == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "monitoringService");
            }
            this.monitoringService = monitoringService;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder networkPolicyEnabled(Boolean networkPolicyEnabled) {
            if (networkPolicyEnabled == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "networkPolicyEnabled");
            }
            this.networkPolicyEnabled = networkPolicyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder nodePools(List<GetClusterGkeConfigV2NodePool> nodePools) {
            if (nodePools == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "nodePools");
            }
            this.nodePools = nodePools;
            return this;
        }
        public Builder nodePools(GetClusterGkeConfigV2NodePool... nodePools) {
            return nodePools(List.of(nodePools));
        }
        @CustomType.Setter
        public Builder privateClusterConfig(GetClusterGkeConfigV2PrivateClusterConfig privateClusterConfig) {
            if (privateClusterConfig == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "privateClusterConfig");
            }
            this.privateClusterConfig = privateClusterConfig;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(String subnetwork) {
            if (subnetwork == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "subnetwork");
            }
            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder zone(String zone) {
            if (zone == null) {
              throw new MissingRequiredPropertyException("GetClusterGkeConfigV2", "zone");
            }
            this.zone = zone;
            return this;
        }
        public GetClusterGkeConfigV2 build() {
            final var _resultValue = new GetClusterGkeConfigV2();
            _resultValue.clusterAddons = clusterAddons;
            _resultValue.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            _resultValue.description = description;
            _resultValue.enableKubernetesAlpha = enableKubernetesAlpha;
            _resultValue.googleCredentialSecret = googleCredentialSecret;
            _resultValue.imported = imported;
            _resultValue.ipAllocationPolicy = ipAllocationPolicy;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.labels = labels;
            _resultValue.locations = locations;
            _resultValue.loggingService = loggingService;
            _resultValue.maintenanceWindow = maintenanceWindow;
            _resultValue.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
            _resultValue.monitoringService = monitoringService;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.networkPolicyEnabled = networkPolicyEnabled;
            _resultValue.nodePools = nodePools;
            _resultValue.privateClusterConfig = privateClusterConfig;
            _resultValue.projectId = projectId;
            _resultValue.region = region;
            _resultValue.subnetwork = subnetwork;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
