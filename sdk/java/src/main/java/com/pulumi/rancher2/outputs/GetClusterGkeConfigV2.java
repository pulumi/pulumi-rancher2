// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2ClusterAddons;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2IpAllocationPolicy;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2MasterAuthorizedNetworksConfig;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2NodePool;
import com.pulumi.rancher2.outputs.GetClusterGkeConfigV2PrivateClusterConfig;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterGkeConfigV2 {
    private final GetClusterGkeConfigV2ClusterAddons clusterAddons;
    private final String clusterIpv4CidrBlock;
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    private final String description;
    private final Boolean enableKubernetesAlpha;
    private final String googleCredentialSecret;
    private final @Nullable Boolean imported;
    private final GetClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy;
    private final String kubernetesVersion;
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    private final Map<String,Object> labels;
    private final List<String> locations;
    private final String loggingService;
    private final String maintenanceWindow;
    private final GetClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig;
    private final String monitoringService;
    /**
     * @return The name of the Cluster (string)
     * 
     */
    private final String name;
    private final String network;
    private final Boolean networkPolicyEnabled;
    private final List<GetClusterGkeConfigV2NodePool> nodePools;
    private final GetClusterGkeConfigV2PrivateClusterConfig privateClusterConfig;
    private final String projectId;
    private final String region;
    private final String subnetwork;
    private final String zone;

    @CustomType.Constructor
    private GetClusterGkeConfigV2(
        @CustomType.Parameter("clusterAddons") GetClusterGkeConfigV2ClusterAddons clusterAddons,
        @CustomType.Parameter("clusterIpv4CidrBlock") String clusterIpv4CidrBlock,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("enableKubernetesAlpha") Boolean enableKubernetesAlpha,
        @CustomType.Parameter("googleCredentialSecret") String googleCredentialSecret,
        @CustomType.Parameter("imported") @Nullable Boolean imported,
        @CustomType.Parameter("ipAllocationPolicy") GetClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy,
        @CustomType.Parameter("kubernetesVersion") String kubernetesVersion,
        @CustomType.Parameter("labels") Map<String,Object> labels,
        @CustomType.Parameter("locations") List<String> locations,
        @CustomType.Parameter("loggingService") String loggingService,
        @CustomType.Parameter("maintenanceWindow") String maintenanceWindow,
        @CustomType.Parameter("masterAuthorizedNetworksConfig") GetClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig,
        @CustomType.Parameter("monitoringService") String monitoringService,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("network") String network,
        @CustomType.Parameter("networkPolicyEnabled") Boolean networkPolicyEnabled,
        @CustomType.Parameter("nodePools") List<GetClusterGkeConfigV2NodePool> nodePools,
        @CustomType.Parameter("privateClusterConfig") GetClusterGkeConfigV2PrivateClusterConfig privateClusterConfig,
        @CustomType.Parameter("projectId") String projectId,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("subnetwork") String subnetwork,
        @CustomType.Parameter("zone") String zone) {
        this.clusterAddons = clusterAddons;
        this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
        this.description = description;
        this.enableKubernetesAlpha = enableKubernetesAlpha;
        this.googleCredentialSecret = googleCredentialSecret;
        this.imported = imported;
        this.ipAllocationPolicy = ipAllocationPolicy;
        this.kubernetesVersion = kubernetesVersion;
        this.labels = labels;
        this.locations = locations;
        this.loggingService = loggingService;
        this.maintenanceWindow = maintenanceWindow;
        this.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
        this.monitoringService = monitoringService;
        this.name = name;
        this.network = network;
        this.networkPolicyEnabled = networkPolicyEnabled;
        this.nodePools = nodePools;
        this.privateClusterConfig = privateClusterConfig;
        this.projectId = projectId;
        this.region = region;
        this.subnetwork = subnetwork;
        this.zone = zone;
    }

    public GetClusterGkeConfigV2ClusterAddons clusterAddons() {
        return this.clusterAddons;
    }
    public String clusterIpv4CidrBlock() {
        return this.clusterIpv4CidrBlock;
    }
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    public String description() {
        return this.description;
    }
    public Boolean enableKubernetesAlpha() {
        return this.enableKubernetesAlpha;
    }
    public String googleCredentialSecret() {
        return this.googleCredentialSecret;
    }
    public Optional<Boolean> imported() {
        return Optional.ofNullable(this.imported);
    }
    public GetClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy() {
        return this.ipAllocationPolicy;
    }
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public List<String> locations() {
        return this.locations;
    }
    public String loggingService() {
        return this.loggingService;
    }
    public String maintenanceWindow() {
        return this.maintenanceWindow;
    }
    public GetClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig() {
        return this.masterAuthorizedNetworksConfig;
    }
    public String monitoringService() {
        return this.monitoringService;
    }
    /**
     * @return The name of the Cluster (string)
     * 
     */
    public String name() {
        return this.name;
    }
    public String network() {
        return this.network;
    }
    public Boolean networkPolicyEnabled() {
        return this.networkPolicyEnabled;
    }
    public List<GetClusterGkeConfigV2NodePool> nodePools() {
        return this.nodePools;
    }
    public GetClusterGkeConfigV2PrivateClusterConfig privateClusterConfig() {
        return this.privateClusterConfig;
    }
    public String projectId() {
        return this.projectId;
    }
    public String region() {
        return this.region;
    }
    public String subnetwork() {
        return this.subnetwork;
    }
    public String zone() {
        return this.zone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterGkeConfigV2 defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetClusterGkeConfigV2ClusterAddons clusterAddons;
        private String clusterIpv4CidrBlock;
        private String description;
        private Boolean enableKubernetesAlpha;
        private String googleCredentialSecret;
        private @Nullable Boolean imported;
        private GetClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy;
        private String kubernetesVersion;
        private Map<String,Object> labels;
        private List<String> locations;
        private String loggingService;
        private String maintenanceWindow;
        private GetClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig;
        private String monitoringService;
        private String name;
        private String network;
        private Boolean networkPolicyEnabled;
        private List<GetClusterGkeConfigV2NodePool> nodePools;
        private GetClusterGkeConfigV2PrivateClusterConfig privateClusterConfig;
        private String projectId;
        private String region;
        private String subnetwork;
        private String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterGkeConfigV2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterAddons = defaults.clusterAddons;
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.description = defaults.description;
    	      this.enableKubernetesAlpha = defaults.enableKubernetesAlpha;
    	      this.googleCredentialSecret = defaults.googleCredentialSecret;
    	      this.imported = defaults.imported;
    	      this.ipAllocationPolicy = defaults.ipAllocationPolicy;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.labels = defaults.labels;
    	      this.locations = defaults.locations;
    	      this.loggingService = defaults.loggingService;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.masterAuthorizedNetworksConfig = defaults.masterAuthorizedNetworksConfig;
    	      this.monitoringService = defaults.monitoringService;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkPolicyEnabled = defaults.networkPolicyEnabled;
    	      this.nodePools = defaults.nodePools;
    	      this.privateClusterConfig = defaults.privateClusterConfig;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.subnetwork = defaults.subnetwork;
    	      this.zone = defaults.zone;
        }

        public Builder clusterAddons(GetClusterGkeConfigV2ClusterAddons clusterAddons) {
            this.clusterAddons = Objects.requireNonNull(clusterAddons);
            return this;
        }
        public Builder clusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
            this.clusterIpv4CidrBlock = Objects.requireNonNull(clusterIpv4CidrBlock);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder enableKubernetesAlpha(Boolean enableKubernetesAlpha) {
            this.enableKubernetesAlpha = Objects.requireNonNull(enableKubernetesAlpha);
            return this;
        }
        public Builder googleCredentialSecret(String googleCredentialSecret) {
            this.googleCredentialSecret = Objects.requireNonNull(googleCredentialSecret);
            return this;
        }
        public Builder imported(@Nullable Boolean imported) {
            this.imported = imported;
            return this;
        }
        public Builder ipAllocationPolicy(GetClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy) {
            this.ipAllocationPolicy = Objects.requireNonNull(ipAllocationPolicy);
            return this;
        }
        public Builder kubernetesVersion(String kubernetesVersion) {
            this.kubernetesVersion = Objects.requireNonNull(kubernetesVersion);
            return this;
        }
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder locations(List<String> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        public Builder loggingService(String loggingService) {
            this.loggingService = Objects.requireNonNull(loggingService);
            return this;
        }
        public Builder maintenanceWindow(String maintenanceWindow) {
            this.maintenanceWindow = Objects.requireNonNull(maintenanceWindow);
            return this;
        }
        public Builder masterAuthorizedNetworksConfig(GetClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig) {
            this.masterAuthorizedNetworksConfig = Objects.requireNonNull(masterAuthorizedNetworksConfig);
            return this;
        }
        public Builder monitoringService(String monitoringService) {
            this.monitoringService = Objects.requireNonNull(monitoringService);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        public Builder networkPolicyEnabled(Boolean networkPolicyEnabled) {
            this.networkPolicyEnabled = Objects.requireNonNull(networkPolicyEnabled);
            return this;
        }
        public Builder nodePools(List<GetClusterGkeConfigV2NodePool> nodePools) {
            this.nodePools = Objects.requireNonNull(nodePools);
            return this;
        }
        public Builder nodePools(GetClusterGkeConfigV2NodePool... nodePools) {
            return nodePools(List.of(nodePools));
        }
        public Builder privateClusterConfig(GetClusterGkeConfigV2PrivateClusterConfig privateClusterConfig) {
            this.privateClusterConfig = Objects.requireNonNull(privateClusterConfig);
            return this;
        }
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder subnetwork(String subnetwork) {
            this.subnetwork = Objects.requireNonNull(subnetwork);
            return this;
        }
        public Builder zone(String zone) {
            this.zone = Objects.requireNonNull(zone);
            return this;
        }        public GetClusterGkeConfigV2 build() {
            return new GetClusterGkeConfigV2(clusterAddons, clusterIpv4CidrBlock, description, enableKubernetesAlpha, googleCredentialSecret, imported, ipAllocationPolicy, kubernetesVersion, labels, locations, loggingService, maintenanceWindow, masterAuthorizedNetworksConfig, monitoringService, name, network, networkPolicyEnabled, nodePools, privateClusterConfig, projectId, region, subnetwork, zone);
        }
    }
}
