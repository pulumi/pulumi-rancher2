// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.AppArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.AppState;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Rancher v2 app resource. This can be used to deploy apps within Rancher v2 projects.
 * 
 * This resource can also modify Rancher v2 apps in 3 ways:
 * - `Update`: If `description`, `annotations` or `labels` arguments are modified the app will be updated. No new `revision_id` will be generated in Rancher.
 * - `Upgrade`: If `answers`, `catalog_name`, `template_name`, `template_version` or `values_yaml` arguments are modified, the app will be upgraded. A new `revision_id` will be generated in Rancher.
 * - `Rollback`: If `revision_id` argument is provided or modified the app will be rolled back accordingly. A new `revision_id` will be generated in Rancher. It will also generate a non-empty pulumi preview that will require manual .tf file intervention. Use carefully.
 * 
 * Note: In case of multiple resource modifications in a row, `rollback` has preference over `upgrade`.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.App;
 * import com.pulumi.rancher2.AppArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 App
 *         var foo = new App("foo", AppArgs.builder()
 *             .catalogName("<catalog_name>")
 *             .name("foo")
 *             .description("Foo app")
 *             .projectId("<project_id>")
 *             .templateName("<template_name>")
 *             .templateVersion("<template_version>")
 *             .targetNamespace("<namespace_name>")
 *             .answers(Map.ofEntries(
 *                 Map.entry("ingress_host", "test.xip.io"),
 *                 Map.entry("foo", "bar"),
 *                 Map.entry("ingress.annotations.nginx.ingress.kubernetes.io/force-ssl-redirect", true)
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Namespace;
 * import com.pulumi.rancher2.NamespaceArgs;
 * import com.pulumi.rancher2.inputs.NamespaceResourceQuotaArgs;
 * import com.pulumi.rancher2.inputs.NamespaceResourceQuotaLimitArgs;
 * import com.pulumi.rancher2.App;
 * import com.pulumi.rancher2.AppArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 App in a new namespace
 *         var foo = new Namespace("foo", NamespaceArgs.builder()
 *             .name("foo")
 *             .description("Foo namespace")
 *             .projectId("<project_id>")
 *             .resourceQuota(NamespaceResourceQuotaArgs.builder()
 *                 .limit(NamespaceResourceQuotaLimitArgs.builder()
 *                     .limitsCpu("100m")
 *                     .limitsMemory("100Mi")
 *                     .requestsStorage("1Gi")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var fooApp = new App("fooApp", AppArgs.builder()
 *             .catalogName("<catalog_name>")
 *             .name("foo")
 *             .description("Foo app")
 *             .projectId("<project_id>")
 *             .templateName("<template_name>")
 *             .templateVersion("<template_version>")
 *             .targetNamespace(foo.id())
 *             .answers(Map.ofEntries(
 *                 Map.entry("ingress_host", "test.xip.io"),
 *                 Map.entry("foo", "bar"),
 *                 Map.entry("ingress.annotations.nginx.ingress.kubernetes.io/force-ssl-redirect", true)
 *             ))
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Apps can be imported using the app ID in the format `&lt;project_id&gt;:&lt;app_name&gt;`
 * 
 * ```sh
 * $ pulumi import rancher2:index/app:App foo &amp;lt;PROJECT_ID_ID&amp;gt;:&amp;lt;APP_NAME&amp;gt;
 * ```
 * 
 */
@ResourceType(type="rancher2:index/app:App")
public class App extends com.pulumi.resources.CustomResource {
    /**
     * Annotations for App object (map)
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> annotations;

    /**
     * @return Annotations for App object (map)
     * 
     */
    public Output<Map<String,Object>> annotations() {
        return this.annotations;
    }
    /**
     * Answers for the app template. If modified, app will be upgraded (map)
     * 
     */
    @Export(name="answers", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,Object>> answers;

    /**
     * @return Answers for the app template. If modified, app will be upgraded (map)
     * 
     */
    public Output<Optional<Map<String,Object>>> answers() {
        return Codegen.optional(this.answers);
    }
    /**
     * Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
     * * add cluster ID before name, `local:&lt;name&gt;` or `c-XXXXX:&lt;name&gt;`
     * * add project ID before name, `p-XXXXX:&lt;name&gt;`
     * 
     */
    @Export(name="catalogName", refs={String.class}, tree="[0]")
    private Output<String> catalogName;

    /**
     * @return Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
     * * add cluster ID before name, `local:&lt;name&gt;` or `c-XXXXX:&lt;name&gt;`
     * * add project ID before name, `p-XXXXX:&lt;name&gt;`
     * 
     */
    public Output<String> catalogName() {
        return this.catalogName;
    }
    /**
     * Description for the app (string)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Description for the app (string)
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * (Computed) The url of the app template on a catalog (string)
     * 
     */
    @Export(name="externalId", refs={String.class}, tree="[0]")
    private Output<String> externalId;

    /**
     * @return (Computed) The url of the app template on a catalog (string)
     * 
     */
    public Output<String> externalId() {
        return this.externalId;
    }
    /**
     * Force app upgrade (string)
     * 
     */
    @Export(name="forceUpgrade", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceUpgrade;

    /**
     * @return Force app upgrade (string)
     * 
     */
    public Output<Optional<Boolean>> forceUpgrade() {
        return Codegen.optional(this.forceUpgrade);
    }
    /**
     * Labels for App object (map)
     * 
     */
    @Export(name="labels", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> labels;

    /**
     * @return Labels for App object (map)
     * 
     */
    public Output<Map<String,Object>> labels() {
        return this.labels;
    }
    /**
     * The name of the app (string)
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the app (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The project id where the app will be installed (string)
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The project id where the app will be installed (string)
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revision_id` (string)
     * 
     */
    @Export(name="revisionId", refs={String.class}, tree="[0]")
    private Output<String> revisionId;

    /**
     * @return Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revision_id` (string)
     * 
     */
    public Output<String> revisionId() {
        return this.revisionId;
    }
    /**
     * The namespace id where the app will be installed (string)
     * 
     */
    @Export(name="targetNamespace", refs={String.class}, tree="[0]")
    private Output<String> targetNamespace;

    /**
     * @return The namespace id where the app will be installed (string)
     * 
     */
    public Output<String> targetNamespace() {
        return this.targetNamespace;
    }
    /**
     * Template name of the app. If modified, app will be upgraded (string)
     * 
     */
    @Export(name="templateName", refs={String.class}, tree="[0]")
    private Output<String> templateName;

    /**
     * @return Template name of the app. If modified, app will be upgraded (string)
     * 
     */
    public Output<String> templateName() {
        return this.templateName;
    }
    /**
     * Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
     * 
     */
    @Export(name="templateVersion", refs={String.class}, tree="[0]")
    private Output<String> templateVersion;

    /**
     * @return Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
     * 
     */
    public Output<String> templateVersion() {
        return this.templateVersion;
    }
    /**
     * values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
     * 
     */
    @Export(name="valuesYaml", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> valuesYaml;

    /**
     * @return values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
     * 
     */
    public Output<Optional<String>> valuesYaml() {
        return Codegen.optional(this.valuesYaml);
    }
    /**
     * Wait until app is deployed and active. Default: `true` (bool)
     * 
     */
    @Export(name="wait", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> wait;

    /**
     * @return Wait until app is deployed and active. Default: `true` (bool)
     * 
     */
    public Output<Optional<Boolean>> wait_() {
        return Codegen.optional(this.wait);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public App(java.lang.String name) {
        this(name, AppArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public App(java.lang.String name, AppArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public App(java.lang.String name, AppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/app:App", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private App(java.lang.String name, Output<java.lang.String> id, @Nullable AppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/app:App", name, state, makeResourceOptions(options, id), false);
    }

    private static AppArgs makeArgs(AppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AppArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static App get(java.lang.String name, Output<java.lang.String> id, @Nullable AppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new App(name, id, state, options);
    }
}
