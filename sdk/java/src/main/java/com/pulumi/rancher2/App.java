// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.AppArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.AppState;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ## Import
 * 
 * Apps can be imported using the app ID in the format `&lt;project_id&gt;:&lt;app_name&gt;`
 * 
 * ```sh
 *  $ pulumi import rancher2:index/app:App foo &amp;lt;PROJECT_ID_ID&amp;gt;:&amp;lt;APP_NAME&amp;gt;
 * ```
 * 
 */
@ResourceType(type="rancher2:index/app:App")
public class App extends com.pulumi.resources.CustomResource {
    /**
     * Annotations for App object (map)
     * 
     */
    @Export(name="annotations", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> annotations;

    /**
     * @return Annotations for App object (map)
     * 
     */
    public Output<Map<String,Object>> annotations() {
        return this.annotations;
    }
    /**
     * Answers for the app template. If modified, app will be upgraded (map)
     * 
     */
    @Export(name="answers", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> answers;

    /**
     * @return Answers for the app template. If modified, app will be upgraded (map)
     * 
     */
    public Output<Optional<Map<String,Object>>> answers() {
        return Codegen.optional(this.answers);
    }
    /**
     * Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
     * * add cluster ID before name, `local:&lt;name&gt;` or `c-XXXXX:&lt;name&gt;`
     * * add project ID before name, `p-XXXXX:&lt;name&gt;`
     * 
     */
    @Export(name="catalogName", type=String.class, parameters={})
    private Output<String> catalogName;

    /**
     * @return Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
     * * add cluster ID before name, `local:&lt;name&gt;` or `c-XXXXX:&lt;name&gt;`
     * * add project ID before name, `p-XXXXX:&lt;name&gt;`
     * 
     */
    public Output<String> catalogName() {
        return this.catalogName;
    }
    /**
     * Description for the app (string)
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output<String> description;

    /**
     * @return Description for the app (string)
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * (Computed) The url of the app template on a catalog (string)
     * 
     */
    @Export(name="externalId", type=String.class, parameters={})
    private Output<String> externalId;

    /**
     * @return (Computed) The url of the app template on a catalog (string)
     * 
     */
    public Output<String> externalId() {
        return this.externalId;
    }
    /**
     * Force app upgrade (string)
     * 
     */
    @Export(name="forceUpgrade", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceUpgrade;

    /**
     * @return Force app upgrade (string)
     * 
     */
    public Output<Optional<Boolean>> forceUpgrade() {
        return Codegen.optional(this.forceUpgrade);
    }
    /**
     * Labels for App object (map)
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> labels;

    /**
     * @return Labels for App object (map)
     * 
     */
    public Output<Map<String,Object>> labels() {
        return this.labels;
    }
    /**
     * The name of the app (string)
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the app (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The project id where the app will be installed (string)
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return The project id where the app will be installed (string)
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revision_id` (string)
     * 
     */
    @Export(name="revisionId", type=String.class, parameters={})
    private Output<String> revisionId;

    /**
     * @return Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revision_id` (string)
     * 
     */
    public Output<String> revisionId() {
        return this.revisionId;
    }
    /**
     * The namespace id where the app will be installed (string)
     * 
     */
    @Export(name="targetNamespace", type=String.class, parameters={})
    private Output<String> targetNamespace;

    /**
     * @return The namespace id where the app will be installed (string)
     * 
     */
    public Output<String> targetNamespace() {
        return this.targetNamespace;
    }
    /**
     * Template name of the app. If modified, app will be upgraded (string)
     * 
     */
    @Export(name="templateName", type=String.class, parameters={})
    private Output<String> templateName;

    /**
     * @return Template name of the app. If modified, app will be upgraded (string)
     * 
     */
    public Output<String> templateName() {
        return this.templateName;
    }
    /**
     * Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
     * 
     */
    @Export(name="templateVersion", type=String.class, parameters={})
    private Output<String> templateVersion;

    /**
     * @return Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
     * 
     */
    public Output<String> templateVersion() {
        return this.templateVersion;
    }
    /**
     * values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
     * 
     */
    @Export(name="valuesYaml", type=String.class, parameters={})
    private Output</* @Nullable */ String> valuesYaml;

    /**
     * @return values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
     * 
     */
    public Output<Optional<String>> valuesYaml() {
        return Codegen.optional(this.valuesYaml);
    }
    /**
     * Wait until app is deployed and active. Default: `true` (bool)
     * 
     */
    @Export(name="wait", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> wait;

    /**
     * @return Wait until app is deployed and active. Default: `true` (bool)
     * 
     */
    public Output<Optional<Boolean>> wait_() {
        return Codegen.optional(this.wait);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public App(String name) {
        this(name, AppArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public App(String name, AppArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public App(String name, AppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/app:App", name, args == null ? AppArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private App(String name, Output<String> id, @Nullable AppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/app:App", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static App get(String name, Output<String> id, @Nullable AppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new App(name, id, state, options);
    }
}
