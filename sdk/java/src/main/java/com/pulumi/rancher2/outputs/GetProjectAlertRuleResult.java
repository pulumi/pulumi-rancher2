// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.rancher2.outputs.GetProjectAlertRuleMetricRule;
import com.pulumi.rancher2.outputs.GetProjectAlertRulePodRule;
import com.pulumi.rancher2.outputs.GetProjectAlertRuleWorkloadRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectAlertRuleResult {
    /**
     * @return (Computed) The project alert rule annotations (map)
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return (Computed) The project alert rule alert group ID (string)
     * 
     */
    private String groupId;
    /**
     * @return (Computed) The project alert rule group interval seconds. Default: `180` (int)
     * 
     */
    private Integer groupIntervalSeconds;
    /**
     * @return (Computed) The project alert rule group wait seconds. Default: `180` (int)
     * 
     */
    private Integer groupWaitSeconds;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) The project alert rule inherited. Default: `true` (bool)
     * 
     */
    private Boolean inherited;
    /**
     * @return (Computed) The project alert rule labels (map)
     * 
     */
    private @Nullable Map<String,String> labels;
    /**
     * @return (Computed) The project alert rule metric rule. ConflictsWith: `&#34;pod_rule&#34;, &#34;workload_rule&#34;`` (list Maxitems:1)
     * 
     */
    private GetProjectAlertRuleMetricRule metricRule;
    private String name;
    /**
     * @return (Computed) The project alert rule pod rule. ConflictsWith: `&#34;metric_rule&#34;, &#34;workload_rule&#34;`` (list Maxitems:1)
     * 
     */
    private GetProjectAlertRulePodRule podRule;
    private String projectId;
    /**
     * @return (Computed) The project alert rule wait seconds. Default: `3600` (int)
     * 
     */
    private Integer repeatIntervalSeconds;
    /**
     * @return (Computed) The project alert rule severity. Supported values : `&#34;critical&#34; | &#34;info&#34; | &#34;warning&#34;`. Default: `critical` (string)
     * 
     */
    private String severity;
    /**
     * @return (Computed) The project alert rule workload rule. ConflictsWith: `&#34;metric_rule&#34;, &#34;pod_rule&#34;`` (list Maxitems:1)
     * 
     */
    private GetProjectAlertRuleWorkloadRule workloadRule;

    private GetProjectAlertRuleResult() {}
    /**
     * @return (Computed) The project alert rule annotations (map)
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return (Computed) The project alert rule alert group ID (string)
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return (Computed) The project alert rule group interval seconds. Default: `180` (int)
     * 
     */
    public Integer groupIntervalSeconds() {
        return this.groupIntervalSeconds;
    }
    /**
     * @return (Computed) The project alert rule group wait seconds. Default: `180` (int)
     * 
     */
    public Integer groupWaitSeconds() {
        return this.groupWaitSeconds;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) The project alert rule inherited. Default: `true` (bool)
     * 
     */
    public Boolean inherited() {
        return this.inherited;
    }
    /**
     * @return (Computed) The project alert rule labels (map)
     * 
     */
    public Map<String,String> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return (Computed) The project alert rule metric rule. ConflictsWith: `&#34;pod_rule&#34;, &#34;workload_rule&#34;`` (list Maxitems:1)
     * 
     */
    public GetProjectAlertRuleMetricRule metricRule() {
        return this.metricRule;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) The project alert rule pod rule. ConflictsWith: `&#34;metric_rule&#34;, &#34;workload_rule&#34;`` (list Maxitems:1)
     * 
     */
    public GetProjectAlertRulePodRule podRule() {
        return this.podRule;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return (Computed) The project alert rule wait seconds. Default: `3600` (int)
     * 
     */
    public Integer repeatIntervalSeconds() {
        return this.repeatIntervalSeconds;
    }
    /**
     * @return (Computed) The project alert rule severity. Supported values : `&#34;critical&#34; | &#34;info&#34; | &#34;warning&#34;`. Default: `critical` (string)
     * 
     */
    public String severity() {
        return this.severity;
    }
    /**
     * @return (Computed) The project alert rule workload rule. ConflictsWith: `&#34;metric_rule&#34;, &#34;pod_rule&#34;`` (list Maxitems:1)
     * 
     */
    public GetProjectAlertRuleWorkloadRule workloadRule() {
        return this.workloadRule;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectAlertRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,String> annotations;
        private String groupId;
        private Integer groupIntervalSeconds;
        private Integer groupWaitSeconds;
        private String id;
        private Boolean inherited;
        private @Nullable Map<String,String> labels;
        private GetProjectAlertRuleMetricRule metricRule;
        private String name;
        private GetProjectAlertRulePodRule podRule;
        private String projectId;
        private Integer repeatIntervalSeconds;
        private String severity;
        private GetProjectAlertRuleWorkloadRule workloadRule;
        public Builder() {}
        public Builder(GetProjectAlertRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.groupId = defaults.groupId;
    	      this.groupIntervalSeconds = defaults.groupIntervalSeconds;
    	      this.groupWaitSeconds = defaults.groupWaitSeconds;
    	      this.id = defaults.id;
    	      this.inherited = defaults.inherited;
    	      this.labels = defaults.labels;
    	      this.metricRule = defaults.metricRule;
    	      this.name = defaults.name;
    	      this.podRule = defaults.podRule;
    	      this.projectId = defaults.projectId;
    	      this.repeatIntervalSeconds = defaults.repeatIntervalSeconds;
    	      this.severity = defaults.severity;
    	      this.workloadRule = defaults.workloadRule;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(String groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder groupIntervalSeconds(Integer groupIntervalSeconds) {
            if (groupIntervalSeconds == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "groupIntervalSeconds");
            }
            this.groupIntervalSeconds = groupIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder groupWaitSeconds(Integer groupWaitSeconds) {
            if (groupWaitSeconds == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "groupWaitSeconds");
            }
            this.groupWaitSeconds = groupWaitSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inherited(Boolean inherited) {
            if (inherited == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "inherited");
            }
            this.inherited = inherited;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,String> labels) {

            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder metricRule(GetProjectAlertRuleMetricRule metricRule) {
            if (metricRule == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "metricRule");
            }
            this.metricRule = metricRule;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder podRule(GetProjectAlertRulePodRule podRule) {
            if (podRule == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "podRule");
            }
            this.podRule = podRule;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder repeatIntervalSeconds(Integer repeatIntervalSeconds) {
            if (repeatIntervalSeconds == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "repeatIntervalSeconds");
            }
            this.repeatIntervalSeconds = repeatIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder severity(String severity) {
            if (severity == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "severity");
            }
            this.severity = severity;
            return this;
        }
        @CustomType.Setter
        public Builder workloadRule(GetProjectAlertRuleWorkloadRule workloadRule) {
            if (workloadRule == null) {
              throw new MissingRequiredPropertyException("GetProjectAlertRuleResult", "workloadRule");
            }
            this.workloadRule = workloadRule;
            return this;
        }
        public GetProjectAlertRuleResult build() {
            final var _resultValue = new GetProjectAlertRuleResult();
            _resultValue.annotations = annotations;
            _resultValue.groupId = groupId;
            _resultValue.groupIntervalSeconds = groupIntervalSeconds;
            _resultValue.groupWaitSeconds = groupWaitSeconds;
            _resultValue.id = id;
            _resultValue.inherited = inherited;
            _resultValue.labels = labels;
            _resultValue.metricRule = metricRule;
            _resultValue.name = name;
            _resultValue.podRule = podRule;
            _resultValue.projectId = projectId;
            _resultValue.repeatIntervalSeconds = repeatIntervalSeconds;
            _resultValue.severity = severity;
            _resultValue.workloadRule = workloadRule;
            return _resultValue;
        }
    }
}
