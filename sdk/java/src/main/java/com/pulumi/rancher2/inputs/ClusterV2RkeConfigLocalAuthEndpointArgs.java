// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterV2RkeConfigLocalAuthEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterV2RkeConfigLocalAuthEndpointArgs Empty = new ClusterV2RkeConfigLocalAuthEndpointArgs();

    /**
     * CA certs for the authorized cluster endpoint. It is only needed if there is a load balancer in front of the downstream cluster that is using an untrusted certificate. If you have a valid certificate, then nothing needs to be added to the CA Certificates field.
     * 
     */
    @Import(name="caCerts")
    private @Nullable Output<String> caCerts;

    /**
     * @return CA certs for the authorized cluster endpoint. It is only needed if there is a load balancer in front of the downstream cluster that is using an untrusted certificate. If you have a valid certificate, then nothing needs to be added to the CA Certificates field.
     * 
     */
    public Optional<Output<String>> caCerts() {
        return Optional.ofNullable(this.caCerts);
    }

    /**
     * If `enabled` is set to true, nodes will be drained before upgrade.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return If `enabled` is set to true, nodes will be drained before upgrade.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * FQDN for the authorized cluster endpoint. If one is entered, it should point to the downstream cluster.
     * 
     */
    @Import(name="fqdn")
    private @Nullable Output<String> fqdn;

    /**
     * @return FQDN for the authorized cluster endpoint. If one is entered, it should point to the downstream cluster.
     * 
     */
    public Optional<Output<String>> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    private ClusterV2RkeConfigLocalAuthEndpointArgs() {}

    private ClusterV2RkeConfigLocalAuthEndpointArgs(ClusterV2RkeConfigLocalAuthEndpointArgs $) {
        this.caCerts = $.caCerts;
        this.enabled = $.enabled;
        this.fqdn = $.fqdn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterV2RkeConfigLocalAuthEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterV2RkeConfigLocalAuthEndpointArgs $;

        public Builder() {
            $ = new ClusterV2RkeConfigLocalAuthEndpointArgs();
        }

        public Builder(ClusterV2RkeConfigLocalAuthEndpointArgs defaults) {
            $ = new ClusterV2RkeConfigLocalAuthEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCerts CA certs for the authorized cluster endpoint. It is only needed if there is a load balancer in front of the downstream cluster that is using an untrusted certificate. If you have a valid certificate, then nothing needs to be added to the CA Certificates field.
         * 
         * @return builder
         * 
         */
        public Builder caCerts(@Nullable Output<String> caCerts) {
            $.caCerts = caCerts;
            return this;
        }

        /**
         * @param caCerts CA certs for the authorized cluster endpoint. It is only needed if there is a load balancer in front of the downstream cluster that is using an untrusted certificate. If you have a valid certificate, then nothing needs to be added to the CA Certificates field.
         * 
         * @return builder
         * 
         */
        public Builder caCerts(String caCerts) {
            return caCerts(Output.of(caCerts));
        }

        /**
         * @param enabled If `enabled` is set to true, nodes will be drained before upgrade.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled If `enabled` is set to true, nodes will be drained before upgrade.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fqdn FQDN for the authorized cluster endpoint. If one is entered, it should point to the downstream cluster.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(@Nullable Output<String> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        /**
         * @param fqdn FQDN for the authorized cluster endpoint. If one is entered, it should point to the downstream cluster.
         * 
         * @return builder
         * 
         */
        public Builder fqdn(String fqdn) {
            return fqdn(Output.of(fqdn));
        }

        public ClusterV2RkeConfigLocalAuthEndpointArgs build() {
            return $;
        }
    }

}
