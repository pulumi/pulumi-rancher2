// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rancher2.inputs.NodePoolNodeTaintArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodePoolState extends com.pulumi.resources.ResourceArgs {

    public static final NodePoolState Empty = new NodePoolState();

    /**
     * Annotations for Node Pool object (map)
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations for Node Pool object (map)
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The RKE cluster id to use Node Pool (string)
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The RKE cluster id to use Node Pool (string)
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * RKE control plane role for created nodes (bool)
     * 
     */
    @Import(name="controlPlane")
    private @Nullable Output<Boolean> controlPlane;

    /**
     * @return RKE control plane role for created nodes (bool)
     * 
     */
    public Optional<Output<Boolean>> controlPlane() {
        return Optional.ofNullable(this.controlPlane);
    }

    /**
     * Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
     * 
     */
    @Import(name="deleteNotReadyAfterSecs")
    private @Nullable Output<Integer> deleteNotReadyAfterSecs;

    /**
     * @return Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
     * 
     */
    public Optional<Output<Integer>> deleteNotReadyAfterSecs() {
        return Optional.ofNullable(this.deleteNotReadyAfterSecs);
    }

    /**
     * Drain nodes before delete. Default: `false` (bool)
     * 
     */
    @Import(name="drainBeforeDelete")
    private @Nullable Output<Boolean> drainBeforeDelete;

    /**
     * @return Drain nodes before delete. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> drainBeforeDelete() {
        return Optional.ofNullable(this.drainBeforeDelete);
    }

    /**
     * RKE etcd role for created nodes (bool)
     * 
     */
    @Import(name="etcd")
    private @Nullable Output<Boolean> etcd;

    /**
     * @return RKE etcd role for created nodes (bool)
     * 
     */
    public Optional<Output<Boolean>> etcd() {
        return Optional.ofNullable(this.etcd);
    }

    /**
     * The prefix for created nodes of the Node Pool (string)
     * 
     */
    @Import(name="hostnamePrefix")
    private @Nullable Output<String> hostnamePrefix;

    /**
     * @return The prefix for created nodes of the Node Pool (string)
     * 
     */
    public Optional<Output<String>> hostnamePrefix() {
        return Optional.ofNullable(this.hostnamePrefix);
    }

    /**
     * Labels for Node Pool object (map)
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels for Node Pool object (map)
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The name of the Node Pool (string)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Node Pool (string)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Node taints. For Rancher v2.3.3 and above (List)
     * 
     */
    @Import(name="nodeTaints")
    private @Nullable Output<List<NodePoolNodeTaintArgs>> nodeTaints;

    /**
     * @return Node taints. For Rancher v2.3.3 and above (List)
     * 
     */
    public Optional<Output<List<NodePoolNodeTaintArgs>>> nodeTaints() {
        return Optional.ofNullable(this.nodeTaints);
    }

    /**
     * The Node Template ID to use for node creation (string)
     * 
     */
    @Import(name="nodeTemplateId")
    private @Nullable Output<String> nodeTemplateId;

    /**
     * @return The Node Template ID to use for node creation (string)
     * 
     */
    public Optional<Output<String>> nodeTemplateId() {
        return Optional.ofNullable(this.nodeTemplateId);
    }

    /**
     * The number of nodes to create on Node Pool. Default `1`. Only values &gt;= 1 allowed (int)
     * 
     */
    @Import(name="quantity")
    private @Nullable Output<Integer> quantity;

    /**
     * @return The number of nodes to create on Node Pool. Default `1`. Only values &gt;= 1 allowed (int)
     * 
     */
    public Optional<Output<Integer>> quantity() {
        return Optional.ofNullable(this.quantity);
    }

    /**
     * RKE role role for created nodes (bool)
     * 
     */
    @Import(name="worker")
    private @Nullable Output<Boolean> worker;

    /**
     * @return RKE role role for created nodes (bool)
     * 
     */
    public Optional<Output<Boolean>> worker() {
        return Optional.ofNullable(this.worker);
    }

    private NodePoolState() {}

    private NodePoolState(NodePoolState $) {
        this.annotations = $.annotations;
        this.clusterId = $.clusterId;
        this.controlPlane = $.controlPlane;
        this.deleteNotReadyAfterSecs = $.deleteNotReadyAfterSecs;
        this.drainBeforeDelete = $.drainBeforeDelete;
        this.etcd = $.etcd;
        this.hostnamePrefix = $.hostnamePrefix;
        this.labels = $.labels;
        this.name = $.name;
        this.nodeTaints = $.nodeTaints;
        this.nodeTemplateId = $.nodeTemplateId;
        this.quantity = $.quantity;
        this.worker = $.worker;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodePoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodePoolState $;

        public Builder() {
            $ = new NodePoolState();
        }

        public Builder(NodePoolState defaults) {
            $ = new NodePoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations for Node Pool object (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations for Node Pool object (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param clusterId The RKE cluster id to use Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The RKE cluster id to use Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param controlPlane RKE control plane role for created nodes (bool)
         * 
         * @return builder
         * 
         */
        public Builder controlPlane(@Nullable Output<Boolean> controlPlane) {
            $.controlPlane = controlPlane;
            return this;
        }

        /**
         * @param controlPlane RKE control plane role for created nodes (bool)
         * 
         * @return builder
         * 
         */
        public Builder controlPlane(Boolean controlPlane) {
            return controlPlane(Output.of(controlPlane));
        }

        /**
         * @param deleteNotReadyAfterSecs Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
         * 
         * @return builder
         * 
         */
        public Builder deleteNotReadyAfterSecs(@Nullable Output<Integer> deleteNotReadyAfterSecs) {
            $.deleteNotReadyAfterSecs = deleteNotReadyAfterSecs;
            return this;
        }

        /**
         * @param deleteNotReadyAfterSecs Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
         * 
         * @return builder
         * 
         */
        public Builder deleteNotReadyAfterSecs(Integer deleteNotReadyAfterSecs) {
            return deleteNotReadyAfterSecs(Output.of(deleteNotReadyAfterSecs));
        }

        /**
         * @param drainBeforeDelete Drain nodes before delete. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder drainBeforeDelete(@Nullable Output<Boolean> drainBeforeDelete) {
            $.drainBeforeDelete = drainBeforeDelete;
            return this;
        }

        /**
         * @param drainBeforeDelete Drain nodes before delete. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder drainBeforeDelete(Boolean drainBeforeDelete) {
            return drainBeforeDelete(Output.of(drainBeforeDelete));
        }

        /**
         * @param etcd RKE etcd role for created nodes (bool)
         * 
         * @return builder
         * 
         */
        public Builder etcd(@Nullable Output<Boolean> etcd) {
            $.etcd = etcd;
            return this;
        }

        /**
         * @param etcd RKE etcd role for created nodes (bool)
         * 
         * @return builder
         * 
         */
        public Builder etcd(Boolean etcd) {
            return etcd(Output.of(etcd));
        }

        /**
         * @param hostnamePrefix The prefix for created nodes of the Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder hostnamePrefix(@Nullable Output<String> hostnamePrefix) {
            $.hostnamePrefix = hostnamePrefix;
            return this;
        }

        /**
         * @param hostnamePrefix The prefix for created nodes of the Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder hostnamePrefix(String hostnamePrefix) {
            return hostnamePrefix(Output.of(hostnamePrefix));
        }

        /**
         * @param labels Labels for Node Pool object (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for Node Pool object (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name The name of the Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Node Pool (string)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeTaints Node taints. For Rancher v2.3.3 and above (List)
         * 
         * @return builder
         * 
         */
        public Builder nodeTaints(@Nullable Output<List<NodePoolNodeTaintArgs>> nodeTaints) {
            $.nodeTaints = nodeTaints;
            return this;
        }

        /**
         * @param nodeTaints Node taints. For Rancher v2.3.3 and above (List)
         * 
         * @return builder
         * 
         */
        public Builder nodeTaints(List<NodePoolNodeTaintArgs> nodeTaints) {
            return nodeTaints(Output.of(nodeTaints));
        }

        /**
         * @param nodeTaints Node taints. For Rancher v2.3.3 and above (List)
         * 
         * @return builder
         * 
         */
        public Builder nodeTaints(NodePoolNodeTaintArgs... nodeTaints) {
            return nodeTaints(List.of(nodeTaints));
        }

        /**
         * @param nodeTemplateId The Node Template ID to use for node creation (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeTemplateId(@Nullable Output<String> nodeTemplateId) {
            $.nodeTemplateId = nodeTemplateId;
            return this;
        }

        /**
         * @param nodeTemplateId The Node Template ID to use for node creation (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeTemplateId(String nodeTemplateId) {
            return nodeTemplateId(Output.of(nodeTemplateId));
        }

        /**
         * @param quantity The number of nodes to create on Node Pool. Default `1`. Only values &gt;= 1 allowed (int)
         * 
         * @return builder
         * 
         */
        public Builder quantity(@Nullable Output<Integer> quantity) {
            $.quantity = quantity;
            return this;
        }

        /**
         * @param quantity The number of nodes to create on Node Pool. Default `1`. Only values &gt;= 1 allowed (int)
         * 
         * @return builder
         * 
         */
        public Builder quantity(Integer quantity) {
            return quantity(Output.of(quantity));
        }

        /**
         * @param worker RKE role role for created nodes (bool)
         * 
         * @return builder
         * 
         */
        public Builder worker(@Nullable Output<Boolean> worker) {
            $.worker = worker;
            return this;
        }

        /**
         * @param worker RKE role role for created nodes (bool)
         * 
         * @return builder
         * 
         */
        public Builder worker(Boolean worker) {
            return worker(Output.of(worker));
        }

        public NodePoolState build() {
            return $;
        }
    }

}
