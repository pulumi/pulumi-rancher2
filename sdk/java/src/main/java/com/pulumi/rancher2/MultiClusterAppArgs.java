// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rancher2.inputs.MultiClusterAppAnswerArgs;
import com.pulumi.rancher2.inputs.MultiClusterAppMemberArgs;
import com.pulumi.rancher2.inputs.MultiClusterAppTargetArgs;
import com.pulumi.rancher2.inputs.MultiClusterAppUpgradeStrategyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MultiClusterAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final MultiClusterAppArgs Empty = new MultiClusterAppArgs();

    /**
     * Annotations for multi cluster app object (map)
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,Object>> annotations;

    /**
     * @return Annotations for multi cluster app object (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The multi cluster app answers (list)
     * 
     */
    @Import(name="answers")
    private @Nullable Output<List<MultiClusterAppAnswerArgs>> answers;

    /**
     * @return The multi cluster app answers (list)
     * 
     */
    public Optional<Output<List<MultiClusterAppAnswerArgs>>> answers() {
        return Optional.ofNullable(this.answers);
    }

    /**
     * The multi cluster app catalog name (string)
     * 
     */
    @Import(name="catalogName", required=true)
    private Output<String> catalogName;

    /**
     * @return The multi cluster app catalog name (string)
     * 
     */
    public Output<String> catalogName() {
        return this.catalogName;
    }

    /**
     * Labels for multi cluster app object (map)
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,Object>> labels;

    /**
     * @return Labels for multi cluster app object (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The multi cluster app answers (list)
     * 
     */
    @Import(name="members")
    private @Nullable Output<List<MultiClusterAppMemberArgs>> members;

    /**
     * @return The multi cluster app answers (list)
     * 
     */
    public Optional<Output<List<MultiClusterAppMemberArgs>>> members() {
        return Optional.ofNullable(this.members);
    }

    /**
     * The multi cluster app name (string)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The multi cluster app name (string)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The multi cluster app revision history limit. Default `10` (int)
     * 
     */
    @Import(name="revisionHistoryLimit")
    private @Nullable Output<Integer> revisionHistoryLimit;

    /**
     * @return The multi cluster app revision history limit. Default `10` (int)
     * 
     */
    public Optional<Output<Integer>> revisionHistoryLimit() {
        return Optional.ofNullable(this.revisionHistoryLimit);
    }

    /**
     * Current revision id for the multi cluster app (string)
     * 
     */
    @Import(name="revisionId")
    private @Nullable Output<String> revisionId;

    /**
     * @return Current revision id for the multi cluster app (string)
     * 
     */
    public Optional<Output<String>> revisionId() {
        return Optional.ofNullable(this.revisionId);
    }

    /**
     * The multi cluster app roles (list)
     * 
     */
    @Import(name="roles", required=true)
    private Output<List<String>> roles;

    /**
     * @return The multi cluster app roles (list)
     * 
     */
    public Output<List<String>> roles() {
        return this.roles;
    }

    /**
     * The multi cluster app target projects (list)
     * 
     */
    @Import(name="targets", required=true)
    private Output<List<MultiClusterAppTargetArgs>> targets;

    /**
     * @return The multi cluster app target projects (list)
     * 
     */
    public Output<List<MultiClusterAppTargetArgs>> targets() {
        return this.targets;
    }

    /**
     * The multi cluster app template name (string)
     * 
     */
    @Import(name="templateName", required=true)
    private Output<String> templateName;

    /**
     * @return The multi cluster app template name (string)
     * 
     */
    public Output<String> templateName() {
        return this.templateName;
    }

    /**
     * The multi cluster app template version. Default: `latest` (string)
     * 
     */
    @Import(name="templateVersion")
    private @Nullable Output<String> templateVersion;

    /**
     * @return The multi cluster app template version. Default: `latest` (string)
     * 
     */
    public Optional<Output<String>> templateVersion() {
        return Optional.ofNullable(this.templateVersion);
    }

    /**
     * The multi cluster app upgrade strategy (list MaxItems:1)
     * 
     */
    @Import(name="upgradeStrategy")
    private @Nullable Output<MultiClusterAppUpgradeStrategyArgs> upgradeStrategy;

    /**
     * @return The multi cluster app upgrade strategy (list MaxItems:1)
     * 
     */
    public Optional<Output<MultiClusterAppUpgradeStrategyArgs>> upgradeStrategy() {
        return Optional.ofNullable(this.upgradeStrategy);
    }

    /**
     * Wait until the multi cluster app is active. Default `true` (bool)
     * 
     */
    @Import(name="wait")
    private @Nullable Output<Boolean> wait;

    /**
     * @return Wait until the multi cluster app is active. Default `true` (bool)
     * 
     */
    public Optional<Output<Boolean>> wait_() {
        return Optional.ofNullable(this.wait);
    }

    private MultiClusterAppArgs() {}

    private MultiClusterAppArgs(MultiClusterAppArgs $) {
        this.annotations = $.annotations;
        this.answers = $.answers;
        this.catalogName = $.catalogName;
        this.labels = $.labels;
        this.members = $.members;
        this.name = $.name;
        this.revisionHistoryLimit = $.revisionHistoryLimit;
        this.revisionId = $.revisionId;
        this.roles = $.roles;
        this.targets = $.targets;
        this.templateName = $.templateName;
        this.templateVersion = $.templateVersion;
        this.upgradeStrategy = $.upgradeStrategy;
        this.wait = $.wait;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MultiClusterAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MultiClusterAppArgs $;

        public Builder() {
            $ = new MultiClusterAppArgs();
        }

        public Builder(MultiClusterAppArgs defaults) {
            $ = new MultiClusterAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations for multi cluster app object (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations for multi cluster app object (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,Object> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param answers The multi cluster app answers (list)
         * 
         * @return builder
         * 
         */
        public Builder answers(@Nullable Output<List<MultiClusterAppAnswerArgs>> answers) {
            $.answers = answers;
            return this;
        }

        /**
         * @param answers The multi cluster app answers (list)
         * 
         * @return builder
         * 
         */
        public Builder answers(List<MultiClusterAppAnswerArgs> answers) {
            return answers(Output.of(answers));
        }

        /**
         * @param answers The multi cluster app answers (list)
         * 
         * @return builder
         * 
         */
        public Builder answers(MultiClusterAppAnswerArgs... answers) {
            return answers(List.of(answers));
        }

        /**
         * @param catalogName The multi cluster app catalog name (string)
         * 
         * @return builder
         * 
         */
        public Builder catalogName(Output<String> catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        /**
         * @param catalogName The multi cluster app catalog name (string)
         * 
         * @return builder
         * 
         */
        public Builder catalogName(String catalogName) {
            return catalogName(Output.of(catalogName));
        }

        /**
         * @param labels Labels for multi cluster app object (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,Object>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for multi cluster app object (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,Object> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param members The multi cluster app answers (list)
         * 
         * @return builder
         * 
         */
        public Builder members(@Nullable Output<List<MultiClusterAppMemberArgs>> members) {
            $.members = members;
            return this;
        }

        /**
         * @param members The multi cluster app answers (list)
         * 
         * @return builder
         * 
         */
        public Builder members(List<MultiClusterAppMemberArgs> members) {
            return members(Output.of(members));
        }

        /**
         * @param members The multi cluster app answers (list)
         * 
         * @return builder
         * 
         */
        public Builder members(MultiClusterAppMemberArgs... members) {
            return members(List.of(members));
        }

        /**
         * @param name The multi cluster app name (string)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The multi cluster app name (string)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param revisionHistoryLimit The multi cluster app revision history limit. Default `10` (int)
         * 
         * @return builder
         * 
         */
        public Builder revisionHistoryLimit(@Nullable Output<Integer> revisionHistoryLimit) {
            $.revisionHistoryLimit = revisionHistoryLimit;
            return this;
        }

        /**
         * @param revisionHistoryLimit The multi cluster app revision history limit. Default `10` (int)
         * 
         * @return builder
         * 
         */
        public Builder revisionHistoryLimit(Integer revisionHistoryLimit) {
            return revisionHistoryLimit(Output.of(revisionHistoryLimit));
        }

        /**
         * @param revisionId Current revision id for the multi cluster app (string)
         * 
         * @return builder
         * 
         */
        public Builder revisionId(@Nullable Output<String> revisionId) {
            $.revisionId = revisionId;
            return this;
        }

        /**
         * @param revisionId Current revision id for the multi cluster app (string)
         * 
         * @return builder
         * 
         */
        public Builder revisionId(String revisionId) {
            return revisionId(Output.of(revisionId));
        }

        /**
         * @param roles The multi cluster app roles (list)
         * 
         * @return builder
         * 
         */
        public Builder roles(Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles The multi cluster app roles (list)
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles The multi cluster app roles (list)
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param targets The multi cluster app target projects (list)
         * 
         * @return builder
         * 
         */
        public Builder targets(Output<List<MultiClusterAppTargetArgs>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets The multi cluster app target projects (list)
         * 
         * @return builder
         * 
         */
        public Builder targets(List<MultiClusterAppTargetArgs> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets The multi cluster app target projects (list)
         * 
         * @return builder
         * 
         */
        public Builder targets(MultiClusterAppTargetArgs... targets) {
            return targets(List.of(targets));
        }

        /**
         * @param templateName The multi cluster app template name (string)
         * 
         * @return builder
         * 
         */
        public Builder templateName(Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName The multi cluster app template name (string)
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param templateVersion The multi cluster app template version. Default: `latest` (string)
         * 
         * @return builder
         * 
         */
        public Builder templateVersion(@Nullable Output<String> templateVersion) {
            $.templateVersion = templateVersion;
            return this;
        }

        /**
         * @param templateVersion The multi cluster app template version. Default: `latest` (string)
         * 
         * @return builder
         * 
         */
        public Builder templateVersion(String templateVersion) {
            return templateVersion(Output.of(templateVersion));
        }

        /**
         * @param upgradeStrategy The multi cluster app upgrade strategy (list MaxItems:1)
         * 
         * @return builder
         * 
         */
        public Builder upgradeStrategy(@Nullable Output<MultiClusterAppUpgradeStrategyArgs> upgradeStrategy) {
            $.upgradeStrategy = upgradeStrategy;
            return this;
        }

        /**
         * @param upgradeStrategy The multi cluster app upgrade strategy (list MaxItems:1)
         * 
         * @return builder
         * 
         */
        public Builder upgradeStrategy(MultiClusterAppUpgradeStrategyArgs upgradeStrategy) {
            return upgradeStrategy(Output.of(upgradeStrategy));
        }

        /**
         * @param wait Wait until the multi cluster app is active. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder wait_(@Nullable Output<Boolean> wait) {
            $.wait = wait;
            return this;
        }

        /**
         * @param wait Wait until the multi cluster app is active. Default `true` (bool)
         * 
         * @return builder
         * 
         */
        public Builder wait_(Boolean wait) {
            return wait_(Output.of(wait));
        }

        public MultiClusterAppArgs build() {
            $.catalogName = Objects.requireNonNull($.catalogName, "expected parameter 'catalogName' to be non-null");
            $.roles = Objects.requireNonNull($.roles, "expected parameter 'roles' to be non-null");
            $.targets = Objects.requireNonNull($.targets, "expected parameter 'targets' to be non-null");
            $.templateName = Objects.requireNonNull($.templateName, "expected parameter 'templateName' to be non-null");
            return $;
        }
    }

}
