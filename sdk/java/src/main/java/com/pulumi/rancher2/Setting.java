// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.SettingArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.SettingState;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Provides a Rancher v2 Setting resource. This can be used to create settings for Rancher v2 environments and retrieve their information.
 * 
 * On create, if setting already exists, provider will import it and update its value.
 * 
 * On destroy, if setting is a system setting like `server-url`, provider&#39;ll not delete it from Rancher, it&#39;ll just update setting value to default and remove it from tfstate.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Setting;
 * import com.pulumi.rancher2.SettingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foo = new Setting(&#34;foo&#34;, SettingArgs.builder()        
 *             .value(&#34;&lt;VALUE&gt;&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Setting can be imported using the Rancher setting ID.
 * 
 * ```sh
 *  $ pulumi import rancher2:index/setting:Setting foo &amp;lt;setting_id&amp;gt;
 * ```
 * 
 */
@ResourceType(type="rancher2:index/setting:Setting")
public class Setting extends com.pulumi.resources.CustomResource {
    /**
     * Annotations for setting object (map)
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> annotations;

    /**
     * @return Annotations for setting object (map)
     * 
     */
    public Output<Map<String,Object>> annotations() {
        return this.annotations;
    }
    /**
     * Labels for setting object (map)
     * 
     */
    @Export(name="labels", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> labels;

    /**
     * @return Labels for setting object (map)
     * 
     */
    public Output<Map<String,Object>> labels() {
        return this.labels;
    }
    /**
     * The name of the setting (string)
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the setting (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The value of the setting (string)
     * 
     */
    @Export(name="value", refs={String.class}, tree="[0]")
    private Output<String> value;

    /**
     * @return The value of the setting (string)
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Setting(String name) {
        this(name, SettingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Setting(String name, SettingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Setting(String name, SettingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/setting:Setting", name, args == null ? SettingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Setting(String name, Output<String> id, @Nullable SettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/setting:Setting", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Setting get(String name, Output<String> id, @Nullable SettingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Setting(name, id, state, options);
    }
}
