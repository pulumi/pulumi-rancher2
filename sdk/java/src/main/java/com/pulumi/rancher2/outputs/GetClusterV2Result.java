// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.rancher2.outputs.GetClusterV2AgentEnvVar;
import com.pulumi.rancher2.outputs.GetClusterV2ClusterRegistrationToken;
import com.pulumi.rancher2.outputs.GetClusterV2RkeConfig;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterV2Result {
    /**
     * @return (Computed) Optional Agent Env Vars for Rancher agent (list)
     * 
     */
    private List<GetClusterV2AgentEnvVar> agentEnvVars;
    private Map<String,String> annotations;
    /**
     * @return (Computed) Cluster V2 cloud credential secret name (string)
     * 
     */
    private String cloudCredentialSecretName;
    /**
     * @return (Computed/Sensitive) Cluster Registration Token generated for the cluster v2 (list maxitems:1)
     * 
     */
    private GetClusterV2ClusterRegistrationToken clusterRegistrationToken;
    /**
     * @return (Computed) Cluster v1 id for cluster v2 (string)
     * 
     */
    private String clusterV1Id;
    /**
     * @return (Computed) Cluster V2 default cluster role for project members (string)
     * 
     */
    private String defaultClusterRoleForProjectMembers;
    /**
     * @return (Computed) Cluster V2 default pod security admission configuration template name (string)
     * 
     */
    private String defaultPodSecurityAdmissionConfigurationTemplateName;
    /**
     * @return (Computed) Cluster V2 default pod security policy template name (string)
     * 
     */
    private String defaultPodSecurityPolicyTemplateName;
    /**
     * @return (Computed) Enable k8s network policy at Cluster V2 (bool)
     * 
     */
    private Boolean enableNetworkPolicy;
    private @Nullable String fleetNamespace;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed/Sensitive) Kube Config generated for the cluster v2 (string)
     * 
     */
    private String kubeConfig;
    /**
     * @return (Computed) The kubernetes version of the Cluster v2 (list maxitems:1)
     * 
     */
    private String kubernetesVersion;
    private Map<String,String> labels;
    private String name;
    /**
     * @return (Computed) Cluster v2 k8s resource version (string)
     * 
     */
    private String resourceVersion;
    /**
     * @return (Computed) The RKE configuration for `k3s` and `rke2` Clusters v2. (list maxitems:1)
     * 
     */
    private GetClusterV2RkeConfig rkeConfig;

    private GetClusterV2Result() {}
    /**
     * @return (Computed) Optional Agent Env Vars for Rancher agent (list)
     * 
     */
    public List<GetClusterV2AgentEnvVar> agentEnvVars() {
        return this.agentEnvVars;
    }
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return (Computed) Cluster V2 cloud credential secret name (string)
     * 
     */
    public String cloudCredentialSecretName() {
        return this.cloudCredentialSecretName;
    }
    /**
     * @return (Computed/Sensitive) Cluster Registration Token generated for the cluster v2 (list maxitems:1)
     * 
     */
    public GetClusterV2ClusterRegistrationToken clusterRegistrationToken() {
        return this.clusterRegistrationToken;
    }
    /**
     * @return (Computed) Cluster v1 id for cluster v2 (string)
     * 
     */
    public String clusterV1Id() {
        return this.clusterV1Id;
    }
    /**
     * @return (Computed) Cluster V2 default cluster role for project members (string)
     * 
     */
    public String defaultClusterRoleForProjectMembers() {
        return this.defaultClusterRoleForProjectMembers;
    }
    /**
     * @return (Computed) Cluster V2 default pod security admission configuration template name (string)
     * 
     */
    public String defaultPodSecurityAdmissionConfigurationTemplateName() {
        return this.defaultPodSecurityAdmissionConfigurationTemplateName;
    }
    /**
     * @return (Computed) Cluster V2 default pod security policy template name (string)
     * 
     */
    public String defaultPodSecurityPolicyTemplateName() {
        return this.defaultPodSecurityPolicyTemplateName;
    }
    /**
     * @return (Computed) Enable k8s network policy at Cluster V2 (bool)
     * 
     */
    public Boolean enableNetworkPolicy() {
        return this.enableNetworkPolicy;
    }
    public Optional<String> fleetNamespace() {
        return Optional.ofNullable(this.fleetNamespace);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed/Sensitive) Kube Config generated for the cluster v2 (string)
     * 
     */
    public String kubeConfig() {
        return this.kubeConfig;
    }
    /**
     * @return (Computed) The kubernetes version of the Cluster v2 (list maxitems:1)
     * 
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) Cluster v2 k8s resource version (string)
     * 
     */
    public String resourceVersion() {
        return this.resourceVersion;
    }
    /**
     * @return (Computed) The RKE configuration for `k3s` and `rke2` Clusters v2. (list maxitems:1)
     * 
     */
    public GetClusterV2RkeConfig rkeConfig() {
        return this.rkeConfig;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetClusterV2AgentEnvVar> agentEnvVars;
        private Map<String,String> annotations;
        private String cloudCredentialSecretName;
        private GetClusterV2ClusterRegistrationToken clusterRegistrationToken;
        private String clusterV1Id;
        private String defaultClusterRoleForProjectMembers;
        private String defaultPodSecurityAdmissionConfigurationTemplateName;
        private String defaultPodSecurityPolicyTemplateName;
        private Boolean enableNetworkPolicy;
        private @Nullable String fleetNamespace;
        private String id;
        private String kubeConfig;
        private String kubernetesVersion;
        private Map<String,String> labels;
        private String name;
        private String resourceVersion;
        private GetClusterV2RkeConfig rkeConfig;
        public Builder() {}
        public Builder(GetClusterV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentEnvVars = defaults.agentEnvVars;
    	      this.annotations = defaults.annotations;
    	      this.cloudCredentialSecretName = defaults.cloudCredentialSecretName;
    	      this.clusterRegistrationToken = defaults.clusterRegistrationToken;
    	      this.clusterV1Id = defaults.clusterV1Id;
    	      this.defaultClusterRoleForProjectMembers = defaults.defaultClusterRoleForProjectMembers;
    	      this.defaultPodSecurityAdmissionConfigurationTemplateName = defaults.defaultPodSecurityAdmissionConfigurationTemplateName;
    	      this.defaultPodSecurityPolicyTemplateName = defaults.defaultPodSecurityPolicyTemplateName;
    	      this.enableNetworkPolicy = defaults.enableNetworkPolicy;
    	      this.fleetNamespace = defaults.fleetNamespace;
    	      this.id = defaults.id;
    	      this.kubeConfig = defaults.kubeConfig;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.resourceVersion = defaults.resourceVersion;
    	      this.rkeConfig = defaults.rkeConfig;
        }

        @CustomType.Setter
        public Builder agentEnvVars(List<GetClusterV2AgentEnvVar> agentEnvVars) {
            if (agentEnvVars == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "agentEnvVars");
            }
            this.agentEnvVars = agentEnvVars;
            return this;
        }
        public Builder agentEnvVars(GetClusterV2AgentEnvVar... agentEnvVars) {
            return agentEnvVars(List.of(agentEnvVars));
        }
        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder cloudCredentialSecretName(String cloudCredentialSecretName) {
            if (cloudCredentialSecretName == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "cloudCredentialSecretName");
            }
            this.cloudCredentialSecretName = cloudCredentialSecretName;
            return this;
        }
        @CustomType.Setter
        public Builder clusterRegistrationToken(GetClusterV2ClusterRegistrationToken clusterRegistrationToken) {
            if (clusterRegistrationToken == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "clusterRegistrationToken");
            }
            this.clusterRegistrationToken = clusterRegistrationToken;
            return this;
        }
        @CustomType.Setter
        public Builder clusterV1Id(String clusterV1Id) {
            if (clusterV1Id == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "clusterV1Id");
            }
            this.clusterV1Id = clusterV1Id;
            return this;
        }
        @CustomType.Setter
        public Builder defaultClusterRoleForProjectMembers(String defaultClusterRoleForProjectMembers) {
            if (defaultClusterRoleForProjectMembers == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "defaultClusterRoleForProjectMembers");
            }
            this.defaultClusterRoleForProjectMembers = defaultClusterRoleForProjectMembers;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPodSecurityAdmissionConfigurationTemplateName(String defaultPodSecurityAdmissionConfigurationTemplateName) {
            if (defaultPodSecurityAdmissionConfigurationTemplateName == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "defaultPodSecurityAdmissionConfigurationTemplateName");
            }
            this.defaultPodSecurityAdmissionConfigurationTemplateName = defaultPodSecurityAdmissionConfigurationTemplateName;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPodSecurityPolicyTemplateName(String defaultPodSecurityPolicyTemplateName) {
            if (defaultPodSecurityPolicyTemplateName == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "defaultPodSecurityPolicyTemplateName");
            }
            this.defaultPodSecurityPolicyTemplateName = defaultPodSecurityPolicyTemplateName;
            return this;
        }
        @CustomType.Setter
        public Builder enableNetworkPolicy(Boolean enableNetworkPolicy) {
            if (enableNetworkPolicy == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "enableNetworkPolicy");
            }
            this.enableNetworkPolicy = enableNetworkPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder fleetNamespace(@Nullable String fleetNamespace) {

            this.fleetNamespace = fleetNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kubeConfig(String kubeConfig) {
            if (kubeConfig == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "kubeConfig");
            }
            this.kubeConfig = kubeConfig;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            if (kubernetesVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "kubernetesVersion");
            }
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder resourceVersion(String resourceVersion) {
            if (resourceVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "resourceVersion");
            }
            this.resourceVersion = resourceVersion;
            return this;
        }
        @CustomType.Setter
        public Builder rkeConfig(GetClusterV2RkeConfig rkeConfig) {
            if (rkeConfig == null) {
              throw new MissingRequiredPropertyException("GetClusterV2Result", "rkeConfig");
            }
            this.rkeConfig = rkeConfig;
            return this;
        }
        public GetClusterV2Result build() {
            final var _resultValue = new GetClusterV2Result();
            _resultValue.agentEnvVars = agentEnvVars;
            _resultValue.annotations = annotations;
            _resultValue.cloudCredentialSecretName = cloudCredentialSecretName;
            _resultValue.clusterRegistrationToken = clusterRegistrationToken;
            _resultValue.clusterV1Id = clusterV1Id;
            _resultValue.defaultClusterRoleForProjectMembers = defaultClusterRoleForProjectMembers;
            _resultValue.defaultPodSecurityAdmissionConfigurationTemplateName = defaultPodSecurityAdmissionConfigurationTemplateName;
            _resultValue.defaultPodSecurityPolicyTemplateName = defaultPodSecurityPolicyTemplateName;
            _resultValue.enableNetworkPolicy = enableNetworkPolicy;
            _resultValue.fleetNamespace = fleetNamespace;
            _resultValue.id = id;
            _resultValue.kubeConfig = kubeConfig;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.resourceVersion = resourceVersion;
            _resultValue.rkeConfig = rkeConfig;
            return _resultValue;
        }
    }
}
