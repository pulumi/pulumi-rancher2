// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions {
    /**
     * @return Drain options delete empty dir data. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean deleteEmptyDirData;
    /**
     * @return Drain options disable eviction. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean disableEviction;
    /**
     * @return Drain options enabled? Default `true` (bool)
     * 
     */
    private final @Nullable Boolean enabled;
    /**
     * @return Drain options force. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean force;
    /**
     * @return Drain options grace period (int)
     * 
     */
    private final @Nullable Integer gracePeriod;
    /**
     * @return Drain options ignore daemon sets. Default `true` (bool)
     * 
     */
    private final @Nullable Boolean ignoreDaemonSets;
    /**
     * @return Drain options ignore errors. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean ignoreErrors;
    /**
     * @return Drain options skip wait for delete timeout seconds (int)
     * 
     */
    private final @Nullable Integer skipWaitForDeleteTimeoutSeconds;
    /**
     * @return Drain options timeout (int)
     * 
     */
    private final @Nullable Integer timeout;

    @CustomType.Constructor
    private ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions(
        @CustomType.Parameter("deleteEmptyDirData") @Nullable Boolean deleteEmptyDirData,
        @CustomType.Parameter("disableEviction") @Nullable Boolean disableEviction,
        @CustomType.Parameter("enabled") @Nullable Boolean enabled,
        @CustomType.Parameter("force") @Nullable Boolean force,
        @CustomType.Parameter("gracePeriod") @Nullable Integer gracePeriod,
        @CustomType.Parameter("ignoreDaemonSets") @Nullable Boolean ignoreDaemonSets,
        @CustomType.Parameter("ignoreErrors") @Nullable Boolean ignoreErrors,
        @CustomType.Parameter("skipWaitForDeleteTimeoutSeconds") @Nullable Integer skipWaitForDeleteTimeoutSeconds,
        @CustomType.Parameter("timeout") @Nullable Integer timeout) {
        this.deleteEmptyDirData = deleteEmptyDirData;
        this.disableEviction = disableEviction;
        this.enabled = enabled;
        this.force = force;
        this.gracePeriod = gracePeriod;
        this.ignoreDaemonSets = ignoreDaemonSets;
        this.ignoreErrors = ignoreErrors;
        this.skipWaitForDeleteTimeoutSeconds = skipWaitForDeleteTimeoutSeconds;
        this.timeout = timeout;
    }

    /**
     * @return Drain options delete empty dir data. Default `false` (bool)
     * 
     */
    public Optional<Boolean> deleteEmptyDirData() {
        return Optional.ofNullable(this.deleteEmptyDirData);
    }
    /**
     * @return Drain options disable eviction. Default `false` (bool)
     * 
     */
    public Optional<Boolean> disableEviction() {
        return Optional.ofNullable(this.disableEviction);
    }
    /**
     * @return Drain options enabled? Default `true` (bool)
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Drain options force. Default `false` (bool)
     * 
     */
    public Optional<Boolean> force() {
        return Optional.ofNullable(this.force);
    }
    /**
     * @return Drain options grace period (int)
     * 
     */
    public Optional<Integer> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }
    /**
     * @return Drain options ignore daemon sets. Default `true` (bool)
     * 
     */
    public Optional<Boolean> ignoreDaemonSets() {
        return Optional.ofNullable(this.ignoreDaemonSets);
    }
    /**
     * @return Drain options ignore errors. Default `false` (bool)
     * 
     */
    public Optional<Boolean> ignoreErrors() {
        return Optional.ofNullable(this.ignoreErrors);
    }
    /**
     * @return Drain options skip wait for delete timeout seconds (int)
     * 
     */
    public Optional<Integer> skipWaitForDeleteTimeoutSeconds() {
        return Optional.ofNullable(this.skipWaitForDeleteTimeoutSeconds);
    }
    /**
     * @return Drain options timeout (int)
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean deleteEmptyDirData;
        private @Nullable Boolean disableEviction;
        private @Nullable Boolean enabled;
        private @Nullable Boolean force;
        private @Nullable Integer gracePeriod;
        private @Nullable Boolean ignoreDaemonSets;
        private @Nullable Boolean ignoreErrors;
        private @Nullable Integer skipWaitForDeleteTimeoutSeconds;
        private @Nullable Integer timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteEmptyDirData = defaults.deleteEmptyDirData;
    	      this.disableEviction = defaults.disableEviction;
    	      this.enabled = defaults.enabled;
    	      this.force = defaults.force;
    	      this.gracePeriod = defaults.gracePeriod;
    	      this.ignoreDaemonSets = defaults.ignoreDaemonSets;
    	      this.ignoreErrors = defaults.ignoreErrors;
    	      this.skipWaitForDeleteTimeoutSeconds = defaults.skipWaitForDeleteTimeoutSeconds;
    	      this.timeout = defaults.timeout;
        }

        public Builder deleteEmptyDirData(@Nullable Boolean deleteEmptyDirData) {
            this.deleteEmptyDirData = deleteEmptyDirData;
            return this;
        }
        public Builder disableEviction(@Nullable Boolean disableEviction) {
            this.disableEviction = disableEviction;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder force(@Nullable Boolean force) {
            this.force = force;
            return this;
        }
        public Builder gracePeriod(@Nullable Integer gracePeriod) {
            this.gracePeriod = gracePeriod;
            return this;
        }
        public Builder ignoreDaemonSets(@Nullable Boolean ignoreDaemonSets) {
            this.ignoreDaemonSets = ignoreDaemonSets;
            return this;
        }
        public Builder ignoreErrors(@Nullable Boolean ignoreErrors) {
            this.ignoreErrors = ignoreErrors;
            return this;
        }
        public Builder skipWaitForDeleteTimeoutSeconds(@Nullable Integer skipWaitForDeleteTimeoutSeconds) {
            this.skipWaitForDeleteTimeoutSeconds = skipWaitForDeleteTimeoutSeconds;
            return this;
        }
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = timeout;
            return this;
        }        public ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions build() {
            return new ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions(deleteEmptyDirData, disableEviction, enabled, force, gracePeriod, ignoreDaemonSets, ignoreErrors, skipWaitForDeleteTimeoutSeconds, timeout);
        }
    }
}
