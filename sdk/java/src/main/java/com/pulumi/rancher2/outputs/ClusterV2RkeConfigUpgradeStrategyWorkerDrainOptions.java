// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions {
    /**
     * @return if `delete_empty_dir_data` is set to true, continue draining even if there are pods using emptyDir (local storage).
     * 
     */
    private @Nullable Boolean deleteEmptyDirData;
    /**
     * @return If `disable_eviction` is set to true, force drain to use delete rather than evict.
     * 
     */
    private @Nullable Boolean disableEviction;
    /**
     * @return If `enabled` is set to true, nodes will be drained before upgrade.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return If `force` is set to true, drain nodes even if there are standalone pods that are not managed by a ReplicationController, Job, or DaemonSet. Drain will not proceed without `force` set to true if there are such pods.
     * 
     */
    private @Nullable Boolean force;
    /**
     * @return Time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
     * 
     */
    private @Nullable Integer gracePeriod;
    /**
     * @return If `ignore_daemon_sets` is set to false, drain will not proceed if there are DaemonSet-managed pods.
     * 
     */
    private @Nullable Boolean ignoreDaemonSets;
    /**
     * @return If `ignore_errors` is set to true,  errors that occurred between drain nodes in group are ignored.
     * 
     */
    private @Nullable Boolean ignoreErrors;
    /**
     * @return Skip waiting for the pods that have a DeletionTimeStamp &gt; N seconds to be deleted. Seconds must be greater than 0 to skip. Such pods will be force deleted.
     * 
     */
    private @Nullable Integer skipWaitForDeleteTimeoutSeconds;
    /**
     * @return Time to wait (in seconds) before giving up for one try.
     * 
     */
    private @Nullable Integer timeout;

    private ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions() {}
    /**
     * @return if `delete_empty_dir_data` is set to true, continue draining even if there are pods using emptyDir (local storage).
     * 
     */
    public Optional<Boolean> deleteEmptyDirData() {
        return Optional.ofNullable(this.deleteEmptyDirData);
    }
    /**
     * @return If `disable_eviction` is set to true, force drain to use delete rather than evict.
     * 
     */
    public Optional<Boolean> disableEviction() {
        return Optional.ofNullable(this.disableEviction);
    }
    /**
     * @return If `enabled` is set to true, nodes will be drained before upgrade.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return If `force` is set to true, drain nodes even if there are standalone pods that are not managed by a ReplicationController, Job, or DaemonSet. Drain will not proceed without `force` set to true if there are such pods.
     * 
     */
    public Optional<Boolean> force() {
        return Optional.ofNullable(this.force);
    }
    /**
     * @return Time in seconds given to each pod to terminate gracefully. If negative, the default value specified in the pod will be used.
     * 
     */
    public Optional<Integer> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }
    /**
     * @return If `ignore_daemon_sets` is set to false, drain will not proceed if there are DaemonSet-managed pods.
     * 
     */
    public Optional<Boolean> ignoreDaemonSets() {
        return Optional.ofNullable(this.ignoreDaemonSets);
    }
    /**
     * @return If `ignore_errors` is set to true,  errors that occurred between drain nodes in group are ignored.
     * 
     */
    public Optional<Boolean> ignoreErrors() {
        return Optional.ofNullable(this.ignoreErrors);
    }
    /**
     * @return Skip waiting for the pods that have a DeletionTimeStamp &gt; N seconds to be deleted. Seconds must be greater than 0 to skip. Such pods will be force deleted.
     * 
     */
    public Optional<Integer> skipWaitForDeleteTimeoutSeconds() {
        return Optional.ofNullable(this.skipWaitForDeleteTimeoutSeconds);
    }
    /**
     * @return Time to wait (in seconds) before giving up for one try.
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean deleteEmptyDirData;
        private @Nullable Boolean disableEviction;
        private @Nullable Boolean enabled;
        private @Nullable Boolean force;
        private @Nullable Integer gracePeriod;
        private @Nullable Boolean ignoreDaemonSets;
        private @Nullable Boolean ignoreErrors;
        private @Nullable Integer skipWaitForDeleteTimeoutSeconds;
        private @Nullable Integer timeout;
        public Builder() {}
        public Builder(ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteEmptyDirData = defaults.deleteEmptyDirData;
    	      this.disableEviction = defaults.disableEviction;
    	      this.enabled = defaults.enabled;
    	      this.force = defaults.force;
    	      this.gracePeriod = defaults.gracePeriod;
    	      this.ignoreDaemonSets = defaults.ignoreDaemonSets;
    	      this.ignoreErrors = defaults.ignoreErrors;
    	      this.skipWaitForDeleteTimeoutSeconds = defaults.skipWaitForDeleteTimeoutSeconds;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder deleteEmptyDirData(@Nullable Boolean deleteEmptyDirData) {

            this.deleteEmptyDirData = deleteEmptyDirData;
            return this;
        }
        @CustomType.Setter
        public Builder disableEviction(@Nullable Boolean disableEviction) {

            this.disableEviction = disableEviction;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder force(@Nullable Boolean force) {

            this.force = force;
            return this;
        }
        @CustomType.Setter
        public Builder gracePeriod(@Nullable Integer gracePeriod) {

            this.gracePeriod = gracePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreDaemonSets(@Nullable Boolean ignoreDaemonSets) {

            this.ignoreDaemonSets = ignoreDaemonSets;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreErrors(@Nullable Boolean ignoreErrors) {

            this.ignoreErrors = ignoreErrors;
            return this;
        }
        @CustomType.Setter
        public Builder skipWaitForDeleteTimeoutSeconds(@Nullable Integer skipWaitForDeleteTimeoutSeconds) {

            this.skipWaitForDeleteTimeoutSeconds = skipWaitForDeleteTimeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        public ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions build() {
            final var _resultValue = new ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptions();
            _resultValue.deleteEmptyDirData = deleteEmptyDirData;
            _resultValue.disableEviction = disableEviction;
            _resultValue.enabled = enabled;
            _resultValue.force = force;
            _resultValue.gracePeriod = gracePeriod;
            _resultValue.ignoreDaemonSets = ignoreDaemonSets;
            _resultValue.ignoreErrors = ignoreErrors;
            _resultValue.skipWaitForDeleteTimeoutSeconds = skipWaitForDeleteTimeoutSeconds;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
