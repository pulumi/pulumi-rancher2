// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rancher2.inputs.ProjectLoggingFluentdConfigFluentServerArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectLoggingFluentdConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectLoggingFluentdConfigArgs Empty = new ProjectLoggingFluentdConfigArgs();

    /**
     * SSL certificate for the syslog service (string)
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return SSL certificate for the syslog service (string)
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Compress data for the fluentd service (bool)
     * 
     */
    @Import(name="compress")
    private @Nullable Output<Boolean> compress;

    /**
     * @return Compress data for the fluentd service (bool)
     * 
     */
    public Optional<Output<Boolean>> compress() {
        return Optional.ofNullable(this.compress);
    }

    /**
     * Enable TLS for the fluentd service (bool)
     * 
     */
    @Import(name="enableTls")
    private @Nullable Output<Boolean> enableTls;

    /**
     * @return Enable TLS for the fluentd service (bool)
     * 
     */
    public Optional<Output<Boolean>> enableTls() {
        return Optional.ofNullable(this.enableTls);
    }

    /**
     * Servers for the fluentd service (list)
     * 
     */
    @Import(name="fluentServers", required=true)
    private Output<List<ProjectLoggingFluentdConfigFluentServerArgs>> fluentServers;

    /**
     * @return Servers for the fluentd service (list)
     * 
     */
    public Output<List<ProjectLoggingFluentdConfigFluentServerArgs>> fluentServers() {
        return this.fluentServers;
    }

    private ProjectLoggingFluentdConfigArgs() {}

    private ProjectLoggingFluentdConfigArgs(ProjectLoggingFluentdConfigArgs $) {
        this.certificate = $.certificate;
        this.compress = $.compress;
        this.enableTls = $.enableTls;
        this.fluentServers = $.fluentServers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectLoggingFluentdConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectLoggingFluentdConfigArgs $;

        public Builder() {
            $ = new ProjectLoggingFluentdConfigArgs();
        }

        public Builder(ProjectLoggingFluentdConfigArgs defaults) {
            $ = new ProjectLoggingFluentdConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate SSL certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate SSL certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param compress Compress data for the fluentd service (bool)
         * 
         * @return builder
         * 
         */
        public Builder compress(@Nullable Output<Boolean> compress) {
            $.compress = compress;
            return this;
        }

        /**
         * @param compress Compress data for the fluentd service (bool)
         * 
         * @return builder
         * 
         */
        public Builder compress(Boolean compress) {
            return compress(Output.of(compress));
        }

        /**
         * @param enableTls Enable TLS for the fluentd service (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableTls(@Nullable Output<Boolean> enableTls) {
            $.enableTls = enableTls;
            return this;
        }

        /**
         * @param enableTls Enable TLS for the fluentd service (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableTls(Boolean enableTls) {
            return enableTls(Output.of(enableTls));
        }

        /**
         * @param fluentServers Servers for the fluentd service (list)
         * 
         * @return builder
         * 
         */
        public Builder fluentServers(Output<List<ProjectLoggingFluentdConfigFluentServerArgs>> fluentServers) {
            $.fluentServers = fluentServers;
            return this;
        }

        /**
         * @param fluentServers Servers for the fluentd service (list)
         * 
         * @return builder
         * 
         */
        public Builder fluentServers(List<ProjectLoggingFluentdConfigFluentServerArgs> fluentServers) {
            return fluentServers(Output.of(fluentServers));
        }

        /**
         * @param fluentServers Servers for the fluentd service (list)
         * 
         * @return builder
         * 
         */
        public Builder fluentServers(ProjectLoggingFluentdConfigFluentServerArgs... fluentServers) {
            return fluentServers(List.of(fluentServers));
        }

        public ProjectLoggingFluentdConfigArgs build() {
            $.fluentServers = Objects.requireNonNull($.fluentServers, "expected parameter 'fluentServers' to be non-null");
            return $;
        }
    }

}
