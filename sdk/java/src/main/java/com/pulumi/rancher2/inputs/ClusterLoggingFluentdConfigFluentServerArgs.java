// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterLoggingFluentdConfigFluentServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterLoggingFluentdConfigFluentServerArgs Empty = new ClusterLoggingFluentdConfigFluentServerArgs();

    /**
     * Endpoint of the syslog service (string)
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return Endpoint of the syslog service (string)
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * Hostname of the fluentd service (string)
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Hostname of the fluentd service (string)
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * User password of the fluentd service (string)
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return User password of the fluentd service (string)
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Shared key of the fluentd service (string)
     * 
     */
    @Import(name="sharedKey")
    private @Nullable Output<String> sharedKey;

    /**
     * @return Shared key of the fluentd service (string)
     * 
     */
    public Optional<Output<String>> sharedKey() {
        return Optional.ofNullable(this.sharedKey);
    }

    /**
     * Standby server of the fluentd service (bool)
     * 
     */
    @Import(name="standby")
    private @Nullable Output<Boolean> standby;

    /**
     * @return Standby server of the fluentd service (bool)
     * 
     */
    public Optional<Output<Boolean>> standby() {
        return Optional.ofNullable(this.standby);
    }

    /**
     * Username of the fluentd service (string)
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username of the fluentd service (string)
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Weight of the fluentd server (int)
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Integer> weight;

    /**
     * @return Weight of the fluentd server (int)
     * 
     */
    public Optional<Output<Integer>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private ClusterLoggingFluentdConfigFluentServerArgs() {}

    private ClusterLoggingFluentdConfigFluentServerArgs(ClusterLoggingFluentdConfigFluentServerArgs $) {
        this.endpoint = $.endpoint;
        this.hostname = $.hostname;
        this.password = $.password;
        this.sharedKey = $.sharedKey;
        this.standby = $.standby;
        this.username = $.username;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterLoggingFluentdConfigFluentServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterLoggingFluentdConfigFluentServerArgs $;

        public Builder() {
            $ = new ClusterLoggingFluentdConfigFluentServerArgs();
        }

        public Builder(ClusterLoggingFluentdConfigFluentServerArgs defaults) {
            $ = new ClusterLoggingFluentdConfigFluentServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpoint Endpoint of the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint Endpoint of the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param hostname Hostname of the fluentd service (string)
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Hostname of the fluentd service (string)
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param password User password of the fluentd service (string)
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password User password of the fluentd service (string)
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param sharedKey Shared key of the fluentd service (string)
         * 
         * @return builder
         * 
         */
        public Builder sharedKey(@Nullable Output<String> sharedKey) {
            $.sharedKey = sharedKey;
            return this;
        }

        /**
         * @param sharedKey Shared key of the fluentd service (string)
         * 
         * @return builder
         * 
         */
        public Builder sharedKey(String sharedKey) {
            return sharedKey(Output.of(sharedKey));
        }

        /**
         * @param standby Standby server of the fluentd service (bool)
         * 
         * @return builder
         * 
         */
        public Builder standby(@Nullable Output<Boolean> standby) {
            $.standby = standby;
            return this;
        }

        /**
         * @param standby Standby server of the fluentd service (bool)
         * 
         * @return builder
         * 
         */
        public Builder standby(Boolean standby) {
            return standby(Output.of(standby));
        }

        /**
         * @param username Username of the fluentd service (string)
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username of the fluentd service (string)
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param weight Weight of the fluentd server (int)
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Integer> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight Weight of the fluentd server (int)
         * 
         * @return builder
         * 
         */
        public Builder weight(Integer weight) {
            return weight(Output.of(weight));
        }

        public ClusterLoggingFluentdConfigFluentServerArgs build() {
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            return $;
        }
    }

}
