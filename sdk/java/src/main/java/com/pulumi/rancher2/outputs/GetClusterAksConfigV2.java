// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterAksConfigV2NodePool;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterAksConfigV2 {
    private final @Nullable String authBaseUrl;
    private final @Nullable List<String> authorizedIpRanges;
    private final @Nullable String baseUrl;
    private final String cloudCredentialId;
    private final @Nullable String dnsPrefix;
    private final Boolean httpApplicationRouting;
    private final @Nullable Boolean imported;
    private final @Nullable String kubernetesVersion;
    private final String linuxAdminUsername;
    private final String linuxSshPublicKey;
    private final String loadBalancerSku;
    private final String logAnalyticsWorkspaceGroup;
    private final String logAnalyticsWorkspaceName;
    private final Boolean monitoring;
    /**
     * @return The name of the Cluster (string)
     * 
     */
    private final String name;
    private final String networkDnsServiceIp;
    private final String networkDockerBridgeCidr;
    private final @Nullable String networkPlugin;
    private final String networkPodCidr;
    private final String networkPolicy;
    private final String networkServiceCidr;
    private final @Nullable List<GetClusterAksConfigV2NodePool> nodePools;
    private final Boolean privateCluster;
    private final String resourceGroup;
    private final String resourceLocation;
    private final String subnet;
    private final Map<String,Object> tags;
    private final String virtualNetwork;
    private final String virtualNetworkResourceGroup;

    @CustomType.Constructor
    private GetClusterAksConfigV2(
        @CustomType.Parameter("authBaseUrl") @Nullable String authBaseUrl,
        @CustomType.Parameter("authorizedIpRanges") @Nullable List<String> authorizedIpRanges,
        @CustomType.Parameter("baseUrl") @Nullable String baseUrl,
        @CustomType.Parameter("cloudCredentialId") String cloudCredentialId,
        @CustomType.Parameter("dnsPrefix") @Nullable String dnsPrefix,
        @CustomType.Parameter("httpApplicationRouting") Boolean httpApplicationRouting,
        @CustomType.Parameter("imported") @Nullable Boolean imported,
        @CustomType.Parameter("kubernetesVersion") @Nullable String kubernetesVersion,
        @CustomType.Parameter("linuxAdminUsername") String linuxAdminUsername,
        @CustomType.Parameter("linuxSshPublicKey") String linuxSshPublicKey,
        @CustomType.Parameter("loadBalancerSku") String loadBalancerSku,
        @CustomType.Parameter("logAnalyticsWorkspaceGroup") String logAnalyticsWorkspaceGroup,
        @CustomType.Parameter("logAnalyticsWorkspaceName") String logAnalyticsWorkspaceName,
        @CustomType.Parameter("monitoring") Boolean monitoring,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networkDnsServiceIp") String networkDnsServiceIp,
        @CustomType.Parameter("networkDockerBridgeCidr") String networkDockerBridgeCidr,
        @CustomType.Parameter("networkPlugin") @Nullable String networkPlugin,
        @CustomType.Parameter("networkPodCidr") String networkPodCidr,
        @CustomType.Parameter("networkPolicy") String networkPolicy,
        @CustomType.Parameter("networkServiceCidr") String networkServiceCidr,
        @CustomType.Parameter("nodePools") @Nullable List<GetClusterAksConfigV2NodePool> nodePools,
        @CustomType.Parameter("privateCluster") Boolean privateCluster,
        @CustomType.Parameter("resourceGroup") String resourceGroup,
        @CustomType.Parameter("resourceLocation") String resourceLocation,
        @CustomType.Parameter("subnet") String subnet,
        @CustomType.Parameter("tags") Map<String,Object> tags,
        @CustomType.Parameter("virtualNetwork") String virtualNetwork,
        @CustomType.Parameter("virtualNetworkResourceGroup") String virtualNetworkResourceGroup) {
        this.authBaseUrl = authBaseUrl;
        this.authorizedIpRanges = authorizedIpRanges;
        this.baseUrl = baseUrl;
        this.cloudCredentialId = cloudCredentialId;
        this.dnsPrefix = dnsPrefix;
        this.httpApplicationRouting = httpApplicationRouting;
        this.imported = imported;
        this.kubernetesVersion = kubernetesVersion;
        this.linuxAdminUsername = linuxAdminUsername;
        this.linuxSshPublicKey = linuxSshPublicKey;
        this.loadBalancerSku = loadBalancerSku;
        this.logAnalyticsWorkspaceGroup = logAnalyticsWorkspaceGroup;
        this.logAnalyticsWorkspaceName = logAnalyticsWorkspaceName;
        this.monitoring = monitoring;
        this.name = name;
        this.networkDnsServiceIp = networkDnsServiceIp;
        this.networkDockerBridgeCidr = networkDockerBridgeCidr;
        this.networkPlugin = networkPlugin;
        this.networkPodCidr = networkPodCidr;
        this.networkPolicy = networkPolicy;
        this.networkServiceCidr = networkServiceCidr;
        this.nodePools = nodePools;
        this.privateCluster = privateCluster;
        this.resourceGroup = resourceGroup;
        this.resourceLocation = resourceLocation;
        this.subnet = subnet;
        this.tags = tags;
        this.virtualNetwork = virtualNetwork;
        this.virtualNetworkResourceGroup = virtualNetworkResourceGroup;
    }

    public Optional<String> authBaseUrl() {
        return Optional.ofNullable(this.authBaseUrl);
    }
    public List<String> authorizedIpRanges() {
        return this.authorizedIpRanges == null ? List.of() : this.authorizedIpRanges;
    }
    public Optional<String> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }
    public String cloudCredentialId() {
        return this.cloudCredentialId;
    }
    public Optional<String> dnsPrefix() {
        return Optional.ofNullable(this.dnsPrefix);
    }
    public Boolean httpApplicationRouting() {
        return this.httpApplicationRouting;
    }
    public Optional<Boolean> imported() {
        return Optional.ofNullable(this.imported);
    }
    public Optional<String> kubernetesVersion() {
        return Optional.ofNullable(this.kubernetesVersion);
    }
    public String linuxAdminUsername() {
        return this.linuxAdminUsername;
    }
    public String linuxSshPublicKey() {
        return this.linuxSshPublicKey;
    }
    public String loadBalancerSku() {
        return this.loadBalancerSku;
    }
    public String logAnalyticsWorkspaceGroup() {
        return this.logAnalyticsWorkspaceGroup;
    }
    public String logAnalyticsWorkspaceName() {
        return this.logAnalyticsWorkspaceName;
    }
    public Boolean monitoring() {
        return this.monitoring;
    }
    /**
     * @return The name of the Cluster (string)
     * 
     */
    public String name() {
        return this.name;
    }
    public String networkDnsServiceIp() {
        return this.networkDnsServiceIp;
    }
    public String networkDockerBridgeCidr() {
        return this.networkDockerBridgeCidr;
    }
    public Optional<String> networkPlugin() {
        return Optional.ofNullable(this.networkPlugin);
    }
    public String networkPodCidr() {
        return this.networkPodCidr;
    }
    public String networkPolicy() {
        return this.networkPolicy;
    }
    public String networkServiceCidr() {
        return this.networkServiceCidr;
    }
    public List<GetClusterAksConfigV2NodePool> nodePools() {
        return this.nodePools == null ? List.of() : this.nodePools;
    }
    public Boolean privateCluster() {
        return this.privateCluster;
    }
    public String resourceGroup() {
        return this.resourceGroup;
    }
    public String resourceLocation() {
        return this.resourceLocation;
    }
    public String subnet() {
        return this.subnet;
    }
    public Map<String,Object> tags() {
        return this.tags;
    }
    public String virtualNetwork() {
        return this.virtualNetwork;
    }
    public String virtualNetworkResourceGroup() {
        return this.virtualNetworkResourceGroup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterAksConfigV2 defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String authBaseUrl;
        private @Nullable List<String> authorizedIpRanges;
        private @Nullable String baseUrl;
        private String cloudCredentialId;
        private @Nullable String dnsPrefix;
        private Boolean httpApplicationRouting;
        private @Nullable Boolean imported;
        private @Nullable String kubernetesVersion;
        private String linuxAdminUsername;
        private String linuxSshPublicKey;
        private String loadBalancerSku;
        private String logAnalyticsWorkspaceGroup;
        private String logAnalyticsWorkspaceName;
        private Boolean monitoring;
        private String name;
        private String networkDnsServiceIp;
        private String networkDockerBridgeCidr;
        private @Nullable String networkPlugin;
        private String networkPodCidr;
        private String networkPolicy;
        private String networkServiceCidr;
        private @Nullable List<GetClusterAksConfigV2NodePool> nodePools;
        private Boolean privateCluster;
        private String resourceGroup;
        private String resourceLocation;
        private String subnet;
        private Map<String,Object> tags;
        private String virtualNetwork;
        private String virtualNetworkResourceGroup;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterAksConfigV2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authBaseUrl = defaults.authBaseUrl;
    	      this.authorizedIpRanges = defaults.authorizedIpRanges;
    	      this.baseUrl = defaults.baseUrl;
    	      this.cloudCredentialId = defaults.cloudCredentialId;
    	      this.dnsPrefix = defaults.dnsPrefix;
    	      this.httpApplicationRouting = defaults.httpApplicationRouting;
    	      this.imported = defaults.imported;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.linuxAdminUsername = defaults.linuxAdminUsername;
    	      this.linuxSshPublicKey = defaults.linuxSshPublicKey;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.logAnalyticsWorkspaceGroup = defaults.logAnalyticsWorkspaceGroup;
    	      this.logAnalyticsWorkspaceName = defaults.logAnalyticsWorkspaceName;
    	      this.monitoring = defaults.monitoring;
    	      this.name = defaults.name;
    	      this.networkDnsServiceIp = defaults.networkDnsServiceIp;
    	      this.networkDockerBridgeCidr = defaults.networkDockerBridgeCidr;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPodCidr = defaults.networkPodCidr;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.networkServiceCidr = defaults.networkServiceCidr;
    	      this.nodePools = defaults.nodePools;
    	      this.privateCluster = defaults.privateCluster;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.resourceLocation = defaults.resourceLocation;
    	      this.subnet = defaults.subnet;
    	      this.tags = defaults.tags;
    	      this.virtualNetwork = defaults.virtualNetwork;
    	      this.virtualNetworkResourceGroup = defaults.virtualNetworkResourceGroup;
        }

        public Builder authBaseUrl(@Nullable String authBaseUrl) {
            this.authBaseUrl = authBaseUrl;
            return this;
        }
        public Builder authorizedIpRanges(@Nullable List<String> authorizedIpRanges) {
            this.authorizedIpRanges = authorizedIpRanges;
            return this;
        }
        public Builder authorizedIpRanges(String... authorizedIpRanges) {
            return authorizedIpRanges(List.of(authorizedIpRanges));
        }
        public Builder baseUrl(@Nullable String baseUrl) {
            this.baseUrl = baseUrl;
            return this;
        }
        public Builder cloudCredentialId(String cloudCredentialId) {
            this.cloudCredentialId = Objects.requireNonNull(cloudCredentialId);
            return this;
        }
        public Builder dnsPrefix(@Nullable String dnsPrefix) {
            this.dnsPrefix = dnsPrefix;
            return this;
        }
        public Builder httpApplicationRouting(Boolean httpApplicationRouting) {
            this.httpApplicationRouting = Objects.requireNonNull(httpApplicationRouting);
            return this;
        }
        public Builder imported(@Nullable Boolean imported) {
            this.imported = imported;
            return this;
        }
        public Builder kubernetesVersion(@Nullable String kubernetesVersion) {
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        public Builder linuxAdminUsername(String linuxAdminUsername) {
            this.linuxAdminUsername = Objects.requireNonNull(linuxAdminUsername);
            return this;
        }
        public Builder linuxSshPublicKey(String linuxSshPublicKey) {
            this.linuxSshPublicKey = Objects.requireNonNull(linuxSshPublicKey);
            return this;
        }
        public Builder loadBalancerSku(String loadBalancerSku) {
            this.loadBalancerSku = Objects.requireNonNull(loadBalancerSku);
            return this;
        }
        public Builder logAnalyticsWorkspaceGroup(String logAnalyticsWorkspaceGroup) {
            this.logAnalyticsWorkspaceGroup = Objects.requireNonNull(logAnalyticsWorkspaceGroup);
            return this;
        }
        public Builder logAnalyticsWorkspaceName(String logAnalyticsWorkspaceName) {
            this.logAnalyticsWorkspaceName = Objects.requireNonNull(logAnalyticsWorkspaceName);
            return this;
        }
        public Builder monitoring(Boolean monitoring) {
            this.monitoring = Objects.requireNonNull(monitoring);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkDnsServiceIp(String networkDnsServiceIp) {
            this.networkDnsServiceIp = Objects.requireNonNull(networkDnsServiceIp);
            return this;
        }
        public Builder networkDockerBridgeCidr(String networkDockerBridgeCidr) {
            this.networkDockerBridgeCidr = Objects.requireNonNull(networkDockerBridgeCidr);
            return this;
        }
        public Builder networkPlugin(@Nullable String networkPlugin) {
            this.networkPlugin = networkPlugin;
            return this;
        }
        public Builder networkPodCidr(String networkPodCidr) {
            this.networkPodCidr = Objects.requireNonNull(networkPodCidr);
            return this;
        }
        public Builder networkPolicy(String networkPolicy) {
            this.networkPolicy = Objects.requireNonNull(networkPolicy);
            return this;
        }
        public Builder networkServiceCidr(String networkServiceCidr) {
            this.networkServiceCidr = Objects.requireNonNull(networkServiceCidr);
            return this;
        }
        public Builder nodePools(@Nullable List<GetClusterAksConfigV2NodePool> nodePools) {
            this.nodePools = nodePools;
            return this;
        }
        public Builder nodePools(GetClusterAksConfigV2NodePool... nodePools) {
            return nodePools(List.of(nodePools));
        }
        public Builder privateCluster(Boolean privateCluster) {
            this.privateCluster = Objects.requireNonNull(privateCluster);
            return this;
        }
        public Builder resourceGroup(String resourceGroup) {
            this.resourceGroup = Objects.requireNonNull(resourceGroup);
            return this;
        }
        public Builder resourceLocation(String resourceLocation) {
            this.resourceLocation = Objects.requireNonNull(resourceLocation);
            return this;
        }
        public Builder subnet(String subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }
        public Builder tags(Map<String,Object> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder virtualNetwork(String virtualNetwork) {
            this.virtualNetwork = Objects.requireNonNull(virtualNetwork);
            return this;
        }
        public Builder virtualNetworkResourceGroup(String virtualNetworkResourceGroup) {
            this.virtualNetworkResourceGroup = Objects.requireNonNull(virtualNetworkResourceGroup);
            return this;
        }        public GetClusterAksConfigV2 build() {
            return new GetClusterAksConfigV2(authBaseUrl, authorizedIpRanges, baseUrl, cloudCredentialId, dnsPrefix, httpApplicationRouting, imported, kubernetesVersion, linuxAdminUsername, linuxSshPublicKey, loadBalancerSku, logAnalyticsWorkspaceGroup, logAnalyticsWorkspaceName, monitoring, name, networkDnsServiceIp, networkDockerBridgeCidr, networkPlugin, networkPodCidr, networkPolicy, networkServiceCidr, nodePools, privateCluster, resourceGroup, resourceLocation, subnet, tags, virtualNetwork, virtualNetworkResourceGroup);
        }
    }
}
