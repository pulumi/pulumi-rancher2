// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rancher2.inputs.ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs;
import com.pulumi.rancher2.inputs.ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterV2RkeConfigUpgradeStrategyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterV2RkeConfigUpgradeStrategyArgs Empty = new ClusterV2RkeConfigUpgradeStrategyArgs();

    /**
     * How many control plane nodes should be upgraded at a time, 0 is infinite. Percentages are also accepted.
     * 
     */
    @Import(name="controlPlaneConcurrency")
    private @Nullable Output<String> controlPlaneConcurrency;

    /**
     * @return How many control plane nodes should be upgraded at a time, 0 is infinite. Percentages are also accepted.
     * 
     */
    public Optional<Output<String>> controlPlaneConcurrency() {
        return Optional.ofNullable(this.controlPlaneConcurrency);
    }

    /**
     * Controlplane nodes drain options.
     * 
     */
    @Import(name="controlPlaneDrainOptions")
    private @Nullable Output<ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs> controlPlaneDrainOptions;

    /**
     * @return Controlplane nodes drain options.
     * 
     */
    public Optional<Output<ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs>> controlPlaneDrainOptions() {
        return Optional.ofNullable(this.controlPlaneDrainOptions);
    }

    /**
     * How many worker nodes should be upgraded at a time. Percentages are also accepted.
     * 
     */
    @Import(name="workerConcurrency")
    private @Nullable Output<String> workerConcurrency;

    /**
     * @return How many worker nodes should be upgraded at a time. Percentages are also accepted.
     * 
     */
    public Optional<Output<String>> workerConcurrency() {
        return Optional.ofNullable(this.workerConcurrency);
    }

    /**
     * Worker nodes drain options.
     * 
     */
    @Import(name="workerDrainOptions")
    private @Nullable Output<ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs> workerDrainOptions;

    /**
     * @return Worker nodes drain options.
     * 
     */
    public Optional<Output<ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs>> workerDrainOptions() {
        return Optional.ofNullable(this.workerDrainOptions);
    }

    private ClusterV2RkeConfigUpgradeStrategyArgs() {}

    private ClusterV2RkeConfigUpgradeStrategyArgs(ClusterV2RkeConfigUpgradeStrategyArgs $) {
        this.controlPlaneConcurrency = $.controlPlaneConcurrency;
        this.controlPlaneDrainOptions = $.controlPlaneDrainOptions;
        this.workerConcurrency = $.workerConcurrency;
        this.workerDrainOptions = $.workerDrainOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterV2RkeConfigUpgradeStrategyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterV2RkeConfigUpgradeStrategyArgs $;

        public Builder() {
            $ = new ClusterV2RkeConfigUpgradeStrategyArgs();
        }

        public Builder(ClusterV2RkeConfigUpgradeStrategyArgs defaults) {
            $ = new ClusterV2RkeConfigUpgradeStrategyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param controlPlaneConcurrency How many control plane nodes should be upgraded at a time, 0 is infinite. Percentages are also accepted.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneConcurrency(@Nullable Output<String> controlPlaneConcurrency) {
            $.controlPlaneConcurrency = controlPlaneConcurrency;
            return this;
        }

        /**
         * @param controlPlaneConcurrency How many control plane nodes should be upgraded at a time, 0 is infinite. Percentages are also accepted.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneConcurrency(String controlPlaneConcurrency) {
            return controlPlaneConcurrency(Output.of(controlPlaneConcurrency));
        }

        /**
         * @param controlPlaneDrainOptions Controlplane nodes drain options.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneDrainOptions(@Nullable Output<ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs> controlPlaneDrainOptions) {
            $.controlPlaneDrainOptions = controlPlaneDrainOptions;
            return this;
        }

        /**
         * @param controlPlaneDrainOptions Controlplane nodes drain options.
         * 
         * @return builder
         * 
         */
        public Builder controlPlaneDrainOptions(ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs controlPlaneDrainOptions) {
            return controlPlaneDrainOptions(Output.of(controlPlaneDrainOptions));
        }

        /**
         * @param workerConcurrency How many worker nodes should be upgraded at a time. Percentages are also accepted.
         * 
         * @return builder
         * 
         */
        public Builder workerConcurrency(@Nullable Output<String> workerConcurrency) {
            $.workerConcurrency = workerConcurrency;
            return this;
        }

        /**
         * @param workerConcurrency How many worker nodes should be upgraded at a time. Percentages are also accepted.
         * 
         * @return builder
         * 
         */
        public Builder workerConcurrency(String workerConcurrency) {
            return workerConcurrency(Output.of(workerConcurrency));
        }

        /**
         * @param workerDrainOptions Worker nodes drain options.
         * 
         * @return builder
         * 
         */
        public Builder workerDrainOptions(@Nullable Output<ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs> workerDrainOptions) {
            $.workerDrainOptions = workerDrainOptions;
            return this;
        }

        /**
         * @param workerDrainOptions Worker nodes drain options.
         * 
         * @return builder
         * 
         */
        public Builder workerDrainOptions(ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs workerDrainOptions) {
            return workerDrainOptions(Output.of(workerDrainOptions));
        }

        public ClusterV2RkeConfigUpgradeStrategyArgs build() {
            return $;
        }
    }

}
