// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterV2RkeConfigRegistriesConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterV2RkeConfigRegistriesConfigArgs Empty = new ClusterV2RkeConfigRegistriesConfigArgs();

    /**
     * Name of the secret that contains two keys with base64 encoded values: the username and password for the specified custom registry. No secret is required if the system-default-registry is not authenticated.
     * 
     */
    @Import(name="authConfigSecretName")
    private @Nullable Output<String> authConfigSecretName;

    /**
     * @return Name of the secret that contains two keys with base64 encoded values: the username and password for the specified custom registry. No secret is required if the system-default-registry is not authenticated.
     * 
     */
    public Optional<Output<String>> authConfigSecretName() {
        return Optional.ofNullable(this.authConfigSecretName);
    }

    /**
     * Registry CA bundle.
     * 
     */
    @Import(name="caBundle")
    private @Nullable Output<String> caBundle;

    /**
     * @return Registry CA bundle.
     * 
     */
    public Optional<Output<String>> caBundle() {
        return Optional.ofNullable(this.caBundle);
    }

    /**
     * Registry hostname.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return Registry hostname.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * Registry insecure connectivity.
     * 
     */
    @Import(name="insecure")
    private @Nullable Output<Boolean> insecure;

    /**
     * @return Registry insecure connectivity.
     * 
     */
    public Optional<Output<Boolean>> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    /**
     * Registry TLS secret name. TLS is a pair of Cert/Key.
     * 
     */
    @Import(name="tlsSecretName")
    private @Nullable Output<String> tlsSecretName;

    /**
     * @return Registry TLS secret name. TLS is a pair of Cert/Key.
     * 
     */
    public Optional<Output<String>> tlsSecretName() {
        return Optional.ofNullable(this.tlsSecretName);
    }

    private ClusterV2RkeConfigRegistriesConfigArgs() {}

    private ClusterV2RkeConfigRegistriesConfigArgs(ClusterV2RkeConfigRegistriesConfigArgs $) {
        this.authConfigSecretName = $.authConfigSecretName;
        this.caBundle = $.caBundle;
        this.hostname = $.hostname;
        this.insecure = $.insecure;
        this.tlsSecretName = $.tlsSecretName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterV2RkeConfigRegistriesConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterV2RkeConfigRegistriesConfigArgs $;

        public Builder() {
            $ = new ClusterV2RkeConfigRegistriesConfigArgs();
        }

        public Builder(ClusterV2RkeConfigRegistriesConfigArgs defaults) {
            $ = new ClusterV2RkeConfigRegistriesConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authConfigSecretName Name of the secret that contains two keys with base64 encoded values: the username and password for the specified custom registry. No secret is required if the system-default-registry is not authenticated.
         * 
         * @return builder
         * 
         */
        public Builder authConfigSecretName(@Nullable Output<String> authConfigSecretName) {
            $.authConfigSecretName = authConfigSecretName;
            return this;
        }

        /**
         * @param authConfigSecretName Name of the secret that contains two keys with base64 encoded values: the username and password for the specified custom registry. No secret is required if the system-default-registry is not authenticated.
         * 
         * @return builder
         * 
         */
        public Builder authConfigSecretName(String authConfigSecretName) {
            return authConfigSecretName(Output.of(authConfigSecretName));
        }

        /**
         * @param caBundle Registry CA bundle.
         * 
         * @return builder
         * 
         */
        public Builder caBundle(@Nullable Output<String> caBundle) {
            $.caBundle = caBundle;
            return this;
        }

        /**
         * @param caBundle Registry CA bundle.
         * 
         * @return builder
         * 
         */
        public Builder caBundle(String caBundle) {
            return caBundle(Output.of(caBundle));
        }

        /**
         * @param hostname Registry hostname.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Registry hostname.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param insecure Registry insecure connectivity.
         * 
         * @return builder
         * 
         */
        public Builder insecure(@Nullable Output<Boolean> insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param insecure Registry insecure connectivity.
         * 
         * @return builder
         * 
         */
        public Builder insecure(Boolean insecure) {
            return insecure(Output.of(insecure));
        }

        /**
         * @param tlsSecretName Registry TLS secret name. TLS is a pair of Cert/Key.
         * 
         * @return builder
         * 
         */
        public Builder tlsSecretName(@Nullable Output<String> tlsSecretName) {
            $.tlsSecretName = tlsSecretName;
            return this;
        }

        /**
         * @param tlsSecretName Registry TLS secret name. TLS is a pair of Cert/Key.
         * 
         * @return builder
         * 
         */
        public Builder tlsSecretName(String tlsSecretName) {
            return tlsSecretName(Output.of(tlsSecretName));
        }

        public ClusterV2RkeConfigRegistriesConfigArgs build() {
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("ClusterV2RkeConfigRegistriesConfigArgs", "hostname");
            }
            return $;
        }
    }

}
