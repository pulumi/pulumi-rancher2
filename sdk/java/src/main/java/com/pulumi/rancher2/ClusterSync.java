// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.ClusterSyncArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.ClusterSyncState;
import com.pulumi.rancher2.outputs.ClusterSyncNode;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.Cluster;
 * import com.pulumi.rancher2.ClusterArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigArgs;
 * import com.pulumi.rancher2.inputs.ClusterRkeConfigNetworkArgs;
 * import com.pulumi.rancher2.NodeTemplate;
 * import com.pulumi.rancher2.NodeTemplateArgs;
 * import com.pulumi.rancher2.inputs.NodeTemplateAmazonec2ConfigArgs;
 * import com.pulumi.rancher2.NodePool;
 * import com.pulumi.rancher2.NodePoolArgs;
 * import com.pulumi.rancher2.ClusterSync;
 * import com.pulumi.rancher2.ClusterSyncArgs;
 * import com.pulumi.rancher2.Project;
 * import com.pulumi.rancher2.ProjectArgs;
 * import com.pulumi.rancher2.inputs.ProjectResourceQuotaArgs;
 * import com.pulumi.rancher2.inputs.ProjectResourceQuotaProjectLimitArgs;
 * import com.pulumi.rancher2.inputs.ProjectResourceQuotaNamespaceDefaultLimitArgs;
 * import com.pulumi.rancher2.inputs.ProjectContainerResourceLimitArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a new rancher2 rke Cluster 
 *         var foo_custom = new Cluster("foo-custom", ClusterArgs.builder()
 *             .name("foo-custom")
 *             .description("Foo rancher2 custom cluster")
 *             .rkeConfig(ClusterRkeConfigArgs.builder()
 *                 .network(ClusterRkeConfigNetworkArgs.builder()
 *                     .plugin("canal")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         // Create a new rancher2 Node Template
 *         var foo = new NodeTemplate("foo", NodeTemplateArgs.builder()
 *             .name("foo")
 *             .description("foo test")
 *             .amazonec2Config(NodeTemplateAmazonec2ConfigArgs.builder()
 *                 .accessKey("<AWS_ACCESS_KEY>")
 *                 .secretKey("<AWS_SECRET_KEY>")
 *                 .ami("<AMI_ID>")
 *                 .region("<REGION>")
 *                 .securityGroups("<AWS_SECURITY_GROUP>")
 *                 .subnetId("<SUBNET_ID>")
 *                 .vpcId("<VPC_ID>")
 *                 .zone("<ZONE>")
 *                 .build())
 *             .build());
 * 
 *         // Create a new rancher2 Node Pool
 *         var fooNodePool = new NodePool("fooNodePool", NodePoolArgs.builder()
 *             .clusterId(foo_custom.id())
 *             .name("foo")
 *             .hostnamePrefix("foo-cluster-0")
 *             .nodeTemplateId(foo.id())
 *             .quantity(3)
 *             .controlPlane(true)
 *             .etcd(true)
 *             .worker(true)
 *             .build());
 * 
 *         // Create a new rancher2 Cluster Sync
 *         var foo_customClusterSync = new ClusterSync("foo-customClusterSync", ClusterSyncArgs.builder()
 *             .clusterId(foo_custom.id())
 *             .nodePoolIds(fooNodePool.id())
 *             .build());
 * 
 *         // Create a new rancher2 Project
 *         var fooProject = new Project("fooProject", ProjectArgs.builder()
 *             .name("foo")
 *             .clusterId(foo_customClusterSync.id())
 *             .description("Terraform namespace acceptance test")
 *             .resourceQuota(ProjectResourceQuotaArgs.builder()
 *                 .projectLimit(ProjectResourceQuotaProjectLimitArgs.builder()
 *                     .limitsCpu("2000m")
 *                     .limitsMemory("2000Mi")
 *                     .requestsStorage("2Gi")
 *                     .build())
 *                 .namespaceDefaultLimit(ProjectResourceQuotaNamespaceDefaultLimitArgs.builder()
 *                     .limitsCpu("500m")
 *                     .limitsMemory("500Mi")
 *                     .requestsStorage("1Gi")
 *                     .build())
 *                 .build())
 *             .containerResourceLimit(ProjectContainerResourceLimitArgs.builder()
 *                 .limitsCpu("20m")
 *                 .limitsMemory("20Mi")
 *                 .requestsCpu("1m")
 *                 .requestsMemory("1Mi")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="rancher2:index/clusterSync:ClusterSync")
public class ClusterSync extends com.pulumi.resources.CustomResource {
    /**
     * The cluster ID that is syncing (string)
     * 
     */
    @Export(name="clusterId", refs={String.class}, tree="[0]")
    private Output<String> clusterId;

    /**
     * @return The cluster ID that is syncing (string)
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }
    /**
     * (Computed) Default project ID for the cluster sync (string)
     * 
     */
    @Export(name="defaultProjectId", refs={String.class}, tree="[0]")
    private Output<String> defaultProjectId;

    /**
     * @return (Computed) Default project ID for the cluster sync (string)
     * 
     */
    public Output<String> defaultProjectId() {
        return this.defaultProjectId;
    }
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster sync (string)
     * 
     */
    @Export(name="kubeConfig", refs={String.class}, tree="[0]")
    private Output<String> kubeConfig;

    /**
     * @return (Computed/Sensitive) Kube Config generated for the cluster sync (string)
     * 
     */
    public Output<String> kubeConfig() {
        return this.kubeConfig;
    }
    /**
     * The node pool IDs used by the cluster id (list)
     * 
     */
    @Export(name="nodePoolIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> nodePoolIds;

    /**
     * @return The node pool IDs used by the cluster id (list)
     * 
     */
    public Output<Optional<List<String>>> nodePoolIds() {
        return Codegen.optional(this.nodePoolIds);
    }
    /**
     * (Computed) The cluster nodes (list).
     * 
     */
    @Export(name="nodes", refs={List.class,ClusterSyncNode.class}, tree="[0,1]")
    private Output<List<ClusterSyncNode>> nodes;

    /**
     * @return (Computed) The cluster nodes (list).
     * 
     */
    public Output<List<ClusterSyncNode>> nodes() {
        return this.nodes;
    }
    /**
     * Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
     * 
     * **Note:** `state_confirm` would be useful, if you have troubles for creating/updating custom clusters that eventually are reaching `active` state before they are fully installed. For example: setting `state_confirm = 2` will assure that the cluster has been in `active` state for at least 5 seconds, `state_confirm = 3` assure at least 10 seconds, etc
     * 
     */
    @Export(name="stateConfirm", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> stateConfirm;

    /**
     * @return Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
     * 
     * **Note:** `state_confirm` would be useful, if you have troubles for creating/updating custom clusters that eventually are reaching `active` state before they are fully installed. For example: setting `state_confirm = 2` will assure that the cluster has been in `active` state for at least 5 seconds, `state_confirm = 3` assure at least 10 seconds, etc
     * 
     */
    public Output<Optional<Integer>> stateConfirm() {
        return Codegen.optional(this.stateConfirm);
    }
    @Export(name="synced", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> synced;

    public Output<Optional<Boolean>> synced() {
        return Codegen.optional(this.synced);
    }
    /**
     * (Computed) System project ID for the cluster sync (string)
     * 
     */
    @Export(name="systemProjectId", refs={String.class}, tree="[0]")
    private Output<String> systemProjectId;

    /**
     * @return (Computed) System project ID for the cluster sync (string)
     * 
     */
    public Output<String> systemProjectId() {
        return this.systemProjectId;
    }
    /**
     * Wait until alerting is up and running. Default: `false` (bool)
     * 
     */
    @Export(name="waitAlerting", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> waitAlerting;

    /**
     * @return Wait until alerting is up and running. Default: `false` (bool)
     * 
     */
    public Output<Optional<Boolean>> waitAlerting() {
        return Codegen.optional(this.waitAlerting);
    }
    /**
     * Wait until all catalogs are downloaded and active. Default: `false` (bool)
     * 
     */
    @Export(name="waitCatalogs", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> waitCatalogs;

    /**
     * @return Wait until all catalogs are downloaded and active. Default: `false` (bool)
     * 
     */
    public Output<Optional<Boolean>> waitCatalogs() {
        return Codegen.optional(this.waitCatalogs);
    }
    /**
     * Wait until monitoring is up and running. Default: `false` (bool)
     * 
     */
    @Export(name="waitMonitoring", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> waitMonitoring;

    /**
     * @return Wait until monitoring is up and running. Default: `false` (bool)
     * 
     */
    public Output<Optional<Boolean>> waitMonitoring() {
        return Codegen.optional(this.waitMonitoring);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ClusterSync(String name) {
        this(name, ClusterSyncArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ClusterSync(String name, ClusterSyncArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ClusterSync(String name, ClusterSyncArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/clusterSync:ClusterSync", name, args == null ? ClusterSyncArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ClusterSync(String name, Output<String> id, @Nullable ClusterSyncState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/clusterSync:ClusterSync", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "kubeConfig"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ClusterSync get(String name, Output<String> id, @Nullable ClusterSyncState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ClusterSync(name, id, state, options);
    }
}
