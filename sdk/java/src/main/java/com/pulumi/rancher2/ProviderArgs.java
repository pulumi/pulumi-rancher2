// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * API Key used to authenticate with the rancher server
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return API Key used to authenticate with the rancher server
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The URL to the rancher API
     * 
     */
    @Import(name="apiUrl", required=true)
    private Output<String> apiUrl;

    /**
     * @return The URL to the rancher API
     * 
     */
    public Output<String> apiUrl() {
        return this.apiUrl;
    }

    /**
     * Bootstrap rancher server
     * 
     */
    @Import(name="bootstrap", json=true)
    private @Nullable Output<Boolean> bootstrap;

    /**
     * @return Bootstrap rancher server
     * 
     */
    public Optional<Output<Boolean>> bootstrap() {
        return Optional.ofNullable(this.bootstrap);
    }

    /**
     * CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false
     * 
     */
    @Import(name="caCerts")
    private @Nullable Output<String> caCerts;

    /**
     * @return CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false
     * 
     */
    public Optional<Output<String>> caCerts() {
        return Optional.ofNullable(this.caCerts);
    }

    /**
     * Allow insecure connections to Rancher. Mandatory if self signed tls and not ca_certs provided
     * 
     */
    @Import(name="insecure", json=true)
    private @Nullable Output<Boolean> insecure;

    /**
     * @return Allow insecure connections to Rancher. Mandatory if self signed tls and not ca_certs provided
     * 
     */
    public Optional<Output<Boolean>> insecure() {
        return Optional.ofNullable(this.insecure);
    }

    /**
     * Rancher connection retries
     * 
     * @deprecated
     * Use timeout instead
     * 
     */
    @Deprecated /* Use timeout instead */
    @Import(name="retries", json=true)
    private @Nullable Output<Integer> retries;

    /**
     * @return Rancher connection retries
     * 
     * @deprecated
     * Use timeout instead
     * 
     */
    @Deprecated /* Use timeout instead */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * API secret used to authenticate with the rancher server
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return API secret used to authenticate with the rancher server
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * Rancher connection timeout (retry every 5s). Golang duration format, ex: &#34;60s&#34;
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    /**
     * @return Rancher connection timeout (retry every 5s). Golang duration format, ex: &#34;60s&#34;
     * 
     */
    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * API token used to authenticate with the rancher server
     * 
     */
    @Import(name="tokenKey")
    private @Nullable Output<String> tokenKey;

    /**
     * @return API token used to authenticate with the rancher server
     * 
     */
    public Optional<Output<String>> tokenKey() {
        return Optional.ofNullable(this.tokenKey);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.accessKey = $.accessKey;
        this.apiUrl = $.apiUrl;
        this.bootstrap = $.bootstrap;
        this.caCerts = $.caCerts;
        this.insecure = $.insecure;
        this.retries = $.retries;
        this.secretKey = $.secretKey;
        this.timeout = $.timeout;
        this.tokenKey = $.tokenKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey API Key used to authenticate with the rancher server
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey API Key used to authenticate with the rancher server
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param apiUrl The URL to the rancher API
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        /**
         * @param apiUrl The URL to the rancher API
         * 
         * @return builder
         * 
         */
        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        /**
         * @param bootstrap Bootstrap rancher server
         * 
         * @return builder
         * 
         */
        public Builder bootstrap(@Nullable Output<Boolean> bootstrap) {
            $.bootstrap = bootstrap;
            return this;
        }

        /**
         * @param bootstrap Bootstrap rancher server
         * 
         * @return builder
         * 
         */
        public Builder bootstrap(Boolean bootstrap) {
            return bootstrap(Output.of(bootstrap));
        }

        /**
         * @param caCerts CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false
         * 
         * @return builder
         * 
         */
        public Builder caCerts(@Nullable Output<String> caCerts) {
            $.caCerts = caCerts;
            return this;
        }

        /**
         * @param caCerts CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false
         * 
         * @return builder
         * 
         */
        public Builder caCerts(String caCerts) {
            return caCerts(Output.of(caCerts));
        }

        /**
         * @param insecure Allow insecure connections to Rancher. Mandatory if self signed tls and not ca_certs provided
         * 
         * @return builder
         * 
         */
        public Builder insecure(@Nullable Output<Boolean> insecure) {
            $.insecure = insecure;
            return this;
        }

        /**
         * @param insecure Allow insecure connections to Rancher. Mandatory if self signed tls and not ca_certs provided
         * 
         * @return builder
         * 
         */
        public Builder insecure(Boolean insecure) {
            return insecure(Output.of(insecure));
        }

        /**
         * @param retries Rancher connection retries
         * 
         * @return builder
         * 
         * @deprecated
         * Use timeout instead
         * 
         */
        @Deprecated /* Use timeout instead */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries Rancher connection retries
         * 
         * @return builder
         * 
         * @deprecated
         * Use timeout instead
         * 
         */
        @Deprecated /* Use timeout instead */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param secretKey API secret used to authenticate with the rancher server
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey API secret used to authenticate with the rancher server
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param timeout Rancher connection timeout (retry every 5s). Golang duration format, ex: &#34;60s&#34;
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Rancher connection timeout (retry every 5s). Golang duration format, ex: &#34;60s&#34;
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param tokenKey API token used to authenticate with the rancher server
         * 
         * @return builder
         * 
         */
        public Builder tokenKey(@Nullable Output<String> tokenKey) {
            $.tokenKey = tokenKey;
            return this;
        }

        /**
         * @param tokenKey API token used to authenticate with the rancher server
         * 
         * @return builder
         * 
         */
        public Builder tokenKey(String tokenKey) {
            return tokenKey(Output.of(tokenKey));
        }

        public ProviderArgs build() {
            $.apiUrl = Objects.requireNonNull($.apiUrl, "expected parameter 'apiUrl' to be non-null");
            $.bootstrap = Codegen.booleanProp("bootstrap").output().arg($.bootstrap).env("RANCHER_BOOTSTRAP").def(false).getNullable();
            $.insecure = Codegen.booleanProp("insecure").output().arg($.insecure).env("RANCHER_INSECURE").def(false).getNullable();
            return $;
        }
    }

}
