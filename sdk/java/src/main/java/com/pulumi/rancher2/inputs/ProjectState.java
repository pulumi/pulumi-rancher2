// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rancher2.inputs.ProjectContainerResourceLimitArgs;
import com.pulumi.rancher2.inputs.ProjectProjectMonitoringInputArgs;
import com.pulumi.rancher2.inputs.ProjectResourceQuotaArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectState Empty = new ProjectState();

    /**
     * Annotations for Node Pool object (map)
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations for Node Pool object (map)
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The cluster id where create project (string)
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The cluster id where create project (string)
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Default containers resource limits on project (List maxitem:1)
     * 
     */
    @Import(name="containerResourceLimit")
    private @Nullable Output<ProjectContainerResourceLimitArgs> containerResourceLimit;

    /**
     * @return Default containers resource limits on project (List maxitem:1)
     * 
     */
    public Optional<Output<ProjectContainerResourceLimitArgs>> containerResourceLimit() {
        return Optional.ofNullable(this.containerResourceLimit);
    }

    /**
     * A project description (string)
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A project description (string)
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable built-in project monitoring. Default `false` (bool)
     * 
     */
    @Import(name="enableProjectMonitoring")
    private @Nullable Output<Boolean> enableProjectMonitoring;

    /**
     * @return Enable built-in project monitoring. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableProjectMonitoring() {
        return Optional.ofNullable(this.enableProjectMonitoring);
    }

    /**
     * Labels for Node Pool object (map)
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels for Node Pool object (map)
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The name of the project (string)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the project (string)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Default Pod Security Policy ID for the project (string)
     * 
     */
    @Import(name="podSecurityPolicyTemplateId")
    private @Nullable Output<String> podSecurityPolicyTemplateId;

    /**
     * @return Default Pod Security Policy ID for the project (string)
     * 
     */
    public Optional<Output<String>> podSecurityPolicyTemplateId() {
        return Optional.ofNullable(this.podSecurityPolicyTemplateId);
    }

    /**
     * Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
     * 
     */
    @Import(name="projectMonitoringInput")
    private @Nullable Output<ProjectProjectMonitoringInputArgs> projectMonitoringInput;

    /**
     * @return Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
     * 
     */
    public Optional<Output<ProjectProjectMonitoringInputArgs>> projectMonitoringInput() {
        return Optional.ofNullable(this.projectMonitoringInput);
    }

    /**
     * Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
     * 
     */
    @Import(name="resourceQuota")
    private @Nullable Output<ProjectResourceQuotaArgs> resourceQuota;

    /**
     * @return Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
     * 
     */
    public Optional<Output<ProjectResourceQuotaArgs>> resourceQuota() {
        return Optional.ofNullable(this.resourceQuota);
    }

    /**
     * Wait for cluster becomes active. Default `false` (bool)
     * 
     */
    @Import(name="waitForCluster")
    private @Nullable Output<Boolean> waitForCluster;

    /**
     * @return Wait for cluster becomes active. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> waitForCluster() {
        return Optional.ofNullable(this.waitForCluster);
    }

    private ProjectState() {}

    private ProjectState(ProjectState $) {
        this.annotations = $.annotations;
        this.clusterId = $.clusterId;
        this.containerResourceLimit = $.containerResourceLimit;
        this.description = $.description;
        this.enableProjectMonitoring = $.enableProjectMonitoring;
        this.labels = $.labels;
        this.name = $.name;
        this.podSecurityPolicyTemplateId = $.podSecurityPolicyTemplateId;
        this.projectMonitoringInput = $.projectMonitoringInput;
        this.resourceQuota = $.resourceQuota;
        this.waitForCluster = $.waitForCluster;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectState $;

        public Builder() {
            $ = new ProjectState();
        }

        public Builder(ProjectState defaults) {
            $ = new ProjectState(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations for Node Pool object (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations for Node Pool object (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param clusterId The cluster id where create project (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The cluster id where create project (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param containerResourceLimit Default containers resource limits on project (List maxitem:1)
         * 
         * @return builder
         * 
         */
        public Builder containerResourceLimit(@Nullable Output<ProjectContainerResourceLimitArgs> containerResourceLimit) {
            $.containerResourceLimit = containerResourceLimit;
            return this;
        }

        /**
         * @param containerResourceLimit Default containers resource limits on project (List maxitem:1)
         * 
         * @return builder
         * 
         */
        public Builder containerResourceLimit(ProjectContainerResourceLimitArgs containerResourceLimit) {
            return containerResourceLimit(Output.of(containerResourceLimit));
        }

        /**
         * @param description A project description (string)
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A project description (string)
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableProjectMonitoring Enable built-in project monitoring. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableProjectMonitoring(@Nullable Output<Boolean> enableProjectMonitoring) {
            $.enableProjectMonitoring = enableProjectMonitoring;
            return this;
        }

        /**
         * @param enableProjectMonitoring Enable built-in project monitoring. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableProjectMonitoring(Boolean enableProjectMonitoring) {
            return enableProjectMonitoring(Output.of(enableProjectMonitoring));
        }

        /**
         * @param labels Labels for Node Pool object (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for Node Pool object (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name The name of the project (string)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the project (string)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param podSecurityPolicyTemplateId Default Pod Security Policy ID for the project (string)
         * 
         * @return builder
         * 
         */
        public Builder podSecurityPolicyTemplateId(@Nullable Output<String> podSecurityPolicyTemplateId) {
            $.podSecurityPolicyTemplateId = podSecurityPolicyTemplateId;
            return this;
        }

        /**
         * @param podSecurityPolicyTemplateId Default Pod Security Policy ID for the project (string)
         * 
         * @return builder
         * 
         */
        public Builder podSecurityPolicyTemplateId(String podSecurityPolicyTemplateId) {
            return podSecurityPolicyTemplateId(Output.of(podSecurityPolicyTemplateId));
        }

        /**
         * @param projectMonitoringInput Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder projectMonitoringInput(@Nullable Output<ProjectProjectMonitoringInputArgs> projectMonitoringInput) {
            $.projectMonitoringInput = projectMonitoringInput;
            return this;
        }

        /**
         * @param projectMonitoringInput Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder projectMonitoringInput(ProjectProjectMonitoringInputArgs projectMonitoringInput) {
            return projectMonitoringInput(Output.of(projectMonitoringInput));
        }

        /**
         * @param resourceQuota Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder resourceQuota(@Nullable Output<ProjectResourceQuotaArgs> resourceQuota) {
            $.resourceQuota = resourceQuota;
            return this;
        }

        /**
         * @param resourceQuota Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder resourceQuota(ProjectResourceQuotaArgs resourceQuota) {
            return resourceQuota(Output.of(resourceQuota));
        }

        /**
         * @param waitForCluster Wait for cluster becomes active. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitForCluster(@Nullable Output<Boolean> waitForCluster) {
            $.waitForCluster = waitForCluster;
            return this;
        }

        /**
         * @param waitForCluster Wait for cluster becomes active. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitForCluster(Boolean waitForCluster) {
            return waitForCluster(Output.of(waitForCluster));
        }

        public ProjectState build() {
            return $;
        }
    }

}
