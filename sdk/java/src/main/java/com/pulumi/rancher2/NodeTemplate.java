// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.NodeTemplateArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.NodeTemplateState;
import com.pulumi.rancher2.outputs.NodeTemplateAmazonec2Config;
import com.pulumi.rancher2.outputs.NodeTemplateAzureConfig;
import com.pulumi.rancher2.outputs.NodeTemplateDigitaloceanConfig;
import com.pulumi.rancher2.outputs.NodeTemplateHarvesterConfig;
import com.pulumi.rancher2.outputs.NodeTemplateHetznerConfig;
import com.pulumi.rancher2.outputs.NodeTemplateLinodeConfig;
import com.pulumi.rancher2.outputs.NodeTemplateNodeTaint;
import com.pulumi.rancher2.outputs.NodeTemplateOpennebulaConfig;
import com.pulumi.rancher2.outputs.NodeTemplateOpenstackConfig;
import com.pulumi.rancher2.outputs.NodeTemplateVsphereConfig;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Rancher v2 Node Template resource. This can be used to create Node Template for Rancher v2 and retrieve their information.
 * 
 * amazonec2, azure, digitalocean, harvester, linode, opennebula, openstack, hetzner, and vsphere drivers are supported for node templates.
 * 
 * **Note** If you are upgrading to Rancher v2.3.3, please take a look to final section
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Node Template can be imported using the Rancher Node Template ID
 * 
 * ```sh
 *  $ pulumi import rancher2:index/nodeTemplate:NodeTemplate foo &amp;lt;node_template_id&amp;gt;
 * ```
 * 
 */
@ResourceType(type="rancher2:index/nodeTemplate:NodeTemplate")
public class NodeTemplate extends com.pulumi.resources.CustomResource {
    /**
     * AWS config for the Node Template (list maxitems:1)
     * 
     */
    @Export(name="amazonec2Config", type=NodeTemplateAmazonec2Config.class, parameters={})
    private Output</* @Nullable */ NodeTemplateAmazonec2Config> amazonec2Config;

    /**
     * @return AWS config for the Node Template (list maxitems:1)
     * 
     */
    public Output<Optional<NodeTemplateAmazonec2Config>> amazonec2Config() {
        return Codegen.optional(this.amazonec2Config);
    }
    /**
     * Annotations for Node Template object (map)
     * 
     */
    @Export(name="annotations", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> annotations;

    /**
     * @return Annotations for Node Template object (map)
     * 
     */
    public Output<Map<String,Object>> annotations() {
        return this.annotations;
    }
    /**
     * Auth certificate authority for the Node Template (string)
     * 
     */
    @Export(name="authCertificateAuthority", type=String.class, parameters={})
    private Output</* @Nullable */ String> authCertificateAuthority;

    /**
     * @return Auth certificate authority for the Node Template (string)
     * 
     */
    public Output<Optional<String>> authCertificateAuthority() {
        return Codegen.optional(this.authCertificateAuthority);
    }
    /**
     * Auth key for the Node Template (string)
     * 
     */
    @Export(name="authKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> authKey;

    /**
     * @return Auth key for the Node Template (string)
     * 
     */
    public Output<Optional<String>> authKey() {
        return Codegen.optional(this.authKey);
    }
    /**
     * Azure config for the Node Template (list maxitems:1)
     * 
     */
    @Export(name="azureConfig", type=NodeTemplateAzureConfig.class, parameters={})
    private Output</* @Nullable */ NodeTemplateAzureConfig> azureConfig;

    /**
     * @return Azure config for the Node Template (list maxitems:1)
     * 
     */
    public Output<Optional<NodeTemplateAzureConfig>> azureConfig() {
        return Codegen.optional(this.azureConfig);
    }
    /**
     * Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)
     * 
     */
    @Export(name="cloudCredentialId", type=String.class, parameters={})
    private Output</* @Nullable */ String> cloudCredentialId;

    /**
     * @return Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)
     * 
     */
    public Output<Optional<String>> cloudCredentialId() {
        return Codegen.optional(this.cloudCredentialId);
    }
    /**
     * Description for the Node Template (string)
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description for the Node Template (string)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Digitalocean config for the Node Template (list maxitems:1)
     * 
     */
    @Export(name="digitaloceanConfig", type=NodeTemplateDigitaloceanConfig.class, parameters={})
    private Output</* @Nullable */ NodeTemplateDigitaloceanConfig> digitaloceanConfig;

    /**
     * @return Digitalocean config for the Node Template (list maxitems:1)
     * 
     */
    public Output<Optional<NodeTemplateDigitaloceanConfig>> digitaloceanConfig() {
        return Codegen.optional(this.digitaloceanConfig);
    }
    /**
     * (Computed) The driver of the node template (string)
     * 
     */
    @Export(name="driver", type=String.class, parameters={})
    private Output<String> driver;

    /**
     * @return (Computed) The driver of the node template (string)
     * 
     */
    public Output<String> driver() {
        return this.driver;
    }
    /**
     * The node driver id used by the node template. It&#39;s required if the node driver isn&#39;t built in Rancher (string)
     * 
     */
    @Export(name="driverId", type=String.class, parameters={})
    private Output<String> driverId;

    /**
     * @return The node driver id used by the node template. It&#39;s required if the node driver isn&#39;t built in Rancher (string)
     * 
     */
    public Output<String> driverId() {
        return this.driverId;
    }
    /**
     * Engine environment for the node template (string)
     * 
     */
    @Export(name="engineEnv", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> engineEnv;

    /**
     * @return Engine environment for the node template (string)
     * 
     */
    public Output<Optional<Map<String,Object>>> engineEnv() {
        return Codegen.optional(this.engineEnv);
    }
    /**
     * Insecure registry for the node template (list)
     * 
     */
    @Export(name="engineInsecureRegistries", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> engineInsecureRegistries;

    /**
     * @return Insecure registry for the node template (list)
     * 
     */
    public Output<Optional<List<String>>> engineInsecureRegistries() {
        return Codegen.optional(this.engineInsecureRegistries);
    }
    /**
     * Docker engine install URL for the node template. Available install docker versions at `https://github.com/rancher/install-docker` (string)
     * 
     */
    @Export(name="engineInstallUrl", type=String.class, parameters={})
    private Output<String> engineInstallUrl;

    /**
     * @return Docker engine install URL for the node template. Available install docker versions at `https://github.com/rancher/install-docker` (string)
     * 
     */
    public Output<String> engineInstallUrl() {
        return this.engineInstallUrl;
    }
    /**
     * Engine label for the node template (string)
     * 
     */
    @Export(name="engineLabel", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> engineLabel;

    /**
     * @return Engine label for the node template (string)
     * 
     */
    public Output<Optional<Map<String,Object>>> engineLabel() {
        return Codegen.optional(this.engineLabel);
    }
    /**
     * Engine options for the node template (map)
     * 
     */
    @Export(name="engineOpt", type=Map.class, parameters={String.class, Object.class})
    private Output</* @Nullable */ Map<String,Object>> engineOpt;

    /**
     * @return Engine options for the node template (map)
     * 
     */
    public Output<Optional<Map<String,Object>>> engineOpt() {
        return Codegen.optional(this.engineOpt);
    }
    /**
     * Engine registry mirror for the node template (list)
     * 
     */
    @Export(name="engineRegistryMirrors", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> engineRegistryMirrors;

    /**
     * @return Engine registry mirror for the node template (list)
     * 
     */
    public Output<Optional<List<String>>> engineRegistryMirrors() {
        return Codegen.optional(this.engineRegistryMirrors);
    }
    /**
     * Engine storage driver for the node template (string)
     * 
     */
    @Export(name="engineStorageDriver", type=String.class, parameters={})
    private Output</* @Nullable */ String> engineStorageDriver;

    /**
     * @return Engine storage driver for the node template (string)
     * 
     */
    public Output<Optional<String>> engineStorageDriver() {
        return Codegen.optional(this.engineStorageDriver);
    }
    /**
     * Harvester config for the Node Template (list maxitems:1)
     * 
     */
    @Export(name="harvesterConfig", type=NodeTemplateHarvesterConfig.class, parameters={})
    private Output</* @Nullable */ NodeTemplateHarvesterConfig> harvesterConfig;

    /**
     * @return Harvester config for the Node Template (list maxitems:1)
     * 
     */
    public Output<Optional<NodeTemplateHarvesterConfig>> harvesterConfig() {
        return Codegen.optional(this.harvesterConfig);
    }
    /**
     * Hetzner config for the Node Template (list maxitems:1)
     * 
     */
    @Export(name="hetznerConfig", type=NodeTemplateHetznerConfig.class, parameters={})
    private Output</* @Nullable */ NodeTemplateHetznerConfig> hetznerConfig;

    /**
     * @return Hetzner config for the Node Template (list maxitems:1)
     * 
     */
    public Output<Optional<NodeTemplateHetznerConfig>> hetznerConfig() {
        return Codegen.optional(this.hetznerConfig);
    }
    /**
     * Labels for Node Template object (map)
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> labels;

    /**
     * @return Labels for Node Template object (map)
     * 
     */
    public Output<Map<String,Object>> labels() {
        return this.labels;
    }
    /**
     * Linode config for the Node Template (list maxitems:1)
     * 
     */
    @Export(name="linodeConfig", type=NodeTemplateLinodeConfig.class, parameters={})
    private Output</* @Nullable */ NodeTemplateLinodeConfig> linodeConfig;

    /**
     * @return Linode config for the Node Template (list maxitems:1)
     * 
     */
    public Output<Optional<NodeTemplateLinodeConfig>> linodeConfig() {
        return Codegen.optional(this.linodeConfig);
    }
    /**
     * The name of the Node Template (string)
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the Node Template (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Node taints. For Rancher v2.3.3 or above (List)
     * 
     */
    @Export(name="nodeTaints", type=List.class, parameters={NodeTemplateNodeTaint.class})
    private Output</* @Nullable */ List<NodeTemplateNodeTaint>> nodeTaints;

    /**
     * @return Node taints. For Rancher v2.3.3 or above (List)
     * 
     */
    public Output<Optional<List<NodeTemplateNodeTaint>>> nodeTaints() {
        return Codegen.optional(this.nodeTaints);
    }
    /**
     * Opennebula config for the Node Template (list maxitems:1)
     * 
     */
    @Export(name="opennebulaConfig", type=NodeTemplateOpennebulaConfig.class, parameters={})
    private Output</* @Nullable */ NodeTemplateOpennebulaConfig> opennebulaConfig;

    /**
     * @return Opennebula config for the Node Template (list maxitems:1)
     * 
     */
    public Output<Optional<NodeTemplateOpennebulaConfig>> opennebulaConfig() {
        return Codegen.optional(this.opennebulaConfig);
    }
    /**
     * Openstack config for the Node Template (list maxitems:1)
     * 
     */
    @Export(name="openstackConfig", type=NodeTemplateOpenstackConfig.class, parameters={})
    private Output</* @Nullable */ NodeTemplateOpenstackConfig> openstackConfig;

    /**
     * @return Openstack config for the Node Template (list maxitems:1)
     * 
     */
    public Output<Optional<NodeTemplateOpenstackConfig>> openstackConfig() {
        return Codegen.optional(this.openstackConfig);
    }
    /**
     * Engine storage driver for the node template (bool)
     * 
     */
    @Export(name="useInternalIpAddress", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useInternalIpAddress;

    /**
     * @return Engine storage driver for the node template (bool)
     * 
     */
    public Output<Optional<Boolean>> useInternalIpAddress() {
        return Codegen.optional(this.useInternalIpAddress);
    }
    /**
     * vSphere config for the Node Template (list maxitems:1)
     * 
     */
    @Export(name="vsphereConfig", type=NodeTemplateVsphereConfig.class, parameters={})
    private Output</* @Nullable */ NodeTemplateVsphereConfig> vsphereConfig;

    /**
     * @return vSphere config for the Node Template (list maxitems:1)
     * 
     */
    public Output<Optional<NodeTemplateVsphereConfig>> vsphereConfig() {
        return Codegen.optional(this.vsphereConfig);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NodeTemplate(String name) {
        this(name, NodeTemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NodeTemplate(String name, @Nullable NodeTemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NodeTemplate(String name, @Nullable NodeTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/nodeTemplate:NodeTemplate", name, args == null ? NodeTemplateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NodeTemplate(String name, Output<String> id, @Nullable NodeTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/nodeTemplate:NodeTemplate", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NodeTemplate get(String name, Output<String> id, @Nullable NodeTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NodeTemplate(name, id, state, options);
    }
}
