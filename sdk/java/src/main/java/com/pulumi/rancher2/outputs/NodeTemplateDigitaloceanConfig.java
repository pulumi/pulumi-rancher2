// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NodeTemplateDigitaloceanConfig {
    /**
     * @return Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    private final @Nullable String accessToken;
    /**
     * @return Enable backups for droplet. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean backups;
    /**
     * @return Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
     * 
     */
    private final @Nullable String image;
    /**
     * @return Enable ipv6 for droplet. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean ipv6;
    /**
     * @return Enable monitoring for droplet. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean monitoring;
    /**
     * @return Enable private networking for droplet. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean privateNetworking;
    /**
     * @return OpenStack region name (string)
     * 
     */
    private final @Nullable String region;
    /**
     * @return Digital Ocean size. Default `s-1vcpu-1gb` (string)
     * 
     */
    private final @Nullable String size;
    /**
     * @return SSH key fingerprint (string)
     * 
     */
    private final @Nullable String sshKeyFingerprint;
    /**
     * @return SSH private key path (string)
     * 
     */
    private final @Nullable String sshKeyPath;
    /**
     * @return If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
     * 
     */
    private final @Nullable String sshPort;
    /**
     * @return If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
     * 
     */
    private final @Nullable String sshUser;
    /**
     * @return vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
     * 
     */
    private final @Nullable String tags;
    /**
     * @return Path to file with cloud-init user-data (string)
     * 
     */
    private final @Nullable String userdata;

    @CustomType.Constructor
    private NodeTemplateDigitaloceanConfig(
        @CustomType.Parameter("accessToken") @Nullable String accessToken,
        @CustomType.Parameter("backups") @Nullable Boolean backups,
        @CustomType.Parameter("image") @Nullable String image,
        @CustomType.Parameter("ipv6") @Nullable Boolean ipv6,
        @CustomType.Parameter("monitoring") @Nullable Boolean monitoring,
        @CustomType.Parameter("privateNetworking") @Nullable Boolean privateNetworking,
        @CustomType.Parameter("region") @Nullable String region,
        @CustomType.Parameter("size") @Nullable String size,
        @CustomType.Parameter("sshKeyFingerprint") @Nullable String sshKeyFingerprint,
        @CustomType.Parameter("sshKeyPath") @Nullable String sshKeyPath,
        @CustomType.Parameter("sshPort") @Nullable String sshPort,
        @CustomType.Parameter("sshUser") @Nullable String sshUser,
        @CustomType.Parameter("tags") @Nullable String tags,
        @CustomType.Parameter("userdata") @Nullable String userdata) {
        this.accessToken = accessToken;
        this.backups = backups;
        this.image = image;
        this.ipv6 = ipv6;
        this.monitoring = monitoring;
        this.privateNetworking = privateNetworking;
        this.region = region;
        this.size = size;
        this.sshKeyFingerprint = sshKeyFingerprint;
        this.sshKeyPath = sshKeyPath;
        this.sshPort = sshPort;
        this.sshUser = sshUser;
        this.tags = tags;
        this.userdata = userdata;
    }

    /**
     * @return Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }
    /**
     * @return Enable backups for droplet. Default `false` (bool)
     * 
     */
    public Optional<Boolean> backups() {
        return Optional.ofNullable(this.backups);
    }
    /**
     * @return Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return Enable ipv6 for droplet. Default `false` (bool)
     * 
     */
    public Optional<Boolean> ipv6() {
        return Optional.ofNullable(this.ipv6);
    }
    /**
     * @return Enable monitoring for droplet. Default `false` (bool)
     * 
     */
    public Optional<Boolean> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }
    /**
     * @return Enable private networking for droplet. Default `false` (bool)
     * 
     */
    public Optional<Boolean> privateNetworking() {
        return Optional.ofNullable(this.privateNetworking);
    }
    /**
     * @return OpenStack region name (string)
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return Digital Ocean size. Default `s-1vcpu-1gb` (string)
     * 
     */
    public Optional<String> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return SSH key fingerprint (string)
     * 
     */
    public Optional<String> sshKeyFingerprint() {
        return Optional.ofNullable(this.sshKeyFingerprint);
    }
    /**
     * @return SSH private key path (string)
     * 
     */
    public Optional<String> sshKeyPath() {
        return Optional.ofNullable(this.sshKeyPath);
    }
    /**
     * @return If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
     * 
     */
    public Optional<String> sshPort() {
        return Optional.ofNullable(this.sshPort);
    }
    /**
     * @return If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
     * 
     */
    public Optional<String> sshUser() {
        return Optional.ofNullable(this.sshUser);
    }
    /**
     * @return vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
     * 
     */
    public Optional<String> tags() {
        return Optional.ofNullable(this.tags);
    }
    /**
     * @return Path to file with cloud-init user-data (string)
     * 
     */
    public Optional<String> userdata() {
        return Optional.ofNullable(this.userdata);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeTemplateDigitaloceanConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accessToken;
        private @Nullable Boolean backups;
        private @Nullable String image;
        private @Nullable Boolean ipv6;
        private @Nullable Boolean monitoring;
        private @Nullable Boolean privateNetworking;
        private @Nullable String region;
        private @Nullable String size;
        private @Nullable String sshKeyFingerprint;
        private @Nullable String sshKeyPath;
        private @Nullable String sshPort;
        private @Nullable String sshUser;
        private @Nullable String tags;
        private @Nullable String userdata;

        public Builder() {
    	      // Empty
        }

        public Builder(NodeTemplateDigitaloceanConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.backups = defaults.backups;
    	      this.image = defaults.image;
    	      this.ipv6 = defaults.ipv6;
    	      this.monitoring = defaults.monitoring;
    	      this.privateNetworking = defaults.privateNetworking;
    	      this.region = defaults.region;
    	      this.size = defaults.size;
    	      this.sshKeyFingerprint = defaults.sshKeyFingerprint;
    	      this.sshKeyPath = defaults.sshKeyPath;
    	      this.sshPort = defaults.sshPort;
    	      this.sshUser = defaults.sshUser;
    	      this.tags = defaults.tags;
    	      this.userdata = defaults.userdata;
        }

        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }
        public Builder backups(@Nullable Boolean backups) {
            this.backups = backups;
            return this;
        }
        public Builder image(@Nullable String image) {
            this.image = image;
            return this;
        }
        public Builder ipv6(@Nullable Boolean ipv6) {
            this.ipv6 = ipv6;
            return this;
        }
        public Builder monitoring(@Nullable Boolean monitoring) {
            this.monitoring = monitoring;
            return this;
        }
        public Builder privateNetworking(@Nullable Boolean privateNetworking) {
            this.privateNetworking = privateNetworking;
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        public Builder size(@Nullable String size) {
            this.size = size;
            return this;
        }
        public Builder sshKeyFingerprint(@Nullable String sshKeyFingerprint) {
            this.sshKeyFingerprint = sshKeyFingerprint;
            return this;
        }
        public Builder sshKeyPath(@Nullable String sshKeyPath) {
            this.sshKeyPath = sshKeyPath;
            return this;
        }
        public Builder sshPort(@Nullable String sshPort) {
            this.sshPort = sshPort;
            return this;
        }
        public Builder sshUser(@Nullable String sshUser) {
            this.sshUser = sshUser;
            return this;
        }
        public Builder tags(@Nullable String tags) {
            this.tags = tags;
            return this;
        }
        public Builder userdata(@Nullable String userdata) {
            this.userdata = userdata;
            return this;
        }        public NodeTemplateDigitaloceanConfig build() {
            return new NodeTemplateDigitaloceanConfig(accessToken, backups, image, ipv6, monitoring, privateNetworking, region, size, sshKeyFingerprint, sshKeyPath, sshPort, sshUser, tags, userdata);
        }
    }
}
