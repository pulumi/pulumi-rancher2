// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MachineConfigV2OpenstackConfig {
    /**
     * @return OpenStack active timeout Default `200` (string)
     * 
     */
    private final @Nullable String activeTimeout;
    /**
     * @return OpenStack application credential id. Conflicts with `application_credential_name` (string)
     * 
     */
    private final @Nullable String applicationCredentialId;
    /**
     * @return OpenStack application credential name. Conflicts with `application_credential_id` (string)
     * 
     */
    private final @Nullable String applicationCredentialName;
    /**
     * @return OpenStack application credential secret (string)
     * 
     */
    private final @Nullable String applicationCredentialSecret;
    /**
     * @return OpenStack authentication URL (string)
     * 
     */
    private final String authUrl;
    /**
     * @return OpenStack availability zone (string)
     * 
     */
    private final String availabilityZone;
    /**
     * @return Enable booting from volume. Default is `false` (bool)
     * 
     */
    private final @Nullable Boolean bootFromVolume;
    /**
     * @return CA certificate bundle to verify against (string)
     * 
     */
    private final @Nullable String cacert;
    /**
     * @return Enables the OpenStack config drive for the instance. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean configDrive;
    /**
     * @return OpenStack domain ID. Identity v3 only. Conflicts with `domain_name` (string)
     * 
     */
    private final @Nullable String domainId;
    /**
     * @return OpenStack domain name. Identity v3 only. Conflicts with `domain_id` (string)
     * 
     */
    private final @Nullable String domainName;
    /**
     * @return OpenStack endpoint type. adminURL, internalURL or publicURL (string)
     * 
     */
    private final @Nullable String endpointType;
    /**
     * @return OpenStack flavor id to use for the instance. Conflicts with `flavor_name` (string)
     * 
     */
    private final @Nullable String flavorId;
    /**
     * @return OpenStack flavor name to use for the instance. Conflicts with `flavor_id` (string)
     * 
     */
    private final @Nullable String flavorName;
    /**
     * @return OpenStack floating IP pool to get an IP from to assign to the instance (string)
     * 
     */
    private final @Nullable String floatingIpPool;
    /**
     * @return OpenStack image id to use for the instance. Conflicts with `image_name` (string)
     * 
     */
    private final @Nullable String imageId;
    /**
     * @return OpenStack image name to use for the instance. Conflicts with `image_id` (string)
     * 
     */
    private final @Nullable String imageName;
    /**
     * @return Disable TLS credential checking. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean insecure;
    /**
     * @return OpenStack version of IP address assigned for the machine Default `4` (string)
     * 
     */
    private final @Nullable String ipVersion;
    /**
     * @return OpenStack keypair to use to SSH to the instance (string)
     * 
     */
    private final @Nullable String keypairName;
    /**
     * @return OpenStack network id the machine will be connected on. Conflicts with `net_name` (string)
     * 
     */
    private final @Nullable String netId;
    /**
     * @return OpenStack network name the machine will be connected on. Conflicts with `net_id` (string)
     * 
     */
    private final @Nullable String netName;
    /**
     * @return Use the nova networking services instead of neutron (string)
     * 
     */
    private final @Nullable Boolean novaNetwork;
    /**
     * @return OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    private final @Nullable String password;
    /**
     * @return Private key content to use for SSH (string)
     * 
     */
    private final @Nullable String privateKeyFile;
    /**
     * @return OpenStack region name (string)
     * 
     */
    private final String region;
    /**
     * @return OpenStack comma separated security groups for the machine (string)
     * 
     */
    private final @Nullable String secGroups;
    /**
     * @return If using a non-B2D image you can specify the ssh port. Default `22` (string)
     * 
     */
    private final @Nullable String sshPort;
    /**
     * @return If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
     * 
     */
    private final @Nullable String sshUser;
    /**
     * @return OpenStack tenant domain id. Conflicts with `tenant_domain_name` (string)
     * 
     */
    private final @Nullable String tenantDomainId;
    /**
     * @return OpenStack tenant domain name. Conflicts with `tenant_domain_id` (string)
     * 
     */
    private final @Nullable String tenantDomainName;
    /**
     * @return OpenStack tenant id. Conflicts with `tenant_name` (string)
     * 
     */
    private final @Nullable String tenantId;
    /**
     * @return OpenStack tenant name. Conflicts with `tenant_id` (string)
     * 
     */
    private final @Nullable String tenantName;
    /**
     * @return File containing an openstack userdata script (string)
     * 
     */
    private final @Nullable String userDataFile;
    /**
     * @return OpenStack user domain id. Conflicts with `user_domain_name` (string)
     * 
     */
    private final @Nullable String userDomainId;
    /**
     * @return OpenStack user domain name. Conflicts with `user_domain_id` (string)
     * 
     */
    private final @Nullable String userDomainName;
    /**
     * @return OpenStack username (string)
     * 
     */
    private final @Nullable String username;
    /**
     * @return OpenStack volume device path (attaching). Applicable only when `boot_from_volume` is `true`. Omit for auto `/dev/vdb`. (string)
     * &gt; **Note**: `Required+` denotes that either the _name or _id is required but you cannot use both.
     * **Note**: `Required++` denotes that either the _name or _id is required unless `application_credential_id` is defined.
     * 
     */
    private final @Nullable String volumeDevicePath;
    /**
     * @return OpenStack volume id of existing volume. Applicable only when `boot_from_volume` is `true` (string)
     * 
     */
    private final @Nullable String volumeId;
    /**
     * @return OpenStack volume name of existing volume. Applicable only when `boot_from_volume` is `true` (string)
     * 
     */
    private final @Nullable String volumeName;
    /**
     * @return OpenStack volume size (GiB). Required when `boot_from_volume` is `true` (string)
     * 
     */
    private final @Nullable String volumeSize;
    /**
     * @return OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
     * 
     */
    private final @Nullable String volumeType;

    @CustomType.Constructor
    private MachineConfigV2OpenstackConfig(
        @CustomType.Parameter("activeTimeout") @Nullable String activeTimeout,
        @CustomType.Parameter("applicationCredentialId") @Nullable String applicationCredentialId,
        @CustomType.Parameter("applicationCredentialName") @Nullable String applicationCredentialName,
        @CustomType.Parameter("applicationCredentialSecret") @Nullable String applicationCredentialSecret,
        @CustomType.Parameter("authUrl") String authUrl,
        @CustomType.Parameter("availabilityZone") String availabilityZone,
        @CustomType.Parameter("bootFromVolume") @Nullable Boolean bootFromVolume,
        @CustomType.Parameter("cacert") @Nullable String cacert,
        @CustomType.Parameter("configDrive") @Nullable Boolean configDrive,
        @CustomType.Parameter("domainId") @Nullable String domainId,
        @CustomType.Parameter("domainName") @Nullable String domainName,
        @CustomType.Parameter("endpointType") @Nullable String endpointType,
        @CustomType.Parameter("flavorId") @Nullable String flavorId,
        @CustomType.Parameter("flavorName") @Nullable String flavorName,
        @CustomType.Parameter("floatingIpPool") @Nullable String floatingIpPool,
        @CustomType.Parameter("imageId") @Nullable String imageId,
        @CustomType.Parameter("imageName") @Nullable String imageName,
        @CustomType.Parameter("insecure") @Nullable Boolean insecure,
        @CustomType.Parameter("ipVersion") @Nullable String ipVersion,
        @CustomType.Parameter("keypairName") @Nullable String keypairName,
        @CustomType.Parameter("netId") @Nullable String netId,
        @CustomType.Parameter("netName") @Nullable String netName,
        @CustomType.Parameter("novaNetwork") @Nullable Boolean novaNetwork,
        @CustomType.Parameter("password") @Nullable String password,
        @CustomType.Parameter("privateKeyFile") @Nullable String privateKeyFile,
        @CustomType.Parameter("region") String region,
        @CustomType.Parameter("secGroups") @Nullable String secGroups,
        @CustomType.Parameter("sshPort") @Nullable String sshPort,
        @CustomType.Parameter("sshUser") @Nullable String sshUser,
        @CustomType.Parameter("tenantDomainId") @Nullable String tenantDomainId,
        @CustomType.Parameter("tenantDomainName") @Nullable String tenantDomainName,
        @CustomType.Parameter("tenantId") @Nullable String tenantId,
        @CustomType.Parameter("tenantName") @Nullable String tenantName,
        @CustomType.Parameter("userDataFile") @Nullable String userDataFile,
        @CustomType.Parameter("userDomainId") @Nullable String userDomainId,
        @CustomType.Parameter("userDomainName") @Nullable String userDomainName,
        @CustomType.Parameter("username") @Nullable String username,
        @CustomType.Parameter("volumeDevicePath") @Nullable String volumeDevicePath,
        @CustomType.Parameter("volumeId") @Nullable String volumeId,
        @CustomType.Parameter("volumeName") @Nullable String volumeName,
        @CustomType.Parameter("volumeSize") @Nullable String volumeSize,
        @CustomType.Parameter("volumeType") @Nullable String volumeType) {
        this.activeTimeout = activeTimeout;
        this.applicationCredentialId = applicationCredentialId;
        this.applicationCredentialName = applicationCredentialName;
        this.applicationCredentialSecret = applicationCredentialSecret;
        this.authUrl = authUrl;
        this.availabilityZone = availabilityZone;
        this.bootFromVolume = bootFromVolume;
        this.cacert = cacert;
        this.configDrive = configDrive;
        this.domainId = domainId;
        this.domainName = domainName;
        this.endpointType = endpointType;
        this.flavorId = flavorId;
        this.flavorName = flavorName;
        this.floatingIpPool = floatingIpPool;
        this.imageId = imageId;
        this.imageName = imageName;
        this.insecure = insecure;
        this.ipVersion = ipVersion;
        this.keypairName = keypairName;
        this.netId = netId;
        this.netName = netName;
        this.novaNetwork = novaNetwork;
        this.password = password;
        this.privateKeyFile = privateKeyFile;
        this.region = region;
        this.secGroups = secGroups;
        this.sshPort = sshPort;
        this.sshUser = sshUser;
        this.tenantDomainId = tenantDomainId;
        this.tenantDomainName = tenantDomainName;
        this.tenantId = tenantId;
        this.tenantName = tenantName;
        this.userDataFile = userDataFile;
        this.userDomainId = userDomainId;
        this.userDomainName = userDomainName;
        this.username = username;
        this.volumeDevicePath = volumeDevicePath;
        this.volumeId = volumeId;
        this.volumeName = volumeName;
        this.volumeSize = volumeSize;
        this.volumeType = volumeType;
    }

    /**
     * @return OpenStack active timeout Default `200` (string)
     * 
     */
    public Optional<String> activeTimeout() {
        return Optional.ofNullable(this.activeTimeout);
    }
    /**
     * @return OpenStack application credential id. Conflicts with `application_credential_name` (string)
     * 
     */
    public Optional<String> applicationCredentialId() {
        return Optional.ofNullable(this.applicationCredentialId);
    }
    /**
     * @return OpenStack application credential name. Conflicts with `application_credential_id` (string)
     * 
     */
    public Optional<String> applicationCredentialName() {
        return Optional.ofNullable(this.applicationCredentialName);
    }
    /**
     * @return OpenStack application credential secret (string)
     * 
     */
    public Optional<String> applicationCredentialSecret() {
        return Optional.ofNullable(this.applicationCredentialSecret);
    }
    /**
     * @return OpenStack authentication URL (string)
     * 
     */
    public String authUrl() {
        return this.authUrl;
    }
    /**
     * @return OpenStack availability zone (string)
     * 
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }
    /**
     * @return Enable booting from volume. Default is `false` (bool)
     * 
     */
    public Optional<Boolean> bootFromVolume() {
        return Optional.ofNullable(this.bootFromVolume);
    }
    /**
     * @return CA certificate bundle to verify against (string)
     * 
     */
    public Optional<String> cacert() {
        return Optional.ofNullable(this.cacert);
    }
    /**
     * @return Enables the OpenStack config drive for the instance. Default `false` (bool)
     * 
     */
    public Optional<Boolean> configDrive() {
        return Optional.ofNullable(this.configDrive);
    }
    /**
     * @return OpenStack domain ID. Identity v3 only. Conflicts with `domain_name` (string)
     * 
     */
    public Optional<String> domainId() {
        return Optional.ofNullable(this.domainId);
    }
    /**
     * @return OpenStack domain name. Identity v3 only. Conflicts with `domain_id` (string)
     * 
     */
    public Optional<String> domainName() {
        return Optional.ofNullable(this.domainName);
    }
    /**
     * @return OpenStack endpoint type. adminURL, internalURL or publicURL (string)
     * 
     */
    public Optional<String> endpointType() {
        return Optional.ofNullable(this.endpointType);
    }
    /**
     * @return OpenStack flavor id to use for the instance. Conflicts with `flavor_name` (string)
     * 
     */
    public Optional<String> flavorId() {
        return Optional.ofNullable(this.flavorId);
    }
    /**
     * @return OpenStack flavor name to use for the instance. Conflicts with `flavor_id` (string)
     * 
     */
    public Optional<String> flavorName() {
        return Optional.ofNullable(this.flavorName);
    }
    /**
     * @return OpenStack floating IP pool to get an IP from to assign to the instance (string)
     * 
     */
    public Optional<String> floatingIpPool() {
        return Optional.ofNullable(this.floatingIpPool);
    }
    /**
     * @return OpenStack image id to use for the instance. Conflicts with `image_name` (string)
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    /**
     * @return OpenStack image name to use for the instance. Conflicts with `image_id` (string)
     * 
     */
    public Optional<String> imageName() {
        return Optional.ofNullable(this.imageName);
    }
    /**
     * @return Disable TLS credential checking. Default `false` (bool)
     * 
     */
    public Optional<Boolean> insecure() {
        return Optional.ofNullable(this.insecure);
    }
    /**
     * @return OpenStack version of IP address assigned for the machine Default `4` (string)
     * 
     */
    public Optional<String> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }
    /**
     * @return OpenStack keypair to use to SSH to the instance (string)
     * 
     */
    public Optional<String> keypairName() {
        return Optional.ofNullable(this.keypairName);
    }
    /**
     * @return OpenStack network id the machine will be connected on. Conflicts with `net_name` (string)
     * 
     */
    public Optional<String> netId() {
        return Optional.ofNullable(this.netId);
    }
    /**
     * @return OpenStack network name the machine will be connected on. Conflicts with `net_id` (string)
     * 
     */
    public Optional<String> netName() {
        return Optional.ofNullable(this.netName);
    }
    /**
     * @return Use the nova networking services instead of neutron (string)
     * 
     */
    public Optional<Boolean> novaNetwork() {
        return Optional.ofNullable(this.novaNetwork);
    }
    /**
     * @return OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Private key content to use for SSH (string)
     * 
     */
    public Optional<String> privateKeyFile() {
        return Optional.ofNullable(this.privateKeyFile);
    }
    /**
     * @return OpenStack region name (string)
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return OpenStack comma separated security groups for the machine (string)
     * 
     */
    public Optional<String> secGroups() {
        return Optional.ofNullable(this.secGroups);
    }
    /**
     * @return If using a non-B2D image you can specify the ssh port. Default `22` (string)
     * 
     */
    public Optional<String> sshPort() {
        return Optional.ofNullable(this.sshPort);
    }
    /**
     * @return If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
     * 
     */
    public Optional<String> sshUser() {
        return Optional.ofNullable(this.sshUser);
    }
    /**
     * @return OpenStack tenant domain id. Conflicts with `tenant_domain_name` (string)
     * 
     */
    public Optional<String> tenantDomainId() {
        return Optional.ofNullable(this.tenantDomainId);
    }
    /**
     * @return OpenStack tenant domain name. Conflicts with `tenant_domain_id` (string)
     * 
     */
    public Optional<String> tenantDomainName() {
        return Optional.ofNullable(this.tenantDomainName);
    }
    /**
     * @return OpenStack tenant id. Conflicts with `tenant_name` (string)
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    /**
     * @return OpenStack tenant name. Conflicts with `tenant_id` (string)
     * 
     */
    public Optional<String> tenantName() {
        return Optional.ofNullable(this.tenantName);
    }
    /**
     * @return File containing an openstack userdata script (string)
     * 
     */
    public Optional<String> userDataFile() {
        return Optional.ofNullable(this.userDataFile);
    }
    /**
     * @return OpenStack user domain id. Conflicts with `user_domain_name` (string)
     * 
     */
    public Optional<String> userDomainId() {
        return Optional.ofNullable(this.userDomainId);
    }
    /**
     * @return OpenStack user domain name. Conflicts with `user_domain_id` (string)
     * 
     */
    public Optional<String> userDomainName() {
        return Optional.ofNullable(this.userDomainName);
    }
    /**
     * @return OpenStack username (string)
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    /**
     * @return OpenStack volume device path (attaching). Applicable only when `boot_from_volume` is `true`. Omit for auto `/dev/vdb`. (string)
     * &gt; **Note**: `Required+` denotes that either the _name or _id is required but you cannot use both.
     * **Note**: `Required++` denotes that either the _name or _id is required unless `application_credential_id` is defined.
     * 
     */
    public Optional<String> volumeDevicePath() {
        return Optional.ofNullable(this.volumeDevicePath);
    }
    /**
     * @return OpenStack volume id of existing volume. Applicable only when `boot_from_volume` is `true` (string)
     * 
     */
    public Optional<String> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }
    /**
     * @return OpenStack volume name of existing volume. Applicable only when `boot_from_volume` is `true` (string)
     * 
     */
    public Optional<String> volumeName() {
        return Optional.ofNullable(this.volumeName);
    }
    /**
     * @return OpenStack volume size (GiB). Required when `boot_from_volume` is `true` (string)
     * 
     */
    public Optional<String> volumeSize() {
        return Optional.ofNullable(this.volumeSize);
    }
    /**
     * @return OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
     * 
     */
    public Optional<String> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MachineConfigV2OpenstackConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String activeTimeout;
        private @Nullable String applicationCredentialId;
        private @Nullable String applicationCredentialName;
        private @Nullable String applicationCredentialSecret;
        private String authUrl;
        private String availabilityZone;
        private @Nullable Boolean bootFromVolume;
        private @Nullable String cacert;
        private @Nullable Boolean configDrive;
        private @Nullable String domainId;
        private @Nullable String domainName;
        private @Nullable String endpointType;
        private @Nullable String flavorId;
        private @Nullable String flavorName;
        private @Nullable String floatingIpPool;
        private @Nullable String imageId;
        private @Nullable String imageName;
        private @Nullable Boolean insecure;
        private @Nullable String ipVersion;
        private @Nullable String keypairName;
        private @Nullable String netId;
        private @Nullable String netName;
        private @Nullable Boolean novaNetwork;
        private @Nullable String password;
        private @Nullable String privateKeyFile;
        private String region;
        private @Nullable String secGroups;
        private @Nullable String sshPort;
        private @Nullable String sshUser;
        private @Nullable String tenantDomainId;
        private @Nullable String tenantDomainName;
        private @Nullable String tenantId;
        private @Nullable String tenantName;
        private @Nullable String userDataFile;
        private @Nullable String userDomainId;
        private @Nullable String userDomainName;
        private @Nullable String username;
        private @Nullable String volumeDevicePath;
        private @Nullable String volumeId;
        private @Nullable String volumeName;
        private @Nullable String volumeSize;
        private @Nullable String volumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(MachineConfigV2OpenstackConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeTimeout = defaults.activeTimeout;
    	      this.applicationCredentialId = defaults.applicationCredentialId;
    	      this.applicationCredentialName = defaults.applicationCredentialName;
    	      this.applicationCredentialSecret = defaults.applicationCredentialSecret;
    	      this.authUrl = defaults.authUrl;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.bootFromVolume = defaults.bootFromVolume;
    	      this.cacert = defaults.cacert;
    	      this.configDrive = defaults.configDrive;
    	      this.domainId = defaults.domainId;
    	      this.domainName = defaults.domainName;
    	      this.endpointType = defaults.endpointType;
    	      this.flavorId = defaults.flavorId;
    	      this.flavorName = defaults.flavorName;
    	      this.floatingIpPool = defaults.floatingIpPool;
    	      this.imageId = defaults.imageId;
    	      this.imageName = defaults.imageName;
    	      this.insecure = defaults.insecure;
    	      this.ipVersion = defaults.ipVersion;
    	      this.keypairName = defaults.keypairName;
    	      this.netId = defaults.netId;
    	      this.netName = defaults.netName;
    	      this.novaNetwork = defaults.novaNetwork;
    	      this.password = defaults.password;
    	      this.privateKeyFile = defaults.privateKeyFile;
    	      this.region = defaults.region;
    	      this.secGroups = defaults.secGroups;
    	      this.sshPort = defaults.sshPort;
    	      this.sshUser = defaults.sshUser;
    	      this.tenantDomainId = defaults.tenantDomainId;
    	      this.tenantDomainName = defaults.tenantDomainName;
    	      this.tenantId = defaults.tenantId;
    	      this.tenantName = defaults.tenantName;
    	      this.userDataFile = defaults.userDataFile;
    	      this.userDomainId = defaults.userDomainId;
    	      this.userDomainName = defaults.userDomainName;
    	      this.username = defaults.username;
    	      this.volumeDevicePath = defaults.volumeDevicePath;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeName = defaults.volumeName;
    	      this.volumeSize = defaults.volumeSize;
    	      this.volumeType = defaults.volumeType;
        }

        public Builder activeTimeout(@Nullable String activeTimeout) {
            this.activeTimeout = activeTimeout;
            return this;
        }
        public Builder applicationCredentialId(@Nullable String applicationCredentialId) {
            this.applicationCredentialId = applicationCredentialId;
            return this;
        }
        public Builder applicationCredentialName(@Nullable String applicationCredentialName) {
            this.applicationCredentialName = applicationCredentialName;
            return this;
        }
        public Builder applicationCredentialSecret(@Nullable String applicationCredentialSecret) {
            this.applicationCredentialSecret = applicationCredentialSecret;
            return this;
        }
        public Builder authUrl(String authUrl) {
            this.authUrl = Objects.requireNonNull(authUrl);
            return this;
        }
        public Builder availabilityZone(String availabilityZone) {
            this.availabilityZone = Objects.requireNonNull(availabilityZone);
            return this;
        }
        public Builder bootFromVolume(@Nullable Boolean bootFromVolume) {
            this.bootFromVolume = bootFromVolume;
            return this;
        }
        public Builder cacert(@Nullable String cacert) {
            this.cacert = cacert;
            return this;
        }
        public Builder configDrive(@Nullable Boolean configDrive) {
            this.configDrive = configDrive;
            return this;
        }
        public Builder domainId(@Nullable String domainId) {
            this.domainId = domainId;
            return this;
        }
        public Builder domainName(@Nullable String domainName) {
            this.domainName = domainName;
            return this;
        }
        public Builder endpointType(@Nullable String endpointType) {
            this.endpointType = endpointType;
            return this;
        }
        public Builder flavorId(@Nullable String flavorId) {
            this.flavorId = flavorId;
            return this;
        }
        public Builder flavorName(@Nullable String flavorName) {
            this.flavorName = flavorName;
            return this;
        }
        public Builder floatingIpPool(@Nullable String floatingIpPool) {
            this.floatingIpPool = floatingIpPool;
            return this;
        }
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        public Builder imageName(@Nullable String imageName) {
            this.imageName = imageName;
            return this;
        }
        public Builder insecure(@Nullable Boolean insecure) {
            this.insecure = insecure;
            return this;
        }
        public Builder ipVersion(@Nullable String ipVersion) {
            this.ipVersion = ipVersion;
            return this;
        }
        public Builder keypairName(@Nullable String keypairName) {
            this.keypairName = keypairName;
            return this;
        }
        public Builder netId(@Nullable String netId) {
            this.netId = netId;
            return this;
        }
        public Builder netName(@Nullable String netName) {
            this.netName = netName;
            return this;
        }
        public Builder novaNetwork(@Nullable Boolean novaNetwork) {
            this.novaNetwork = novaNetwork;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        public Builder privateKeyFile(@Nullable String privateKeyFile) {
            this.privateKeyFile = privateKeyFile;
            return this;
        }
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        public Builder secGroups(@Nullable String secGroups) {
            this.secGroups = secGroups;
            return this;
        }
        public Builder sshPort(@Nullable String sshPort) {
            this.sshPort = sshPort;
            return this;
        }
        public Builder sshUser(@Nullable String sshUser) {
            this.sshUser = sshUser;
            return this;
        }
        public Builder tenantDomainId(@Nullable String tenantDomainId) {
            this.tenantDomainId = tenantDomainId;
            return this;
        }
        public Builder tenantDomainName(@Nullable String tenantDomainName) {
            this.tenantDomainName = tenantDomainName;
            return this;
        }
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        public Builder tenantName(@Nullable String tenantName) {
            this.tenantName = tenantName;
            return this;
        }
        public Builder userDataFile(@Nullable String userDataFile) {
            this.userDataFile = userDataFile;
            return this;
        }
        public Builder userDomainId(@Nullable String userDomainId) {
            this.userDomainId = userDomainId;
            return this;
        }
        public Builder userDomainName(@Nullable String userDomainName) {
            this.userDomainName = userDomainName;
            return this;
        }
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }
        public Builder volumeDevicePath(@Nullable String volumeDevicePath) {
            this.volumeDevicePath = volumeDevicePath;
            return this;
        }
        public Builder volumeId(@Nullable String volumeId) {
            this.volumeId = volumeId;
            return this;
        }
        public Builder volumeName(@Nullable String volumeName) {
            this.volumeName = volumeName;
            return this;
        }
        public Builder volumeSize(@Nullable String volumeSize) {
            this.volumeSize = volumeSize;
            return this;
        }
        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = volumeType;
            return this;
        }        public MachineConfigV2OpenstackConfig build() {
            return new MachineConfigV2OpenstackConfig(activeTimeout, applicationCredentialId, applicationCredentialName, applicationCredentialSecret, authUrl, availabilityZone, bootFromVolume, cacert, configDrive, domainId, domainName, endpointType, flavorId, flavorName, floatingIpPool, imageId, imageName, insecure, ipVersion, keypairName, netId, netName, novaNetwork, password, privateKeyFile, region, secGroups, sshPort, sshUser, tenantDomainId, tenantDomainName, tenantId, tenantName, userDataFile, userDomainId, userDomainName, username, volumeDevicePath, volumeId, volumeName, volumeSize, volumeType);
        }
    }
}
