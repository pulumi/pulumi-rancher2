// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer {
    private Boolean createMonitor;
    private String floatingNetworkId;
    private String lbMethod;
    private String lbProvider;
    private String lbVersion;
    private Boolean manageSecurityGroups;
    private @Nullable String monitorDelay;
    private @Nullable Integer monitorMaxRetries;
    private @Nullable String monitorTimeout;
    private String subnetId;
    private Boolean useOctavia;

    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer() {}
    public Boolean createMonitor() {
        return this.createMonitor;
    }
    public String floatingNetworkId() {
        return this.floatingNetworkId;
    }
    public String lbMethod() {
        return this.lbMethod;
    }
    public String lbProvider() {
        return this.lbProvider;
    }
    public String lbVersion() {
        return this.lbVersion;
    }
    public Boolean manageSecurityGroups() {
        return this.manageSecurityGroups;
    }
    public Optional<String> monitorDelay() {
        return Optional.ofNullable(this.monitorDelay);
    }
    public Optional<Integer> monitorMaxRetries() {
        return Optional.ofNullable(this.monitorMaxRetries);
    }
    public Optional<String> monitorTimeout() {
        return Optional.ofNullable(this.monitorTimeout);
    }
    public String subnetId() {
        return this.subnetId;
    }
    public Boolean useOctavia() {
        return this.useOctavia;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean createMonitor;
        private String floatingNetworkId;
        private String lbMethod;
        private String lbProvider;
        private String lbVersion;
        private Boolean manageSecurityGroups;
        private @Nullable String monitorDelay;
        private @Nullable Integer monitorMaxRetries;
        private @Nullable String monitorTimeout;
        private String subnetId;
        private Boolean useOctavia;
        public Builder() {}
        public Builder(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createMonitor = defaults.createMonitor;
    	      this.floatingNetworkId = defaults.floatingNetworkId;
    	      this.lbMethod = defaults.lbMethod;
    	      this.lbProvider = defaults.lbProvider;
    	      this.lbVersion = defaults.lbVersion;
    	      this.manageSecurityGroups = defaults.manageSecurityGroups;
    	      this.monitorDelay = defaults.monitorDelay;
    	      this.monitorMaxRetries = defaults.monitorMaxRetries;
    	      this.monitorTimeout = defaults.monitorTimeout;
    	      this.subnetId = defaults.subnetId;
    	      this.useOctavia = defaults.useOctavia;
        }

        @CustomType.Setter
        public Builder createMonitor(Boolean createMonitor) {
            if (createMonitor == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer", "createMonitor");
            }
            this.createMonitor = createMonitor;
            return this;
        }
        @CustomType.Setter
        public Builder floatingNetworkId(String floatingNetworkId) {
            if (floatingNetworkId == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer", "floatingNetworkId");
            }
            this.floatingNetworkId = floatingNetworkId;
            return this;
        }
        @CustomType.Setter
        public Builder lbMethod(String lbMethod) {
            if (lbMethod == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer", "lbMethod");
            }
            this.lbMethod = lbMethod;
            return this;
        }
        @CustomType.Setter
        public Builder lbProvider(String lbProvider) {
            if (lbProvider == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer", "lbProvider");
            }
            this.lbProvider = lbProvider;
            return this;
        }
        @CustomType.Setter
        public Builder lbVersion(String lbVersion) {
            if (lbVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer", "lbVersion");
            }
            this.lbVersion = lbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder manageSecurityGroups(Boolean manageSecurityGroups) {
            if (manageSecurityGroups == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer", "manageSecurityGroups");
            }
            this.manageSecurityGroups = manageSecurityGroups;
            return this;
        }
        @CustomType.Setter
        public Builder monitorDelay(@Nullable String monitorDelay) {

            this.monitorDelay = monitorDelay;
            return this;
        }
        @CustomType.Setter
        public Builder monitorMaxRetries(@Nullable Integer monitorMaxRetries) {

            this.monitorMaxRetries = monitorMaxRetries;
            return this;
        }
        @CustomType.Setter
        public Builder monitorTimeout(@Nullable String monitorTimeout) {

            this.monitorTimeout = monitorTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder useOctavia(Boolean useOctavia) {
            if (useOctavia == null) {
              throw new MissingRequiredPropertyException("GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer", "useOctavia");
            }
            this.useOctavia = useOctavia;
            return this;
        }
        public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer build() {
            final var _resultValue = new GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer();
            _resultValue.createMonitor = createMonitor;
            _resultValue.floatingNetworkId = floatingNetworkId;
            _resultValue.lbMethod = lbMethod;
            _resultValue.lbProvider = lbProvider;
            _resultValue.lbVersion = lbVersion;
            _resultValue.manageSecurityGroups = manageSecurityGroups;
            _resultValue.monitorDelay = monitorDelay;
            _resultValue.monitorMaxRetries = monitorMaxRetries;
            _resultValue.monitorTimeout = monitorTimeout;
            _resultValue.subnetId = subnetId;
            _resultValue.useOctavia = useOctavia;
            return _resultValue;
        }
    }
}
