// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterRkeConfigNetworkAciNetworkProvider {
    private String aep;
    private List<String> apicHosts;
    private @Nullable String apicRefreshTickerAdjust;
    private @Nullable String apicRefreshTime;
    private @Nullable String apicSubscriptionDelay;
    private String apicUserCrt;
    private String apicUserKey;
    private String apicUserName;
    private @Nullable String capic;
    private @Nullable String controllerLogLevel;
    private @Nullable String disablePeriodicSnatGlobalInfoSync;
    private @Nullable String disableWaitForNetwork;
    private @Nullable String dropLogEnable;
    private @Nullable String durationWaitForNetwork;
    private @Nullable String enableEndpointSlice;
    private String encapType;
    private @Nullable String epRegistry;
    private String externDynamic;
    private String externStatic;
    private @Nullable String gbpPodSubnet;
    private @Nullable String hostAgentLogLevel;
    private @Nullable String imagePullPolicy;
    private @Nullable String imagePullSecret;
    private @Nullable String infraVlan;
    private @Nullable String installIstio;
    private @Nullable String istioProfile;
    private @Nullable List<String> kafkaBrokers;
    private @Nullable String kafkaClientCrt;
    private @Nullable String kafkaClientKey;
    private String kubeApiVlan;
    private String l3out;
    private List<String> l3outExternalNetworks;
    private @Nullable String maxNodesSvcGraph;
    private String mcastRangeEnd;
    private String mcastRangeStart;
    private @Nullable String mtuHeadRoom;
    private @Nullable String multusDisable;
    private @Nullable String noPriorityClass;
    private @Nullable String nodePodIfEnable;
    private String nodeSubnet;
    private String nodeSvcSubnet;
    private @Nullable String opflexClientSsl;
    private @Nullable String opflexDeviceDeleteTimeout;
    private @Nullable String opflexLogLevel;
    private @Nullable String opflexMode;
    private @Nullable String opflexServerPort;
    private @Nullable String overlayVrfName;
    private @Nullable String ovsMemoryLimit;
    private @Nullable String pbrTrackingNonSnat;
    private @Nullable String podSubnetChunkSize;
    private @Nullable String runGbpContainer;
    private @Nullable String runOpflexServerContainer;
    private @Nullable String serviceMonitorInterval;
    private String serviceVlan;
    private @Nullable String snatContractScope;
    private @Nullable String snatNamespace;
    private @Nullable String snatPortRangeEnd;
    private @Nullable String snatPortRangeStart;
    private @Nullable String snatPortsPerNode;
    private @Nullable String sriovEnable;
    private @Nullable String subnetDomainName;
    private String systemId;
    private @Nullable String tenant;
    private String token;
    private @Nullable String useAciAnywhereCrd;
    private @Nullable String useAciCniPriorityClass;
    private @Nullable String useClusterRole;
    private @Nullable String useHostNetnsVolume;
    private @Nullable String useOpflexServerVolume;
    private @Nullable String usePrivilegedContainer;
    private @Nullable String vmmController;
    private @Nullable String vmmDomain;
    private String vrfName;
    private String vrfTenant;

    private GetClusterRkeConfigNetworkAciNetworkProvider() {}
    public String aep() {
        return this.aep;
    }
    public List<String> apicHosts() {
        return this.apicHosts;
    }
    public Optional<String> apicRefreshTickerAdjust() {
        return Optional.ofNullable(this.apicRefreshTickerAdjust);
    }
    public Optional<String> apicRefreshTime() {
        return Optional.ofNullable(this.apicRefreshTime);
    }
    public Optional<String> apicSubscriptionDelay() {
        return Optional.ofNullable(this.apicSubscriptionDelay);
    }
    public String apicUserCrt() {
        return this.apicUserCrt;
    }
    public String apicUserKey() {
        return this.apicUserKey;
    }
    public String apicUserName() {
        return this.apicUserName;
    }
    public Optional<String> capic() {
        return Optional.ofNullable(this.capic);
    }
    public Optional<String> controllerLogLevel() {
        return Optional.ofNullable(this.controllerLogLevel);
    }
    public Optional<String> disablePeriodicSnatGlobalInfoSync() {
        return Optional.ofNullable(this.disablePeriodicSnatGlobalInfoSync);
    }
    public Optional<String> disableWaitForNetwork() {
        return Optional.ofNullable(this.disableWaitForNetwork);
    }
    public Optional<String> dropLogEnable() {
        return Optional.ofNullable(this.dropLogEnable);
    }
    public Optional<String> durationWaitForNetwork() {
        return Optional.ofNullable(this.durationWaitForNetwork);
    }
    public Optional<String> enableEndpointSlice() {
        return Optional.ofNullable(this.enableEndpointSlice);
    }
    public String encapType() {
        return this.encapType;
    }
    public Optional<String> epRegistry() {
        return Optional.ofNullable(this.epRegistry);
    }
    public String externDynamic() {
        return this.externDynamic;
    }
    public String externStatic() {
        return this.externStatic;
    }
    public Optional<String> gbpPodSubnet() {
        return Optional.ofNullable(this.gbpPodSubnet);
    }
    public Optional<String> hostAgentLogLevel() {
        return Optional.ofNullable(this.hostAgentLogLevel);
    }
    public Optional<String> imagePullPolicy() {
        return Optional.ofNullable(this.imagePullPolicy);
    }
    public Optional<String> imagePullSecret() {
        return Optional.ofNullable(this.imagePullSecret);
    }
    public Optional<String> infraVlan() {
        return Optional.ofNullable(this.infraVlan);
    }
    public Optional<String> installIstio() {
        return Optional.ofNullable(this.installIstio);
    }
    public Optional<String> istioProfile() {
        return Optional.ofNullable(this.istioProfile);
    }
    public List<String> kafkaBrokers() {
        return this.kafkaBrokers == null ? List.of() : this.kafkaBrokers;
    }
    public Optional<String> kafkaClientCrt() {
        return Optional.ofNullable(this.kafkaClientCrt);
    }
    public Optional<String> kafkaClientKey() {
        return Optional.ofNullable(this.kafkaClientKey);
    }
    public String kubeApiVlan() {
        return this.kubeApiVlan;
    }
    public String l3out() {
        return this.l3out;
    }
    public List<String> l3outExternalNetworks() {
        return this.l3outExternalNetworks;
    }
    public Optional<String> maxNodesSvcGraph() {
        return Optional.ofNullable(this.maxNodesSvcGraph);
    }
    public String mcastRangeEnd() {
        return this.mcastRangeEnd;
    }
    public String mcastRangeStart() {
        return this.mcastRangeStart;
    }
    public Optional<String> mtuHeadRoom() {
        return Optional.ofNullable(this.mtuHeadRoom);
    }
    public Optional<String> multusDisable() {
        return Optional.ofNullable(this.multusDisable);
    }
    public Optional<String> noPriorityClass() {
        return Optional.ofNullable(this.noPriorityClass);
    }
    public Optional<String> nodePodIfEnable() {
        return Optional.ofNullable(this.nodePodIfEnable);
    }
    public String nodeSubnet() {
        return this.nodeSubnet;
    }
    public String nodeSvcSubnet() {
        return this.nodeSvcSubnet;
    }
    public Optional<String> opflexClientSsl() {
        return Optional.ofNullable(this.opflexClientSsl);
    }
    public Optional<String> opflexDeviceDeleteTimeout() {
        return Optional.ofNullable(this.opflexDeviceDeleteTimeout);
    }
    public Optional<String> opflexLogLevel() {
        return Optional.ofNullable(this.opflexLogLevel);
    }
    public Optional<String> opflexMode() {
        return Optional.ofNullable(this.opflexMode);
    }
    public Optional<String> opflexServerPort() {
        return Optional.ofNullable(this.opflexServerPort);
    }
    public Optional<String> overlayVrfName() {
        return Optional.ofNullable(this.overlayVrfName);
    }
    public Optional<String> ovsMemoryLimit() {
        return Optional.ofNullable(this.ovsMemoryLimit);
    }
    public Optional<String> pbrTrackingNonSnat() {
        return Optional.ofNullable(this.pbrTrackingNonSnat);
    }
    public Optional<String> podSubnetChunkSize() {
        return Optional.ofNullable(this.podSubnetChunkSize);
    }
    public Optional<String> runGbpContainer() {
        return Optional.ofNullable(this.runGbpContainer);
    }
    public Optional<String> runOpflexServerContainer() {
        return Optional.ofNullable(this.runOpflexServerContainer);
    }
    public Optional<String> serviceMonitorInterval() {
        return Optional.ofNullable(this.serviceMonitorInterval);
    }
    public String serviceVlan() {
        return this.serviceVlan;
    }
    public Optional<String> snatContractScope() {
        return Optional.ofNullable(this.snatContractScope);
    }
    public Optional<String> snatNamespace() {
        return Optional.ofNullable(this.snatNamespace);
    }
    public Optional<String> snatPortRangeEnd() {
        return Optional.ofNullable(this.snatPortRangeEnd);
    }
    public Optional<String> snatPortRangeStart() {
        return Optional.ofNullable(this.snatPortRangeStart);
    }
    public Optional<String> snatPortsPerNode() {
        return Optional.ofNullable(this.snatPortsPerNode);
    }
    public Optional<String> sriovEnable() {
        return Optional.ofNullable(this.sriovEnable);
    }
    public Optional<String> subnetDomainName() {
        return Optional.ofNullable(this.subnetDomainName);
    }
    public String systemId() {
        return this.systemId;
    }
    public Optional<String> tenant() {
        return Optional.ofNullable(this.tenant);
    }
    public String token() {
        return this.token;
    }
    public Optional<String> useAciAnywhereCrd() {
        return Optional.ofNullable(this.useAciAnywhereCrd);
    }
    public Optional<String> useAciCniPriorityClass() {
        return Optional.ofNullable(this.useAciCniPriorityClass);
    }
    public Optional<String> useClusterRole() {
        return Optional.ofNullable(this.useClusterRole);
    }
    public Optional<String> useHostNetnsVolume() {
        return Optional.ofNullable(this.useHostNetnsVolume);
    }
    public Optional<String> useOpflexServerVolume() {
        return Optional.ofNullable(this.useOpflexServerVolume);
    }
    public Optional<String> usePrivilegedContainer() {
        return Optional.ofNullable(this.usePrivilegedContainer);
    }
    public Optional<String> vmmController() {
        return Optional.ofNullable(this.vmmController);
    }
    public Optional<String> vmmDomain() {
        return Optional.ofNullable(this.vmmDomain);
    }
    public String vrfName() {
        return this.vrfName;
    }
    public String vrfTenant() {
        return this.vrfTenant;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterRkeConfigNetworkAciNetworkProvider defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aep;
        private List<String> apicHosts;
        private @Nullable String apicRefreshTickerAdjust;
        private @Nullable String apicRefreshTime;
        private @Nullable String apicSubscriptionDelay;
        private String apicUserCrt;
        private String apicUserKey;
        private String apicUserName;
        private @Nullable String capic;
        private @Nullable String controllerLogLevel;
        private @Nullable String disablePeriodicSnatGlobalInfoSync;
        private @Nullable String disableWaitForNetwork;
        private @Nullable String dropLogEnable;
        private @Nullable String durationWaitForNetwork;
        private @Nullable String enableEndpointSlice;
        private String encapType;
        private @Nullable String epRegistry;
        private String externDynamic;
        private String externStatic;
        private @Nullable String gbpPodSubnet;
        private @Nullable String hostAgentLogLevel;
        private @Nullable String imagePullPolicy;
        private @Nullable String imagePullSecret;
        private @Nullable String infraVlan;
        private @Nullable String installIstio;
        private @Nullable String istioProfile;
        private @Nullable List<String> kafkaBrokers;
        private @Nullable String kafkaClientCrt;
        private @Nullable String kafkaClientKey;
        private String kubeApiVlan;
        private String l3out;
        private List<String> l3outExternalNetworks;
        private @Nullable String maxNodesSvcGraph;
        private String mcastRangeEnd;
        private String mcastRangeStart;
        private @Nullable String mtuHeadRoom;
        private @Nullable String multusDisable;
        private @Nullable String noPriorityClass;
        private @Nullable String nodePodIfEnable;
        private String nodeSubnet;
        private String nodeSvcSubnet;
        private @Nullable String opflexClientSsl;
        private @Nullable String opflexDeviceDeleteTimeout;
        private @Nullable String opflexLogLevel;
        private @Nullable String opflexMode;
        private @Nullable String opflexServerPort;
        private @Nullable String overlayVrfName;
        private @Nullable String ovsMemoryLimit;
        private @Nullable String pbrTrackingNonSnat;
        private @Nullable String podSubnetChunkSize;
        private @Nullable String runGbpContainer;
        private @Nullable String runOpflexServerContainer;
        private @Nullable String serviceMonitorInterval;
        private String serviceVlan;
        private @Nullable String snatContractScope;
        private @Nullable String snatNamespace;
        private @Nullable String snatPortRangeEnd;
        private @Nullable String snatPortRangeStart;
        private @Nullable String snatPortsPerNode;
        private @Nullable String sriovEnable;
        private @Nullable String subnetDomainName;
        private String systemId;
        private @Nullable String tenant;
        private String token;
        private @Nullable String useAciAnywhereCrd;
        private @Nullable String useAciCniPriorityClass;
        private @Nullable String useClusterRole;
        private @Nullable String useHostNetnsVolume;
        private @Nullable String useOpflexServerVolume;
        private @Nullable String usePrivilegedContainer;
        private @Nullable String vmmController;
        private @Nullable String vmmDomain;
        private String vrfName;
        private String vrfTenant;
        public Builder() {}
        public Builder(GetClusterRkeConfigNetworkAciNetworkProvider defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aep = defaults.aep;
    	      this.apicHosts = defaults.apicHosts;
    	      this.apicRefreshTickerAdjust = defaults.apicRefreshTickerAdjust;
    	      this.apicRefreshTime = defaults.apicRefreshTime;
    	      this.apicSubscriptionDelay = defaults.apicSubscriptionDelay;
    	      this.apicUserCrt = defaults.apicUserCrt;
    	      this.apicUserKey = defaults.apicUserKey;
    	      this.apicUserName = defaults.apicUserName;
    	      this.capic = defaults.capic;
    	      this.controllerLogLevel = defaults.controllerLogLevel;
    	      this.disablePeriodicSnatGlobalInfoSync = defaults.disablePeriodicSnatGlobalInfoSync;
    	      this.disableWaitForNetwork = defaults.disableWaitForNetwork;
    	      this.dropLogEnable = defaults.dropLogEnable;
    	      this.durationWaitForNetwork = defaults.durationWaitForNetwork;
    	      this.enableEndpointSlice = defaults.enableEndpointSlice;
    	      this.encapType = defaults.encapType;
    	      this.epRegistry = defaults.epRegistry;
    	      this.externDynamic = defaults.externDynamic;
    	      this.externStatic = defaults.externStatic;
    	      this.gbpPodSubnet = defaults.gbpPodSubnet;
    	      this.hostAgentLogLevel = defaults.hostAgentLogLevel;
    	      this.imagePullPolicy = defaults.imagePullPolicy;
    	      this.imagePullSecret = defaults.imagePullSecret;
    	      this.infraVlan = defaults.infraVlan;
    	      this.installIstio = defaults.installIstio;
    	      this.istioProfile = defaults.istioProfile;
    	      this.kafkaBrokers = defaults.kafkaBrokers;
    	      this.kafkaClientCrt = defaults.kafkaClientCrt;
    	      this.kafkaClientKey = defaults.kafkaClientKey;
    	      this.kubeApiVlan = defaults.kubeApiVlan;
    	      this.l3out = defaults.l3out;
    	      this.l3outExternalNetworks = defaults.l3outExternalNetworks;
    	      this.maxNodesSvcGraph = defaults.maxNodesSvcGraph;
    	      this.mcastRangeEnd = defaults.mcastRangeEnd;
    	      this.mcastRangeStart = defaults.mcastRangeStart;
    	      this.mtuHeadRoom = defaults.mtuHeadRoom;
    	      this.multusDisable = defaults.multusDisable;
    	      this.noPriorityClass = defaults.noPriorityClass;
    	      this.nodePodIfEnable = defaults.nodePodIfEnable;
    	      this.nodeSubnet = defaults.nodeSubnet;
    	      this.nodeSvcSubnet = defaults.nodeSvcSubnet;
    	      this.opflexClientSsl = defaults.opflexClientSsl;
    	      this.opflexDeviceDeleteTimeout = defaults.opflexDeviceDeleteTimeout;
    	      this.opflexLogLevel = defaults.opflexLogLevel;
    	      this.opflexMode = defaults.opflexMode;
    	      this.opflexServerPort = defaults.opflexServerPort;
    	      this.overlayVrfName = defaults.overlayVrfName;
    	      this.ovsMemoryLimit = defaults.ovsMemoryLimit;
    	      this.pbrTrackingNonSnat = defaults.pbrTrackingNonSnat;
    	      this.podSubnetChunkSize = defaults.podSubnetChunkSize;
    	      this.runGbpContainer = defaults.runGbpContainer;
    	      this.runOpflexServerContainer = defaults.runOpflexServerContainer;
    	      this.serviceMonitorInterval = defaults.serviceMonitorInterval;
    	      this.serviceVlan = defaults.serviceVlan;
    	      this.snatContractScope = defaults.snatContractScope;
    	      this.snatNamespace = defaults.snatNamespace;
    	      this.snatPortRangeEnd = defaults.snatPortRangeEnd;
    	      this.snatPortRangeStart = defaults.snatPortRangeStart;
    	      this.snatPortsPerNode = defaults.snatPortsPerNode;
    	      this.sriovEnable = defaults.sriovEnable;
    	      this.subnetDomainName = defaults.subnetDomainName;
    	      this.systemId = defaults.systemId;
    	      this.tenant = defaults.tenant;
    	      this.token = defaults.token;
    	      this.useAciAnywhereCrd = defaults.useAciAnywhereCrd;
    	      this.useAciCniPriorityClass = defaults.useAciCniPriorityClass;
    	      this.useClusterRole = defaults.useClusterRole;
    	      this.useHostNetnsVolume = defaults.useHostNetnsVolume;
    	      this.useOpflexServerVolume = defaults.useOpflexServerVolume;
    	      this.usePrivilegedContainer = defaults.usePrivilegedContainer;
    	      this.vmmController = defaults.vmmController;
    	      this.vmmDomain = defaults.vmmDomain;
    	      this.vrfName = defaults.vrfName;
    	      this.vrfTenant = defaults.vrfTenant;
        }

        @CustomType.Setter
        public Builder aep(String aep) {
            if (aep == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "aep");
            }
            this.aep = aep;
            return this;
        }
        @CustomType.Setter
        public Builder apicHosts(List<String> apicHosts) {
            if (apicHosts == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "apicHosts");
            }
            this.apicHosts = apicHosts;
            return this;
        }
        public Builder apicHosts(String... apicHosts) {
            return apicHosts(List.of(apicHosts));
        }
        @CustomType.Setter
        public Builder apicRefreshTickerAdjust(@Nullable String apicRefreshTickerAdjust) {

            this.apicRefreshTickerAdjust = apicRefreshTickerAdjust;
            return this;
        }
        @CustomType.Setter
        public Builder apicRefreshTime(@Nullable String apicRefreshTime) {

            this.apicRefreshTime = apicRefreshTime;
            return this;
        }
        @CustomType.Setter
        public Builder apicSubscriptionDelay(@Nullable String apicSubscriptionDelay) {

            this.apicSubscriptionDelay = apicSubscriptionDelay;
            return this;
        }
        @CustomType.Setter
        public Builder apicUserCrt(String apicUserCrt) {
            if (apicUserCrt == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "apicUserCrt");
            }
            this.apicUserCrt = apicUserCrt;
            return this;
        }
        @CustomType.Setter
        public Builder apicUserKey(String apicUserKey) {
            if (apicUserKey == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "apicUserKey");
            }
            this.apicUserKey = apicUserKey;
            return this;
        }
        @CustomType.Setter
        public Builder apicUserName(String apicUserName) {
            if (apicUserName == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "apicUserName");
            }
            this.apicUserName = apicUserName;
            return this;
        }
        @CustomType.Setter
        public Builder capic(@Nullable String capic) {

            this.capic = capic;
            return this;
        }
        @CustomType.Setter
        public Builder controllerLogLevel(@Nullable String controllerLogLevel) {

            this.controllerLogLevel = controllerLogLevel;
            return this;
        }
        @CustomType.Setter
        public Builder disablePeriodicSnatGlobalInfoSync(@Nullable String disablePeriodicSnatGlobalInfoSync) {

            this.disablePeriodicSnatGlobalInfoSync = disablePeriodicSnatGlobalInfoSync;
            return this;
        }
        @CustomType.Setter
        public Builder disableWaitForNetwork(@Nullable String disableWaitForNetwork) {

            this.disableWaitForNetwork = disableWaitForNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder dropLogEnable(@Nullable String dropLogEnable) {

            this.dropLogEnable = dropLogEnable;
            return this;
        }
        @CustomType.Setter
        public Builder durationWaitForNetwork(@Nullable String durationWaitForNetwork) {

            this.durationWaitForNetwork = durationWaitForNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder enableEndpointSlice(@Nullable String enableEndpointSlice) {

            this.enableEndpointSlice = enableEndpointSlice;
            return this;
        }
        @CustomType.Setter
        public Builder encapType(String encapType) {
            if (encapType == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "encapType");
            }
            this.encapType = encapType;
            return this;
        }
        @CustomType.Setter
        public Builder epRegistry(@Nullable String epRegistry) {

            this.epRegistry = epRegistry;
            return this;
        }
        @CustomType.Setter
        public Builder externDynamic(String externDynamic) {
            if (externDynamic == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "externDynamic");
            }
            this.externDynamic = externDynamic;
            return this;
        }
        @CustomType.Setter
        public Builder externStatic(String externStatic) {
            if (externStatic == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "externStatic");
            }
            this.externStatic = externStatic;
            return this;
        }
        @CustomType.Setter
        public Builder gbpPodSubnet(@Nullable String gbpPodSubnet) {

            this.gbpPodSubnet = gbpPodSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder hostAgentLogLevel(@Nullable String hostAgentLogLevel) {

            this.hostAgentLogLevel = hostAgentLogLevel;
            return this;
        }
        @CustomType.Setter
        public Builder imagePullPolicy(@Nullable String imagePullPolicy) {

            this.imagePullPolicy = imagePullPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder imagePullSecret(@Nullable String imagePullSecret) {

            this.imagePullSecret = imagePullSecret;
            return this;
        }
        @CustomType.Setter
        public Builder infraVlan(@Nullable String infraVlan) {

            this.infraVlan = infraVlan;
            return this;
        }
        @CustomType.Setter
        public Builder installIstio(@Nullable String installIstio) {

            this.installIstio = installIstio;
            return this;
        }
        @CustomType.Setter
        public Builder istioProfile(@Nullable String istioProfile) {

            this.istioProfile = istioProfile;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaBrokers(@Nullable List<String> kafkaBrokers) {

            this.kafkaBrokers = kafkaBrokers;
            return this;
        }
        public Builder kafkaBrokers(String... kafkaBrokers) {
            return kafkaBrokers(List.of(kafkaBrokers));
        }
        @CustomType.Setter
        public Builder kafkaClientCrt(@Nullable String kafkaClientCrt) {

            this.kafkaClientCrt = kafkaClientCrt;
            return this;
        }
        @CustomType.Setter
        public Builder kafkaClientKey(@Nullable String kafkaClientKey) {

            this.kafkaClientKey = kafkaClientKey;
            return this;
        }
        @CustomType.Setter
        public Builder kubeApiVlan(String kubeApiVlan) {
            if (kubeApiVlan == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "kubeApiVlan");
            }
            this.kubeApiVlan = kubeApiVlan;
            return this;
        }
        @CustomType.Setter
        public Builder l3out(String l3out) {
            if (l3out == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "l3out");
            }
            this.l3out = l3out;
            return this;
        }
        @CustomType.Setter
        public Builder l3outExternalNetworks(List<String> l3outExternalNetworks) {
            if (l3outExternalNetworks == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "l3outExternalNetworks");
            }
            this.l3outExternalNetworks = l3outExternalNetworks;
            return this;
        }
        public Builder l3outExternalNetworks(String... l3outExternalNetworks) {
            return l3outExternalNetworks(List.of(l3outExternalNetworks));
        }
        @CustomType.Setter
        public Builder maxNodesSvcGraph(@Nullable String maxNodesSvcGraph) {

            this.maxNodesSvcGraph = maxNodesSvcGraph;
            return this;
        }
        @CustomType.Setter
        public Builder mcastRangeEnd(String mcastRangeEnd) {
            if (mcastRangeEnd == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "mcastRangeEnd");
            }
            this.mcastRangeEnd = mcastRangeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder mcastRangeStart(String mcastRangeStart) {
            if (mcastRangeStart == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "mcastRangeStart");
            }
            this.mcastRangeStart = mcastRangeStart;
            return this;
        }
        @CustomType.Setter
        public Builder mtuHeadRoom(@Nullable String mtuHeadRoom) {

            this.mtuHeadRoom = mtuHeadRoom;
            return this;
        }
        @CustomType.Setter
        public Builder multusDisable(@Nullable String multusDisable) {

            this.multusDisable = multusDisable;
            return this;
        }
        @CustomType.Setter
        public Builder noPriorityClass(@Nullable String noPriorityClass) {

            this.noPriorityClass = noPriorityClass;
            return this;
        }
        @CustomType.Setter
        public Builder nodePodIfEnable(@Nullable String nodePodIfEnable) {

            this.nodePodIfEnable = nodePodIfEnable;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSubnet(String nodeSubnet) {
            if (nodeSubnet == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "nodeSubnet");
            }
            this.nodeSubnet = nodeSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder nodeSvcSubnet(String nodeSvcSubnet) {
            if (nodeSvcSubnet == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "nodeSvcSubnet");
            }
            this.nodeSvcSubnet = nodeSvcSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder opflexClientSsl(@Nullable String opflexClientSsl) {

            this.opflexClientSsl = opflexClientSsl;
            return this;
        }
        @CustomType.Setter
        public Builder opflexDeviceDeleteTimeout(@Nullable String opflexDeviceDeleteTimeout) {

            this.opflexDeviceDeleteTimeout = opflexDeviceDeleteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder opflexLogLevel(@Nullable String opflexLogLevel) {

            this.opflexLogLevel = opflexLogLevel;
            return this;
        }
        @CustomType.Setter
        public Builder opflexMode(@Nullable String opflexMode) {

            this.opflexMode = opflexMode;
            return this;
        }
        @CustomType.Setter
        public Builder opflexServerPort(@Nullable String opflexServerPort) {

            this.opflexServerPort = opflexServerPort;
            return this;
        }
        @CustomType.Setter
        public Builder overlayVrfName(@Nullable String overlayVrfName) {

            this.overlayVrfName = overlayVrfName;
            return this;
        }
        @CustomType.Setter
        public Builder ovsMemoryLimit(@Nullable String ovsMemoryLimit) {

            this.ovsMemoryLimit = ovsMemoryLimit;
            return this;
        }
        @CustomType.Setter
        public Builder pbrTrackingNonSnat(@Nullable String pbrTrackingNonSnat) {

            this.pbrTrackingNonSnat = pbrTrackingNonSnat;
            return this;
        }
        @CustomType.Setter
        public Builder podSubnetChunkSize(@Nullable String podSubnetChunkSize) {

            this.podSubnetChunkSize = podSubnetChunkSize;
            return this;
        }
        @CustomType.Setter
        public Builder runGbpContainer(@Nullable String runGbpContainer) {

            this.runGbpContainer = runGbpContainer;
            return this;
        }
        @CustomType.Setter
        public Builder runOpflexServerContainer(@Nullable String runOpflexServerContainer) {

            this.runOpflexServerContainer = runOpflexServerContainer;
            return this;
        }
        @CustomType.Setter
        public Builder serviceMonitorInterval(@Nullable String serviceMonitorInterval) {

            this.serviceMonitorInterval = serviceMonitorInterval;
            return this;
        }
        @CustomType.Setter
        public Builder serviceVlan(String serviceVlan) {
            if (serviceVlan == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "serviceVlan");
            }
            this.serviceVlan = serviceVlan;
            return this;
        }
        @CustomType.Setter
        public Builder snatContractScope(@Nullable String snatContractScope) {

            this.snatContractScope = snatContractScope;
            return this;
        }
        @CustomType.Setter
        public Builder snatNamespace(@Nullable String snatNamespace) {

            this.snatNamespace = snatNamespace;
            return this;
        }
        @CustomType.Setter
        public Builder snatPortRangeEnd(@Nullable String snatPortRangeEnd) {

            this.snatPortRangeEnd = snatPortRangeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder snatPortRangeStart(@Nullable String snatPortRangeStart) {

            this.snatPortRangeStart = snatPortRangeStart;
            return this;
        }
        @CustomType.Setter
        public Builder snatPortsPerNode(@Nullable String snatPortsPerNode) {

            this.snatPortsPerNode = snatPortsPerNode;
            return this;
        }
        @CustomType.Setter
        public Builder sriovEnable(@Nullable String sriovEnable) {

            this.sriovEnable = sriovEnable;
            return this;
        }
        @CustomType.Setter
        public Builder subnetDomainName(@Nullable String subnetDomainName) {

            this.subnetDomainName = subnetDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder systemId(String systemId) {
            if (systemId == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "systemId");
            }
            this.systemId = systemId;
            return this;
        }
        @CustomType.Setter
        public Builder tenant(@Nullable String tenant) {

            this.tenant = tenant;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            if (token == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "token");
            }
            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder useAciAnywhereCrd(@Nullable String useAciAnywhereCrd) {

            this.useAciAnywhereCrd = useAciAnywhereCrd;
            return this;
        }
        @CustomType.Setter
        public Builder useAciCniPriorityClass(@Nullable String useAciCniPriorityClass) {

            this.useAciCniPriorityClass = useAciCniPriorityClass;
            return this;
        }
        @CustomType.Setter
        public Builder useClusterRole(@Nullable String useClusterRole) {

            this.useClusterRole = useClusterRole;
            return this;
        }
        @CustomType.Setter
        public Builder useHostNetnsVolume(@Nullable String useHostNetnsVolume) {

            this.useHostNetnsVolume = useHostNetnsVolume;
            return this;
        }
        @CustomType.Setter
        public Builder useOpflexServerVolume(@Nullable String useOpflexServerVolume) {

            this.useOpflexServerVolume = useOpflexServerVolume;
            return this;
        }
        @CustomType.Setter
        public Builder usePrivilegedContainer(@Nullable String usePrivilegedContainer) {

            this.usePrivilegedContainer = usePrivilegedContainer;
            return this;
        }
        @CustomType.Setter
        public Builder vmmController(@Nullable String vmmController) {

            this.vmmController = vmmController;
            return this;
        }
        @CustomType.Setter
        public Builder vmmDomain(@Nullable String vmmDomain) {

            this.vmmDomain = vmmDomain;
            return this;
        }
        @CustomType.Setter
        public Builder vrfName(String vrfName) {
            if (vrfName == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "vrfName");
            }
            this.vrfName = vrfName;
            return this;
        }
        @CustomType.Setter
        public Builder vrfTenant(String vrfTenant) {
            if (vrfTenant == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfigNetworkAciNetworkProvider", "vrfTenant");
            }
            this.vrfTenant = vrfTenant;
            return this;
        }
        public GetClusterRkeConfigNetworkAciNetworkProvider build() {
            final var _resultValue = new GetClusterRkeConfigNetworkAciNetworkProvider();
            _resultValue.aep = aep;
            _resultValue.apicHosts = apicHosts;
            _resultValue.apicRefreshTickerAdjust = apicRefreshTickerAdjust;
            _resultValue.apicRefreshTime = apicRefreshTime;
            _resultValue.apicSubscriptionDelay = apicSubscriptionDelay;
            _resultValue.apicUserCrt = apicUserCrt;
            _resultValue.apicUserKey = apicUserKey;
            _resultValue.apicUserName = apicUserName;
            _resultValue.capic = capic;
            _resultValue.controllerLogLevel = controllerLogLevel;
            _resultValue.disablePeriodicSnatGlobalInfoSync = disablePeriodicSnatGlobalInfoSync;
            _resultValue.disableWaitForNetwork = disableWaitForNetwork;
            _resultValue.dropLogEnable = dropLogEnable;
            _resultValue.durationWaitForNetwork = durationWaitForNetwork;
            _resultValue.enableEndpointSlice = enableEndpointSlice;
            _resultValue.encapType = encapType;
            _resultValue.epRegistry = epRegistry;
            _resultValue.externDynamic = externDynamic;
            _resultValue.externStatic = externStatic;
            _resultValue.gbpPodSubnet = gbpPodSubnet;
            _resultValue.hostAgentLogLevel = hostAgentLogLevel;
            _resultValue.imagePullPolicy = imagePullPolicy;
            _resultValue.imagePullSecret = imagePullSecret;
            _resultValue.infraVlan = infraVlan;
            _resultValue.installIstio = installIstio;
            _resultValue.istioProfile = istioProfile;
            _resultValue.kafkaBrokers = kafkaBrokers;
            _resultValue.kafkaClientCrt = kafkaClientCrt;
            _resultValue.kafkaClientKey = kafkaClientKey;
            _resultValue.kubeApiVlan = kubeApiVlan;
            _resultValue.l3out = l3out;
            _resultValue.l3outExternalNetworks = l3outExternalNetworks;
            _resultValue.maxNodesSvcGraph = maxNodesSvcGraph;
            _resultValue.mcastRangeEnd = mcastRangeEnd;
            _resultValue.mcastRangeStart = mcastRangeStart;
            _resultValue.mtuHeadRoom = mtuHeadRoom;
            _resultValue.multusDisable = multusDisable;
            _resultValue.noPriorityClass = noPriorityClass;
            _resultValue.nodePodIfEnable = nodePodIfEnable;
            _resultValue.nodeSubnet = nodeSubnet;
            _resultValue.nodeSvcSubnet = nodeSvcSubnet;
            _resultValue.opflexClientSsl = opflexClientSsl;
            _resultValue.opflexDeviceDeleteTimeout = opflexDeviceDeleteTimeout;
            _resultValue.opflexLogLevel = opflexLogLevel;
            _resultValue.opflexMode = opflexMode;
            _resultValue.opflexServerPort = opflexServerPort;
            _resultValue.overlayVrfName = overlayVrfName;
            _resultValue.ovsMemoryLimit = ovsMemoryLimit;
            _resultValue.pbrTrackingNonSnat = pbrTrackingNonSnat;
            _resultValue.podSubnetChunkSize = podSubnetChunkSize;
            _resultValue.runGbpContainer = runGbpContainer;
            _resultValue.runOpflexServerContainer = runOpflexServerContainer;
            _resultValue.serviceMonitorInterval = serviceMonitorInterval;
            _resultValue.serviceVlan = serviceVlan;
            _resultValue.snatContractScope = snatContractScope;
            _resultValue.snatNamespace = snatNamespace;
            _resultValue.snatPortRangeEnd = snatPortRangeEnd;
            _resultValue.snatPortRangeStart = snatPortRangeStart;
            _resultValue.snatPortsPerNode = snatPortsPerNode;
            _resultValue.sriovEnable = sriovEnable;
            _resultValue.subnetDomainName = subnetDomainName;
            _resultValue.systemId = systemId;
            _resultValue.tenant = tenant;
            _resultValue.token = token;
            _resultValue.useAciAnywhereCrd = useAciAnywhereCrd;
            _resultValue.useAciCniPriorityClass = useAciCniPriorityClass;
            _resultValue.useClusterRole = useClusterRole;
            _resultValue.useHostNetnsVolume = useHostNetnsVolume;
            _resultValue.useOpflexServerVolume = useOpflexServerVolume;
            _resultValue.usePrivilegedContainer = usePrivilegedContainer;
            _resultValue.vmmController = vmmController;
            _resultValue.vmmDomain = vmmDomain;
            _resultValue.vrfName = vrfName;
            _resultValue.vrfTenant = vrfTenant;
            return _resultValue;
        }
    }
}
