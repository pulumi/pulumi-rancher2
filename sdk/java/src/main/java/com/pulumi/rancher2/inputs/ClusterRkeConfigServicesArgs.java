// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesEtcdArgs;
import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeApiArgs;
import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeControllerArgs;
import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeletArgs;
import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesKubeproxyArgs;
import com.pulumi.rancher2.inputs.ClusterRkeConfigServicesSchedulerArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterRkeConfigServicesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterRkeConfigServicesArgs Empty = new ClusterRkeConfigServicesArgs();

    @Import(name="etcd")
    private @Nullable Output<ClusterRkeConfigServicesEtcdArgs> etcd;

    public Optional<Output<ClusterRkeConfigServicesEtcdArgs>> etcd() {
        return Optional.ofNullable(this.etcd);
    }

    @Import(name="kubeApi")
    private @Nullable Output<ClusterRkeConfigServicesKubeApiArgs> kubeApi;

    public Optional<Output<ClusterRkeConfigServicesKubeApiArgs>> kubeApi() {
        return Optional.ofNullable(this.kubeApi);
    }

    @Import(name="kubeController")
    private @Nullable Output<ClusterRkeConfigServicesKubeControllerArgs> kubeController;

    public Optional<Output<ClusterRkeConfigServicesKubeControllerArgs>> kubeController() {
        return Optional.ofNullable(this.kubeController);
    }

    @Import(name="kubelet")
    private @Nullable Output<ClusterRkeConfigServicesKubeletArgs> kubelet;

    public Optional<Output<ClusterRkeConfigServicesKubeletArgs>> kubelet() {
        return Optional.ofNullable(this.kubelet);
    }

    @Import(name="kubeproxy")
    private @Nullable Output<ClusterRkeConfigServicesKubeproxyArgs> kubeproxy;

    public Optional<Output<ClusterRkeConfigServicesKubeproxyArgs>> kubeproxy() {
        return Optional.ofNullable(this.kubeproxy);
    }

    @Import(name="scheduler")
    private @Nullable Output<ClusterRkeConfigServicesSchedulerArgs> scheduler;

    public Optional<Output<ClusterRkeConfigServicesSchedulerArgs>> scheduler() {
        return Optional.ofNullable(this.scheduler);
    }

    private ClusterRkeConfigServicesArgs() {}

    private ClusterRkeConfigServicesArgs(ClusterRkeConfigServicesArgs $) {
        this.etcd = $.etcd;
        this.kubeApi = $.kubeApi;
        this.kubeController = $.kubeController;
        this.kubelet = $.kubelet;
        this.kubeproxy = $.kubeproxy;
        this.scheduler = $.scheduler;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterRkeConfigServicesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterRkeConfigServicesArgs $;

        public Builder() {
            $ = new ClusterRkeConfigServicesArgs();
        }

        public Builder(ClusterRkeConfigServicesArgs defaults) {
            $ = new ClusterRkeConfigServicesArgs(Objects.requireNonNull(defaults));
        }

        public Builder etcd(@Nullable Output<ClusterRkeConfigServicesEtcdArgs> etcd) {
            $.etcd = etcd;
            return this;
        }

        public Builder etcd(ClusterRkeConfigServicesEtcdArgs etcd) {
            return etcd(Output.of(etcd));
        }

        public Builder kubeApi(@Nullable Output<ClusterRkeConfigServicesKubeApiArgs> kubeApi) {
            $.kubeApi = kubeApi;
            return this;
        }

        public Builder kubeApi(ClusterRkeConfigServicesKubeApiArgs kubeApi) {
            return kubeApi(Output.of(kubeApi));
        }

        public Builder kubeController(@Nullable Output<ClusterRkeConfigServicesKubeControllerArgs> kubeController) {
            $.kubeController = kubeController;
            return this;
        }

        public Builder kubeController(ClusterRkeConfigServicesKubeControllerArgs kubeController) {
            return kubeController(Output.of(kubeController));
        }

        public Builder kubelet(@Nullable Output<ClusterRkeConfigServicesKubeletArgs> kubelet) {
            $.kubelet = kubelet;
            return this;
        }

        public Builder kubelet(ClusterRkeConfigServicesKubeletArgs kubelet) {
            return kubelet(Output.of(kubelet));
        }

        public Builder kubeproxy(@Nullable Output<ClusterRkeConfigServicesKubeproxyArgs> kubeproxy) {
            $.kubeproxy = kubeproxy;
            return this;
        }

        public Builder kubeproxy(ClusterRkeConfigServicesKubeproxyArgs kubeproxy) {
            return kubeproxy(Output.of(kubeproxy));
        }

        public Builder scheduler(@Nullable Output<ClusterRkeConfigServicesSchedulerArgs> scheduler) {
            $.scheduler = scheduler;
            return this;
        }

        public Builder scheduler(ClusterRkeConfigServicesSchedulerArgs scheduler) {
            return scheduler(Output.of(scheduler));
        }

        public ClusterRkeConfigServicesArgs build() {
            return $;
        }
    }

}
