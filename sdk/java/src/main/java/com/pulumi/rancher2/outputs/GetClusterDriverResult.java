// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetClusterDriverResult {
    /**
     * @return (Computed) Specify if the cluster driver state (bool)
     * 
     */
    private Boolean active;
    /**
     * @return (Computed) Actual url of the cluster driver (string)
     * 
     */
    private String actualUrl;
    /**
     * @return (Computed) Annotations of the resource (map)
     * 
     */
    private Map<String,String> annotations;
    /**
     * @return (Computed) Specify whether the cluster driver is an internal cluster driver or not (bool)
     * 
     */
    private Boolean builtin;
    /**
     * @return (Computed) Verify that the downloaded driver matches the expected checksum (string)
     * 
     */
    private String checksum;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) Labels of the resource (map)
     * 
     */
    private Map<String,String> labels;
    private String name;
    /**
     * @return (Computed) The URL to load for customized Add Clusters screen for this driver (string)
     * 
     */
    private String uiUrl;
    private String url;
    /**
     * @return (Computed) Domains to whitelist for the ui (list)
     * 
     */
    private List<String> whitelistDomains;

    private GetClusterDriverResult() {}
    /**
     * @return (Computed) Specify if the cluster driver state (bool)
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return (Computed) Actual url of the cluster driver (string)
     * 
     */
    public String actualUrl() {
        return this.actualUrl;
    }
    /**
     * @return (Computed) Annotations of the resource (map)
     * 
     */
    public Map<String,String> annotations() {
        return this.annotations;
    }
    /**
     * @return (Computed) Specify whether the cluster driver is an internal cluster driver or not (bool)
     * 
     */
    public Boolean builtin() {
        return this.builtin;
    }
    /**
     * @return (Computed) Verify that the downloaded driver matches the expected checksum (string)
     * 
     */
    public String checksum() {
        return this.checksum;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) Labels of the resource (map)
     * 
     */
    public Map<String,String> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) The URL to load for customized Add Clusters screen for this driver (string)
     * 
     */
    public String uiUrl() {
        return this.uiUrl;
    }
    public String url() {
        return this.url;
    }
    /**
     * @return (Computed) Domains to whitelist for the ui (list)
     * 
     */
    public List<String> whitelistDomains() {
        return this.whitelistDomains;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterDriverResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private String actualUrl;
        private Map<String,String> annotations;
        private Boolean builtin;
        private String checksum;
        private String id;
        private Map<String,String> labels;
        private String name;
        private String uiUrl;
        private String url;
        private List<String> whitelistDomains;
        public Builder() {}
        public Builder(GetClusterDriverResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.actualUrl = defaults.actualUrl;
    	      this.annotations = defaults.annotations;
    	      this.builtin = defaults.builtin;
    	      this.checksum = defaults.checksum;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.uiUrl = defaults.uiUrl;
    	      this.url = defaults.url;
    	      this.whitelistDomains = defaults.whitelistDomains;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            if (active == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "active");
            }
            this.active = active;
            return this;
        }
        @CustomType.Setter
        public Builder actualUrl(String actualUrl) {
            if (actualUrl == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "actualUrl");
            }
            this.actualUrl = actualUrl;
            return this;
        }
        @CustomType.Setter
        public Builder annotations(Map<String,String> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder builtin(Boolean builtin) {
            if (builtin == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "builtin");
            }
            this.builtin = builtin;
            return this;
        }
        @CustomType.Setter
        public Builder checksum(String checksum) {
            if (checksum == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "checksum");
            }
            this.checksum = checksum;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder uiUrl(String uiUrl) {
            if (uiUrl == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "uiUrl");
            }
            this.uiUrl = uiUrl;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder whitelistDomains(List<String> whitelistDomains) {
            if (whitelistDomains == null) {
              throw new MissingRequiredPropertyException("GetClusterDriverResult", "whitelistDomains");
            }
            this.whitelistDomains = whitelistDomains;
            return this;
        }
        public Builder whitelistDomains(String... whitelistDomains) {
            return whitelistDomains(List.of(whitelistDomains));
        }
        public GetClusterDriverResult build() {
            final var _resultValue = new GetClusterDriverResult();
            _resultValue.active = active;
            _resultValue.actualUrl = actualUrl;
            _resultValue.annotations = annotations;
            _resultValue.builtin = builtin;
            _resultValue.checksum = checksum;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.uiUrl = uiUrl;
            _resultValue.url = url;
            _resultValue.whitelistDomains = whitelistDomains;
            return _resultValue;
        }
    }
}
