// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.ClusterEksConfigV2NodeGroupLaunchTemplate;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterEksConfigV2NodeGroup {
    /**
     * @return The EKS node group desired size. Default: `2` (int)
     * 
     */
    private @Nullable Integer desiredSize;
    /**
     * @return The EKS node group disk size (Gb). Default: `20` (int)
     * 
     */
    private @Nullable Integer diskSize;
    /**
     * @return The EKS node group ssh key (string)
     * 
     */
    private @Nullable String ec2SshKey;
    /**
     * @return Set true to EKS use gpu. Default: `false` (bool)
     * 
     */
    private @Nullable Boolean gpu;
    /**
     * @return The EKS node group image ID (string)
     * 
     */
    private @Nullable String imageId;
    /**
     * @return The type of machine to use for worker nodes. Default `t2.medium` (string)
     * 
     */
    private @Nullable String instanceType;
    /**
     * @return Labels for the Cluster (map)
     * 
     */
    private @Nullable Map<String,Object> labels;
    /**
     * @return The EKS node groups launch template (list Maxitem: 1)
     * 
     */
    private @Nullable List<ClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates;
    /**
     * @return Audit log max size. Default: `100` (int)
     * 
     */
    private @Nullable Integer maxSize;
    /**
     * @return The EKS node group maximum size. Default `2` (int)
     * 
     */
    private @Nullable Integer minSize;
    /**
     * @return The name of the Cluster (string)
     * 
     */
    private String name;
    /**
     * @return The EKS node group node role ARN. Default `&#34;&#34;` (string)
     * 
     */
    private @Nullable String nodeRole;
    /**
     * @return Enable EKS node group request spot instances (bool)
     * 
     */
    private @Nullable Boolean requestSpotInstances;
    /**
     * @return The EKS node group resource tags (map)
     * 
     */
    private @Nullable Map<String,Object> resourceTags;
    /**
     * @return The EKS node group sport instace types (list string)
     * 
     */
    private @Nullable List<String> spotInstanceTypes;
    /**
     * @return List of subnets in the virtual network to use. If it&#39;s not specified Rancher will create 3 news subnets (list)
     * 
     */
    private @Nullable List<String> subnets;
    /**
     * @return Tags for Kubernetes cluster. For example, `[&#34;foo=bar&#34;,&#34;bar=foo&#34;]` (list)
     * 
     */
    private @Nullable Map<String,Object> tags;
    /**
     * @return Pass user-data to the nodes to perform automated configuration tasks (string)
     * 
     */
    private @Nullable String userData;
    /**
     * @return RKE2 kubernetes version (string)
     * 
     */
    private @Nullable String version;

    private ClusterEksConfigV2NodeGroup() {}
    /**
     * @return The EKS node group desired size. Default: `2` (int)
     * 
     */
    public Optional<Integer> desiredSize() {
        return Optional.ofNullable(this.desiredSize);
    }
    /**
     * @return The EKS node group disk size (Gb). Default: `20` (int)
     * 
     */
    public Optional<Integer> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }
    /**
     * @return The EKS node group ssh key (string)
     * 
     */
    public Optional<String> ec2SshKey() {
        return Optional.ofNullable(this.ec2SshKey);
    }
    /**
     * @return Set true to EKS use gpu. Default: `false` (bool)
     * 
     */
    public Optional<Boolean> gpu() {
        return Optional.ofNullable(this.gpu);
    }
    /**
     * @return The EKS node group image ID (string)
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    /**
     * @return The type of machine to use for worker nodes. Default `t2.medium` (string)
     * 
     */
    public Optional<String> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }
    /**
     * @return Labels for the Cluster (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return The EKS node groups launch template (list Maxitem: 1)
     * 
     */
    public List<ClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates() {
        return this.launchTemplates == null ? List.of() : this.launchTemplates;
    }
    /**
     * @return Audit log max size. Default: `100` (int)
     * 
     */
    public Optional<Integer> maxSize() {
        return Optional.ofNullable(this.maxSize);
    }
    /**
     * @return The EKS node group maximum size. Default `2` (int)
     * 
     */
    public Optional<Integer> minSize() {
        return Optional.ofNullable(this.minSize);
    }
    /**
     * @return The name of the Cluster (string)
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The EKS node group node role ARN. Default `&#34;&#34;` (string)
     * 
     */
    public Optional<String> nodeRole() {
        return Optional.ofNullable(this.nodeRole);
    }
    /**
     * @return Enable EKS node group request spot instances (bool)
     * 
     */
    public Optional<Boolean> requestSpotInstances() {
        return Optional.ofNullable(this.requestSpotInstances);
    }
    /**
     * @return The EKS node group resource tags (map)
     * 
     */
    public Map<String,Object> resourceTags() {
        return this.resourceTags == null ? Map.of() : this.resourceTags;
    }
    /**
     * @return The EKS node group sport instace types (list string)
     * 
     */
    public List<String> spotInstanceTypes() {
        return this.spotInstanceTypes == null ? List.of() : this.spotInstanceTypes;
    }
    /**
     * @return List of subnets in the virtual network to use. If it&#39;s not specified Rancher will create 3 news subnets (list)
     * 
     */
    public List<String> subnets() {
        return this.subnets == null ? List.of() : this.subnets;
    }
    /**
     * @return Tags for Kubernetes cluster. For example, `[&#34;foo=bar&#34;,&#34;bar=foo&#34;]` (list)
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Pass user-data to the nodes to perform automated configuration tasks (string)
     * 
     */
    public Optional<String> userData() {
        return Optional.ofNullable(this.userData);
    }
    /**
     * @return RKE2 kubernetes version (string)
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterEksConfigV2NodeGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer desiredSize;
        private @Nullable Integer diskSize;
        private @Nullable String ec2SshKey;
        private @Nullable Boolean gpu;
        private @Nullable String imageId;
        private @Nullable String instanceType;
        private @Nullable Map<String,Object> labels;
        private @Nullable List<ClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates;
        private @Nullable Integer maxSize;
        private @Nullable Integer minSize;
        private String name;
        private @Nullable String nodeRole;
        private @Nullable Boolean requestSpotInstances;
        private @Nullable Map<String,Object> resourceTags;
        private @Nullable List<String> spotInstanceTypes;
        private @Nullable List<String> subnets;
        private @Nullable Map<String,Object> tags;
        private @Nullable String userData;
        private @Nullable String version;
        public Builder() {}
        public Builder(ClusterEksConfigV2NodeGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.desiredSize = defaults.desiredSize;
    	      this.diskSize = defaults.diskSize;
    	      this.ec2SshKey = defaults.ec2SshKey;
    	      this.gpu = defaults.gpu;
    	      this.imageId = defaults.imageId;
    	      this.instanceType = defaults.instanceType;
    	      this.labels = defaults.labels;
    	      this.launchTemplates = defaults.launchTemplates;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.name = defaults.name;
    	      this.nodeRole = defaults.nodeRole;
    	      this.requestSpotInstances = defaults.requestSpotInstances;
    	      this.resourceTags = defaults.resourceTags;
    	      this.spotInstanceTypes = defaults.spotInstanceTypes;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.userData = defaults.userData;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder desiredSize(@Nullable Integer desiredSize) {
            this.desiredSize = desiredSize;
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(@Nullable Integer diskSize) {
            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder ec2SshKey(@Nullable String ec2SshKey) {
            this.ec2SshKey = ec2SshKey;
            return this;
        }
        @CustomType.Setter
        public Builder gpu(@Nullable Boolean gpu) {
            this.gpu = gpu;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,Object> labels) {
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder launchTemplates(@Nullable List<ClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates) {
            this.launchTemplates = launchTemplates;
            return this;
        }
        public Builder launchTemplates(ClusterEksConfigV2NodeGroupLaunchTemplate... launchTemplates) {
            return launchTemplates(List.of(launchTemplates));
        }
        @CustomType.Setter
        public Builder maxSize(@Nullable Integer maxSize) {
            this.maxSize = maxSize;
            return this;
        }
        @CustomType.Setter
        public Builder minSize(@Nullable Integer minSize) {
            this.minSize = minSize;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodeRole(@Nullable String nodeRole) {
            this.nodeRole = nodeRole;
            return this;
        }
        @CustomType.Setter
        public Builder requestSpotInstances(@Nullable Boolean requestSpotInstances) {
            this.requestSpotInstances = requestSpotInstances;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTags(@Nullable Map<String,Object> resourceTags) {
            this.resourceTags = resourceTags;
            return this;
        }
        @CustomType.Setter
        public Builder spotInstanceTypes(@Nullable List<String> spotInstanceTypes) {
            this.spotInstanceTypes = spotInstanceTypes;
            return this;
        }
        public Builder spotInstanceTypes(String... spotInstanceTypes) {
            return spotInstanceTypes(List.of(spotInstanceTypes));
        }
        @CustomType.Setter
        public Builder subnets(@Nullable List<String> subnets) {
            this.subnets = subnets;
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder userData(@Nullable String userData) {
            this.userData = userData;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }
        public ClusterEksConfigV2NodeGroup build() {
            final var o = new ClusterEksConfigV2NodeGroup();
            o.desiredSize = desiredSize;
            o.diskSize = diskSize;
            o.ec2SshKey = ec2SshKey;
            o.gpu = gpu;
            o.imageId = imageId;
            o.instanceType = instanceType;
            o.labels = labels;
            o.launchTemplates = launchTemplates;
            o.maxSize = maxSize;
            o.minSize = minSize;
            o.name = name;
            o.nodeRole = nodeRole;
            o.requestSpotInstances = requestSpotInstances;
            o.resourceTags = resourceTags;
            o.spotInstanceTypes = spotInstanceTypes;
            o.subnets = subnets;
            o.tags = tags;
            o.userData = userData;
            o.version = version;
            return o;
        }
    }
}
