// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2ClusterAddons;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2IpAllocationPolicy;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2MasterAuthorizedNetworksConfig;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2NodePool;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2PrivateClusterConfig;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterGkeConfigV2 {
    /**
     * @return The GKE cluster addons (List maxitems:1)
     * 
     */
    private @Nullable ClusterGkeConfigV2ClusterAddons clusterAddons;
    /**
     * @return The GKE cluster ip v4 allocation cidr block (string)
     * 
     */
    private @Nullable String clusterIpv4CidrBlock;
    /**
     * @return The description for Cluster (string)
     * 
     */
    private @Nullable String description;
    /**
     * @return Enable Kubernetes alpha. Default: `false` (bool)
     * 
     */
    private @Nullable Boolean enableKubernetesAlpha;
    /**
     * @return Google credential secret (string)
     * 
     */
    private String googleCredentialSecret;
    /**
     * @return Is GKE cluster imported? Default: `false` (bool)
     * 
     */
    private @Nullable Boolean imported;
    /**
     * @return The GKE ip allocation policy (List maxitems:1)
     * 
     */
    private @Nullable ClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy;
    /**
     * @return The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    private @Nullable String kubernetesVersion;
    /**
     * @return Labels for the Cluster (map)
     * 
     */
    private @Nullable Map<String,Object> labels;
    /**
     * @return The GKE cluster locations (List)
     * 
     */
    private @Nullable List<String> locations;
    /**
     * @return The GKE cluster logging service (string)
     * 
     */
    private @Nullable String loggingService;
    /**
     * @return The GKE cluster maintenance window (string)
     * 
     */
    private @Nullable String maintenanceWindow;
    /**
     * @return The GKE cluster master authorized networks config (List maxitems:1)
     * 
     */
    private @Nullable ClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig;
    /**
     * @return The GKE cluster monitoring service (string)
     * 
     */
    private @Nullable String monitoringService;
    /**
     * @return The name of the Cluster (string)
     * 
     */
    private String name;
    /**
     * @return The GKE cluster network. Required for create new cluster (string)
     * 
     */
    private @Nullable String network;
    /**
     * @return Is GKE cluster network policy enabled? Default: `false` (bool)
     * 
     */
    private @Nullable Boolean networkPolicyEnabled;
    /**
     * @return The GKE cluster node pools. Required for create new cluster (List)
     * 
     */
    private @Nullable List<ClusterGkeConfigV2NodePool> nodePools;
    /**
     * @return The GKE private cluster config (List maxitems:1)
     * 
     */
    private @Nullable ClusterGkeConfigV2PrivateClusterConfig privateClusterConfig;
    /**
     * @return Project ID to apply answer (string)
     * 
     */
    private String projectId;
    /**
     * @return The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    private @Nullable String region;
    /**
     * @return The GKE cluster subnetwork. Required for create new cluster (string)
     * 
     */
    private @Nullable String subnetwork;
    /**
     * @return The GKE cluster zone. Required if `region` not set (string)
     * 
     */
    private @Nullable String zone;

    private ClusterGkeConfigV2() {}
    /**
     * @return The GKE cluster addons (List maxitems:1)
     * 
     */
    public Optional<ClusterGkeConfigV2ClusterAddons> clusterAddons() {
        return Optional.ofNullable(this.clusterAddons);
    }
    /**
     * @return The GKE cluster ip v4 allocation cidr block (string)
     * 
     */
    public Optional<String> clusterIpv4CidrBlock() {
        return Optional.ofNullable(this.clusterIpv4CidrBlock);
    }
    /**
     * @return The description for Cluster (string)
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Enable Kubernetes alpha. Default: `false` (bool)
     * 
     */
    public Optional<Boolean> enableKubernetesAlpha() {
        return Optional.ofNullable(this.enableKubernetesAlpha);
    }
    /**
     * @return Google credential secret (string)
     * 
     */
    public String googleCredentialSecret() {
        return this.googleCredentialSecret;
    }
    /**
     * @return Is GKE cluster imported? Default: `false` (bool)
     * 
     */
    public Optional<Boolean> imported() {
        return Optional.ofNullable(this.imported);
    }
    /**
     * @return The GKE ip allocation policy (List maxitems:1)
     * 
     */
    public Optional<ClusterGkeConfigV2IpAllocationPolicy> ipAllocationPolicy() {
        return Optional.ofNullable(this.ipAllocationPolicy);
    }
    /**
     * @return The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    public Optional<String> kubernetesVersion() {
        return Optional.ofNullable(this.kubernetesVersion);
    }
    /**
     * @return Labels for the Cluster (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return The GKE cluster locations (List)
     * 
     */
    public List<String> locations() {
        return this.locations == null ? List.of() : this.locations;
    }
    /**
     * @return The GKE cluster logging service (string)
     * 
     */
    public Optional<String> loggingService() {
        return Optional.ofNullable(this.loggingService);
    }
    /**
     * @return The GKE cluster maintenance window (string)
     * 
     */
    public Optional<String> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }
    /**
     * @return The GKE cluster master authorized networks config (List maxitems:1)
     * 
     */
    public Optional<ClusterGkeConfigV2MasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfig() {
        return Optional.ofNullable(this.masterAuthorizedNetworksConfig);
    }
    /**
     * @return The GKE cluster monitoring service (string)
     * 
     */
    public Optional<String> monitoringService() {
        return Optional.ofNullable(this.monitoringService);
    }
    /**
     * @return The name of the Cluster (string)
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The GKE cluster network. Required for create new cluster (string)
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return Is GKE cluster network policy enabled? Default: `false` (bool)
     * 
     */
    public Optional<Boolean> networkPolicyEnabled() {
        return Optional.ofNullable(this.networkPolicyEnabled);
    }
    /**
     * @return The GKE cluster node pools. Required for create new cluster (List)
     * 
     */
    public List<ClusterGkeConfigV2NodePool> nodePools() {
        return this.nodePools == null ? List.of() : this.nodePools;
    }
    /**
     * @return The GKE private cluster config (List maxitems:1)
     * 
     */
    public Optional<ClusterGkeConfigV2PrivateClusterConfig> privateClusterConfig() {
        return Optional.ofNullable(this.privateClusterConfig);
    }
    /**
     * @return Project ID to apply answer (string)
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return The GKE cluster subnetwork. Required for create new cluster (string)
     * 
     */
    public Optional<String> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }
    /**
     * @return The GKE cluster zone. Required if `region` not set (string)
     * 
     */
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterGkeConfigV2 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ClusterGkeConfigV2ClusterAddons clusterAddons;
        private @Nullable String clusterIpv4CidrBlock;
        private @Nullable String description;
        private @Nullable Boolean enableKubernetesAlpha;
        private String googleCredentialSecret;
        private @Nullable Boolean imported;
        private @Nullable ClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy;
        private @Nullable String kubernetesVersion;
        private @Nullable Map<String,Object> labels;
        private @Nullable List<String> locations;
        private @Nullable String loggingService;
        private @Nullable String maintenanceWindow;
        private @Nullable ClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig;
        private @Nullable String monitoringService;
        private String name;
        private @Nullable String network;
        private @Nullable Boolean networkPolicyEnabled;
        private @Nullable List<ClusterGkeConfigV2NodePool> nodePools;
        private @Nullable ClusterGkeConfigV2PrivateClusterConfig privateClusterConfig;
        private String projectId;
        private @Nullable String region;
        private @Nullable String subnetwork;
        private @Nullable String zone;
        public Builder() {}
        public Builder(ClusterGkeConfigV2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterAddons = defaults.clusterAddons;
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.description = defaults.description;
    	      this.enableKubernetesAlpha = defaults.enableKubernetesAlpha;
    	      this.googleCredentialSecret = defaults.googleCredentialSecret;
    	      this.imported = defaults.imported;
    	      this.ipAllocationPolicy = defaults.ipAllocationPolicy;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.labels = defaults.labels;
    	      this.locations = defaults.locations;
    	      this.loggingService = defaults.loggingService;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.masterAuthorizedNetworksConfig = defaults.masterAuthorizedNetworksConfig;
    	      this.monitoringService = defaults.monitoringService;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkPolicyEnabled = defaults.networkPolicyEnabled;
    	      this.nodePools = defaults.nodePools;
    	      this.privateClusterConfig = defaults.privateClusterConfig;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.subnetwork = defaults.subnetwork;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder clusterAddons(@Nullable ClusterGkeConfigV2ClusterAddons clusterAddons) {

            this.clusterAddons = clusterAddons;
            return this;
        }
        @CustomType.Setter
        public Builder clusterIpv4CidrBlock(@Nullable String clusterIpv4CidrBlock) {

            this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableKubernetesAlpha(@Nullable Boolean enableKubernetesAlpha) {

            this.enableKubernetesAlpha = enableKubernetesAlpha;
            return this;
        }
        @CustomType.Setter
        public Builder googleCredentialSecret(String googleCredentialSecret) {
            if (googleCredentialSecret == null) {
              throw new MissingRequiredPropertyException("ClusterGkeConfigV2", "googleCredentialSecret");
            }
            this.googleCredentialSecret = googleCredentialSecret;
            return this;
        }
        @CustomType.Setter
        public Builder imported(@Nullable Boolean imported) {

            this.imported = imported;
            return this;
        }
        @CustomType.Setter
        public Builder ipAllocationPolicy(@Nullable ClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy) {

            this.ipAllocationPolicy = ipAllocationPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(@Nullable String kubernetesVersion) {

            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,Object> labels) {

            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder locations(@Nullable List<String> locations) {

            this.locations = locations;
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder loggingService(@Nullable String loggingService) {

            this.loggingService = loggingService;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {

            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        @CustomType.Setter
        public Builder masterAuthorizedNetworksConfig(@Nullable ClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig) {

            this.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
            return this;
        }
        @CustomType.Setter
        public Builder monitoringService(@Nullable String monitoringService) {

            this.monitoringService = monitoringService;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ClusterGkeConfigV2", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder network(@Nullable String network) {

            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder networkPolicyEnabled(@Nullable Boolean networkPolicyEnabled) {

            this.networkPolicyEnabled = networkPolicyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder nodePools(@Nullable List<ClusterGkeConfigV2NodePool> nodePools) {

            this.nodePools = nodePools;
            return this;
        }
        public Builder nodePools(ClusterGkeConfigV2NodePool... nodePools) {
            return nodePools(List.of(nodePools));
        }
        @CustomType.Setter
        public Builder privateClusterConfig(@Nullable ClusterGkeConfigV2PrivateClusterConfig privateClusterConfig) {

            this.privateClusterConfig = privateClusterConfig;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("ClusterGkeConfigV2", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder subnetwork(@Nullable String subnetwork) {

            this.subnetwork = subnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder zone(@Nullable String zone) {

            this.zone = zone;
            return this;
        }
        public ClusterGkeConfigV2 build() {
            final var _resultValue = new ClusterGkeConfigV2();
            _resultValue.clusterAddons = clusterAddons;
            _resultValue.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            _resultValue.description = description;
            _resultValue.enableKubernetesAlpha = enableKubernetesAlpha;
            _resultValue.googleCredentialSecret = googleCredentialSecret;
            _resultValue.imported = imported;
            _resultValue.ipAllocationPolicy = ipAllocationPolicy;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.labels = labels;
            _resultValue.locations = locations;
            _resultValue.loggingService = loggingService;
            _resultValue.maintenanceWindow = maintenanceWindow;
            _resultValue.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
            _resultValue.monitoringService = monitoringService;
            _resultValue.name = name;
            _resultValue.network = network;
            _resultValue.networkPolicyEnabled = networkPolicyEnabled;
            _resultValue.nodePools = nodePools;
            _resultValue.privateClusterConfig = privateClusterConfig;
            _resultValue.projectId = projectId;
            _resultValue.region = region;
            _resultValue.subnetwork = subnetwork;
            _resultValue.zone = zone;
            return _resultValue;
        }
    }
}
