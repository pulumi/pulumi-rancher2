// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2ClusterAddons;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2IpAllocationPolicy;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2MasterAuthorizedNetworksConfig;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2NodePool;
import com.pulumi.rancher2.outputs.ClusterGkeConfigV2PrivateClusterConfig;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterGkeConfigV2 {
    /**
     * @return The GKE cluster addons (List maxitems:1)
     * 
     */
    private final @Nullable ClusterGkeConfigV2ClusterAddons clusterAddons;
    /**
     * @return The GKE cluster ip v4 allocation cidr block (string)
     * 
     */
    private final @Nullable String clusterIpv4CidrBlock;
    /**
     * @return An optional description of this cluster (string)
     * 
     */
    private final @Nullable String description;
    /**
     * @return Enable Kubernetes alpha. Default: `false` (bool)
     * 
     */
    private final @Nullable Boolean enableKubernetesAlpha;
    /**
     * @return Google credential secret (string)
     * 
     */
    private final String googleCredentialSecret;
    /**
     * @return Is GKE cluster imported? Default: `false` (bool)
     * 
     */
    private final @Nullable Boolean imported;
    /**
     * @return The GKE ip allocation policy (List maxitems:1)
     * 
     */
    private final @Nullable ClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy;
    /**
     * @return The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    private final @Nullable String kubernetesVersion;
    /**
     * @return Labels for cluster registration token object (map)
     * 
     */
    private final @Nullable Map<String,Object> labels;
    /**
     * @return The GKE cluster locations (List)
     * 
     */
    private final @Nullable List<String> locations;
    /**
     * @return The GKE cluster logging service (string)
     * 
     */
    private final @Nullable String loggingService;
    /**
     * @return The GKE cluster maintenance window (string)
     * 
     */
    private final @Nullable String maintenanceWindow;
    /**
     * @return The GKE cluster master authorized networks config (List maxitems:1)
     * 
     */
    private final @Nullable ClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig;
    /**
     * @return The GKE cluster monitoring service (string)
     * 
     */
    private final @Nullable String monitoringService;
    /**
     * @return Name of cluster registration token (string)
     * 
     */
    private final String name;
    /**
     * @return The GKE cluster network. Required for create new cluster (string)
     * 
     */
    private final @Nullable String network;
    /**
     * @return Is GKE cluster network policy enabled? Default: `false` (bool)
     * 
     */
    private final @Nullable Boolean networkPolicyEnabled;
    /**
     * @return The GKE cluster node pools. Required for create new cluster (List)
     * 
     */
    private final @Nullable List<ClusterGkeConfigV2NodePool> nodePools;
    /**
     * @return The GKE private cluster config (List maxitems:1)
     * 
     */
    private final @Nullable ClusterGkeConfigV2PrivateClusterConfig privateClusterConfig;
    /**
     * @return Project ID to apply answer (string)
     * 
     */
    private final String projectId;
    /**
     * @return The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    private final @Nullable String region;
    /**
     * @return The GKE cluster subnetwork. Required for create new cluster (string)
     * 
     */
    private final @Nullable String subnetwork;
    /**
     * @return The GKE cluster zone. Required if `region` not set (string)
     * 
     */
    private final @Nullable String zone;

    @CustomType.Constructor
    private ClusterGkeConfigV2(
        @CustomType.Parameter("clusterAddons") @Nullable ClusterGkeConfigV2ClusterAddons clusterAddons,
        @CustomType.Parameter("clusterIpv4CidrBlock") @Nullable String clusterIpv4CidrBlock,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("enableKubernetesAlpha") @Nullable Boolean enableKubernetesAlpha,
        @CustomType.Parameter("googleCredentialSecret") String googleCredentialSecret,
        @CustomType.Parameter("imported") @Nullable Boolean imported,
        @CustomType.Parameter("ipAllocationPolicy") @Nullable ClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy,
        @CustomType.Parameter("kubernetesVersion") @Nullable String kubernetesVersion,
        @CustomType.Parameter("labels") @Nullable Map<String,Object> labels,
        @CustomType.Parameter("locations") @Nullable List<String> locations,
        @CustomType.Parameter("loggingService") @Nullable String loggingService,
        @CustomType.Parameter("maintenanceWindow") @Nullable String maintenanceWindow,
        @CustomType.Parameter("masterAuthorizedNetworksConfig") @Nullable ClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig,
        @CustomType.Parameter("monitoringService") @Nullable String monitoringService,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("network") @Nullable String network,
        @CustomType.Parameter("networkPolicyEnabled") @Nullable Boolean networkPolicyEnabled,
        @CustomType.Parameter("nodePools") @Nullable List<ClusterGkeConfigV2NodePool> nodePools,
        @CustomType.Parameter("privateClusterConfig") @Nullable ClusterGkeConfigV2PrivateClusterConfig privateClusterConfig,
        @CustomType.Parameter("projectId") String projectId,
        @CustomType.Parameter("region") @Nullable String region,
        @CustomType.Parameter("subnetwork") @Nullable String subnetwork,
        @CustomType.Parameter("zone") @Nullable String zone) {
        this.clusterAddons = clusterAddons;
        this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
        this.description = description;
        this.enableKubernetesAlpha = enableKubernetesAlpha;
        this.googleCredentialSecret = googleCredentialSecret;
        this.imported = imported;
        this.ipAllocationPolicy = ipAllocationPolicy;
        this.kubernetesVersion = kubernetesVersion;
        this.labels = labels;
        this.locations = locations;
        this.loggingService = loggingService;
        this.maintenanceWindow = maintenanceWindow;
        this.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
        this.monitoringService = monitoringService;
        this.name = name;
        this.network = network;
        this.networkPolicyEnabled = networkPolicyEnabled;
        this.nodePools = nodePools;
        this.privateClusterConfig = privateClusterConfig;
        this.projectId = projectId;
        this.region = region;
        this.subnetwork = subnetwork;
        this.zone = zone;
    }

    /**
     * @return The GKE cluster addons (List maxitems:1)
     * 
     */
    public Optional<ClusterGkeConfigV2ClusterAddons> clusterAddons() {
        return Optional.ofNullable(this.clusterAddons);
    }
    /**
     * @return The GKE cluster ip v4 allocation cidr block (string)
     * 
     */
    public Optional<String> clusterIpv4CidrBlock() {
        return Optional.ofNullable(this.clusterIpv4CidrBlock);
    }
    /**
     * @return An optional description of this cluster (string)
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Enable Kubernetes alpha. Default: `false` (bool)
     * 
     */
    public Optional<Boolean> enableKubernetesAlpha() {
        return Optional.ofNullable(this.enableKubernetesAlpha);
    }
    /**
     * @return Google credential secret (string)
     * 
     */
    public String googleCredentialSecret() {
        return this.googleCredentialSecret;
    }
    /**
     * @return Is GKE cluster imported? Default: `false` (bool)
     * 
     */
    public Optional<Boolean> imported() {
        return Optional.ofNullable(this.imported);
    }
    /**
     * @return The GKE ip allocation policy (List maxitems:1)
     * 
     */
    public Optional<ClusterGkeConfigV2IpAllocationPolicy> ipAllocationPolicy() {
        return Optional.ofNullable(this.ipAllocationPolicy);
    }
    /**
     * @return The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    public Optional<String> kubernetesVersion() {
        return Optional.ofNullable(this.kubernetesVersion);
    }
    /**
     * @return Labels for cluster registration token object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return The GKE cluster locations (List)
     * 
     */
    public List<String> locations() {
        return this.locations == null ? List.of() : this.locations;
    }
    /**
     * @return The GKE cluster logging service (string)
     * 
     */
    public Optional<String> loggingService() {
        return Optional.ofNullable(this.loggingService);
    }
    /**
     * @return The GKE cluster maintenance window (string)
     * 
     */
    public Optional<String> maintenanceWindow() {
        return Optional.ofNullable(this.maintenanceWindow);
    }
    /**
     * @return The GKE cluster master authorized networks config (List maxitems:1)
     * 
     */
    public Optional<ClusterGkeConfigV2MasterAuthorizedNetworksConfig> masterAuthorizedNetworksConfig() {
        return Optional.ofNullable(this.masterAuthorizedNetworksConfig);
    }
    /**
     * @return The GKE cluster monitoring service (string)
     * 
     */
    public Optional<String> monitoringService() {
        return Optional.ofNullable(this.monitoringService);
    }
    /**
     * @return Name of cluster registration token (string)
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The GKE cluster network. Required for create new cluster (string)
     * 
     */
    public Optional<String> network() {
        return Optional.ofNullable(this.network);
    }
    /**
     * @return Is GKE cluster network policy enabled? Default: `false` (bool)
     * 
     */
    public Optional<Boolean> networkPolicyEnabled() {
        return Optional.ofNullable(this.networkPolicyEnabled);
    }
    /**
     * @return The GKE cluster node pools. Required for create new cluster (List)
     * 
     */
    public List<ClusterGkeConfigV2NodePool> nodePools() {
        return this.nodePools == null ? List.of() : this.nodePools;
    }
    /**
     * @return The GKE private cluster config (List maxitems:1)
     * 
     */
    public Optional<ClusterGkeConfigV2PrivateClusterConfig> privateClusterConfig() {
        return Optional.ofNullable(this.privateClusterConfig);
    }
    /**
     * @return Project ID to apply answer (string)
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return The GKE cluster subnetwork. Required for create new cluster (string)
     * 
     */
    public Optional<String> subnetwork() {
        return Optional.ofNullable(this.subnetwork);
    }
    /**
     * @return The GKE cluster zone. Required if `region` not set (string)
     * 
     */
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterGkeConfigV2 defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable ClusterGkeConfigV2ClusterAddons clusterAddons;
        private @Nullable String clusterIpv4CidrBlock;
        private @Nullable String description;
        private @Nullable Boolean enableKubernetesAlpha;
        private String googleCredentialSecret;
        private @Nullable Boolean imported;
        private @Nullable ClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy;
        private @Nullable String kubernetesVersion;
        private @Nullable Map<String,Object> labels;
        private @Nullable List<String> locations;
        private @Nullable String loggingService;
        private @Nullable String maintenanceWindow;
        private @Nullable ClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig;
        private @Nullable String monitoringService;
        private String name;
        private @Nullable String network;
        private @Nullable Boolean networkPolicyEnabled;
        private @Nullable List<ClusterGkeConfigV2NodePool> nodePools;
        private @Nullable ClusterGkeConfigV2PrivateClusterConfig privateClusterConfig;
        private String projectId;
        private @Nullable String region;
        private @Nullable String subnetwork;
        private @Nullable String zone;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterGkeConfigV2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterAddons = defaults.clusterAddons;
    	      this.clusterIpv4CidrBlock = defaults.clusterIpv4CidrBlock;
    	      this.description = defaults.description;
    	      this.enableKubernetesAlpha = defaults.enableKubernetesAlpha;
    	      this.googleCredentialSecret = defaults.googleCredentialSecret;
    	      this.imported = defaults.imported;
    	      this.ipAllocationPolicy = defaults.ipAllocationPolicy;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.labels = defaults.labels;
    	      this.locations = defaults.locations;
    	      this.loggingService = defaults.loggingService;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.masterAuthorizedNetworksConfig = defaults.masterAuthorizedNetworksConfig;
    	      this.monitoringService = defaults.monitoringService;
    	      this.name = defaults.name;
    	      this.network = defaults.network;
    	      this.networkPolicyEnabled = defaults.networkPolicyEnabled;
    	      this.nodePools = defaults.nodePools;
    	      this.privateClusterConfig = defaults.privateClusterConfig;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.subnetwork = defaults.subnetwork;
    	      this.zone = defaults.zone;
        }

        public Builder clusterAddons(@Nullable ClusterGkeConfigV2ClusterAddons clusterAddons) {
            this.clusterAddons = clusterAddons;
            return this;
        }
        public Builder clusterIpv4CidrBlock(@Nullable String clusterIpv4CidrBlock) {
            this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder enableKubernetesAlpha(@Nullable Boolean enableKubernetesAlpha) {
            this.enableKubernetesAlpha = enableKubernetesAlpha;
            return this;
        }
        public Builder googleCredentialSecret(String googleCredentialSecret) {
            this.googleCredentialSecret = Objects.requireNonNull(googleCredentialSecret);
            return this;
        }
        public Builder imported(@Nullable Boolean imported) {
            this.imported = imported;
            return this;
        }
        public Builder ipAllocationPolicy(@Nullable ClusterGkeConfigV2IpAllocationPolicy ipAllocationPolicy) {
            this.ipAllocationPolicy = ipAllocationPolicy;
            return this;
        }
        public Builder kubernetesVersion(@Nullable String kubernetesVersion) {
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        public Builder labels(@Nullable Map<String,Object> labels) {
            this.labels = labels;
            return this;
        }
        public Builder locations(@Nullable List<String> locations) {
            this.locations = locations;
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        public Builder loggingService(@Nullable String loggingService) {
            this.loggingService = loggingService;
            return this;
        }
        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        public Builder masterAuthorizedNetworksConfig(@Nullable ClusterGkeConfigV2MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig) {
            this.masterAuthorizedNetworksConfig = masterAuthorizedNetworksConfig;
            return this;
        }
        public Builder monitoringService(@Nullable String monitoringService) {
            this.monitoringService = monitoringService;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder network(@Nullable String network) {
            this.network = network;
            return this;
        }
        public Builder networkPolicyEnabled(@Nullable Boolean networkPolicyEnabled) {
            this.networkPolicyEnabled = networkPolicyEnabled;
            return this;
        }
        public Builder nodePools(@Nullable List<ClusterGkeConfigV2NodePool> nodePools) {
            this.nodePools = nodePools;
            return this;
        }
        public Builder nodePools(ClusterGkeConfigV2NodePool... nodePools) {
            return nodePools(List.of(nodePools));
        }
        public Builder privateClusterConfig(@Nullable ClusterGkeConfigV2PrivateClusterConfig privateClusterConfig) {
            this.privateClusterConfig = privateClusterConfig;
            return this;
        }
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        public Builder subnetwork(@Nullable String subnetwork) {
            this.subnetwork = subnetwork;
            return this;
        }
        public Builder zone(@Nullable String zone) {
            this.zone = zone;
            return this;
        }        public ClusterGkeConfigV2 build() {
            return new ClusterGkeConfigV2(clusterAddons, clusterIpv4CidrBlock, description, enableKubernetesAlpha, googleCredentialSecret, imported, ipAllocationPolicy, kubernetesVersion, labels, locations, loggingService, maintenanceWindow, masterAuthorizedNetworksConfig, monitoringService, name, network, networkPolicyEnabled, nodePools, privateClusterConfig, projectId, region, subnetwork, zone);
        }
    }
}
