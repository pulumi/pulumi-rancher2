// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigDns;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNode;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigServices;
import com.pulumi.rancher2.outputs.GetClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterTemplateTemplateRevisionClusterConfigRkeConfig {
    private Integer addonJobTimeout;
    private @Nullable String addons;
    private @Nullable List<String> addonsIncludes;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication authentication;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization authorization;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost bastionHost;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider cloudProvider;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigDns dns;
    private @Nullable Boolean enableCriDockerd;
    private @Nullable Boolean ignoreDockerVersion;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress ingress;
    private String kubernetesVersion;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring monitoring;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork network;
    private @Nullable List<GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNode> nodes;
    private String prefixPath;
    private @Nullable List<GetClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry> privateRegistries;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigServices services;
    private @Nullable Boolean sshAgentAuth;
    private String sshCertPath;
    private String sshKeyPath;
    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy upgradeStrategy;
    private String winPrefixPath;

    private GetClusterTemplateTemplateRevisionClusterConfigRkeConfig() {}
    public Integer addonJobTimeout() {
        return this.addonJobTimeout;
    }
    public Optional<String> addons() {
        return Optional.ofNullable(this.addons);
    }
    public List<String> addonsIncludes() {
        return this.addonsIncludes == null ? List.of() : this.addonsIncludes;
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication authentication() {
        return this.authentication;
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization authorization() {
        return this.authorization;
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost bastionHost() {
        return this.bastionHost;
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider cloudProvider() {
        return this.cloudProvider;
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigDns dns() {
        return this.dns;
    }
    public Optional<Boolean> enableCriDockerd() {
        return Optional.ofNullable(this.enableCriDockerd);
    }
    public Optional<Boolean> ignoreDockerVersion() {
        return Optional.ofNullable(this.ignoreDockerVersion);
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress ingress() {
        return this.ingress;
    }
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring monitoring() {
        return this.monitoring;
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork network() {
        return this.network;
    }
    public List<GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNode> nodes() {
        return this.nodes == null ? List.of() : this.nodes;
    }
    public String prefixPath() {
        return this.prefixPath;
    }
    public List<GetClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry> privateRegistries() {
        return this.privateRegistries == null ? List.of() : this.privateRegistries;
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigServices services() {
        return this.services;
    }
    public Optional<Boolean> sshAgentAuth() {
        return Optional.ofNullable(this.sshAgentAuth);
    }
    public String sshCertPath() {
        return this.sshCertPath;
    }
    public String sshKeyPath() {
        return this.sshKeyPath;
    }
    public GetClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy upgradeStrategy() {
        return this.upgradeStrategy;
    }
    public String winPrefixPath() {
        return this.winPrefixPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterTemplateTemplateRevisionClusterConfigRkeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer addonJobTimeout;
        private @Nullable String addons;
        private @Nullable List<String> addonsIncludes;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication authentication;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization authorization;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost bastionHost;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider cloudProvider;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigDns dns;
        private @Nullable Boolean enableCriDockerd;
        private @Nullable Boolean ignoreDockerVersion;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress ingress;
        private String kubernetesVersion;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring monitoring;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork network;
        private @Nullable List<GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNode> nodes;
        private String prefixPath;
        private @Nullable List<GetClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry> privateRegistries;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigServices services;
        private @Nullable Boolean sshAgentAuth;
        private String sshCertPath;
        private String sshKeyPath;
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy upgradeStrategy;
        private String winPrefixPath;
        public Builder() {}
        public Builder(GetClusterTemplateTemplateRevisionClusterConfigRkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addonJobTimeout = defaults.addonJobTimeout;
    	      this.addons = defaults.addons;
    	      this.addonsIncludes = defaults.addonsIncludes;
    	      this.authentication = defaults.authentication;
    	      this.authorization = defaults.authorization;
    	      this.bastionHost = defaults.bastionHost;
    	      this.cloudProvider = defaults.cloudProvider;
    	      this.dns = defaults.dns;
    	      this.enableCriDockerd = defaults.enableCriDockerd;
    	      this.ignoreDockerVersion = defaults.ignoreDockerVersion;
    	      this.ingress = defaults.ingress;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.monitoring = defaults.monitoring;
    	      this.network = defaults.network;
    	      this.nodes = defaults.nodes;
    	      this.prefixPath = defaults.prefixPath;
    	      this.privateRegistries = defaults.privateRegistries;
    	      this.services = defaults.services;
    	      this.sshAgentAuth = defaults.sshAgentAuth;
    	      this.sshCertPath = defaults.sshCertPath;
    	      this.sshKeyPath = defaults.sshKeyPath;
    	      this.upgradeStrategy = defaults.upgradeStrategy;
    	      this.winPrefixPath = defaults.winPrefixPath;
        }

        @CustomType.Setter
        public Builder addonJobTimeout(Integer addonJobTimeout) {
            this.addonJobTimeout = Objects.requireNonNull(addonJobTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder addons(@Nullable String addons) {
            this.addons = addons;
            return this;
        }
        @CustomType.Setter
        public Builder addonsIncludes(@Nullable List<String> addonsIncludes) {
            this.addonsIncludes = addonsIncludes;
            return this;
        }
        public Builder addonsIncludes(String... addonsIncludes) {
            return addonsIncludes(List.of(addonsIncludes));
        }
        @CustomType.Setter
        public Builder authentication(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthentication authentication) {
            this.authentication = Objects.requireNonNull(authentication);
            return this;
        }
        @CustomType.Setter
        public Builder authorization(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorization authorization) {
            this.authorization = Objects.requireNonNull(authorization);
            return this;
        }
        @CustomType.Setter
        public Builder bastionHost(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHost bastionHost) {
            this.bastionHost = Objects.requireNonNull(bastionHost);
            return this;
        }
        @CustomType.Setter
        public Builder cloudProvider(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProvider cloudProvider) {
            this.cloudProvider = Objects.requireNonNull(cloudProvider);
            return this;
        }
        @CustomType.Setter
        public Builder dns(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigDns dns) {
            this.dns = Objects.requireNonNull(dns);
            return this;
        }
        @CustomType.Setter
        public Builder enableCriDockerd(@Nullable Boolean enableCriDockerd) {
            this.enableCriDockerd = enableCriDockerd;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreDockerVersion(@Nullable Boolean ignoreDockerVersion) {
            this.ignoreDockerVersion = ignoreDockerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ingress(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigIngress ingress) {
            this.ingress = Objects.requireNonNull(ingress);
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            this.kubernetesVersion = Objects.requireNonNull(kubernetesVersion);
            return this;
        }
        @CustomType.Setter
        public Builder monitoring(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoring monitoring) {
            this.monitoring = Objects.requireNonNull(monitoring);
            return this;
        }
        @CustomType.Setter
        public Builder network(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNetwork network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        @CustomType.Setter
        public Builder nodes(@Nullable List<GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNode> nodes) {
            this.nodes = nodes;
            return this;
        }
        public Builder nodes(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNode... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder prefixPath(String prefixPath) {
            this.prefixPath = Objects.requireNonNull(prefixPath);
            return this;
        }
        @CustomType.Setter
        public Builder privateRegistries(@Nullable List<GetClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry> privateRegistries) {
            this.privateRegistries = privateRegistries;
            return this;
        }
        public Builder privateRegistries(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistry... privateRegistries) {
            return privateRegistries(List.of(privateRegistries));
        }
        @CustomType.Setter
        public Builder services(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigServices services) {
            this.services = Objects.requireNonNull(services);
            return this;
        }
        @CustomType.Setter
        public Builder sshAgentAuth(@Nullable Boolean sshAgentAuth) {
            this.sshAgentAuth = sshAgentAuth;
            return this;
        }
        @CustomType.Setter
        public Builder sshCertPath(String sshCertPath) {
            this.sshCertPath = Objects.requireNonNull(sshCertPath);
            return this;
        }
        @CustomType.Setter
        public Builder sshKeyPath(String sshKeyPath) {
            this.sshKeyPath = Objects.requireNonNull(sshKeyPath);
            return this;
        }
        @CustomType.Setter
        public Builder upgradeStrategy(GetClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategy upgradeStrategy) {
            this.upgradeStrategy = Objects.requireNonNull(upgradeStrategy);
            return this;
        }
        @CustomType.Setter
        public Builder winPrefixPath(String winPrefixPath) {
            this.winPrefixPath = Objects.requireNonNull(winPrefixPath);
            return this;
        }
        public GetClusterTemplateTemplateRevisionClusterConfigRkeConfig build() {
            final var o = new GetClusterTemplateTemplateRevisionClusterConfigRkeConfig();
            o.addonJobTimeout = addonJobTimeout;
            o.addons = addons;
            o.addonsIncludes = addonsIncludes;
            o.authentication = authentication;
            o.authorization = authorization;
            o.bastionHost = bastionHost;
            o.cloudProvider = cloudProvider;
            o.dns = dns;
            o.enableCriDockerd = enableCriDockerd;
            o.ignoreDockerVersion = ignoreDockerVersion;
            o.ingress = ingress;
            o.kubernetesVersion = kubernetesVersion;
            o.monitoring = monitoring;
            o.network = network;
            o.nodes = nodes;
            o.prefixPath = prefixPath;
            o.privateRegistries = privateRegistries;
            o.services = services;
            o.sshAgentAuth = sshAgentAuth;
            o.sshCertPath = sshCertPath;
            o.sshKeyPath = sshKeyPath;
            o.upgradeStrategy = upgradeStrategy;
            o.winPrefixPath = winPrefixPath;
            return o;
        }
    }
}
