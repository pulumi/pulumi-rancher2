// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterOkeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterOkeConfigArgs Empty = new ClusterOkeConfigArgs();

    /**
     * The OCID of the compartment in which to create resources OKE cluster and related resources (string)
     * 
     */
    @Import(name="compartmentId", required=true)
    private Output<String> compartmentId;

    /**
     * @return The OCID of the compartment in which to create resources OKE cluster and related resources (string)
     * 
     */
    public Output<String> compartmentId() {
        return this.compartmentId;
    }

    /**
     * Optional custom boot volume size (GB) for all nodes. If you specify 0, it will apply the default according to the `node_image` specified. Default `0` (int)
     * 
     */
    @Import(name="customBootVolumeSize")
    private @Nullable Output<Integer> customBootVolumeSize;

    /**
     * @return Optional custom boot volume size (GB) for all nodes. If you specify 0, it will apply the default according to the `node_image` specified. Default `0` (int)
     * 
     */
    public Optional<Output<Integer>> customBootVolumeSize() {
        return Optional.ofNullable(this.customBootVolumeSize);
    }

    /**
     * The description for Cluster (string)
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description for Cluster (string)
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
     * 
     */
    @Import(name="enableKubernetesDashboard")
    private @Nullable Output<Boolean> enableKubernetesDashboard;

    /**
     * @return Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableKubernetesDashboard() {
        return Optional.ofNullable(this.enableKubernetesDashboard);
    }

    /**
     * Specifies whether Kubernetes API endpoint is a private IP only accessible from within the VCN. Default `false` for Rancher v2.5.10 and above (bool)
     * 
     */
    @Import(name="enablePrivateControlPlane")
    private @Nullable Output<Boolean> enablePrivateControlPlane;

    /**
     * @return Specifies whether Kubernetes API endpoint is a private IP only accessible from within the VCN. Default `false` for Rancher v2.5.10 and above (bool)
     * 
     */
    public Optional<Output<Boolean>> enablePrivateControlPlane() {
        return Optional.ofNullable(this.enablePrivateControlPlane);
    }

    /**
     * Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
     * 
     */
    @Import(name="enablePrivateNodes")
    private @Nullable Output<Boolean> enablePrivateNodes;

    /**
     * @return Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enablePrivateNodes() {
        return Optional.ofNullable(this.enablePrivateNodes);
    }

    /**
     * The fingerprint corresponding to the specified user&#39;s private API Key (string)
     * 
     */
    @Import(name="fingerprint", required=true)
    private Output<String> fingerprint;

    /**
     * @return The fingerprint corresponding to the specified user&#39;s private API Key (string)
     * 
     */
    public Output<String> fingerprint() {
        return this.fingerprint;
    }

    /**
     * Specifies number of OCPUs for nodes (requires flexible shape specified with `node_shape`) (int)
     * 
     */
    @Import(name="flexOcpus")
    private @Nullable Output<Integer> flexOcpus;

    /**
     * @return Specifies number of OCPUs for nodes (requires flexible shape specified with `node_shape`) (int)
     * 
     */
    public Optional<Output<Integer>> flexOcpus() {
        return Optional.ofNullable(this.flexOcpus);
    }

    /**
     * The OCID of a KMS vault master key used to encrypt secrets at rest. See [here](https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengencryptingdata.htm) for help creating a vault and master encryption key. For Rancher v2.5.9 and above (string)
     * 
     */
    @Import(name="kmsKeyId")
    private @Nullable Output<String> kmsKeyId;

    /**
     * @return The OCID of a KMS vault master key used to encrypt secrets at rest. See [here](https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengencryptingdata.htm) for help creating a vault and master encryption key. For Rancher v2.5.9 and above (string)
     * 
     */
    public Optional<Output<String>> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }

    /**
     * The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    @Import(name="kubernetesVersion", required=true)
    private Output<String> kubernetesVersion;

    /**
     * @return The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
     * 
     */
    public Output<String> kubernetesVersion() {
        return this.kubernetesVersion;
    }

    /**
     * The maximum number of worker nodes. Can limit `quantity_per_subnet`. Default `0` (no limit) (int)
     * 
     */
    @Import(name="limitNodeCount")
    private @Nullable Output<Integer> limitNodeCount;

    /**
     * @return The maximum number of worker nodes. Can limit `quantity_per_subnet`. Default `0` (no limit) (int)
     * 
     */
    public Optional<Output<Integer>> limitNodeCount() {
        return Optional.ofNullable(this.limitNodeCount);
    }

    /**
     * The name of the first existing subnet to use for Kubernetes services / LB. `vcn_name` is also required when specifying an existing subnet. (string)
     * 
     */
    @Import(name="loadBalancerSubnetName1")
    private @Nullable Output<String> loadBalancerSubnetName1;

    /**
     * @return The name of the first existing subnet to use for Kubernetes services / LB. `vcn_name` is also required when specifying an existing subnet. (string)
     * 
     */
    public Optional<Output<String>> loadBalancerSubnetName1() {
        return Optional.ofNullable(this.loadBalancerSubnetName1);
    }

    /**
     * The name of a second existing subnet to use for Kubernetes services / LB. A second subnet is only required when it is AD-specific (non-regional) (string)
     * 
     */
    @Import(name="loadBalancerSubnetName2")
    private @Nullable Output<String> loadBalancerSubnetName2;

    /**
     * @return The name of a second existing subnet to use for Kubernetes services / LB. A second subnet is only required when it is AD-specific (non-regional) (string)
     * 
     */
    public Optional<Output<String>> loadBalancerSubnetName2() {
        return Optional.ofNullable(this.loadBalancerSubnetName2);
    }

    /**
     * The Oracle Linux OS image name to use for the OKE node(s). See [here](https://docs.cloud.oracle.com/en-us/iaas/images/) for a list of images. (string)
     * 
     */
    @Import(name="nodeImage", required=true)
    private Output<String> nodeImage;

    /**
     * @return The Oracle Linux OS image name to use for the OKE node(s). See [here](https://docs.cloud.oracle.com/en-us/iaas/images/) for a list of images. (string)
     * 
     */
    public Output<String> nodeImage() {
        return this.nodeImage;
    }

    /**
     * Name for DNS domain of node pool subnet. Default `nodedns` (string)
     * 
     */
    @Import(name="nodePoolDnsDomainName")
    private @Nullable Output<String> nodePoolDnsDomainName;

    /**
     * @return Name for DNS domain of node pool subnet. Default `nodedns` (string)
     * 
     */
    public Optional<Output<String>> nodePoolDnsDomainName() {
        return Optional.ofNullable(this.nodePoolDnsDomainName);
    }

    /**
     * Name for node pool subnet. Default `nodedns` (string)
     * 
     */
    @Import(name="nodePoolSubnetName")
    private @Nullable Output<String> nodePoolSubnetName;

    /**
     * @return Name for node pool subnet. Default `nodedns` (string)
     * 
     */
    public Optional<Output<String>> nodePoolSubnetName() {
        return Optional.ofNullable(this.nodePoolSubnetName);
    }

    /**
     * The contents of the SSH public key file to use for the nodes (string)
     * 
     */
    @Import(name="nodePublicKeyContents")
    private @Nullable Output<String> nodePublicKeyContents;

    /**
     * @return The contents of the SSH public key file to use for the nodes (string)
     * 
     */
    public Optional<Output<String>> nodePublicKeyContents() {
        return Optional.ofNullable(this.nodePublicKeyContents);
    }

    /**
     * The shape of the node (determines number of CPUs and  amount of memory on each OKE node) (string)
     * 
     */
    @Import(name="nodeShape", required=true)
    private Output<String> nodeShape;

    /**
     * @return The shape of the node (determines number of CPUs and  amount of memory on each OKE node) (string)
     * 
     */
    public Output<String> nodeShape() {
        return this.nodeShape;
    }

    /**
     * A CIDR IP range from which to assign Kubernetes Pod IPs (string)
     * 
     */
    @Import(name="podCidr")
    private @Nullable Output<String> podCidr;

    /**
     * @return A CIDR IP range from which to assign Kubernetes Pod IPs (string)
     * 
     */
    public Optional<Output<String>> podCidr() {
        return Optional.ofNullable(this.podCidr);
    }

    /**
     * The private API key file contents for the specified user, in PEM format (string)
     * 
     */
    @Import(name="privateKeyContents", required=true)
    private Output<String> privateKeyContents;

    /**
     * @return The private API key file contents for the specified user, in PEM format (string)
     * 
     */
    public Output<String> privateKeyContents() {
        return this.privateKeyContents;
    }

    /**
     * The passphrase (if any) of the private key for the OKE cluster (string)
     * 
     */
    @Import(name="privateKeyPassphrase")
    private @Nullable Output<String> privateKeyPassphrase;

    /**
     * @return The passphrase (if any) of the private key for the OKE cluster (string)
     * 
     */
    public Optional<Output<String>> privateKeyPassphrase() {
        return Optional.ofNullable(this.privateKeyPassphrase);
    }

    /**
     * Number of node subnets. Default `1` (int)
     * 
     */
    @Import(name="quantityOfNodeSubnets")
    private @Nullable Output<Integer> quantityOfNodeSubnets;

    /**
     * @return Number of node subnets. Default `1` (int)
     * 
     */
    public Optional<Output<Integer>> quantityOfNodeSubnets() {
        return Optional.ofNullable(this.quantityOfNodeSubnets);
    }

    /**
     * Number of OKE worker nodes in each subnet / availability domain. Default `1` (int)
     * 
     */
    @Import(name="quantityPerSubnet")
    private @Nullable Output<Integer> quantityPerSubnet;

    /**
     * @return Number of OKE worker nodes in each subnet / availability domain. Default `1` (int)
     * 
     */
    public Optional<Output<Integer>> quantityPerSubnet() {
        return Optional.ofNullable(this.quantityPerSubnet);
    }

    /**
     * The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * A CIDR IP range from which to assign Kubernetes Service IPs (string)
     * 
     */
    @Import(name="serviceCidr")
    private @Nullable Output<String> serviceCidr;

    /**
     * @return A CIDR IP range from which to assign Kubernetes Service IPs (string)
     * 
     */
    public Optional<Output<String>> serviceCidr() {
        return Optional.ofNullable(this.serviceCidr);
    }

    /**
     * Name for DNS domain of service subnet. Default `svcdns` (string)
     * 
     */
    @Import(name="serviceDnsDomainName")
    private @Nullable Output<String> serviceDnsDomainName;

    /**
     * @return Name for DNS domain of service subnet. Default `svcdns` (string)
     * 
     */
    public Optional<Output<String>> serviceDnsDomainName() {
        return Optional.ofNullable(this.serviceDnsDomainName);
    }

    /**
     * Specifies whether to skip deleting the virtual cloud network (VCN) on destroy. Default `false` (bool)
     * 
     */
    @Import(name="skipVcnDelete")
    private @Nullable Output<Boolean> skipVcnDelete;

    /**
     * @return Specifies whether to skip deleting the virtual cloud network (VCN) on destroy. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> skipVcnDelete() {
        return Optional.ofNullable(this.skipVcnDelete);
    }

    /**
     * The OCID of the tenancy in which to create resources (string)
     * 
     */
    @Import(name="tenancyId", required=true)
    private Output<String> tenancyId;

    /**
     * @return The OCID of the tenancy in which to create resources (string)
     * 
     */
    public Output<String> tenancyId() {
        return this.tenancyId;
    }

    /**
     * The OCID of a user who has access to the tenancy/compartment (string)
     * 
     */
    @Import(name="userOcid", required=true)
    private Output<String> userOcid;

    /**
     * @return The OCID of a user who has access to the tenancy/compartment (string)
     * 
     */
    public Output<String> userOcid() {
        return this.userOcid;
    }

    /**
     * The OCID of the compartment (if different from `compartment_id`) in which to find the pre-existing virtual network set with `vcn_name`. (string)
     * 
     */
    @Import(name="vcnCompartmentId")
    private @Nullable Output<String> vcnCompartmentId;

    /**
     * @return The OCID of the compartment (if different from `compartment_id`) in which to find the pre-existing virtual network set with `vcn_name`. (string)
     * 
     */
    public Optional<Output<String>> vcnCompartmentId() {
        return Optional.ofNullable(this.vcnCompartmentId);
    }

    /**
     * The name of an existing virtual network to use for the cluster creation. If set, you must also set `load_balancer_subnet_name_1`. A VCN and subnets will be created if none are specified. (string)
     * 
     */
    @Import(name="vcnName")
    private @Nullable Output<String> vcnName;

    /**
     * @return The name of an existing virtual network to use for the cluster creation. If set, you must also set `load_balancer_subnet_name_1`. A VCN and subnets will be created if none are specified. (string)
     * 
     */
    public Optional<Output<String>> vcnName() {
        return Optional.ofNullable(this.vcnName);
    }

    /**
     * Additional CIDR from which to allow ingress to worker nodes (string)
     * 
     */
    @Import(name="workerNodeIngressCidr")
    private @Nullable Output<String> workerNodeIngressCidr;

    /**
     * @return Additional CIDR from which to allow ingress to worker nodes (string)
     * 
     */
    public Optional<Output<String>> workerNodeIngressCidr() {
        return Optional.ofNullable(this.workerNodeIngressCidr);
    }

    private ClusterOkeConfigArgs() {}

    private ClusterOkeConfigArgs(ClusterOkeConfigArgs $) {
        this.compartmentId = $.compartmentId;
        this.customBootVolumeSize = $.customBootVolumeSize;
        this.description = $.description;
        this.enableKubernetesDashboard = $.enableKubernetesDashboard;
        this.enablePrivateControlPlane = $.enablePrivateControlPlane;
        this.enablePrivateNodes = $.enablePrivateNodes;
        this.fingerprint = $.fingerprint;
        this.flexOcpus = $.flexOcpus;
        this.kmsKeyId = $.kmsKeyId;
        this.kubernetesVersion = $.kubernetesVersion;
        this.limitNodeCount = $.limitNodeCount;
        this.loadBalancerSubnetName1 = $.loadBalancerSubnetName1;
        this.loadBalancerSubnetName2 = $.loadBalancerSubnetName2;
        this.nodeImage = $.nodeImage;
        this.nodePoolDnsDomainName = $.nodePoolDnsDomainName;
        this.nodePoolSubnetName = $.nodePoolSubnetName;
        this.nodePublicKeyContents = $.nodePublicKeyContents;
        this.nodeShape = $.nodeShape;
        this.podCidr = $.podCidr;
        this.privateKeyContents = $.privateKeyContents;
        this.privateKeyPassphrase = $.privateKeyPassphrase;
        this.quantityOfNodeSubnets = $.quantityOfNodeSubnets;
        this.quantityPerSubnet = $.quantityPerSubnet;
        this.region = $.region;
        this.serviceCidr = $.serviceCidr;
        this.serviceDnsDomainName = $.serviceDnsDomainName;
        this.skipVcnDelete = $.skipVcnDelete;
        this.tenancyId = $.tenancyId;
        this.userOcid = $.userOcid;
        this.vcnCompartmentId = $.vcnCompartmentId;
        this.vcnName = $.vcnName;
        this.workerNodeIngressCidr = $.workerNodeIngressCidr;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterOkeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterOkeConfigArgs $;

        public Builder() {
            $ = new ClusterOkeConfigArgs();
        }

        public Builder(ClusterOkeConfigArgs defaults) {
            $ = new ClusterOkeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compartmentId The OCID of the compartment in which to create resources OKE cluster and related resources (string)
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(Output<String> compartmentId) {
            $.compartmentId = compartmentId;
            return this;
        }

        /**
         * @param compartmentId The OCID of the compartment in which to create resources OKE cluster and related resources (string)
         * 
         * @return builder
         * 
         */
        public Builder compartmentId(String compartmentId) {
            return compartmentId(Output.of(compartmentId));
        }

        /**
         * @param customBootVolumeSize Optional custom boot volume size (GB) for all nodes. If you specify 0, it will apply the default according to the `node_image` specified. Default `0` (int)
         * 
         * @return builder
         * 
         */
        public Builder customBootVolumeSize(@Nullable Output<Integer> customBootVolumeSize) {
            $.customBootVolumeSize = customBootVolumeSize;
            return this;
        }

        /**
         * @param customBootVolumeSize Optional custom boot volume size (GB) for all nodes. If you specify 0, it will apply the default according to the `node_image` specified. Default `0` (int)
         * 
         * @return builder
         * 
         */
        public Builder customBootVolumeSize(Integer customBootVolumeSize) {
            return customBootVolumeSize(Output.of(customBootVolumeSize));
        }

        /**
         * @param description The description for Cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description for Cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableKubernetesDashboard Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableKubernetesDashboard(@Nullable Output<Boolean> enableKubernetesDashboard) {
            $.enableKubernetesDashboard = enableKubernetesDashboard;
            return this;
        }

        /**
         * @param enableKubernetesDashboard Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableKubernetesDashboard(Boolean enableKubernetesDashboard) {
            return enableKubernetesDashboard(Output.of(enableKubernetesDashboard));
        }

        /**
         * @param enablePrivateControlPlane Specifies whether Kubernetes API endpoint is a private IP only accessible from within the VCN. Default `false` for Rancher v2.5.10 and above (bool)
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateControlPlane(@Nullable Output<Boolean> enablePrivateControlPlane) {
            $.enablePrivateControlPlane = enablePrivateControlPlane;
            return this;
        }

        /**
         * @param enablePrivateControlPlane Specifies whether Kubernetes API endpoint is a private IP only accessible from within the VCN. Default `false` for Rancher v2.5.10 and above (bool)
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateControlPlane(Boolean enablePrivateControlPlane) {
            return enablePrivateControlPlane(Output.of(enablePrivateControlPlane));
        }

        /**
         * @param enablePrivateNodes Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateNodes(@Nullable Output<Boolean> enablePrivateNodes) {
            $.enablePrivateNodes = enablePrivateNodes;
            return this;
        }

        /**
         * @param enablePrivateNodes Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enablePrivateNodes(Boolean enablePrivateNodes) {
            return enablePrivateNodes(Output.of(enablePrivateNodes));
        }

        /**
         * @param fingerprint The fingerprint corresponding to the specified user&#39;s private API Key (string)
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint The fingerprint corresponding to the specified user&#39;s private API Key (string)
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param flexOcpus Specifies number of OCPUs for nodes (requires flexible shape specified with `node_shape`) (int)
         * 
         * @return builder
         * 
         */
        public Builder flexOcpus(@Nullable Output<Integer> flexOcpus) {
            $.flexOcpus = flexOcpus;
            return this;
        }

        /**
         * @param flexOcpus Specifies number of OCPUs for nodes (requires flexible shape specified with `node_shape`) (int)
         * 
         * @return builder
         * 
         */
        public Builder flexOcpus(Integer flexOcpus) {
            return flexOcpus(Output.of(flexOcpus));
        }

        /**
         * @param kmsKeyId The OCID of a KMS vault master key used to encrypt secrets at rest. See [here](https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengencryptingdata.htm) for help creating a vault and master encryption key. For Rancher v2.5.9 and above (string)
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            $.kmsKeyId = kmsKeyId;
            return this;
        }

        /**
         * @param kmsKeyId The OCID of a KMS vault master key used to encrypt secrets at rest. See [here](https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengencryptingdata.htm) for help creating a vault and master encryption key. For Rancher v2.5.9 and above (string)
         * 
         * @return builder
         * 
         */
        public Builder kmsKeyId(String kmsKeyId) {
            return kmsKeyId(Output.of(kmsKeyId));
        }

        /**
         * @param kubernetesVersion The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(Output<String> kubernetesVersion) {
            $.kubernetesVersion = kubernetesVersion;
            return this;
        }

        /**
         * @param kubernetesVersion The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
         * 
         * @return builder
         * 
         */
        public Builder kubernetesVersion(String kubernetesVersion) {
            return kubernetesVersion(Output.of(kubernetesVersion));
        }

        /**
         * @param limitNodeCount The maximum number of worker nodes. Can limit `quantity_per_subnet`. Default `0` (no limit) (int)
         * 
         * @return builder
         * 
         */
        public Builder limitNodeCount(@Nullable Output<Integer> limitNodeCount) {
            $.limitNodeCount = limitNodeCount;
            return this;
        }

        /**
         * @param limitNodeCount The maximum number of worker nodes. Can limit `quantity_per_subnet`. Default `0` (no limit) (int)
         * 
         * @return builder
         * 
         */
        public Builder limitNodeCount(Integer limitNodeCount) {
            return limitNodeCount(Output.of(limitNodeCount));
        }

        /**
         * @param loadBalancerSubnetName1 The name of the first existing subnet to use for Kubernetes services / LB. `vcn_name` is also required when specifying an existing subnet. (string)
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerSubnetName1(@Nullable Output<String> loadBalancerSubnetName1) {
            $.loadBalancerSubnetName1 = loadBalancerSubnetName1;
            return this;
        }

        /**
         * @param loadBalancerSubnetName1 The name of the first existing subnet to use for Kubernetes services / LB. `vcn_name` is also required when specifying an existing subnet. (string)
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerSubnetName1(String loadBalancerSubnetName1) {
            return loadBalancerSubnetName1(Output.of(loadBalancerSubnetName1));
        }

        /**
         * @param loadBalancerSubnetName2 The name of a second existing subnet to use for Kubernetes services / LB. A second subnet is only required when it is AD-specific (non-regional) (string)
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerSubnetName2(@Nullable Output<String> loadBalancerSubnetName2) {
            $.loadBalancerSubnetName2 = loadBalancerSubnetName2;
            return this;
        }

        /**
         * @param loadBalancerSubnetName2 The name of a second existing subnet to use for Kubernetes services / LB. A second subnet is only required when it is AD-specific (non-regional) (string)
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerSubnetName2(String loadBalancerSubnetName2) {
            return loadBalancerSubnetName2(Output.of(loadBalancerSubnetName2));
        }

        /**
         * @param nodeImage The Oracle Linux OS image name to use for the OKE node(s). See [here](https://docs.cloud.oracle.com/en-us/iaas/images/) for a list of images. (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeImage(Output<String> nodeImage) {
            $.nodeImage = nodeImage;
            return this;
        }

        /**
         * @param nodeImage The Oracle Linux OS image name to use for the OKE node(s). See [here](https://docs.cloud.oracle.com/en-us/iaas/images/) for a list of images. (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeImage(String nodeImage) {
            return nodeImage(Output.of(nodeImage));
        }

        /**
         * @param nodePoolDnsDomainName Name for DNS domain of node pool subnet. Default `nodedns` (string)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolDnsDomainName(@Nullable Output<String> nodePoolDnsDomainName) {
            $.nodePoolDnsDomainName = nodePoolDnsDomainName;
            return this;
        }

        /**
         * @param nodePoolDnsDomainName Name for DNS domain of node pool subnet. Default `nodedns` (string)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolDnsDomainName(String nodePoolDnsDomainName) {
            return nodePoolDnsDomainName(Output.of(nodePoolDnsDomainName));
        }

        /**
         * @param nodePoolSubnetName Name for node pool subnet. Default `nodedns` (string)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolSubnetName(@Nullable Output<String> nodePoolSubnetName) {
            $.nodePoolSubnetName = nodePoolSubnetName;
            return this;
        }

        /**
         * @param nodePoolSubnetName Name for node pool subnet. Default `nodedns` (string)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolSubnetName(String nodePoolSubnetName) {
            return nodePoolSubnetName(Output.of(nodePoolSubnetName));
        }

        /**
         * @param nodePublicKeyContents The contents of the SSH public key file to use for the nodes (string)
         * 
         * @return builder
         * 
         */
        public Builder nodePublicKeyContents(@Nullable Output<String> nodePublicKeyContents) {
            $.nodePublicKeyContents = nodePublicKeyContents;
            return this;
        }

        /**
         * @param nodePublicKeyContents The contents of the SSH public key file to use for the nodes (string)
         * 
         * @return builder
         * 
         */
        public Builder nodePublicKeyContents(String nodePublicKeyContents) {
            return nodePublicKeyContents(Output.of(nodePublicKeyContents));
        }

        /**
         * @param nodeShape The shape of the node (determines number of CPUs and  amount of memory on each OKE node) (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeShape(Output<String> nodeShape) {
            $.nodeShape = nodeShape;
            return this;
        }

        /**
         * @param nodeShape The shape of the node (determines number of CPUs and  amount of memory on each OKE node) (string)
         * 
         * @return builder
         * 
         */
        public Builder nodeShape(String nodeShape) {
            return nodeShape(Output.of(nodeShape));
        }

        /**
         * @param podCidr A CIDR IP range from which to assign Kubernetes Pod IPs (string)
         * 
         * @return builder
         * 
         */
        public Builder podCidr(@Nullable Output<String> podCidr) {
            $.podCidr = podCidr;
            return this;
        }

        /**
         * @param podCidr A CIDR IP range from which to assign Kubernetes Pod IPs (string)
         * 
         * @return builder
         * 
         */
        public Builder podCidr(String podCidr) {
            return podCidr(Output.of(podCidr));
        }

        /**
         * @param privateKeyContents The private API key file contents for the specified user, in PEM format (string)
         * 
         * @return builder
         * 
         */
        public Builder privateKeyContents(Output<String> privateKeyContents) {
            $.privateKeyContents = privateKeyContents;
            return this;
        }

        /**
         * @param privateKeyContents The private API key file contents for the specified user, in PEM format (string)
         * 
         * @return builder
         * 
         */
        public Builder privateKeyContents(String privateKeyContents) {
            return privateKeyContents(Output.of(privateKeyContents));
        }

        /**
         * @param privateKeyPassphrase The passphrase (if any) of the private key for the OKE cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(@Nullable Output<String> privateKeyPassphrase) {
            $.privateKeyPassphrase = privateKeyPassphrase;
            return this;
        }

        /**
         * @param privateKeyPassphrase The passphrase (if any) of the private key for the OKE cluster (string)
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassphrase(String privateKeyPassphrase) {
            return privateKeyPassphrase(Output.of(privateKeyPassphrase));
        }

        /**
         * @param quantityOfNodeSubnets Number of node subnets. Default `1` (int)
         * 
         * @return builder
         * 
         */
        public Builder quantityOfNodeSubnets(@Nullable Output<Integer> quantityOfNodeSubnets) {
            $.quantityOfNodeSubnets = quantityOfNodeSubnets;
            return this;
        }

        /**
         * @param quantityOfNodeSubnets Number of node subnets. Default `1` (int)
         * 
         * @return builder
         * 
         */
        public Builder quantityOfNodeSubnets(Integer quantityOfNodeSubnets) {
            return quantityOfNodeSubnets(Output.of(quantityOfNodeSubnets));
        }

        /**
         * @param quantityPerSubnet Number of OKE worker nodes in each subnet / availability domain. Default `1` (int)
         * 
         * @return builder
         * 
         */
        public Builder quantityPerSubnet(@Nullable Output<Integer> quantityPerSubnet) {
            $.quantityPerSubnet = quantityPerSubnet;
            return this;
        }

        /**
         * @param quantityPerSubnet Number of OKE worker nodes in each subnet / availability domain. Default `1` (int)
         * 
         * @return builder
         * 
         */
        public Builder quantityPerSubnet(Integer quantityPerSubnet) {
            return quantityPerSubnet(Output.of(quantityPerSubnet));
        }

        /**
         * @param region The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceCidr A CIDR IP range from which to assign Kubernetes Service IPs (string)
         * 
         * @return builder
         * 
         */
        public Builder serviceCidr(@Nullable Output<String> serviceCidr) {
            $.serviceCidr = serviceCidr;
            return this;
        }

        /**
         * @param serviceCidr A CIDR IP range from which to assign Kubernetes Service IPs (string)
         * 
         * @return builder
         * 
         */
        public Builder serviceCidr(String serviceCidr) {
            return serviceCidr(Output.of(serviceCidr));
        }

        /**
         * @param serviceDnsDomainName Name for DNS domain of service subnet. Default `svcdns` (string)
         * 
         * @return builder
         * 
         */
        public Builder serviceDnsDomainName(@Nullable Output<String> serviceDnsDomainName) {
            $.serviceDnsDomainName = serviceDnsDomainName;
            return this;
        }

        /**
         * @param serviceDnsDomainName Name for DNS domain of service subnet. Default `svcdns` (string)
         * 
         * @return builder
         * 
         */
        public Builder serviceDnsDomainName(String serviceDnsDomainName) {
            return serviceDnsDomainName(Output.of(serviceDnsDomainName));
        }

        /**
         * @param skipVcnDelete Specifies whether to skip deleting the virtual cloud network (VCN) on destroy. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder skipVcnDelete(@Nullable Output<Boolean> skipVcnDelete) {
            $.skipVcnDelete = skipVcnDelete;
            return this;
        }

        /**
         * @param skipVcnDelete Specifies whether to skip deleting the virtual cloud network (VCN) on destroy. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder skipVcnDelete(Boolean skipVcnDelete) {
            return skipVcnDelete(Output.of(skipVcnDelete));
        }

        /**
         * @param tenancyId The OCID of the tenancy in which to create resources (string)
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(Output<String> tenancyId) {
            $.tenancyId = tenancyId;
            return this;
        }

        /**
         * @param tenancyId The OCID of the tenancy in which to create resources (string)
         * 
         * @return builder
         * 
         */
        public Builder tenancyId(String tenancyId) {
            return tenancyId(Output.of(tenancyId));
        }

        /**
         * @param userOcid The OCID of a user who has access to the tenancy/compartment (string)
         * 
         * @return builder
         * 
         */
        public Builder userOcid(Output<String> userOcid) {
            $.userOcid = userOcid;
            return this;
        }

        /**
         * @param userOcid The OCID of a user who has access to the tenancy/compartment (string)
         * 
         * @return builder
         * 
         */
        public Builder userOcid(String userOcid) {
            return userOcid(Output.of(userOcid));
        }

        /**
         * @param vcnCompartmentId The OCID of the compartment (if different from `compartment_id`) in which to find the pre-existing virtual network set with `vcn_name`. (string)
         * 
         * @return builder
         * 
         */
        public Builder vcnCompartmentId(@Nullable Output<String> vcnCompartmentId) {
            $.vcnCompartmentId = vcnCompartmentId;
            return this;
        }

        /**
         * @param vcnCompartmentId The OCID of the compartment (if different from `compartment_id`) in which to find the pre-existing virtual network set with `vcn_name`. (string)
         * 
         * @return builder
         * 
         */
        public Builder vcnCompartmentId(String vcnCompartmentId) {
            return vcnCompartmentId(Output.of(vcnCompartmentId));
        }

        /**
         * @param vcnName The name of an existing virtual network to use for the cluster creation. If set, you must also set `load_balancer_subnet_name_1`. A VCN and subnets will be created if none are specified. (string)
         * 
         * @return builder
         * 
         */
        public Builder vcnName(@Nullable Output<String> vcnName) {
            $.vcnName = vcnName;
            return this;
        }

        /**
         * @param vcnName The name of an existing virtual network to use for the cluster creation. If set, you must also set `load_balancer_subnet_name_1`. A VCN and subnets will be created if none are specified. (string)
         * 
         * @return builder
         * 
         */
        public Builder vcnName(String vcnName) {
            return vcnName(Output.of(vcnName));
        }

        /**
         * @param workerNodeIngressCidr Additional CIDR from which to allow ingress to worker nodes (string)
         * 
         * @return builder
         * 
         */
        public Builder workerNodeIngressCidr(@Nullable Output<String> workerNodeIngressCidr) {
            $.workerNodeIngressCidr = workerNodeIngressCidr;
            return this;
        }

        /**
         * @param workerNodeIngressCidr Additional CIDR from which to allow ingress to worker nodes (string)
         * 
         * @return builder
         * 
         */
        public Builder workerNodeIngressCidr(String workerNodeIngressCidr) {
            return workerNodeIngressCidr(Output.of(workerNodeIngressCidr));
        }

        public ClusterOkeConfigArgs build() {
            if ($.compartmentId == null) {
                throw new MissingRequiredPropertyException("ClusterOkeConfigArgs", "compartmentId");
            }
            if ($.fingerprint == null) {
                throw new MissingRequiredPropertyException("ClusterOkeConfigArgs", "fingerprint");
            }
            if ($.kubernetesVersion == null) {
                throw new MissingRequiredPropertyException("ClusterOkeConfigArgs", "kubernetesVersion");
            }
            if ($.nodeImage == null) {
                throw new MissingRequiredPropertyException("ClusterOkeConfigArgs", "nodeImage");
            }
            if ($.nodeShape == null) {
                throw new MissingRequiredPropertyException("ClusterOkeConfigArgs", "nodeShape");
            }
            if ($.privateKeyContents == null) {
                throw new MissingRequiredPropertyException("ClusterOkeConfigArgs", "privateKeyContents");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ClusterOkeConfigArgs", "region");
            }
            if ($.tenancyId == null) {
                throw new MissingRequiredPropertyException("ClusterOkeConfigArgs", "tenancyId");
            }
            if ($.userOcid == null) {
                throw new MissingRequiredPropertyException("ClusterOkeConfigArgs", "userOcid");
            }
            return $;
        }
    }

}
