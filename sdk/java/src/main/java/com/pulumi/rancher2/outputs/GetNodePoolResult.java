// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.rancher2.outputs.GetNodePoolNodeTaint;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetNodePoolResult {
    /**
     * @return (Computed) Annotations for Node Pool object (map)
     * 
     */
    private Map<String,Object> annotations;
    private String clusterId;
    /**
     * @return (Computed) RKE control plane role for created nodes (bool)
     * 
     */
    private Boolean controlPlane;
    /**
     * @return (Computed) Delete not ready node after secs. Default `0` (int)
     * 
     */
    private Integer deleteNotReadyAfterSecs;
    /**
     * @return (Computed) RKE etcd role for created nodes (bool)
     * 
     */
    private Boolean etcd;
    /**
     * @return (Computed) The prefix for created nodes of the Node Pool (string)
     * 
     */
    private String hostnamePrefix;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    private Map<String,Object> labels;
    private String name;
    /**
     * @return (Computed) Node taints (List)
     * 
     */
    private List<GetNodePoolNodeTaint> nodeTaints;
    private String nodeTemplateId;
    /**
     * @return (Computed) The number of nodes to create on Node Pool (int)
     * 
     */
    private Integer quantity;
    /**
     * @return (Computed) RKE role role for created nodes (bool)
     * 
     */
    private Boolean worker;

    private GetNodePoolResult() {}
    /**
     * @return (Computed) Annotations for Node Pool object (map)
     * 
     */
    public Map<String,Object> annotations() {
        return this.annotations;
    }
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return (Computed) RKE control plane role for created nodes (bool)
     * 
     */
    public Boolean controlPlane() {
        return this.controlPlane;
    }
    /**
     * @return (Computed) Delete not ready node after secs. Default `0` (int)
     * 
     */
    public Integer deleteNotReadyAfterSecs() {
        return this.deleteNotReadyAfterSecs;
    }
    /**
     * @return (Computed) RKE etcd role for created nodes (bool)
     * 
     */
    public Boolean etcd() {
        return this.etcd;
    }
    /**
     * @return (Computed) The prefix for created nodes of the Node Pool (string)
     * 
     */
    public String hostnamePrefix() {
        return this.hostnamePrefix;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) Node taints (List)
     * 
     */
    public List<GetNodePoolNodeTaint> nodeTaints() {
        return this.nodeTaints;
    }
    public String nodeTemplateId() {
        return this.nodeTemplateId;
    }
    /**
     * @return (Computed) The number of nodes to create on Node Pool (int)
     * 
     */
    public Integer quantity() {
        return this.quantity;
    }
    /**
     * @return (Computed) RKE role role for created nodes (bool)
     * 
     */
    public Boolean worker() {
        return this.worker;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNodePoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> annotations;
        private String clusterId;
        private Boolean controlPlane;
        private Integer deleteNotReadyAfterSecs;
        private Boolean etcd;
        private String hostnamePrefix;
        private String id;
        private Map<String,Object> labels;
        private String name;
        private List<GetNodePoolNodeTaint> nodeTaints;
        private String nodeTemplateId;
        private Integer quantity;
        private Boolean worker;
        public Builder() {}
        public Builder(GetNodePoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.clusterId = defaults.clusterId;
    	      this.controlPlane = defaults.controlPlane;
    	      this.deleteNotReadyAfterSecs = defaults.deleteNotReadyAfterSecs;
    	      this.etcd = defaults.etcd;
    	      this.hostnamePrefix = defaults.hostnamePrefix;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.nodeTaints = defaults.nodeTaints;
    	      this.nodeTemplateId = defaults.nodeTemplateId;
    	      this.quantity = defaults.quantity;
    	      this.worker = defaults.worker;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,Object> annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder controlPlane(Boolean controlPlane) {
            if (controlPlane == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "controlPlane");
            }
            this.controlPlane = controlPlane;
            return this;
        }
        @CustomType.Setter
        public Builder deleteNotReadyAfterSecs(Integer deleteNotReadyAfterSecs) {
            if (deleteNotReadyAfterSecs == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "deleteNotReadyAfterSecs");
            }
            this.deleteNotReadyAfterSecs = deleteNotReadyAfterSecs;
            return this;
        }
        @CustomType.Setter
        public Builder etcd(Boolean etcd) {
            if (etcd == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "etcd");
            }
            this.etcd = etcd;
            return this;
        }
        @CustomType.Setter
        public Builder hostnamePrefix(String hostnamePrefix) {
            if (hostnamePrefix == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "hostnamePrefix");
            }
            this.hostnamePrefix = hostnamePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nodeTaints(List<GetNodePoolNodeTaint> nodeTaints) {
            if (nodeTaints == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "nodeTaints");
            }
            this.nodeTaints = nodeTaints;
            return this;
        }
        public Builder nodeTaints(GetNodePoolNodeTaint... nodeTaints) {
            return nodeTaints(List.of(nodeTaints));
        }
        @CustomType.Setter
        public Builder nodeTemplateId(String nodeTemplateId) {
            if (nodeTemplateId == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "nodeTemplateId");
            }
            this.nodeTemplateId = nodeTemplateId;
            return this;
        }
        @CustomType.Setter
        public Builder quantity(Integer quantity) {
            if (quantity == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "quantity");
            }
            this.quantity = quantity;
            return this;
        }
        @CustomType.Setter
        public Builder worker(Boolean worker) {
            if (worker == null) {
              throw new MissingRequiredPropertyException("GetNodePoolResult", "worker");
            }
            this.worker = worker;
            return this;
        }
        public GetNodePoolResult build() {
            final var _resultValue = new GetNodePoolResult();
            _resultValue.annotations = annotations;
            _resultValue.clusterId = clusterId;
            _resultValue.controlPlane = controlPlane;
            _resultValue.deleteNotReadyAfterSecs = deleteNotReadyAfterSecs;
            _resultValue.etcd = etcd;
            _resultValue.hostnamePrefix = hostnamePrefix;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.nodeTaints = nodeTaints;
            _resultValue.nodeTemplateId = nodeTemplateId;
            _resultValue.quantity = quantity;
            _resultValue.worker = worker;
            return _resultValue;
        }
    }
}
