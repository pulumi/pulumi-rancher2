// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterV2RkeConfigMachinePoolMachineConfig;
import com.pulumi.rancher2.outputs.GetClusterV2RkeConfigMachinePoolRollingUpdate;
import com.pulumi.rancher2.outputs.GetClusterV2RkeConfigMachinePoolTaint;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterV2RkeConfigMachinePool {
    private final Map<String,Object> annotations;
    /**
     * @return (Computed) Cluster V2 cloud credential secret name (string)
     * 
     */
    private final String cloudCredentialSecretName;
    private final @Nullable Boolean controlPlaneRole;
    private final @Nullable Boolean drainBeforeDelete;
    private final @Nullable Boolean etcdRole;
    private final Map<String,Object> labels;
    private final GetClusterV2RkeConfigMachinePoolMachineConfig machineConfig;
    private final @Nullable String maxUnhealthy;
    /**
     * @return The name of the Cluster v2 (string)
     * 
     */
    private final String name;
    private final @Nullable Integer nodeDrainTimeout;
    private final @Nullable Integer nodeStartupTimeoutSeconds;
    private final @Nullable Boolean paused;
    private final @Nullable Integer quantity;
    private final @Nullable GetClusterV2RkeConfigMachinePoolRollingUpdate rollingUpdate;
    private final @Nullable List<GetClusterV2RkeConfigMachinePoolTaint> taints;
    private final @Nullable Integer unhealthyNodeTimeoutSeconds;
    private final @Nullable String unhealthyRange;
    private final @Nullable Boolean workerRole;

    @CustomType.Constructor
    private GetClusterV2RkeConfigMachinePool(
        @CustomType.Parameter("annotations") Map<String,Object> annotations,
        @CustomType.Parameter("cloudCredentialSecretName") String cloudCredentialSecretName,
        @CustomType.Parameter("controlPlaneRole") @Nullable Boolean controlPlaneRole,
        @CustomType.Parameter("drainBeforeDelete") @Nullable Boolean drainBeforeDelete,
        @CustomType.Parameter("etcdRole") @Nullable Boolean etcdRole,
        @CustomType.Parameter("labels") Map<String,Object> labels,
        @CustomType.Parameter("machineConfig") GetClusterV2RkeConfigMachinePoolMachineConfig machineConfig,
        @CustomType.Parameter("maxUnhealthy") @Nullable String maxUnhealthy,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nodeDrainTimeout") @Nullable Integer nodeDrainTimeout,
        @CustomType.Parameter("nodeStartupTimeoutSeconds") @Nullable Integer nodeStartupTimeoutSeconds,
        @CustomType.Parameter("paused") @Nullable Boolean paused,
        @CustomType.Parameter("quantity") @Nullable Integer quantity,
        @CustomType.Parameter("rollingUpdate") @Nullable GetClusterV2RkeConfigMachinePoolRollingUpdate rollingUpdate,
        @CustomType.Parameter("taints") @Nullable List<GetClusterV2RkeConfigMachinePoolTaint> taints,
        @CustomType.Parameter("unhealthyNodeTimeoutSeconds") @Nullable Integer unhealthyNodeTimeoutSeconds,
        @CustomType.Parameter("unhealthyRange") @Nullable String unhealthyRange,
        @CustomType.Parameter("workerRole") @Nullable Boolean workerRole) {
        this.annotations = annotations;
        this.cloudCredentialSecretName = cloudCredentialSecretName;
        this.controlPlaneRole = controlPlaneRole;
        this.drainBeforeDelete = drainBeforeDelete;
        this.etcdRole = etcdRole;
        this.labels = labels;
        this.machineConfig = machineConfig;
        this.maxUnhealthy = maxUnhealthy;
        this.name = name;
        this.nodeDrainTimeout = nodeDrainTimeout;
        this.nodeStartupTimeoutSeconds = nodeStartupTimeoutSeconds;
        this.paused = paused;
        this.quantity = quantity;
        this.rollingUpdate = rollingUpdate;
        this.taints = taints;
        this.unhealthyNodeTimeoutSeconds = unhealthyNodeTimeoutSeconds;
        this.unhealthyRange = unhealthyRange;
        this.workerRole = workerRole;
    }

    public Map<String,Object> annotations() {
        return this.annotations;
    }
    /**
     * @return (Computed) Cluster V2 cloud credential secret name (string)
     * 
     */
    public String cloudCredentialSecretName() {
        return this.cloudCredentialSecretName;
    }
    public Optional<Boolean> controlPlaneRole() {
        return Optional.ofNullable(this.controlPlaneRole);
    }
    public Optional<Boolean> drainBeforeDelete() {
        return Optional.ofNullable(this.drainBeforeDelete);
    }
    public Optional<Boolean> etcdRole() {
        return Optional.ofNullable(this.etcdRole);
    }
    public Map<String,Object> labels() {
        return this.labels;
    }
    public GetClusterV2RkeConfigMachinePoolMachineConfig machineConfig() {
        return this.machineConfig;
    }
    public Optional<String> maxUnhealthy() {
        return Optional.ofNullable(this.maxUnhealthy);
    }
    /**
     * @return The name of the Cluster v2 (string)
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<Integer> nodeDrainTimeout() {
        return Optional.ofNullable(this.nodeDrainTimeout);
    }
    public Optional<Integer> nodeStartupTimeoutSeconds() {
        return Optional.ofNullable(this.nodeStartupTimeoutSeconds);
    }
    public Optional<Boolean> paused() {
        return Optional.ofNullable(this.paused);
    }
    public Optional<Integer> quantity() {
        return Optional.ofNullable(this.quantity);
    }
    public Optional<GetClusterV2RkeConfigMachinePoolRollingUpdate> rollingUpdate() {
        return Optional.ofNullable(this.rollingUpdate);
    }
    public List<GetClusterV2RkeConfigMachinePoolTaint> taints() {
        return this.taints == null ? List.of() : this.taints;
    }
    public Optional<Integer> unhealthyNodeTimeoutSeconds() {
        return Optional.ofNullable(this.unhealthyNodeTimeoutSeconds);
    }
    public Optional<String> unhealthyRange() {
        return Optional.ofNullable(this.unhealthyRange);
    }
    public Optional<Boolean> workerRole() {
        return Optional.ofNullable(this.workerRole);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterV2RkeConfigMachinePool defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,Object> annotations;
        private String cloudCredentialSecretName;
        private @Nullable Boolean controlPlaneRole;
        private @Nullable Boolean drainBeforeDelete;
        private @Nullable Boolean etcdRole;
        private Map<String,Object> labels;
        private GetClusterV2RkeConfigMachinePoolMachineConfig machineConfig;
        private @Nullable String maxUnhealthy;
        private String name;
        private @Nullable Integer nodeDrainTimeout;
        private @Nullable Integer nodeStartupTimeoutSeconds;
        private @Nullable Boolean paused;
        private @Nullable Integer quantity;
        private @Nullable GetClusterV2RkeConfigMachinePoolRollingUpdate rollingUpdate;
        private @Nullable List<GetClusterV2RkeConfigMachinePoolTaint> taints;
        private @Nullable Integer unhealthyNodeTimeoutSeconds;
        private @Nullable String unhealthyRange;
        private @Nullable Boolean workerRole;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterV2RkeConfigMachinePool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.cloudCredentialSecretName = defaults.cloudCredentialSecretName;
    	      this.controlPlaneRole = defaults.controlPlaneRole;
    	      this.drainBeforeDelete = defaults.drainBeforeDelete;
    	      this.etcdRole = defaults.etcdRole;
    	      this.labels = defaults.labels;
    	      this.machineConfig = defaults.machineConfig;
    	      this.maxUnhealthy = defaults.maxUnhealthy;
    	      this.name = defaults.name;
    	      this.nodeDrainTimeout = defaults.nodeDrainTimeout;
    	      this.nodeStartupTimeoutSeconds = defaults.nodeStartupTimeoutSeconds;
    	      this.paused = defaults.paused;
    	      this.quantity = defaults.quantity;
    	      this.rollingUpdate = defaults.rollingUpdate;
    	      this.taints = defaults.taints;
    	      this.unhealthyNodeTimeoutSeconds = defaults.unhealthyNodeTimeoutSeconds;
    	      this.unhealthyRange = defaults.unhealthyRange;
    	      this.workerRole = defaults.workerRole;
        }

        public Builder annotations(Map<String,Object> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        public Builder cloudCredentialSecretName(String cloudCredentialSecretName) {
            this.cloudCredentialSecretName = Objects.requireNonNull(cloudCredentialSecretName);
            return this;
        }
        public Builder controlPlaneRole(@Nullable Boolean controlPlaneRole) {
            this.controlPlaneRole = controlPlaneRole;
            return this;
        }
        public Builder drainBeforeDelete(@Nullable Boolean drainBeforeDelete) {
            this.drainBeforeDelete = drainBeforeDelete;
            return this;
        }
        public Builder etcdRole(@Nullable Boolean etcdRole) {
            this.etcdRole = etcdRole;
            return this;
        }
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        public Builder machineConfig(GetClusterV2RkeConfigMachinePoolMachineConfig machineConfig) {
            this.machineConfig = Objects.requireNonNull(machineConfig);
            return this;
        }
        public Builder maxUnhealthy(@Nullable String maxUnhealthy) {
            this.maxUnhealthy = maxUnhealthy;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nodeDrainTimeout(@Nullable Integer nodeDrainTimeout) {
            this.nodeDrainTimeout = nodeDrainTimeout;
            return this;
        }
        public Builder nodeStartupTimeoutSeconds(@Nullable Integer nodeStartupTimeoutSeconds) {
            this.nodeStartupTimeoutSeconds = nodeStartupTimeoutSeconds;
            return this;
        }
        public Builder paused(@Nullable Boolean paused) {
            this.paused = paused;
            return this;
        }
        public Builder quantity(@Nullable Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        public Builder rollingUpdate(@Nullable GetClusterV2RkeConfigMachinePoolRollingUpdate rollingUpdate) {
            this.rollingUpdate = rollingUpdate;
            return this;
        }
        public Builder taints(@Nullable List<GetClusterV2RkeConfigMachinePoolTaint> taints) {
            this.taints = taints;
            return this;
        }
        public Builder taints(GetClusterV2RkeConfigMachinePoolTaint... taints) {
            return taints(List.of(taints));
        }
        public Builder unhealthyNodeTimeoutSeconds(@Nullable Integer unhealthyNodeTimeoutSeconds) {
            this.unhealthyNodeTimeoutSeconds = unhealthyNodeTimeoutSeconds;
            return this;
        }
        public Builder unhealthyRange(@Nullable String unhealthyRange) {
            this.unhealthyRange = unhealthyRange;
            return this;
        }
        public Builder workerRole(@Nullable Boolean workerRole) {
            this.workerRole = workerRole;
            return this;
        }        public GetClusterV2RkeConfigMachinePool build() {
            return new GetClusterV2RkeConfigMachinePool(annotations, cloudCredentialSecretName, controlPlaneRole, drainBeforeDelete, etcdRole, labels, machineConfig, maxUnhealthy, name, nodeDrainTimeout, nodeStartupTimeoutSeconds, paused, quantity, rollingUpdate, taints, unhealthyNodeTimeoutSeconds, unhealthyRange, workerRole);
        }
    }
}
