// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CatalogArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogArgs Empty = new CatalogArgs();

    /**
     * Annotations for the catalog (map)
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,Object>> annotations;

    /**
     * @return Annotations for the catalog (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The branch of the catalog repo to use. Default `master` (string)
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    /**
     * @return The branch of the catalog repo to use. Default `master` (string)
     * 
     */
    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * The cluster id of the catalog. Mandatory if `scope = cluster` (string)
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The cluster id of the catalog. Mandatory if `scope = cluster` (string)
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * A catalog description (string)
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A catalog description (string)
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The kind of the catalog. Just helm by the moment (string)
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return The kind of the catalog. Just helm by the moment (string)
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Labels for the catalog (map)
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,Object>> labels;

    /**
     * @return Labels for the catalog (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The name of the catalog (string)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the catalog (string)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The password to access the catalog if needed (string)
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password to access the catalog if needed (string)
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The project id of the catalog. Mandatory if `scope = project` (string)
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The project id of the catalog. Mandatory if `scope = project` (string)
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
     * 
     */
    @Import(name="refresh")
    private @Nullable Output<Boolean> refresh;

    /**
     * @return Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> refresh() {
        return Optional.ofNullable(this.refresh);
    }

    /**
     * The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The url of the catalog repo (string)
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The url of the catalog repo (string)
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    /**
     * The username to access the catalog if needed (string)
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username to access the catalog if needed (string)
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * Helm version for the catalog. Available options: `helm_v2` and `helm_v3` (string)
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Helm version for the catalog. Available options: `helm_v2` and `helm_v3` (string)
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private CatalogArgs() {}

    private CatalogArgs(CatalogArgs $) {
        this.annotations = $.annotations;
        this.branch = $.branch;
        this.clusterId = $.clusterId;
        this.description = $.description;
        this.kind = $.kind;
        this.labels = $.labels;
        this.name = $.name;
        this.password = $.password;
        this.projectId = $.projectId;
        this.refresh = $.refresh;
        this.scope = $.scope;
        this.url = $.url;
        this.username = $.username;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogArgs $;

        public Builder() {
            $ = new CatalogArgs();
        }

        public Builder(CatalogArgs defaults) {
            $ = new CatalogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations Annotations for the catalog (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations for the catalog (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,Object> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param branch The branch of the catalog repo to use. Default `master` (string)
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch The branch of the catalog repo to use. Default `master` (string)
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param clusterId The cluster id of the catalog. Mandatory if `scope = cluster` (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The cluster id of the catalog. Mandatory if `scope = cluster` (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param description A catalog description (string)
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A catalog description (string)
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param kind The kind of the catalog. Just helm by the moment (string)
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind The kind of the catalog. Just helm by the moment (string)
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param labels Labels for the catalog (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,Object>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for the catalog (map)
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,Object> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name The name of the catalog (string)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the catalog (string)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password The password to access the catalog if needed (string)
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password to access the catalog if needed (string)
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param projectId The project id of the catalog. Mandatory if `scope = project` (string)
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The project id of the catalog. Mandatory if `scope = project` (string)
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param refresh Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder refresh(@Nullable Output<Boolean> refresh) {
            $.refresh = refresh;
            return this;
        }

        /**
         * @param refresh Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder refresh(Boolean refresh) {
            return refresh(Output.of(refresh));
        }

        /**
         * @param scope The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param url The url of the catalog repo (string)
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The url of the catalog repo (string)
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param username The username to access the catalog if needed (string)
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username to access the catalog if needed (string)
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param version Helm version for the catalog. Available options: `helm_v2` and `helm_v3` (string)
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Helm version for the catalog. Available options: `helm_v2` and `helm_v3` (string)
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public CatalogArgs build() {
            if ($.url == null) {
                throw new MissingRequiredPropertyException("CatalogArgs", "url");
            }
            return $;
        }
    }

}
