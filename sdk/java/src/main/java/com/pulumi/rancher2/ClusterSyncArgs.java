// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterSyncArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterSyncArgs Empty = new ClusterSyncArgs();

    /**
     * The cluster ID that is syncing (string)
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The cluster ID that is syncing (string)
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * The node pool IDs used by the cluster id (list)
     * 
     */
    @Import(name="nodePoolIds")
    private @Nullable Output<List<String>> nodePoolIds;

    /**
     * @return The node pool IDs used by the cluster id (list)
     * 
     */
    public Optional<Output<List<String>>> nodePoolIds() {
        return Optional.ofNullable(this.nodePoolIds);
    }

    /**
     * Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
     * 
     * **Note:** `state_confirm` would be useful, if you have troubles for creating/updating custom clusters that eventually are reaching `active` state before they are fully installed. For example: setting `state_confirm = 2` will assure that the cluster has been in `active` state for at least 5 seconds, `state_confirm = 3` assure at least 10 seconds, etc
     * 
     */
    @Import(name="stateConfirm")
    private @Nullable Output<Integer> stateConfirm;

    /**
     * @return Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
     * 
     * **Note:** `state_confirm` would be useful, if you have troubles for creating/updating custom clusters that eventually are reaching `active` state before they are fully installed. For example: setting `state_confirm = 2` will assure that the cluster has been in `active` state for at least 5 seconds, `state_confirm = 3` assure at least 10 seconds, etc
     * 
     */
    public Optional<Output<Integer>> stateConfirm() {
        return Optional.ofNullable(this.stateConfirm);
    }

    @Import(name="synced")
    private @Nullable Output<Boolean> synced;

    public Optional<Output<Boolean>> synced() {
        return Optional.ofNullable(this.synced);
    }

    /**
     * Wait until alerting is up and running. Default: `false` (bool)
     * 
     */
    @Import(name="waitAlerting")
    private @Nullable Output<Boolean> waitAlerting;

    /**
     * @return Wait until alerting is up and running. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> waitAlerting() {
        return Optional.ofNullable(this.waitAlerting);
    }

    /**
     * Wait until all catalogs are downloaded and active. Default: `false` (bool)
     * 
     */
    @Import(name="waitCatalogs")
    private @Nullable Output<Boolean> waitCatalogs;

    /**
     * @return Wait until all catalogs are downloaded and active. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> waitCatalogs() {
        return Optional.ofNullable(this.waitCatalogs);
    }

    /**
     * Wait until monitoring is up and running. Default: `false` (bool)
     * 
     */
    @Import(name="waitMonitoring")
    private @Nullable Output<Boolean> waitMonitoring;

    /**
     * @return Wait until monitoring is up and running. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> waitMonitoring() {
        return Optional.ofNullable(this.waitMonitoring);
    }

    private ClusterSyncArgs() {}

    private ClusterSyncArgs(ClusterSyncArgs $) {
        this.clusterId = $.clusterId;
        this.nodePoolIds = $.nodePoolIds;
        this.stateConfirm = $.stateConfirm;
        this.synced = $.synced;
        this.waitAlerting = $.waitAlerting;
        this.waitCatalogs = $.waitCatalogs;
        this.waitMonitoring = $.waitMonitoring;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterSyncArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterSyncArgs $;

        public Builder() {
            $ = new ClusterSyncArgs();
        }

        public Builder(ClusterSyncArgs defaults) {
            $ = new ClusterSyncArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The cluster ID that is syncing (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The cluster ID that is syncing (string)
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param nodePoolIds The node pool IDs used by the cluster id (list)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolIds(@Nullable Output<List<String>> nodePoolIds) {
            $.nodePoolIds = nodePoolIds;
            return this;
        }

        /**
         * @param nodePoolIds The node pool IDs used by the cluster id (list)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolIds(List<String> nodePoolIds) {
            return nodePoolIds(Output.of(nodePoolIds));
        }

        /**
         * @param nodePoolIds The node pool IDs used by the cluster id (list)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolIds(String... nodePoolIds) {
            return nodePoolIds(List.of(nodePoolIds));
        }

        /**
         * @param stateConfirm Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
         * 
         * **Note:** `state_confirm` would be useful, if you have troubles for creating/updating custom clusters that eventually are reaching `active` state before they are fully installed. For example: setting `state_confirm = 2` will assure that the cluster has been in `active` state for at least 5 seconds, `state_confirm = 3` assure at least 10 seconds, etc
         * 
         * @return builder
         * 
         */
        public Builder stateConfirm(@Nullable Output<Integer> stateConfirm) {
            $.stateConfirm = stateConfirm;
            return this;
        }

        /**
         * @param stateConfirm Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
         * 
         * **Note:** `state_confirm` would be useful, if you have troubles for creating/updating custom clusters that eventually are reaching `active` state before they are fully installed. For example: setting `state_confirm = 2` will assure that the cluster has been in `active` state for at least 5 seconds, `state_confirm = 3` assure at least 10 seconds, etc
         * 
         * @return builder
         * 
         */
        public Builder stateConfirm(Integer stateConfirm) {
            return stateConfirm(Output.of(stateConfirm));
        }

        public Builder synced(@Nullable Output<Boolean> synced) {
            $.synced = synced;
            return this;
        }

        public Builder synced(Boolean synced) {
            return synced(Output.of(synced));
        }

        /**
         * @param waitAlerting Wait until alerting is up and running. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitAlerting(@Nullable Output<Boolean> waitAlerting) {
            $.waitAlerting = waitAlerting;
            return this;
        }

        /**
         * @param waitAlerting Wait until alerting is up and running. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitAlerting(Boolean waitAlerting) {
            return waitAlerting(Output.of(waitAlerting));
        }

        /**
         * @param waitCatalogs Wait until all catalogs are downloaded and active. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitCatalogs(@Nullable Output<Boolean> waitCatalogs) {
            $.waitCatalogs = waitCatalogs;
            return this;
        }

        /**
         * @param waitCatalogs Wait until all catalogs are downloaded and active. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitCatalogs(Boolean waitCatalogs) {
            return waitCatalogs(Output.of(waitCatalogs));
        }

        /**
         * @param waitMonitoring Wait until monitoring is up and running. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitMonitoring(@Nullable Output<Boolean> waitMonitoring) {
            $.waitMonitoring = waitMonitoring;
            return this;
        }

        /**
         * @param waitMonitoring Wait until monitoring is up and running. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitMonitoring(Boolean waitMonitoring) {
            return waitMonitoring(Output.of(waitMonitoring));
        }

        public ClusterSyncArgs build() {
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            return $;
        }
    }

}
