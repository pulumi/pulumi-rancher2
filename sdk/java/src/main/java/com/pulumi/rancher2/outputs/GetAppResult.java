// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetAppResult {
    /**
     * @return (Computed) Annotations for the catalog (map)
     * 
     */
    private Map<String,Object> annotations;
    /**
     * @return (Computed) Answers for the app (map)
     * 
     */
    private Map<String,Object> answers;
    /**
     * @return (Computed) Catalog name of the app (string)
     * 
     */
    private String catalogName;
    /**
     * @return (Computed) Description for the app (string)
     * 
     */
    private String description;
    /**
     * @return (Computed) The URL of the helm catalog app (string)
     * 
     */
    private String externalId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) Labels for the catalog (map)
     * 
     */
    private Map<String,Object> labels;
    private String name;
    private String projectId;
    /**
     * @return (Computed) Current revision id for the app (string)
     * 
     */
    private String revisionId;
    private String targetNamespace;
    /**
     * @return (Computed) Template name of the app (string)
     * 
     */
    private String templateName;
    /**
     * @return (Computed) Template version of the app (string)
     * 
     */
    private String templateVersion;
    /**
     * @return (Computed) values.yaml base64 encoded file content for the app (string)
     * 
     */
    private String valuesYaml;

    private GetAppResult() {}
    /**
     * @return (Computed) Annotations for the catalog (map)
     * 
     */
    public Map<String,Object> annotations() {
        return this.annotations;
    }
    /**
     * @return (Computed) Answers for the app (map)
     * 
     */
    public Map<String,Object> answers() {
        return this.answers;
    }
    /**
     * @return (Computed) Catalog name of the app (string)
     * 
     */
    public String catalogName() {
        return this.catalogName;
    }
    /**
     * @return (Computed) Description for the app (string)
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return (Computed) The URL of the helm catalog app (string)
     * 
     */
    public String externalId() {
        return this.externalId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) Labels for the catalog (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return (Computed) Current revision id for the app (string)
     * 
     */
    public String revisionId() {
        return this.revisionId;
    }
    public String targetNamespace() {
        return this.targetNamespace;
    }
    /**
     * @return (Computed) Template name of the app (string)
     * 
     */
    public String templateName() {
        return this.templateName;
    }
    /**
     * @return (Computed) Template version of the app (string)
     * 
     */
    public String templateVersion() {
        return this.templateVersion;
    }
    /**
     * @return (Computed) values.yaml base64 encoded file content for the app (string)
     * 
     */
    public String valuesYaml() {
        return this.valuesYaml;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> annotations;
        private Map<String,Object> answers;
        private String catalogName;
        private String description;
        private String externalId;
        private String id;
        private Map<String,Object> labels;
        private String name;
        private String projectId;
        private String revisionId;
        private String targetNamespace;
        private String templateName;
        private String templateVersion;
        private String valuesYaml;
        public Builder() {}
        public Builder(GetAppResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.answers = defaults.answers;
    	      this.catalogName = defaults.catalogName;
    	      this.description = defaults.description;
    	      this.externalId = defaults.externalId;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.revisionId = defaults.revisionId;
    	      this.targetNamespace = defaults.targetNamespace;
    	      this.templateName = defaults.templateName;
    	      this.templateVersion = defaults.templateVersion;
    	      this.valuesYaml = defaults.valuesYaml;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,Object> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        @CustomType.Setter
        public Builder answers(Map<String,Object> answers) {
            this.answers = Objects.requireNonNull(answers);
            return this;
        }
        @CustomType.Setter
        public Builder catalogName(String catalogName) {
            this.catalogName = Objects.requireNonNull(catalogName);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            this.externalId = Objects.requireNonNull(externalId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder revisionId(String revisionId) {
            this.revisionId = Objects.requireNonNull(revisionId);
            return this;
        }
        @CustomType.Setter
        public Builder targetNamespace(String targetNamespace) {
            this.targetNamespace = Objects.requireNonNull(targetNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder templateName(String templateName) {
            this.templateName = Objects.requireNonNull(templateName);
            return this;
        }
        @CustomType.Setter
        public Builder templateVersion(String templateVersion) {
            this.templateVersion = Objects.requireNonNull(templateVersion);
            return this;
        }
        @CustomType.Setter
        public Builder valuesYaml(String valuesYaml) {
            this.valuesYaml = Objects.requireNonNull(valuesYaml);
            return this;
        }
        public GetAppResult build() {
            final var o = new GetAppResult();
            o.annotations = annotations;
            o.answers = answers;
            o.catalogName = catalogName;
            o.description = description;
            o.externalId = externalId;
            o.id = id;
            o.labels = labels;
            o.name = name;
            o.projectId = projectId;
            o.revisionId = revisionId;
            o.targetNamespace = targetNamespace;
            o.templateName = templateName;
            o.templateVersion = templateVersion;
            o.valuesYaml = valuesYaml;
            return o;
        }
    }
}
