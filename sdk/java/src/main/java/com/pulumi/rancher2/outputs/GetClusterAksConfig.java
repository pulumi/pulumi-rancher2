// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterAksConfig {
    private final @Nullable String aadServerAppSecret;
    private final @Nullable String aadTenantId;
    private final @Nullable String addClientAppId;
    private final @Nullable String addServerAppId;
    private final @Nullable String adminUsername;
    private final String agentDnsPrefix;
    private final @Nullable Integer agentOsDiskSize;
    private final @Nullable String agentPoolName;
    private final @Nullable String agentStorageProfile;
    private final @Nullable String agentVmSize;
    private final @Nullable String authBaseUrl;
    private final @Nullable String baseUrl;
    private final String clientId;
    private final String clientSecret;
    private final @Nullable Integer count;
    private final @Nullable String dnsServiceIp;
    private final @Nullable String dockerBridgeCidr;
    private final @Nullable Boolean enableHttpApplicationRouting;
    private final @Nullable Boolean enableMonitoring;
    private final String kubernetesVersion;
    private final String loadBalancerSku;
    private final @Nullable String location;
    private final @Nullable String logAnalyticsWorkspace;
    private final @Nullable String logAnalyticsWorkspaceResourceGroup;
    private final String masterDnsPrefix;
    private final @Nullable Integer maxPods;
    private final @Nullable String networkPlugin;
    private final @Nullable String networkPolicy;
    private final @Nullable String podCidr;
    private final String resourceGroup;
    private final @Nullable String serviceCidr;
    private final String sshPublicKeyContents;
    private final String subnet;
    private final String subscriptionId;
    /**
     * @deprecated
     * Use tags argument instead as []string
     * 
     */
    @Deprecated /* Use tags argument instead as []string */
    private final Map<String,Object> tag;
    private final List<String> tags;
    private final String tenantId;
    private final String virtualNetwork;
    private final String virtualNetworkResourceGroup;

    @CustomType.Constructor
    private GetClusterAksConfig(
        @CustomType.Parameter("aadServerAppSecret") @Nullable String aadServerAppSecret,
        @CustomType.Parameter("aadTenantId") @Nullable String aadTenantId,
        @CustomType.Parameter("addClientAppId") @Nullable String addClientAppId,
        @CustomType.Parameter("addServerAppId") @Nullable String addServerAppId,
        @CustomType.Parameter("adminUsername") @Nullable String adminUsername,
        @CustomType.Parameter("agentDnsPrefix") String agentDnsPrefix,
        @CustomType.Parameter("agentOsDiskSize") @Nullable Integer agentOsDiskSize,
        @CustomType.Parameter("agentPoolName") @Nullable String agentPoolName,
        @CustomType.Parameter("agentStorageProfile") @Nullable String agentStorageProfile,
        @CustomType.Parameter("agentVmSize") @Nullable String agentVmSize,
        @CustomType.Parameter("authBaseUrl") @Nullable String authBaseUrl,
        @CustomType.Parameter("baseUrl") @Nullable String baseUrl,
        @CustomType.Parameter("clientId") String clientId,
        @CustomType.Parameter("clientSecret") String clientSecret,
        @CustomType.Parameter("count") @Nullable Integer count,
        @CustomType.Parameter("dnsServiceIp") @Nullable String dnsServiceIp,
        @CustomType.Parameter("dockerBridgeCidr") @Nullable String dockerBridgeCidr,
        @CustomType.Parameter("enableHttpApplicationRouting") @Nullable Boolean enableHttpApplicationRouting,
        @CustomType.Parameter("enableMonitoring") @Nullable Boolean enableMonitoring,
        @CustomType.Parameter("kubernetesVersion") String kubernetesVersion,
        @CustomType.Parameter("loadBalancerSku") String loadBalancerSku,
        @CustomType.Parameter("location") @Nullable String location,
        @CustomType.Parameter("logAnalyticsWorkspace") @Nullable String logAnalyticsWorkspace,
        @CustomType.Parameter("logAnalyticsWorkspaceResourceGroup") @Nullable String logAnalyticsWorkspaceResourceGroup,
        @CustomType.Parameter("masterDnsPrefix") String masterDnsPrefix,
        @CustomType.Parameter("maxPods") @Nullable Integer maxPods,
        @CustomType.Parameter("networkPlugin") @Nullable String networkPlugin,
        @CustomType.Parameter("networkPolicy") @Nullable String networkPolicy,
        @CustomType.Parameter("podCidr") @Nullable String podCidr,
        @CustomType.Parameter("resourceGroup") String resourceGroup,
        @CustomType.Parameter("serviceCidr") @Nullable String serviceCidr,
        @CustomType.Parameter("sshPublicKeyContents") String sshPublicKeyContents,
        @CustomType.Parameter("subnet") String subnet,
        @CustomType.Parameter("subscriptionId") String subscriptionId,
        @CustomType.Parameter("tag") Map<String,Object> tag,
        @CustomType.Parameter("tags") List<String> tags,
        @CustomType.Parameter("tenantId") String tenantId,
        @CustomType.Parameter("virtualNetwork") String virtualNetwork,
        @CustomType.Parameter("virtualNetworkResourceGroup") String virtualNetworkResourceGroup) {
        this.aadServerAppSecret = aadServerAppSecret;
        this.aadTenantId = aadTenantId;
        this.addClientAppId = addClientAppId;
        this.addServerAppId = addServerAppId;
        this.adminUsername = adminUsername;
        this.agentDnsPrefix = agentDnsPrefix;
        this.agentOsDiskSize = agentOsDiskSize;
        this.agentPoolName = agentPoolName;
        this.agentStorageProfile = agentStorageProfile;
        this.agentVmSize = agentVmSize;
        this.authBaseUrl = authBaseUrl;
        this.baseUrl = baseUrl;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.count = count;
        this.dnsServiceIp = dnsServiceIp;
        this.dockerBridgeCidr = dockerBridgeCidr;
        this.enableHttpApplicationRouting = enableHttpApplicationRouting;
        this.enableMonitoring = enableMonitoring;
        this.kubernetesVersion = kubernetesVersion;
        this.loadBalancerSku = loadBalancerSku;
        this.location = location;
        this.logAnalyticsWorkspace = logAnalyticsWorkspace;
        this.logAnalyticsWorkspaceResourceGroup = logAnalyticsWorkspaceResourceGroup;
        this.masterDnsPrefix = masterDnsPrefix;
        this.maxPods = maxPods;
        this.networkPlugin = networkPlugin;
        this.networkPolicy = networkPolicy;
        this.podCidr = podCidr;
        this.resourceGroup = resourceGroup;
        this.serviceCidr = serviceCidr;
        this.sshPublicKeyContents = sshPublicKeyContents;
        this.subnet = subnet;
        this.subscriptionId = subscriptionId;
        this.tag = tag;
        this.tags = tags;
        this.tenantId = tenantId;
        this.virtualNetwork = virtualNetwork;
        this.virtualNetworkResourceGroup = virtualNetworkResourceGroup;
    }

    public Optional<String> aadServerAppSecret() {
        return Optional.ofNullable(this.aadServerAppSecret);
    }
    public Optional<String> aadTenantId() {
        return Optional.ofNullable(this.aadTenantId);
    }
    public Optional<String> addClientAppId() {
        return Optional.ofNullable(this.addClientAppId);
    }
    public Optional<String> addServerAppId() {
        return Optional.ofNullable(this.addServerAppId);
    }
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    public String agentDnsPrefix() {
        return this.agentDnsPrefix;
    }
    public Optional<Integer> agentOsDiskSize() {
        return Optional.ofNullable(this.agentOsDiskSize);
    }
    public Optional<String> agentPoolName() {
        return Optional.ofNullable(this.agentPoolName);
    }
    public Optional<String> agentStorageProfile() {
        return Optional.ofNullable(this.agentStorageProfile);
    }
    public Optional<String> agentVmSize() {
        return Optional.ofNullable(this.agentVmSize);
    }
    public Optional<String> authBaseUrl() {
        return Optional.ofNullable(this.authBaseUrl);
    }
    public Optional<String> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }
    public String clientId() {
        return this.clientId;
    }
    public String clientSecret() {
        return this.clientSecret;
    }
    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }
    public Optional<String> dnsServiceIp() {
        return Optional.ofNullable(this.dnsServiceIp);
    }
    public Optional<String> dockerBridgeCidr() {
        return Optional.ofNullable(this.dockerBridgeCidr);
    }
    public Optional<Boolean> enableHttpApplicationRouting() {
        return Optional.ofNullable(this.enableHttpApplicationRouting);
    }
    public Optional<Boolean> enableMonitoring() {
        return Optional.ofNullable(this.enableMonitoring);
    }
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    public String loadBalancerSku() {
        return this.loadBalancerSku;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public Optional<String> logAnalyticsWorkspace() {
        return Optional.ofNullable(this.logAnalyticsWorkspace);
    }
    public Optional<String> logAnalyticsWorkspaceResourceGroup() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceResourceGroup);
    }
    public String masterDnsPrefix() {
        return this.masterDnsPrefix;
    }
    public Optional<Integer> maxPods() {
        return Optional.ofNullable(this.maxPods);
    }
    public Optional<String> networkPlugin() {
        return Optional.ofNullable(this.networkPlugin);
    }
    public Optional<String> networkPolicy() {
        return Optional.ofNullable(this.networkPolicy);
    }
    public Optional<String> podCidr() {
        return Optional.ofNullable(this.podCidr);
    }
    public String resourceGroup() {
        return this.resourceGroup;
    }
    public Optional<String> serviceCidr() {
        return Optional.ofNullable(this.serviceCidr);
    }
    public String sshPublicKeyContents() {
        return this.sshPublicKeyContents;
    }
    public String subnet() {
        return this.subnet;
    }
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @deprecated
     * Use tags argument instead as []string
     * 
     */
    @Deprecated /* Use tags argument instead as []string */
    public Map<String,Object> tag() {
        return this.tag;
    }
    public List<String> tags() {
        return this.tags;
    }
    public String tenantId() {
        return this.tenantId;
    }
    public String virtualNetwork() {
        return this.virtualNetwork;
    }
    public String virtualNetworkResourceGroup() {
        return this.virtualNetworkResourceGroup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterAksConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String aadServerAppSecret;
        private @Nullable String aadTenantId;
        private @Nullable String addClientAppId;
        private @Nullable String addServerAppId;
        private @Nullable String adminUsername;
        private String agentDnsPrefix;
        private @Nullable Integer agentOsDiskSize;
        private @Nullable String agentPoolName;
        private @Nullable String agentStorageProfile;
        private @Nullable String agentVmSize;
        private @Nullable String authBaseUrl;
        private @Nullable String baseUrl;
        private String clientId;
        private String clientSecret;
        private @Nullable Integer count;
        private @Nullable String dnsServiceIp;
        private @Nullable String dockerBridgeCidr;
        private @Nullable Boolean enableHttpApplicationRouting;
        private @Nullable Boolean enableMonitoring;
        private String kubernetesVersion;
        private String loadBalancerSku;
        private @Nullable String location;
        private @Nullable String logAnalyticsWorkspace;
        private @Nullable String logAnalyticsWorkspaceResourceGroup;
        private String masterDnsPrefix;
        private @Nullable Integer maxPods;
        private @Nullable String networkPlugin;
        private @Nullable String networkPolicy;
        private @Nullable String podCidr;
        private String resourceGroup;
        private @Nullable String serviceCidr;
        private String sshPublicKeyContents;
        private String subnet;
        private String subscriptionId;
        private Map<String,Object> tag;
        private List<String> tags;
        private String tenantId;
        private String virtualNetwork;
        private String virtualNetworkResourceGroup;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterAksConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadServerAppSecret = defaults.aadServerAppSecret;
    	      this.aadTenantId = defaults.aadTenantId;
    	      this.addClientAppId = defaults.addClientAppId;
    	      this.addServerAppId = defaults.addServerAppId;
    	      this.adminUsername = defaults.adminUsername;
    	      this.agentDnsPrefix = defaults.agentDnsPrefix;
    	      this.agentOsDiskSize = defaults.agentOsDiskSize;
    	      this.agentPoolName = defaults.agentPoolName;
    	      this.agentStorageProfile = defaults.agentStorageProfile;
    	      this.agentVmSize = defaults.agentVmSize;
    	      this.authBaseUrl = defaults.authBaseUrl;
    	      this.baseUrl = defaults.baseUrl;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.count = defaults.count;
    	      this.dnsServiceIp = defaults.dnsServiceIp;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.enableHttpApplicationRouting = defaults.enableHttpApplicationRouting;
    	      this.enableMonitoring = defaults.enableMonitoring;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.location = defaults.location;
    	      this.logAnalyticsWorkspace = defaults.logAnalyticsWorkspace;
    	      this.logAnalyticsWorkspaceResourceGroup = defaults.logAnalyticsWorkspaceResourceGroup;
    	      this.masterDnsPrefix = defaults.masterDnsPrefix;
    	      this.maxPods = defaults.maxPods;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.podCidr = defaults.podCidr;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.serviceCidr = defaults.serviceCidr;
    	      this.sshPublicKeyContents = defaults.sshPublicKeyContents;
    	      this.subnet = defaults.subnet;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tag = defaults.tag;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.virtualNetwork = defaults.virtualNetwork;
    	      this.virtualNetworkResourceGroup = defaults.virtualNetworkResourceGroup;
        }

        public Builder aadServerAppSecret(@Nullable String aadServerAppSecret) {
            this.aadServerAppSecret = aadServerAppSecret;
            return this;
        }
        public Builder aadTenantId(@Nullable String aadTenantId) {
            this.aadTenantId = aadTenantId;
            return this;
        }
        public Builder addClientAppId(@Nullable String addClientAppId) {
            this.addClientAppId = addClientAppId;
            return this;
        }
        public Builder addServerAppId(@Nullable String addServerAppId) {
            this.addServerAppId = addServerAppId;
            return this;
        }
        public Builder adminUsername(@Nullable String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }
        public Builder agentDnsPrefix(String agentDnsPrefix) {
            this.agentDnsPrefix = Objects.requireNonNull(agentDnsPrefix);
            return this;
        }
        public Builder agentOsDiskSize(@Nullable Integer agentOsDiskSize) {
            this.agentOsDiskSize = agentOsDiskSize;
            return this;
        }
        public Builder agentPoolName(@Nullable String agentPoolName) {
            this.agentPoolName = agentPoolName;
            return this;
        }
        public Builder agentStorageProfile(@Nullable String agentStorageProfile) {
            this.agentStorageProfile = agentStorageProfile;
            return this;
        }
        public Builder agentVmSize(@Nullable String agentVmSize) {
            this.agentVmSize = agentVmSize;
            return this;
        }
        public Builder authBaseUrl(@Nullable String authBaseUrl) {
            this.authBaseUrl = authBaseUrl;
            return this;
        }
        public Builder baseUrl(@Nullable String baseUrl) {
            this.baseUrl = baseUrl;
            return this;
        }
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        public Builder count(@Nullable Integer count) {
            this.count = count;
            return this;
        }
        public Builder dnsServiceIp(@Nullable String dnsServiceIp) {
            this.dnsServiceIp = dnsServiceIp;
            return this;
        }
        public Builder dockerBridgeCidr(@Nullable String dockerBridgeCidr) {
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        public Builder enableHttpApplicationRouting(@Nullable Boolean enableHttpApplicationRouting) {
            this.enableHttpApplicationRouting = enableHttpApplicationRouting;
            return this;
        }
        public Builder enableMonitoring(@Nullable Boolean enableMonitoring) {
            this.enableMonitoring = enableMonitoring;
            return this;
        }
        public Builder kubernetesVersion(String kubernetesVersion) {
            this.kubernetesVersion = Objects.requireNonNull(kubernetesVersion);
            return this;
        }
        public Builder loadBalancerSku(String loadBalancerSku) {
            this.loadBalancerSku = Objects.requireNonNull(loadBalancerSku);
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        public Builder logAnalyticsWorkspace(@Nullable String logAnalyticsWorkspace) {
            this.logAnalyticsWorkspace = logAnalyticsWorkspace;
            return this;
        }
        public Builder logAnalyticsWorkspaceResourceGroup(@Nullable String logAnalyticsWorkspaceResourceGroup) {
            this.logAnalyticsWorkspaceResourceGroup = logAnalyticsWorkspaceResourceGroup;
            return this;
        }
        public Builder masterDnsPrefix(String masterDnsPrefix) {
            this.masterDnsPrefix = Objects.requireNonNull(masterDnsPrefix);
            return this;
        }
        public Builder maxPods(@Nullable Integer maxPods) {
            this.maxPods = maxPods;
            return this;
        }
        public Builder networkPlugin(@Nullable String networkPlugin) {
            this.networkPlugin = networkPlugin;
            return this;
        }
        public Builder networkPolicy(@Nullable String networkPolicy) {
            this.networkPolicy = networkPolicy;
            return this;
        }
        public Builder podCidr(@Nullable String podCidr) {
            this.podCidr = podCidr;
            return this;
        }
        public Builder resourceGroup(String resourceGroup) {
            this.resourceGroup = Objects.requireNonNull(resourceGroup);
            return this;
        }
        public Builder serviceCidr(@Nullable String serviceCidr) {
            this.serviceCidr = serviceCidr;
            return this;
        }
        public Builder sshPublicKeyContents(String sshPublicKeyContents) {
            this.sshPublicKeyContents = Objects.requireNonNull(sshPublicKeyContents);
            return this;
        }
        public Builder subnet(String subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }
        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }
        public Builder tag(Map<String,Object> tag) {
            this.tag = Objects.requireNonNull(tag);
            return this;
        }
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        public Builder virtualNetwork(String virtualNetwork) {
            this.virtualNetwork = Objects.requireNonNull(virtualNetwork);
            return this;
        }
        public Builder virtualNetworkResourceGroup(String virtualNetworkResourceGroup) {
            this.virtualNetworkResourceGroup = Objects.requireNonNull(virtualNetworkResourceGroup);
            return this;
        }        public GetClusterAksConfig build() {
            return new GetClusterAksConfig(aadServerAppSecret, aadTenantId, addClientAppId, addServerAppId, adminUsername, agentDnsPrefix, agentOsDiskSize, agentPoolName, agentStorageProfile, agentVmSize, authBaseUrl, baseUrl, clientId, clientSecret, count, dnsServiceIp, dockerBridgeCidr, enableHttpApplicationRouting, enableMonitoring, kubernetesVersion, loadBalancerSku, location, logAnalyticsWorkspace, logAnalyticsWorkspaceResourceGroup, masterDnsPrefix, maxPods, networkPlugin, networkPolicy, podCidr, resourceGroup, serviceCidr, sshPublicKeyContents, subnet, subscriptionId, tag, tags, tenantId, virtualNetwork, virtualNetworkResourceGroup);
        }
    }
}
