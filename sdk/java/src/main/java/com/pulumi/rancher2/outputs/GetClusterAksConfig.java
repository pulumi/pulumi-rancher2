// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterAksConfig {
    private @Nullable String aadServerAppSecret;
    private @Nullable String aadTenantId;
    private @Nullable String addClientAppId;
    private @Nullable String addServerAppId;
    private @Nullable String adminUsername;
    private String agentDnsPrefix;
    private @Nullable Integer agentOsDiskSize;
    private @Nullable String agentPoolName;
    private @Nullable String agentStorageProfile;
    private @Nullable String agentVmSize;
    private @Nullable String authBaseUrl;
    private @Nullable String baseUrl;
    private String clientId;
    private String clientSecret;
    private @Nullable Integer count;
    private @Nullable String dnsServiceIp;
    private @Nullable String dockerBridgeCidr;
    private @Nullable Boolean enableHttpApplicationRouting;
    private @Nullable Boolean enableMonitoring;
    private String kubernetesVersion;
    private String loadBalancerSku;
    private @Nullable String location;
    private @Nullable String logAnalyticsWorkspace;
    private @Nullable String logAnalyticsWorkspaceResourceGroup;
    private String masterDnsPrefix;
    private @Nullable Integer maxPods;
    private @Nullable String networkPlugin;
    private @Nullable String networkPolicy;
    private @Nullable String podCidr;
    private String resourceGroup;
    private @Nullable String serviceCidr;
    private String sshPublicKeyContents;
    private String subnet;
    private String subscriptionId;
    /**
     * @deprecated
     * Use tags argument instead as []string
     * 
     */
    @Deprecated /* Use tags argument instead as []string */
    private Map<String,Object> tag;
    private List<String> tags;
    private String tenantId;
    private String virtualNetwork;
    private String virtualNetworkResourceGroup;

    private GetClusterAksConfig() {}
    public Optional<String> aadServerAppSecret() {
        return Optional.ofNullable(this.aadServerAppSecret);
    }
    public Optional<String> aadTenantId() {
        return Optional.ofNullable(this.aadTenantId);
    }
    public Optional<String> addClientAppId() {
        return Optional.ofNullable(this.addClientAppId);
    }
    public Optional<String> addServerAppId() {
        return Optional.ofNullable(this.addServerAppId);
    }
    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }
    public String agentDnsPrefix() {
        return this.agentDnsPrefix;
    }
    public Optional<Integer> agentOsDiskSize() {
        return Optional.ofNullable(this.agentOsDiskSize);
    }
    public Optional<String> agentPoolName() {
        return Optional.ofNullable(this.agentPoolName);
    }
    public Optional<String> agentStorageProfile() {
        return Optional.ofNullable(this.agentStorageProfile);
    }
    public Optional<String> agentVmSize() {
        return Optional.ofNullable(this.agentVmSize);
    }
    public Optional<String> authBaseUrl() {
        return Optional.ofNullable(this.authBaseUrl);
    }
    public Optional<String> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }
    public String clientId() {
        return this.clientId;
    }
    public String clientSecret() {
        return this.clientSecret;
    }
    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }
    public Optional<String> dnsServiceIp() {
        return Optional.ofNullable(this.dnsServiceIp);
    }
    public Optional<String> dockerBridgeCidr() {
        return Optional.ofNullable(this.dockerBridgeCidr);
    }
    public Optional<Boolean> enableHttpApplicationRouting() {
        return Optional.ofNullable(this.enableHttpApplicationRouting);
    }
    public Optional<Boolean> enableMonitoring() {
        return Optional.ofNullable(this.enableMonitoring);
    }
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    public String loadBalancerSku() {
        return this.loadBalancerSku;
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public Optional<String> logAnalyticsWorkspace() {
        return Optional.ofNullable(this.logAnalyticsWorkspace);
    }
    public Optional<String> logAnalyticsWorkspaceResourceGroup() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceResourceGroup);
    }
    public String masterDnsPrefix() {
        return this.masterDnsPrefix;
    }
    public Optional<Integer> maxPods() {
        return Optional.ofNullable(this.maxPods);
    }
    public Optional<String> networkPlugin() {
        return Optional.ofNullable(this.networkPlugin);
    }
    public Optional<String> networkPolicy() {
        return Optional.ofNullable(this.networkPolicy);
    }
    public Optional<String> podCidr() {
        return Optional.ofNullable(this.podCidr);
    }
    public String resourceGroup() {
        return this.resourceGroup;
    }
    public Optional<String> serviceCidr() {
        return Optional.ofNullable(this.serviceCidr);
    }
    public String sshPublicKeyContents() {
        return this.sshPublicKeyContents;
    }
    public String subnet() {
        return this.subnet;
    }
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @deprecated
     * Use tags argument instead as []string
     * 
     */
    @Deprecated /* Use tags argument instead as []string */
    public Map<String,Object> tag() {
        return this.tag;
    }
    public List<String> tags() {
        return this.tags;
    }
    public String tenantId() {
        return this.tenantId;
    }
    public String virtualNetwork() {
        return this.virtualNetwork;
    }
    public String virtualNetworkResourceGroup() {
        return this.virtualNetworkResourceGroup;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterAksConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aadServerAppSecret;
        private @Nullable String aadTenantId;
        private @Nullable String addClientAppId;
        private @Nullable String addServerAppId;
        private @Nullable String adminUsername;
        private String agentDnsPrefix;
        private @Nullable Integer agentOsDiskSize;
        private @Nullable String agentPoolName;
        private @Nullable String agentStorageProfile;
        private @Nullable String agentVmSize;
        private @Nullable String authBaseUrl;
        private @Nullable String baseUrl;
        private String clientId;
        private String clientSecret;
        private @Nullable Integer count;
        private @Nullable String dnsServiceIp;
        private @Nullable String dockerBridgeCidr;
        private @Nullable Boolean enableHttpApplicationRouting;
        private @Nullable Boolean enableMonitoring;
        private String kubernetesVersion;
        private String loadBalancerSku;
        private @Nullable String location;
        private @Nullable String logAnalyticsWorkspace;
        private @Nullable String logAnalyticsWorkspaceResourceGroup;
        private String masterDnsPrefix;
        private @Nullable Integer maxPods;
        private @Nullable String networkPlugin;
        private @Nullable String networkPolicy;
        private @Nullable String podCidr;
        private String resourceGroup;
        private @Nullable String serviceCidr;
        private String sshPublicKeyContents;
        private String subnet;
        private String subscriptionId;
        private Map<String,Object> tag;
        private List<String> tags;
        private String tenantId;
        private String virtualNetwork;
        private String virtualNetworkResourceGroup;
        public Builder() {}
        public Builder(GetClusterAksConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadServerAppSecret = defaults.aadServerAppSecret;
    	      this.aadTenantId = defaults.aadTenantId;
    	      this.addClientAppId = defaults.addClientAppId;
    	      this.addServerAppId = defaults.addServerAppId;
    	      this.adminUsername = defaults.adminUsername;
    	      this.agentDnsPrefix = defaults.agentDnsPrefix;
    	      this.agentOsDiskSize = defaults.agentOsDiskSize;
    	      this.agentPoolName = defaults.agentPoolName;
    	      this.agentStorageProfile = defaults.agentStorageProfile;
    	      this.agentVmSize = defaults.agentVmSize;
    	      this.authBaseUrl = defaults.authBaseUrl;
    	      this.baseUrl = defaults.baseUrl;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.count = defaults.count;
    	      this.dnsServiceIp = defaults.dnsServiceIp;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.enableHttpApplicationRouting = defaults.enableHttpApplicationRouting;
    	      this.enableMonitoring = defaults.enableMonitoring;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.location = defaults.location;
    	      this.logAnalyticsWorkspace = defaults.logAnalyticsWorkspace;
    	      this.logAnalyticsWorkspaceResourceGroup = defaults.logAnalyticsWorkspaceResourceGroup;
    	      this.masterDnsPrefix = defaults.masterDnsPrefix;
    	      this.maxPods = defaults.maxPods;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.podCidr = defaults.podCidr;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.serviceCidr = defaults.serviceCidr;
    	      this.sshPublicKeyContents = defaults.sshPublicKeyContents;
    	      this.subnet = defaults.subnet;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tag = defaults.tag;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.virtualNetwork = defaults.virtualNetwork;
    	      this.virtualNetworkResourceGroup = defaults.virtualNetworkResourceGroup;
        }

        @CustomType.Setter
        public Builder aadServerAppSecret(@Nullable String aadServerAppSecret) {
            this.aadServerAppSecret = aadServerAppSecret;
            return this;
        }
        @CustomType.Setter
        public Builder aadTenantId(@Nullable String aadTenantId) {
            this.aadTenantId = aadTenantId;
            return this;
        }
        @CustomType.Setter
        public Builder addClientAppId(@Nullable String addClientAppId) {
            this.addClientAppId = addClientAppId;
            return this;
        }
        @CustomType.Setter
        public Builder addServerAppId(@Nullable String addServerAppId) {
            this.addServerAppId = addServerAppId;
            return this;
        }
        @CustomType.Setter
        public Builder adminUsername(@Nullable String adminUsername) {
            this.adminUsername = adminUsername;
            return this;
        }
        @CustomType.Setter
        public Builder agentDnsPrefix(String agentDnsPrefix) {
            this.agentDnsPrefix = Objects.requireNonNull(agentDnsPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder agentOsDiskSize(@Nullable Integer agentOsDiskSize) {
            this.agentOsDiskSize = agentOsDiskSize;
            return this;
        }
        @CustomType.Setter
        public Builder agentPoolName(@Nullable String agentPoolName) {
            this.agentPoolName = agentPoolName;
            return this;
        }
        @CustomType.Setter
        public Builder agentStorageProfile(@Nullable String agentStorageProfile) {
            this.agentStorageProfile = agentStorageProfile;
            return this;
        }
        @CustomType.Setter
        public Builder agentVmSize(@Nullable String agentVmSize) {
            this.agentVmSize = agentVmSize;
            return this;
        }
        @CustomType.Setter
        public Builder authBaseUrl(@Nullable String authBaseUrl) {
            this.authBaseUrl = authBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder baseUrl(@Nullable String baseUrl) {
            this.baseUrl = baseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        @CustomType.Setter
        public Builder count(@Nullable Integer count) {
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServiceIp(@Nullable String dnsServiceIp) {
            this.dnsServiceIp = dnsServiceIp;
            return this;
        }
        @CustomType.Setter
        public Builder dockerBridgeCidr(@Nullable String dockerBridgeCidr) {
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        @CustomType.Setter
        public Builder enableHttpApplicationRouting(@Nullable Boolean enableHttpApplicationRouting) {
            this.enableHttpApplicationRouting = enableHttpApplicationRouting;
            return this;
        }
        @CustomType.Setter
        public Builder enableMonitoring(@Nullable Boolean enableMonitoring) {
            this.enableMonitoring = enableMonitoring;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            this.kubernetesVersion = Objects.requireNonNull(kubernetesVersion);
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerSku(String loadBalancerSku) {
            this.loadBalancerSku = Objects.requireNonNull(loadBalancerSku);
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspace(@Nullable String logAnalyticsWorkspace) {
            this.logAnalyticsWorkspace = logAnalyticsWorkspace;
            return this;
        }
        @CustomType.Setter
        public Builder logAnalyticsWorkspaceResourceGroup(@Nullable String logAnalyticsWorkspaceResourceGroup) {
            this.logAnalyticsWorkspaceResourceGroup = logAnalyticsWorkspaceResourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder masterDnsPrefix(String masterDnsPrefix) {
            this.masterDnsPrefix = Objects.requireNonNull(masterDnsPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder maxPods(@Nullable Integer maxPods) {
            this.maxPods = maxPods;
            return this;
        }
        @CustomType.Setter
        public Builder networkPlugin(@Nullable String networkPlugin) {
            this.networkPlugin = networkPlugin;
            return this;
        }
        @CustomType.Setter
        public Builder networkPolicy(@Nullable String networkPolicy) {
            this.networkPolicy = networkPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder podCidr(@Nullable String podCidr) {
            this.podCidr = podCidr;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(String resourceGroup) {
            this.resourceGroup = Objects.requireNonNull(resourceGroup);
            return this;
        }
        @CustomType.Setter
        public Builder serviceCidr(@Nullable String serviceCidr) {
            this.serviceCidr = serviceCidr;
            return this;
        }
        @CustomType.Setter
        public Builder sshPublicKeyContents(String sshPublicKeyContents) {
            this.sshPublicKeyContents = Objects.requireNonNull(sshPublicKeyContents);
            return this;
        }
        @CustomType.Setter
        public Builder subnet(String subnet) {
            this.subnet = Objects.requireNonNull(subnet);
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }
        @CustomType.Setter
        public Builder tag(Map<String,Object> tag) {
            this.tag = Objects.requireNonNull(tag);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetwork(String virtualNetwork) {
            this.virtualNetwork = Objects.requireNonNull(virtualNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder virtualNetworkResourceGroup(String virtualNetworkResourceGroup) {
            this.virtualNetworkResourceGroup = Objects.requireNonNull(virtualNetworkResourceGroup);
            return this;
        }
        public GetClusterAksConfig build() {
            final var o = new GetClusterAksConfig();
            o.aadServerAppSecret = aadServerAppSecret;
            o.aadTenantId = aadTenantId;
            o.addClientAppId = addClientAppId;
            o.addServerAppId = addServerAppId;
            o.adminUsername = adminUsername;
            o.agentDnsPrefix = agentDnsPrefix;
            o.agentOsDiskSize = agentOsDiskSize;
            o.agentPoolName = agentPoolName;
            o.agentStorageProfile = agentStorageProfile;
            o.agentVmSize = agentVmSize;
            o.authBaseUrl = authBaseUrl;
            o.baseUrl = baseUrl;
            o.clientId = clientId;
            o.clientSecret = clientSecret;
            o.count = count;
            o.dnsServiceIp = dnsServiceIp;
            o.dockerBridgeCidr = dockerBridgeCidr;
            o.enableHttpApplicationRouting = enableHttpApplicationRouting;
            o.enableMonitoring = enableMonitoring;
            o.kubernetesVersion = kubernetesVersion;
            o.loadBalancerSku = loadBalancerSku;
            o.location = location;
            o.logAnalyticsWorkspace = logAnalyticsWorkspace;
            o.logAnalyticsWorkspaceResourceGroup = logAnalyticsWorkspaceResourceGroup;
            o.masterDnsPrefix = masterDnsPrefix;
            o.maxPods = maxPods;
            o.networkPlugin = networkPlugin;
            o.networkPolicy = networkPolicy;
            o.podCidr = podCidr;
            o.resourceGroup = resourceGroup;
            o.serviceCidr = serviceCidr;
            o.sshPublicKeyContents = sshPublicKeyContents;
            o.subnet = subnet;
            o.subscriptionId = subscriptionId;
            o.tag = tag;
            o.tags = tags;
            o.tenantId = tenantId;
            o.virtualNetwork = virtualNetwork;
            o.virtualNetworkResourceGroup = virtualNetworkResourceGroup;
            return o;
        }
    }
}
