// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectLoggingSplunkConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectLoggingSplunkConfigArgs Empty = new ProjectLoggingSplunkConfigArgs();

    /**
     * SSL certificate for the syslog service (string)
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return SSL certificate for the syslog service (string)
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * SSL client certificate for the syslog service (string)
     * 
     */
    @Import(name="clientCert")
    private @Nullable Output<String> clientCert;

    /**
     * @return SSL client certificate for the syslog service (string)
     * 
     */
    public Optional<Output<String>> clientCert() {
        return Optional.ofNullable(this.clientCert);
    }

    /**
     * SSL client key for the syslog service (string)
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    /**
     * @return SSL client key for the syslog service (string)
     * 
     */
    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    /**
     * SSL client key password for the splunk service (string)
     * 
     */
    @Import(name="clientKeyPass")
    private @Nullable Output<String> clientKeyPass;

    /**
     * @return SSL client key password for the splunk service (string)
     * 
     */
    public Optional<Output<String>> clientKeyPass() {
        return Optional.ofNullable(this.clientKeyPass);
    }

    /**
     * Endpoint of the syslog service (string)
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return Endpoint of the syslog service (string)
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * Index prefix for the splunk logs (string)
     * 
     */
    @Import(name="index")
    private @Nullable Output<String> index;

    /**
     * @return Index prefix for the splunk logs (string)
     * 
     */
    public Optional<Output<String>> index() {
        return Optional.ofNullable(this.index);
    }

    /**
     * Date format for the splunk logs (string)
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Date format for the splunk logs (string)
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * SSL verify for the syslog service (bool)
     * 
     */
    @Import(name="sslVerify")
    private @Nullable Output<Boolean> sslVerify;

    /**
     * @return SSL verify for the syslog service (bool)
     * 
     */
    public Optional<Output<Boolean>> sslVerify() {
        return Optional.ofNullable(this.sslVerify);
    }

    /**
     * Token for the syslog service (string)
     * 
     */
    @Import(name="token", required=true)
    private Output<String> token;

    /**
     * @return Token for the syslog service (string)
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    private ProjectLoggingSplunkConfigArgs() {}

    private ProjectLoggingSplunkConfigArgs(ProjectLoggingSplunkConfigArgs $) {
        this.certificate = $.certificate;
        this.clientCert = $.clientCert;
        this.clientKey = $.clientKey;
        this.clientKeyPass = $.clientKeyPass;
        this.endpoint = $.endpoint;
        this.index = $.index;
        this.source = $.source;
        this.sslVerify = $.sslVerify;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectLoggingSplunkConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectLoggingSplunkConfigArgs $;

        public Builder() {
            $ = new ProjectLoggingSplunkConfigArgs();
        }

        public Builder(ProjectLoggingSplunkConfigArgs defaults) {
            $ = new ProjectLoggingSplunkConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate SSL certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate SSL certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param clientCert SSL client certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientCert(@Nullable Output<String> clientCert) {
            $.clientCert = clientCert;
            return this;
        }

        /**
         * @param clientCert SSL client certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientCert(String clientCert) {
            return clientCert(Output.of(clientCert));
        }

        /**
         * @param clientKey SSL client key for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey SSL client key for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        /**
         * @param clientKeyPass SSL client key password for the splunk service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientKeyPass(@Nullable Output<String> clientKeyPass) {
            $.clientKeyPass = clientKeyPass;
            return this;
        }

        /**
         * @param clientKeyPass SSL client key password for the splunk service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientKeyPass(String clientKeyPass) {
            return clientKeyPass(Output.of(clientKeyPass));
        }

        /**
         * @param endpoint Endpoint of the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint Endpoint of the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param index Index prefix for the splunk logs (string)
         * 
         * @return builder
         * 
         */
        public Builder index(@Nullable Output<String> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index Index prefix for the splunk logs (string)
         * 
         * @return builder
         * 
         */
        public Builder index(String index) {
            return index(Output.of(index));
        }

        /**
         * @param source Date format for the splunk logs (string)
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Date format for the splunk logs (string)
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sslVerify SSL verify for the syslog service (bool)
         * 
         * @return builder
         * 
         */
        public Builder sslVerify(@Nullable Output<Boolean> sslVerify) {
            $.sslVerify = sslVerify;
            return this;
        }

        /**
         * @param sslVerify SSL verify for the syslog service (bool)
         * 
         * @return builder
         * 
         */
        public Builder sslVerify(Boolean sslVerify) {
            return sslVerify(Output.of(sslVerify));
        }

        /**
         * @param token Token for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder token(Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Token for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public ProjectLoggingSplunkConfigArgs build() {
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            $.token = Objects.requireNonNull($.token, "expected parameter 'token' to be non-null");
            return $;
        }
    }

}
