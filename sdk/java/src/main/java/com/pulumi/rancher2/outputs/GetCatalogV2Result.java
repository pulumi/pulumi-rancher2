// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetCatalogV2Result {
    /**
     * @return (Computed) Annotations for the catalog v2 (map)
     * 
     */
    private Map<String,Object> annotations;
    /**
     * @return (Computed) PEM encoded CA bundle which will be used to validate the repo&#39;s certificate (string)
     * 
     */
    private String caBundle;
    private String clusterId;
    /**
     * @return (Computed) If disabled the repo clone will not be updated or allowed to be installed from. Default: `true` (bool)
     * 
     */
    private Boolean enabled;
    /**
     * @return (Computed) Git Repository branch containing Helm chart definitions. Default `master` (string)
     * 
     */
    private String gitBranch;
    /**
     * @return (Computed) The url of the catalog v2 repo (string)
     * 
     */
    private String gitRepo;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) Use insecure HTTPS to download the repo&#39;s index. Default: `false` (bool)
     * 
     */
    private Boolean insecure;
    /**
     * @return (Computed) Labels for the catalog v2 (map)
     * 
     */
    private Map<String,Object> labels;
    private String name;
    /**
     * @return (Computed) The k8s resource version (string)
     * 
     */
    private String resourceVersion;
    /**
     * @return (Computed) K8s secret name to be used to connect to the repo (string)
     * 
     */
    private String secretName;
    /**
     * @return (Computed) K8s secret namespace (string)
     * 
     */
    private String secretNamespace;
    /**
     * @return (Computed) K8s service account used to deploy charts instead of the end users credentials (string)
     * 
     */
    private String serviceAccount;
    /**
     * @return (Computed) The username to access the catalog if needed (string)
     * 
     */
    private String serviceAccountNamespace;
    /**
     * @return (Computed) URL to an index generated by Helm (string)
     * 
     */
    private String url;

    private GetCatalogV2Result() {}
    /**
     * @return (Computed) Annotations for the catalog v2 (map)
     * 
     */
    public Map<String,Object> annotations() {
        return this.annotations;
    }
    /**
     * @return (Computed) PEM encoded CA bundle which will be used to validate the repo&#39;s certificate (string)
     * 
     */
    public String caBundle() {
        return this.caBundle;
    }
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return (Computed) If disabled the repo clone will not be updated or allowed to be installed from. Default: `true` (bool)
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return (Computed) Git Repository branch containing Helm chart definitions. Default `master` (string)
     * 
     */
    public String gitBranch() {
        return this.gitBranch;
    }
    /**
     * @return (Computed) The url of the catalog v2 repo (string)
     * 
     */
    public String gitRepo() {
        return this.gitRepo;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) Use insecure HTTPS to download the repo&#39;s index. Default: `false` (bool)
     * 
     */
    public Boolean insecure() {
        return this.insecure;
    }
    /**
     * @return (Computed) Labels for the catalog v2 (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) The k8s resource version (string)
     * 
     */
    public String resourceVersion() {
        return this.resourceVersion;
    }
    /**
     * @return (Computed) K8s secret name to be used to connect to the repo (string)
     * 
     */
    public String secretName() {
        return this.secretName;
    }
    /**
     * @return (Computed) K8s secret namespace (string)
     * 
     */
    public String secretNamespace() {
        return this.secretNamespace;
    }
    /**
     * @return (Computed) K8s service account used to deploy charts instead of the end users credentials (string)
     * 
     */
    public String serviceAccount() {
        return this.serviceAccount;
    }
    /**
     * @return (Computed) The username to access the catalog if needed (string)
     * 
     */
    public String serviceAccountNamespace() {
        return this.serviceAccountNamespace;
    }
    /**
     * @return (Computed) URL to an index generated by Helm (string)
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCatalogV2Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> annotations;
        private String caBundle;
        private String clusterId;
        private Boolean enabled;
        private String gitBranch;
        private String gitRepo;
        private String id;
        private Boolean insecure;
        private Map<String,Object> labels;
        private String name;
        private String resourceVersion;
        private String secretName;
        private String secretNamespace;
        private String serviceAccount;
        private String serviceAccountNamespace;
        private String url;
        public Builder() {}
        public Builder(GetCatalogV2Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.caBundle = defaults.caBundle;
    	      this.clusterId = defaults.clusterId;
    	      this.enabled = defaults.enabled;
    	      this.gitBranch = defaults.gitBranch;
    	      this.gitRepo = defaults.gitRepo;
    	      this.id = defaults.id;
    	      this.insecure = defaults.insecure;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.resourceVersion = defaults.resourceVersion;
    	      this.secretName = defaults.secretName;
    	      this.secretNamespace = defaults.secretNamespace;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountNamespace = defaults.serviceAccountNamespace;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,Object> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        @CustomType.Setter
        public Builder caBundle(String caBundle) {
            this.caBundle = Objects.requireNonNull(caBundle);
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder gitBranch(String gitBranch) {
            this.gitBranch = Objects.requireNonNull(gitBranch);
            return this;
        }
        @CustomType.Setter
        public Builder gitRepo(String gitRepo) {
            this.gitRepo = Objects.requireNonNull(gitRepo);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder insecure(Boolean insecure) {
            this.insecure = Objects.requireNonNull(insecure);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder resourceVersion(String resourceVersion) {
            this.resourceVersion = Objects.requireNonNull(resourceVersion);
            return this;
        }
        @CustomType.Setter
        public Builder secretName(String secretName) {
            this.secretName = Objects.requireNonNull(secretName);
            return this;
        }
        @CustomType.Setter
        public Builder secretNamespace(String secretNamespace) {
            this.secretNamespace = Objects.requireNonNull(secretNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountNamespace(String serviceAccountNamespace) {
            this.serviceAccountNamespace = Objects.requireNonNull(serviceAccountNamespace);
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        public GetCatalogV2Result build() {
            final var o = new GetCatalogV2Result();
            o.annotations = annotations;
            o.caBundle = caBundle;
            o.clusterId = clusterId;
            o.enabled = enabled;
            o.gitBranch = gitBranch;
            o.gitRepo = gitRepo;
            o.id = id;
            o.insecure = insecure;
            o.labels = labels;
            o.name = name;
            o.resourceVersion = resourceVersion;
            o.secretName = secretName;
            o.secretNamespace = secretNamespace;
            o.serviceAccount = serviceAccount;
            o.serviceAccountNamespace = serviceAccountNamespace;
            o.url = url;
            return o;
        }
    }
}
