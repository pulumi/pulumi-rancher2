// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetProjectAlertGroupRecipient;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetProjectAlertGroupResult {
    /**
     * @return (Computed) The project alert group annotations (map)
     * 
     */
    private Map<String,Object> annotations;
    /**
     * @return (Computed) The project alert group description (string)
     * 
     */
    private String description;
    /**
     * @return (Computed) The project alert group interval seconds. Default: `180` (int)
     * 
     */
    private Integer groupIntervalSeconds;
    /**
     * @return (Computed) The project alert group wait seconds. Default: `180` (int)
     * 
     */
    private Integer groupWaitSeconds;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) The project alert group labels (map)
     * 
     */
    private Map<String,Object> labels;
    private String name;
    private String projectId;
    /**
     * @return (Computed) The project alert group recipients (list)
     * 
     */
    private List<GetProjectAlertGroupRecipient> recipients;
    /**
     * @return (Computed) The project alert group wait seconds. Default: `3600` (int)
     * 
     */
    private Integer repeatIntervalSeconds;

    private GetProjectAlertGroupResult() {}
    /**
     * @return (Computed) The project alert group annotations (map)
     * 
     */
    public Map<String,Object> annotations() {
        return this.annotations;
    }
    /**
     * @return (Computed) The project alert group description (string)
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return (Computed) The project alert group interval seconds. Default: `180` (int)
     * 
     */
    public Integer groupIntervalSeconds() {
        return this.groupIntervalSeconds;
    }
    /**
     * @return (Computed) The project alert group wait seconds. Default: `180` (int)
     * 
     */
    public Integer groupWaitSeconds() {
        return this.groupWaitSeconds;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) The project alert group labels (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public String name() {
        return this.name;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return (Computed) The project alert group recipients (list)
     * 
     */
    public List<GetProjectAlertGroupRecipient> recipients() {
        return this.recipients;
    }
    /**
     * @return (Computed) The project alert group wait seconds. Default: `3600` (int)
     * 
     */
    public Integer repeatIntervalSeconds() {
        return this.repeatIntervalSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectAlertGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> annotations;
        private String description;
        private Integer groupIntervalSeconds;
        private Integer groupWaitSeconds;
        private String id;
        private Map<String,Object> labels;
        private String name;
        private String projectId;
        private List<GetProjectAlertGroupRecipient> recipients;
        private Integer repeatIntervalSeconds;
        public Builder() {}
        public Builder(GetProjectAlertGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.description = defaults.description;
    	      this.groupIntervalSeconds = defaults.groupIntervalSeconds;
    	      this.groupWaitSeconds = defaults.groupWaitSeconds;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.recipients = defaults.recipients;
    	      this.repeatIntervalSeconds = defaults.repeatIntervalSeconds;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,Object> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder groupIntervalSeconds(Integer groupIntervalSeconds) {
            this.groupIntervalSeconds = Objects.requireNonNull(groupIntervalSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder groupWaitSeconds(Integer groupWaitSeconds) {
            this.groupWaitSeconds = Objects.requireNonNull(groupWaitSeconds);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder recipients(List<GetProjectAlertGroupRecipient> recipients) {
            this.recipients = Objects.requireNonNull(recipients);
            return this;
        }
        public Builder recipients(GetProjectAlertGroupRecipient... recipients) {
            return recipients(List.of(recipients));
        }
        @CustomType.Setter
        public Builder repeatIntervalSeconds(Integer repeatIntervalSeconds) {
            this.repeatIntervalSeconds = Objects.requireNonNull(repeatIntervalSeconds);
            return this;
        }
        public GetProjectAlertGroupResult build() {
            final var _resultValue = new GetProjectAlertGroupResult();
            _resultValue.annotations = annotations;
            _resultValue.description = description;
            _resultValue.groupIntervalSeconds = groupIntervalSeconds;
            _resultValue.groupWaitSeconds = groupWaitSeconds;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.recipients = recipients;
            _resultValue.repeatIntervalSeconds = repeatIntervalSeconds;
            return _resultValue;
        }
    }
}
