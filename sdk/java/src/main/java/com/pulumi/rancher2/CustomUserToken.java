// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.CustomUserTokenArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.CustomUserTokenState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Rancher v2 Token resource, specifically to create tokens for custom users (i.e. not the &#39;admin&#39; user configured with the provider config). Custom user tokens can f.e. be used as service account tokens with the Rancher v2 API having limited permissions. To create a custom user token the username/password for the Rancher User must be known.
 * 
 * There are 2 kind of tokens:
 * - not scoped: valid for global system.
 * - scoped: valid for just a specific cluster (`cluster_id` should be provided).
 * 
 * Tokens can only be created for a Rancher User with at least the `user-base` global role binding in order to enable user login.
 * 
 * Tokens can&#39;t be updated once created. Any diff in token data will recreate the token. If any token expire, Rancher2 provider will generate a diff to regenerate it.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rancher2.User;
 * import com.pulumi.rancher2.UserArgs;
 * import com.pulumi.rancher2.GlobalRoleBinding;
 * import com.pulumi.rancher2.GlobalRoleBindingArgs;
 * import com.pulumi.rancher2.CustomUserToken;
 * import com.pulumi.rancher2.CustomUserTokenArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Create a rancher2 Token
 *         var foo = new User("foo", UserArgs.builder()        
 *             .name("foo")
 *             .username("foo")
 *             .password("changeme")
 *             .enabled(true)
 *             .build());
 * 
 *         var foo_login = new GlobalRoleBinding("foo-login", GlobalRoleBindingArgs.builder()        
 *             .name("foo-login-binding")
 *             .globalRoleId("user-base")
 *             .userId(foo.id())
 *             .build());
 * 
 *         var fooCustomUserToken = new CustomUserToken("fooCustomUserToken", CustomUserTokenArgs.builder()        
 *             .username(foo.username())
 *             .password(foo.password())
 *             .description("foo token")
 *             .ttl(0)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(foo_login)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="rancher2:index/customUserToken:CustomUserToken")
public class CustomUserToken extends com.pulumi.resources.CustomResource {
    /**
     * (Computed) Token access key part (string)
     * 
     */
    @Export(name="accessKey", refs={String.class}, tree="[0]")
    private Output<String> accessKey;

    /**
     * @return (Computed) Token access key part (string)
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }
    /**
     * (Computed) Annotations of the token (map)
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> annotations;

    /**
     * @return (Computed) Annotations of the token (map)
     * 
     */
    public Output<Map<String,Object>> annotations() {
        return this.annotations;
    }
    /**
     * Cluster ID for scoped token (string)
     * 
     */
    @Export(name="clusterId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clusterId;

    /**
     * @return Cluster ID for scoped token (string)
     * 
     */
    public Output<Optional<String>> clusterId() {
        return Codegen.optional(this.clusterId);
    }
    /**
     * Token description (string)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Token description (string)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * (Computed) Token is enabled (bool)
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return (Computed) Token is enabled (bool)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * (Computed) Token is expired (bool)
     * 
     */
    @Export(name="expired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> expired;

    /**
     * @return (Computed) Token is expired (bool)
     * 
     */
    public Output<Boolean> expired() {
        return this.expired;
    }
    /**
     * (Computed) Labels of the token (map)
     * 
     */
    @Export(name="labels", refs={Map.class,String.class,Object.class}, tree="[0,1,2]")
    private Output<Map<String,Object>> labels;

    /**
     * @return (Computed) Labels of the token (map)
     * 
     */
    public Output<Map<String,Object>> labels() {
        return this.labels;
    }
    /**
     * (Computed) Token name (string)
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return (Computed) Token name (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The user password (string)
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output<String> password;

    /**
     * @return The user password (string)
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * Renew expired or disabled token
     * 
     */
    @Export(name="renew", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> renew;

    /**
     * @return Renew expired or disabled token
     * 
     */
    public Output<Optional<Boolean>> renew() {
        return Codegen.optional(this.renew);
    }
    /**
     * (Computed/Sensitive) Token secret key part (string)
     * 
     */
    @Export(name="secretKey", refs={String.class}, tree="[0]")
    private Output<String> secretKey;

    /**
     * @return (Computed/Sensitive) Token secret key part (string)
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }
    /**
     * (Computed) Generated API temporary token as helper. Should be empty (string)
     * 
     */
    @Export(name="tempToken", refs={String.class}, tree="[0]")
    private Output<String> tempToken;

    /**
     * @return (Computed) Generated API temporary token as helper. Should be empty (string)
     * 
     */
    public Output<String> tempToken() {
        return this.tempToken;
    }
    /**
     * (Computed) Generated API temporary token id as helper. Should be empty (string)
     * 
     */
    @Export(name="tempTokenId", refs={String.class}, tree="[0]")
    private Output<String> tempTokenId;

    /**
     * @return (Computed) Generated API temporary token id as helper. Should be empty (string)
     * 
     */
    public Output<String> tempTokenId() {
        return this.tempTokenId;
    }
    /**
     * (Computed/Sensitive) Token value (string)
     * 
     */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output<String> token;

    /**
     * @return (Computed/Sensitive) Token value (string)
     * 
     */
    public Output<String> token() {
        return this.token;
    }
    /**
     * Token time to live in seconds. Default `0` (int)
     * 
     * From Rancher v2.4.6 `ttl` is read in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.
     * 
     */
    @Export(name="ttl", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ttl;

    /**
     * @return Token time to live in seconds. Default `0` (int)
     * 
     * From Rancher v2.4.6 `ttl` is read in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.
     * 
     */
    public Output<Optional<Integer>> ttl() {
        return Codegen.optional(this.ttl);
    }
    /**
     * (Computed) Token user ID (string)
     * 
     */
    @Export(name="userId", refs={String.class}, tree="[0]")
    private Output<String> userId;

    /**
     * @return (Computed) Token user ID (string)
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }
    /**
     * The user username (string)
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output<String> username;

    /**
     * @return The user username (string)
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CustomUserToken(String name) {
        this(name, CustomUserTokenArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CustomUserToken(String name, CustomUserTokenArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CustomUserToken(String name, CustomUserTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/customUserToken:CustomUserToken", name, args == null ? CustomUserTokenArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CustomUserToken(String name, Output<String> id, @Nullable CustomUserTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/customUserToken:CustomUserToken", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password",
                "secretKey",
                "tempToken",
                "token"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CustomUserToken get(String name, Output<String> id, @Nullable CustomUserTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CustomUserToken(name, id, state, options);
    }
}
