// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterOkeConfig {
    /**
     * @return Optionally specify a cluster type of basic or enhanced
     * 
     */
    private @Nullable String clusterType;
    /**
     * @return The OCID of the compartment in which to create resources (VCN, worker nodes, etc.)
     * 
     */
    private String compartmentId;
    /**
     * @return The (optional) name of a pre-existing subnet (public or private) for the Kubernetes API endpoint
     * 
     */
    private @Nullable String controlPlaneSubnetName;
    /**
     * @return An optional custom boot volume size (in GB) for the nodes
     * 
     */
    private @Nullable Integer customBootVolumeSize;
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    private @Nullable String description;
    /**
     * @return Enable the kubernetes dashboard
     * 
     */
    private @Nullable Boolean enableKubernetesDashboard;
    /**
     * @return Whether Kubernetes API endpoint is a private IP only accessible from within the VCN
     * 
     */
    private @Nullable Boolean enablePrivateControlPlane;
    /**
     * @return Whether worker nodes are deployed into a new private subnet
     * 
     */
    private @Nullable Boolean enablePrivateNodes;
    /**
     * @return The optional grace period in minutes to allow cordon and drain to complete successfuly
     * 
     */
    private @Nullable String evictionGraceDuration;
    /**
     * @return The fingerprint corresponding to the specified user&#39;s private API Key
     * 
     */
    private @Nullable String fingerprint;
    /**
     * @return Optional amount of memory in GB for nodes (requires flexible node_shape)
     * 
     */
    private @Nullable Integer flexMemoryInGbs;
    /**
     * @return Optional number of OCPUs for nodes (requires flexible node_shape)
     * 
     */
    private @Nullable Integer flexOcpus;
    /**
     * @return Whether to send a SIGKILL signal if a pod does not terminate within the specified grace period
     * 
     */
    private @Nullable Boolean forceDeleteAfterGraceDuration;
    /**
     * @return Optional specify a comma separated list of master encryption key OCID(s) to verify images
     * 
     */
    private @Nullable String imageVerificationKmsKeyId;
    /**
     * @return Optional specify the OCID of the KMS Vault master key
     * 
     */
    private @Nullable String kmsKeyId;
    /**
     * @return The Kubernetes version that will be used for your master *and* worker nodes e.g. v1.33.1
     * 
     */
    private String kubernetesVersion;
    /**
     * @return Optional limit on the total number of nodes in the pool
     * 
     */
    private @Nullable Integer limitNodeCount;
    /**
     * @return The name of the first existing subnet to use for Kubernetes services / LB
     * 
     */
    private @Nullable String loadBalancerSubnetName1;
    /**
     * @return The (optional) name of a second existing subnet to use for Kubernetes services / LB
     * 
     */
    private @Nullable String loadBalancerSubnetName2;
    /**
     * @return The OS for the node image
     * 
     */
    private String nodeImage;
    /**
     * @return Optional name for DNS domain of node pool subnet
     * 
     */
    private @Nullable String nodePoolDnsDomainName;
    /**
     * @return Optional pre-existing subnet (public or private) for nodes
     * 
     */
    private @Nullable String nodePoolSubnetName;
    /**
     * @return The contents of the SSH public key file to use for the nodes
     * 
     */
    private @Nullable String nodePublicKeyContents;
    /**
     * @return The shape of the node (determines number of CPUs and  amount of memory on each node)
     * 
     */
    private String nodeShape;
    /**
     * @return The contents of custom cloud-init / userData for the nodes - will be base64 encoded internally if it is not already
     * 
     */
    private @Nullable String nodeUserDataContents;
    /**
     * @return Optional specify the pod CIDR, defaults to 10.244.0.0/16
     * 
     */
    private @Nullable String podCidr;
    /**
     * @return Optional Pod Network plugin. Choose flannel or native. Defaults to flannel
     * 
     */
    private @Nullable String podNetwork;
    /**
     * @return The (optional) name of a pre-existing subnet that pods will be assigned IPs from when using native pod networking
     * 
     */
    private @Nullable String podSubnetName;
    /**
     * @return The private API key file contents for the specified user, in PEM format
     * 
     */
    private @Nullable String privateKeyContents;
    /**
     * @return The passphrase of the private key for the OKE cluster
     * 
     */
    private @Nullable String privateKeyPassphrase;
    /**
     * @return Number of node subnets (defaults to creating 1 regional subnet)
     * 
     */
    private @Nullable Integer quantityOfNodeSubnets;
    /**
     * @return Number of worker nodes in each subnet / availability domain
     * 
     */
    private @Nullable Integer quantityPerSubnet;
    /**
     * @return The availability domain within the region to host the OKE cluster
     * 
     */
    private String region;
    /**
     * @return Optional specify the service CIDR, defaults to 10.96.0.0/16
     * 
     */
    private @Nullable String serviceCidr;
    /**
     * @return Optional name for DNS domain of service subnet
     * 
     */
    private @Nullable String serviceDnsDomainName;
    /**
     * @return Whether to skip deleting VCN
     * 
     */
    private @Nullable Boolean skipVcnDelete;
    /**
     * @return The OCID of the tenancy in which to create resources
     * 
     */
    private String tenancyId;
    /**
     * @return The OCID of a user who has access to the tenancy/compartment
     * 
     */
    private @Nullable String userOcid;
    /**
     * @return The OCID of the compartment (if different from compartment_id) in which to find the pre-existing virtual network set with vcn_name.
     * 
     */
    private @Nullable String vcnCompartmentId;
    /**
     * @return The optional name of an existing virtual network to use for the cluster creation. A new VCN will be created if not specified.
     * 
     */
    private @Nullable String vcnName;
    /**
     * @return Additional CIDR from which to allow ingress to worker nodes
     * 
     */
    private @Nullable String workerNodeIngressCidr;

    private GetClusterOkeConfig() {}
    /**
     * @return Optionally specify a cluster type of basic or enhanced
     * 
     */
    public Optional<String> clusterType() {
        return Optional.ofNullable(this.clusterType);
    }
    /**
     * @return The OCID of the compartment in which to create resources (VCN, worker nodes, etc.)
     * 
     */
    public String compartmentId() {
        return this.compartmentId;
    }
    /**
     * @return The (optional) name of a pre-existing subnet (public or private) for the Kubernetes API endpoint
     * 
     */
    public Optional<String> controlPlaneSubnetName() {
        return Optional.ofNullable(this.controlPlaneSubnetName);
    }
    /**
     * @return An optional custom boot volume size (in GB) for the nodes
     * 
     */
    public Optional<Integer> customBootVolumeSize() {
        return Optional.ofNullable(this.customBootVolumeSize);
    }
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Enable the kubernetes dashboard
     * 
     */
    public Optional<Boolean> enableKubernetesDashboard() {
        return Optional.ofNullable(this.enableKubernetesDashboard);
    }
    /**
     * @return Whether Kubernetes API endpoint is a private IP only accessible from within the VCN
     * 
     */
    public Optional<Boolean> enablePrivateControlPlane() {
        return Optional.ofNullable(this.enablePrivateControlPlane);
    }
    /**
     * @return Whether worker nodes are deployed into a new private subnet
     * 
     */
    public Optional<Boolean> enablePrivateNodes() {
        return Optional.ofNullable(this.enablePrivateNodes);
    }
    /**
     * @return The optional grace period in minutes to allow cordon and drain to complete successfuly
     * 
     */
    public Optional<String> evictionGraceDuration() {
        return Optional.ofNullable(this.evictionGraceDuration);
    }
    /**
     * @return The fingerprint corresponding to the specified user&#39;s private API Key
     * 
     */
    public Optional<String> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }
    /**
     * @return Optional amount of memory in GB for nodes (requires flexible node_shape)
     * 
     */
    public Optional<Integer> flexMemoryInGbs() {
        return Optional.ofNullable(this.flexMemoryInGbs);
    }
    /**
     * @return Optional number of OCPUs for nodes (requires flexible node_shape)
     * 
     */
    public Optional<Integer> flexOcpus() {
        return Optional.ofNullable(this.flexOcpus);
    }
    /**
     * @return Whether to send a SIGKILL signal if a pod does not terminate within the specified grace period
     * 
     */
    public Optional<Boolean> forceDeleteAfterGraceDuration() {
        return Optional.ofNullable(this.forceDeleteAfterGraceDuration);
    }
    /**
     * @return Optional specify a comma separated list of master encryption key OCID(s) to verify images
     * 
     */
    public Optional<String> imageVerificationKmsKeyId() {
        return Optional.ofNullable(this.imageVerificationKmsKeyId);
    }
    /**
     * @return Optional specify the OCID of the KMS Vault master key
     * 
     */
    public Optional<String> kmsKeyId() {
        return Optional.ofNullable(this.kmsKeyId);
    }
    /**
     * @return The Kubernetes version that will be used for your master *and* worker nodes e.g. v1.33.1
     * 
     */
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    /**
     * @return Optional limit on the total number of nodes in the pool
     * 
     */
    public Optional<Integer> limitNodeCount() {
        return Optional.ofNullable(this.limitNodeCount);
    }
    /**
     * @return The name of the first existing subnet to use for Kubernetes services / LB
     * 
     */
    public Optional<String> loadBalancerSubnetName1() {
        return Optional.ofNullable(this.loadBalancerSubnetName1);
    }
    /**
     * @return The (optional) name of a second existing subnet to use for Kubernetes services / LB
     * 
     */
    public Optional<String> loadBalancerSubnetName2() {
        return Optional.ofNullable(this.loadBalancerSubnetName2);
    }
    /**
     * @return The OS for the node image
     * 
     */
    public String nodeImage() {
        return this.nodeImage;
    }
    /**
     * @return Optional name for DNS domain of node pool subnet
     * 
     */
    public Optional<String> nodePoolDnsDomainName() {
        return Optional.ofNullable(this.nodePoolDnsDomainName);
    }
    /**
     * @return Optional pre-existing subnet (public or private) for nodes
     * 
     */
    public Optional<String> nodePoolSubnetName() {
        return Optional.ofNullable(this.nodePoolSubnetName);
    }
    /**
     * @return The contents of the SSH public key file to use for the nodes
     * 
     */
    public Optional<String> nodePublicKeyContents() {
        return Optional.ofNullable(this.nodePublicKeyContents);
    }
    /**
     * @return The shape of the node (determines number of CPUs and  amount of memory on each node)
     * 
     */
    public String nodeShape() {
        return this.nodeShape;
    }
    /**
     * @return The contents of custom cloud-init / userData for the nodes - will be base64 encoded internally if it is not already
     * 
     */
    public Optional<String> nodeUserDataContents() {
        return Optional.ofNullable(this.nodeUserDataContents);
    }
    /**
     * @return Optional specify the pod CIDR, defaults to 10.244.0.0/16
     * 
     */
    public Optional<String> podCidr() {
        return Optional.ofNullable(this.podCidr);
    }
    /**
     * @return Optional Pod Network plugin. Choose flannel or native. Defaults to flannel
     * 
     */
    public Optional<String> podNetwork() {
        return Optional.ofNullable(this.podNetwork);
    }
    /**
     * @return The (optional) name of a pre-existing subnet that pods will be assigned IPs from when using native pod networking
     * 
     */
    public Optional<String> podSubnetName() {
        return Optional.ofNullable(this.podSubnetName);
    }
    /**
     * @return The private API key file contents for the specified user, in PEM format
     * 
     */
    public Optional<String> privateKeyContents() {
        return Optional.ofNullable(this.privateKeyContents);
    }
    /**
     * @return The passphrase of the private key for the OKE cluster
     * 
     */
    public Optional<String> privateKeyPassphrase() {
        return Optional.ofNullable(this.privateKeyPassphrase);
    }
    /**
     * @return Number of node subnets (defaults to creating 1 regional subnet)
     * 
     */
    public Optional<Integer> quantityOfNodeSubnets() {
        return Optional.ofNullable(this.quantityOfNodeSubnets);
    }
    /**
     * @return Number of worker nodes in each subnet / availability domain
     * 
     */
    public Optional<Integer> quantityPerSubnet() {
        return Optional.ofNullable(this.quantityPerSubnet);
    }
    /**
     * @return The availability domain within the region to host the OKE cluster
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Optional specify the service CIDR, defaults to 10.96.0.0/16
     * 
     */
    public Optional<String> serviceCidr() {
        return Optional.ofNullable(this.serviceCidr);
    }
    /**
     * @return Optional name for DNS domain of service subnet
     * 
     */
    public Optional<String> serviceDnsDomainName() {
        return Optional.ofNullable(this.serviceDnsDomainName);
    }
    /**
     * @return Whether to skip deleting VCN
     * 
     */
    public Optional<Boolean> skipVcnDelete() {
        return Optional.ofNullable(this.skipVcnDelete);
    }
    /**
     * @return The OCID of the tenancy in which to create resources
     * 
     */
    public String tenancyId() {
        return this.tenancyId;
    }
    /**
     * @return The OCID of a user who has access to the tenancy/compartment
     * 
     */
    public Optional<String> userOcid() {
        return Optional.ofNullable(this.userOcid);
    }
    /**
     * @return The OCID of the compartment (if different from compartment_id) in which to find the pre-existing virtual network set with vcn_name.
     * 
     */
    public Optional<String> vcnCompartmentId() {
        return Optional.ofNullable(this.vcnCompartmentId);
    }
    /**
     * @return The optional name of an existing virtual network to use for the cluster creation. A new VCN will be created if not specified.
     * 
     */
    public Optional<String> vcnName() {
        return Optional.ofNullable(this.vcnName);
    }
    /**
     * @return Additional CIDR from which to allow ingress to worker nodes
     * 
     */
    public Optional<String> workerNodeIngressCidr() {
        return Optional.ofNullable(this.workerNodeIngressCidr);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterOkeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String clusterType;
        private String compartmentId;
        private @Nullable String controlPlaneSubnetName;
        private @Nullable Integer customBootVolumeSize;
        private @Nullable String description;
        private @Nullable Boolean enableKubernetesDashboard;
        private @Nullable Boolean enablePrivateControlPlane;
        private @Nullable Boolean enablePrivateNodes;
        private @Nullable String evictionGraceDuration;
        private @Nullable String fingerprint;
        private @Nullable Integer flexMemoryInGbs;
        private @Nullable Integer flexOcpus;
        private @Nullable Boolean forceDeleteAfterGraceDuration;
        private @Nullable String imageVerificationKmsKeyId;
        private @Nullable String kmsKeyId;
        private String kubernetesVersion;
        private @Nullable Integer limitNodeCount;
        private @Nullable String loadBalancerSubnetName1;
        private @Nullable String loadBalancerSubnetName2;
        private String nodeImage;
        private @Nullable String nodePoolDnsDomainName;
        private @Nullable String nodePoolSubnetName;
        private @Nullable String nodePublicKeyContents;
        private String nodeShape;
        private @Nullable String nodeUserDataContents;
        private @Nullable String podCidr;
        private @Nullable String podNetwork;
        private @Nullable String podSubnetName;
        private @Nullable String privateKeyContents;
        private @Nullable String privateKeyPassphrase;
        private @Nullable Integer quantityOfNodeSubnets;
        private @Nullable Integer quantityPerSubnet;
        private String region;
        private @Nullable String serviceCidr;
        private @Nullable String serviceDnsDomainName;
        private @Nullable Boolean skipVcnDelete;
        private String tenancyId;
        private @Nullable String userOcid;
        private @Nullable String vcnCompartmentId;
        private @Nullable String vcnName;
        private @Nullable String workerNodeIngressCidr;
        public Builder() {}
        public Builder(GetClusterOkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterType = defaults.clusterType;
    	      this.compartmentId = defaults.compartmentId;
    	      this.controlPlaneSubnetName = defaults.controlPlaneSubnetName;
    	      this.customBootVolumeSize = defaults.customBootVolumeSize;
    	      this.description = defaults.description;
    	      this.enableKubernetesDashboard = defaults.enableKubernetesDashboard;
    	      this.enablePrivateControlPlane = defaults.enablePrivateControlPlane;
    	      this.enablePrivateNodes = defaults.enablePrivateNodes;
    	      this.evictionGraceDuration = defaults.evictionGraceDuration;
    	      this.fingerprint = defaults.fingerprint;
    	      this.flexMemoryInGbs = defaults.flexMemoryInGbs;
    	      this.flexOcpus = defaults.flexOcpus;
    	      this.forceDeleteAfterGraceDuration = defaults.forceDeleteAfterGraceDuration;
    	      this.imageVerificationKmsKeyId = defaults.imageVerificationKmsKeyId;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.limitNodeCount = defaults.limitNodeCount;
    	      this.loadBalancerSubnetName1 = defaults.loadBalancerSubnetName1;
    	      this.loadBalancerSubnetName2 = defaults.loadBalancerSubnetName2;
    	      this.nodeImage = defaults.nodeImage;
    	      this.nodePoolDnsDomainName = defaults.nodePoolDnsDomainName;
    	      this.nodePoolSubnetName = defaults.nodePoolSubnetName;
    	      this.nodePublicKeyContents = defaults.nodePublicKeyContents;
    	      this.nodeShape = defaults.nodeShape;
    	      this.nodeUserDataContents = defaults.nodeUserDataContents;
    	      this.podCidr = defaults.podCidr;
    	      this.podNetwork = defaults.podNetwork;
    	      this.podSubnetName = defaults.podSubnetName;
    	      this.privateKeyContents = defaults.privateKeyContents;
    	      this.privateKeyPassphrase = defaults.privateKeyPassphrase;
    	      this.quantityOfNodeSubnets = defaults.quantityOfNodeSubnets;
    	      this.quantityPerSubnet = defaults.quantityPerSubnet;
    	      this.region = defaults.region;
    	      this.serviceCidr = defaults.serviceCidr;
    	      this.serviceDnsDomainName = defaults.serviceDnsDomainName;
    	      this.skipVcnDelete = defaults.skipVcnDelete;
    	      this.tenancyId = defaults.tenancyId;
    	      this.userOcid = defaults.userOcid;
    	      this.vcnCompartmentId = defaults.vcnCompartmentId;
    	      this.vcnName = defaults.vcnName;
    	      this.workerNodeIngressCidr = defaults.workerNodeIngressCidr;
        }

        @CustomType.Setter
        public Builder clusterType(@Nullable String clusterType) {

            this.clusterType = clusterType;
            return this;
        }
        @CustomType.Setter
        public Builder compartmentId(String compartmentId) {
            if (compartmentId == null) {
              throw new MissingRequiredPropertyException("GetClusterOkeConfig", "compartmentId");
            }
            this.compartmentId = compartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder controlPlaneSubnetName(@Nullable String controlPlaneSubnetName) {

            this.controlPlaneSubnetName = controlPlaneSubnetName;
            return this;
        }
        @CustomType.Setter
        public Builder customBootVolumeSize(@Nullable Integer customBootVolumeSize) {

            this.customBootVolumeSize = customBootVolumeSize;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableKubernetesDashboard(@Nullable Boolean enableKubernetesDashboard) {

            this.enableKubernetesDashboard = enableKubernetesDashboard;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateControlPlane(@Nullable Boolean enablePrivateControlPlane) {

            this.enablePrivateControlPlane = enablePrivateControlPlane;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateNodes(@Nullable Boolean enablePrivateNodes) {

            this.enablePrivateNodes = enablePrivateNodes;
            return this;
        }
        @CustomType.Setter
        public Builder evictionGraceDuration(@Nullable String evictionGraceDuration) {

            this.evictionGraceDuration = evictionGraceDuration;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(@Nullable String fingerprint) {

            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder flexMemoryInGbs(@Nullable Integer flexMemoryInGbs) {

            this.flexMemoryInGbs = flexMemoryInGbs;
            return this;
        }
        @CustomType.Setter
        public Builder flexOcpus(@Nullable Integer flexOcpus) {

            this.flexOcpus = flexOcpus;
            return this;
        }
        @CustomType.Setter
        public Builder forceDeleteAfterGraceDuration(@Nullable Boolean forceDeleteAfterGraceDuration) {

            this.forceDeleteAfterGraceDuration = forceDeleteAfterGraceDuration;
            return this;
        }
        @CustomType.Setter
        public Builder imageVerificationKmsKeyId(@Nullable String imageVerificationKmsKeyId) {

            this.imageVerificationKmsKeyId = imageVerificationKmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder kmsKeyId(@Nullable String kmsKeyId) {

            this.kmsKeyId = kmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            if (kubernetesVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterOkeConfig", "kubernetesVersion");
            }
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        @CustomType.Setter
        public Builder limitNodeCount(@Nullable Integer limitNodeCount) {

            this.limitNodeCount = limitNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerSubnetName1(@Nullable String loadBalancerSubnetName1) {

            this.loadBalancerSubnetName1 = loadBalancerSubnetName1;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerSubnetName2(@Nullable String loadBalancerSubnetName2) {

            this.loadBalancerSubnetName2 = loadBalancerSubnetName2;
            return this;
        }
        @CustomType.Setter
        public Builder nodeImage(String nodeImage) {
            if (nodeImage == null) {
              throw new MissingRequiredPropertyException("GetClusterOkeConfig", "nodeImage");
            }
            this.nodeImage = nodeImage;
            return this;
        }
        @CustomType.Setter
        public Builder nodePoolDnsDomainName(@Nullable String nodePoolDnsDomainName) {

            this.nodePoolDnsDomainName = nodePoolDnsDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder nodePoolSubnetName(@Nullable String nodePoolSubnetName) {

            this.nodePoolSubnetName = nodePoolSubnetName;
            return this;
        }
        @CustomType.Setter
        public Builder nodePublicKeyContents(@Nullable String nodePublicKeyContents) {

            this.nodePublicKeyContents = nodePublicKeyContents;
            return this;
        }
        @CustomType.Setter
        public Builder nodeShape(String nodeShape) {
            if (nodeShape == null) {
              throw new MissingRequiredPropertyException("GetClusterOkeConfig", "nodeShape");
            }
            this.nodeShape = nodeShape;
            return this;
        }
        @CustomType.Setter
        public Builder nodeUserDataContents(@Nullable String nodeUserDataContents) {

            this.nodeUserDataContents = nodeUserDataContents;
            return this;
        }
        @CustomType.Setter
        public Builder podCidr(@Nullable String podCidr) {

            this.podCidr = podCidr;
            return this;
        }
        @CustomType.Setter
        public Builder podNetwork(@Nullable String podNetwork) {

            this.podNetwork = podNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder podSubnetName(@Nullable String podSubnetName) {

            this.podSubnetName = podSubnetName;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyContents(@Nullable String privateKeyContents) {

            this.privateKeyContents = privateKeyContents;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyPassphrase(@Nullable String privateKeyPassphrase) {

            this.privateKeyPassphrase = privateKeyPassphrase;
            return this;
        }
        @CustomType.Setter
        public Builder quantityOfNodeSubnets(@Nullable Integer quantityOfNodeSubnets) {

            this.quantityOfNodeSubnets = quantityOfNodeSubnets;
            return this;
        }
        @CustomType.Setter
        public Builder quantityPerSubnet(@Nullable Integer quantityPerSubnet) {

            this.quantityPerSubnet = quantityPerSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetClusterOkeConfig", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder serviceCidr(@Nullable String serviceCidr) {

            this.serviceCidr = serviceCidr;
            return this;
        }
        @CustomType.Setter
        public Builder serviceDnsDomainName(@Nullable String serviceDnsDomainName) {

            this.serviceDnsDomainName = serviceDnsDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder skipVcnDelete(@Nullable Boolean skipVcnDelete) {

            this.skipVcnDelete = skipVcnDelete;
            return this;
        }
        @CustomType.Setter
        public Builder tenancyId(String tenancyId) {
            if (tenancyId == null) {
              throw new MissingRequiredPropertyException("GetClusterOkeConfig", "tenancyId");
            }
            this.tenancyId = tenancyId;
            return this;
        }
        @CustomType.Setter
        public Builder userOcid(@Nullable String userOcid) {

            this.userOcid = userOcid;
            return this;
        }
        @CustomType.Setter
        public Builder vcnCompartmentId(@Nullable String vcnCompartmentId) {

            this.vcnCompartmentId = vcnCompartmentId;
            return this;
        }
        @CustomType.Setter
        public Builder vcnName(@Nullable String vcnName) {

            this.vcnName = vcnName;
            return this;
        }
        @CustomType.Setter
        public Builder workerNodeIngressCidr(@Nullable String workerNodeIngressCidr) {

            this.workerNodeIngressCidr = workerNodeIngressCidr;
            return this;
        }
        public GetClusterOkeConfig build() {
            final var _resultValue = new GetClusterOkeConfig();
            _resultValue.clusterType = clusterType;
            _resultValue.compartmentId = compartmentId;
            _resultValue.controlPlaneSubnetName = controlPlaneSubnetName;
            _resultValue.customBootVolumeSize = customBootVolumeSize;
            _resultValue.description = description;
            _resultValue.enableKubernetesDashboard = enableKubernetesDashboard;
            _resultValue.enablePrivateControlPlane = enablePrivateControlPlane;
            _resultValue.enablePrivateNodes = enablePrivateNodes;
            _resultValue.evictionGraceDuration = evictionGraceDuration;
            _resultValue.fingerprint = fingerprint;
            _resultValue.flexMemoryInGbs = flexMemoryInGbs;
            _resultValue.flexOcpus = flexOcpus;
            _resultValue.forceDeleteAfterGraceDuration = forceDeleteAfterGraceDuration;
            _resultValue.imageVerificationKmsKeyId = imageVerificationKmsKeyId;
            _resultValue.kmsKeyId = kmsKeyId;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.limitNodeCount = limitNodeCount;
            _resultValue.loadBalancerSubnetName1 = loadBalancerSubnetName1;
            _resultValue.loadBalancerSubnetName2 = loadBalancerSubnetName2;
            _resultValue.nodeImage = nodeImage;
            _resultValue.nodePoolDnsDomainName = nodePoolDnsDomainName;
            _resultValue.nodePoolSubnetName = nodePoolSubnetName;
            _resultValue.nodePublicKeyContents = nodePublicKeyContents;
            _resultValue.nodeShape = nodeShape;
            _resultValue.nodeUserDataContents = nodeUserDataContents;
            _resultValue.podCidr = podCidr;
            _resultValue.podNetwork = podNetwork;
            _resultValue.podSubnetName = podSubnetName;
            _resultValue.privateKeyContents = privateKeyContents;
            _resultValue.privateKeyPassphrase = privateKeyPassphrase;
            _resultValue.quantityOfNodeSubnets = quantityOfNodeSubnets;
            _resultValue.quantityPerSubnet = quantityPerSubnet;
            _resultValue.region = region;
            _resultValue.serviceCidr = serviceCidr;
            _resultValue.serviceDnsDomainName = serviceDnsDomainName;
            _resultValue.skipVcnDelete = skipVcnDelete;
            _resultValue.tenancyId = tenancyId;
            _resultValue.userOcid = userOcid;
            _resultValue.vcnCompartmentId = vcnCompartmentId;
            _resultValue.vcnName = vcnName;
            _resultValue.workerNodeIngressCidr = workerNodeIngressCidr;
            return _resultValue;
        }
    }
}
