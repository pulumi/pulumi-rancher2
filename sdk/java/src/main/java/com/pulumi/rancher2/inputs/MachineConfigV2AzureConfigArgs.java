// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MachineConfigV2AzureConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MachineConfigV2AzureConfigArgs Empty = new MachineConfigV2AzureConfigArgs();

    @Import(name="acceleratedNetworking")
    private @Nullable Output<Boolean> acceleratedNetworking;

    public Optional<Output<Boolean>> acceleratedNetworking() {
        return Optional.ofNullable(this.acceleratedNetworking);
    }

    /**
     * Azure Availability Set to place the virtual machine into. Default `docker-machine` (string)
     * 
     */
    @Import(name="availabilitySet")
    private @Nullable Output<String> availabilitySet;

    /**
     * @return Azure Availability Set to place the virtual machine into. Default `docker-machine` (string)
     * 
     */
    public Optional<Output<String>> availabilitySet() {
        return Optional.ofNullable(this.availabilitySet);
    }

    /**
     * OpenStack availability zone (string)
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return OpenStack availability zone (string)
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * Azure Service Principal Account ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Azure Service Principal Account ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Azure Service Principal Account password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return Azure Service Principal Account password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Path to file with custom-data (string)
     * 
     */
    @Import(name="customData")
    private @Nullable Output<String> customData;

    /**
     * @return Path to file with custom-data (string)
     * 
     */
    public Optional<Output<String>> customData() {
        return Optional.ofNullable(this.customData);
    }

    /**
     * Disk size if using managed disk. Just for Rancher v2.3.x and above. Default `30` (string)
     * 
     */
    @Import(name="diskSize")
    private @Nullable Output<String> diskSize;

    /**
     * @return Disk size if using managed disk. Just for Rancher v2.3.x and above. Default `30` (string)
     * 
     */
    public Optional<Output<String>> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }

    /**
     * A unique DNS label for the public IP adddress (string)
     * 
     */
    @Import(name="dns")
    private @Nullable Output<String> dns;

    /**
     * @return A unique DNS label for the public IP adddress (string)
     * 
     */
    public Optional<Output<String>> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * Port number for Docker engine. Default `2376` (string)
     * 
     */
    @Import(name="dockerPort")
    private @Nullable Output<String> dockerPort;

    /**
     * @return Port number for Docker engine. Default `2376` (string)
     * 
     */
    public Optional<Output<String>> dockerPort() {
        return Optional.ofNullable(this.dockerPort);
    }

    /**
     * Azure environment (e.g. AzurePublicCloud, AzureChinaCloud). Default `AzurePublicCloud` (string)
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return Azure environment (e.g. AzurePublicCloud, AzureChinaCloud). Default `AzurePublicCloud` (string)
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * Fault domain count to use for availability set. Default `3` (string)
     * 
     */
    @Import(name="faultDomainCount")
    private @Nullable Output<String> faultDomainCount;

    /**
     * @return Fault domain count to use for availability set. Default `3` (string)
     * 
     */
    public Optional<Output<String>> faultDomainCount() {
        return Optional.ofNullable(this.faultDomainCount);
    }

    /**
     * Azure virtual machine OS image. Default `canonical:UbuntuServer:18.04-LTS:latest` (string)
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return Azure virtual machine OS image. Default `canonical:UbuntuServer:18.04-LTS:latest` (string)
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Azure region to create the virtual machine. Default `westus` (string)
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Azure region to create the virtual machine. Default `westus` (string)
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Configures VM and availability set for managed disks. Just for Rancher v2.3.x and above. Default `false` (bool)
     * 
     */
    @Import(name="managedDisks")
    private @Nullable Output<Boolean> managedDisks;

    /**
     * @return Configures VM and availability set for managed disks. Just for Rancher v2.3.x and above. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> managedDisks() {
        return Optional.ofNullable(this.managedDisks);
    }

    /**
     * Do not create a public IP address for the machine. Default `false` (bool)
     * 
     */
    @Import(name="noPublicIp")
    private @Nullable Output<Boolean> noPublicIp;

    /**
     * @return Do not create a public IP address for the machine. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> noPublicIp() {
        return Optional.ofNullable(this.noPublicIp);
    }

    /**
     * Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine). Default `docker-machine-nsg` (string)
     * 
     */
    @Import(name="nsg")
    private @Nullable Output<String> nsg;

    /**
     * @return Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine). Default `docker-machine-nsg` (string)
     * 
     */
    public Optional<Output<String>> nsg() {
        return Optional.ofNullable(this.nsg);
    }

    /**
     * Make the specified port number accessible from the Internet. (list)
     * 
     */
    @Import(name="openPorts")
    private @Nullable Output<List<String>> openPorts;

    /**
     * @return Make the specified port number accessible from the Internet. (list)
     * 
     */
    public Optional<Output<List<String>>> openPorts() {
        return Optional.ofNullable(this.openPorts);
    }

    /**
     * Only use a private IP address. Default `false` (bool)
     * 
     */
    @Import(name="privateAddressOnly")
    private @Nullable Output<Boolean> privateAddressOnly;

    /**
     * @return Only use a private IP address. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> privateAddressOnly() {
        return Optional.ofNullable(this.privateAddressOnly);
    }

    /**
     * Specify a static private IP address for the machine. (string)
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable Output<String> privateIpAddress;

    /**
     * @return Specify a static private IP address for the machine. (string)
     * 
     */
    public Optional<Output<String>> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * Azure Resource Group name (will be created if missing). Default `docker-machine` (string)
     * 
     */
    @Import(name="resourceGroup")
    private @Nullable Output<String> resourceGroup;

    /**
     * @return Azure Resource Group name (will be created if missing). Default `docker-machine` (string)
     * 
     */
    public Optional<Output<String>> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }

    /**
     * Size for Azure Virtual Machine. Default `Standard_A2` (string)
     * 
     */
    @Import(name="size")
    private @Nullable Output<String> size;

    /**
     * @return Size for Azure Virtual Machine. Default `Standard_A2` (string)
     * 
     */
    public Optional<Output<String>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Set the name of the ssh user (string)
     * 
     */
    @Import(name="sshUser")
    private @Nullable Output<String> sshUser;

    /**
     * @return Set the name of the ssh user (string)
     * 
     */
    public Optional<Output<String>> sshUser() {
        return Optional.ofNullable(this.sshUser);
    }

    /**
     * Assign a static public IP address to the machine. Default `false` (bool)
     * 
     */
    @Import(name="staticPublicIp")
    private @Nullable Output<Boolean> staticPublicIp;

    /**
     * @return Assign a static public IP address to the machine. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> staticPublicIp() {
        return Optional.ofNullable(this.staticPublicIp);
    }

    /**
     * Type of Storage Account to host the OS Disk for the machine. Default `Standard_LRS` (string)
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return Type of Storage Account to host the OS Disk for the machine. Default `Standard_LRS` (string)
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    /**
     * Azure Subnet Name to be used within the Virtual Network. Default `docker-machine` (string)
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return Azure Subnet Name to be used within the Virtual Network. Default `docker-machine` (string)
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * Private CIDR block to be used for the new subnet, should comply RFC 1918. Default `192.168.0.0/16` (string)
     * 
     */
    @Import(name="subnetPrefix")
    private @Nullable Output<String> subnetPrefix;

    /**
     * @return Private CIDR block to be used for the new subnet, should comply RFC 1918. Default `192.168.0.0/16` (string)
     * 
     */
    public Optional<Output<String>> subnetPrefix() {
        return Optional.ofNullable(this.subnetPrefix);
    }

    /**
     * Azure Subscription ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return Azure Subscription ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * AWS Tags (e.g. key1,value1,key2,value2) (string)
     * 
     */
    @Import(name="tags")
    private @Nullable Output<String> tags;

    /**
     * @return AWS Tags (e.g. key1,value1,key2,value2) (string)
     * 
     */
    public Optional<Output<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Azure Tenant ID (string)
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Azure Tenant ID (string)
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * Update domain count to use for availability set. Default `5` (string)
     * 
     */
    @Import(name="updateDomainCount")
    private @Nullable Output<String> updateDomainCount;

    /**
     * @return Update domain count to use for availability set. Default `5` (string)
     * 
     */
    public Optional<Output<String>> updateDomainCount() {
        return Optional.ofNullable(this.updateDomainCount);
    }

    /**
     * Use private IP address of the machine to connect. Default `false` (bool)
     * 
     */
    @Import(name="usePrivateIp")
    private @Nullable Output<Boolean> usePrivateIp;

    /**
     * @return Use private IP address of the machine to connect. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> usePrivateIp() {
        return Optional.ofNullable(this.usePrivateIp);
    }

    @Import(name="usePublicIpStandardSku")
    private @Nullable Output<Boolean> usePublicIpStandardSku;

    public Optional<Output<Boolean>> usePublicIpStandardSku() {
        return Optional.ofNullable(this.usePublicIpStandardSku);
    }

    /**
     * Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format). Default `docker-machine-vnet` (string)
     * 
     */
    @Import(name="vnet")
    private @Nullable Output<String> vnet;

    /**
     * @return Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format). Default `docker-machine-vnet` (string)
     * 
     */
    public Optional<Output<String>> vnet() {
        return Optional.ofNullable(this.vnet);
    }

    private MachineConfigV2AzureConfigArgs() {}

    private MachineConfigV2AzureConfigArgs(MachineConfigV2AzureConfigArgs $) {
        this.acceleratedNetworking = $.acceleratedNetworking;
        this.availabilitySet = $.availabilitySet;
        this.availabilityZone = $.availabilityZone;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.customData = $.customData;
        this.diskSize = $.diskSize;
        this.dns = $.dns;
        this.dockerPort = $.dockerPort;
        this.environment = $.environment;
        this.faultDomainCount = $.faultDomainCount;
        this.image = $.image;
        this.location = $.location;
        this.managedDisks = $.managedDisks;
        this.noPublicIp = $.noPublicIp;
        this.nsg = $.nsg;
        this.openPorts = $.openPorts;
        this.privateAddressOnly = $.privateAddressOnly;
        this.privateIpAddress = $.privateIpAddress;
        this.resourceGroup = $.resourceGroup;
        this.size = $.size;
        this.sshUser = $.sshUser;
        this.staticPublicIp = $.staticPublicIp;
        this.storageType = $.storageType;
        this.subnet = $.subnet;
        this.subnetPrefix = $.subnetPrefix;
        this.subscriptionId = $.subscriptionId;
        this.tags = $.tags;
        this.tenantId = $.tenantId;
        this.updateDomainCount = $.updateDomainCount;
        this.usePrivateIp = $.usePrivateIp;
        this.usePublicIpStandardSku = $.usePublicIpStandardSku;
        this.vnet = $.vnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachineConfigV2AzureConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachineConfigV2AzureConfigArgs $;

        public Builder() {
            $ = new MachineConfigV2AzureConfigArgs();
        }

        public Builder(MachineConfigV2AzureConfigArgs defaults) {
            $ = new MachineConfigV2AzureConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder acceleratedNetworking(@Nullable Output<Boolean> acceleratedNetworking) {
            $.acceleratedNetworking = acceleratedNetworking;
            return this;
        }

        public Builder acceleratedNetworking(Boolean acceleratedNetworking) {
            return acceleratedNetworking(Output.of(acceleratedNetworking));
        }

        /**
         * @param availabilitySet Azure Availability Set to place the virtual machine into. Default `docker-machine` (string)
         * 
         * @return builder
         * 
         */
        public Builder availabilitySet(@Nullable Output<String> availabilitySet) {
            $.availabilitySet = availabilitySet;
            return this;
        }

        /**
         * @param availabilitySet Azure Availability Set to place the virtual machine into. Default `docker-machine` (string)
         * 
         * @return builder
         * 
         */
        public Builder availabilitySet(String availabilitySet) {
            return availabilitySet(Output.of(availabilitySet));
        }

        /**
         * @param availabilityZone OpenStack availability zone (string)
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone OpenStack availability zone (string)
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param clientId Azure Service Principal Account ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Azure Service Principal Account ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Azure Service Principal Account password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Azure Service Principal Account password. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param customData Path to file with custom-data (string)
         * 
         * @return builder
         * 
         */
        public Builder customData(@Nullable Output<String> customData) {
            $.customData = customData;
            return this;
        }

        /**
         * @param customData Path to file with custom-data (string)
         * 
         * @return builder
         * 
         */
        public Builder customData(String customData) {
            return customData(Output.of(customData));
        }

        /**
         * @param diskSize Disk size if using managed disk. Just for Rancher v2.3.x and above. Default `30` (string)
         * 
         * @return builder
         * 
         */
        public Builder diskSize(@Nullable Output<String> diskSize) {
            $.diskSize = diskSize;
            return this;
        }

        /**
         * @param diskSize Disk size if using managed disk. Just for Rancher v2.3.x and above. Default `30` (string)
         * 
         * @return builder
         * 
         */
        public Builder diskSize(String diskSize) {
            return diskSize(Output.of(diskSize));
        }

        /**
         * @param dns A unique DNS label for the public IP adddress (string)
         * 
         * @return builder
         * 
         */
        public Builder dns(@Nullable Output<String> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns A unique DNS label for the public IP adddress (string)
         * 
         * @return builder
         * 
         */
        public Builder dns(String dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param dockerPort Port number for Docker engine. Default `2376` (string)
         * 
         * @return builder
         * 
         */
        public Builder dockerPort(@Nullable Output<String> dockerPort) {
            $.dockerPort = dockerPort;
            return this;
        }

        /**
         * @param dockerPort Port number for Docker engine. Default `2376` (string)
         * 
         * @return builder
         * 
         */
        public Builder dockerPort(String dockerPort) {
            return dockerPort(Output.of(dockerPort));
        }

        /**
         * @param environment Azure environment (e.g. AzurePublicCloud, AzureChinaCloud). Default `AzurePublicCloud` (string)
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment Azure environment (e.g. AzurePublicCloud, AzureChinaCloud). Default `AzurePublicCloud` (string)
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param faultDomainCount Fault domain count to use for availability set. Default `3` (string)
         * 
         * @return builder
         * 
         */
        public Builder faultDomainCount(@Nullable Output<String> faultDomainCount) {
            $.faultDomainCount = faultDomainCount;
            return this;
        }

        /**
         * @param faultDomainCount Fault domain count to use for availability set. Default `3` (string)
         * 
         * @return builder
         * 
         */
        public Builder faultDomainCount(String faultDomainCount) {
            return faultDomainCount(Output.of(faultDomainCount));
        }

        /**
         * @param image Azure virtual machine OS image. Default `canonical:UbuntuServer:18.04-LTS:latest` (string)
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Azure virtual machine OS image. Default `canonical:UbuntuServer:18.04-LTS:latest` (string)
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param location Azure region to create the virtual machine. Default `westus` (string)
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Azure region to create the virtual machine. Default `westus` (string)
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managedDisks Configures VM and availability set for managed disks. Just for Rancher v2.3.x and above. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder managedDisks(@Nullable Output<Boolean> managedDisks) {
            $.managedDisks = managedDisks;
            return this;
        }

        /**
         * @param managedDisks Configures VM and availability set for managed disks. Just for Rancher v2.3.x and above. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder managedDisks(Boolean managedDisks) {
            return managedDisks(Output.of(managedDisks));
        }

        /**
         * @param noPublicIp Do not create a public IP address for the machine. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder noPublicIp(@Nullable Output<Boolean> noPublicIp) {
            $.noPublicIp = noPublicIp;
            return this;
        }

        /**
         * @param noPublicIp Do not create a public IP address for the machine. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder noPublicIp(Boolean noPublicIp) {
            return noPublicIp(Output.of(noPublicIp));
        }

        /**
         * @param nsg Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine). Default `docker-machine-nsg` (string)
         * 
         * @return builder
         * 
         */
        public Builder nsg(@Nullable Output<String> nsg) {
            $.nsg = nsg;
            return this;
        }

        /**
         * @param nsg Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine). Default `docker-machine-nsg` (string)
         * 
         * @return builder
         * 
         */
        public Builder nsg(String nsg) {
            return nsg(Output.of(nsg));
        }

        /**
         * @param openPorts Make the specified port number accessible from the Internet. (list)
         * 
         * @return builder
         * 
         */
        public Builder openPorts(@Nullable Output<List<String>> openPorts) {
            $.openPorts = openPorts;
            return this;
        }

        /**
         * @param openPorts Make the specified port number accessible from the Internet. (list)
         * 
         * @return builder
         * 
         */
        public Builder openPorts(List<String> openPorts) {
            return openPorts(Output.of(openPorts));
        }

        /**
         * @param openPorts Make the specified port number accessible from the Internet. (list)
         * 
         * @return builder
         * 
         */
        public Builder openPorts(String... openPorts) {
            return openPorts(List.of(openPorts));
        }

        /**
         * @param privateAddressOnly Only use a private IP address. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder privateAddressOnly(@Nullable Output<Boolean> privateAddressOnly) {
            $.privateAddressOnly = privateAddressOnly;
            return this;
        }

        /**
         * @param privateAddressOnly Only use a private IP address. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder privateAddressOnly(Boolean privateAddressOnly) {
            return privateAddressOnly(Output.of(privateAddressOnly));
        }

        /**
         * @param privateIpAddress Specify a static private IP address for the machine. (string)
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param privateIpAddress Specify a static private IP address for the machine. (string)
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            return privateIpAddress(Output.of(privateIpAddress));
        }

        /**
         * @param resourceGroup Azure Resource Group name (will be created if missing). Default `docker-machine` (string)
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(@Nullable Output<String> resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        /**
         * @param resourceGroup Azure Resource Group name (will be created if missing). Default `docker-machine` (string)
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(String resourceGroup) {
            return resourceGroup(Output.of(resourceGroup));
        }

        /**
         * @param size Size for Azure Virtual Machine. Default `Standard_A2` (string)
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<String> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size for Azure Virtual Machine. Default `Standard_A2` (string)
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Output.of(size));
        }

        /**
         * @param sshUser Set the name of the ssh user (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUser(@Nullable Output<String> sshUser) {
            $.sshUser = sshUser;
            return this;
        }

        /**
         * @param sshUser Set the name of the ssh user (string)
         * 
         * @return builder
         * 
         */
        public Builder sshUser(String sshUser) {
            return sshUser(Output.of(sshUser));
        }

        /**
         * @param staticPublicIp Assign a static public IP address to the machine. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder staticPublicIp(@Nullable Output<Boolean> staticPublicIp) {
            $.staticPublicIp = staticPublicIp;
            return this;
        }

        /**
         * @param staticPublicIp Assign a static public IP address to the machine. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder staticPublicIp(Boolean staticPublicIp) {
            return staticPublicIp(Output.of(staticPublicIp));
        }

        /**
         * @param storageType Type of Storage Account to host the OS Disk for the machine. Default `Standard_LRS` (string)
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType Type of Storage Account to host the OS Disk for the machine. Default `Standard_LRS` (string)
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param subnet Azure Subnet Name to be used within the Virtual Network. Default `docker-machine` (string)
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet Azure Subnet Name to be used within the Virtual Network. Default `docker-machine` (string)
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param subnetPrefix Private CIDR block to be used for the new subnet, should comply RFC 1918. Default `192.168.0.0/16` (string)
         * 
         * @return builder
         * 
         */
        public Builder subnetPrefix(@Nullable Output<String> subnetPrefix) {
            $.subnetPrefix = subnetPrefix;
            return this;
        }

        /**
         * @param subnetPrefix Private CIDR block to be used for the new subnet, should comply RFC 1918. Default `192.168.0.0/16` (string)
         * 
         * @return builder
         * 
         */
        public Builder subnetPrefix(String subnetPrefix) {
            return subnetPrefix(Output.of(subnetPrefix));
        }

        /**
         * @param subscriptionId Azure Subscription ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId Azure Subscription ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `rancher2.CloudCredential` from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param tags AWS Tags (e.g. key1,value1,key2,value2) (string)
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags AWS Tags (e.g. key1,value1,key2,value2) (string)
         * 
         * @return builder
         * 
         */
        public Builder tags(String tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tenantId Azure Tenant ID (string)
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Azure Tenant ID (string)
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param updateDomainCount Update domain count to use for availability set. Default `5` (string)
         * 
         * @return builder
         * 
         */
        public Builder updateDomainCount(@Nullable Output<String> updateDomainCount) {
            $.updateDomainCount = updateDomainCount;
            return this;
        }

        /**
         * @param updateDomainCount Update domain count to use for availability set. Default `5` (string)
         * 
         * @return builder
         * 
         */
        public Builder updateDomainCount(String updateDomainCount) {
            return updateDomainCount(Output.of(updateDomainCount));
        }

        /**
         * @param usePrivateIp Use private IP address of the machine to connect. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder usePrivateIp(@Nullable Output<Boolean> usePrivateIp) {
            $.usePrivateIp = usePrivateIp;
            return this;
        }

        /**
         * @param usePrivateIp Use private IP address of the machine to connect. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder usePrivateIp(Boolean usePrivateIp) {
            return usePrivateIp(Output.of(usePrivateIp));
        }

        public Builder usePublicIpStandardSku(@Nullable Output<Boolean> usePublicIpStandardSku) {
            $.usePublicIpStandardSku = usePublicIpStandardSku;
            return this;
        }

        public Builder usePublicIpStandardSku(Boolean usePublicIpStandardSku) {
            return usePublicIpStandardSku(Output.of(usePublicIpStandardSku));
        }

        /**
         * @param vnet Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format). Default `docker-machine-vnet` (string)
         * 
         * @return builder
         * 
         */
        public Builder vnet(@Nullable Output<String> vnet) {
            $.vnet = vnet;
            return this;
        }

        /**
         * @param vnet Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format). Default `docker-machine-vnet` (string)
         * 
         * @return builder
         * 
         */
        public Builder vnet(String vnet) {
            return vnet(Output.of(vnet));
        }

        public MachineConfigV2AzureConfigArgs build() {
            return $;
        }
    }

}
