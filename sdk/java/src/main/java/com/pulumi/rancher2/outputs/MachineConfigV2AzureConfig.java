// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MachineConfigV2AzureConfig {
    /**
     * @return Use Accelerated Networking when creating a network interface for the Azure VM
     * 
     */
    private @Nullable Boolean acceleratedNetworking;
    /**
     * @return Azure Availability Set to place the virtual machine into
     * 
     */
    private @Nullable String availabilitySet;
    /**
     * @return The Availability Zone that the Azure VM should be created in
     * 
     */
    private @Nullable String availabilityZone;
    /**
     * @return Azure Service Principal Account ID (optional, browser auth is used if not specified)
     * 
     */
    private @Nullable String clientId;
    /**
     * @return Azure Service Principal Account password (optional, browser auth is used if not specified)
     * 
     */
    private @Nullable String clientSecret;
    /**
     * @return Path to file with custom-data
     * 
     */
    private @Nullable String customData;
    /**
     * @return Disk size if using managed disk
     * 
     */
    private @Nullable String diskSize;
    /**
     * @return A unique DNS label for the public IP adddress
     * 
     */
    private @Nullable String dns;
    /**
     * @return Port number for Docker engine
     * 
     */
    private @Nullable String dockerPort;
    /**
     * @return Azure environment (e.g. AzurePublicCloud, AzureChinaCloud)
     * 
     */
    private @Nullable String environment;
    /**
     * @return Fault domain count to use for availability set
     * 
     */
    private @Nullable String faultDomainCount;
    /**
     * @return Azure virtual machine OS image
     * 
     */
    private @Nullable String image;
    /**
     * @return Azure region to create the virtual machine
     * 
     */
    private @Nullable String location;
    /**
     * @return Configures VM and availability set for managed disks
     * 
     */
    private @Nullable Boolean managedDisks;
    /**
     * @return Do not create a public IP address for the machine
     * 
     */
    private @Nullable Boolean noPublicIp;
    /**
     * @return Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine)
     * 
     */
    private @Nullable String nsg;
    /**
     * @return Make the specified port number accessible from the Internet
     * 
     */
    private @Nullable List<String> openPorts;
    /**
     * @return Only use a private IP address
     * 
     */
    private @Nullable Boolean privateAddressOnly;
    /**
     * @return Specify a static private IP address for the machine
     * 
     */
    private @Nullable String privateIpAddress;
    /**
     * @return Azure Resource Group name (will be created if missing)
     * 
     */
    private @Nullable String resourceGroup;
    /**
     * @return Size for Azure Virtual Machine
     * 
     */
    private @Nullable String size;
    /**
     * @return Username for SSH login
     * 
     */
    private @Nullable String sshUser;
    /**
     * @return Assign a static public IP address to the machine
     * 
     */
    private @Nullable Boolean staticPublicIp;
    /**
     * @return Type of Storage Account to host the OS Disk for the machine
     * 
     */
    private @Nullable String storageType;
    /**
     * @return Azure Subnet Name to be used within the Virtual Network
     * 
     */
    private @Nullable String subnet;
    /**
     * @return Private CIDR block to be used for the new subnet, should comply RFC 1918
     * 
     */
    private @Nullable String subnetPrefix;
    /**
     * @return Azure Subscription ID
     * 
     */
    private @Nullable String subscriptionId;
    /**
     * @return Tags to be applied to the Azure VM instance (e.g. key1,value1,key2,value2)
     * 
     */
    private @Nullable String tags;
    /**
     * @return Azure Tenant ID
     * 
     */
    private @Nullable String tenantId;
    /**
     * @return Update domain count to use for availability set
     * 
     */
    private @Nullable String updateDomainCount;
    /**
     * @return Use private IP address of the machine to connect
     * 
     */
    private @Nullable Boolean usePrivateIp;
    /**
     * @return Use the standard SKU when creating a Public IP for the Azure VM instance
     * 
     */
    private @Nullable Boolean usePublicIpStandardSku;
    /**
     * @return Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format)
     * 
     */
    private @Nullable String vnet;

    private MachineConfigV2AzureConfig() {}
    /**
     * @return Use Accelerated Networking when creating a network interface for the Azure VM
     * 
     */
    public Optional<Boolean> acceleratedNetworking() {
        return Optional.ofNullable(this.acceleratedNetworking);
    }
    /**
     * @return Azure Availability Set to place the virtual machine into
     * 
     */
    public Optional<String> availabilitySet() {
        return Optional.ofNullable(this.availabilitySet);
    }
    /**
     * @return The Availability Zone that the Azure VM should be created in
     * 
     */
    public Optional<String> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }
    /**
     * @return Azure Service Principal Account ID (optional, browser auth is used if not specified)
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    /**
     * @return Azure Service Principal Account password (optional, browser auth is used if not specified)
     * 
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    /**
     * @return Path to file with custom-data
     * 
     */
    public Optional<String> customData() {
        return Optional.ofNullable(this.customData);
    }
    /**
     * @return Disk size if using managed disk
     * 
     */
    public Optional<String> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }
    /**
     * @return A unique DNS label for the public IP adddress
     * 
     */
    public Optional<String> dns() {
        return Optional.ofNullable(this.dns);
    }
    /**
     * @return Port number for Docker engine
     * 
     */
    public Optional<String> dockerPort() {
        return Optional.ofNullable(this.dockerPort);
    }
    /**
     * @return Azure environment (e.g. AzurePublicCloud, AzureChinaCloud)
     * 
     */
    public Optional<String> environment() {
        return Optional.ofNullable(this.environment);
    }
    /**
     * @return Fault domain count to use for availability set
     * 
     */
    public Optional<String> faultDomainCount() {
        return Optional.ofNullable(this.faultDomainCount);
    }
    /**
     * @return Azure virtual machine OS image
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }
    /**
     * @return Azure region to create the virtual machine
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Configures VM and availability set for managed disks
     * 
     */
    public Optional<Boolean> managedDisks() {
        return Optional.ofNullable(this.managedDisks);
    }
    /**
     * @return Do not create a public IP address for the machine
     * 
     */
    public Optional<Boolean> noPublicIp() {
        return Optional.ofNullable(this.noPublicIp);
    }
    /**
     * @return Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine)
     * 
     */
    public Optional<String> nsg() {
        return Optional.ofNullable(this.nsg);
    }
    /**
     * @return Make the specified port number accessible from the Internet
     * 
     */
    public List<String> openPorts() {
        return this.openPorts == null ? List.of() : this.openPorts;
    }
    /**
     * @return Only use a private IP address
     * 
     */
    public Optional<Boolean> privateAddressOnly() {
        return Optional.ofNullable(this.privateAddressOnly);
    }
    /**
     * @return Specify a static private IP address for the machine
     * 
     */
    public Optional<String> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }
    /**
     * @return Azure Resource Group name (will be created if missing)
     * 
     */
    public Optional<String> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }
    /**
     * @return Size for Azure Virtual Machine
     * 
     */
    public Optional<String> size() {
        return Optional.ofNullable(this.size);
    }
    /**
     * @return Username for SSH login
     * 
     */
    public Optional<String> sshUser() {
        return Optional.ofNullable(this.sshUser);
    }
    /**
     * @return Assign a static public IP address to the machine
     * 
     */
    public Optional<Boolean> staticPublicIp() {
        return Optional.ofNullable(this.staticPublicIp);
    }
    /**
     * @return Type of Storage Account to host the OS Disk for the machine
     * 
     */
    public Optional<String> storageType() {
        return Optional.ofNullable(this.storageType);
    }
    /**
     * @return Azure Subnet Name to be used within the Virtual Network
     * 
     */
    public Optional<String> subnet() {
        return Optional.ofNullable(this.subnet);
    }
    /**
     * @return Private CIDR block to be used for the new subnet, should comply RFC 1918
     * 
     */
    public Optional<String> subnetPrefix() {
        return Optional.ofNullable(this.subnetPrefix);
    }
    /**
     * @return Azure Subscription ID
     * 
     */
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }
    /**
     * @return Tags to be applied to the Azure VM instance (e.g. key1,value1,key2,value2)
     * 
     */
    public Optional<String> tags() {
        return Optional.ofNullable(this.tags);
    }
    /**
     * @return Azure Tenant ID
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    /**
     * @return Update domain count to use for availability set
     * 
     */
    public Optional<String> updateDomainCount() {
        return Optional.ofNullable(this.updateDomainCount);
    }
    /**
     * @return Use private IP address of the machine to connect
     * 
     */
    public Optional<Boolean> usePrivateIp() {
        return Optional.ofNullable(this.usePrivateIp);
    }
    /**
     * @return Use the standard SKU when creating a Public IP for the Azure VM instance
     * 
     */
    public Optional<Boolean> usePublicIpStandardSku() {
        return Optional.ofNullable(this.usePublicIpStandardSku);
    }
    /**
     * @return Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format)
     * 
     */
    public Optional<String> vnet() {
        return Optional.ofNullable(this.vnet);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MachineConfigV2AzureConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean acceleratedNetworking;
        private @Nullable String availabilitySet;
        private @Nullable String availabilityZone;
        private @Nullable String clientId;
        private @Nullable String clientSecret;
        private @Nullable String customData;
        private @Nullable String diskSize;
        private @Nullable String dns;
        private @Nullable String dockerPort;
        private @Nullable String environment;
        private @Nullable String faultDomainCount;
        private @Nullable String image;
        private @Nullable String location;
        private @Nullable Boolean managedDisks;
        private @Nullable Boolean noPublicIp;
        private @Nullable String nsg;
        private @Nullable List<String> openPorts;
        private @Nullable Boolean privateAddressOnly;
        private @Nullable String privateIpAddress;
        private @Nullable String resourceGroup;
        private @Nullable String size;
        private @Nullable String sshUser;
        private @Nullable Boolean staticPublicIp;
        private @Nullable String storageType;
        private @Nullable String subnet;
        private @Nullable String subnetPrefix;
        private @Nullable String subscriptionId;
        private @Nullable String tags;
        private @Nullable String tenantId;
        private @Nullable String updateDomainCount;
        private @Nullable Boolean usePrivateIp;
        private @Nullable Boolean usePublicIpStandardSku;
        private @Nullable String vnet;
        public Builder() {}
        public Builder(MachineConfigV2AzureConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceleratedNetworking = defaults.acceleratedNetworking;
    	      this.availabilitySet = defaults.availabilitySet;
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.customData = defaults.customData;
    	      this.diskSize = defaults.diskSize;
    	      this.dns = defaults.dns;
    	      this.dockerPort = defaults.dockerPort;
    	      this.environment = defaults.environment;
    	      this.faultDomainCount = defaults.faultDomainCount;
    	      this.image = defaults.image;
    	      this.location = defaults.location;
    	      this.managedDisks = defaults.managedDisks;
    	      this.noPublicIp = defaults.noPublicIp;
    	      this.nsg = defaults.nsg;
    	      this.openPorts = defaults.openPorts;
    	      this.privateAddressOnly = defaults.privateAddressOnly;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.size = defaults.size;
    	      this.sshUser = defaults.sshUser;
    	      this.staticPublicIp = defaults.staticPublicIp;
    	      this.storageType = defaults.storageType;
    	      this.subnet = defaults.subnet;
    	      this.subnetPrefix = defaults.subnetPrefix;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tags = defaults.tags;
    	      this.tenantId = defaults.tenantId;
    	      this.updateDomainCount = defaults.updateDomainCount;
    	      this.usePrivateIp = defaults.usePrivateIp;
    	      this.usePublicIpStandardSku = defaults.usePublicIpStandardSku;
    	      this.vnet = defaults.vnet;
        }

        @CustomType.Setter
        public Builder acceleratedNetworking(@Nullable Boolean acceleratedNetworking) {

            this.acceleratedNetworking = acceleratedNetworking;
            return this;
        }
        @CustomType.Setter
        public Builder availabilitySet(@Nullable String availabilitySet) {

            this.availabilitySet = availabilitySet;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZone(@Nullable String availabilityZone) {

            this.availabilityZone = availabilityZone;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {

            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {

            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder customData(@Nullable String customData) {

            this.customData = customData;
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(@Nullable String diskSize) {

            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder dns(@Nullable String dns) {

            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder dockerPort(@Nullable String dockerPort) {

            this.dockerPort = dockerPort;
            return this;
        }
        @CustomType.Setter
        public Builder environment(@Nullable String environment) {

            this.environment = environment;
            return this;
        }
        @CustomType.Setter
        public Builder faultDomainCount(@Nullable String faultDomainCount) {

            this.faultDomainCount = faultDomainCount;
            return this;
        }
        @CustomType.Setter
        public Builder image(@Nullable String image) {

            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {

            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder managedDisks(@Nullable Boolean managedDisks) {

            this.managedDisks = managedDisks;
            return this;
        }
        @CustomType.Setter
        public Builder noPublicIp(@Nullable Boolean noPublicIp) {

            this.noPublicIp = noPublicIp;
            return this;
        }
        @CustomType.Setter
        public Builder nsg(@Nullable String nsg) {

            this.nsg = nsg;
            return this;
        }
        @CustomType.Setter
        public Builder openPorts(@Nullable List<String> openPorts) {

            this.openPorts = openPorts;
            return this;
        }
        public Builder openPorts(String... openPorts) {
            return openPorts(List.of(openPorts));
        }
        @CustomType.Setter
        public Builder privateAddressOnly(@Nullable Boolean privateAddressOnly) {

            this.privateAddressOnly = privateAddressOnly;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(@Nullable String privateIpAddress) {

            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroup(@Nullable String resourceGroup) {

            this.resourceGroup = resourceGroup;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable String size) {

            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder sshUser(@Nullable String sshUser) {

            this.sshUser = sshUser;
            return this;
        }
        @CustomType.Setter
        public Builder staticPublicIp(@Nullable Boolean staticPublicIp) {

            this.staticPublicIp = staticPublicIp;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(@Nullable String storageType) {

            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder subnet(@Nullable String subnet) {

            this.subnet = subnet;
            return this;
        }
        @CustomType.Setter
        public Builder subnetPrefix(@Nullable String subnetPrefix) {

            this.subnetPrefix = subnetPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(@Nullable String subscriptionId) {

            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable String tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {

            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder updateDomainCount(@Nullable String updateDomainCount) {

            this.updateDomainCount = updateDomainCount;
            return this;
        }
        @CustomType.Setter
        public Builder usePrivateIp(@Nullable Boolean usePrivateIp) {

            this.usePrivateIp = usePrivateIp;
            return this;
        }
        @CustomType.Setter
        public Builder usePublicIpStandardSku(@Nullable Boolean usePublicIpStandardSku) {

            this.usePublicIpStandardSku = usePublicIpStandardSku;
            return this;
        }
        @CustomType.Setter
        public Builder vnet(@Nullable String vnet) {

            this.vnet = vnet;
            return this;
        }
        public MachineConfigV2AzureConfig build() {
            final var _resultValue = new MachineConfigV2AzureConfig();
            _resultValue.acceleratedNetworking = acceleratedNetworking;
            _resultValue.availabilitySet = availabilitySet;
            _resultValue.availabilityZone = availabilityZone;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.customData = customData;
            _resultValue.diskSize = diskSize;
            _resultValue.dns = dns;
            _resultValue.dockerPort = dockerPort;
            _resultValue.environment = environment;
            _resultValue.faultDomainCount = faultDomainCount;
            _resultValue.image = image;
            _resultValue.location = location;
            _resultValue.managedDisks = managedDisks;
            _resultValue.noPublicIp = noPublicIp;
            _resultValue.nsg = nsg;
            _resultValue.openPorts = openPorts;
            _resultValue.privateAddressOnly = privateAddressOnly;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.resourceGroup = resourceGroup;
            _resultValue.size = size;
            _resultValue.sshUser = sshUser;
            _resultValue.staticPublicIp = staticPublicIp;
            _resultValue.storageType = storageType;
            _resultValue.subnet = subnet;
            _resultValue.subnetPrefix = subnetPrefix;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.tags = tags;
            _resultValue.tenantId = tenantId;
            _resultValue.updateDomainCount = updateDomainCount;
            _resultValue.usePrivateIp = usePrivateIp;
            _resultValue.usePublicIpStandardSku = usePublicIpStandardSku;
            _resultValue.vnet = vnet;
            return _resultValue;
        }
    }
}
