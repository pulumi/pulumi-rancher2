// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rancher2.inputs.ClusterRkeConfigIngressTolerationArgs;
import com.pulumi.rancher2.inputs.ClusterRkeConfigIngressUpdateStrategyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterRkeConfigIngressArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterRkeConfigIngressArgs Empty = new ClusterRkeConfigIngressArgs();

    @Import(name="defaultBackend")
    private @Nullable Output<Boolean> defaultBackend;

    public Optional<Output<Boolean>> defaultBackend() {
        return Optional.ofNullable(this.defaultBackend);
    }

    @Import(name="dnsPolicy")
    private @Nullable Output<String> dnsPolicy;

    public Optional<Output<String>> dnsPolicy() {
        return Optional.ofNullable(this.dnsPolicy);
    }

    @Import(name="extraArgs")
    private @Nullable Output<Map<String,Object>> extraArgs;

    public Optional<Output<Map<String,Object>>> extraArgs() {
        return Optional.ofNullable(this.extraArgs);
    }

    @Import(name="httpPort")
    private @Nullable Output<Integer> httpPort;

    public Optional<Output<Integer>> httpPort() {
        return Optional.ofNullable(this.httpPort);
    }

    @Import(name="httpsPort")
    private @Nullable Output<Integer> httpsPort;

    public Optional<Output<Integer>> httpsPort() {
        return Optional.ofNullable(this.httpsPort);
    }

    @Import(name="networkMode")
    private @Nullable Output<String> networkMode;

    public Optional<Output<String>> networkMode() {
        return Optional.ofNullable(this.networkMode);
    }

    @Import(name="nodeSelector")
    private @Nullable Output<Map<String,Object>> nodeSelector;

    public Optional<Output<Map<String,Object>>> nodeSelector() {
        return Optional.ofNullable(this.nodeSelector);
    }

    @Import(name="options")
    private @Nullable Output<Map<String,Object>> options;

    public Optional<Output<Map<String,Object>>> options() {
        return Optional.ofNullable(this.options);
    }

    @Import(name="provider")
    private @Nullable Output<String> provider;

    public Optional<Output<String>> provider() {
        return Optional.ofNullable(this.provider);
    }

    /**
     * Ingress add-on tolerations
     * 
     */
    @Import(name="tolerations")
    private @Nullable Output<List<ClusterRkeConfigIngressTolerationArgs>> tolerations;

    /**
     * @return Ingress add-on tolerations
     * 
     */
    public Optional<Output<List<ClusterRkeConfigIngressTolerationArgs>>> tolerations() {
        return Optional.ofNullable(this.tolerations);
    }

    /**
     * Update daemon set strategy
     * 
     */
    @Import(name="updateStrategy")
    private @Nullable Output<ClusterRkeConfigIngressUpdateStrategyArgs> updateStrategy;

    /**
     * @return Update daemon set strategy
     * 
     */
    public Optional<Output<ClusterRkeConfigIngressUpdateStrategyArgs>> updateStrategy() {
        return Optional.ofNullable(this.updateStrategy);
    }

    private ClusterRkeConfigIngressArgs() {}

    private ClusterRkeConfigIngressArgs(ClusterRkeConfigIngressArgs $) {
        this.defaultBackend = $.defaultBackend;
        this.dnsPolicy = $.dnsPolicy;
        this.extraArgs = $.extraArgs;
        this.httpPort = $.httpPort;
        this.httpsPort = $.httpsPort;
        this.networkMode = $.networkMode;
        this.nodeSelector = $.nodeSelector;
        this.options = $.options;
        this.provider = $.provider;
        this.tolerations = $.tolerations;
        this.updateStrategy = $.updateStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterRkeConfigIngressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterRkeConfigIngressArgs $;

        public Builder() {
            $ = new ClusterRkeConfigIngressArgs();
        }

        public Builder(ClusterRkeConfigIngressArgs defaults) {
            $ = new ClusterRkeConfigIngressArgs(Objects.requireNonNull(defaults));
        }

        public Builder defaultBackend(@Nullable Output<Boolean> defaultBackend) {
            $.defaultBackend = defaultBackend;
            return this;
        }

        public Builder defaultBackend(Boolean defaultBackend) {
            return defaultBackend(Output.of(defaultBackend));
        }

        public Builder dnsPolicy(@Nullable Output<String> dnsPolicy) {
            $.dnsPolicy = dnsPolicy;
            return this;
        }

        public Builder dnsPolicy(String dnsPolicy) {
            return dnsPolicy(Output.of(dnsPolicy));
        }

        public Builder extraArgs(@Nullable Output<Map<String,Object>> extraArgs) {
            $.extraArgs = extraArgs;
            return this;
        }

        public Builder extraArgs(Map<String,Object> extraArgs) {
            return extraArgs(Output.of(extraArgs));
        }

        public Builder httpPort(@Nullable Output<Integer> httpPort) {
            $.httpPort = httpPort;
            return this;
        }

        public Builder httpPort(Integer httpPort) {
            return httpPort(Output.of(httpPort));
        }

        public Builder httpsPort(@Nullable Output<Integer> httpsPort) {
            $.httpsPort = httpsPort;
            return this;
        }

        public Builder httpsPort(Integer httpsPort) {
            return httpsPort(Output.of(httpsPort));
        }

        public Builder networkMode(@Nullable Output<String> networkMode) {
            $.networkMode = networkMode;
            return this;
        }

        public Builder networkMode(String networkMode) {
            return networkMode(Output.of(networkMode));
        }

        public Builder nodeSelector(@Nullable Output<Map<String,Object>> nodeSelector) {
            $.nodeSelector = nodeSelector;
            return this;
        }

        public Builder nodeSelector(Map<String,Object> nodeSelector) {
            return nodeSelector(Output.of(nodeSelector));
        }

        public Builder options(@Nullable Output<Map<String,Object>> options) {
            $.options = options;
            return this;
        }

        public Builder options(Map<String,Object> options) {
            return options(Output.of(options));
        }

        public Builder provider(@Nullable Output<String> provider) {
            $.provider = provider;
            return this;
        }

        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param tolerations Ingress add-on tolerations
         * 
         * @return builder
         * 
         */
        public Builder tolerations(@Nullable Output<List<ClusterRkeConfigIngressTolerationArgs>> tolerations) {
            $.tolerations = tolerations;
            return this;
        }

        /**
         * @param tolerations Ingress add-on tolerations
         * 
         * @return builder
         * 
         */
        public Builder tolerations(List<ClusterRkeConfigIngressTolerationArgs> tolerations) {
            return tolerations(Output.of(tolerations));
        }

        /**
         * @param tolerations Ingress add-on tolerations
         * 
         * @return builder
         * 
         */
        public Builder tolerations(ClusterRkeConfigIngressTolerationArgs... tolerations) {
            return tolerations(List.of(tolerations));
        }

        /**
         * @param updateStrategy Update daemon set strategy
         * 
         * @return builder
         * 
         */
        public Builder updateStrategy(@Nullable Output<ClusterRkeConfigIngressUpdateStrategyArgs> updateStrategy) {
            $.updateStrategy = updateStrategy;
            return this;
        }

        /**
         * @param updateStrategy Update daemon set strategy
         * 
         * @return builder
         * 
         */
        public Builder updateStrategy(ClusterRkeConfigIngressUpdateStrategyArgs updateStrategy) {
            return updateStrategy(Output.of(updateStrategy));
        }

        public ClusterRkeConfigIngressArgs build() {
            return $;
        }
    }

}
