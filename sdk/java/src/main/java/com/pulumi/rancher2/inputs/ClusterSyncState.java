// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rancher2.inputs.ClusterSyncNodeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterSyncState extends com.pulumi.resources.ResourceArgs {

    public static final ClusterSyncState Empty = new ClusterSyncState();

    /**
     * The Cluster ID of the node (string).
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The Cluster ID of the node (string).
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * (Computed) Default project ID for the cluster sync (string)
     * 
     */
    @Import(name="defaultProjectId")
    private @Nullable Output<String> defaultProjectId;

    /**
     * @return (Computed) Default project ID for the cluster sync (string)
     * 
     */
    public Optional<Output<String>> defaultProjectId() {
        return Optional.ofNullable(this.defaultProjectId);
    }

    /**
     * (Computed/Sensitive) Kube Config generated for the cluster sync (string)
     * 
     */
    @Import(name="kubeConfig")
    private @Nullable Output<String> kubeConfig;

    /**
     * @return (Computed/Sensitive) Kube Config generated for the cluster sync (string)
     * 
     */
    public Optional<Output<String>> kubeConfig() {
        return Optional.ofNullable(this.kubeConfig);
    }

    /**
     * The node pool IDs used by the cluster id (list)
     * 
     */
    @Import(name="nodePoolIds")
    private @Nullable Output<List<String>> nodePoolIds;

    /**
     * @return The node pool IDs used by the cluster id (list)
     * 
     */
    public Optional<Output<List<String>>> nodePoolIds() {
        return Optional.ofNullable(this.nodePoolIds);
    }

    /**
     * (Computed) The cluster nodes (list).
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<ClusterSyncNodeArgs>> nodes;

    /**
     * @return (Computed) The cluster nodes (list).
     * 
     */
    public Optional<Output<List<ClusterSyncNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
     * 
     */
    @Import(name="stateConfirm")
    private @Nullable Output<Integer> stateConfirm;

    /**
     * @return Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
     * 
     */
    public Optional<Output<Integer>> stateConfirm() {
        return Optional.ofNullable(this.stateConfirm);
    }

    @Import(name="synced")
    private @Nullable Output<Boolean> synced;

    public Optional<Output<Boolean>> synced() {
        return Optional.ofNullable(this.synced);
    }

    /**
     * (Computed) System project ID for the cluster sync (string)
     * 
     */
    @Import(name="systemProjectId")
    private @Nullable Output<String> systemProjectId;

    /**
     * @return (Computed) System project ID for the cluster sync (string)
     * 
     */
    public Optional<Output<String>> systemProjectId() {
        return Optional.ofNullable(this.systemProjectId);
    }

    /**
     * Wait until alerting is up and running. Default: `false` (bool)
     * 
     */
    @Import(name="waitAlerting")
    private @Nullable Output<Boolean> waitAlerting;

    /**
     * @return Wait until alerting is up and running. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> waitAlerting() {
        return Optional.ofNullable(this.waitAlerting);
    }

    /**
     * Wait until all catalogs are downloaded and active. Default: `false` (bool)
     * 
     */
    @Import(name="waitCatalogs")
    private @Nullable Output<Boolean> waitCatalogs;

    /**
     * @return Wait until all catalogs are downloaded and active. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> waitCatalogs() {
        return Optional.ofNullable(this.waitCatalogs);
    }

    /**
     * Wait until monitoring is up and running. Default: `false` (bool)
     * 
     */
    @Import(name="waitMonitoring")
    private @Nullable Output<Boolean> waitMonitoring;

    /**
     * @return Wait until monitoring is up and running. Default: `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> waitMonitoring() {
        return Optional.ofNullable(this.waitMonitoring);
    }

    private ClusterSyncState() {}

    private ClusterSyncState(ClusterSyncState $) {
        this.clusterId = $.clusterId;
        this.defaultProjectId = $.defaultProjectId;
        this.kubeConfig = $.kubeConfig;
        this.nodePoolIds = $.nodePoolIds;
        this.nodes = $.nodes;
        this.stateConfirm = $.stateConfirm;
        this.synced = $.synced;
        this.systemProjectId = $.systemProjectId;
        this.waitAlerting = $.waitAlerting;
        this.waitCatalogs = $.waitCatalogs;
        this.waitMonitoring = $.waitMonitoring;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterSyncState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterSyncState $;

        public Builder() {
            $ = new ClusterSyncState();
        }

        public Builder(ClusterSyncState defaults) {
            $ = new ClusterSyncState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The Cluster ID of the node (string).
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The Cluster ID of the node (string).
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param defaultProjectId (Computed) Default project ID for the cluster sync (string)
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectId(@Nullable Output<String> defaultProjectId) {
            $.defaultProjectId = defaultProjectId;
            return this;
        }

        /**
         * @param defaultProjectId (Computed) Default project ID for the cluster sync (string)
         * 
         * @return builder
         * 
         */
        public Builder defaultProjectId(String defaultProjectId) {
            return defaultProjectId(Output.of(defaultProjectId));
        }

        /**
         * @param kubeConfig (Computed/Sensitive) Kube Config generated for the cluster sync (string)
         * 
         * @return builder
         * 
         */
        public Builder kubeConfig(@Nullable Output<String> kubeConfig) {
            $.kubeConfig = kubeConfig;
            return this;
        }

        /**
         * @param kubeConfig (Computed/Sensitive) Kube Config generated for the cluster sync (string)
         * 
         * @return builder
         * 
         */
        public Builder kubeConfig(String kubeConfig) {
            return kubeConfig(Output.of(kubeConfig));
        }

        /**
         * @param nodePoolIds The node pool IDs used by the cluster id (list)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolIds(@Nullable Output<List<String>> nodePoolIds) {
            $.nodePoolIds = nodePoolIds;
            return this;
        }

        /**
         * @param nodePoolIds The node pool IDs used by the cluster id (list)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolIds(List<String> nodePoolIds) {
            return nodePoolIds(Output.of(nodePoolIds));
        }

        /**
         * @param nodePoolIds The node pool IDs used by the cluster id (list)
         * 
         * @return builder
         * 
         */
        public Builder nodePoolIds(String... nodePoolIds) {
            return nodePoolIds(List.of(nodePoolIds));
        }

        /**
         * @param nodes (Computed) The cluster nodes (list).
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<ClusterSyncNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes (Computed) The cluster nodes (list).
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<ClusterSyncNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes (Computed) The cluster nodes (list).
         * 
         * @return builder
         * 
         */
        public Builder nodes(ClusterSyncNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param stateConfirm Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
         * 
         * @return builder
         * 
         */
        public Builder stateConfirm(@Nullable Output<Integer> stateConfirm) {
            $.stateConfirm = stateConfirm;
            return this;
        }

        /**
         * @param stateConfirm Wait until active status is confirmed a number of times (wait interval of 5s). Default: `1` means no confirmation (int)
         * 
         * @return builder
         * 
         */
        public Builder stateConfirm(Integer stateConfirm) {
            return stateConfirm(Output.of(stateConfirm));
        }

        public Builder synced(@Nullable Output<Boolean> synced) {
            $.synced = synced;
            return this;
        }

        public Builder synced(Boolean synced) {
            return synced(Output.of(synced));
        }

        /**
         * @param systemProjectId (Computed) System project ID for the cluster sync (string)
         * 
         * @return builder
         * 
         */
        public Builder systemProjectId(@Nullable Output<String> systemProjectId) {
            $.systemProjectId = systemProjectId;
            return this;
        }

        /**
         * @param systemProjectId (Computed) System project ID for the cluster sync (string)
         * 
         * @return builder
         * 
         */
        public Builder systemProjectId(String systemProjectId) {
            return systemProjectId(Output.of(systemProjectId));
        }

        /**
         * @param waitAlerting Wait until alerting is up and running. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitAlerting(@Nullable Output<Boolean> waitAlerting) {
            $.waitAlerting = waitAlerting;
            return this;
        }

        /**
         * @param waitAlerting Wait until alerting is up and running. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitAlerting(Boolean waitAlerting) {
            return waitAlerting(Output.of(waitAlerting));
        }

        /**
         * @param waitCatalogs Wait until all catalogs are downloaded and active. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitCatalogs(@Nullable Output<Boolean> waitCatalogs) {
            $.waitCatalogs = waitCatalogs;
            return this;
        }

        /**
         * @param waitCatalogs Wait until all catalogs are downloaded and active. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitCatalogs(Boolean waitCatalogs) {
            return waitCatalogs(Output.of(waitCatalogs));
        }

        /**
         * @param waitMonitoring Wait until monitoring is up and running. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitMonitoring(@Nullable Output<Boolean> waitMonitoring) {
            $.waitMonitoring = waitMonitoring;
            return this;
        }

        /**
         * @param waitMonitoring Wait until monitoring is up and running. Default: `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder waitMonitoring(Boolean waitMonitoring) {
            return waitMonitoring(Output.of(waitMonitoring));
        }

        public ClusterSyncState build() {
            return $;
        }
    }

}
