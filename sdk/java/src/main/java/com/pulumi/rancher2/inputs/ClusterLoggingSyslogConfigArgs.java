// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterLoggingSyslogConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterLoggingSyslogConfigArgs Empty = new ClusterLoggingSyslogConfigArgs();

    /**
     * SSL certificate for the syslog service (string)
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return SSL certificate for the syslog service (string)
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * SSL client certificate for the syslog service (string)
     * 
     */
    @Import(name="clientCert")
    private @Nullable Output<String> clientCert;

    /**
     * @return SSL client certificate for the syslog service (string)
     * 
     */
    public Optional<Output<String>> clientCert() {
        return Optional.ofNullable(this.clientCert);
    }

    /**
     * SSL client key for the syslog service (string)
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    /**
     * @return SSL client key for the syslog service (string)
     * 
     */
    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    /**
     * Enable TLS for the syslog service. Default `false` (bool)
     * 
     */
    @Import(name="enableTls")
    private @Nullable Output<Boolean> enableTls;

    /**
     * @return Enable TLS for the syslog service. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> enableTls() {
        return Optional.ofNullable(this.enableTls);
    }

    /**
     * Endpoint of the syslog service (string)
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    /**
     * @return Endpoint of the syslog service (string)
     * 
     */
    public Output<String> endpoint() {
        return this.endpoint;
    }

    /**
     * Program for the syslog service (string)
     * 
     */
    @Import(name="program")
    private @Nullable Output<String> program;

    /**
     * @return Program for the syslog service (string)
     * 
     */
    public Optional<Output<String>> program() {
        return Optional.ofNullable(this.program);
    }

    /**
     * Protocol for the syslog service. `tcp` and `udp` are supported. Default: `udp` (string)
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Protocol for the syslog service. `tcp` and `udp` are supported. Default: `udp` (string)
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Date format for the syslog logs. `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info` and `debug` are supported. Default: `notice` (string)
     * 
     */
    @Import(name="severity")
    private @Nullable Output<String> severity;

    /**
     * @return Date format for the syslog logs. `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info` and `debug` are supported. Default: `notice` (string)
     * 
     */
    public Optional<Output<String>> severity() {
        return Optional.ofNullable(this.severity);
    }

    /**
     * SSL verify for the syslog service (bool)
     * 
     */
    @Import(name="sslVerify")
    private @Nullable Output<Boolean> sslVerify;

    /**
     * @return SSL verify for the syslog service (bool)
     * 
     */
    public Optional<Output<Boolean>> sslVerify() {
        return Optional.ofNullable(this.sslVerify);
    }

    /**
     * Token for the syslog service (string)
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Token for the syslog service (string)
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private ClusterLoggingSyslogConfigArgs() {}

    private ClusterLoggingSyslogConfigArgs(ClusterLoggingSyslogConfigArgs $) {
        this.certificate = $.certificate;
        this.clientCert = $.clientCert;
        this.clientKey = $.clientKey;
        this.enableTls = $.enableTls;
        this.endpoint = $.endpoint;
        this.program = $.program;
        this.protocol = $.protocol;
        this.severity = $.severity;
        this.sslVerify = $.sslVerify;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterLoggingSyslogConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterLoggingSyslogConfigArgs $;

        public Builder() {
            $ = new ClusterLoggingSyslogConfigArgs();
        }

        public Builder(ClusterLoggingSyslogConfigArgs defaults) {
            $ = new ClusterLoggingSyslogConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate SSL certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate SSL certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param clientCert SSL client certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientCert(@Nullable Output<String> clientCert) {
            $.clientCert = clientCert;
            return this;
        }

        /**
         * @param clientCert SSL client certificate for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientCert(String clientCert) {
            return clientCert(Output.of(clientCert));
        }

        /**
         * @param clientKey SSL client key for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey SSL client key for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        /**
         * @param enableTls Enable TLS for the syslog service. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableTls(@Nullable Output<Boolean> enableTls) {
            $.enableTls = enableTls;
            return this;
        }

        /**
         * @param enableTls Enable TLS for the syslog service. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder enableTls(Boolean enableTls) {
            return enableTls(Output.of(enableTls));
        }

        /**
         * @param endpoint Endpoint of the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint Endpoint of the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param program Program for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder program(@Nullable Output<String> program) {
            $.program = program;
            return this;
        }

        /**
         * @param program Program for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder program(String program) {
            return program(Output.of(program));
        }

        /**
         * @param protocol Protocol for the syslog service. `tcp` and `udp` are supported. Default: `udp` (string)
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol for the syslog service. `tcp` and `udp` are supported. Default: `udp` (string)
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param severity Date format for the syslog logs. `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info` and `debug` are supported. Default: `notice` (string)
         * 
         * @return builder
         * 
         */
        public Builder severity(@Nullable Output<String> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity Date format for the syslog logs. `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info` and `debug` are supported. Default: `notice` (string)
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param sslVerify SSL verify for the syslog service (bool)
         * 
         * @return builder
         * 
         */
        public Builder sslVerify(@Nullable Output<Boolean> sslVerify) {
            $.sslVerify = sslVerify;
            return this;
        }

        /**
         * @param sslVerify SSL verify for the syslog service (bool)
         * 
         * @return builder
         * 
         */
        public Builder sslVerify(Boolean sslVerify) {
            return sslVerify(Output.of(sslVerify));
        }

        /**
         * @param token Token for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Token for the syslog service (string)
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public ClusterLoggingSyslogConfigArgs build() {
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            return $;
        }
    }

}
