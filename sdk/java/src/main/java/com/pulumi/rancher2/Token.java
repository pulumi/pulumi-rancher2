// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.TokenArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.TokenState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Rancher v2 Token resource. This can be used to create Tokens for Rancher v2 provider user and retrieve their information.
 * 
 * There are 2 kind of tokens:
 * - no scoped: valid for global system.
 * - scoped: valid for just a specific cluster (`cluster_id` should be provided).
 * 
 * Tokens can&#39;t be updated once created. Any diff in token data will recreate the token. If any token expire, Rancher2 provider will generate a diff to regenerate it.
 * 
 */
@ResourceType(type="rancher2:index/token:Token")
public class Token extends com.pulumi.resources.CustomResource {
    /**
     * (Computed) Token access key part (string)
     * 
     */
    @Export(name="accessKey", refs={String.class}, tree="[0]")
    private Output<String> accessKey;

    /**
     * @return (Computed) Token access key part (string)
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }
    /**
     * (Computed) Annotations of the token (map)
     * 
     */
    @Export(name="annotations", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> annotations;

    /**
     * @return (Computed) Annotations of the token (map)
     * 
     */
    public Output<Map<String,String>> annotations() {
        return this.annotations;
    }
    /**
     * Cluster ID for scoped token (string)
     * 
     */
    @Export(name="clusterId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clusterId;

    /**
     * @return Cluster ID for scoped token (string)
     * 
     */
    public Output<Optional<String>> clusterId() {
        return Codegen.optional(this.clusterId);
    }
    /**
     * Token description (string)
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Token description (string)
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * (Computed) Token is enabled (bool)
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return (Computed) Token is enabled (bool)
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * (Computed) Token is expired (bool)
     * 
     */
    @Export(name="expired", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> expired;

    /**
     * @return (Computed) Token is expired (bool)
     * 
     */
    public Output<Boolean> expired() {
        return this.expired;
    }
    /**
     * (Computed) Labels of the token (map)
     * 
     */
    @Export(name="labels", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> labels;

    /**
     * @return (Computed) Labels of the token (map)
     * 
     */
    public Output<Map<String,String>> labels() {
        return this.labels;
    }
    /**
     * (Computed) Token name (string)
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return (Computed) Token name (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Renew expired or disabled token
     * 
     */
    @Export(name="renew", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> renew;

    /**
     * @return Renew expired or disabled token
     * 
     */
    public Output<Optional<Boolean>> renew() {
        return Codegen.optional(this.renew);
    }
    /**
     * (Computed/Sensitive) Token secret key part (string)
     * 
     */
    @Export(name="secretKey", refs={String.class}, tree="[0]")
    private Output<String> secretKey;

    /**
     * @return (Computed/Sensitive) Token secret key part (string)
     * 
     */
    public Output<String> secretKey() {
        return this.secretKey;
    }
    /**
     * (Computed/Sensitive) Token value (string)
     * 
     */
    @Export(name="token", refs={String.class}, tree="[0]")
    private Output<String> token;

    /**
     * @return (Computed/Sensitive) Token value (string)
     * 
     */
    public Output<String> token() {
        return this.token;
    }
    /**
     * Token time to live in seconds. Default `0` (int)
     * 
     * From Rancher v2.4.6 `ttl` is readed in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.
     * 
     */
    @Export(name="ttl", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ttl;

    /**
     * @return Token time to live in seconds. Default `0` (int)
     * 
     * From Rancher v2.4.6 `ttl` is readed in minutes at Rancher API. To avoid breaking change on the provider, we still read in seconds but rounding up division if required.
     * 
     */
    public Output<Optional<Integer>> ttl() {
        return Codegen.optional(this.ttl);
    }
    /**
     * (Computed) Token user ID (string)
     * 
     */
    @Export(name="userId", refs={String.class}, tree="[0]")
    private Output<String> userId;

    /**
     * @return (Computed) Token user ID (string)
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Token(java.lang.String name) {
        this(name, TokenArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Token(java.lang.String name, @Nullable TokenArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Token(java.lang.String name, @Nullable TokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/token:Token", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Token(java.lang.String name, Output<java.lang.String> id, @Nullable TokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/token:Token", name, state, makeResourceOptions(options, id), false);
    }

    private static TokenArgs makeArgs(@Nullable TokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TokenArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "secretKey",
                "token"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Token get(java.lang.String name, Output<java.lang.String> id, @Nullable TokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Token(name, id, state, options);
    }
}
