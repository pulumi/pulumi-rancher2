// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigAuthentication;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigAuthorization;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigBastionHost;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigCloudProvider;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigDns;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigIngress;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigMonitoring;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigNetwork;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigNode;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigPrivateRegistry;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigServices;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigUpgradeStrategy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterRkeConfig {
    private final Integer addonJobTimeout;
    private final @Nullable String addons;
    private final @Nullable List<String> addonsIncludes;
    private final GetClusterRkeConfigAuthentication authentication;
    private final GetClusterRkeConfigAuthorization authorization;
    private final GetClusterRkeConfigBastionHost bastionHost;
    private final GetClusterRkeConfigCloudProvider cloudProvider;
    private final GetClusterRkeConfigDns dns;
    private final @Nullable Boolean enableCriDockerd;
    private final @Nullable Boolean ignoreDockerVersion;
    private final GetClusterRkeConfigIngress ingress;
    private final String kubernetesVersion;
    private final GetClusterRkeConfigMonitoring monitoring;
    private final GetClusterRkeConfigNetwork network;
    private final @Nullable List<GetClusterRkeConfigNode> nodes;
    private final String prefixPath;
    private final @Nullable List<GetClusterRkeConfigPrivateRegistry> privateRegistries;
    private final GetClusterRkeConfigServices services;
    private final @Nullable Boolean sshAgentAuth;
    private final String sshCertPath;
    private final String sshKeyPath;
    private final GetClusterRkeConfigUpgradeStrategy upgradeStrategy;
    private final String winPrefixPath;

    @CustomType.Constructor
    private GetClusterRkeConfig(
        @CustomType.Parameter("addonJobTimeout") Integer addonJobTimeout,
        @CustomType.Parameter("addons") @Nullable String addons,
        @CustomType.Parameter("addonsIncludes") @Nullable List<String> addonsIncludes,
        @CustomType.Parameter("authentication") GetClusterRkeConfigAuthentication authentication,
        @CustomType.Parameter("authorization") GetClusterRkeConfigAuthorization authorization,
        @CustomType.Parameter("bastionHost") GetClusterRkeConfigBastionHost bastionHost,
        @CustomType.Parameter("cloudProvider") GetClusterRkeConfigCloudProvider cloudProvider,
        @CustomType.Parameter("dns") GetClusterRkeConfigDns dns,
        @CustomType.Parameter("enableCriDockerd") @Nullable Boolean enableCriDockerd,
        @CustomType.Parameter("ignoreDockerVersion") @Nullable Boolean ignoreDockerVersion,
        @CustomType.Parameter("ingress") GetClusterRkeConfigIngress ingress,
        @CustomType.Parameter("kubernetesVersion") String kubernetesVersion,
        @CustomType.Parameter("monitoring") GetClusterRkeConfigMonitoring monitoring,
        @CustomType.Parameter("network") GetClusterRkeConfigNetwork network,
        @CustomType.Parameter("nodes") @Nullable List<GetClusterRkeConfigNode> nodes,
        @CustomType.Parameter("prefixPath") String prefixPath,
        @CustomType.Parameter("privateRegistries") @Nullable List<GetClusterRkeConfigPrivateRegistry> privateRegistries,
        @CustomType.Parameter("services") GetClusterRkeConfigServices services,
        @CustomType.Parameter("sshAgentAuth") @Nullable Boolean sshAgentAuth,
        @CustomType.Parameter("sshCertPath") String sshCertPath,
        @CustomType.Parameter("sshKeyPath") String sshKeyPath,
        @CustomType.Parameter("upgradeStrategy") GetClusterRkeConfigUpgradeStrategy upgradeStrategy,
        @CustomType.Parameter("winPrefixPath") String winPrefixPath) {
        this.addonJobTimeout = addonJobTimeout;
        this.addons = addons;
        this.addonsIncludes = addonsIncludes;
        this.authentication = authentication;
        this.authorization = authorization;
        this.bastionHost = bastionHost;
        this.cloudProvider = cloudProvider;
        this.dns = dns;
        this.enableCriDockerd = enableCriDockerd;
        this.ignoreDockerVersion = ignoreDockerVersion;
        this.ingress = ingress;
        this.kubernetesVersion = kubernetesVersion;
        this.monitoring = monitoring;
        this.network = network;
        this.nodes = nodes;
        this.prefixPath = prefixPath;
        this.privateRegistries = privateRegistries;
        this.services = services;
        this.sshAgentAuth = sshAgentAuth;
        this.sshCertPath = sshCertPath;
        this.sshKeyPath = sshKeyPath;
        this.upgradeStrategy = upgradeStrategy;
        this.winPrefixPath = winPrefixPath;
    }

    public Integer addonJobTimeout() {
        return this.addonJobTimeout;
    }
    public Optional<String> addons() {
        return Optional.ofNullable(this.addons);
    }
    public List<String> addonsIncludes() {
        return this.addonsIncludes == null ? List.of() : this.addonsIncludes;
    }
    public GetClusterRkeConfigAuthentication authentication() {
        return this.authentication;
    }
    public GetClusterRkeConfigAuthorization authorization() {
        return this.authorization;
    }
    public GetClusterRkeConfigBastionHost bastionHost() {
        return this.bastionHost;
    }
    public GetClusterRkeConfigCloudProvider cloudProvider() {
        return this.cloudProvider;
    }
    public GetClusterRkeConfigDns dns() {
        return this.dns;
    }
    public Optional<Boolean> enableCriDockerd() {
        return Optional.ofNullable(this.enableCriDockerd);
    }
    public Optional<Boolean> ignoreDockerVersion() {
        return Optional.ofNullable(this.ignoreDockerVersion);
    }
    public GetClusterRkeConfigIngress ingress() {
        return this.ingress;
    }
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    public GetClusterRkeConfigMonitoring monitoring() {
        return this.monitoring;
    }
    public GetClusterRkeConfigNetwork network() {
        return this.network;
    }
    public List<GetClusterRkeConfigNode> nodes() {
        return this.nodes == null ? List.of() : this.nodes;
    }
    public String prefixPath() {
        return this.prefixPath;
    }
    public List<GetClusterRkeConfigPrivateRegistry> privateRegistries() {
        return this.privateRegistries == null ? List.of() : this.privateRegistries;
    }
    public GetClusterRkeConfigServices services() {
        return this.services;
    }
    public Optional<Boolean> sshAgentAuth() {
        return Optional.ofNullable(this.sshAgentAuth);
    }
    public String sshCertPath() {
        return this.sshCertPath;
    }
    public String sshKeyPath() {
        return this.sshKeyPath;
    }
    public GetClusterRkeConfigUpgradeStrategy upgradeStrategy() {
        return this.upgradeStrategy;
    }
    public String winPrefixPath() {
        return this.winPrefixPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterRkeConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer addonJobTimeout;
        private @Nullable String addons;
        private @Nullable List<String> addonsIncludes;
        private GetClusterRkeConfigAuthentication authentication;
        private GetClusterRkeConfigAuthorization authorization;
        private GetClusterRkeConfigBastionHost bastionHost;
        private GetClusterRkeConfigCloudProvider cloudProvider;
        private GetClusterRkeConfigDns dns;
        private @Nullable Boolean enableCriDockerd;
        private @Nullable Boolean ignoreDockerVersion;
        private GetClusterRkeConfigIngress ingress;
        private String kubernetesVersion;
        private GetClusterRkeConfigMonitoring monitoring;
        private GetClusterRkeConfigNetwork network;
        private @Nullable List<GetClusterRkeConfigNode> nodes;
        private String prefixPath;
        private @Nullable List<GetClusterRkeConfigPrivateRegistry> privateRegistries;
        private GetClusterRkeConfigServices services;
        private @Nullable Boolean sshAgentAuth;
        private String sshCertPath;
        private String sshKeyPath;
        private GetClusterRkeConfigUpgradeStrategy upgradeStrategy;
        private String winPrefixPath;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterRkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addonJobTimeout = defaults.addonJobTimeout;
    	      this.addons = defaults.addons;
    	      this.addonsIncludes = defaults.addonsIncludes;
    	      this.authentication = defaults.authentication;
    	      this.authorization = defaults.authorization;
    	      this.bastionHost = defaults.bastionHost;
    	      this.cloudProvider = defaults.cloudProvider;
    	      this.dns = defaults.dns;
    	      this.enableCriDockerd = defaults.enableCriDockerd;
    	      this.ignoreDockerVersion = defaults.ignoreDockerVersion;
    	      this.ingress = defaults.ingress;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.monitoring = defaults.monitoring;
    	      this.network = defaults.network;
    	      this.nodes = defaults.nodes;
    	      this.prefixPath = defaults.prefixPath;
    	      this.privateRegistries = defaults.privateRegistries;
    	      this.services = defaults.services;
    	      this.sshAgentAuth = defaults.sshAgentAuth;
    	      this.sshCertPath = defaults.sshCertPath;
    	      this.sshKeyPath = defaults.sshKeyPath;
    	      this.upgradeStrategy = defaults.upgradeStrategy;
    	      this.winPrefixPath = defaults.winPrefixPath;
        }

        public Builder addonJobTimeout(Integer addonJobTimeout) {
            this.addonJobTimeout = Objects.requireNonNull(addonJobTimeout);
            return this;
        }
        public Builder addons(@Nullable String addons) {
            this.addons = addons;
            return this;
        }
        public Builder addonsIncludes(@Nullable List<String> addonsIncludes) {
            this.addonsIncludes = addonsIncludes;
            return this;
        }
        public Builder addonsIncludes(String... addonsIncludes) {
            return addonsIncludes(List.of(addonsIncludes));
        }
        public Builder authentication(GetClusterRkeConfigAuthentication authentication) {
            this.authentication = Objects.requireNonNull(authentication);
            return this;
        }
        public Builder authorization(GetClusterRkeConfigAuthorization authorization) {
            this.authorization = Objects.requireNonNull(authorization);
            return this;
        }
        public Builder bastionHost(GetClusterRkeConfigBastionHost bastionHost) {
            this.bastionHost = Objects.requireNonNull(bastionHost);
            return this;
        }
        public Builder cloudProvider(GetClusterRkeConfigCloudProvider cloudProvider) {
            this.cloudProvider = Objects.requireNonNull(cloudProvider);
            return this;
        }
        public Builder dns(GetClusterRkeConfigDns dns) {
            this.dns = Objects.requireNonNull(dns);
            return this;
        }
        public Builder enableCriDockerd(@Nullable Boolean enableCriDockerd) {
            this.enableCriDockerd = enableCriDockerd;
            return this;
        }
        public Builder ignoreDockerVersion(@Nullable Boolean ignoreDockerVersion) {
            this.ignoreDockerVersion = ignoreDockerVersion;
            return this;
        }
        public Builder ingress(GetClusterRkeConfigIngress ingress) {
            this.ingress = Objects.requireNonNull(ingress);
            return this;
        }
        public Builder kubernetesVersion(String kubernetesVersion) {
            this.kubernetesVersion = Objects.requireNonNull(kubernetesVersion);
            return this;
        }
        public Builder monitoring(GetClusterRkeConfigMonitoring monitoring) {
            this.monitoring = Objects.requireNonNull(monitoring);
            return this;
        }
        public Builder network(GetClusterRkeConfigNetwork network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        public Builder nodes(@Nullable List<GetClusterRkeConfigNode> nodes) {
            this.nodes = nodes;
            return this;
        }
        public Builder nodes(GetClusterRkeConfigNode... nodes) {
            return nodes(List.of(nodes));
        }
        public Builder prefixPath(String prefixPath) {
            this.prefixPath = Objects.requireNonNull(prefixPath);
            return this;
        }
        public Builder privateRegistries(@Nullable List<GetClusterRkeConfigPrivateRegistry> privateRegistries) {
            this.privateRegistries = privateRegistries;
            return this;
        }
        public Builder privateRegistries(GetClusterRkeConfigPrivateRegistry... privateRegistries) {
            return privateRegistries(List.of(privateRegistries));
        }
        public Builder services(GetClusterRkeConfigServices services) {
            this.services = Objects.requireNonNull(services);
            return this;
        }
        public Builder sshAgentAuth(@Nullable Boolean sshAgentAuth) {
            this.sshAgentAuth = sshAgentAuth;
            return this;
        }
        public Builder sshCertPath(String sshCertPath) {
            this.sshCertPath = Objects.requireNonNull(sshCertPath);
            return this;
        }
        public Builder sshKeyPath(String sshKeyPath) {
            this.sshKeyPath = Objects.requireNonNull(sshKeyPath);
            return this;
        }
        public Builder upgradeStrategy(GetClusterRkeConfigUpgradeStrategy upgradeStrategy) {
            this.upgradeStrategy = Objects.requireNonNull(upgradeStrategy);
            return this;
        }
        public Builder winPrefixPath(String winPrefixPath) {
            this.winPrefixPath = Objects.requireNonNull(winPrefixPath);
            return this;
        }        public GetClusterRkeConfig build() {
            return new GetClusterRkeConfig(addonJobTimeout, addons, addonsIncludes, authentication, authorization, bastionHost, cloudProvider, dns, enableCriDockerd, ignoreDockerVersion, ingress, kubernetesVersion, monitoring, network, nodes, prefixPath, privateRegistries, services, sshAgentAuth, sshCertPath, sshKeyPath, upgradeStrategy, winPrefixPath);
        }
    }
}
