// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigAuthentication;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigAuthorization;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigBastionHost;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigCloudProvider;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigDns;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigIngress;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigMonitoring;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigNetwork;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigNode;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigPrivateRegistry;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigServices;
import com.pulumi.rancher2.outputs.GetClusterRkeConfigUpgradeStrategy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterRkeConfig {
    private Integer addonJobTimeout;
    private @Nullable String addons;
    private @Nullable List<String> addonsIncludes;
    private GetClusterRkeConfigAuthentication authentication;
    private GetClusterRkeConfigAuthorization authorization;
    private GetClusterRkeConfigBastionHost bastionHost;
    private GetClusterRkeConfigCloudProvider cloudProvider;
    private GetClusterRkeConfigDns dns;
    private @Nullable Boolean enableCriDockerd;
    private @Nullable Boolean ignoreDockerVersion;
    private GetClusterRkeConfigIngress ingress;
    private String kubernetesVersion;
    private GetClusterRkeConfigMonitoring monitoring;
    private GetClusterRkeConfigNetwork network;
    private @Nullable List<GetClusterRkeConfigNode> nodes;
    private String prefixPath;
    private @Nullable List<GetClusterRkeConfigPrivateRegistry> privateRegistries;
    private GetClusterRkeConfigServices services;
    private @Nullable Boolean sshAgentAuth;
    private String sshCertPath;
    private String sshKeyPath;
    private GetClusterRkeConfigUpgradeStrategy upgradeStrategy;
    private String winPrefixPath;

    private GetClusterRkeConfig() {}
    public Integer addonJobTimeout() {
        return this.addonJobTimeout;
    }
    public Optional<String> addons() {
        return Optional.ofNullable(this.addons);
    }
    public List<String> addonsIncludes() {
        return this.addonsIncludes == null ? List.of() : this.addonsIncludes;
    }
    public GetClusterRkeConfigAuthentication authentication() {
        return this.authentication;
    }
    public GetClusterRkeConfigAuthorization authorization() {
        return this.authorization;
    }
    public GetClusterRkeConfigBastionHost bastionHost() {
        return this.bastionHost;
    }
    public GetClusterRkeConfigCloudProvider cloudProvider() {
        return this.cloudProvider;
    }
    public GetClusterRkeConfigDns dns() {
        return this.dns;
    }
    public Optional<Boolean> enableCriDockerd() {
        return Optional.ofNullable(this.enableCriDockerd);
    }
    public Optional<Boolean> ignoreDockerVersion() {
        return Optional.ofNullable(this.ignoreDockerVersion);
    }
    public GetClusterRkeConfigIngress ingress() {
        return this.ingress;
    }
    public String kubernetesVersion() {
        return this.kubernetesVersion;
    }
    public GetClusterRkeConfigMonitoring monitoring() {
        return this.monitoring;
    }
    public GetClusterRkeConfigNetwork network() {
        return this.network;
    }
    public List<GetClusterRkeConfigNode> nodes() {
        return this.nodes == null ? List.of() : this.nodes;
    }
    public String prefixPath() {
        return this.prefixPath;
    }
    public List<GetClusterRkeConfigPrivateRegistry> privateRegistries() {
        return this.privateRegistries == null ? List.of() : this.privateRegistries;
    }
    public GetClusterRkeConfigServices services() {
        return this.services;
    }
    public Optional<Boolean> sshAgentAuth() {
        return Optional.ofNullable(this.sshAgentAuth);
    }
    public String sshCertPath() {
        return this.sshCertPath;
    }
    public String sshKeyPath() {
        return this.sshKeyPath;
    }
    public GetClusterRkeConfigUpgradeStrategy upgradeStrategy() {
        return this.upgradeStrategy;
    }
    public String winPrefixPath() {
        return this.winPrefixPath;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterRkeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer addonJobTimeout;
        private @Nullable String addons;
        private @Nullable List<String> addonsIncludes;
        private GetClusterRkeConfigAuthentication authentication;
        private GetClusterRkeConfigAuthorization authorization;
        private GetClusterRkeConfigBastionHost bastionHost;
        private GetClusterRkeConfigCloudProvider cloudProvider;
        private GetClusterRkeConfigDns dns;
        private @Nullable Boolean enableCriDockerd;
        private @Nullable Boolean ignoreDockerVersion;
        private GetClusterRkeConfigIngress ingress;
        private String kubernetesVersion;
        private GetClusterRkeConfigMonitoring monitoring;
        private GetClusterRkeConfigNetwork network;
        private @Nullable List<GetClusterRkeConfigNode> nodes;
        private String prefixPath;
        private @Nullable List<GetClusterRkeConfigPrivateRegistry> privateRegistries;
        private GetClusterRkeConfigServices services;
        private @Nullable Boolean sshAgentAuth;
        private String sshCertPath;
        private String sshKeyPath;
        private GetClusterRkeConfigUpgradeStrategy upgradeStrategy;
        private String winPrefixPath;
        public Builder() {}
        public Builder(GetClusterRkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addonJobTimeout = defaults.addonJobTimeout;
    	      this.addons = defaults.addons;
    	      this.addonsIncludes = defaults.addonsIncludes;
    	      this.authentication = defaults.authentication;
    	      this.authorization = defaults.authorization;
    	      this.bastionHost = defaults.bastionHost;
    	      this.cloudProvider = defaults.cloudProvider;
    	      this.dns = defaults.dns;
    	      this.enableCriDockerd = defaults.enableCriDockerd;
    	      this.ignoreDockerVersion = defaults.ignoreDockerVersion;
    	      this.ingress = defaults.ingress;
    	      this.kubernetesVersion = defaults.kubernetesVersion;
    	      this.monitoring = defaults.monitoring;
    	      this.network = defaults.network;
    	      this.nodes = defaults.nodes;
    	      this.prefixPath = defaults.prefixPath;
    	      this.privateRegistries = defaults.privateRegistries;
    	      this.services = defaults.services;
    	      this.sshAgentAuth = defaults.sshAgentAuth;
    	      this.sshCertPath = defaults.sshCertPath;
    	      this.sshKeyPath = defaults.sshKeyPath;
    	      this.upgradeStrategy = defaults.upgradeStrategy;
    	      this.winPrefixPath = defaults.winPrefixPath;
        }

        @CustomType.Setter
        public Builder addonJobTimeout(Integer addonJobTimeout) {
            if (addonJobTimeout == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "addonJobTimeout");
            }
            this.addonJobTimeout = addonJobTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder addons(@Nullable String addons) {

            this.addons = addons;
            return this;
        }
        @CustomType.Setter
        public Builder addonsIncludes(@Nullable List<String> addonsIncludes) {

            this.addonsIncludes = addonsIncludes;
            return this;
        }
        public Builder addonsIncludes(String... addonsIncludes) {
            return addonsIncludes(List.of(addonsIncludes));
        }
        @CustomType.Setter
        public Builder authentication(GetClusterRkeConfigAuthentication authentication) {
            if (authentication == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "authentication");
            }
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder authorization(GetClusterRkeConfigAuthorization authorization) {
            if (authorization == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "authorization");
            }
            this.authorization = authorization;
            return this;
        }
        @CustomType.Setter
        public Builder bastionHost(GetClusterRkeConfigBastionHost bastionHost) {
            if (bastionHost == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "bastionHost");
            }
            this.bastionHost = bastionHost;
            return this;
        }
        @CustomType.Setter
        public Builder cloudProvider(GetClusterRkeConfigCloudProvider cloudProvider) {
            if (cloudProvider == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "cloudProvider");
            }
            this.cloudProvider = cloudProvider;
            return this;
        }
        @CustomType.Setter
        public Builder dns(GetClusterRkeConfigDns dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "dns");
            }
            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder enableCriDockerd(@Nullable Boolean enableCriDockerd) {

            this.enableCriDockerd = enableCriDockerd;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreDockerVersion(@Nullable Boolean ignoreDockerVersion) {

            this.ignoreDockerVersion = ignoreDockerVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ingress(GetClusterRkeConfigIngress ingress) {
            if (ingress == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "ingress");
            }
            this.ingress = ingress;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesVersion(String kubernetesVersion) {
            if (kubernetesVersion == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "kubernetesVersion");
            }
            this.kubernetesVersion = kubernetesVersion;
            return this;
        }
        @CustomType.Setter
        public Builder monitoring(GetClusterRkeConfigMonitoring monitoring) {
            if (monitoring == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "monitoring");
            }
            this.monitoring = monitoring;
            return this;
        }
        @CustomType.Setter
        public Builder network(GetClusterRkeConfigNetwork network) {
            if (network == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "network");
            }
            this.network = network;
            return this;
        }
        @CustomType.Setter
        public Builder nodes(@Nullable List<GetClusterRkeConfigNode> nodes) {

            this.nodes = nodes;
            return this;
        }
        public Builder nodes(GetClusterRkeConfigNode... nodes) {
            return nodes(List.of(nodes));
        }
        @CustomType.Setter
        public Builder prefixPath(String prefixPath) {
            if (prefixPath == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "prefixPath");
            }
            this.prefixPath = prefixPath;
            return this;
        }
        @CustomType.Setter
        public Builder privateRegistries(@Nullable List<GetClusterRkeConfigPrivateRegistry> privateRegistries) {

            this.privateRegistries = privateRegistries;
            return this;
        }
        public Builder privateRegistries(GetClusterRkeConfigPrivateRegistry... privateRegistries) {
            return privateRegistries(List.of(privateRegistries));
        }
        @CustomType.Setter
        public Builder services(GetClusterRkeConfigServices services) {
            if (services == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "services");
            }
            this.services = services;
            return this;
        }
        @CustomType.Setter
        public Builder sshAgentAuth(@Nullable Boolean sshAgentAuth) {

            this.sshAgentAuth = sshAgentAuth;
            return this;
        }
        @CustomType.Setter
        public Builder sshCertPath(String sshCertPath) {
            if (sshCertPath == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "sshCertPath");
            }
            this.sshCertPath = sshCertPath;
            return this;
        }
        @CustomType.Setter
        public Builder sshKeyPath(String sshKeyPath) {
            if (sshKeyPath == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "sshKeyPath");
            }
            this.sshKeyPath = sshKeyPath;
            return this;
        }
        @CustomType.Setter
        public Builder upgradeStrategy(GetClusterRkeConfigUpgradeStrategy upgradeStrategy) {
            if (upgradeStrategy == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "upgradeStrategy");
            }
            this.upgradeStrategy = upgradeStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder winPrefixPath(String winPrefixPath) {
            if (winPrefixPath == null) {
              throw new MissingRequiredPropertyException("GetClusterRkeConfig", "winPrefixPath");
            }
            this.winPrefixPath = winPrefixPath;
            return this;
        }
        public GetClusterRkeConfig build() {
            final var _resultValue = new GetClusterRkeConfig();
            _resultValue.addonJobTimeout = addonJobTimeout;
            _resultValue.addons = addons;
            _resultValue.addonsIncludes = addonsIncludes;
            _resultValue.authentication = authentication;
            _resultValue.authorization = authorization;
            _resultValue.bastionHost = bastionHost;
            _resultValue.cloudProvider = cloudProvider;
            _resultValue.dns = dns;
            _resultValue.enableCriDockerd = enableCriDockerd;
            _resultValue.ignoreDockerVersion = ignoreDockerVersion;
            _resultValue.ingress = ingress;
            _resultValue.kubernetesVersion = kubernetesVersion;
            _resultValue.monitoring = monitoring;
            _resultValue.network = network;
            _resultValue.nodes = nodes;
            _resultValue.prefixPath = prefixPath;
            _resultValue.privateRegistries = privateRegistries;
            _resultValue.services = services;
            _resultValue.sshAgentAuth = sshAgentAuth;
            _resultValue.sshCertPath = sshCertPath;
            _resultValue.sshKeyPath = sshKeyPath;
            _resultValue.upgradeStrategy = upgradeStrategy;
            _resultValue.winPrefixPath = winPrefixPath;
            return _resultValue;
        }
    }
}
