// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterEksConfigV2NodeGroupLaunchTemplate;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterEksConfigV2NodeGroup {
    private final @Nullable Integer desiredSize;
    private final @Nullable Integer diskSize;
    private final @Nullable String ec2SshKey;
    private final @Nullable Boolean gpu;
    private final @Nullable String imageId;
    private final @Nullable String instanceType;
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    private final @Nullable Map<String,Object> labels;
    private final @Nullable List<GetClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates;
    private final @Nullable Integer maxSize;
    private final @Nullable Integer minSize;
    /**
     * @return The name of the Cluster (string)
     * 
     */
    private final String name;
    private final @Nullable Boolean requestSpotInstances;
    private final @Nullable Map<String,Object> resourceTags;
    private final @Nullable List<String> spotInstanceTypes;
    private final List<String> subnets;
    private final @Nullable Map<String,Object> tags;
    private final String userData;
    private final String version;

    @CustomType.Constructor
    private GetClusterEksConfigV2NodeGroup(
        @CustomType.Parameter("desiredSize") @Nullable Integer desiredSize,
        @CustomType.Parameter("diskSize") @Nullable Integer diskSize,
        @CustomType.Parameter("ec2SshKey") @Nullable String ec2SshKey,
        @CustomType.Parameter("gpu") @Nullable Boolean gpu,
        @CustomType.Parameter("imageId") @Nullable String imageId,
        @CustomType.Parameter("instanceType") @Nullable String instanceType,
        @CustomType.Parameter("labels") @Nullable Map<String,Object> labels,
        @CustomType.Parameter("launchTemplates") @Nullable List<GetClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates,
        @CustomType.Parameter("maxSize") @Nullable Integer maxSize,
        @CustomType.Parameter("minSize") @Nullable Integer minSize,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("requestSpotInstances") @Nullable Boolean requestSpotInstances,
        @CustomType.Parameter("resourceTags") @Nullable Map<String,Object> resourceTags,
        @CustomType.Parameter("spotInstanceTypes") @Nullable List<String> spotInstanceTypes,
        @CustomType.Parameter("subnets") List<String> subnets,
        @CustomType.Parameter("tags") @Nullable Map<String,Object> tags,
        @CustomType.Parameter("userData") String userData,
        @CustomType.Parameter("version") String version) {
        this.desiredSize = desiredSize;
        this.diskSize = diskSize;
        this.ec2SshKey = ec2SshKey;
        this.gpu = gpu;
        this.imageId = imageId;
        this.instanceType = instanceType;
        this.labels = labels;
        this.launchTemplates = launchTemplates;
        this.maxSize = maxSize;
        this.minSize = minSize;
        this.name = name;
        this.requestSpotInstances = requestSpotInstances;
        this.resourceTags = resourceTags;
        this.spotInstanceTypes = spotInstanceTypes;
        this.subnets = subnets;
        this.tags = tags;
        this.userData = userData;
        this.version = version;
    }

    public Optional<Integer> desiredSize() {
        return Optional.ofNullable(this.desiredSize);
    }
    public Optional<Integer> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }
    public Optional<String> ec2SshKey() {
        return Optional.ofNullable(this.ec2SshKey);
    }
    public Optional<Boolean> gpu() {
        return Optional.ofNullable(this.gpu);
    }
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    public Optional<String> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    public List<GetClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates() {
        return this.launchTemplates == null ? List.of() : this.launchTemplates;
    }
    public Optional<Integer> maxSize() {
        return Optional.ofNullable(this.maxSize);
    }
    public Optional<Integer> minSize() {
        return Optional.ofNullable(this.minSize);
    }
    /**
     * @return The name of the Cluster (string)
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<Boolean> requestSpotInstances() {
        return Optional.ofNullable(this.requestSpotInstances);
    }
    public Map<String,Object> resourceTags() {
        return this.resourceTags == null ? Map.of() : this.resourceTags;
    }
    public List<String> spotInstanceTypes() {
        return this.spotInstanceTypes == null ? List.of() : this.spotInstanceTypes;
    }
    public List<String> subnets() {
        return this.subnets;
    }
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String userData() {
        return this.userData;
    }
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterEksConfigV2NodeGroup defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer desiredSize;
        private @Nullable Integer diskSize;
        private @Nullable String ec2SshKey;
        private @Nullable Boolean gpu;
        private @Nullable String imageId;
        private @Nullable String instanceType;
        private @Nullable Map<String,Object> labels;
        private @Nullable List<GetClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates;
        private @Nullable Integer maxSize;
        private @Nullable Integer minSize;
        private String name;
        private @Nullable Boolean requestSpotInstances;
        private @Nullable Map<String,Object> resourceTags;
        private @Nullable List<String> spotInstanceTypes;
        private List<String> subnets;
        private @Nullable Map<String,Object> tags;
        private String userData;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetClusterEksConfigV2NodeGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.desiredSize = defaults.desiredSize;
    	      this.diskSize = defaults.diskSize;
    	      this.ec2SshKey = defaults.ec2SshKey;
    	      this.gpu = defaults.gpu;
    	      this.imageId = defaults.imageId;
    	      this.instanceType = defaults.instanceType;
    	      this.labels = defaults.labels;
    	      this.launchTemplates = defaults.launchTemplates;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.name = defaults.name;
    	      this.requestSpotInstances = defaults.requestSpotInstances;
    	      this.resourceTags = defaults.resourceTags;
    	      this.spotInstanceTypes = defaults.spotInstanceTypes;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.userData = defaults.userData;
    	      this.version = defaults.version;
        }

        public Builder desiredSize(@Nullable Integer desiredSize) {
            this.desiredSize = desiredSize;
            return this;
        }
        public Builder diskSize(@Nullable Integer diskSize) {
            this.diskSize = diskSize;
            return this;
        }
        public Builder ec2SshKey(@Nullable String ec2SshKey) {
            this.ec2SshKey = ec2SshKey;
            return this;
        }
        public Builder gpu(@Nullable Boolean gpu) {
            this.gpu = gpu;
            return this;
        }
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = instanceType;
            return this;
        }
        public Builder labels(@Nullable Map<String,Object> labels) {
            this.labels = labels;
            return this;
        }
        public Builder launchTemplates(@Nullable List<GetClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates) {
            this.launchTemplates = launchTemplates;
            return this;
        }
        public Builder launchTemplates(GetClusterEksConfigV2NodeGroupLaunchTemplate... launchTemplates) {
            return launchTemplates(List.of(launchTemplates));
        }
        public Builder maxSize(@Nullable Integer maxSize) {
            this.maxSize = maxSize;
            return this;
        }
        public Builder minSize(@Nullable Integer minSize) {
            this.minSize = minSize;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder requestSpotInstances(@Nullable Boolean requestSpotInstances) {
            this.requestSpotInstances = requestSpotInstances;
            return this;
        }
        public Builder resourceTags(@Nullable Map<String,Object> resourceTags) {
            this.resourceTags = resourceTags;
            return this;
        }
        public Builder spotInstanceTypes(@Nullable List<String> spotInstanceTypes) {
            this.spotInstanceTypes = spotInstanceTypes;
            return this;
        }
        public Builder spotInstanceTypes(String... spotInstanceTypes) {
            return spotInstanceTypes(List.of(spotInstanceTypes));
        }
        public Builder subnets(List<String> subnets) {
            this.subnets = Objects.requireNonNull(subnets);
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        public Builder userData(String userData) {
            this.userData = Objects.requireNonNull(userData);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public GetClusterEksConfigV2NodeGroup build() {
            return new GetClusterEksConfigV2NodeGroup(desiredSize, diskSize, ec2SshKey, gpu, imageId, instanceType, labels, launchTemplates, maxSize, minSize, name, requestSpotInstances, resourceTags, spotInstanceTypes, subnets, tags, userData, version);
        }
    }
}
