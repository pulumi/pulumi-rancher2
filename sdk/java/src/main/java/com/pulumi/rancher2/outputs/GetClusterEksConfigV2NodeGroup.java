// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetClusterEksConfigV2NodeGroupLaunchTemplate;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterEksConfigV2NodeGroup {
    private @Nullable Integer desiredSize;
    private @Nullable Integer diskSize;
    private @Nullable String ec2SshKey;
    private @Nullable Boolean gpu;
    private @Nullable String imageId;
    private @Nullable String instanceType;
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    private @Nullable Map<String,Object> labels;
    private @Nullable List<GetClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates;
    private @Nullable Integer maxSize;
    private @Nullable Integer minSize;
    /**
     * @return The name of the Cluster (string)
     * 
     */
    private String name;
    private @Nullable String nodeRole;
    private @Nullable Boolean requestSpotInstances;
    private @Nullable Map<String,Object> resourceTags;
    private @Nullable List<String> spotInstanceTypes;
    private List<String> subnets;
    private @Nullable Map<String,Object> tags;
    private String userData;
    private String version;

    private GetClusterEksConfigV2NodeGroup() {}
    public Optional<Integer> desiredSize() {
        return Optional.ofNullable(this.desiredSize);
    }
    public Optional<Integer> diskSize() {
        return Optional.ofNullable(this.diskSize);
    }
    public Optional<String> ec2SshKey() {
        return Optional.ofNullable(this.ec2SshKey);
    }
    public Optional<Boolean> gpu() {
        return Optional.ofNullable(this.gpu);
    }
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    public Optional<String> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    public List<GetClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates() {
        return this.launchTemplates == null ? List.of() : this.launchTemplates;
    }
    public Optional<Integer> maxSize() {
        return Optional.ofNullable(this.maxSize);
    }
    public Optional<Integer> minSize() {
        return Optional.ofNullable(this.minSize);
    }
    /**
     * @return The name of the Cluster (string)
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<String> nodeRole() {
        return Optional.ofNullable(this.nodeRole);
    }
    public Optional<Boolean> requestSpotInstances() {
        return Optional.ofNullable(this.requestSpotInstances);
    }
    public Map<String,Object> resourceTags() {
        return this.resourceTags == null ? Map.of() : this.resourceTags;
    }
    public List<String> spotInstanceTypes() {
        return this.spotInstanceTypes == null ? List.of() : this.spotInstanceTypes;
    }
    public List<String> subnets() {
        return this.subnets;
    }
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    public String userData() {
        return this.userData;
    }
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterEksConfigV2NodeGroup defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer desiredSize;
        private @Nullable Integer diskSize;
        private @Nullable String ec2SshKey;
        private @Nullable Boolean gpu;
        private @Nullable String imageId;
        private @Nullable String instanceType;
        private @Nullable Map<String,Object> labels;
        private @Nullable List<GetClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates;
        private @Nullable Integer maxSize;
        private @Nullable Integer minSize;
        private String name;
        private @Nullable String nodeRole;
        private @Nullable Boolean requestSpotInstances;
        private @Nullable Map<String,Object> resourceTags;
        private @Nullable List<String> spotInstanceTypes;
        private List<String> subnets;
        private @Nullable Map<String,Object> tags;
        private String userData;
        private String version;
        public Builder() {}
        public Builder(GetClusterEksConfigV2NodeGroup defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.desiredSize = defaults.desiredSize;
    	      this.diskSize = defaults.diskSize;
    	      this.ec2SshKey = defaults.ec2SshKey;
    	      this.gpu = defaults.gpu;
    	      this.imageId = defaults.imageId;
    	      this.instanceType = defaults.instanceType;
    	      this.labels = defaults.labels;
    	      this.launchTemplates = defaults.launchTemplates;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.name = defaults.name;
    	      this.nodeRole = defaults.nodeRole;
    	      this.requestSpotInstances = defaults.requestSpotInstances;
    	      this.resourceTags = defaults.resourceTags;
    	      this.spotInstanceTypes = defaults.spotInstanceTypes;
    	      this.subnets = defaults.subnets;
    	      this.tags = defaults.tags;
    	      this.userData = defaults.userData;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder desiredSize(@Nullable Integer desiredSize) {
            this.desiredSize = desiredSize;
            return this;
        }
        @CustomType.Setter
        public Builder diskSize(@Nullable Integer diskSize) {
            this.diskSize = diskSize;
            return this;
        }
        @CustomType.Setter
        public Builder ec2SshKey(@Nullable String ec2SshKey) {
            this.ec2SshKey = ec2SshKey;
            return this;
        }
        @CustomType.Setter
        public Builder gpu(@Nullable Boolean gpu) {
            this.gpu = gpu;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder labels(@Nullable Map<String,Object> labels) {
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder launchTemplates(@Nullable List<GetClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates) {
            this.launchTemplates = launchTemplates;
            return this;
        }
        public Builder launchTemplates(GetClusterEksConfigV2NodeGroupLaunchTemplate... launchTemplates) {
            return launchTemplates(List.of(launchTemplates));
        }
        @CustomType.Setter
        public Builder maxSize(@Nullable Integer maxSize) {
            this.maxSize = maxSize;
            return this;
        }
        @CustomType.Setter
        public Builder minSize(@Nullable Integer minSize) {
            this.minSize = minSize;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nodeRole(@Nullable String nodeRole) {
            this.nodeRole = nodeRole;
            return this;
        }
        @CustomType.Setter
        public Builder requestSpotInstances(@Nullable Boolean requestSpotInstances) {
            this.requestSpotInstances = requestSpotInstances;
            return this;
        }
        @CustomType.Setter
        public Builder resourceTags(@Nullable Map<String,Object> resourceTags) {
            this.resourceTags = resourceTags;
            return this;
        }
        @CustomType.Setter
        public Builder spotInstanceTypes(@Nullable List<String> spotInstanceTypes) {
            this.spotInstanceTypes = spotInstanceTypes;
            return this;
        }
        public Builder spotInstanceTypes(String... spotInstanceTypes) {
            return spotInstanceTypes(List.of(spotInstanceTypes));
        }
        @CustomType.Setter
        public Builder subnets(List<String> subnets) {
            this.subnets = Objects.requireNonNull(subnets);
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,Object> tags) {
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder userData(String userData) {
            this.userData = Objects.requireNonNull(userData);
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetClusterEksConfigV2NodeGroup build() {
            final var _resultValue = new GetClusterEksConfigV2NodeGroup();
            _resultValue.desiredSize = desiredSize;
            _resultValue.diskSize = diskSize;
            _resultValue.ec2SshKey = ec2SshKey;
            _resultValue.gpu = gpu;
            _resultValue.imageId = imageId;
            _resultValue.instanceType = instanceType;
            _resultValue.labels = labels;
            _resultValue.launchTemplates = launchTemplates;
            _resultValue.maxSize = maxSize;
            _resultValue.minSize = minSize;
            _resultValue.name = name;
            _resultValue.nodeRole = nodeRole;
            _resultValue.requestSpotInstances = requestSpotInstances;
            _resultValue.resourceTags = resourceTags;
            _resultValue.spotInstanceTypes = spotInstanceTypes;
            _resultValue.subnets = subnets;
            _resultValue.tags = tags;
            _resultValue.userData = userData;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
