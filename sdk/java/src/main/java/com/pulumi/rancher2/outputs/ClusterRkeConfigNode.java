// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClusterRkeConfigNode {
    /**
     * @return Address ip for node (string)
     * 
     */
    private final String address;
    /**
     * @return Docker socket for node (string)
     * 
     */
    private final @Nullable String dockerSocket;
    /**
     * @return Hostname override for node (string)
     * 
     */
    private final @Nullable String hostnameOverride;
    /**
     * @return Internal ip for node (string)
     * 
     */
    private final @Nullable String internalAddress;
    /**
     * @return Labels for cluster registration token object (map)
     * 
     */
    private final @Nullable Map<String,Object> labels;
    /**
     * @return Id for the node (string)
     * 
     */
    private final @Nullable String nodeId;
    /**
     * @return Port for node. Default `22` (string)
     * 
     */
    private final @Nullable String port;
    /**
     * @return Roles for the node. `controlplane`, `etcd` and `worker` are supported. (list)
     * 
     */
    private final List<String> roles;
    /**
     * @return Use ssh agent auth. Default `false` (bool)
     * 
     */
    private final @Nullable Boolean sshAgentAuth;
    /**
     * @return Node SSH private key (string)
     * 
     */
    private final @Nullable String sshKey;
    /**
     * @return Node SSH private key path (string)
     * 
     */
    private final @Nullable String sshKeyPath;
    /**
     * @return Registry user (string)
     * 
     */
    private final String user;

    @CustomType.Constructor
    private ClusterRkeConfigNode(
        @CustomType.Parameter("address") String address,
        @CustomType.Parameter("dockerSocket") @Nullable String dockerSocket,
        @CustomType.Parameter("hostnameOverride") @Nullable String hostnameOverride,
        @CustomType.Parameter("internalAddress") @Nullable String internalAddress,
        @CustomType.Parameter("labels") @Nullable Map<String,Object> labels,
        @CustomType.Parameter("nodeId") @Nullable String nodeId,
        @CustomType.Parameter("port") @Nullable String port,
        @CustomType.Parameter("roles") List<String> roles,
        @CustomType.Parameter("sshAgentAuth") @Nullable Boolean sshAgentAuth,
        @CustomType.Parameter("sshKey") @Nullable String sshKey,
        @CustomType.Parameter("sshKeyPath") @Nullable String sshKeyPath,
        @CustomType.Parameter("user") String user) {
        this.address = address;
        this.dockerSocket = dockerSocket;
        this.hostnameOverride = hostnameOverride;
        this.internalAddress = internalAddress;
        this.labels = labels;
        this.nodeId = nodeId;
        this.port = port;
        this.roles = roles;
        this.sshAgentAuth = sshAgentAuth;
        this.sshKey = sshKey;
        this.sshKeyPath = sshKeyPath;
        this.user = user;
    }

    /**
     * @return Address ip for node (string)
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Docker socket for node (string)
     * 
     */
    public Optional<String> dockerSocket() {
        return Optional.ofNullable(this.dockerSocket);
    }
    /**
     * @return Hostname override for node (string)
     * 
     */
    public Optional<String> hostnameOverride() {
        return Optional.ofNullable(this.hostnameOverride);
    }
    /**
     * @return Internal ip for node (string)
     * 
     */
    public Optional<String> internalAddress() {
        return Optional.ofNullable(this.internalAddress);
    }
    /**
     * @return Labels for cluster registration token object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels == null ? Map.of() : this.labels;
    }
    /**
     * @return Id for the node (string)
     * 
     */
    public Optional<String> nodeId() {
        return Optional.ofNullable(this.nodeId);
    }
    /**
     * @return Port for node. Default `22` (string)
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Roles for the node. `controlplane`, `etcd` and `worker` are supported. (list)
     * 
     */
    public List<String> roles() {
        return this.roles;
    }
    /**
     * @return Use ssh agent auth. Default `false` (bool)
     * 
     */
    public Optional<Boolean> sshAgentAuth() {
        return Optional.ofNullable(this.sshAgentAuth);
    }
    /**
     * @return Node SSH private key (string)
     * 
     */
    public Optional<String> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }
    /**
     * @return Node SSH private key path (string)
     * 
     */
    public Optional<String> sshKeyPath() {
        return Optional.ofNullable(this.sshKeyPath);
    }
    /**
     * @return Registry user (string)
     * 
     */
    public String user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterRkeConfigNode defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String address;
        private @Nullable String dockerSocket;
        private @Nullable String hostnameOverride;
        private @Nullable String internalAddress;
        private @Nullable Map<String,Object> labels;
        private @Nullable String nodeId;
        private @Nullable String port;
        private List<String> roles;
        private @Nullable Boolean sshAgentAuth;
        private @Nullable String sshKey;
        private @Nullable String sshKeyPath;
        private String user;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterRkeConfigNode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.dockerSocket = defaults.dockerSocket;
    	      this.hostnameOverride = defaults.hostnameOverride;
    	      this.internalAddress = defaults.internalAddress;
    	      this.labels = defaults.labels;
    	      this.nodeId = defaults.nodeId;
    	      this.port = defaults.port;
    	      this.roles = defaults.roles;
    	      this.sshAgentAuth = defaults.sshAgentAuth;
    	      this.sshKey = defaults.sshKey;
    	      this.sshKeyPath = defaults.sshKeyPath;
    	      this.user = defaults.user;
        }

        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        public Builder dockerSocket(@Nullable String dockerSocket) {
            this.dockerSocket = dockerSocket;
            return this;
        }
        public Builder hostnameOverride(@Nullable String hostnameOverride) {
            this.hostnameOverride = hostnameOverride;
            return this;
        }
        public Builder internalAddress(@Nullable String internalAddress) {
            this.internalAddress = internalAddress;
            return this;
        }
        public Builder labels(@Nullable Map<String,Object> labels) {
            this.labels = labels;
            return this;
        }
        public Builder nodeId(@Nullable String nodeId) {
            this.nodeId = nodeId;
            return this;
        }
        public Builder port(@Nullable String port) {
            this.port = port;
            return this;
        }
        public Builder roles(List<String> roles) {
            this.roles = Objects.requireNonNull(roles);
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        public Builder sshAgentAuth(@Nullable Boolean sshAgentAuth) {
            this.sshAgentAuth = sshAgentAuth;
            return this;
        }
        public Builder sshKey(@Nullable String sshKey) {
            this.sshKey = sshKey;
            return this;
        }
        public Builder sshKeyPath(@Nullable String sshKeyPath) {
            this.sshKeyPath = sshKeyPath;
            return this;
        }
        public Builder user(String user) {
            this.user = Objects.requireNonNull(user);
            return this;
        }        public ClusterRkeConfigNode build() {
            return new ClusterRkeConfigNode(address, dockerSocket, hostnameOverride, internalAddress, labels, nodeId, port, roles, sshAgentAuth, sshKey, sshKeyPath, user);
        }
    }
}
