// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeTemplateHetznerConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeTemplateHetznerConfigArgs Empty = new NodeTemplateHetznerConfigArgs();

    /**
     * Hetzner Cloud project API token (string)
     * 
     */
    @Import(name="apiToken", required=true)
    private Output<String> apiToken;

    /**
     * @return Hetzner Cloud project API token (string)
     * 
     */
    public Output<String> apiToken() {
        return this.apiToken;
    }

    /**
     * Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Comma-separated list of network IDs or names which should be attached to the server private network interface (string)
     * 
     */
    @Import(name="networks")
    private @Nullable Output<String> networks;

    /**
     * @return Comma-separated list of network IDs or names which should be attached to the server private network interface (string)
     * 
     */
    public Optional<Output<String>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * Map of the labels which will be assigned to the server. This argument is only available on [Hetzner Docker Node Driver:v3.6.0](https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/tag/3.6.0) and above (map)
     * 
     */
    @Import(name="serverLabels")
    private @Nullable Output<Map<String,Object>> serverLabels;

    /**
     * @return Map of the labels which will be assigned to the server. This argument is only available on [Hetzner Docker Node Driver:v3.6.0](https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/tag/3.6.0) and above (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> serverLabels() {
        return Optional.ofNullable(this.serverLabels);
    }

    /**
     * Hetzner Cloud datacenter. Default `nbg1` (string)
     * 
     */
    @Import(name="serverLocation")
    private @Nullable Output<String> serverLocation;

    /**
     * @return Hetzner Cloud datacenter. Default `nbg1` (string)
     * 
     */
    public Optional<Output<String>> serverLocation() {
        return Optional.ofNullable(this.serverLocation);
    }

    /**
     * Hetzner Cloud server type. Default `cx11` (string)
     * 
     */
    @Import(name="serverType")
    private @Nullable Output<String> serverType;

    /**
     * @return Hetzner Cloud server type. Default `cx11` (string)
     * 
     */
    public Optional<Output<String>> serverType() {
        return Optional.ofNullable(this.serverType);
    }

    /**
     * Use private network. Default `false` (bool)
     * 
     */
    @Import(name="usePrivateNetwork")
    private @Nullable Output<Boolean> usePrivateNetwork;

    /**
     * @return Use private network. Default `false` (bool)
     * 
     */
    public Optional<Output<Boolean>> usePrivateNetwork() {
        return Optional.ofNullable(this.usePrivateNetwork);
    }

    /**
     * Path to file with cloud-init user-data (string)
     * 
     */
    @Import(name="userdata")
    private @Nullable Output<String> userdata;

    /**
     * @return Path to file with cloud-init user-data (string)
     * 
     */
    public Optional<Output<String>> userdata() {
        return Optional.ofNullable(this.userdata);
    }

    /**
     * Comma-separated list of volume IDs or names which should be attached to the server (string)
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<String> volumes;

    /**
     * @return Comma-separated list of volume IDs or names which should be attached to the server (string)
     * 
     */
    public Optional<Output<String>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private NodeTemplateHetznerConfigArgs() {}

    private NodeTemplateHetznerConfigArgs(NodeTemplateHetznerConfigArgs $) {
        this.apiToken = $.apiToken;
        this.image = $.image;
        this.networks = $.networks;
        this.serverLabels = $.serverLabels;
        this.serverLocation = $.serverLocation;
        this.serverType = $.serverType;
        this.usePrivateNetwork = $.usePrivateNetwork;
        this.userdata = $.userdata;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeTemplateHetznerConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeTemplateHetznerConfigArgs $;

        public Builder() {
            $ = new NodeTemplateHetznerConfigArgs();
        }

        public Builder(NodeTemplateHetznerConfigArgs defaults) {
            $ = new NodeTemplateHetznerConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiToken Hetzner Cloud project API token (string)
         * 
         * @return builder
         * 
         */
        public Builder apiToken(Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        /**
         * @param apiToken Hetzner Cloud project API token (string)
         * 
         * @return builder
         * 
         */
        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        /**
         * @param image Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param networks Comma-separated list of network IDs or names which should be attached to the server private network interface (string)
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<String> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks Comma-separated list of network IDs or names which should be attached to the server private network interface (string)
         * 
         * @return builder
         * 
         */
        public Builder networks(String networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param serverLabels Map of the labels which will be assigned to the server. This argument is only available on [Hetzner Docker Node Driver:v3.6.0](https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/tag/3.6.0) and above (map)
         * 
         * @return builder
         * 
         */
        public Builder serverLabels(@Nullable Output<Map<String,Object>> serverLabels) {
            $.serverLabels = serverLabels;
            return this;
        }

        /**
         * @param serverLabels Map of the labels which will be assigned to the server. This argument is only available on [Hetzner Docker Node Driver:v3.6.0](https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/tag/3.6.0) and above (map)
         * 
         * @return builder
         * 
         */
        public Builder serverLabels(Map<String,Object> serverLabels) {
            return serverLabels(Output.of(serverLabels));
        }

        /**
         * @param serverLocation Hetzner Cloud datacenter. Default `nbg1` (string)
         * 
         * @return builder
         * 
         */
        public Builder serverLocation(@Nullable Output<String> serverLocation) {
            $.serverLocation = serverLocation;
            return this;
        }

        /**
         * @param serverLocation Hetzner Cloud datacenter. Default `nbg1` (string)
         * 
         * @return builder
         * 
         */
        public Builder serverLocation(String serverLocation) {
            return serverLocation(Output.of(serverLocation));
        }

        /**
         * @param serverType Hetzner Cloud server type. Default `cx11` (string)
         * 
         * @return builder
         * 
         */
        public Builder serverType(@Nullable Output<String> serverType) {
            $.serverType = serverType;
            return this;
        }

        /**
         * @param serverType Hetzner Cloud server type. Default `cx11` (string)
         * 
         * @return builder
         * 
         */
        public Builder serverType(String serverType) {
            return serverType(Output.of(serverType));
        }

        /**
         * @param usePrivateNetwork Use private network. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder usePrivateNetwork(@Nullable Output<Boolean> usePrivateNetwork) {
            $.usePrivateNetwork = usePrivateNetwork;
            return this;
        }

        /**
         * @param usePrivateNetwork Use private network. Default `false` (bool)
         * 
         * @return builder
         * 
         */
        public Builder usePrivateNetwork(Boolean usePrivateNetwork) {
            return usePrivateNetwork(Output.of(usePrivateNetwork));
        }

        /**
         * @param userdata Path to file with cloud-init user-data (string)
         * 
         * @return builder
         * 
         */
        public Builder userdata(@Nullable Output<String> userdata) {
            $.userdata = userdata;
            return this;
        }

        /**
         * @param userdata Path to file with cloud-init user-data (string)
         * 
         * @return builder
         * 
         */
        public Builder userdata(String userdata) {
            return userdata(Output.of(userdata));
        }

        /**
         * @param volumes Comma-separated list of volume IDs or names which should be attached to the server (string)
         * 
         * @return builder
         * 
         */
        public Builder volumes(@Nullable Output<String> volumes) {
            $.volumes = volumes;
            return this;
        }

        /**
         * @param volumes Comma-separated list of volume IDs or names which should be attached to the server (string)
         * 
         * @return builder
         * 
         */
        public Builder volumes(String volumes) {
            return volumes(Output.of(volumes));
        }

        public NodeTemplateHetznerConfigArgs build() {
            $.apiToken = Objects.requireNonNull($.apiToken, "expected parameter 'apiToken' to be non-null");
            return $;
        }
    }

}
