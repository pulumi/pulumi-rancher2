// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.rancher2.outputs.GetProjectLoggingCustomTargetConfig;
import com.pulumi.rancher2.outputs.GetProjectLoggingElasticsearchConfig;
import com.pulumi.rancher2.outputs.GetProjectLoggingFluentdConfig;
import com.pulumi.rancher2.outputs.GetProjectLoggingKafkaConfig;
import com.pulumi.rancher2.outputs.GetProjectLoggingSplunkConfig;
import com.pulumi.rancher2.outputs.GetProjectLoggingSyslogConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetProjectLoggingResult {
    /**
     * @return (Computed) Annotations for Cluster Logging object (map)
     * 
     */
    private Map<String,Object> annotations;
    private GetProjectLoggingCustomTargetConfig customTargetConfig;
    /**
     * @return (Computed) The elasticsearch config for Cluster Logging. For `kind = elasticsearch`  (list maxitems:1)
     * 
     */
    private GetProjectLoggingElasticsearchConfig elasticsearchConfig;
    private Boolean enableJsonParsing;
    /**
     * @return (Computed) The fluentd config for Cluster Logging. For `kind = fluentd` (list maxitems:1)
     * 
     */
    private GetProjectLoggingFluentdConfig fluentdConfig;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return (Computed) The kafka config for Cluster Logging. For `kind = kafka` (list maxitems:1)
     * 
     */
    private GetProjectLoggingKafkaConfig kafkaConfig;
    /**
     * @return (Computed) The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
     * 
     */
    private String kind;
    /**
     * @return (Computed) Labels for Cluster Logging object (map)
     * 
     */
    private Map<String,Object> labels;
    /**
     * @return (Computed) The name of the cluster logging config (string)
     * 
     */
    private String name;
    /**
     * @return (Computed) The namespace id from cluster logging (string)
     * 
     */
    private String namespaceId;
    /**
     * @return (Computed) How often buffered logs would be flushed. Default: `3` seconds (int)
     * 
     */
    private Integer outputFlushInterval;
    /**
     * @return (computed) The output tags for Cluster Logging (map)
     * 
     */
    private Map<String,Object> outputTags;
    private String projectId;
    /**
     * @return (Computed) The splunk config for Cluster Logging. For `kind = splunk` (list maxitems:1)
     * 
     */
    private GetProjectLoggingSplunkConfig splunkConfig;
    /**
     * @return (Computed) The syslog config for Cluster Logging. For `kind = syslog` (list maxitems:1)
     * 
     */
    private GetProjectLoggingSyslogConfig syslogConfig;

    private GetProjectLoggingResult() {}
    /**
     * @return (Computed) Annotations for Cluster Logging object (map)
     * 
     */
    public Map<String,Object> annotations() {
        return this.annotations;
    }
    public GetProjectLoggingCustomTargetConfig customTargetConfig() {
        return this.customTargetConfig;
    }
    /**
     * @return (Computed) The elasticsearch config for Cluster Logging. For `kind = elasticsearch`  (list maxitems:1)
     * 
     */
    public GetProjectLoggingElasticsearchConfig elasticsearchConfig() {
        return this.elasticsearchConfig;
    }
    public Boolean enableJsonParsing() {
        return this.enableJsonParsing;
    }
    /**
     * @return (Computed) The fluentd config for Cluster Logging. For `kind = fluentd` (list maxitems:1)
     * 
     */
    public GetProjectLoggingFluentdConfig fluentdConfig() {
        return this.fluentdConfig;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return (Computed) The kafka config for Cluster Logging. For `kind = kafka` (list maxitems:1)
     * 
     */
    public GetProjectLoggingKafkaConfig kafkaConfig() {
        return this.kafkaConfig;
    }
    /**
     * @return (Computed) The kind of the Cluster Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return (Computed) Labels for Cluster Logging object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    /**
     * @return (Computed) The name of the cluster logging config (string)
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Computed) The namespace id from cluster logging (string)
     * 
     */
    public String namespaceId() {
        return this.namespaceId;
    }
    /**
     * @return (Computed) How often buffered logs would be flushed. Default: `3` seconds (int)
     * 
     */
    public Integer outputFlushInterval() {
        return this.outputFlushInterval;
    }
    /**
     * @return (computed) The output tags for Cluster Logging (map)
     * 
     */
    public Map<String,Object> outputTags() {
        return this.outputTags;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return (Computed) The splunk config for Cluster Logging. For `kind = splunk` (list maxitems:1)
     * 
     */
    public GetProjectLoggingSplunkConfig splunkConfig() {
        return this.splunkConfig;
    }
    /**
     * @return (Computed) The syslog config for Cluster Logging. For `kind = syslog` (list maxitems:1)
     * 
     */
    public GetProjectLoggingSyslogConfig syslogConfig() {
        return this.syslogConfig;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectLoggingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,Object> annotations;
        private GetProjectLoggingCustomTargetConfig customTargetConfig;
        private GetProjectLoggingElasticsearchConfig elasticsearchConfig;
        private Boolean enableJsonParsing;
        private GetProjectLoggingFluentdConfig fluentdConfig;
        private String id;
        private GetProjectLoggingKafkaConfig kafkaConfig;
        private String kind;
        private Map<String,Object> labels;
        private String name;
        private String namespaceId;
        private Integer outputFlushInterval;
        private Map<String,Object> outputTags;
        private String projectId;
        private GetProjectLoggingSplunkConfig splunkConfig;
        private GetProjectLoggingSyslogConfig syslogConfig;
        public Builder() {}
        public Builder(GetProjectLoggingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.customTargetConfig = defaults.customTargetConfig;
    	      this.elasticsearchConfig = defaults.elasticsearchConfig;
    	      this.enableJsonParsing = defaults.enableJsonParsing;
    	      this.fluentdConfig = defaults.fluentdConfig;
    	      this.id = defaults.id;
    	      this.kafkaConfig = defaults.kafkaConfig;
    	      this.kind = defaults.kind;
    	      this.labels = defaults.labels;
    	      this.name = defaults.name;
    	      this.namespaceId = defaults.namespaceId;
    	      this.outputFlushInterval = defaults.outputFlushInterval;
    	      this.outputTags = defaults.outputTags;
    	      this.projectId = defaults.projectId;
    	      this.splunkConfig = defaults.splunkConfig;
    	      this.syslogConfig = defaults.syslogConfig;
        }

        @CustomType.Setter
        public Builder annotations(Map<String,Object> annotations) {
            this.annotations = Objects.requireNonNull(annotations);
            return this;
        }
        @CustomType.Setter
        public Builder customTargetConfig(GetProjectLoggingCustomTargetConfig customTargetConfig) {
            this.customTargetConfig = Objects.requireNonNull(customTargetConfig);
            return this;
        }
        @CustomType.Setter
        public Builder elasticsearchConfig(GetProjectLoggingElasticsearchConfig elasticsearchConfig) {
            this.elasticsearchConfig = Objects.requireNonNull(elasticsearchConfig);
            return this;
        }
        @CustomType.Setter
        public Builder enableJsonParsing(Boolean enableJsonParsing) {
            this.enableJsonParsing = Objects.requireNonNull(enableJsonParsing);
            return this;
        }
        @CustomType.Setter
        public Builder fluentdConfig(GetProjectLoggingFluentdConfig fluentdConfig) {
            this.fluentdConfig = Objects.requireNonNull(fluentdConfig);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder kafkaConfig(GetProjectLoggingKafkaConfig kafkaConfig) {
            this.kafkaConfig = Objects.requireNonNull(kafkaConfig);
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(String namespaceId) {
            this.namespaceId = Objects.requireNonNull(namespaceId);
            return this;
        }
        @CustomType.Setter
        public Builder outputFlushInterval(Integer outputFlushInterval) {
            this.outputFlushInterval = Objects.requireNonNull(outputFlushInterval);
            return this;
        }
        @CustomType.Setter
        public Builder outputTags(Map<String,Object> outputTags) {
            this.outputTags = Objects.requireNonNull(outputTags);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder splunkConfig(GetProjectLoggingSplunkConfig splunkConfig) {
            this.splunkConfig = Objects.requireNonNull(splunkConfig);
            return this;
        }
        @CustomType.Setter
        public Builder syslogConfig(GetProjectLoggingSyslogConfig syslogConfig) {
            this.syslogConfig = Objects.requireNonNull(syslogConfig);
            return this;
        }
        public GetProjectLoggingResult build() {
            final var o = new GetProjectLoggingResult();
            o.annotations = annotations;
            o.customTargetConfig = customTargetConfig;
            o.elasticsearchConfig = elasticsearchConfig;
            o.enableJsonParsing = enableJsonParsing;
            o.fluentdConfig = fluentdConfig;
            o.id = id;
            o.kafkaConfig = kafkaConfig;
            o.kind = kind;
            o.labels = labels;
            o.name = name;
            o.namespaceId = namespaceId;
            o.outputFlushInterval = outputFlushInterval;
            o.outputTags = outputTags;
            o.projectId = projectId;
            o.splunkConfig = splunkConfig;
            o.syslogConfig = syslogConfig;
            return o;
        }
    }
}
