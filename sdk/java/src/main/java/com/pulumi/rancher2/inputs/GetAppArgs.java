// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAppArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAppArgs Empty = new GetAppArgs();

    /**
     * (Computed) Annotations for the catalog (map)
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,Object>> annotations;

    /**
     * @return (Computed) Annotations for the catalog (map)
     * 
     */
    public Optional<Output<Map<String,Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The app name (string)
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The app name (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The id of the project where the app is deployed (string)
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The id of the project where the app is deployed (string)
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * The namespace name where the app is deployed (string)
     * 
     */
    @Import(name="targetNamespace")
    private @Nullable Output<String> targetNamespace;

    /**
     * @return The namespace name where the app is deployed (string)
     * 
     */
    public Optional<Output<String>> targetNamespace() {
        return Optional.ofNullable(this.targetNamespace);
    }

    private GetAppArgs() {}

    private GetAppArgs(GetAppArgs $) {
        this.annotations = $.annotations;
        this.name = $.name;
        this.projectId = $.projectId;
        this.targetNamespace = $.targetNamespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAppArgs $;

        public Builder() {
            $ = new GetAppArgs();
        }

        public Builder(GetAppArgs defaults) {
            $ = new GetAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations (Computed) Annotations for the catalog (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations (Computed) Annotations for the catalog (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,Object> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param name The app name (string)
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The app name (string)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The id of the project where the app is deployed (string)
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The id of the project where the app is deployed (string)
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param targetNamespace The namespace name where the app is deployed (string)
         * 
         * @return builder
         * 
         */
        public Builder targetNamespace(@Nullable Output<String> targetNamespace) {
            $.targetNamespace = targetNamespace;
            return this;
        }

        /**
         * @param targetNamespace The namespace name where the app is deployed (string)
         * 
         * @return builder
         * 
         */
        public Builder targetNamespace(String targetNamespace) {
            return targetNamespace(Output.of(targetNamespace));
        }

        public GetAppArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            return $;
        }
    }

}
