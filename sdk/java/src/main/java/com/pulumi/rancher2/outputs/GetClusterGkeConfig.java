// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClusterGkeConfig {
    private String clusterIpv4Cidr;
    private String credential;
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    private @Nullable String description;
    private @Nullable Integer diskSizeGb;
    private String diskType;
    private @Nullable Boolean enableAlphaFeature;
    private @Nullable Boolean enableAutoRepair;
    private @Nullable Boolean enableAutoUpgrade;
    private @Nullable Boolean enableHorizontalPodAutoscaling;
    private @Nullable Boolean enableHttpLoadBalancing;
    private @Nullable Boolean enableKubernetesDashboard;
    private @Nullable Boolean enableLegacyAbac;
    private @Nullable Boolean enableMasterAuthorizedNetwork;
    private @Nullable Boolean enableNetworkPolicyConfig;
    private @Nullable Boolean enableNodepoolAutoscaling;
    private @Nullable Boolean enablePrivateEndpoint;
    private @Nullable Boolean enablePrivateNodes;
    private @Nullable Boolean enableStackdriverLogging;
    private @Nullable Boolean enableStackdriverMonitoring;
    private String imageType;
    private String ipPolicyClusterIpv4CidrBlock;
    private String ipPolicyClusterSecondaryRangeName;
    private @Nullable Boolean ipPolicyCreateSubnetwork;
    private String ipPolicyNodeIpv4CidrBlock;
    private String ipPolicyServicesIpv4CidrBlock;
    private String ipPolicyServicesSecondaryRangeName;
    private String ipPolicySubnetworkName;
    private @Nullable Boolean issueClientCertificate;
    private @Nullable Boolean kubernetesDashboard;
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    private Map<String,Object> labels;
    private @Nullable Integer localSsdCount;
    private List<String> locations;
    private String machineType;
    private String maintenanceWindow;
    private @Nullable List<String> masterAuthorizedNetworkCidrBlocks;
    private String masterIpv4CidrBlock;
    private String masterVersion;
    private @Nullable Integer maxNodeCount;
    private @Nullable Integer minNodeCount;
    private String network;
    private @Nullable Integer nodeCount;
    private String nodePool;
    private String nodeVersion;
    private List<String> oauthScopes;
    private @Nullable Boolean preemptible;
    private String projectId;
    private @Nullable String region;
    private Map<String,Object> resourceLabels;
    private String serviceAccount;
    private String subNetwork;
    private @Nullable List<String> taints;
    private @Nullable Boolean useIpAliases;
    private @Nullable String zone;

    private GetClusterGkeConfig() {}
    public String clusterIpv4Cidr() {
        return this.clusterIpv4Cidr;
    }
    public String credential() {
        return this.credential;
    }
    /**
     * @return (Computed) The description for Cluster (string)
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public Optional<Integer> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }
    public String diskType() {
        return this.diskType;
    }
    public Optional<Boolean> enableAlphaFeature() {
        return Optional.ofNullable(this.enableAlphaFeature);
    }
    public Optional<Boolean> enableAutoRepair() {
        return Optional.ofNullable(this.enableAutoRepair);
    }
    public Optional<Boolean> enableAutoUpgrade() {
        return Optional.ofNullable(this.enableAutoUpgrade);
    }
    public Optional<Boolean> enableHorizontalPodAutoscaling() {
        return Optional.ofNullable(this.enableHorizontalPodAutoscaling);
    }
    public Optional<Boolean> enableHttpLoadBalancing() {
        return Optional.ofNullable(this.enableHttpLoadBalancing);
    }
    public Optional<Boolean> enableKubernetesDashboard() {
        return Optional.ofNullable(this.enableKubernetesDashboard);
    }
    public Optional<Boolean> enableLegacyAbac() {
        return Optional.ofNullable(this.enableLegacyAbac);
    }
    public Optional<Boolean> enableMasterAuthorizedNetwork() {
        return Optional.ofNullable(this.enableMasterAuthorizedNetwork);
    }
    public Optional<Boolean> enableNetworkPolicyConfig() {
        return Optional.ofNullable(this.enableNetworkPolicyConfig);
    }
    public Optional<Boolean> enableNodepoolAutoscaling() {
        return Optional.ofNullable(this.enableNodepoolAutoscaling);
    }
    public Optional<Boolean> enablePrivateEndpoint() {
        return Optional.ofNullable(this.enablePrivateEndpoint);
    }
    public Optional<Boolean> enablePrivateNodes() {
        return Optional.ofNullable(this.enablePrivateNodes);
    }
    public Optional<Boolean> enableStackdriverLogging() {
        return Optional.ofNullable(this.enableStackdriverLogging);
    }
    public Optional<Boolean> enableStackdriverMonitoring() {
        return Optional.ofNullable(this.enableStackdriverMonitoring);
    }
    public String imageType() {
        return this.imageType;
    }
    public String ipPolicyClusterIpv4CidrBlock() {
        return this.ipPolicyClusterIpv4CidrBlock;
    }
    public String ipPolicyClusterSecondaryRangeName() {
        return this.ipPolicyClusterSecondaryRangeName;
    }
    public Optional<Boolean> ipPolicyCreateSubnetwork() {
        return Optional.ofNullable(this.ipPolicyCreateSubnetwork);
    }
    public String ipPolicyNodeIpv4CidrBlock() {
        return this.ipPolicyNodeIpv4CidrBlock;
    }
    public String ipPolicyServicesIpv4CidrBlock() {
        return this.ipPolicyServicesIpv4CidrBlock;
    }
    public String ipPolicyServicesSecondaryRangeName() {
        return this.ipPolicyServicesSecondaryRangeName;
    }
    public String ipPolicySubnetworkName() {
        return this.ipPolicySubnetworkName;
    }
    public Optional<Boolean> issueClientCertificate() {
        return Optional.ofNullable(this.issueClientCertificate);
    }
    public Optional<Boolean> kubernetesDashboard() {
        return Optional.ofNullable(this.kubernetesDashboard);
    }
    /**
     * @return (Computed) Labels for Node Pool object (map)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    public Optional<Integer> localSsdCount() {
        return Optional.ofNullable(this.localSsdCount);
    }
    public List<String> locations() {
        return this.locations;
    }
    public String machineType() {
        return this.machineType;
    }
    public String maintenanceWindow() {
        return this.maintenanceWindow;
    }
    public List<String> masterAuthorizedNetworkCidrBlocks() {
        return this.masterAuthorizedNetworkCidrBlocks == null ? List.of() : this.masterAuthorizedNetworkCidrBlocks;
    }
    public String masterIpv4CidrBlock() {
        return this.masterIpv4CidrBlock;
    }
    public String masterVersion() {
        return this.masterVersion;
    }
    public Optional<Integer> maxNodeCount() {
        return Optional.ofNullable(this.maxNodeCount);
    }
    public Optional<Integer> minNodeCount() {
        return Optional.ofNullable(this.minNodeCount);
    }
    public String network() {
        return this.network;
    }
    public Optional<Integer> nodeCount() {
        return Optional.ofNullable(this.nodeCount);
    }
    public String nodePool() {
        return this.nodePool;
    }
    public String nodeVersion() {
        return this.nodeVersion;
    }
    public List<String> oauthScopes() {
        return this.oauthScopes;
    }
    public Optional<Boolean> preemptible() {
        return Optional.ofNullable(this.preemptible);
    }
    public String projectId() {
        return this.projectId;
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Map<String,Object> resourceLabels() {
        return this.resourceLabels;
    }
    public String serviceAccount() {
        return this.serviceAccount;
    }
    public String subNetwork() {
        return this.subNetwork;
    }
    public List<String> taints() {
        return this.taints == null ? List.of() : this.taints;
    }
    public Optional<Boolean> useIpAliases() {
        return Optional.ofNullable(this.useIpAliases);
    }
    public Optional<String> zone() {
        return Optional.ofNullable(this.zone);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterGkeConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterIpv4Cidr;
        private String credential;
        private @Nullable String description;
        private @Nullable Integer diskSizeGb;
        private String diskType;
        private @Nullable Boolean enableAlphaFeature;
        private @Nullable Boolean enableAutoRepair;
        private @Nullable Boolean enableAutoUpgrade;
        private @Nullable Boolean enableHorizontalPodAutoscaling;
        private @Nullable Boolean enableHttpLoadBalancing;
        private @Nullable Boolean enableKubernetesDashboard;
        private @Nullable Boolean enableLegacyAbac;
        private @Nullable Boolean enableMasterAuthorizedNetwork;
        private @Nullable Boolean enableNetworkPolicyConfig;
        private @Nullable Boolean enableNodepoolAutoscaling;
        private @Nullable Boolean enablePrivateEndpoint;
        private @Nullable Boolean enablePrivateNodes;
        private @Nullable Boolean enableStackdriverLogging;
        private @Nullable Boolean enableStackdriverMonitoring;
        private String imageType;
        private String ipPolicyClusterIpv4CidrBlock;
        private String ipPolicyClusterSecondaryRangeName;
        private @Nullable Boolean ipPolicyCreateSubnetwork;
        private String ipPolicyNodeIpv4CidrBlock;
        private String ipPolicyServicesIpv4CidrBlock;
        private String ipPolicyServicesSecondaryRangeName;
        private String ipPolicySubnetworkName;
        private @Nullable Boolean issueClientCertificate;
        private @Nullable Boolean kubernetesDashboard;
        private Map<String,Object> labels;
        private @Nullable Integer localSsdCount;
        private List<String> locations;
        private String machineType;
        private String maintenanceWindow;
        private @Nullable List<String> masterAuthorizedNetworkCidrBlocks;
        private String masterIpv4CidrBlock;
        private String masterVersion;
        private @Nullable Integer maxNodeCount;
        private @Nullable Integer minNodeCount;
        private String network;
        private @Nullable Integer nodeCount;
        private String nodePool;
        private String nodeVersion;
        private List<String> oauthScopes;
        private @Nullable Boolean preemptible;
        private String projectId;
        private @Nullable String region;
        private Map<String,Object> resourceLabels;
        private String serviceAccount;
        private String subNetwork;
        private @Nullable List<String> taints;
        private @Nullable Boolean useIpAliases;
        private @Nullable String zone;
        public Builder() {}
        public Builder(GetClusterGkeConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterIpv4Cidr = defaults.clusterIpv4Cidr;
    	      this.credential = defaults.credential;
    	      this.description = defaults.description;
    	      this.diskSizeGb = defaults.diskSizeGb;
    	      this.diskType = defaults.diskType;
    	      this.enableAlphaFeature = defaults.enableAlphaFeature;
    	      this.enableAutoRepair = defaults.enableAutoRepair;
    	      this.enableAutoUpgrade = defaults.enableAutoUpgrade;
    	      this.enableHorizontalPodAutoscaling = defaults.enableHorizontalPodAutoscaling;
    	      this.enableHttpLoadBalancing = defaults.enableHttpLoadBalancing;
    	      this.enableKubernetesDashboard = defaults.enableKubernetesDashboard;
    	      this.enableLegacyAbac = defaults.enableLegacyAbac;
    	      this.enableMasterAuthorizedNetwork = defaults.enableMasterAuthorizedNetwork;
    	      this.enableNetworkPolicyConfig = defaults.enableNetworkPolicyConfig;
    	      this.enableNodepoolAutoscaling = defaults.enableNodepoolAutoscaling;
    	      this.enablePrivateEndpoint = defaults.enablePrivateEndpoint;
    	      this.enablePrivateNodes = defaults.enablePrivateNodes;
    	      this.enableStackdriverLogging = defaults.enableStackdriverLogging;
    	      this.enableStackdriverMonitoring = defaults.enableStackdriverMonitoring;
    	      this.imageType = defaults.imageType;
    	      this.ipPolicyClusterIpv4CidrBlock = defaults.ipPolicyClusterIpv4CidrBlock;
    	      this.ipPolicyClusterSecondaryRangeName = defaults.ipPolicyClusterSecondaryRangeName;
    	      this.ipPolicyCreateSubnetwork = defaults.ipPolicyCreateSubnetwork;
    	      this.ipPolicyNodeIpv4CidrBlock = defaults.ipPolicyNodeIpv4CidrBlock;
    	      this.ipPolicyServicesIpv4CidrBlock = defaults.ipPolicyServicesIpv4CidrBlock;
    	      this.ipPolicyServicesSecondaryRangeName = defaults.ipPolicyServicesSecondaryRangeName;
    	      this.ipPolicySubnetworkName = defaults.ipPolicySubnetworkName;
    	      this.issueClientCertificate = defaults.issueClientCertificate;
    	      this.kubernetesDashboard = defaults.kubernetesDashboard;
    	      this.labels = defaults.labels;
    	      this.localSsdCount = defaults.localSsdCount;
    	      this.locations = defaults.locations;
    	      this.machineType = defaults.machineType;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.masterAuthorizedNetworkCidrBlocks = defaults.masterAuthorizedNetworkCidrBlocks;
    	      this.masterIpv4CidrBlock = defaults.masterIpv4CidrBlock;
    	      this.masterVersion = defaults.masterVersion;
    	      this.maxNodeCount = defaults.maxNodeCount;
    	      this.minNodeCount = defaults.minNodeCount;
    	      this.network = defaults.network;
    	      this.nodeCount = defaults.nodeCount;
    	      this.nodePool = defaults.nodePool;
    	      this.nodeVersion = defaults.nodeVersion;
    	      this.oauthScopes = defaults.oauthScopes;
    	      this.preemptible = defaults.preemptible;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.resourceLabels = defaults.resourceLabels;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.subNetwork = defaults.subNetwork;
    	      this.taints = defaults.taints;
    	      this.useIpAliases = defaults.useIpAliases;
    	      this.zone = defaults.zone;
        }

        @CustomType.Setter
        public Builder clusterIpv4Cidr(String clusterIpv4Cidr) {
            this.clusterIpv4Cidr = Objects.requireNonNull(clusterIpv4Cidr);
            return this;
        }
        @CustomType.Setter
        public Builder credential(String credential) {
            this.credential = Objects.requireNonNull(credential);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder diskSizeGb(@Nullable Integer diskSizeGb) {
            this.diskSizeGb = diskSizeGb;
            return this;
        }
        @CustomType.Setter
        public Builder diskType(String diskType) {
            this.diskType = Objects.requireNonNull(diskType);
            return this;
        }
        @CustomType.Setter
        public Builder enableAlphaFeature(@Nullable Boolean enableAlphaFeature) {
            this.enableAlphaFeature = enableAlphaFeature;
            return this;
        }
        @CustomType.Setter
        public Builder enableAutoRepair(@Nullable Boolean enableAutoRepair) {
            this.enableAutoRepair = enableAutoRepair;
            return this;
        }
        @CustomType.Setter
        public Builder enableAutoUpgrade(@Nullable Boolean enableAutoUpgrade) {
            this.enableAutoUpgrade = enableAutoUpgrade;
            return this;
        }
        @CustomType.Setter
        public Builder enableHorizontalPodAutoscaling(@Nullable Boolean enableHorizontalPodAutoscaling) {
            this.enableHorizontalPodAutoscaling = enableHorizontalPodAutoscaling;
            return this;
        }
        @CustomType.Setter
        public Builder enableHttpLoadBalancing(@Nullable Boolean enableHttpLoadBalancing) {
            this.enableHttpLoadBalancing = enableHttpLoadBalancing;
            return this;
        }
        @CustomType.Setter
        public Builder enableKubernetesDashboard(@Nullable Boolean enableKubernetesDashboard) {
            this.enableKubernetesDashboard = enableKubernetesDashboard;
            return this;
        }
        @CustomType.Setter
        public Builder enableLegacyAbac(@Nullable Boolean enableLegacyAbac) {
            this.enableLegacyAbac = enableLegacyAbac;
            return this;
        }
        @CustomType.Setter
        public Builder enableMasterAuthorizedNetwork(@Nullable Boolean enableMasterAuthorizedNetwork) {
            this.enableMasterAuthorizedNetwork = enableMasterAuthorizedNetwork;
            return this;
        }
        @CustomType.Setter
        public Builder enableNetworkPolicyConfig(@Nullable Boolean enableNetworkPolicyConfig) {
            this.enableNetworkPolicyConfig = enableNetworkPolicyConfig;
            return this;
        }
        @CustomType.Setter
        public Builder enableNodepoolAutoscaling(@Nullable Boolean enableNodepoolAutoscaling) {
            this.enableNodepoolAutoscaling = enableNodepoolAutoscaling;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateEndpoint(@Nullable Boolean enablePrivateEndpoint) {
            this.enablePrivateEndpoint = enablePrivateEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder enablePrivateNodes(@Nullable Boolean enablePrivateNodes) {
            this.enablePrivateNodes = enablePrivateNodes;
            return this;
        }
        @CustomType.Setter
        public Builder enableStackdriverLogging(@Nullable Boolean enableStackdriverLogging) {
            this.enableStackdriverLogging = enableStackdriverLogging;
            return this;
        }
        @CustomType.Setter
        public Builder enableStackdriverMonitoring(@Nullable Boolean enableStackdriverMonitoring) {
            this.enableStackdriverMonitoring = enableStackdriverMonitoring;
            return this;
        }
        @CustomType.Setter
        public Builder imageType(String imageType) {
            this.imageType = Objects.requireNonNull(imageType);
            return this;
        }
        @CustomType.Setter
        public Builder ipPolicyClusterIpv4CidrBlock(String ipPolicyClusterIpv4CidrBlock) {
            this.ipPolicyClusterIpv4CidrBlock = Objects.requireNonNull(ipPolicyClusterIpv4CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder ipPolicyClusterSecondaryRangeName(String ipPolicyClusterSecondaryRangeName) {
            this.ipPolicyClusterSecondaryRangeName = Objects.requireNonNull(ipPolicyClusterSecondaryRangeName);
            return this;
        }
        @CustomType.Setter
        public Builder ipPolicyCreateSubnetwork(@Nullable Boolean ipPolicyCreateSubnetwork) {
            this.ipPolicyCreateSubnetwork = ipPolicyCreateSubnetwork;
            return this;
        }
        @CustomType.Setter
        public Builder ipPolicyNodeIpv4CidrBlock(String ipPolicyNodeIpv4CidrBlock) {
            this.ipPolicyNodeIpv4CidrBlock = Objects.requireNonNull(ipPolicyNodeIpv4CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder ipPolicyServicesIpv4CidrBlock(String ipPolicyServicesIpv4CidrBlock) {
            this.ipPolicyServicesIpv4CidrBlock = Objects.requireNonNull(ipPolicyServicesIpv4CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder ipPolicyServicesSecondaryRangeName(String ipPolicyServicesSecondaryRangeName) {
            this.ipPolicyServicesSecondaryRangeName = Objects.requireNonNull(ipPolicyServicesSecondaryRangeName);
            return this;
        }
        @CustomType.Setter
        public Builder ipPolicySubnetworkName(String ipPolicySubnetworkName) {
            this.ipPolicySubnetworkName = Objects.requireNonNull(ipPolicySubnetworkName);
            return this;
        }
        @CustomType.Setter
        public Builder issueClientCertificate(@Nullable Boolean issueClientCertificate) {
            this.issueClientCertificate = issueClientCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder kubernetesDashboard(@Nullable Boolean kubernetesDashboard) {
            this.kubernetesDashboard = kubernetesDashboard;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder localSsdCount(@Nullable Integer localSsdCount) {
            this.localSsdCount = localSsdCount;
            return this;
        }
        @CustomType.Setter
        public Builder locations(List<String> locations) {
            this.locations = Objects.requireNonNull(locations);
            return this;
        }
        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder machineType(String machineType) {
            this.machineType = Objects.requireNonNull(machineType);
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceWindow(String maintenanceWindow) {
            this.maintenanceWindow = Objects.requireNonNull(maintenanceWindow);
            return this;
        }
        @CustomType.Setter
        public Builder masterAuthorizedNetworkCidrBlocks(@Nullable List<String> masterAuthorizedNetworkCidrBlocks) {
            this.masterAuthorizedNetworkCidrBlocks = masterAuthorizedNetworkCidrBlocks;
            return this;
        }
        public Builder masterAuthorizedNetworkCidrBlocks(String... masterAuthorizedNetworkCidrBlocks) {
            return masterAuthorizedNetworkCidrBlocks(List.of(masterAuthorizedNetworkCidrBlocks));
        }
        @CustomType.Setter
        public Builder masterIpv4CidrBlock(String masterIpv4CidrBlock) {
            this.masterIpv4CidrBlock = Objects.requireNonNull(masterIpv4CidrBlock);
            return this;
        }
        @CustomType.Setter
        public Builder masterVersion(String masterVersion) {
            this.masterVersion = Objects.requireNonNull(masterVersion);
            return this;
        }
        @CustomType.Setter
        public Builder maxNodeCount(@Nullable Integer maxNodeCount) {
            this.maxNodeCount = maxNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder minNodeCount(@Nullable Integer minNodeCount) {
            this.minNodeCount = minNodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder network(String network) {
            this.network = Objects.requireNonNull(network);
            return this;
        }
        @CustomType.Setter
        public Builder nodeCount(@Nullable Integer nodeCount) {
            this.nodeCount = nodeCount;
            return this;
        }
        @CustomType.Setter
        public Builder nodePool(String nodePool) {
            this.nodePool = Objects.requireNonNull(nodePool);
            return this;
        }
        @CustomType.Setter
        public Builder nodeVersion(String nodeVersion) {
            this.nodeVersion = Objects.requireNonNull(nodeVersion);
            return this;
        }
        @CustomType.Setter
        public Builder oauthScopes(List<String> oauthScopes) {
            this.oauthScopes = Objects.requireNonNull(oauthScopes);
            return this;
        }
        public Builder oauthScopes(String... oauthScopes) {
            return oauthScopes(List.of(oauthScopes));
        }
        @CustomType.Setter
        public Builder preemptible(@Nullable Boolean preemptible) {
            this.preemptible = preemptible;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder resourceLabels(Map<String,Object> resourceLabels) {
            this.resourceLabels = Objects.requireNonNull(resourceLabels);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        @CustomType.Setter
        public Builder subNetwork(String subNetwork) {
            this.subNetwork = Objects.requireNonNull(subNetwork);
            return this;
        }
        @CustomType.Setter
        public Builder taints(@Nullable List<String> taints) {
            this.taints = taints;
            return this;
        }
        public Builder taints(String... taints) {
            return taints(List.of(taints));
        }
        @CustomType.Setter
        public Builder useIpAliases(@Nullable Boolean useIpAliases) {
            this.useIpAliases = useIpAliases;
            return this;
        }
        @CustomType.Setter
        public Builder zone(@Nullable String zone) {
            this.zone = zone;
            return this;
        }
        public GetClusterGkeConfig build() {
            final var o = new GetClusterGkeConfig();
            o.clusterIpv4Cidr = clusterIpv4Cidr;
            o.credential = credential;
            o.description = description;
            o.diskSizeGb = diskSizeGb;
            o.diskType = diskType;
            o.enableAlphaFeature = enableAlphaFeature;
            o.enableAutoRepair = enableAutoRepair;
            o.enableAutoUpgrade = enableAutoUpgrade;
            o.enableHorizontalPodAutoscaling = enableHorizontalPodAutoscaling;
            o.enableHttpLoadBalancing = enableHttpLoadBalancing;
            o.enableKubernetesDashboard = enableKubernetesDashboard;
            o.enableLegacyAbac = enableLegacyAbac;
            o.enableMasterAuthorizedNetwork = enableMasterAuthorizedNetwork;
            o.enableNetworkPolicyConfig = enableNetworkPolicyConfig;
            o.enableNodepoolAutoscaling = enableNodepoolAutoscaling;
            o.enablePrivateEndpoint = enablePrivateEndpoint;
            o.enablePrivateNodes = enablePrivateNodes;
            o.enableStackdriverLogging = enableStackdriverLogging;
            o.enableStackdriverMonitoring = enableStackdriverMonitoring;
            o.imageType = imageType;
            o.ipPolicyClusterIpv4CidrBlock = ipPolicyClusterIpv4CidrBlock;
            o.ipPolicyClusterSecondaryRangeName = ipPolicyClusterSecondaryRangeName;
            o.ipPolicyCreateSubnetwork = ipPolicyCreateSubnetwork;
            o.ipPolicyNodeIpv4CidrBlock = ipPolicyNodeIpv4CidrBlock;
            o.ipPolicyServicesIpv4CidrBlock = ipPolicyServicesIpv4CidrBlock;
            o.ipPolicyServicesSecondaryRangeName = ipPolicyServicesSecondaryRangeName;
            o.ipPolicySubnetworkName = ipPolicySubnetworkName;
            o.issueClientCertificate = issueClientCertificate;
            o.kubernetesDashboard = kubernetesDashboard;
            o.labels = labels;
            o.localSsdCount = localSsdCount;
            o.locations = locations;
            o.machineType = machineType;
            o.maintenanceWindow = maintenanceWindow;
            o.masterAuthorizedNetworkCidrBlocks = masterAuthorizedNetworkCidrBlocks;
            o.masterIpv4CidrBlock = masterIpv4CidrBlock;
            o.masterVersion = masterVersion;
            o.maxNodeCount = maxNodeCount;
            o.minNodeCount = minNodeCount;
            o.network = network;
            o.nodeCount = nodeCount;
            o.nodePool = nodePool;
            o.nodeVersion = nodeVersion;
            o.oauthScopes = oauthScopes;
            o.preemptible = preemptible;
            o.projectId = projectId;
            o.region = region;
            o.resourceLabels = resourceLabels;
            o.serviceAccount = serviceAccount;
            o.subNetwork = subNetwork;
            o.taints = taints;
            o.useIpAliases = useIpAliases;
            o.zone = zone;
            return o;
        }
    }
}
