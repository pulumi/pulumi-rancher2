// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rancher2.inputs.NodeTemplateAmazonec2ConfigArgs;
import com.pulumi.rancher2.inputs.NodeTemplateAzureConfigArgs;
import com.pulumi.rancher2.inputs.NodeTemplateDigitaloceanConfigArgs;
import com.pulumi.rancher2.inputs.NodeTemplateHarvesterConfigArgs;
import com.pulumi.rancher2.inputs.NodeTemplateHetznerConfigArgs;
import com.pulumi.rancher2.inputs.NodeTemplateLinodeConfigArgs;
import com.pulumi.rancher2.inputs.NodeTemplateNodeTaintArgs;
import com.pulumi.rancher2.inputs.NodeTemplateOpennebulaConfigArgs;
import com.pulumi.rancher2.inputs.NodeTemplateOpenstackConfigArgs;
import com.pulumi.rancher2.inputs.NodeTemplateOutscaleConfigArgs;
import com.pulumi.rancher2.inputs.NodeTemplateVsphereConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NodeTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeTemplateArgs Empty = new NodeTemplateArgs();

    /**
     * AWS config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="amazonec2Config")
    private @Nullable Output<NodeTemplateAmazonec2ConfigArgs> amazonec2Config;

    /**
     * @return AWS config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateAmazonec2ConfigArgs>> amazonec2Config() {
        return Optional.ofNullable(this.amazonec2Config);
    }

    /**
     * Annotations for Node Template object (map)
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<Map<String,String>> annotations;

    /**
     * @return Annotations for Node Template object (map)
     * 
     */
    public Optional<Output<Map<String,String>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Auth certificate authority for the Node Template (string)
     * 
     */
    @Import(name="authCertificateAuthority")
    private @Nullable Output<String> authCertificateAuthority;

    /**
     * @return Auth certificate authority for the Node Template (string)
     * 
     */
    public Optional<Output<String>> authCertificateAuthority() {
        return Optional.ofNullable(this.authCertificateAuthority);
    }

    /**
     * Auth key for the Node Template (string)
     * 
     */
    @Import(name="authKey")
    private @Nullable Output<String> authKey;

    /**
     * @return Auth key for the Node Template (string)
     * 
     */
    public Optional<Output<String>> authKey() {
        return Optional.ofNullable(this.authKey);
    }

    /**
     * Azure config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="azureConfig")
    private @Nullable Output<NodeTemplateAzureConfigArgs> azureConfig;

    /**
     * @return Azure config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateAzureConfigArgs>> azureConfig() {
        return Optional.ofNullable(this.azureConfig);
    }

    /**
     * Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)
     * 
     */
    @Import(name="cloudCredentialId")
    private @Nullable Output<String> cloudCredentialId;

    /**
     * @return Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)
     * 
     */
    public Optional<Output<String>> cloudCredentialId() {
        return Optional.ofNullable(this.cloudCredentialId);
    }

    /**
     * Description for the Node Template (string)
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the Node Template (string)
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Digitalocean config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="digitaloceanConfig")
    private @Nullable Output<NodeTemplateDigitaloceanConfigArgs> digitaloceanConfig;

    /**
     * @return Digitalocean config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateDigitaloceanConfigArgs>> digitaloceanConfig() {
        return Optional.ofNullable(this.digitaloceanConfig);
    }

    /**
     * The node driver id used by the node template. It&#39;s required if the node driver isn&#39;t built in Rancher (string)
     * 
     */
    @Import(name="driverId")
    private @Nullable Output<String> driverId;

    /**
     * @return The node driver id used by the node template. It&#39;s required if the node driver isn&#39;t built in Rancher (string)
     * 
     */
    public Optional<Output<String>> driverId() {
        return Optional.ofNullable(this.driverId);
    }

    /**
     * Engine environment for the node template (string)
     * 
     */
    @Import(name="engineEnv")
    private @Nullable Output<Map<String,String>> engineEnv;

    /**
     * @return Engine environment for the node template (string)
     * 
     */
    public Optional<Output<Map<String,String>>> engineEnv() {
        return Optional.ofNullable(this.engineEnv);
    }

    /**
     * Insecure registry for the node template (list)
     * 
     */
    @Import(name="engineInsecureRegistries")
    private @Nullable Output<List<String>> engineInsecureRegistries;

    /**
     * @return Insecure registry for the node template (list)
     * 
     */
    public Optional<Output<List<String>>> engineInsecureRegistries() {
        return Optional.ofNullable(this.engineInsecureRegistries);
    }

    /**
     * Docker engine install URL for the node template. Available install docker versions at `https://github.com/rancher/install-docker` (string)
     * 
     */
    @Import(name="engineInstallUrl")
    private @Nullable Output<String> engineInstallUrl;

    /**
     * @return Docker engine install URL for the node template. Available install docker versions at `https://github.com/rancher/install-docker` (string)
     * 
     */
    public Optional<Output<String>> engineInstallUrl() {
        return Optional.ofNullable(this.engineInstallUrl);
    }

    /**
     * Engine label for the node template (string)
     * 
     */
    @Import(name="engineLabel")
    private @Nullable Output<Map<String,String>> engineLabel;

    /**
     * @return Engine label for the node template (string)
     * 
     */
    public Optional<Output<Map<String,String>>> engineLabel() {
        return Optional.ofNullable(this.engineLabel);
    }

    /**
     * Engine options for the node template (map)
     * 
     */
    @Import(name="engineOpt")
    private @Nullable Output<Map<String,String>> engineOpt;

    /**
     * @return Engine options for the node template (map)
     * 
     */
    public Optional<Output<Map<String,String>>> engineOpt() {
        return Optional.ofNullable(this.engineOpt);
    }

    /**
     * Engine registry mirror for the node template (list)
     * 
     */
    @Import(name="engineRegistryMirrors")
    private @Nullable Output<List<String>> engineRegistryMirrors;

    /**
     * @return Engine registry mirror for the node template (list)
     * 
     */
    public Optional<Output<List<String>>> engineRegistryMirrors() {
        return Optional.ofNullable(this.engineRegistryMirrors);
    }

    /**
     * Engine storage driver for the node template (string)
     * 
     */
    @Import(name="engineStorageDriver")
    private @Nullable Output<String> engineStorageDriver;

    /**
     * @return Engine storage driver for the node template (string)
     * 
     */
    public Optional<Output<String>> engineStorageDriver() {
        return Optional.ofNullable(this.engineStorageDriver);
    }

    /**
     * Harvester config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="harvesterConfig")
    private @Nullable Output<NodeTemplateHarvesterConfigArgs> harvesterConfig;

    /**
     * @return Harvester config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateHarvesterConfigArgs>> harvesterConfig() {
        return Optional.ofNullable(this.harvesterConfig);
    }

    /**
     * Hetzner config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="hetznerConfig")
    private @Nullable Output<NodeTemplateHetznerConfigArgs> hetznerConfig;

    /**
     * @return Hetzner config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateHetznerConfigArgs>> hetznerConfig() {
        return Optional.ofNullable(this.hetznerConfig);
    }

    /**
     * Labels for Node Template object (map)
     * 
     * **Note:** `labels` and `node_taints` will be applied to nodes deployed using the Node Template
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,String>> labels;

    /**
     * @return Labels for Node Template object (map)
     * 
     * **Note:** `labels` and `node_taints` will be applied to nodes deployed using the Node Template
     * 
     */
    public Optional<Output<Map<String,String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Linode config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="linodeConfig")
    private @Nullable Output<NodeTemplateLinodeConfigArgs> linodeConfig;

    /**
     * @return Linode config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateLinodeConfigArgs>> linodeConfig() {
        return Optional.ofNullable(this.linodeConfig);
    }

    /**
     * The name of the Node Template (string)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Node Template (string)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Node taints. For Rancher v2.3.3 and above (List)
     * 
     */
    @Import(name="nodeTaints")
    private @Nullable Output<List<NodeTemplateNodeTaintArgs>> nodeTaints;

    /**
     * @return Node taints. For Rancher v2.3.3 and above (List)
     * 
     */
    public Optional<Output<List<NodeTemplateNodeTaintArgs>>> nodeTaints() {
        return Optional.ofNullable(this.nodeTaints);
    }

    /**
     * Opennebula config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="opennebulaConfig")
    private @Nullable Output<NodeTemplateOpennebulaConfigArgs> opennebulaConfig;

    /**
     * @return Opennebula config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateOpennebulaConfigArgs>> opennebulaConfig() {
        return Optional.ofNullable(this.opennebulaConfig);
    }

    /**
     * Openstack config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="openstackConfig")
    private @Nullable Output<NodeTemplateOpenstackConfigArgs> openstackConfig;

    /**
     * @return Openstack config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateOpenstackConfigArgs>> openstackConfig() {
        return Optional.ofNullable(this.openstackConfig);
    }

    /**
     * Outscale config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="outscaleConfig")
    private @Nullable Output<NodeTemplateOutscaleConfigArgs> outscaleConfig;

    /**
     * @return Outscale config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateOutscaleConfigArgs>> outscaleConfig() {
        return Optional.ofNullable(this.outscaleConfig);
    }

    /**
     * Engine storage driver for the node template (bool)
     * 
     */
    @Import(name="useInternalIpAddress")
    private @Nullable Output<Boolean> useInternalIpAddress;

    /**
     * @return Engine storage driver for the node template (bool)
     * 
     */
    public Optional<Output<Boolean>> useInternalIpAddress() {
        return Optional.ofNullable(this.useInternalIpAddress);
    }

    /**
     * vSphere config for the Node Template (list maxitems:1)
     * 
     */
    @Import(name="vsphereConfig")
    private @Nullable Output<NodeTemplateVsphereConfigArgs> vsphereConfig;

    /**
     * @return vSphere config for the Node Template (list maxitems:1)
     * 
     */
    public Optional<Output<NodeTemplateVsphereConfigArgs>> vsphereConfig() {
        return Optional.ofNullable(this.vsphereConfig);
    }

    private NodeTemplateArgs() {}

    private NodeTemplateArgs(NodeTemplateArgs $) {
        this.amazonec2Config = $.amazonec2Config;
        this.annotations = $.annotations;
        this.authCertificateAuthority = $.authCertificateAuthority;
        this.authKey = $.authKey;
        this.azureConfig = $.azureConfig;
        this.cloudCredentialId = $.cloudCredentialId;
        this.description = $.description;
        this.digitaloceanConfig = $.digitaloceanConfig;
        this.driverId = $.driverId;
        this.engineEnv = $.engineEnv;
        this.engineInsecureRegistries = $.engineInsecureRegistries;
        this.engineInstallUrl = $.engineInstallUrl;
        this.engineLabel = $.engineLabel;
        this.engineOpt = $.engineOpt;
        this.engineRegistryMirrors = $.engineRegistryMirrors;
        this.engineStorageDriver = $.engineStorageDriver;
        this.harvesterConfig = $.harvesterConfig;
        this.hetznerConfig = $.hetznerConfig;
        this.labels = $.labels;
        this.linodeConfig = $.linodeConfig;
        this.name = $.name;
        this.nodeTaints = $.nodeTaints;
        this.opennebulaConfig = $.opennebulaConfig;
        this.openstackConfig = $.openstackConfig;
        this.outscaleConfig = $.outscaleConfig;
        this.useInternalIpAddress = $.useInternalIpAddress;
        this.vsphereConfig = $.vsphereConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeTemplateArgs $;

        public Builder() {
            $ = new NodeTemplateArgs();
        }

        public Builder(NodeTemplateArgs defaults) {
            $ = new NodeTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param amazonec2Config AWS config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder amazonec2Config(@Nullable Output<NodeTemplateAmazonec2ConfigArgs> amazonec2Config) {
            $.amazonec2Config = amazonec2Config;
            return this;
        }

        /**
         * @param amazonec2Config AWS config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder amazonec2Config(NodeTemplateAmazonec2ConfigArgs amazonec2Config) {
            return amazonec2Config(Output.of(amazonec2Config));
        }

        /**
         * @param annotations Annotations for Node Template object (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<Map<String,String>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations Annotations for Node Template object (map)
         * 
         * @return builder
         * 
         */
        public Builder annotations(Map<String,String> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param authCertificateAuthority Auth certificate authority for the Node Template (string)
         * 
         * @return builder
         * 
         */
        public Builder authCertificateAuthority(@Nullable Output<String> authCertificateAuthority) {
            $.authCertificateAuthority = authCertificateAuthority;
            return this;
        }

        /**
         * @param authCertificateAuthority Auth certificate authority for the Node Template (string)
         * 
         * @return builder
         * 
         */
        public Builder authCertificateAuthority(String authCertificateAuthority) {
            return authCertificateAuthority(Output.of(authCertificateAuthority));
        }

        /**
         * @param authKey Auth key for the Node Template (string)
         * 
         * @return builder
         * 
         */
        public Builder authKey(@Nullable Output<String> authKey) {
            $.authKey = authKey;
            return this;
        }

        /**
         * @param authKey Auth key for the Node Template (string)
         * 
         * @return builder
         * 
         */
        public Builder authKey(String authKey) {
            return authKey(Output.of(authKey));
        }

        /**
         * @param azureConfig Azure config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder azureConfig(@Nullable Output<NodeTemplateAzureConfigArgs> azureConfig) {
            $.azureConfig = azureConfig;
            return this;
        }

        /**
         * @param azureConfig Azure config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder azureConfig(NodeTemplateAzureConfigArgs azureConfig) {
            return azureConfig(Output.of(azureConfig));
        }

        /**
         * @param cloudCredentialId Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder cloudCredentialId(@Nullable Output<String> cloudCredentialId) {
            $.cloudCredentialId = cloudCredentialId;
            return this;
        }

        /**
         * @param cloudCredentialId Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)
         * 
         * @return builder
         * 
         */
        public Builder cloudCredentialId(String cloudCredentialId) {
            return cloudCredentialId(Output.of(cloudCredentialId));
        }

        /**
         * @param description Description for the Node Template (string)
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the Node Template (string)
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param digitaloceanConfig Digitalocean config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder digitaloceanConfig(@Nullable Output<NodeTemplateDigitaloceanConfigArgs> digitaloceanConfig) {
            $.digitaloceanConfig = digitaloceanConfig;
            return this;
        }

        /**
         * @param digitaloceanConfig Digitalocean config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder digitaloceanConfig(NodeTemplateDigitaloceanConfigArgs digitaloceanConfig) {
            return digitaloceanConfig(Output.of(digitaloceanConfig));
        }

        /**
         * @param driverId The node driver id used by the node template. It&#39;s required if the node driver isn&#39;t built in Rancher (string)
         * 
         * @return builder
         * 
         */
        public Builder driverId(@Nullable Output<String> driverId) {
            $.driverId = driverId;
            return this;
        }

        /**
         * @param driverId The node driver id used by the node template. It&#39;s required if the node driver isn&#39;t built in Rancher (string)
         * 
         * @return builder
         * 
         */
        public Builder driverId(String driverId) {
            return driverId(Output.of(driverId));
        }

        /**
         * @param engineEnv Engine environment for the node template (string)
         * 
         * @return builder
         * 
         */
        public Builder engineEnv(@Nullable Output<Map<String,String>> engineEnv) {
            $.engineEnv = engineEnv;
            return this;
        }

        /**
         * @param engineEnv Engine environment for the node template (string)
         * 
         * @return builder
         * 
         */
        public Builder engineEnv(Map<String,String> engineEnv) {
            return engineEnv(Output.of(engineEnv));
        }

        /**
         * @param engineInsecureRegistries Insecure registry for the node template (list)
         * 
         * @return builder
         * 
         */
        public Builder engineInsecureRegistries(@Nullable Output<List<String>> engineInsecureRegistries) {
            $.engineInsecureRegistries = engineInsecureRegistries;
            return this;
        }

        /**
         * @param engineInsecureRegistries Insecure registry for the node template (list)
         * 
         * @return builder
         * 
         */
        public Builder engineInsecureRegistries(List<String> engineInsecureRegistries) {
            return engineInsecureRegistries(Output.of(engineInsecureRegistries));
        }

        /**
         * @param engineInsecureRegistries Insecure registry for the node template (list)
         * 
         * @return builder
         * 
         */
        public Builder engineInsecureRegistries(String... engineInsecureRegistries) {
            return engineInsecureRegistries(List.of(engineInsecureRegistries));
        }

        /**
         * @param engineInstallUrl Docker engine install URL for the node template. Available install docker versions at `https://github.com/rancher/install-docker` (string)
         * 
         * @return builder
         * 
         */
        public Builder engineInstallUrl(@Nullable Output<String> engineInstallUrl) {
            $.engineInstallUrl = engineInstallUrl;
            return this;
        }

        /**
         * @param engineInstallUrl Docker engine install URL for the node template. Available install docker versions at `https://github.com/rancher/install-docker` (string)
         * 
         * @return builder
         * 
         */
        public Builder engineInstallUrl(String engineInstallUrl) {
            return engineInstallUrl(Output.of(engineInstallUrl));
        }

        /**
         * @param engineLabel Engine label for the node template (string)
         * 
         * @return builder
         * 
         */
        public Builder engineLabel(@Nullable Output<Map<String,String>> engineLabel) {
            $.engineLabel = engineLabel;
            return this;
        }

        /**
         * @param engineLabel Engine label for the node template (string)
         * 
         * @return builder
         * 
         */
        public Builder engineLabel(Map<String,String> engineLabel) {
            return engineLabel(Output.of(engineLabel));
        }

        /**
         * @param engineOpt Engine options for the node template (map)
         * 
         * @return builder
         * 
         */
        public Builder engineOpt(@Nullable Output<Map<String,String>> engineOpt) {
            $.engineOpt = engineOpt;
            return this;
        }

        /**
         * @param engineOpt Engine options for the node template (map)
         * 
         * @return builder
         * 
         */
        public Builder engineOpt(Map<String,String> engineOpt) {
            return engineOpt(Output.of(engineOpt));
        }

        /**
         * @param engineRegistryMirrors Engine registry mirror for the node template (list)
         * 
         * @return builder
         * 
         */
        public Builder engineRegistryMirrors(@Nullable Output<List<String>> engineRegistryMirrors) {
            $.engineRegistryMirrors = engineRegistryMirrors;
            return this;
        }

        /**
         * @param engineRegistryMirrors Engine registry mirror for the node template (list)
         * 
         * @return builder
         * 
         */
        public Builder engineRegistryMirrors(List<String> engineRegistryMirrors) {
            return engineRegistryMirrors(Output.of(engineRegistryMirrors));
        }

        /**
         * @param engineRegistryMirrors Engine registry mirror for the node template (list)
         * 
         * @return builder
         * 
         */
        public Builder engineRegistryMirrors(String... engineRegistryMirrors) {
            return engineRegistryMirrors(List.of(engineRegistryMirrors));
        }

        /**
         * @param engineStorageDriver Engine storage driver for the node template (string)
         * 
         * @return builder
         * 
         */
        public Builder engineStorageDriver(@Nullable Output<String> engineStorageDriver) {
            $.engineStorageDriver = engineStorageDriver;
            return this;
        }

        /**
         * @param engineStorageDriver Engine storage driver for the node template (string)
         * 
         * @return builder
         * 
         */
        public Builder engineStorageDriver(String engineStorageDriver) {
            return engineStorageDriver(Output.of(engineStorageDriver));
        }

        /**
         * @param harvesterConfig Harvester config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder harvesterConfig(@Nullable Output<NodeTemplateHarvesterConfigArgs> harvesterConfig) {
            $.harvesterConfig = harvesterConfig;
            return this;
        }

        /**
         * @param harvesterConfig Harvester config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder harvesterConfig(NodeTemplateHarvesterConfigArgs harvesterConfig) {
            return harvesterConfig(Output.of(harvesterConfig));
        }

        /**
         * @param hetznerConfig Hetzner config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder hetznerConfig(@Nullable Output<NodeTemplateHetznerConfigArgs> hetznerConfig) {
            $.hetznerConfig = hetznerConfig;
            return this;
        }

        /**
         * @param hetznerConfig Hetzner config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder hetznerConfig(NodeTemplateHetznerConfigArgs hetznerConfig) {
            return hetznerConfig(Output.of(hetznerConfig));
        }

        /**
         * @param labels Labels for Node Template object (map)
         * 
         * **Note:** `labels` and `node_taints` will be applied to nodes deployed using the Node Template
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Labels for Node Template object (map)
         * 
         * **Note:** `labels` and `node_taints` will be applied to nodes deployed using the Node Template
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param linodeConfig Linode config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder linodeConfig(@Nullable Output<NodeTemplateLinodeConfigArgs> linodeConfig) {
            $.linodeConfig = linodeConfig;
            return this;
        }

        /**
         * @param linodeConfig Linode config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder linodeConfig(NodeTemplateLinodeConfigArgs linodeConfig) {
            return linodeConfig(Output.of(linodeConfig));
        }

        /**
         * @param name The name of the Node Template (string)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Node Template (string)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeTaints Node taints. For Rancher v2.3.3 and above (List)
         * 
         * @return builder
         * 
         */
        public Builder nodeTaints(@Nullable Output<List<NodeTemplateNodeTaintArgs>> nodeTaints) {
            $.nodeTaints = nodeTaints;
            return this;
        }

        /**
         * @param nodeTaints Node taints. For Rancher v2.3.3 and above (List)
         * 
         * @return builder
         * 
         */
        public Builder nodeTaints(List<NodeTemplateNodeTaintArgs> nodeTaints) {
            return nodeTaints(Output.of(nodeTaints));
        }

        /**
         * @param nodeTaints Node taints. For Rancher v2.3.3 and above (List)
         * 
         * @return builder
         * 
         */
        public Builder nodeTaints(NodeTemplateNodeTaintArgs... nodeTaints) {
            return nodeTaints(List.of(nodeTaints));
        }

        /**
         * @param opennebulaConfig Opennebula config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder opennebulaConfig(@Nullable Output<NodeTemplateOpennebulaConfigArgs> opennebulaConfig) {
            $.opennebulaConfig = opennebulaConfig;
            return this;
        }

        /**
         * @param opennebulaConfig Opennebula config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder opennebulaConfig(NodeTemplateOpennebulaConfigArgs opennebulaConfig) {
            return opennebulaConfig(Output.of(opennebulaConfig));
        }

        /**
         * @param openstackConfig Openstack config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder openstackConfig(@Nullable Output<NodeTemplateOpenstackConfigArgs> openstackConfig) {
            $.openstackConfig = openstackConfig;
            return this;
        }

        /**
         * @param openstackConfig Openstack config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder openstackConfig(NodeTemplateOpenstackConfigArgs openstackConfig) {
            return openstackConfig(Output.of(openstackConfig));
        }

        /**
         * @param outscaleConfig Outscale config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder outscaleConfig(@Nullable Output<NodeTemplateOutscaleConfigArgs> outscaleConfig) {
            $.outscaleConfig = outscaleConfig;
            return this;
        }

        /**
         * @param outscaleConfig Outscale config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder outscaleConfig(NodeTemplateOutscaleConfigArgs outscaleConfig) {
            return outscaleConfig(Output.of(outscaleConfig));
        }

        /**
         * @param useInternalIpAddress Engine storage driver for the node template (bool)
         * 
         * @return builder
         * 
         */
        public Builder useInternalIpAddress(@Nullable Output<Boolean> useInternalIpAddress) {
            $.useInternalIpAddress = useInternalIpAddress;
            return this;
        }

        /**
         * @param useInternalIpAddress Engine storage driver for the node template (bool)
         * 
         * @return builder
         * 
         */
        public Builder useInternalIpAddress(Boolean useInternalIpAddress) {
            return useInternalIpAddress(Output.of(useInternalIpAddress));
        }

        /**
         * @param vsphereConfig vSphere config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder vsphereConfig(@Nullable Output<NodeTemplateVsphereConfigArgs> vsphereConfig) {
            $.vsphereConfig = vsphereConfig;
            return this;
        }

        /**
         * @param vsphereConfig vSphere config for the Node Template (list maxitems:1)
         * 
         * @return builder
         * 
         */
        public Builder vsphereConfig(NodeTemplateVsphereConfigArgs vsphereConfig) {
            return vsphereConfig(Output.of(vsphereConfig));
        }

        public NodeTemplateArgs build() {
            return $;
        }
    }

}
