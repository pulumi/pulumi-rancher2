// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterRkeConfigNetworkCalicoNetworkProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterRkeConfigNetworkCalicoNetworkProviderArgs Empty = new ClusterRkeConfigNetworkCalicoNetworkProviderArgs();

    @Import(name="cloudProvider")
    private @Nullable Output<String> cloudProvider;

    public Optional<Output<String>> cloudProvider() {
        return Optional.ofNullable(this.cloudProvider);
    }

    private ClusterRkeConfigNetworkCalicoNetworkProviderArgs() {}

    private ClusterRkeConfigNetworkCalicoNetworkProviderArgs(ClusterRkeConfigNetworkCalicoNetworkProviderArgs $) {
        this.cloudProvider = $.cloudProvider;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterRkeConfigNetworkCalicoNetworkProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterRkeConfigNetworkCalicoNetworkProviderArgs $;

        public Builder() {
            $ = new ClusterRkeConfigNetworkCalicoNetworkProviderArgs();
        }

        public Builder(ClusterRkeConfigNetworkCalicoNetworkProviderArgs defaults) {
            $ = new ClusterRkeConfigNetworkCalicoNetworkProviderArgs(Objects.requireNonNull(defaults));
        }

        public Builder cloudProvider(@Nullable Output<String> cloudProvider) {
            $.cloudProvider = cloudProvider;
            return this;
        }

        public Builder cloudProvider(String cloudProvider) {
            return cloudProvider(Output.of(cloudProvider));
        }

        public ClusterRkeConfigNetworkCalicoNetworkProviderArgs build() {
            return $;
        }
    }

}
