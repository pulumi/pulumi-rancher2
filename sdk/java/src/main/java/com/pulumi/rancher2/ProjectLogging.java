// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rancher2;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rancher2.ProjectLoggingArgs;
import com.pulumi.rancher2.Utilities;
import com.pulumi.rancher2.inputs.ProjectLoggingState;
import com.pulumi.rancher2.outputs.ProjectLoggingCustomTargetConfig;
import com.pulumi.rancher2.outputs.ProjectLoggingElasticsearchConfig;
import com.pulumi.rancher2.outputs.ProjectLoggingFluentdConfig;
import com.pulumi.rancher2.outputs.ProjectLoggingKafkaConfig;
import com.pulumi.rancher2.outputs.ProjectLoggingSplunkConfig;
import com.pulumi.rancher2.outputs.ProjectLoggingSyslogConfig;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Rancher v2 Project Logging resource. This can be used to create Project Logging for Rancher v2 environments and retrieve their information.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * Project Logging can be imported using the Rancher Project Logging ID
 * 
 * ```sh
 *  $ pulumi import rancher2:index/projectLogging:ProjectLogging foo &amp;lt;project_logging_id&amp;gt;
 * ```
 * 
 */
@ResourceType(type="rancher2:index/projectLogging:ProjectLogging")
public class ProjectLogging extends com.pulumi.resources.CustomResource {
    /**
     * Annotations for Project Logging object (map)
     * 
     */
    @Export(name="annotations", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> annotations;

    /**
     * @return Annotations for Project Logging object (map)
     * 
     */
    public Output<Map<String,Object>> annotations() {
        return this.annotations;
    }
    /**
     * The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
     * 
     */
    @Export(name="customTargetConfig", type=ProjectLoggingCustomTargetConfig.class, parameters={})
    private Output</* @Nullable */ ProjectLoggingCustomTargetConfig> customTargetConfig;

    /**
     * @return The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ProjectLoggingCustomTargetConfig>> customTargetConfig() {
        return Codegen.optional(this.customTargetConfig);
    }
    /**
     * The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
     * 
     */
    @Export(name="elasticsearchConfig", type=ProjectLoggingElasticsearchConfig.class, parameters={})
    private Output</* @Nullable */ ProjectLoggingElasticsearchConfig> elasticsearchConfig;

    /**
     * @return The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ProjectLoggingElasticsearchConfig>> elasticsearchConfig() {
        return Codegen.optional(this.elasticsearchConfig);
    }
    /**
     * Enable json log parsing. Default: `false` (bool)
     * 
     */
    @Export(name="enableJsonParsing", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableJsonParsing;

    /**
     * @return Enable json log parsing. Default: `false` (bool)
     * 
     */
    public Output<Optional<Boolean>> enableJsonParsing() {
        return Codegen.optional(this.enableJsonParsing);
    }
    /**
     * The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
     * 
     */
    @Export(name="fluentdConfig", type=ProjectLoggingFluentdConfig.class, parameters={})
    private Output</* @Nullable */ ProjectLoggingFluentdConfig> fluentdConfig;

    /**
     * @return The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ProjectLoggingFluentdConfig>> fluentdConfig() {
        return Codegen.optional(this.fluentdConfig);
    }
    /**
     * The kafka config for Project Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)
     * 
     */
    @Export(name="kafkaConfig", type=ProjectLoggingKafkaConfig.class, parameters={})
    private Output</* @Nullable */ ProjectLoggingKafkaConfig> kafkaConfig;

    /**
     * @return The kafka config for Project Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ProjectLoggingKafkaConfig>> kafkaConfig() {
        return Codegen.optional(this.kafkaConfig);
    }
    /**
     * The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * Labels for Project Logging object (map)
     * 
     */
    @Export(name="labels", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> labels;

    /**
     * @return Labels for Project Logging object (map)
     * 
     */
    public Output<Map<String,Object>> labels() {
        return this.labels;
    }
    /**
     * The name of the Project Logging config (string)
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the Project Logging config (string)
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The namespace id from Project logging (string)
     * 
     */
    @Export(name="namespaceId", type=String.class, parameters={})
    private Output</* @Nullable */ String> namespaceId;

    /**
     * @return The namespace id from Project logging (string)
     * 
     */
    public Output<Optional<String>> namespaceId() {
        return Codegen.optional(this.namespaceId);
    }
    /**
     * How often buffered logs would be flushed. Default: `3` seconds (int)
     * 
     */
    @Export(name="outputFlushInterval", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> outputFlushInterval;

    /**
     * @return How often buffered logs would be flushed. Default: `3` seconds (int)
     * 
     */
    public Output<Optional<Integer>> outputFlushInterval() {
        return Codegen.optional(this.outputFlushInterval);
    }
    /**
     * The output tags for Project Logging (map)
     * 
     */
    @Export(name="outputTags", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> outputTags;

    /**
     * @return The output tags for Project Logging (map)
     * 
     */
    public Output<Map<String,Object>> outputTags() {
        return this.outputTags;
    }
    /**
     * The project id to configure logging (string)
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return The project id to configure logging (string)
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * The splunk config for Project Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)
     * 
     */
    @Export(name="splunkConfig", type=ProjectLoggingSplunkConfig.class, parameters={})
    private Output</* @Nullable */ ProjectLoggingSplunkConfig> splunkConfig;

    /**
     * @return The splunk config for Project Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ProjectLoggingSplunkConfig>> splunkConfig() {
        return Codegen.optional(this.splunkConfig);
    }
    /**
     * The syslog config for Project Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)
     * 
     */
    @Export(name="syslogConfig", type=ProjectLoggingSyslogConfig.class, parameters={})
    private Output</* @Nullable */ ProjectLoggingSyslogConfig> syslogConfig;

    /**
     * @return The syslog config for Project Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)
     * 
     */
    public Output<Optional<ProjectLoggingSyslogConfig>> syslogConfig() {
        return Codegen.optional(this.syslogConfig);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectLogging(String name) {
        this(name, ProjectLoggingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectLogging(String name, ProjectLoggingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectLogging(String name, ProjectLoggingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/projectLogging:ProjectLogging", name, args == null ? ProjectLoggingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ProjectLogging(String name, Output<String> id, @Nullable ProjectLoggingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rancher2:index/projectLogging:ProjectLogging", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectLogging get(String name, Output<String> id, @Nullable ProjectLoggingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectLogging(name, id, state, options);
    }
}
