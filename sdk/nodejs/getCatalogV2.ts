// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to retrieve information about a Rancher2 catalog v2. Catalog v2 resource is available at Rancher v2.5.x and above.
 */
export function getCatalogV2(args: GetCatalogV2Args, opts?: pulumi.InvokeOptions): Promise<GetCatalogV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rancher2:index/getCatalogV2:getCatalogV2", {
        "clusterId": args.clusterId,
        "exponentialBackoffMaxRetries": args.exponentialBackoffMaxRetries,
        "exponentialBackoffMaxWait": args.exponentialBackoffMaxWait,
        "exponentialBackoffMinWait": args.exponentialBackoffMinWait,
        "insecurePlainHttp": args.insecurePlainHttp,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCatalogV2.
 */
export interface GetCatalogV2Args {
    /**
     * The cluster id of the catalog V2 (string)
     */
    clusterId: string;
    exponentialBackoffMaxRetries?: number;
    exponentialBackoffMaxWait?: number;
    exponentialBackoffMinWait?: number;
    insecurePlainHttp?: boolean;
    /**
     * The name of the catalog v2 (string)
     */
    name: string;
}

/**
 * A collection of values returned by getCatalogV2.
 */
export interface GetCatalogV2Result {
    /**
     * (Computed) Annotations for the catalog v2 (map)
     */
    readonly annotations: {[key: string]: string};
    /**
     * (Computed) PEM encoded CA bundle which will be used to validate the repo's certificate (string)
     */
    readonly caBundle: string;
    readonly clusterId: string;
    /**
     * (Computed) If disabled the repo clone will not be updated or allowed to be installed from. Default: `true` (bool)
     */
    readonly enabled: boolean;
    readonly exponentialBackoffMaxRetries: number;
    readonly exponentialBackoffMaxWait: number;
    readonly exponentialBackoffMinWait: number;
    /**
     * (Computed) Git Repository branch containing Helm chart definitions. Default `master` (string)
     */
    readonly gitBranch: string;
    /**
     * (Computed) The url of the catalog v2 repo (string)
     */
    readonly gitRepo: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (Computed) Use insecure HTTPS to download the repo's index. Default: `false` (bool)
     */
    readonly insecure: boolean;
    readonly insecurePlainHttp?: boolean;
    /**
     * (Computed) Labels for the catalog v2 (map)
     */
    readonly labels: {[key: string]: string};
    readonly name: string;
    /**
     * (Computed) The k8s resource version (string)
     */
    readonly resourceVersion: string;
    /**
     * (Computed) K8s secret name to be used to connect to the repo (string)
     */
    readonly secretName: string;
    /**
     * (Computed) K8s secret namespace (string)
     */
    readonly secretNamespace: string;
    /**
     * (Computed) K8s service account used to deploy charts instead of the end users credentials (string)
     */
    readonly serviceAccount: string;
    /**
     * (Computed) The username to access the catalog if needed (string)
     */
    readonly serviceAccountNamespace: string;
    /**
     * (Computed) URL to an index generated by Helm (string)
     */
    readonly url: string;
}
/**
 * Use this data source to retrieve information about a Rancher2 catalog v2. Catalog v2 resource is available at Rancher v2.5.x and above.
 */
export function getCatalogV2Output(args: GetCatalogV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCatalogV2Result> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("rancher2:index/getCatalogV2:getCatalogV2", {
        "clusterId": args.clusterId,
        "exponentialBackoffMaxRetries": args.exponentialBackoffMaxRetries,
        "exponentialBackoffMaxWait": args.exponentialBackoffMaxWait,
        "exponentialBackoffMinWait": args.exponentialBackoffMinWait,
        "insecurePlainHttp": args.insecurePlainHttp,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCatalogV2.
 */
export interface GetCatalogV2OutputArgs {
    /**
     * The cluster id of the catalog V2 (string)
     */
    clusterId: pulumi.Input<string>;
    exponentialBackoffMaxRetries?: pulumi.Input<number>;
    exponentialBackoffMaxWait?: pulumi.Input<number>;
    exponentialBackoffMinWait?: pulumi.Input<number>;
    insecurePlainHttp?: pulumi.Input<boolean>;
    /**
     * The name of the catalog v2 (string)
     */
    name: pulumi.Input<string>;
}
