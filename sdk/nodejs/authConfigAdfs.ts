// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Auth Config ADFS resource. This can be used to configure and enable Auth Config ADFS for Rancher v2 RKE clusters and retrieve their information.
 *
 * In addition to the built-in local auth, only one external auth config provider can be enabled at a time.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Auth Config ADFS
 * const adfs = new rancher2.AuthConfigAdfs("adfs", {
 *     displayNameField: "<DISPLAY_NAME_FIELD>",
 *     groupsField: "<GROUPS_FIELD>",
 *     idpMetadataContent: "<IDP_METADATA_CONTENT>",
 *     rancherApiHost: "https://<RANCHER_API_HOST>",
 *     spCert: "<SP_CERT>",
 *     spKey: "<SP_KEY>",
 *     uidField: "<UID_FIELD>",
 *     userNameField: "<USER_NAME_FIELD>",
 * });
 * ```
 */
export class AuthConfigAdfs extends pulumi.CustomResource {
    /**
     * Get an existing AuthConfigAdfs resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthConfigAdfsState, opts?: pulumi.CustomResourceOptions): AuthConfigAdfs {
        return new AuthConfigAdfs(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/authConfigAdfs:AuthConfigAdfs';

    /**
     * Returns true if the given object is an instance of AuthConfigAdfs.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthConfigAdfs {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthConfigAdfs.__pulumiType;
    }

    /**
     * Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
     */
    declare public readonly accessMode: pulumi.Output<string | undefined>;
    /**
     * Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `adfs_user://<USER_ID>`  `adfs_group://<GROUP_ID>` (list)
     */
    declare public readonly allowedPrincipalIds: pulumi.Output<string[] | undefined>;
    /**
     * Annotations of the resource (map)
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string}>;
    /**
     * ADFS display name field (string)
     */
    declare public readonly displayNameField: pulumi.Output<string>;
    /**
     * Enable auth config provider. Default `true` (bool)
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * ADFS group field (string)
     */
    declare public readonly groupsField: pulumi.Output<string>;
    /**
     * ADFS IDP metadata content (string)
     */
    declare public readonly idpMetadataContent: pulumi.Output<string>;
    /**
     * Labels of the resource (map)
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * (Computed) The name of the resource (string)
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Rancher URL. URL scheme needs to be specified, `https://<RANCHER_API_HOST>` (string)
     */
    declare public readonly rancherApiHost: pulumi.Output<string>;
    /**
     * ADFS SP cert (string)
     */
    declare public readonly spCert: pulumi.Output<string>;
    /**
     * ADFS SP key (string)
     */
    declare public readonly spKey: pulumi.Output<string>;
    /**
     * (Computed) The type of the resource (string)
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * ADFS UID field (string)
     */
    declare public readonly uidField: pulumi.Output<string>;
    /**
     * ADFS user name field (string)
     */
    declare public readonly userNameField: pulumi.Output<string>;

    /**
     * Create a AuthConfigAdfs resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthConfigAdfsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthConfigAdfsArgs | AuthConfigAdfsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthConfigAdfsState | undefined;
            resourceInputs["accessMode"] = state?.accessMode;
            resourceInputs["allowedPrincipalIds"] = state?.allowedPrincipalIds;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["displayNameField"] = state?.displayNameField;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["groupsField"] = state?.groupsField;
            resourceInputs["idpMetadataContent"] = state?.idpMetadataContent;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["rancherApiHost"] = state?.rancherApiHost;
            resourceInputs["spCert"] = state?.spCert;
            resourceInputs["spKey"] = state?.spKey;
            resourceInputs["type"] = state?.type;
            resourceInputs["uidField"] = state?.uidField;
            resourceInputs["userNameField"] = state?.userNameField;
        } else {
            const args = argsOrState as AuthConfigAdfsArgs | undefined;
            if (args?.displayNameField === undefined && !opts.urn) {
                throw new Error("Missing required property 'displayNameField'");
            }
            if (args?.groupsField === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupsField'");
            }
            if (args?.idpMetadataContent === undefined && !opts.urn) {
                throw new Error("Missing required property 'idpMetadataContent'");
            }
            if (args?.rancherApiHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'rancherApiHost'");
            }
            if (args?.spCert === undefined && !opts.urn) {
                throw new Error("Missing required property 'spCert'");
            }
            if (args?.spKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'spKey'");
            }
            if (args?.uidField === undefined && !opts.urn) {
                throw new Error("Missing required property 'uidField'");
            }
            if (args?.userNameField === undefined && !opts.urn) {
                throw new Error("Missing required property 'userNameField'");
            }
            resourceInputs["accessMode"] = args?.accessMode;
            resourceInputs["allowedPrincipalIds"] = args?.allowedPrincipalIds;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["displayNameField"] = args?.displayNameField;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["groupsField"] = args?.groupsField;
            resourceInputs["idpMetadataContent"] = args?.idpMetadataContent ? pulumi.secret(args.idpMetadataContent) : undefined;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["rancherApiHost"] = args?.rancherApiHost;
            resourceInputs["spCert"] = args?.spCert ? pulumi.secret(args.spCert) : undefined;
            resourceInputs["spKey"] = args?.spKey ? pulumi.secret(args.spKey) : undefined;
            resourceInputs["uidField"] = args?.uidField;
            resourceInputs["userNameField"] = args?.userNameField;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["idpMetadataContent", "spCert", "spKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AuthConfigAdfs.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthConfigAdfs resources.
 */
export interface AuthConfigAdfsState {
    /**
     * Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
     */
    accessMode?: pulumi.Input<string>;
    /**
     * Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `adfs_user://<USER_ID>`  `adfs_group://<GROUP_ID>` (list)
     */
    allowedPrincipalIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ADFS display name field (string)
     */
    displayNameField?: pulumi.Input<string>;
    /**
     * Enable auth config provider. Default `true` (bool)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * ADFS group field (string)
     */
    groupsField?: pulumi.Input<string>;
    /**
     * ADFS IDP metadata content (string)
     */
    idpMetadataContent?: pulumi.Input<string>;
    /**
     * Labels of the resource (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Computed) The name of the resource (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Rancher URL. URL scheme needs to be specified, `https://<RANCHER_API_HOST>` (string)
     */
    rancherApiHost?: pulumi.Input<string>;
    /**
     * ADFS SP cert (string)
     */
    spCert?: pulumi.Input<string>;
    /**
     * ADFS SP key (string)
     */
    spKey?: pulumi.Input<string>;
    /**
     * (Computed) The type of the resource (string)
     */
    type?: pulumi.Input<string>;
    /**
     * ADFS UID field (string)
     */
    uidField?: pulumi.Input<string>;
    /**
     * ADFS user name field (string)
     */
    userNameField?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthConfigAdfs resource.
 */
export interface AuthConfigAdfsArgs {
    /**
     * Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
     */
    accessMode?: pulumi.Input<string>;
    /**
     * Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `adfs_user://<USER_ID>`  `adfs_group://<GROUP_ID>` (list)
     */
    allowedPrincipalIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ADFS display name field (string)
     */
    displayNameField: pulumi.Input<string>;
    /**
     * Enable auth config provider. Default `true` (bool)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * ADFS group field (string)
     */
    groupsField: pulumi.Input<string>;
    /**
     * ADFS IDP metadata content (string)
     */
    idpMetadataContent: pulumi.Input<string>;
    /**
     * Labels of the resource (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Rancher URL. URL scheme needs to be specified, `https://<RANCHER_API_HOST>` (string)
     */
    rancherApiHost: pulumi.Input<string>;
    /**
     * ADFS SP cert (string)
     */
    spCert: pulumi.Input<string>;
    /**
     * ADFS SP key (string)
     */
    spKey: pulumi.Input<string>;
    /**
     * ADFS UID field (string)
     */
    uidField: pulumi.Input<string>;
    /**
     * ADFS user name field (string)
     */
    userNameField: pulumi.Input<string>;
}
