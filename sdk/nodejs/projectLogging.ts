// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Project Logging resource. This can be used to create Project Logging for Rancher v2 environments and retrieve their information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Project Logging
 * const foo = new rancher2.ProjectLogging("foo", {
 *     kind: "syslog",
 *     projectId: "<project_id>",
 *     syslogConfig: {
 *         endpoint: "<syslog_endpoint>",
 *         protocol: "udp",
 *         severity: "notice",
 *         sslVerify: false,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Project Logging can be imported using the Rancher Project Logging ID
 *
 * ```sh
 *  $ pulumi import rancher2:index/projectLogging:ProjectLogging foo &lt;project_logging_id&gt;
 * ```
 */
export class ProjectLogging extends pulumi.CustomResource {
    /**
     * Get an existing ProjectLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectLoggingState, opts?: pulumi.CustomResourceOptions): ProjectLogging {
        return new ProjectLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/projectLogging:ProjectLogging';

    /**
     * Returns true if the given object is an instance of ProjectLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectLogging.__pulumiType;
    }

    /**
     * Annotations for Project Logging object (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    public readonly customTargetConfig!: pulumi.Output<outputs.ProjectLoggingCustomTargetConfig | undefined>;
    /**
     * The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `customTargetConfig`, `fluentdConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    public readonly elasticsearchConfig!: pulumi.Output<outputs.ProjectLoggingElasticsearchConfig | undefined>;
    /**
     * Enable json log parsing. Default: `false` (bool)
     */
    public readonly enableJsonParsing!: pulumi.Output<boolean | undefined>;
    /**
     * The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    public readonly fluentdConfig!: pulumi.Output<outputs.ProjectLoggingFluentdConfig | undefined>;
    /**
     * The kafka config for Project Logging. For `kind = kafka`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `fluentdConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    public readonly kafkaConfig!: pulumi.Output<outputs.ProjectLoggingKafkaConfig | undefined>;
    /**
     * The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * Labels for Project Logging object (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * The name of the Project Logging config (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace id from Project logging (string)
     */
    public readonly namespaceId!: pulumi.Output<string | undefined>;
    /**
     * How often buffered logs would be flushed. Default: `3` seconds (int)
     */
    public readonly outputFlushInterval!: pulumi.Output<number | undefined>;
    /**
     * The output tags for Project Logging (map)
     */
    public readonly outputTags!: pulumi.Output<{[key: string]: any}>;
    /**
     * The project id to configure logging (string)
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The splunk config for Project Logging. For `kind = splunk`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `syslogConfig` (list maxitems:1)
     */
    public readonly splunkConfig!: pulumi.Output<outputs.ProjectLoggingSplunkConfig | undefined>;
    /**
     * The syslog config for Project Logging. For `kind = syslog`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `splunkConfig` (list maxitems:1)
     */
    public readonly syslogConfig!: pulumi.Output<outputs.ProjectLoggingSyslogConfig | undefined>;

    /**
     * Create a ProjectLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectLoggingArgs | ProjectLoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectLoggingState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["customTargetConfig"] = state ? state.customTargetConfig : undefined;
            resourceInputs["elasticsearchConfig"] = state ? state.elasticsearchConfig : undefined;
            resourceInputs["enableJsonParsing"] = state ? state.enableJsonParsing : undefined;
            resourceInputs["fluentdConfig"] = state ? state.fluentdConfig : undefined;
            resourceInputs["kafkaConfig"] = state ? state.kafkaConfig : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["outputFlushInterval"] = state ? state.outputFlushInterval : undefined;
            resourceInputs["outputTags"] = state ? state.outputTags : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["splunkConfig"] = state ? state.splunkConfig : undefined;
            resourceInputs["syslogConfig"] = state ? state.syslogConfig : undefined;
        } else {
            const args = argsOrState as ProjectLoggingArgs | undefined;
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["customTargetConfig"] = args ? args.customTargetConfig : undefined;
            resourceInputs["elasticsearchConfig"] = args ? args.elasticsearchConfig : undefined;
            resourceInputs["enableJsonParsing"] = args ? args.enableJsonParsing : undefined;
            resourceInputs["fluentdConfig"] = args ? args.fluentdConfig : undefined;
            resourceInputs["kafkaConfig"] = args ? args.kafkaConfig : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["outputFlushInterval"] = args ? args.outputFlushInterval : undefined;
            resourceInputs["outputTags"] = args ? args.outputTags : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["splunkConfig"] = args ? args.splunkConfig : undefined;
            resourceInputs["syslogConfig"] = args ? args.syslogConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectLogging.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectLogging resources.
 */
export interface ProjectLoggingState {
    /**
     * Annotations for Project Logging object (map)
     */
    annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    customTargetConfig?: pulumi.Input<inputs.ProjectLoggingCustomTargetConfig>;
    /**
     * The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `customTargetConfig`, `fluentdConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    elasticsearchConfig?: pulumi.Input<inputs.ProjectLoggingElasticsearchConfig>;
    /**
     * Enable json log parsing. Default: `false` (bool)
     */
    enableJsonParsing?: pulumi.Input<boolean>;
    /**
     * The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    fluentdConfig?: pulumi.Input<inputs.ProjectLoggingFluentdConfig>;
    /**
     * The kafka config for Project Logging. For `kind = kafka`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `fluentdConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    kafkaConfig?: pulumi.Input<inputs.ProjectLoggingKafkaConfig>;
    /**
     * The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
     */
    kind?: pulumi.Input<string>;
    /**
     * Labels for Project Logging object (map)
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the Project Logging config (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace id from Project logging (string)
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * How often buffered logs would be flushed. Default: `3` seconds (int)
     */
    outputFlushInterval?: pulumi.Input<number>;
    /**
     * The output tags for Project Logging (map)
     */
    outputTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The project id to configure logging (string)
     */
    projectId?: pulumi.Input<string>;
    /**
     * The splunk config for Project Logging. For `kind = splunk`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `syslogConfig` (list maxitems:1)
     */
    splunkConfig?: pulumi.Input<inputs.ProjectLoggingSplunkConfig>;
    /**
     * The syslog config for Project Logging. For `kind = syslog`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `splunkConfig` (list maxitems:1)
     */
    syslogConfig?: pulumi.Input<inputs.ProjectLoggingSyslogConfig>;
}

/**
 * The set of arguments for constructing a ProjectLogging resource.
 */
export interface ProjectLoggingArgs {
    /**
     * Annotations for Project Logging object (map)
     */
    annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    customTargetConfig?: pulumi.Input<inputs.ProjectLoggingCustomTargetConfig>;
    /**
     * The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `customTargetConfig`, `fluentdConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    elasticsearchConfig?: pulumi.Input<inputs.ProjectLoggingElasticsearchConfig>;
    /**
     * Enable json log parsing. Default: `false` (bool)
     */
    enableJsonParsing?: pulumi.Input<boolean>;
    /**
     * The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `kafkaConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    fluentdConfig?: pulumi.Input<inputs.ProjectLoggingFluentdConfig>;
    /**
     * The kafka config for Project Logging. For `kind = kafka`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `fluentdConfig`, `splunkConfig` and `syslogConfig` (list maxitems:1)
     */
    kafkaConfig?: pulumi.Input<inputs.ProjectLoggingKafkaConfig>;
    /**
     * The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
     */
    kind: pulumi.Input<string>;
    /**
     * Labels for Project Logging object (map)
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the Project Logging config (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace id from Project logging (string)
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * How often buffered logs would be flushed. Default: `3` seconds (int)
     */
    outputFlushInterval?: pulumi.Input<number>;
    /**
     * The output tags for Project Logging (map)
     */
    outputTags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The project id to configure logging (string)
     */
    projectId: pulumi.Input<string>;
    /**
     * The splunk config for Project Logging. For `kind = splunk`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `syslogConfig` (list maxitems:1)
     */
    splunkConfig?: pulumi.Input<inputs.ProjectLoggingSplunkConfig>;
    /**
     * The syslog config for Project Logging. For `kind = syslog`. Conflicts with `customTargetConfig`, `elasticsearchConfig`, `fluentdConfig`, `kafkaConfig`, and `splunkConfig` (list maxitems:1)
     */
    syslogConfig?: pulumi.Input<inputs.ProjectLoggingSyslogConfig>;
}
