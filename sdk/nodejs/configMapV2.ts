// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Rancher ConfigMap v2 resource. This can be used to create k8s configMaps for Rancher v2 environments and retrieve their information. ConfigMap v2 resource is available at Rancher v2.5.x and above.
 *
 * ## Import
 *
 * V2 configMaps can be imported using the Rancher cluster ID, ConfigMap V2 namespace and name.
 *
 * ```sh
 * $ pulumi import rancher2:index/configMapV2:ConfigMapV2 foo &lt;CLUSTER_ID&gt;.&lt;SECRET_V2_NAMESPACE&gt;/&lt;SECRET_V2_NAME&gt;
 * ```
 */
export class ConfigMapV2 extends pulumi.CustomResource {
    /**
     * Get an existing ConfigMapV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigMapV2State, opts?: pulumi.CustomResourceOptions): ConfigMapV2 {
        return new ConfigMapV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/configMapV2:ConfigMapV2';

    /**
     * Returns true if the given object is an instance of ConfigMapV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigMapV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigMapV2.__pulumiType;
    }

    /**
     * Annotations for the configMap v2 (map)
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string}>;
    /**
     * The cluster id of the configMap V2 (string)
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The data of the configMap v2 (map)
     */
    declare public readonly data: pulumi.Output<{[key: string]: string}>;
    /**
     * If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate. Default: `false` (bool)
     */
    declare public readonly immutable: pulumi.Output<boolean | undefined>;
    /**
     * Labels for the configMap v2 (map)
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the configMap v2 (string)
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespaces of the configMap v2. Default: `default` (string)
     */
    declare public readonly namespace: pulumi.Output<string | undefined>;
    /**
     * (Computed) The k8s resource version (string)
     */
    declare public /*out*/ readonly resourceVersion: pulumi.Output<string>;

    /**
     * Create a ConfigMapV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigMapV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigMapV2Args | ConfigMapV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigMapV2State | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["data"] = state?.data;
            resourceInputs["immutable"] = state?.immutable;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["resourceVersion"] = state?.resourceVersion;
        } else {
            const args = argsOrState as ConfigMapV2Args | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.data === undefined && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["data"] = args?.data;
            resourceInputs["immutable"] = args?.immutable;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["resourceVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigMapV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigMapV2 resources.
 */
export interface ConfigMapV2State {
    /**
     * Annotations for the configMap v2 (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The cluster id of the configMap V2 (string)
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The data of the configMap v2 (map)
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate. Default: `false` (bool)
     */
    immutable?: pulumi.Input<boolean>;
    /**
     * Labels for the configMap v2 (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the configMap v2 (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The namespaces of the configMap v2. Default: `default` (string)
     */
    namespace?: pulumi.Input<string>;
    /**
     * (Computed) The k8s resource version (string)
     */
    resourceVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigMapV2 resource.
 */
export interface ConfigMapV2Args {
    /**
     * Annotations for the configMap v2 (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The cluster id of the configMap V2 (string)
     */
    clusterId: pulumi.Input<string>;
    /**
     * The data of the configMap v2 (map)
     */
    data: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate. Default: `false` (bool)
     */
    immutable?: pulumi.Input<boolean>;
    /**
     * Labels for the configMap v2 (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the configMap v2 (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The namespaces of the configMap v2. Default: `default` (string)
     */
    namespace?: pulumi.Input<string>;
}
