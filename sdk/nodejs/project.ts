// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Project resource. This can be used to create projects for Rancher v2 environments and retrieve their information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Project
 * const foo = new rancher2.Project("foo", {
 *     name: "foo",
 *     clusterId: "<CLUSTER_ID>",
 *     resourceQuota: {
 *         projectLimit: {
 *             limitsCpu: "2000m",
 *             limitsMemory: "2000Mi",
 *             requestsStorage: "2Gi",
 *         },
 *         namespaceDefaultLimit: {
 *             limitsCpu: "2000m",
 *             limitsMemory: "500Mi",
 *             requestsStorage: "1Gi",
 *         },
 *     },
 *     containerResourceLimit: {
 *         limitsCpu: "20m",
 *         limitsMemory: "20Mi",
 *         requestsCpu: "1m",
 *         requestsMemory: "1Mi",
 *     },
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Project enabling and customizing monitoring
 * const foo = new rancher2.Project("foo", {
 *     name: "foo",
 *     clusterId: "<CLUSTER_ID>",
 *     resourceQuota: {
 *         projectLimit: {
 *             limitsCpu: "2000m",
 *             limitsMemory: "2000Mi",
 *             requestsStorage: "2Gi",
 *         },
 *         namespaceDefaultLimit: {
 *             limitsCpu: "2000m",
 *             limitsMemory: "500Mi",
 *             requestsStorage: "1Gi",
 *         },
 *     },
 *     containerResourceLimit: {
 *         limitsCpu: "20m",
 *         limitsMemory: "20Mi",
 *         requestsCpu: "1m",
 *         requestsMemory: "1Mi",
 *     },
 *     enableProjectMonitoring: true,
 *     projectMonitoringInput: {
 *         answers: {
 *             "exporter-kubelets.https": true,
 *             "exporter-node.enabled": true,
 *             "exporter-node.ports.metrics.port": 9796,
 *             "exporter-node.resources.limits.cpu": "200m",
 *             "exporter-node.resources.limits.memory": "200Mi",
 *             "grafana.persistence.enabled": false,
 *             "grafana.persistence.size": "10Gi",
 *             "grafana.persistence.storageClass": "default",
 *             "operator.resources.limits.memory": "500Mi",
 *             "prometheus.persistence.enabled": "false",
 *             "prometheus.persistence.size": "50Gi",
 *             "prometheus.persistence.storageClass": "default",
 *             "prometheus.persistent.useReleaseName": "true",
 *             "prometheus.resources.core.limits.cpu": "1000m",
 *             "prometheus.resources.core.limits.memory": "1500Mi",
 *             "prometheus.resources.core.requests.cpu": "750m",
 *             "prometheus.resources.core.requests.memory": "750Mi",
 *             "prometheus.retention": "12h",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Projects can be imported using the Rancher Project ID
 *
 * ```sh
 * $ pulumi import rancher2:index/project:Project foo &lt;project_id&gt;
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Annotations for Node Pool object (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * The cluster id where create project (string)
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Default containers resource limits on project (List maxitem:1)
     */
    public readonly containerResourceLimit!: pulumi.Output<outputs.ProjectContainerResourceLimit | undefined>;
    /**
     * A project description (string)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable built-in project monitoring. Default `false` (bool)
     */
    public readonly enableProjectMonitoring!: pulumi.Output<boolean | undefined>;
    /**
     * Labels for Node Pool object (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * The name of the project (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Default Pod Security Policy ID for the project (string)
     */
    public readonly podSecurityPolicyTemplateId!: pulumi.Output<string | undefined>;
    /**
     * Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
     */
    public readonly projectMonitoringInput!: pulumi.Output<outputs.ProjectProjectMonitoringInput | undefined>;
    /**
     * Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
     */
    public readonly resourceQuota!: pulumi.Output<outputs.ProjectResourceQuota | undefined>;
    /**
     * Wait for cluster becomes active. Default `false` (bool)
     */
    public readonly waitForCluster!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["containerResourceLimit"] = state ? state.containerResourceLimit : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableProjectMonitoring"] = state ? state.enableProjectMonitoring : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["podSecurityPolicyTemplateId"] = state ? state.podSecurityPolicyTemplateId : undefined;
            resourceInputs["projectMonitoringInput"] = state ? state.projectMonitoringInput : undefined;
            resourceInputs["resourceQuota"] = state ? state.resourceQuota : undefined;
            resourceInputs["waitForCluster"] = state ? state.waitForCluster : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["containerResourceLimit"] = args ? args.containerResourceLimit : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableProjectMonitoring"] = args ? args.enableProjectMonitoring : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["podSecurityPolicyTemplateId"] = args ? args.podSecurityPolicyTemplateId : undefined;
            resourceInputs["projectMonitoringInput"] = args ? args.projectMonitoringInput : undefined;
            resourceInputs["resourceQuota"] = args ? args.resourceQuota : undefined;
            resourceInputs["waitForCluster"] = args ? args.waitForCluster : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Annotations for Node Pool object (map)
     */
    annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The cluster id where create project (string)
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Default containers resource limits on project (List maxitem:1)
     */
    containerResourceLimit?: pulumi.Input<inputs.ProjectContainerResourceLimit>;
    /**
     * A project description (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Enable built-in project monitoring. Default `false` (bool)
     */
    enableProjectMonitoring?: pulumi.Input<boolean>;
    /**
     * Labels for Node Pool object (map)
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the project (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Default Pod Security Policy ID for the project (string)
     */
    podSecurityPolicyTemplateId?: pulumi.Input<string>;
    /**
     * Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
     */
    projectMonitoringInput?: pulumi.Input<inputs.ProjectProjectMonitoringInput>;
    /**
     * Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
     */
    resourceQuota?: pulumi.Input<inputs.ProjectResourceQuota>;
    /**
     * Wait for cluster becomes active. Default `false` (bool)
     */
    waitForCluster?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Annotations for Node Pool object (map)
     */
    annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The cluster id where create project (string)
     */
    clusterId: pulumi.Input<string>;
    /**
     * Default containers resource limits on project (List maxitem:1)
     */
    containerResourceLimit?: pulumi.Input<inputs.ProjectContainerResourceLimit>;
    /**
     * A project description (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Enable built-in project monitoring. Default `false` (bool)
     */
    enableProjectMonitoring?: pulumi.Input<boolean>;
    /**
     * Labels for Node Pool object (map)
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the project (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Default Pod Security Policy ID for the project (string)
     */
    podSecurityPolicyTemplateId?: pulumi.Input<string>;
    /**
     * Project monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured (list maxitems:1)
     */
    projectMonitoringInput?: pulumi.Input<inputs.ProjectProjectMonitoringInput>;
    /**
     * Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
     */
    resourceQuota?: pulumi.Input<inputs.ProjectResourceQuota>;
    /**
     * Wait for cluster becomes active. Default `false` (bool)
     */
    waitForCluster?: pulumi.Input<boolean>;
}
