// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Project resource. This can be used to create projects for Rancher v2 environments and retrieve their information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Project
 * const foo = new rancher2.Project("foo", {
 *     name: "foo",
 *     clusterId: "<CLUSTER_ID>",
 *     resourceQuota: {
 *         projectLimit: {
 *             limitsCpu: "2000m",
 *             limitsMemory: "2000Mi",
 *             requestsStorage: "2Gi",
 *         },
 *         namespaceDefaultLimit: {
 *             limitsCpu: "2000m",
 *             limitsMemory: "500Mi",
 *             requestsStorage: "1Gi",
 *         },
 *     },
 *     containerResourceLimit: {
 *         limitsCpu: "20m",
 *         limitsMemory: "20Mi",
 *         requestsCpu: "1m",
 *         requestsMemory: "1Mi",
 *     },
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Project
 * const foo = new rancher2.Project("foo", {
 *     name: "foo",
 *     clusterId: "<CLUSTER_ID>",
 *     resourceQuota: {
 *         projectLimit: {
 *             limitsCpu: "2000m",
 *             limitsMemory: "2000Mi",
 *             requestsStorage: "2Gi",
 *         },
 *         namespaceDefaultLimit: {
 *             limitsCpu: "2000m",
 *             limitsMemory: "500Mi",
 *             requestsStorage: "1Gi",
 *         },
 *     },
 *     containerResourceLimit: {
 *         limitsCpu: "20m",
 *         limitsMemory: "20Mi",
 *         requestsCpu: "1m",
 *         requestsMemory: "1Mi",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Projects can be imported using the Rancher Project ID
 *
 * ```sh
 * $ pulumi import rancher2:index/project:Project foo &lt;project_id&gt;
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Annotations for Node Pool object (map)
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string}>;
    /**
     * The cluster id where create project (string)
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * Default containers resource limits on project (List maxitem:1)
     */
    declare public readonly containerResourceLimit: pulumi.Output<outputs.ProjectContainerResourceLimit | undefined>;
    /**
     * A project description (string)
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Labels for Node Pool object (map)
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the project (string)
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
     */
    declare public readonly resourceQuota: pulumi.Output<outputs.ProjectResourceQuota | undefined>;
    /**
     * Wait for cluster becomes active. Default `false` (bool)
     */
    declare public readonly waitForCluster: pulumi.Output<boolean | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["containerResourceLimit"] = state?.containerResourceLimit;
            resourceInputs["description"] = state?.description;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceQuota"] = state?.resourceQuota;
            resourceInputs["waitForCluster"] = state?.waitForCluster;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["containerResourceLimit"] = args?.containerResourceLimit;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceQuota"] = args?.resourceQuota;
            resourceInputs["waitForCluster"] = args?.waitForCluster;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Annotations for Node Pool object (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The cluster id where create project (string)
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Default containers resource limits on project (List maxitem:1)
     */
    containerResourceLimit?: pulumi.Input<inputs.ProjectContainerResourceLimit>;
    /**
     * A project description (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for Node Pool object (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the project (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
     */
    resourceQuota?: pulumi.Input<inputs.ProjectResourceQuota>;
    /**
     * Wait for cluster becomes active. Default `false` (bool)
     */
    waitForCluster?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Annotations for Node Pool object (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The cluster id where create project (string)
     */
    clusterId: pulumi.Input<string>;
    /**
     * Default containers resource limits on project (List maxitem:1)
     */
    containerResourceLimit?: pulumi.Input<inputs.ProjectContainerResourceLimit>;
    /**
     * A project description (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for Node Pool object (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the project (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
     */
    resourceQuota?: pulumi.Input<inputs.ProjectResourceQuota>;
    /**
     * Wait for cluster becomes active. Default `false` (bool)
     */
    waitForCluster?: pulumi.Input<boolean>;
}
