// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 multiClusterApp resource. This can be used to deploy multiClusterApp on Rancher v2.
 *
 * This resource can also modify Rancher v2 multi cluster apps in 3 ways:
 * - `Add/Remove targets`: If `targets` arguments is modified, the multi cluster app targets will be updated.
 * - `Rollback`: If `revisionId` argument is provided or modified the app will be rolled back accordingly. A new `revisionId` will be generated in Rancher. It will also generate a non-empty pulumi preview that will require manual .tf file intervention. Use carefully.
 * - `Update`: If any other argument is modified the app will be upgraded.
 *
 * Note: In case of multiple resource modification in a row, `rollback` has preference.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Multi Cluster App
 * const foo = new rancher2.MultiClusterApp("foo", {
 *     catalogName: "<catalog_name>",
 *     name: "foo",
 *     targets: [{
 *         projectId: "<project_id>",
 *     }],
 *     templateName: "<template_name>",
 *     templateVersion: "<template_version>",
 *     answers: [{
 *         values: {
 *             ingress_host: "test.xip.io",
 *         },
 *     }],
 *     roles: ["project-member"],
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Multi Cluster App overriding answers
 * const foo = new rancher2.MultiClusterApp("foo", {
 *     catalogName: "<catalog_name>",
 *     name: "foo",
 *     targets: [
 *         {
 *             projectId: "<project_id1>",
 *         },
 *         {
 *             projectId: "<project_id2>",
 *         },
 *     ],
 *     templateName: "<template_name>",
 *     templateVersion: "<template_version>",
 *     answers: [
 *         {
 *             values: {
 *                 ingress_host: "test.xip.io",
 *             },
 *         },
 *         {
 *             projectId: "<project_id2>",
 *             values: {
 *                 ingress_host: "test2.xip.io",
 *             },
 *         },
 *     ],
 *     roles: ["project-member"],
 * });
 * ```
 *
 * ## Import
 *
 * Multi cluster app can be imported using the multi cluster app ID in the format `<multi_cluster_app_name>`
 *
 * ```sh
 * $ pulumi import rancher2:index/multiClusterApp:MultiClusterApp foo &lt;MULTI_CLUSTER_APP_ID&gt;
 * ```
 */
export class MultiClusterApp extends pulumi.CustomResource {
    /**
     * Get an existing MultiClusterApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MultiClusterAppState, opts?: pulumi.CustomResourceOptions): MultiClusterApp {
        return new MultiClusterApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/multiClusterApp:MultiClusterApp';

    /**
     * Returns true if the given object is an instance of MultiClusterApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MultiClusterApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MultiClusterApp.__pulumiType;
    }

    /**
     * Annotations for multi cluster app object (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The multi cluster app answers (list)
     */
    public readonly answers!: pulumi.Output<outputs.MultiClusterAppAnswer[]>;
    /**
     * The multi cluster app catalog name (string)
     */
    public readonly catalogName!: pulumi.Output<string>;
    /**
     * Labels for multi cluster app object (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The multi cluster app answers (list)
     */
    public readonly members!: pulumi.Output<outputs.MultiClusterAppMember[] | undefined>;
    /**
     * The multi cluster app name (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The multi cluster app revision history limit. Default `10` (int)
     */
    public readonly revisionHistoryLimit!: pulumi.Output<number | undefined>;
    /**
     * Current revision id for the multi cluster app (string)
     */
    public readonly revisionId!: pulumi.Output<string>;
    /**
     * The multi cluster app roles (list)
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * The multi cluster app target projects (list)
     */
    public readonly targets!: pulumi.Output<outputs.MultiClusterAppTarget[]>;
    /**
     * The multi cluster app template name (string)
     */
    public readonly templateName!: pulumi.Output<string>;
    /**
     * The multi cluster app template version. Default: `latest` (string)
     */
    public readonly templateVersion!: pulumi.Output<string>;
    /**
     * (Computed) The multi cluster app template version ID (string)
     */
    public /*out*/ readonly templateVersionId!: pulumi.Output<string>;
    /**
     * The multi cluster app upgrade strategy (list MaxItems:1)
     */
    public readonly upgradeStrategy!: pulumi.Output<outputs.MultiClusterAppUpgradeStrategy>;
    /**
     * Wait until the multi cluster app is active. Default `true` (bool)
     */
    public readonly wait!: pulumi.Output<boolean | undefined>;

    /**
     * Create a MultiClusterApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MultiClusterAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MultiClusterAppArgs | MultiClusterAppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MultiClusterAppState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["answers"] = state ? state.answers : undefined;
            resourceInputs["catalogName"] = state ? state.catalogName : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["revisionHistoryLimit"] = state ? state.revisionHistoryLimit : undefined;
            resourceInputs["revisionId"] = state ? state.revisionId : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["templateVersion"] = state ? state.templateVersion : undefined;
            resourceInputs["templateVersionId"] = state ? state.templateVersionId : undefined;
            resourceInputs["upgradeStrategy"] = state ? state.upgradeStrategy : undefined;
            resourceInputs["wait"] = state ? state.wait : undefined;
        } else {
            const args = argsOrState as MultiClusterAppArgs | undefined;
            if ((!args || args.catalogName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalogName'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["answers"] = args ? args.answers : undefined;
            resourceInputs["catalogName"] = args ? args.catalogName : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["revisionHistoryLimit"] = args ? args.revisionHistoryLimit : undefined;
            resourceInputs["revisionId"] = args ? args.revisionId : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["templateVersion"] = args ? args.templateVersion : undefined;
            resourceInputs["upgradeStrategy"] = args ? args.upgradeStrategy : undefined;
            resourceInputs["wait"] = args ? args.wait : undefined;
            resourceInputs["templateVersionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MultiClusterApp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MultiClusterApp resources.
 */
export interface MultiClusterAppState {
    /**
     * Annotations for multi cluster app object (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The multi cluster app answers (list)
     */
    answers?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppAnswer>[]>;
    /**
     * The multi cluster app catalog name (string)
     */
    catalogName?: pulumi.Input<string>;
    /**
     * Labels for multi cluster app object (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The multi cluster app answers (list)
     */
    members?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppMember>[]>;
    /**
     * The multi cluster app name (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The multi cluster app revision history limit. Default `10` (int)
     */
    revisionHistoryLimit?: pulumi.Input<number>;
    /**
     * Current revision id for the multi cluster app (string)
     */
    revisionId?: pulumi.Input<string>;
    /**
     * The multi cluster app roles (list)
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The multi cluster app target projects (list)
     */
    targets?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppTarget>[]>;
    /**
     * The multi cluster app template name (string)
     */
    templateName?: pulumi.Input<string>;
    /**
     * The multi cluster app template version. Default: `latest` (string)
     */
    templateVersion?: pulumi.Input<string>;
    /**
     * (Computed) The multi cluster app template version ID (string)
     */
    templateVersionId?: pulumi.Input<string>;
    /**
     * The multi cluster app upgrade strategy (list MaxItems:1)
     */
    upgradeStrategy?: pulumi.Input<inputs.MultiClusterAppUpgradeStrategy>;
    /**
     * Wait until the multi cluster app is active. Default `true` (bool)
     */
    wait?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MultiClusterApp resource.
 */
export interface MultiClusterAppArgs {
    /**
     * Annotations for multi cluster app object (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The multi cluster app answers (list)
     */
    answers?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppAnswer>[]>;
    /**
     * The multi cluster app catalog name (string)
     */
    catalogName: pulumi.Input<string>;
    /**
     * Labels for multi cluster app object (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The multi cluster app answers (list)
     */
    members?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppMember>[]>;
    /**
     * The multi cluster app name (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The multi cluster app revision history limit. Default `10` (int)
     */
    revisionHistoryLimit?: pulumi.Input<number>;
    /**
     * Current revision id for the multi cluster app (string)
     */
    revisionId?: pulumi.Input<string>;
    /**
     * The multi cluster app roles (list)
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The multi cluster app target projects (list)
     */
    targets: pulumi.Input<pulumi.Input<inputs.MultiClusterAppTarget>[]>;
    /**
     * The multi cluster app template name (string)
     */
    templateName: pulumi.Input<string>;
    /**
     * The multi cluster app template version. Default: `latest` (string)
     */
    templateVersion?: pulumi.Input<string>;
    /**
     * The multi cluster app upgrade strategy (list MaxItems:1)
     */
    upgradeStrategy?: pulumi.Input<inputs.MultiClusterAppUpgradeStrategy>;
    /**
     * Wait until the multi cluster app is active. Default `true` (bool)
     */
    wait?: pulumi.Input<boolean>;
}
