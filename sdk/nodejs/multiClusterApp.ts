// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * Multi cluster app can be imported using the multi cluster app ID in the format `<multi_cluster_app_name>`
 *
 * ```sh
 *  $ pulumi import rancher2:index/multiClusterApp:MultiClusterApp foo &lt;MULTI_CLUSTER_APP_ID&gt;
 * ```
 */
export class MultiClusterApp extends pulumi.CustomResource {
    /**
     * Get an existing MultiClusterApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MultiClusterAppState, opts?: pulumi.CustomResourceOptions): MultiClusterApp {
        return new MultiClusterApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/multiClusterApp:MultiClusterApp';

    /**
     * Returns true if the given object is an instance of MultiClusterApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MultiClusterApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MultiClusterApp.__pulumiType;
    }

    /**
     * Annotations for multi cluster app object (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * The multi cluster app answers (list)
     */
    public readonly answers!: pulumi.Output<outputs.MultiClusterAppAnswer[]>;
    /**
     * The multi cluster app catalog name (string)
     */
    public readonly catalogName!: pulumi.Output<string>;
    /**
     * Labels for multi cluster app object (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * The multi cluster app answers (list)
     */
    public readonly members!: pulumi.Output<outputs.MultiClusterAppMember[] | undefined>;
    /**
     * The multi cluster app name (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The multi cluster app revision history limit. Default `10` (int)
     */
    public readonly revisionHistoryLimit!: pulumi.Output<number | undefined>;
    /**
     * Current revision id for the multi cluster app (string)
     */
    public readonly revisionId!: pulumi.Output<string>;
    /**
     * The multi cluster app roles (list)
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * The multi cluster app target projects (list)
     */
    public readonly targets!: pulumi.Output<outputs.MultiClusterAppTarget[]>;
    /**
     * The multi cluster app template name (string)
     */
    public readonly templateName!: pulumi.Output<string>;
    /**
     * The multi cluster app template version. Default: `latest` (string)
     */
    public readonly templateVersion!: pulumi.Output<string>;
    /**
     * (Computed) The multi cluster app template version ID (string)
     */
    public /*out*/ readonly templateVersionId!: pulumi.Output<string>;
    /**
     * The multi cluster app upgrade strategy (list MaxItems:1)
     */
    public readonly upgradeStrategy!: pulumi.Output<outputs.MultiClusterAppUpgradeStrategy>;
    /**
     * Wait until the multi cluster app is active. Default `true` (bool)
     */
    public readonly wait!: pulumi.Output<boolean | undefined>;

    /**
     * Create a MultiClusterApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MultiClusterAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MultiClusterAppArgs | MultiClusterAppState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as MultiClusterAppState | undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["answers"] = state ? state.answers : undefined;
            inputs["catalogName"] = state ? state.catalogName : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["members"] = state ? state.members : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["revisionHistoryLimit"] = state ? state.revisionHistoryLimit : undefined;
            inputs["revisionId"] = state ? state.revisionId : undefined;
            inputs["roles"] = state ? state.roles : undefined;
            inputs["targets"] = state ? state.targets : undefined;
            inputs["templateName"] = state ? state.templateName : undefined;
            inputs["templateVersion"] = state ? state.templateVersion : undefined;
            inputs["templateVersionId"] = state ? state.templateVersionId : undefined;
            inputs["upgradeStrategy"] = state ? state.upgradeStrategy : undefined;
            inputs["wait"] = state ? state.wait : undefined;
        } else {
            const args = argsOrState as MultiClusterAppArgs | undefined;
            if (!args || args.catalogName === undefined) {
                throw new Error("Missing required property 'catalogName'");
            }
            if (!args || args.roles === undefined) {
                throw new Error("Missing required property 'roles'");
            }
            if (!args || args.targets === undefined) {
                throw new Error("Missing required property 'targets'");
            }
            if (!args || args.templateName === undefined) {
                throw new Error("Missing required property 'templateName'");
            }
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["answers"] = args ? args.answers : undefined;
            inputs["catalogName"] = args ? args.catalogName : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["members"] = args ? args.members : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["revisionHistoryLimit"] = args ? args.revisionHistoryLimit : undefined;
            inputs["revisionId"] = args ? args.revisionId : undefined;
            inputs["roles"] = args ? args.roles : undefined;
            inputs["targets"] = args ? args.targets : undefined;
            inputs["templateName"] = args ? args.templateName : undefined;
            inputs["templateVersion"] = args ? args.templateVersion : undefined;
            inputs["upgradeStrategy"] = args ? args.upgradeStrategy : undefined;
            inputs["wait"] = args ? args.wait : undefined;
            inputs["templateVersionId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(MultiClusterApp.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MultiClusterApp resources.
 */
export interface MultiClusterAppState {
    /**
     * Annotations for multi cluster app object (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The multi cluster app answers (list)
     */
    readonly answers?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppAnswer>[]>;
    /**
     * The multi cluster app catalog name (string)
     */
    readonly catalogName?: pulumi.Input<string>;
    /**
     * Labels for multi cluster app object (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The multi cluster app answers (list)
     */
    readonly members?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppMember>[]>;
    /**
     * The multi cluster app name (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The multi cluster app revision history limit. Default `10` (int)
     */
    readonly revisionHistoryLimit?: pulumi.Input<number>;
    /**
     * Current revision id for the multi cluster app (string)
     */
    readonly revisionId?: pulumi.Input<string>;
    /**
     * The multi cluster app roles (list)
     */
    readonly roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The multi cluster app target projects (list)
     */
    readonly targets?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppTarget>[]>;
    /**
     * The multi cluster app template name (string)
     */
    readonly templateName?: pulumi.Input<string>;
    /**
     * The multi cluster app template version. Default: `latest` (string)
     */
    readonly templateVersion?: pulumi.Input<string>;
    /**
     * (Computed) The multi cluster app template version ID (string)
     */
    readonly templateVersionId?: pulumi.Input<string>;
    /**
     * The multi cluster app upgrade strategy (list MaxItems:1)
     */
    readonly upgradeStrategy?: pulumi.Input<inputs.MultiClusterAppUpgradeStrategy>;
    /**
     * Wait until the multi cluster app is active. Default `true` (bool)
     */
    readonly wait?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MultiClusterApp resource.
 */
export interface MultiClusterAppArgs {
    /**
     * Annotations for multi cluster app object (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The multi cluster app answers (list)
     */
    readonly answers?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppAnswer>[]>;
    /**
     * The multi cluster app catalog name (string)
     */
    readonly catalogName: pulumi.Input<string>;
    /**
     * Labels for multi cluster app object (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The multi cluster app answers (list)
     */
    readonly members?: pulumi.Input<pulumi.Input<inputs.MultiClusterAppMember>[]>;
    /**
     * The multi cluster app name (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The multi cluster app revision history limit. Default `10` (int)
     */
    readonly revisionHistoryLimit?: pulumi.Input<number>;
    /**
     * Current revision id for the multi cluster app (string)
     */
    readonly revisionId?: pulumi.Input<string>;
    /**
     * The multi cluster app roles (list)
     */
    readonly roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The multi cluster app target projects (list)
     */
    readonly targets: pulumi.Input<pulumi.Input<inputs.MultiClusterAppTarget>[]>;
    /**
     * The multi cluster app template name (string)
     */
    readonly templateName: pulumi.Input<string>;
    /**
     * The multi cluster app template version. Default: `latest` (string)
     */
    readonly templateVersion?: pulumi.Input<string>;
    /**
     * The multi cluster app upgrade strategy (list MaxItems:1)
     */
    readonly upgradeStrategy?: pulumi.Input<inputs.MultiClusterAppUpgradeStrategy>;
    /**
     * Wait until the multi cluster app is active. Default `true` (bool)
     */
    readonly wait?: pulumi.Input<boolean>;
}
