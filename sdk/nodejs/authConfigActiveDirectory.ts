// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Auth Config ActiveDirectory resource. This can be used to configure and enable Auth Config ActiveDirectory for Rancher v2 RKE clusters and retrieve their information.
 *
 * In addition to the built-in local auth, only one external auth config provider can be enabled at a time.
 */
export class AuthConfigActiveDirectory extends pulumi.CustomResource {
    /**
     * Get an existing AuthConfigActiveDirectory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthConfigActiveDirectoryState, opts?: pulumi.CustomResourceOptions): AuthConfigActiveDirectory {
        return new AuthConfigActiveDirectory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/authConfigActiveDirectory:AuthConfigActiveDirectory';

    /**
     * Returns true if the given object is an instance of AuthConfigActiveDirectory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthConfigActiveDirectory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthConfigActiveDirectory.__pulumiType;
    }

    /**
     * Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
     */
    declare public readonly accessMode: pulumi.Output<string | undefined>;
    /**
     * Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `activedirectory_user://<DN>`  `activedirectory_group://<DN>`. The local admin (`local://<admin id>`) and the `testUsername` must be added too. (list)
     */
    declare public readonly allowedPrincipalIds: pulumi.Output<string[] | undefined>;
    /**
     * Annotations of the resource (map)
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string}>;
    /**
     * CA certificate for TLS if selfsigned (string)
     */
    declare public readonly certificate: pulumi.Output<string | undefined>;
    /**
     * ActiveDirectory connection timeout. Default `5000` (int)
     */
    declare public readonly connectionTimeout: pulumi.Output<number | undefined>;
    /**
     * ActiveDirectory defult login domain (string)
     */
    declare public readonly defaultLoginDomain: pulumi.Output<string | undefined>;
    /**
     * Enable auth config provider. Default `true` (bool)
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * Group DN attribute. Default `distinguishedName` (string)
     */
    declare public readonly groupDnAttribute: pulumi.Output<string>;
    /**
     * Group member mapping attribute. Default `member` (string)
     */
    declare public readonly groupMemberMappingAttribute: pulumi.Output<string>;
    /**
     * Group member user attribute. Default `distinguishedName` (string)
     */
    declare public readonly groupMemberUserAttribute: pulumi.Output<string>;
    /**
     * Group name attribute. Default `name` (string)
     */
    declare public readonly groupNameAttribute: pulumi.Output<string>;
    /**
     * Group object class. Default `group` (string)
     */
    declare public readonly groupObjectClass: pulumi.Output<string>;
    /**
     * Group search attribute. Default `sAMAccountName` (string)
     */
    declare public readonly groupSearchAttribute: pulumi.Output<string>;
    /**
     * Group search base (string)
     */
    declare public readonly groupSearchBase: pulumi.Output<string>;
    /**
     * Group search filter (string)
     */
    declare public readonly groupSearchFilter: pulumi.Output<string>;
    /**
     * Labels of the resource (map)
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * (Computed) The name of the resource (string)
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Nested group membership enable. Default `false` (bool)
     */
    declare public readonly nestedGroupMembershipEnabled: pulumi.Output<boolean>;
    /**
     * ActiveDirectory port. Default `389` (int)
     */
    declare public readonly port: pulumi.Output<number | undefined>;
    /**
     * ActiveDirectory servers list (list)
     */
    declare public readonly servers: pulumi.Output<string[]>;
    /**
     * Service account password for access ActiveDirectory service (string)
     */
    declare public readonly serviceAccountPassword: pulumi.Output<string>;
    /**
     * Service account DN for access ActiveDirectory service (string)
     */
    declare public readonly serviceAccountUsername: pulumi.Output<string>;
    /**
     * Enable start TLS connection (bool)
     */
    declare public readonly startTls: pulumi.Output<boolean>;
    /**
     * Password for test access to ActiveDirectory service (string)
     */
    declare public readonly testPassword: pulumi.Output<string>;
    /**
     * Username for test access to ActiveDirectory service (string)
     */
    declare public readonly testUsername: pulumi.Output<string>;
    /**
     * Enable TLS connection (bool)
     */
    declare public readonly tls: pulumi.Output<boolean>;
    /**
     * (Computed) The type of the resource (string)
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * User disabled bit mask. Default `2` (int)
     */
    declare public readonly userDisabledBitMask: pulumi.Output<number | undefined>;
    /**
     * User enable attribute (string)
     */
    declare public readonly userEnabledAttribute: pulumi.Output<string>;
    /**
     * User login attribute. Default `sAMAccountName` (string)
     */
    declare public readonly userLoginAttribute: pulumi.Output<string>;
    /**
     * User name attribute. Default `name` (string)
     */
    declare public readonly userNameAttribute: pulumi.Output<string>;
    /**
     * User object class. Default `person` (string)
     */
    declare public readonly userObjectClass: pulumi.Output<string>;
    /**
     * User search attribute. Default `sAMAccountName|sn|givenName` (string)
     */
    declare public readonly userSearchAttribute: pulumi.Output<string>;
    /**
     * User search base DN (string)
     */
    declare public readonly userSearchBase: pulumi.Output<string>;
    /**
     * User search filter (string)
     */
    declare public readonly userSearchFilter: pulumi.Output<string>;

    /**
     * Create a AuthConfigActiveDirectory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthConfigActiveDirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthConfigActiveDirectoryArgs | AuthConfigActiveDirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthConfigActiveDirectoryState | undefined;
            resourceInputs["accessMode"] = state?.accessMode;
            resourceInputs["allowedPrincipalIds"] = state?.allowedPrincipalIds;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["connectionTimeout"] = state?.connectionTimeout;
            resourceInputs["defaultLoginDomain"] = state?.defaultLoginDomain;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["groupDnAttribute"] = state?.groupDnAttribute;
            resourceInputs["groupMemberMappingAttribute"] = state?.groupMemberMappingAttribute;
            resourceInputs["groupMemberUserAttribute"] = state?.groupMemberUserAttribute;
            resourceInputs["groupNameAttribute"] = state?.groupNameAttribute;
            resourceInputs["groupObjectClass"] = state?.groupObjectClass;
            resourceInputs["groupSearchAttribute"] = state?.groupSearchAttribute;
            resourceInputs["groupSearchBase"] = state?.groupSearchBase;
            resourceInputs["groupSearchFilter"] = state?.groupSearchFilter;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["nestedGroupMembershipEnabled"] = state?.nestedGroupMembershipEnabled;
            resourceInputs["port"] = state?.port;
            resourceInputs["servers"] = state?.servers;
            resourceInputs["serviceAccountPassword"] = state?.serviceAccountPassword;
            resourceInputs["serviceAccountUsername"] = state?.serviceAccountUsername;
            resourceInputs["startTls"] = state?.startTls;
            resourceInputs["testPassword"] = state?.testPassword;
            resourceInputs["testUsername"] = state?.testUsername;
            resourceInputs["tls"] = state?.tls;
            resourceInputs["type"] = state?.type;
            resourceInputs["userDisabledBitMask"] = state?.userDisabledBitMask;
            resourceInputs["userEnabledAttribute"] = state?.userEnabledAttribute;
            resourceInputs["userLoginAttribute"] = state?.userLoginAttribute;
            resourceInputs["userNameAttribute"] = state?.userNameAttribute;
            resourceInputs["userObjectClass"] = state?.userObjectClass;
            resourceInputs["userSearchAttribute"] = state?.userSearchAttribute;
            resourceInputs["userSearchBase"] = state?.userSearchBase;
            resourceInputs["userSearchFilter"] = state?.userSearchFilter;
        } else {
            const args = argsOrState as AuthConfigActiveDirectoryArgs | undefined;
            if (args?.servers === undefined && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            if (args?.serviceAccountPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountPassword'");
            }
            if (args?.serviceAccountUsername === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountUsername'");
            }
            if (args?.testPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'testPassword'");
            }
            if (args?.testUsername === undefined && !opts.urn) {
                throw new Error("Missing required property 'testUsername'");
            }
            if (args?.userSearchBase === undefined && !opts.urn) {
                throw new Error("Missing required property 'userSearchBase'");
            }
            resourceInputs["accessMode"] = args?.accessMode;
            resourceInputs["allowedPrincipalIds"] = args?.allowedPrincipalIds;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["certificate"] = args?.certificate ? pulumi.secret(args.certificate) : undefined;
            resourceInputs["connectionTimeout"] = args?.connectionTimeout;
            resourceInputs["defaultLoginDomain"] = args?.defaultLoginDomain;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["groupDnAttribute"] = args?.groupDnAttribute;
            resourceInputs["groupMemberMappingAttribute"] = args?.groupMemberMappingAttribute;
            resourceInputs["groupMemberUserAttribute"] = args?.groupMemberUserAttribute;
            resourceInputs["groupNameAttribute"] = args?.groupNameAttribute;
            resourceInputs["groupObjectClass"] = args?.groupObjectClass;
            resourceInputs["groupSearchAttribute"] = args?.groupSearchAttribute;
            resourceInputs["groupSearchBase"] = args?.groupSearchBase;
            resourceInputs["groupSearchFilter"] = args?.groupSearchFilter;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["nestedGroupMembershipEnabled"] = args?.nestedGroupMembershipEnabled;
            resourceInputs["port"] = args?.port;
            resourceInputs["servers"] = args?.servers;
            resourceInputs["serviceAccountPassword"] = args?.serviceAccountPassword ? pulumi.secret(args.serviceAccountPassword) : undefined;
            resourceInputs["serviceAccountUsername"] = args?.serviceAccountUsername ? pulumi.secret(args.serviceAccountUsername) : undefined;
            resourceInputs["startTls"] = args?.startTls;
            resourceInputs["testPassword"] = args?.testPassword ? pulumi.secret(args.testPassword) : undefined;
            resourceInputs["testUsername"] = args?.testUsername;
            resourceInputs["tls"] = args?.tls;
            resourceInputs["userDisabledBitMask"] = args?.userDisabledBitMask;
            resourceInputs["userEnabledAttribute"] = args?.userEnabledAttribute;
            resourceInputs["userLoginAttribute"] = args?.userLoginAttribute;
            resourceInputs["userNameAttribute"] = args?.userNameAttribute;
            resourceInputs["userObjectClass"] = args?.userObjectClass;
            resourceInputs["userSearchAttribute"] = args?.userSearchAttribute;
            resourceInputs["userSearchBase"] = args?.userSearchBase;
            resourceInputs["userSearchFilter"] = args?.userSearchFilter;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificate", "serviceAccountPassword", "serviceAccountUsername", "testPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AuthConfigActiveDirectory.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthConfigActiveDirectory resources.
 */
export interface AuthConfigActiveDirectoryState {
    /**
     * Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
     */
    accessMode?: pulumi.Input<string>;
    /**
     * Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `activedirectory_user://<DN>`  `activedirectory_group://<DN>`. The local admin (`local://<admin id>`) and the `testUsername` must be added too. (list)
     */
    allowedPrincipalIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * CA certificate for TLS if selfsigned (string)
     */
    certificate?: pulumi.Input<string>;
    /**
     * ActiveDirectory connection timeout. Default `5000` (int)
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * ActiveDirectory defult login domain (string)
     */
    defaultLoginDomain?: pulumi.Input<string>;
    /**
     * Enable auth config provider. Default `true` (bool)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Group DN attribute. Default `distinguishedName` (string)
     */
    groupDnAttribute?: pulumi.Input<string>;
    /**
     * Group member mapping attribute. Default `member` (string)
     */
    groupMemberMappingAttribute?: pulumi.Input<string>;
    /**
     * Group member user attribute. Default `distinguishedName` (string)
     */
    groupMemberUserAttribute?: pulumi.Input<string>;
    /**
     * Group name attribute. Default `name` (string)
     */
    groupNameAttribute?: pulumi.Input<string>;
    /**
     * Group object class. Default `group` (string)
     */
    groupObjectClass?: pulumi.Input<string>;
    /**
     * Group search attribute. Default `sAMAccountName` (string)
     */
    groupSearchAttribute?: pulumi.Input<string>;
    /**
     * Group search base (string)
     */
    groupSearchBase?: pulumi.Input<string>;
    /**
     * Group search filter (string)
     */
    groupSearchFilter?: pulumi.Input<string>;
    /**
     * Labels of the resource (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Computed) The name of the resource (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Nested group membership enable. Default `false` (bool)
     */
    nestedGroupMembershipEnabled?: pulumi.Input<boolean>;
    /**
     * ActiveDirectory port. Default `389` (int)
     */
    port?: pulumi.Input<number>;
    /**
     * ActiveDirectory servers list (list)
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service account password for access ActiveDirectory service (string)
     */
    serviceAccountPassword?: pulumi.Input<string>;
    /**
     * Service account DN for access ActiveDirectory service (string)
     */
    serviceAccountUsername?: pulumi.Input<string>;
    /**
     * Enable start TLS connection (bool)
     */
    startTls?: pulumi.Input<boolean>;
    /**
     * Password for test access to ActiveDirectory service (string)
     */
    testPassword?: pulumi.Input<string>;
    /**
     * Username for test access to ActiveDirectory service (string)
     */
    testUsername?: pulumi.Input<string>;
    /**
     * Enable TLS connection (bool)
     */
    tls?: pulumi.Input<boolean>;
    /**
     * (Computed) The type of the resource (string)
     */
    type?: pulumi.Input<string>;
    /**
     * User disabled bit mask. Default `2` (int)
     */
    userDisabledBitMask?: pulumi.Input<number>;
    /**
     * User enable attribute (string)
     */
    userEnabledAttribute?: pulumi.Input<string>;
    /**
     * User login attribute. Default `sAMAccountName` (string)
     */
    userLoginAttribute?: pulumi.Input<string>;
    /**
     * User name attribute. Default `name` (string)
     */
    userNameAttribute?: pulumi.Input<string>;
    /**
     * User object class. Default `person` (string)
     */
    userObjectClass?: pulumi.Input<string>;
    /**
     * User search attribute. Default `sAMAccountName|sn|givenName` (string)
     */
    userSearchAttribute?: pulumi.Input<string>;
    /**
     * User search base DN (string)
     */
    userSearchBase?: pulumi.Input<string>;
    /**
     * User search filter (string)
     */
    userSearchFilter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthConfigActiveDirectory resource.
 */
export interface AuthConfigActiveDirectoryArgs {
    /**
     * Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
     */
    accessMode?: pulumi.Input<string>;
    /**
     * Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `activedirectory_user://<DN>`  `activedirectory_group://<DN>`. The local admin (`local://<admin id>`) and the `testUsername` must be added too. (list)
     */
    allowedPrincipalIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * CA certificate for TLS if selfsigned (string)
     */
    certificate?: pulumi.Input<string>;
    /**
     * ActiveDirectory connection timeout. Default `5000` (int)
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * ActiveDirectory defult login domain (string)
     */
    defaultLoginDomain?: pulumi.Input<string>;
    /**
     * Enable auth config provider. Default `true` (bool)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Group DN attribute. Default `distinguishedName` (string)
     */
    groupDnAttribute?: pulumi.Input<string>;
    /**
     * Group member mapping attribute. Default `member` (string)
     */
    groupMemberMappingAttribute?: pulumi.Input<string>;
    /**
     * Group member user attribute. Default `distinguishedName` (string)
     */
    groupMemberUserAttribute?: pulumi.Input<string>;
    /**
     * Group name attribute. Default `name` (string)
     */
    groupNameAttribute?: pulumi.Input<string>;
    /**
     * Group object class. Default `group` (string)
     */
    groupObjectClass?: pulumi.Input<string>;
    /**
     * Group search attribute. Default `sAMAccountName` (string)
     */
    groupSearchAttribute?: pulumi.Input<string>;
    /**
     * Group search base (string)
     */
    groupSearchBase?: pulumi.Input<string>;
    /**
     * Group search filter (string)
     */
    groupSearchFilter?: pulumi.Input<string>;
    /**
     * Labels of the resource (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Nested group membership enable. Default `false` (bool)
     */
    nestedGroupMembershipEnabled?: pulumi.Input<boolean>;
    /**
     * ActiveDirectory port. Default `389` (int)
     */
    port?: pulumi.Input<number>;
    /**
     * ActiveDirectory servers list (list)
     */
    servers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service account password for access ActiveDirectory service (string)
     */
    serviceAccountPassword: pulumi.Input<string>;
    /**
     * Service account DN for access ActiveDirectory service (string)
     */
    serviceAccountUsername: pulumi.Input<string>;
    /**
     * Enable start TLS connection (bool)
     */
    startTls?: pulumi.Input<boolean>;
    /**
     * Password for test access to ActiveDirectory service (string)
     */
    testPassword: pulumi.Input<string>;
    /**
     * Username for test access to ActiveDirectory service (string)
     */
    testUsername: pulumi.Input<string>;
    /**
     * Enable TLS connection (bool)
     */
    tls?: pulumi.Input<boolean>;
    /**
     * User disabled bit mask. Default `2` (int)
     */
    userDisabledBitMask?: pulumi.Input<number>;
    /**
     * User enable attribute (string)
     */
    userEnabledAttribute?: pulumi.Input<string>;
    /**
     * User login attribute. Default `sAMAccountName` (string)
     */
    userLoginAttribute?: pulumi.Input<string>;
    /**
     * User name attribute. Default `name` (string)
     */
    userNameAttribute?: pulumi.Input<string>;
    /**
     * User object class. Default `person` (string)
     */
    userObjectClass?: pulumi.Input<string>;
    /**
     * User search attribute. Default `sAMAccountName|sn|givenName` (string)
     */
    userSearchAttribute?: pulumi.Input<string>;
    /**
     * User search base DN (string)
     */
    userSearchBase: pulumi.Input<string>;
    /**
     * User search filter (string)
     */
    userSearchFilter?: pulumi.Input<string>;
}
