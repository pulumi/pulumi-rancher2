// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Catalog resource. This can be used to create cluster, global and/or project catalogs for Rancher v2 environments and retrieve their information.
 * 
 * ## Example Usage
 * 
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 * 
 * // Create a new Rancher2 Global Catalog
 * const fooGlobal = new rancher2.Catalog("foo-global", {
 *     url: "https://<CATALOG_URL>",
 * });
 * // Create a new Rancher2 Cluster Catalog
 * const fooCluster = new rancher2.Catalog("foo-cluster", {
 *     scope: "cluster",
 *     url: "https://<CATALOG_URL>",
 * });
 * // Create a new Rancher2 Project Catalog
 * const fooProject = new rancher2.Catalog("foo-project", {
 *     scope: "project",
 *     url: "https://<CATALOG_URL>",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/catalog.html.markdown.
 */
export class Catalog extends pulumi.CustomResource {
    /**
     * Get an existing Catalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogState, opts?: pulumi.CustomResourceOptions): Catalog {
        return new Catalog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/catalog:Catalog';

    /**
     * Returns true if the given object is an instance of Catalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Catalog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Catalog.__pulumiType;
    }

    /**
     * Annotations for the catalog (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * The branch of the catalog repo to use. Default `master` (string)
     */
    public readonly branch!: pulumi.Output<string | undefined>;
    /**
     * The cluster id of the catalog. Mandatory if `scope = cluster` (string)
     */
    public readonly clusterId!: pulumi.Output<string | undefined>;
    /**
     * A catalog description (string)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The kind of the catalog. Just helm by the moment (string)
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Labels for the catalog (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * The name of the catalog (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password to access the catalog if needed (string)
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The project id of the catalog. Mandatory if `scope = project` (string)
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
     */
    public readonly refresh!: pulumi.Output<boolean | undefined>;
    /**
     * The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * The url of the catalog repo (string)
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The username to access the catalog if needed (string)
     */
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * Helm version for the catalog. Available options: `helmV2` and `helmV3` (string)
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Catalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogArgs | CatalogState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as CatalogState | undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["branch"] = state ? state.branch : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["kind"] = state ? state.kind : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["refresh"] = state ? state.refresh : undefined;
            inputs["scope"] = state ? state.scope : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["username"] = state ? state.username : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CatalogArgs | undefined;
            if (!args || args.url === undefined) {
                throw new Error("Missing required property 'url'");
            }
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["branch"] = args ? args.branch : undefined;
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["refresh"] = args ? args.refresh : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["url"] = args ? args.url : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["version"] = args ? args.version : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Catalog.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Catalog resources.
 */
export interface CatalogState {
    /**
     * Annotations for the catalog (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The branch of the catalog repo to use. Default `master` (string)
     */
    readonly branch?: pulumi.Input<string>;
    /**
     * The cluster id of the catalog. Mandatory if `scope = cluster` (string)
     */
    readonly clusterId?: pulumi.Input<string>;
    /**
     * A catalog description (string)
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The kind of the catalog. Just helm by the moment (string)
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * Labels for the catalog (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the catalog (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The password to access the catalog if needed (string)
     */
    readonly password?: pulumi.Input<string>;
    /**
     * The project id of the catalog. Mandatory if `scope = project` (string)
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
     */
    readonly refresh?: pulumi.Input<boolean>;
    /**
     * The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
     */
    readonly scope?: pulumi.Input<string>;
    /**
     * The url of the catalog repo (string)
     */
    readonly url?: pulumi.Input<string>;
    /**
     * The username to access the catalog if needed (string)
     */
    readonly username?: pulumi.Input<string>;
    /**
     * Helm version for the catalog. Available options: `helmV2` and `helmV3` (string)
     */
    readonly version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Catalog resource.
 */
export interface CatalogArgs {
    /**
     * Annotations for the catalog (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The branch of the catalog repo to use. Default `master` (string)
     */
    readonly branch?: pulumi.Input<string>;
    /**
     * The cluster id of the catalog. Mandatory if `scope = cluster` (string)
     */
    readonly clusterId?: pulumi.Input<string>;
    /**
     * A catalog description (string)
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The kind of the catalog. Just helm by the moment (string)
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * Labels for the catalog (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the catalog (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The password to access the catalog if needed (string)
     */
    readonly password?: pulumi.Input<string>;
    /**
     * The project id of the catalog. Mandatory if `scope = project` (string)
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
     */
    readonly refresh?: pulumi.Input<boolean>;
    /**
     * The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
     */
    readonly scope?: pulumi.Input<string>;
    /**
     * The url of the catalog repo (string)
     */
    readonly url: pulumi.Input<string>;
    /**
     * The username to access the catalog if needed (string)
     */
    readonly username?: pulumi.Input<string>;
    /**
     * Helm version for the catalog. Available options: `helmV2` and `helmV3` (string)
     */
    readonly version?: pulumi.Input<string>;
}
