// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * @deprecated rancher2.ActiveDirectory has been deprecated in favor of rancher2.AuthConfigActiveDirectory
 */
export class ActiveDirectory extends pulumi.CustomResource {
    /**
     * Get an existing ActiveDirectory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActiveDirectoryState, opts?: pulumi.CustomResourceOptions): ActiveDirectory {
        pulumi.log.warn("ActiveDirectory is deprecated: rancher2.ActiveDirectory has been deprecated in favor of rancher2.AuthConfigActiveDirectory")
        return new ActiveDirectory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/activeDirectory:ActiveDirectory';

    /**
     * Returns true if the given object is an instance of ActiveDirectory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActiveDirectory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActiveDirectory.__pulumiType;
    }

    public readonly accessMode!: pulumi.Output<string | undefined>;
    public readonly allowedPrincipalIds!: pulumi.Output<string[] | undefined>;
    /**
     * Annotations of the resource
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    public readonly certificate!: pulumi.Output<string | undefined>;
    public readonly connectionTimeout!: pulumi.Output<number | undefined>;
    public readonly defaultLoginDomain!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly groupDnAttribute!: pulumi.Output<string>;
    public readonly groupMemberMappingAttribute!: pulumi.Output<string>;
    public readonly groupMemberUserAttribute!: pulumi.Output<string>;
    public readonly groupNameAttribute!: pulumi.Output<string>;
    public readonly groupObjectClass!: pulumi.Output<string>;
    public readonly groupSearchAttribute!: pulumi.Output<string>;
    public readonly groupSearchBase!: pulumi.Output<string>;
    public readonly groupSearchFilter!: pulumi.Output<string>;
    /**
     * Labels of the resource
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly nestedGroupMembershipEnabled!: pulumi.Output<boolean>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly servers!: pulumi.Output<string[]>;
    public readonly serviceAccountPassword!: pulumi.Output<string>;
    public readonly serviceAccountUsername!: pulumi.Output<string>;
    public readonly startTls!: pulumi.Output<boolean>;
    public readonly testPassword!: pulumi.Output<string>;
    public readonly testUsername!: pulumi.Output<string>;
    public readonly tls!: pulumi.Output<boolean>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly userDisabledBitMask!: pulumi.Output<number | undefined>;
    public readonly userEnabledAttribute!: pulumi.Output<string>;
    public readonly userLoginAttribute!: pulumi.Output<string>;
    public readonly userNameAttribute!: pulumi.Output<string>;
    public readonly userObjectClass!: pulumi.Output<string>;
    public readonly userSearchAttribute!: pulumi.Output<string>;
    public readonly userSearchBase!: pulumi.Output<string>;
    public readonly userSearchFilter!: pulumi.Output<string>;

    /**
     * Create a ActiveDirectory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated rancher2.ActiveDirectory has been deprecated in favor of rancher2.AuthConfigActiveDirectory */
    constructor(name: string, args: ActiveDirectoryArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated rancher2.ActiveDirectory has been deprecated in favor of rancher2.AuthConfigActiveDirectory */
    constructor(name: string, argsOrState?: ActiveDirectoryArgs | ActiveDirectoryState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("ActiveDirectory is deprecated: rancher2.ActiveDirectory has been deprecated in favor of rancher2.AuthConfigActiveDirectory")
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActiveDirectoryState | undefined;
            inputs["accessMode"] = state ? state.accessMode : undefined;
            inputs["allowedPrincipalIds"] = state ? state.allowedPrincipalIds : undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["certificate"] = state ? state.certificate : undefined;
            inputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            inputs["defaultLoginDomain"] = state ? state.defaultLoginDomain : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["groupDnAttribute"] = state ? state.groupDnAttribute : undefined;
            inputs["groupMemberMappingAttribute"] = state ? state.groupMemberMappingAttribute : undefined;
            inputs["groupMemberUserAttribute"] = state ? state.groupMemberUserAttribute : undefined;
            inputs["groupNameAttribute"] = state ? state.groupNameAttribute : undefined;
            inputs["groupObjectClass"] = state ? state.groupObjectClass : undefined;
            inputs["groupSearchAttribute"] = state ? state.groupSearchAttribute : undefined;
            inputs["groupSearchBase"] = state ? state.groupSearchBase : undefined;
            inputs["groupSearchFilter"] = state ? state.groupSearchFilter : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nestedGroupMembershipEnabled"] = state ? state.nestedGroupMembershipEnabled : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["servers"] = state ? state.servers : undefined;
            inputs["serviceAccountPassword"] = state ? state.serviceAccountPassword : undefined;
            inputs["serviceAccountUsername"] = state ? state.serviceAccountUsername : undefined;
            inputs["startTls"] = state ? state.startTls : undefined;
            inputs["testPassword"] = state ? state.testPassword : undefined;
            inputs["testUsername"] = state ? state.testUsername : undefined;
            inputs["tls"] = state ? state.tls : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["userDisabledBitMask"] = state ? state.userDisabledBitMask : undefined;
            inputs["userEnabledAttribute"] = state ? state.userEnabledAttribute : undefined;
            inputs["userLoginAttribute"] = state ? state.userLoginAttribute : undefined;
            inputs["userNameAttribute"] = state ? state.userNameAttribute : undefined;
            inputs["userObjectClass"] = state ? state.userObjectClass : undefined;
            inputs["userSearchAttribute"] = state ? state.userSearchAttribute : undefined;
            inputs["userSearchBase"] = state ? state.userSearchBase : undefined;
            inputs["userSearchFilter"] = state ? state.userSearchFilter : undefined;
        } else {
            const args = argsOrState as ActiveDirectoryArgs | undefined;
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            if ((!args || args.serviceAccountPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountPassword'");
            }
            if ((!args || args.serviceAccountUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountUsername'");
            }
            if ((!args || args.testPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testPassword'");
            }
            if ((!args || args.testUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testUsername'");
            }
            if ((!args || args.userSearchBase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userSearchBase'");
            }
            inputs["accessMode"] = args ? args.accessMode : undefined;
            inputs["allowedPrincipalIds"] = args ? args.allowedPrincipalIds : undefined;
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["certificate"] = args ? args.certificate : undefined;
            inputs["connectionTimeout"] = args ? args.connectionTimeout : undefined;
            inputs["defaultLoginDomain"] = args ? args.defaultLoginDomain : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["groupDnAttribute"] = args ? args.groupDnAttribute : undefined;
            inputs["groupMemberMappingAttribute"] = args ? args.groupMemberMappingAttribute : undefined;
            inputs["groupMemberUserAttribute"] = args ? args.groupMemberUserAttribute : undefined;
            inputs["groupNameAttribute"] = args ? args.groupNameAttribute : undefined;
            inputs["groupObjectClass"] = args ? args.groupObjectClass : undefined;
            inputs["groupSearchAttribute"] = args ? args.groupSearchAttribute : undefined;
            inputs["groupSearchBase"] = args ? args.groupSearchBase : undefined;
            inputs["groupSearchFilter"] = args ? args.groupSearchFilter : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["nestedGroupMembershipEnabled"] = args ? args.nestedGroupMembershipEnabled : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["servers"] = args ? args.servers : undefined;
            inputs["serviceAccountPassword"] = args ? args.serviceAccountPassword : undefined;
            inputs["serviceAccountUsername"] = args ? args.serviceAccountUsername : undefined;
            inputs["startTls"] = args ? args.startTls : undefined;
            inputs["testPassword"] = args ? args.testPassword : undefined;
            inputs["testUsername"] = args ? args.testUsername : undefined;
            inputs["tls"] = args ? args.tls : undefined;
            inputs["userDisabledBitMask"] = args ? args.userDisabledBitMask : undefined;
            inputs["userEnabledAttribute"] = args ? args.userEnabledAttribute : undefined;
            inputs["userLoginAttribute"] = args ? args.userLoginAttribute : undefined;
            inputs["userNameAttribute"] = args ? args.userNameAttribute : undefined;
            inputs["userObjectClass"] = args ? args.userObjectClass : undefined;
            inputs["userSearchAttribute"] = args ? args.userSearchAttribute : undefined;
            inputs["userSearchBase"] = args ? args.userSearchBase : undefined;
            inputs["userSearchFilter"] = args ? args.userSearchFilter : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ActiveDirectory.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ActiveDirectory resources.
 */
export interface ActiveDirectoryState {
    readonly accessMode?: pulumi.Input<string>;
    readonly allowedPrincipalIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    readonly certificate?: pulumi.Input<string>;
    readonly connectionTimeout?: pulumi.Input<number>;
    readonly defaultLoginDomain?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly groupDnAttribute?: pulumi.Input<string>;
    readonly groupMemberMappingAttribute?: pulumi.Input<string>;
    readonly groupMemberUserAttribute?: pulumi.Input<string>;
    readonly groupNameAttribute?: pulumi.Input<string>;
    readonly groupObjectClass?: pulumi.Input<string>;
    readonly groupSearchAttribute?: pulumi.Input<string>;
    readonly groupSearchBase?: pulumi.Input<string>;
    readonly groupSearchFilter?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly nestedGroupMembershipEnabled?: pulumi.Input<boolean>;
    readonly port?: pulumi.Input<number>;
    readonly servers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly serviceAccountPassword?: pulumi.Input<string>;
    readonly serviceAccountUsername?: pulumi.Input<string>;
    readonly startTls?: pulumi.Input<boolean>;
    readonly testPassword?: pulumi.Input<string>;
    readonly testUsername?: pulumi.Input<string>;
    readonly tls?: pulumi.Input<boolean>;
    readonly type?: pulumi.Input<string>;
    readonly userDisabledBitMask?: pulumi.Input<number>;
    readonly userEnabledAttribute?: pulumi.Input<string>;
    readonly userLoginAttribute?: pulumi.Input<string>;
    readonly userNameAttribute?: pulumi.Input<string>;
    readonly userObjectClass?: pulumi.Input<string>;
    readonly userSearchAttribute?: pulumi.Input<string>;
    readonly userSearchBase?: pulumi.Input<string>;
    readonly userSearchFilter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ActiveDirectory resource.
 */
export interface ActiveDirectoryArgs {
    readonly accessMode?: pulumi.Input<string>;
    readonly allowedPrincipalIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Annotations of the resource
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    readonly certificate?: pulumi.Input<string>;
    readonly connectionTimeout?: pulumi.Input<number>;
    readonly defaultLoginDomain?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly groupDnAttribute?: pulumi.Input<string>;
    readonly groupMemberMappingAttribute?: pulumi.Input<string>;
    readonly groupMemberUserAttribute?: pulumi.Input<string>;
    readonly groupNameAttribute?: pulumi.Input<string>;
    readonly groupObjectClass?: pulumi.Input<string>;
    readonly groupSearchAttribute?: pulumi.Input<string>;
    readonly groupSearchBase?: pulumi.Input<string>;
    readonly groupSearchFilter?: pulumi.Input<string>;
    /**
     * Labels of the resource
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly nestedGroupMembershipEnabled?: pulumi.Input<boolean>;
    readonly port?: pulumi.Input<number>;
    readonly servers: pulumi.Input<pulumi.Input<string>[]>;
    readonly serviceAccountPassword: pulumi.Input<string>;
    readonly serviceAccountUsername: pulumi.Input<string>;
    readonly startTls?: pulumi.Input<boolean>;
    readonly testPassword: pulumi.Input<string>;
    readonly testUsername: pulumi.Input<string>;
    readonly tls?: pulumi.Input<boolean>;
    readonly userDisabledBitMask?: pulumi.Input<number>;
    readonly userEnabledAttribute?: pulumi.Input<string>;
    readonly userLoginAttribute?: pulumi.Input<string>;
    readonly userNameAttribute?: pulumi.Input<string>;
    readonly userObjectClass?: pulumi.Input<string>;
    readonly userSearchAttribute?: pulumi.Input<string>;
    readonly userSearchBase: pulumi.Input<string>;
    readonly userSearchFilter?: pulumi.Input<string>;
}
