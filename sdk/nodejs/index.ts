// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./activeDirectory";
export * from "./app";
export * from "./appV2";
export * from "./authConfigActiveDirectory";
export * from "./authConfigAdfs";
export * from "./authConfigAzureAd";
export * from "./authConfigFreeIpa";
export * from "./authConfigGithub";
export * from "./authConfigKeycloak";
export * from "./authConfigOkta";
export * from "./authConfigOpenLdap";
export * from "./authConfigPing";
export * from "./bootstrap";
export * from "./catalog";
export * from "./catalogV2";
export * from "./certificate";
export * from "./cloudCredential";
export * from "./cluster";
export * from "./clusterAlertGroup";
export * from "./clusterAlertRule";
export * from "./clusterAlterGroup";
export * from "./clusterAlterRule";
export * from "./clusterDriver";
export * from "./clusterLogging";
export * from "./clusterRoleTemplateBinding";
export * from "./clusterSync";
export * from "./clusterTemplate";
export * from "./clusterV2";
export * from "./configMapV2";
export * from "./etcdBackup";
export * from "./feature";
export * from "./getApp";
export * from "./getCatalog";
export * from "./getCatalogV2";
export * from "./getCertificate";
export * from "./getCloudCredential";
export * from "./getCluster";
export * from "./getClusterAlertGroup";
export * from "./getClusterAlterRule";
export * from "./getClusterDriver";
export * from "./getClusterLogging";
export * from "./getClusterRoleTemplateBinding";
export * from "./getClusterScan";
export * from "./getClusterTemplate";
export * from "./getClusterV2";
export * from "./getConfigMapV2";
export * from "./getEtcdBackup";
export * from "./getGlobalDnsProvider";
export * from "./getGlobalRole";
export * from "./getGlobalRoleBinding";
export * from "./getMultiClusterApp";
export * from "./getNamespace";
export * from "./getNodeDriver";
export * from "./getNodePool";
export * from "./getNodeTemplate";
export * from "./getNotifier";
export * from "./getPodSecurityPolicyTemplate";
export * from "./getPrincipal";
export * from "./getProject";
export * from "./getProjectAlertGroup";
export * from "./getProjectAlertRule";
export * from "./getProjectLogging";
export * from "./getProjectRoleTemplateBinding";
export * from "./getRegistry";
export * from "./getRoleTempalte";
export * from "./getRoleTemplate";
export * from "./getSecret";
export * from "./getSecretV2";
export * from "./getSetting";
export * from "./getStorageClassV2";
export * from "./getUser";
export * from "./globalDns";
export * from "./globalDnsProvider";
export * from "./globalRole";
export * from "./globalRoleBinding";
export * from "./machineConfigV2";
export * from "./multiClusterApp";
export * from "./namespace";
export * from "./nodeDriver";
export * from "./nodePool";
export * from "./nodeTemplate";
export * from "./notifier";
export * from "./podSecurityPolicyTemplate";
export * from "./project";
export * from "./projectAlertGroup";
export * from "./projectAlertRule";
export * from "./projectLogging";
export * from "./projectRoleTemplateBinding";
export * from "./provider";
export * from "./registry";
export * from "./roleTempalte";
export * from "./roleTemplate";
export * from "./secret";
export * from "./secretV2";
export * from "./setting";
export * from "./storageClassV2";
export * from "./token";
export * from "./user";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { ActiveDirectory } from "./activeDirectory";
import { App } from "./app";
import { AppV2 } from "./appV2";
import { AuthConfigActiveDirectory } from "./authConfigActiveDirectory";
import { AuthConfigAdfs } from "./authConfigAdfs";
import { AuthConfigAzureAd } from "./authConfigAzureAd";
import { AuthConfigFreeIpa } from "./authConfigFreeIpa";
import { AuthConfigGithub } from "./authConfigGithub";
import { AuthConfigKeycloak } from "./authConfigKeycloak";
import { AuthConfigOkta } from "./authConfigOkta";
import { AuthConfigOpenLdap } from "./authConfigOpenLdap";
import { AuthConfigPing } from "./authConfigPing";
import { Bootstrap } from "./bootstrap";
import { Catalog } from "./catalog";
import { CatalogV2 } from "./catalogV2";
import { Certificate } from "./certificate";
import { CloudCredential } from "./cloudCredential";
import { Cluster } from "./cluster";
import { ClusterAlertGroup } from "./clusterAlertGroup";
import { ClusterAlertRule } from "./clusterAlertRule";
import { ClusterAlterGroup } from "./clusterAlterGroup";
import { ClusterAlterRule } from "./clusterAlterRule";
import { ClusterDriver } from "./clusterDriver";
import { ClusterLogging } from "./clusterLogging";
import { ClusterRoleTemplateBinding } from "./clusterRoleTemplateBinding";
import { ClusterSync } from "./clusterSync";
import { ClusterTemplate } from "./clusterTemplate";
import { ClusterV2 } from "./clusterV2";
import { ConfigMapV2 } from "./configMapV2";
import { EtcdBackup } from "./etcdBackup";
import { Feature } from "./feature";
import { GlobalDns } from "./globalDns";
import { GlobalDnsProvider } from "./globalDnsProvider";
import { GlobalRole } from "./globalRole";
import { GlobalRoleBinding } from "./globalRoleBinding";
import { MachineConfigV2 } from "./machineConfigV2";
import { MultiClusterApp } from "./multiClusterApp";
import { Namespace } from "./namespace";
import { NodeDriver } from "./nodeDriver";
import { NodePool } from "./nodePool";
import { NodeTemplate } from "./nodeTemplate";
import { Notifier } from "./notifier";
import { PodSecurityPolicyTemplate } from "./podSecurityPolicyTemplate";
import { Project } from "./project";
import { ProjectAlertGroup } from "./projectAlertGroup";
import { ProjectAlertRule } from "./projectAlertRule";
import { ProjectLogging } from "./projectLogging";
import { ProjectRoleTemplateBinding } from "./projectRoleTemplateBinding";
import { Registry } from "./registry";
import { RoleTempalte } from "./roleTempalte";
import { RoleTemplate } from "./roleTemplate";
import { Secret } from "./secret";
import { SecretV2 } from "./secretV2";
import { Setting } from "./setting";
import { StorageClassV2 } from "./storageClassV2";
import { Token } from "./token";
import { User } from "./user";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rancher2:index/activeDirectory:ActiveDirectory":
                return new ActiveDirectory(name, <any>undefined, { urn })
            case "rancher2:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "rancher2:index/appV2:AppV2":
                return new AppV2(name, <any>undefined, { urn })
            case "rancher2:index/authConfigActiveDirectory:AuthConfigActiveDirectory":
                return new AuthConfigActiveDirectory(name, <any>undefined, { urn })
            case "rancher2:index/authConfigAdfs:AuthConfigAdfs":
                return new AuthConfigAdfs(name, <any>undefined, { urn })
            case "rancher2:index/authConfigAzureAd:AuthConfigAzureAd":
                return new AuthConfigAzureAd(name, <any>undefined, { urn })
            case "rancher2:index/authConfigFreeIpa:AuthConfigFreeIpa":
                return new AuthConfigFreeIpa(name, <any>undefined, { urn })
            case "rancher2:index/authConfigGithub:AuthConfigGithub":
                return new AuthConfigGithub(name, <any>undefined, { urn })
            case "rancher2:index/authConfigKeycloak:AuthConfigKeycloak":
                return new AuthConfigKeycloak(name, <any>undefined, { urn })
            case "rancher2:index/authConfigOkta:AuthConfigOkta":
                return new AuthConfigOkta(name, <any>undefined, { urn })
            case "rancher2:index/authConfigOpenLdap:AuthConfigOpenLdap":
                return new AuthConfigOpenLdap(name, <any>undefined, { urn })
            case "rancher2:index/authConfigPing:AuthConfigPing":
                return new AuthConfigPing(name, <any>undefined, { urn })
            case "rancher2:index/bootstrap:Bootstrap":
                return new Bootstrap(name, <any>undefined, { urn })
            case "rancher2:index/catalog:Catalog":
                return new Catalog(name, <any>undefined, { urn })
            case "rancher2:index/catalogV2:CatalogV2":
                return new CatalogV2(name, <any>undefined, { urn })
            case "rancher2:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "rancher2:index/cloudCredential:CloudCredential":
                return new CloudCredential(name, <any>undefined, { urn })
            case "rancher2:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "rancher2:index/clusterAlertGroup:ClusterAlertGroup":
                return new ClusterAlertGroup(name, <any>undefined, { urn })
            case "rancher2:index/clusterAlertRule:ClusterAlertRule":
                return new ClusterAlertRule(name, <any>undefined, { urn })
            case "rancher2:index/clusterAlterGroup:ClusterAlterGroup":
                return new ClusterAlterGroup(name, <any>undefined, { urn })
            case "rancher2:index/clusterAlterRule:ClusterAlterRule":
                return new ClusterAlterRule(name, <any>undefined, { urn })
            case "rancher2:index/clusterDriver:ClusterDriver":
                return new ClusterDriver(name, <any>undefined, { urn })
            case "rancher2:index/clusterLogging:ClusterLogging":
                return new ClusterLogging(name, <any>undefined, { urn })
            case "rancher2:index/clusterRoleTemplateBinding:ClusterRoleTemplateBinding":
                return new ClusterRoleTemplateBinding(name, <any>undefined, { urn })
            case "rancher2:index/clusterSync:ClusterSync":
                return new ClusterSync(name, <any>undefined, { urn })
            case "rancher2:index/clusterTemplate:ClusterTemplate":
                return new ClusterTemplate(name, <any>undefined, { urn })
            case "rancher2:index/clusterV2:ClusterV2":
                return new ClusterV2(name, <any>undefined, { urn })
            case "rancher2:index/configMapV2:ConfigMapV2":
                return new ConfigMapV2(name, <any>undefined, { urn })
            case "rancher2:index/etcdBackup:EtcdBackup":
                return new EtcdBackup(name, <any>undefined, { urn })
            case "rancher2:index/feature:Feature":
                return new Feature(name, <any>undefined, { urn })
            case "rancher2:index/globalDns:GlobalDns":
                return new GlobalDns(name, <any>undefined, { urn })
            case "rancher2:index/globalDnsProvider:GlobalDnsProvider":
                return new GlobalDnsProvider(name, <any>undefined, { urn })
            case "rancher2:index/globalRole:GlobalRole":
                return new GlobalRole(name, <any>undefined, { urn })
            case "rancher2:index/globalRoleBinding:GlobalRoleBinding":
                return new GlobalRoleBinding(name, <any>undefined, { urn })
            case "rancher2:index/machineConfigV2:MachineConfigV2":
                return new MachineConfigV2(name, <any>undefined, { urn })
            case "rancher2:index/multiClusterApp:MultiClusterApp":
                return new MultiClusterApp(name, <any>undefined, { urn })
            case "rancher2:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "rancher2:index/nodeDriver:NodeDriver":
                return new NodeDriver(name, <any>undefined, { urn })
            case "rancher2:index/nodePool:NodePool":
                return new NodePool(name, <any>undefined, { urn })
            case "rancher2:index/nodeTemplate:NodeTemplate":
                return new NodeTemplate(name, <any>undefined, { urn })
            case "rancher2:index/notifier:Notifier":
                return new Notifier(name, <any>undefined, { urn })
            case "rancher2:index/podSecurityPolicyTemplate:PodSecurityPolicyTemplate":
                return new PodSecurityPolicyTemplate(name, <any>undefined, { urn })
            case "rancher2:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "rancher2:index/projectAlertGroup:ProjectAlertGroup":
                return new ProjectAlertGroup(name, <any>undefined, { urn })
            case "rancher2:index/projectAlertRule:ProjectAlertRule":
                return new ProjectAlertRule(name, <any>undefined, { urn })
            case "rancher2:index/projectLogging:ProjectLogging":
                return new ProjectLogging(name, <any>undefined, { urn })
            case "rancher2:index/projectRoleTemplateBinding:ProjectRoleTemplateBinding":
                return new ProjectRoleTemplateBinding(name, <any>undefined, { urn })
            case "rancher2:index/registry:Registry":
                return new Registry(name, <any>undefined, { urn })
            case "rancher2:index/roleTempalte:RoleTempalte":
                return new RoleTempalte(name, <any>undefined, { urn })
            case "rancher2:index/roleTemplate:RoleTemplate":
                return new RoleTemplate(name, <any>undefined, { urn })
            case "rancher2:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "rancher2:index/secretV2:SecretV2":
                return new SecretV2(name, <any>undefined, { urn })
            case "rancher2:index/setting:Setting":
                return new Setting(name, <any>undefined, { urn })
            case "rancher2:index/storageClassV2:StorageClassV2":
                return new StorageClassV2(name, <any>undefined, { urn })
            case "rancher2:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "rancher2:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rancher2", "index/activeDirectory", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/app", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/appV2", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/authConfigActiveDirectory", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/authConfigAdfs", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/authConfigAzureAd", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/authConfigFreeIpa", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/authConfigGithub", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/authConfigKeycloak", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/authConfigOkta", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/authConfigOpenLdap", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/authConfigPing", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/bootstrap", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/catalog", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/catalogV2", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/certificate", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/cloudCredential", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/cluster", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterAlertGroup", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterAlertRule", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterAlterGroup", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterAlterRule", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterDriver", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterLogging", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterRoleTemplateBinding", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterSync", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterTemplate", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/clusterV2", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/configMapV2", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/etcdBackup", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/feature", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/globalDns", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/globalDnsProvider", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/globalRole", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/globalRoleBinding", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/machineConfigV2", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/multiClusterApp", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/namespace", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/nodeDriver", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/nodePool", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/nodeTemplate", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/notifier", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/podSecurityPolicyTemplate", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/project", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/projectAlertGroup", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/projectAlertRule", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/projectLogging", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/projectRoleTemplateBinding", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/registry", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/roleTempalte", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/roleTemplate", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/secret", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/secretV2", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/setting", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/storageClassV2", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/token", _module)
pulumi.runtime.registerResourceModule("rancher2", "index/user", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("rancher2", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rancher2") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
