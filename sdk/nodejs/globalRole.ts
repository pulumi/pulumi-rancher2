// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Global Role resource. This can be used to create Global Role for Rancher v2 and retrieve their information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Global Role
 * const foo = new rancher2.GlobalRole("foo", {
 *     name: "foo",
 *     newUserDefault: true,
 *     description: "Terraform global role acceptance test",
 *     rules: [{
 *         apiGroups: ["*"],
 *         resources: ["secrets"],
 *         verbs: ["create"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Global Role can be imported using the Rancher Global Role ID
 *
 * ```sh
 * $ pulumi import rancher2:index/globalRole:GlobalRole foo &lt;global_role_id&gt;
 * ```
 */
export class GlobalRole extends pulumi.CustomResource {
    /**
     * Get an existing GlobalRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalRoleState, opts?: pulumi.CustomResourceOptions): GlobalRole {
        return new GlobalRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/globalRole:GlobalRole';

    /**
     * Returns true if the given object is an instance of GlobalRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalRole.__pulumiType;
    }

    /**
     * Annotations for global role object (map)
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string}>;
    /**
     * (Computed) Builtin global role (bool)
     */
    declare public /*out*/ readonly builtin: pulumi.Output<boolean>;
    /**
     * Global role description (string)
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Names of role templates whose permissions are granted by this global role in every cluster besides the local cluster (list)
     */
    declare public readonly inheritedClusterRoles: pulumi.Output<string[] | undefined>;
    /**
     * Labels for global role object (map)
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * Global role name (string)
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Whether or not this role should be added to new users. Default `false` (bool)
     */
    declare public readonly newUserDefault: pulumi.Output<boolean | undefined>;
    /**
     * Global role policy rules (list)
     */
    declare public readonly rules: pulumi.Output<outputs.GlobalRoleRule[]>;
    /**
     * Global role uuid
     */
    declare public /*out*/ readonly uuid: pulumi.Output<string>;

    /**
     * Create a GlobalRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GlobalRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalRoleArgs | GlobalRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalRoleState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["builtin"] = state?.builtin;
            resourceInputs["description"] = state?.description;
            resourceInputs["inheritedClusterRoles"] = state?.inheritedClusterRoles;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["newUserDefault"] = state?.newUserDefault;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["uuid"] = state?.uuid;
        } else {
            const args = argsOrState as GlobalRoleArgs | undefined;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["description"] = args?.description;
            resourceInputs["inheritedClusterRoles"] = args?.inheritedClusterRoles;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["newUserDefault"] = args?.newUserDefault;
            resourceInputs["rules"] = args?.rules;
            resourceInputs["builtin"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalRole resources.
 */
export interface GlobalRoleState {
    /**
     * Annotations for global role object (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Computed) Builtin global role (bool)
     */
    builtin?: pulumi.Input<boolean>;
    /**
     * Global role description (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Names of role templates whose permissions are granted by this global role in every cluster besides the local cluster (list)
     */
    inheritedClusterRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Labels for global role object (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Global role name (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not this role should be added to new users. Default `false` (bool)
     */
    newUserDefault?: pulumi.Input<boolean>;
    /**
     * Global role policy rules (list)
     */
    rules?: pulumi.Input<pulumi.Input<inputs.GlobalRoleRule>[]>;
    /**
     * Global role uuid
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlobalRole resource.
 */
export interface GlobalRoleArgs {
    /**
     * Annotations for global role object (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Global role description (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Names of role templates whose permissions are granted by this global role in every cluster besides the local cluster (list)
     */
    inheritedClusterRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Labels for global role object (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Global role name (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Whether or not this role should be added to new users. Default `false` (bool)
     */
    newUserDefault?: pulumi.Input<boolean>;
    /**
     * Global role policy rules (list)
     */
    rules?: pulumi.Input<pulumi.Input<inputs.GlobalRoleRule>[]>;
}
