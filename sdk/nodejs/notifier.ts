// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Notifier resource. This can be used to create notifiers for Rancher v2 environments and retrieve their information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 Notifier
 * const foo = new rancher2.Notifier("foo", {
 *     clusterId: "<cluster_id>",
 *     description: "Terraform notifier acceptance test",
 *     pagerdutyConfig: {
 *         proxyUrl: "http://proxy.test.io",
 *         serviceKey: "XXXXXXXX",
 *     },
 *     sendResolved: true,
 * });
 * ```
 *
 * ## Import
 *
 * Notifiers can be imported using the Rancher nNtifier ID
 *
 * ```sh
 *  $ pulumi import rancher2:index/notifier:Notifier foo &lt;notifier_id&gt;
 * ```
 */
export class Notifier extends pulumi.CustomResource {
    /**
     * Get an existing Notifier resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotifierState, opts?: pulumi.CustomResourceOptions): Notifier {
        return new Notifier(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/notifier:Notifier';

    /**
     * Returns true if the given object is an instance of Notifier.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notifier {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notifier.__pulumiType;
    }

    /**
     * Annotations for notifier object (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * The cluster id where create notifier (string)
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The notifier description (string)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Dingtalk config for notifier (list maxitems:1)
     */
    public readonly dingtalkConfig!: pulumi.Output<outputs.NotifierDingtalkConfig | undefined>;
    /**
     * Labels for notifier object (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * MSTeams config for notifier (list maxitems:1)
     */
    public readonly msteamsConfig!: pulumi.Output<outputs.NotifierMsteamsConfig | undefined>;
    /**
     * The name of the notifier (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Pagerduty config for notifier (list maxitems:1)
     */
    public readonly pagerdutyConfig!: pulumi.Output<outputs.NotifierPagerdutyConfig | undefined>;
    /**
     * = (Optional) Enable the notifier to send resolved notifications. Default `false` (bool)
     */
    public readonly sendResolved!: pulumi.Output<boolean | undefined>;
    /**
     * Slack config for notifier (list maxitems:1)
     */
    public readonly slackConfig!: pulumi.Output<outputs.NotifierSlackConfig | undefined>;
    /**
     * SMTP config for notifier (list maxitems:1)
     */
    public readonly smtpConfig!: pulumi.Output<outputs.NotifierSmtpConfig | undefined>;
    /**
     * Webhook config for notifier (list maxitems:1)
     */
    public readonly webhookConfig!: pulumi.Output<outputs.NotifierWebhookConfig | undefined>;
    /**
     * Wechat config for notifier (list maxitems:1)
     */
    public readonly wechatConfig!: pulumi.Output<outputs.NotifierWechatConfig | undefined>;

    /**
     * Create a Notifier resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotifierArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotifierArgs | NotifierState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotifierState | undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dingtalkConfig"] = state ? state.dingtalkConfig : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["msteamsConfig"] = state ? state.msteamsConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pagerdutyConfig"] = state ? state.pagerdutyConfig : undefined;
            inputs["sendResolved"] = state ? state.sendResolved : undefined;
            inputs["slackConfig"] = state ? state.slackConfig : undefined;
            inputs["smtpConfig"] = state ? state.smtpConfig : undefined;
            inputs["webhookConfig"] = state ? state.webhookConfig : undefined;
            inputs["wechatConfig"] = state ? state.wechatConfig : undefined;
        } else {
            const args = argsOrState as NotifierArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dingtalkConfig"] = args ? args.dingtalkConfig : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["msteamsConfig"] = args ? args.msteamsConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pagerdutyConfig"] = args ? args.pagerdutyConfig : undefined;
            inputs["sendResolved"] = args ? args.sendResolved : undefined;
            inputs["slackConfig"] = args ? args.slackConfig : undefined;
            inputs["smtpConfig"] = args ? args.smtpConfig : undefined;
            inputs["webhookConfig"] = args ? args.webhookConfig : undefined;
            inputs["wechatConfig"] = args ? args.wechatConfig : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Notifier.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Notifier resources.
 */
export interface NotifierState {
    /**
     * Annotations for notifier object (map)
     */
    annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The cluster id where create notifier (string)
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The notifier description (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Dingtalk config for notifier (list maxitems:1)
     */
    dingtalkConfig?: pulumi.Input<inputs.NotifierDingtalkConfig>;
    /**
     * Labels for notifier object (map)
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * MSTeams config for notifier (list maxitems:1)
     */
    msteamsConfig?: pulumi.Input<inputs.NotifierMsteamsConfig>;
    /**
     * The name of the notifier (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Pagerduty config for notifier (list maxitems:1)
     */
    pagerdutyConfig?: pulumi.Input<inputs.NotifierPagerdutyConfig>;
    /**
     * = (Optional) Enable the notifier to send resolved notifications. Default `false` (bool)
     */
    sendResolved?: pulumi.Input<boolean>;
    /**
     * Slack config for notifier (list maxitems:1)
     */
    slackConfig?: pulumi.Input<inputs.NotifierSlackConfig>;
    /**
     * SMTP config for notifier (list maxitems:1)
     */
    smtpConfig?: pulumi.Input<inputs.NotifierSmtpConfig>;
    /**
     * Webhook config for notifier (list maxitems:1)
     */
    webhookConfig?: pulumi.Input<inputs.NotifierWebhookConfig>;
    /**
     * Wechat config for notifier (list maxitems:1)
     */
    wechatConfig?: pulumi.Input<inputs.NotifierWechatConfig>;
}

/**
 * The set of arguments for constructing a Notifier resource.
 */
export interface NotifierArgs {
    /**
     * Annotations for notifier object (map)
     */
    annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The cluster id where create notifier (string)
     */
    clusterId: pulumi.Input<string>;
    /**
     * The notifier description (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Dingtalk config for notifier (list maxitems:1)
     */
    dingtalkConfig?: pulumi.Input<inputs.NotifierDingtalkConfig>;
    /**
     * Labels for notifier object (map)
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * MSTeams config for notifier (list maxitems:1)
     */
    msteamsConfig?: pulumi.Input<inputs.NotifierMsteamsConfig>;
    /**
     * The name of the notifier (string)
     */
    name?: pulumi.Input<string>;
    /**
     * Pagerduty config for notifier (list maxitems:1)
     */
    pagerdutyConfig?: pulumi.Input<inputs.NotifierPagerdutyConfig>;
    /**
     * = (Optional) Enable the notifier to send resolved notifications. Default `false` (bool)
     */
    sendResolved?: pulumi.Input<boolean>;
    /**
     * Slack config for notifier (list maxitems:1)
     */
    slackConfig?: pulumi.Input<inputs.NotifierSlackConfig>;
    /**
     * SMTP config for notifier (list maxitems:1)
     */
    smtpConfig?: pulumi.Input<inputs.NotifierSmtpConfig>;
    /**
     * Webhook config for notifier (list maxitems:1)
     */
    webhookConfig?: pulumi.Input<inputs.NotifierWebhookConfig>;
    /**
     * Wechat config for notifier (list maxitems:1)
     */
    wechatConfig?: pulumi.Input<inputs.NotifierWechatConfig>;
}
