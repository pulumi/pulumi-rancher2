// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
 *
 * ## Example Usage
 * ### Creating Rancher v2 RKE cluster enabling and customizing monitoring
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 RKE Cluster
 * const foo_custom = new rancher2.Cluster("foo-custom", {
 *     clusterMonitoringInput: {
 *         answers: {
 *             "exporter-kubelets.https": true,
 *             "exporter-node.enabled": true,
 *             "exporter-node.ports.metrics.port": 9796,
 *             "exporter-node.resources.limits.cpu": "200m",
 *             "exporter-node.resources.limits.memory": "200Mi",
 *             "grafana.persistence.enabled": false,
 *             "grafana.persistence.size": "10Gi",
 *             "grafana.persistence.storageClass": "default",
 *             "operator.resources.limits.memory": "500Mi",
 *             "prometheus.persistence.enabled": "false",
 *             "prometheus.persistence.size": "50Gi",
 *             "prometheus.persistence.storageClass": "default",
 *             "prometheus.persistent.useReleaseName": "true",
 *             "prometheus.resources.core.limits.cpu": "1000m",
 *             "prometheus.resources.core.limits.memory": "1500Mi",
 *             "prometheus.resources.core.requests.cpu": "750m",
 *             "prometheus.resources.core.requests.memory": "750Mi",
 *             "prometheus.retention": "12h",
 *         },
 *         version: "0.1.0",
 *     },
 *     description: "Foo rancher2 custom cluster",
 *     enableClusterMonitoring: true,
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *     },
 * });
 * ```
 * ### Creating Rancher v2 RKE cluster enabling/customizing monitoring and istio
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 RKE Cluster
 * const foo_customCluster = new rancher2.Cluster("foo-customCluster", {
 *     description: "Foo rancher2 custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *     },
 *     enableClusterMonitoring: true,
 *     clusterMonitoringInput: {
 *         answers: {
 *             "exporter-kubelets.https": true,
 *             "exporter-node.enabled": true,
 *             "exporter-node.ports.metrics.port": 9796,
 *             "exporter-node.resources.limits.cpu": "200m",
 *             "exporter-node.resources.limits.memory": "200Mi",
 *             "grafana.persistence.enabled": false,
 *             "grafana.persistence.size": "10Gi",
 *             "grafana.persistence.storageClass": "default",
 *             "operator.resources.limits.memory": "500Mi",
 *             "prometheus.persistence.enabled": "false",
 *             "prometheus.persistence.size": "50Gi",
 *             "prometheus.persistence.storageClass": "default",
 *             "prometheus.persistent.useReleaseName": "true",
 *             "prometheus.resources.core.limits.cpu": "1000m",
 *             "prometheus.resources.core.limits.memory": "1500Mi",
 *             "prometheus.resources.core.requests.cpu": "750m",
 *             "prometheus.resources.core.requests.memory": "750Mi",
 *             "prometheus.retention": "12h",
 *         },
 *         version: "0.1.0",
 *     },
 * });
 * // Create a new rancher2 Cluster Sync for foo-custom cluster
 * const foo_customClusterSync = new rancher2.ClusterSync("foo-customClusterSync", {
 *     clusterId: foo_customCluster.id,
 *     waitMonitoring: foo_customCluster.enableClusterMonitoring,
 * });
 * // Create a new rancher2 Namespace
 * const foo_istio = new rancher2.Namespace("foo-istio", {
 *     projectId: foo_customClusterSync.systemProjectId,
 *     description: "istio namespace",
 * });
 * // Create a new rancher2 App deploying istio (should wait until monitoring is up and running)
 * const istio = new rancher2.App("istio", {
 *     catalogName: "system-library",
 *     description: "Terraform app acceptance test",
 *     projectId: foo_istio.projectId,
 *     templateName: "rancher-istio",
 *     templateVersion: "0.1.1",
 *     targetNamespace: foo_istio.id,
 *     answers: {
 *         "certmanager.enabled": false,
 *         enableCRDs: true,
 *         "galley.enabled": true,
 *         "gateways.enabled": false,
 *         "gateways.istio-ingressgateway.resources.limits.cpu": "2000m",
 *         "gateways.istio-ingressgateway.resources.limits.memory": "1024Mi",
 *         "gateways.istio-ingressgateway.resources.requests.cpu": "100m",
 *         "gateways.istio-ingressgateway.resources.requests.memory": "128Mi",
 *         "gateways.istio-ingressgateway.type": "NodePort",
 *         "global.monitoring.type": "cluster-monitoring",
 *         "global.rancher.clusterId": foo_customClusterSync.clusterId,
 *         "istio_cni.enabled": "false",
 *         "istiocoredns.enabled": "false",
 *         "kiali.enabled": "true",
 *         "mixer.enabled": "true",
 *         "mixer.policy.enabled": "true",
 *         "mixer.policy.resources.limits.cpu": "4800m",
 *         "mixer.policy.resources.limits.memory": "4096Mi",
 *         "mixer.policy.resources.requests.cpu": "1000m",
 *         "mixer.policy.resources.requests.memory": "1024Mi",
 *         "mixer.telemetry.resources.limits.cpu": "4800m",
 *         "mixer.telemetry.resources.limits.memory": "4096Mi",
 *         "mixer.telemetry.resources.requests.cpu": "1000m",
 *         "mixer.telemetry.resources.requests.memory": "1024Mi",
 *         "mtls.enabled": false,
 *         "nodeagent.enabled": false,
 *         "pilot.enabled": true,
 *         "pilot.resources.limits.cpu": "1000m",
 *         "pilot.resources.limits.memory": "4096Mi",
 *         "pilot.resources.requests.cpu": "500m",
 *         "pilot.resources.requests.memory": "2048Mi",
 *         "pilot.traceSampling": "1",
 *         "security.enabled": true,
 *         "sidecarInjectorWebhook.enabled": true,
 *         "tracing.enabled": true,
 *         "tracing.jaeger.resources.limits.cpu": "500m",
 *         "tracing.jaeger.resources.limits.memory": "1024Mi",
 *         "tracing.jaeger.resources.requests.cpu": "100m",
 *         "tracing.jaeger.resources.requests.memory": "100Mi",
 *     },
 * });
 * ```
 * ### Creating Rancher v2 RKE cluster assigning a node pool (overlapped planes)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 RKE Cluster
 * const foo_custom = new rancher2.Cluster("foo-custom", {
 *     description: "Foo rancher2 custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *     },
 * });
 * // Create a new rancher2 Node Template
 * const fooNodeTemplate = new rancher2.NodeTemplate("fooNodeTemplate", {
 *     description: "foo test",
 *     amazonec2Config: {
 *         accessKey: "<AWS_ACCESS_KEY>",
 *         secretKey: "<AWS_SECRET_KEY>",
 *         ami: "<AMI_ID>",
 *         region: "<REGION>",
 *         securityGroups: ["<AWS_SECURITY_GROUP>"],
 *         subnetId: "<SUBNET_ID>",
 *         vpcId: "<VPC_ID>",
 *         zone: "<ZONE>",
 *     },
 * });
 * // Create a new rancher2 Node Pool
 * const fooNodePool = new rancher2.NodePool("fooNodePool", {
 *     clusterId: foo_custom.id,
 *     hostnamePrefix: "foo-cluster-0",
 *     nodeTemplateId: fooNodeTemplate.id,
 *     quantity: 3,
 *     controlPlane: true,
 *     etcd: true,
 *     worker: true,
 * });
 * ```
 * ### Creating Rancher v2 RKE cluster from template. For Rancher v2.3.x or above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 cluster template
 * const fooClusterTemplate = new rancher2.ClusterTemplate("fooClusterTemplate", {
 *     members: [{
 *         accessType: "owner",
 *         userPrincipalId: "local://user-XXXXX",
 *     }],
 *     templateRevisions: [{
 *         name: "V1",
 *         clusterConfig: {
 *             rkeConfig: {
 *                 network: {
 *                     plugin: "canal",
 *                 },
 *                 services: {
 *                     etcd: {
 *                         creation: "6h",
 *                         retention: "24h",
 *                     },
 *                 },
 *             },
 *         },
 *         "default": true,
 *     }],
 *     description: "Test cluster template v2",
 * });
 * // Create a new rancher2 RKE Cluster from template
 * const fooCluster = new rancher2.Cluster("fooCluster", {
 *     clusterTemplateId: fooClusterTemplate.id,
 *     clusterTemplateRevisionId: fooClusterTemplate.templateRevisions.apply(templateRevisions => templateRevisions[0].id),
 * });
 * ```
 * ### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x or above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.Cluster("foo", {
 *     description: "Terraform custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *         services: {
 *             etcd: {
 *                 creation: "6h",
 *                 retention: "24h",
 *             },
 *             kubeApi: {
 *                 auditLog: {
 *                     configuration: {
 *                         format: "json",
 *                         maxAge: 5,
 *                         maxBackup: 5,
 *                         maxSize: 100,
 *                         path: "-",
 *                         policy: `apiVersion: audit.k8s.io/v1
 * kind: Policy
 * metadata:
 *   creationTimestamp: null
 * omitStages:
 * - RequestReceived
 * rules:
 * - level: RequestResponse
 *   resources:
 *   - resources:
 *     - pods
 * `,
 *                     },
 *                     enabled: true,
 *                 },
 *             },
 *         },
 *         upgradeStrategy: {
 *             drain: true,
 *             maxUnavailableWorker: "20%",
 *         },
 *     },
 * });
 * ```
 * ### Creating Rancher v2 RKE cluster with scheduled cluster scan. For Rancher v2.4.x or above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.Cluster("foo", {
 *     description: "Terraform custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *         services: {
 *             etcd: {
 *                 creation: "6h",
 *                 retention: "24h",
 *             },
 *         },
 *     },
 *     scheduledClusterScan: {
 *         enabled: true,
 *         scanConfig: {
 *             cisScanConfig: {
 *                 debugMaster: true,
 *                 debugWorker: true,
 *             },
 *         },
 *         scheduleConfig: {
 *             cronSchedule: "30 * * * *",
 *             retention: 5,
 *         },
 *     },
 * });
 * ```
 * ### Importing EKS cluster to Rancher v2, using `eksConfigV2`. For Rancher v2.5.x or above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const fooCloudCredential = new rancher2.CloudCredential("fooCloudCredential", {
 *     description: "foo test",
 *     amazonec2CredentialConfig: {
 *         accessKey: "<AWS_ACCESS_KEY>",
 *         secretKey: "<AWS_SECRET_KEY>",
 *     },
 * });
 * const fooCluster = new rancher2.Cluster("fooCluster", {
 *     description: "Terraform EKS cluster",
 *     eksConfigV2: {
 *         cloudCredentialId: fooCloudCredential.id,
 *         name: "<CLUSTER_NAME>",
 *         region: "<EKS_REGION>",
 *         imported: true,
 *     },
 * });
 * ```
 * ### Creating EKS cluster from Rancher v2, using `eksConfigV2`. For Rancher v2.5.x or above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const fooCloudCredential = new rancher2.CloudCredential("fooCloudCredential", {
 *     description: "foo test",
 *     amazonec2CredentialConfig: {
 *         accessKey: "<AWS_ACCESS_KEY>",
 *         secretKey: "<AWS_SECRET_KEY>",
 *     },
 * });
 * const fooCluster = new rancher2.Cluster("fooCluster", {
 *     description: "Terraform EKS cluster",
 *     eksConfigV2: {
 *         cloudCredentialId: fooCloudCredential.id,
 *         region: "<EKS_REGION>",
 *         kubernetesVersion: "1.17",
 *         loggingTypes: [
 *             "audit",
 *             "api",
 *         ],
 *         nodeGroups: [
 *             {
 *                 name: "node_group1",
 *                 instanceType: "t3.medium",
 *                 desiredSize: 3,
 *                 maxSize: 5,
 *             },
 *             {
 *                 name: "node_group2",
 *                 instanceType: "m5.xlarge",
 *                 desiredSize: 2,
 *                 maxSize: 3,
 *             },
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Clusters can be imported using the Rancher Cluster ID
 *
 * ```sh
 *  $ pulumi import rancher2:index/cluster:Cluster foo &lt;CLUSTER_ID&gt;
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly aksConfig!: pulumi.Output<outputs.ClusterAksConfig | undefined>;
    /**
     * Annotations for cluster registration token object (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * TLS CA certificate for etcd service (string)
     */
    public /*out*/ readonly caCert!: pulumi.Output<string>;
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     */
    public readonly clusterAuthEndpoint!: pulumi.Output<outputs.ClusterClusterAuthEndpoint>;
    /**
     * Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
     */
    public readonly clusterMonitoringInput!: pulumi.Output<outputs.ClusterClusterMonitoringInput | undefined>;
    /**
     * (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     */
    public /*out*/ readonly clusterRegistrationToken!: pulumi.Output<outputs.ClusterClusterRegistrationToken>;
    /**
     * Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
     */
    public readonly clusterTemplateAnswers!: pulumi.Output<outputs.ClusterClusterTemplateAnswers>;
    /**
     * Cluster template ID. Just for Rancher v2.3.x and above (string)
     */
    public readonly clusterTemplateId!: pulumi.Output<string | undefined>;
    /**
     * Cluster template questions. Just for Rancher v2.3.x and above (list)
     */
    public readonly clusterTemplateQuestions!: pulumi.Output<outputs.ClusterClusterTemplateQuestion[]>;
    /**
     * Cluster template revision ID. Just for Rancher v2.3.x and above (string)
     */
    public readonly clusterTemplateRevisionId!: pulumi.Output<string | undefined>;
    /**
     * [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     */
    public readonly defaultPodSecurityPolicyTemplateId!: pulumi.Output<string>;
    /**
     * (Computed) Default project ID for the cluster (string)
     */
    public /*out*/ readonly defaultProjectId!: pulumi.Output<string>;
    /**
     * An optional description of this cluster (string)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Desired agent image. Just for Rancher v2.3.x and above (string)
     */
    public readonly desiredAgentImage!: pulumi.Output<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    public readonly desiredAuthImage!: pulumi.Output<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    public readonly dockerRootDir!: pulumi.Output<string>;
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     */
    public readonly driver!: pulumi.Output<string>;
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly eksConfig!: pulumi.Output<outputs.ClusterEksConfig | undefined>;
    /**
     * The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
     */
    public readonly eksConfigV2!: pulumi.Output<outputs.ClusterEksConfigV2 | undefined>;
    /**
     * Enable built-in cluster alerting (bool)
     */
    public readonly enableClusterAlerting!: pulumi.Output<boolean>;
    /**
     * Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
     *
     * @deprecated Deploy istio using rancher2_app resource instead
     */
    public /*out*/ readonly enableClusterIstio!: pulumi.Output<boolean>;
    /**
     * Enable built-in cluster monitoring (bool)
     */
    public readonly enableClusterMonitoring!: pulumi.Output<boolean>;
    /**
     * Enable project network isolation (bool)
     */
    public readonly enableNetworkPolicy!: pulumi.Output<boolean>;
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly gkeConfig!: pulumi.Output<outputs.ClusterGkeConfig | undefined>;
    /**
     * (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
     */
    public /*out*/ readonly istioEnabled!: pulumi.Output<boolean>;
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly k3sConfig!: pulumi.Output<outputs.ClusterK3sConfig>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster (string)
     */
    public /*out*/ readonly kubeConfig!: pulumi.Output<string>;
    /**
     * Labels for cluster registration token object (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * Name of cluster registration token (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `gkeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly okeConfig!: pulumi.Output<outputs.ClusterOkeConfig | undefined>;
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `k3sConfig` (list maxitems:1)
     */
    public readonly rkeConfig!: pulumi.Output<outputs.ClusterRkeConfig>;
    /**
     * Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
     */
    public readonly scheduledClusterScan!: pulumi.Output<outputs.ClusterScheduledClusterScan>;
    /**
     * (Computed) System project ID for the cluster (string)
     */
    public /*out*/ readonly systemProjectId!: pulumi.Output<string>;
    /**
     * Windows preferred cluster. Default: `false` (bool)
     */
    public readonly windowsPreferedCluster!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ClusterState | undefined;
            inputs["aksConfig"] = state ? state.aksConfig : undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["caCert"] = state ? state.caCert : undefined;
            inputs["clusterAuthEndpoint"] = state ? state.clusterAuthEndpoint : undefined;
            inputs["clusterMonitoringInput"] = state ? state.clusterMonitoringInput : undefined;
            inputs["clusterRegistrationToken"] = state ? state.clusterRegistrationToken : undefined;
            inputs["clusterTemplateAnswers"] = state ? state.clusterTemplateAnswers : undefined;
            inputs["clusterTemplateId"] = state ? state.clusterTemplateId : undefined;
            inputs["clusterTemplateQuestions"] = state ? state.clusterTemplateQuestions : undefined;
            inputs["clusterTemplateRevisionId"] = state ? state.clusterTemplateRevisionId : undefined;
            inputs["defaultPodSecurityPolicyTemplateId"] = state ? state.defaultPodSecurityPolicyTemplateId : undefined;
            inputs["defaultProjectId"] = state ? state.defaultProjectId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["desiredAgentImage"] = state ? state.desiredAgentImage : undefined;
            inputs["desiredAuthImage"] = state ? state.desiredAuthImage : undefined;
            inputs["dockerRootDir"] = state ? state.dockerRootDir : undefined;
            inputs["driver"] = state ? state.driver : undefined;
            inputs["eksConfig"] = state ? state.eksConfig : undefined;
            inputs["eksConfigV2"] = state ? state.eksConfigV2 : undefined;
            inputs["enableClusterAlerting"] = state ? state.enableClusterAlerting : undefined;
            inputs["enableClusterIstio"] = state ? state.enableClusterIstio : undefined;
            inputs["enableClusterMonitoring"] = state ? state.enableClusterMonitoring : undefined;
            inputs["enableNetworkPolicy"] = state ? state.enableNetworkPolicy : undefined;
            inputs["gkeConfig"] = state ? state.gkeConfig : undefined;
            inputs["istioEnabled"] = state ? state.istioEnabled : undefined;
            inputs["k3sConfig"] = state ? state.k3sConfig : undefined;
            inputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["okeConfig"] = state ? state.okeConfig : undefined;
            inputs["rkeConfig"] = state ? state.rkeConfig : undefined;
            inputs["scheduledClusterScan"] = state ? state.scheduledClusterScan : undefined;
            inputs["systemProjectId"] = state ? state.systemProjectId : undefined;
            inputs["windowsPreferedCluster"] = state ? state.windowsPreferedCluster : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            inputs["aksConfig"] = args ? args.aksConfig : undefined;
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["clusterAuthEndpoint"] = args ? args.clusterAuthEndpoint : undefined;
            inputs["clusterMonitoringInput"] = args ? args.clusterMonitoringInput : undefined;
            inputs["clusterTemplateAnswers"] = args ? args.clusterTemplateAnswers : undefined;
            inputs["clusterTemplateId"] = args ? args.clusterTemplateId : undefined;
            inputs["clusterTemplateQuestions"] = args ? args.clusterTemplateQuestions : undefined;
            inputs["clusterTemplateRevisionId"] = args ? args.clusterTemplateRevisionId : undefined;
            inputs["defaultPodSecurityPolicyTemplateId"] = args ? args.defaultPodSecurityPolicyTemplateId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["desiredAgentImage"] = args ? args.desiredAgentImage : undefined;
            inputs["desiredAuthImage"] = args ? args.desiredAuthImage : undefined;
            inputs["dockerRootDir"] = args ? args.dockerRootDir : undefined;
            inputs["driver"] = args ? args.driver : undefined;
            inputs["eksConfig"] = args ? args.eksConfig : undefined;
            inputs["eksConfigV2"] = args ? args.eksConfigV2 : undefined;
            inputs["enableClusterAlerting"] = args ? args.enableClusterAlerting : undefined;
            inputs["enableClusterMonitoring"] = args ? args.enableClusterMonitoring : undefined;
            inputs["enableNetworkPolicy"] = args ? args.enableNetworkPolicy : undefined;
            inputs["gkeConfig"] = args ? args.gkeConfig : undefined;
            inputs["k3sConfig"] = args ? args.k3sConfig : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["okeConfig"] = args ? args.okeConfig : undefined;
            inputs["rkeConfig"] = args ? args.rkeConfig : undefined;
            inputs["scheduledClusterScan"] = args ? args.scheduledClusterScan : undefined;
            inputs["windowsPreferedCluster"] = args ? args.windowsPreferedCluster : undefined;
            inputs["caCert"] = undefined /*out*/;
            inputs["clusterRegistrationToken"] = undefined /*out*/;
            inputs["defaultProjectId"] = undefined /*out*/;
            inputs["enableClusterIstio"] = undefined /*out*/;
            inputs["istioEnabled"] = undefined /*out*/;
            inputs["kubeConfig"] = undefined /*out*/;
            inputs["systemProjectId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly aksConfig?: pulumi.Input<inputs.ClusterAksConfig>;
    /**
     * Annotations for cluster registration token object (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * TLS CA certificate for etcd service (string)
     */
    readonly caCert?: pulumi.Input<string>;
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     */
    readonly clusterAuthEndpoint?: pulumi.Input<inputs.ClusterClusterAuthEndpoint>;
    /**
     * Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
     */
    readonly clusterMonitoringInput?: pulumi.Input<inputs.ClusterClusterMonitoringInput>;
    /**
     * (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     */
    readonly clusterRegistrationToken?: pulumi.Input<inputs.ClusterClusterRegistrationToken>;
    /**
     * Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
     */
    readonly clusterTemplateAnswers?: pulumi.Input<inputs.ClusterClusterTemplateAnswers>;
    /**
     * Cluster template ID. Just for Rancher v2.3.x and above (string)
     */
    readonly clusterTemplateId?: pulumi.Input<string>;
    /**
     * Cluster template questions. Just for Rancher v2.3.x and above (list)
     */
    readonly clusterTemplateQuestions?: pulumi.Input<pulumi.Input<inputs.ClusterClusterTemplateQuestion>[]>;
    /**
     * Cluster template revision ID. Just for Rancher v2.3.x and above (string)
     */
    readonly clusterTemplateRevisionId?: pulumi.Input<string>;
    /**
     * [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     */
    readonly defaultPodSecurityPolicyTemplateId?: pulumi.Input<string>;
    /**
     * (Computed) Default project ID for the cluster (string)
     */
    readonly defaultProjectId?: pulumi.Input<string>;
    /**
     * An optional description of this cluster (string)
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Desired agent image. Just for Rancher v2.3.x and above (string)
     */
    readonly desiredAgentImage?: pulumi.Input<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    readonly desiredAuthImage?: pulumi.Input<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    readonly dockerRootDir?: pulumi.Input<string>;
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     */
    readonly driver?: pulumi.Input<string>;
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly eksConfig?: pulumi.Input<inputs.ClusterEksConfig>;
    /**
     * The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
     */
    readonly eksConfigV2?: pulumi.Input<inputs.ClusterEksConfigV2>;
    /**
     * Enable built-in cluster alerting (bool)
     */
    readonly enableClusterAlerting?: pulumi.Input<boolean>;
    /**
     * Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
     *
     * @deprecated Deploy istio using rancher2_app resource instead
     */
    readonly enableClusterIstio?: pulumi.Input<boolean>;
    /**
     * Enable built-in cluster monitoring (bool)
     */
    readonly enableClusterMonitoring?: pulumi.Input<boolean>;
    /**
     * Enable project network isolation (bool)
     */
    readonly enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly gkeConfig?: pulumi.Input<inputs.ClusterGkeConfig>;
    /**
     * (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
     */
    readonly istioEnabled?: pulumi.Input<boolean>;
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly k3sConfig?: pulumi.Input<inputs.ClusterK3sConfig>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster (string)
     */
    readonly kubeConfig?: pulumi.Input<string>;
    /**
     * Labels for cluster registration token object (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of cluster registration token (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `gkeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly okeConfig?: pulumi.Input<inputs.ClusterOkeConfig>;
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `k3sConfig` (list maxitems:1)
     */
    readonly rkeConfig?: pulumi.Input<inputs.ClusterRkeConfig>;
    /**
     * Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
     */
    readonly scheduledClusterScan?: pulumi.Input<inputs.ClusterScheduledClusterScan>;
    /**
     * (Computed) System project ID for the cluster (string)
     */
    readonly systemProjectId?: pulumi.Input<string>;
    /**
     * Windows preferred cluster. Default: `false` (bool)
     */
    readonly windowsPreferedCluster?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly aksConfig?: pulumi.Input<inputs.ClusterAksConfig>;
    /**
     * Annotations for cluster registration token object (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     */
    readonly clusterAuthEndpoint?: pulumi.Input<inputs.ClusterClusterAuthEndpoint>;
    /**
     * Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
     */
    readonly clusterMonitoringInput?: pulumi.Input<inputs.ClusterClusterMonitoringInput>;
    /**
     * Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
     */
    readonly clusterTemplateAnswers?: pulumi.Input<inputs.ClusterClusterTemplateAnswers>;
    /**
     * Cluster template ID. Just for Rancher v2.3.x and above (string)
     */
    readonly clusterTemplateId?: pulumi.Input<string>;
    /**
     * Cluster template questions. Just for Rancher v2.3.x and above (list)
     */
    readonly clusterTemplateQuestions?: pulumi.Input<pulumi.Input<inputs.ClusterClusterTemplateQuestion>[]>;
    /**
     * Cluster template revision ID. Just for Rancher v2.3.x and above (string)
     */
    readonly clusterTemplateRevisionId?: pulumi.Input<string>;
    /**
     * [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     */
    readonly defaultPodSecurityPolicyTemplateId?: pulumi.Input<string>;
    /**
     * An optional description of this cluster (string)
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Desired agent image. Just for Rancher v2.3.x and above (string)
     */
    readonly desiredAgentImage?: pulumi.Input<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    readonly desiredAuthImage?: pulumi.Input<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    readonly dockerRootDir?: pulumi.Input<string>;
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     */
    readonly driver?: pulumi.Input<string>;
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly eksConfig?: pulumi.Input<inputs.ClusterEksConfig>;
    /**
     * The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
     */
    readonly eksConfigV2?: pulumi.Input<inputs.ClusterEksConfigV2>;
    /**
     * Enable built-in cluster alerting (bool)
     */
    readonly enableClusterAlerting?: pulumi.Input<boolean>;
    /**
     * Enable built-in cluster monitoring (bool)
     */
    readonly enableClusterMonitoring?: pulumi.Input<boolean>;
    /**
     * Enable project network isolation (bool)
     */
    readonly enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly gkeConfig?: pulumi.Input<inputs.ClusterGkeConfig>;
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly k3sConfig?: pulumi.Input<inputs.ClusterK3sConfig>;
    /**
     * Labels for cluster registration token object (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of cluster registration token (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `gkeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    readonly okeConfig?: pulumi.Input<inputs.ClusterOkeConfig>;
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `k3sConfig` (list maxitems:1)
     */
    readonly rkeConfig?: pulumi.Input<inputs.ClusterRkeConfig>;
    /**
     * Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
     */
    readonly scheduledClusterScan?: pulumi.Input<inputs.ClusterScheduledClusterScan>;
    /**
     * Windows preferred cluster. Default: `false` (bool)
     */
    readonly windowsPreferedCluster?: pulumi.Input<boolean>;
}
