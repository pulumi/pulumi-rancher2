// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
 *
 * ## Example Usage
 *
 * **Note optional/computed arguments** If any `optional/computed` argument of this resource is defined by the user, removing it from tf file will NOT reset its value. To reset it, let its definition at tf file as empty/false object. Ex: `enableClusterMonitoring = false`, `cloudProvider {}`, `name = ""`
 * ### Creating Rancher v2 RKE cluster enabling and customizing monitoring
 *
 * **Note** Cluster monitoring version `0.2.0` or above, can't be enabled until cluster is fully deployed as [`kubeVersion`](https://github.com/rancher/system-charts/blob/52be656700468904b9bf15c3f39cd7112e1f8c9b/charts/rancher-monitoring/v0.2.0/Chart.yaml#L12) requirement has been introduced to helm chart
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 RKE Cluster
 * const foo_custom = new rancher2.Cluster("foo-custom", {
 *     clusterMonitoringInput: {
 *         answers: {
 *             "exporter-kubelets.https": true,
 *             "exporter-node.enabled": true,
 *             "exporter-node.ports.metrics.port": 9796,
 *             "exporter-node.resources.limits.cpu": "200m",
 *             "exporter-node.resources.limits.memory": "200Mi",
 *             "grafana.persistence.enabled": false,
 *             "grafana.persistence.size": "10Gi",
 *             "grafana.persistence.storageClass": "default",
 *             "operator.resources.limits.memory": "500Mi",
 *             "prometheus.persistence.enabled": "false",
 *             "prometheus.persistence.size": "50Gi",
 *             "prometheus.persistence.storageClass": "default",
 *             "prometheus.persistent.useReleaseName": "true",
 *             "prometheus.resources.core.limits.cpu": "1000m",
 *             "prometheus.resources.core.limits.memory": "1500Mi",
 *             "prometheus.resources.core.requests.cpu": "750m",
 *             "prometheus.resources.core.requests.memory": "750Mi",
 *             "prometheus.retention": "12h",
 *         },
 *         version: "0.1.0",
 *     },
 *     description: "Foo rancher2 custom cluster",
 *     enableClusterMonitoring: true,
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *     },
 * });
 * ```
 * ### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x or above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.Cluster("foo", {
 *     description: "Terraform custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *         services: {
 *             etcd: {
 *                 creation: "6h",
 *                 retention: "24h",
 *             },
 *             kubeApi: {
 *                 auditLog: {
 *                     configuration: {
 *                         format: "json",
 *                         maxAge: 5,
 *                         maxBackup: 5,
 *                         maxSize: 100,
 *                         path: "-",
 *                         policy: `apiVersion: audit.k8s.io/v1
 * kind: Policy
 * metadata:
 *   creationTimestamp: null
 * omitStages:
 * - RequestReceived
 * rules:
 * - level: RequestResponse
 *   resources:
 *   - resources:
 *     - pods
 * `,
 *                     },
 *                     enabled: true,
 *                 },
 *             },
 *         },
 *         upgradeStrategy: {
 *             drain: true,
 *             maxUnavailableWorker: "20%",
 *         },
 *     },
 * });
 * ```
 * ### Creating Rancher v2 RKE cluster with scheduled cluster scan. For Rancher v2.4.x or above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.Cluster("foo", {
 *     description: "Terraform custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *         services: {
 *             etcd: {
 *                 creation: "6h",
 *                 retention: "24h",
 *             },
 *         },
 *     },
 *     scheduledClusterScan: {
 *         enabled: true,
 *         scanConfig: {
 *             cisScanConfig: {
 *                 debugMaster: true,
 *                 debugWorker: true,
 *             },
 *         },
 *         scheduleConfig: {
 *             cronSchedule: "30 * * * *",
 *             retention: 5,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Clusters can be imported using the Rancher Cluster ID
 *
 * ```sh
 *  $ pulumi import rancher2:index/cluster:Cluster foo &lt;CLUSTER_ID&gt;
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Optional Agent Env Vars for Rancher agent. Just for Rancher v2.5.6 and above (list)
     */
    public readonly agentEnvVars!: pulumi.Output<outputs.ClusterAgentEnvVar[] | undefined>;
    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly aksConfig!: pulumi.Output<outputs.ClusterAksConfig | undefined>;
    /**
     * The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly aksConfigV2!: pulumi.Output<outputs.ClusterAksConfigV2 | undefined>;
    /**
     * Annotations for cluster registration token object (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * TLS CA certificate for etcd service (string)
     */
    public /*out*/ readonly caCert!: pulumi.Output<string>;
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     */
    public readonly clusterAuthEndpoint!: pulumi.Output<outputs.ClusterClusterAuthEndpoint>;
    /**
     * Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
     */
    public readonly clusterMonitoringInput!: pulumi.Output<outputs.ClusterClusterMonitoringInput | undefined>;
    /**
     * (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     */
    public /*out*/ readonly clusterRegistrationToken!: pulumi.Output<outputs.ClusterClusterRegistrationToken>;
    /**
     * Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
     */
    public readonly clusterTemplateAnswers!: pulumi.Output<outputs.ClusterClusterTemplateAnswers>;
    /**
     * Cluster template ID. Just for Rancher v2.3.x and above (string)
     */
    public readonly clusterTemplateId!: pulumi.Output<string | undefined>;
    /**
     * Cluster template questions. Just for Rancher v2.3.x and above (list)
     */
    public readonly clusterTemplateQuestions!: pulumi.Output<outputs.ClusterClusterTemplateQuestion[]>;
    /**
     * Cluster template revision ID. Just for Rancher v2.3.x and above (string)
     */
    public readonly clusterTemplateRevisionId!: pulumi.Output<string | undefined>;
    /**
     * [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     */
    public readonly defaultPodSecurityPolicyTemplateId!: pulumi.Output<string>;
    /**
     * (Computed) Default project ID for the cluster (string)
     */
    public /*out*/ readonly defaultProjectId!: pulumi.Output<string>;
    /**
     * An optional description of this cluster (string)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Desired agent image. Just for Rancher v2.3.x and above (string)
     */
    public readonly desiredAgentImage!: pulumi.Output<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    public readonly desiredAuthImage!: pulumi.Output<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    public readonly dockerRootDir!: pulumi.Output<string>;
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     */
    public readonly driver!: pulumi.Output<string>;
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly eksConfig!: pulumi.Output<outputs.ClusterEksConfig | undefined>;
    /**
     * The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
     */
    public readonly eksConfigV2!: pulumi.Output<outputs.ClusterEksConfigV2>;
    /**
     * Enable built-in cluster alerting (bool)
     */
    public readonly enableClusterAlerting!: pulumi.Output<boolean>;
    /**
     * Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
     *
     * @deprecated Deploy istio using rancher2_app resource instead
     */
    public /*out*/ readonly enableClusterIstio!: pulumi.Output<boolean>;
    /**
     * Enable built-in cluster monitoring (bool)
     */
    public readonly enableClusterMonitoring!: pulumi.Output<boolean>;
    /**
     * Enable project network isolation (bool)
     */
    public readonly enableNetworkPolicy!: pulumi.Output<boolean>;
    /**
     * Fleet workspace name (string)
     */
    public readonly fleetWorkspaceName!: pulumi.Output<string>;
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly gkeConfig!: pulumi.Output<outputs.ClusterGkeConfig | undefined>;
    /**
     * The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 or above (list maxitems:1)
     */
    public readonly gkeConfigV2!: pulumi.Output<outputs.ClusterGkeConfigV2 | undefined>;
    /**
     * (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
     */
    public /*out*/ readonly istioEnabled!: pulumi.Output<boolean>;
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly k3sConfig!: pulumi.Output<outputs.ClusterK3sConfig>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `clusterAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected` (string)
     */
    public /*out*/ readonly kubeConfig!: pulumi.Output<string>;
    /**
     * Labels for cluster registration token object (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * Name of cluster registration token (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly okeConfig!: pulumi.Output<outputs.ClusterOkeConfig | undefined>;
    /**
     * The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    public readonly rke2Config!: pulumi.Output<outputs.ClusterRke2Config>;
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
     */
    public readonly rkeConfig!: pulumi.Output<outputs.ClusterRkeConfig>;
    /**
     * Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
     */
    public readonly scheduledClusterScan!: pulumi.Output<outputs.ClusterScheduledClusterScan>;
    /**
     * (Computed) System project ID for the cluster (string)
     */
    public /*out*/ readonly systemProjectId!: pulumi.Output<string>;
    /**
     * Windows preferred cluster. Default: `false` (bool)
     */
    public readonly windowsPreferedCluster!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["agentEnvVars"] = state ? state.agentEnvVars : undefined;
            resourceInputs["aksConfig"] = state ? state.aksConfig : undefined;
            resourceInputs["aksConfigV2"] = state ? state.aksConfigV2 : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["caCert"] = state ? state.caCert : undefined;
            resourceInputs["clusterAuthEndpoint"] = state ? state.clusterAuthEndpoint : undefined;
            resourceInputs["clusterMonitoringInput"] = state ? state.clusterMonitoringInput : undefined;
            resourceInputs["clusterRegistrationToken"] = state ? state.clusterRegistrationToken : undefined;
            resourceInputs["clusterTemplateAnswers"] = state ? state.clusterTemplateAnswers : undefined;
            resourceInputs["clusterTemplateId"] = state ? state.clusterTemplateId : undefined;
            resourceInputs["clusterTemplateQuestions"] = state ? state.clusterTemplateQuestions : undefined;
            resourceInputs["clusterTemplateRevisionId"] = state ? state.clusterTemplateRevisionId : undefined;
            resourceInputs["defaultPodSecurityPolicyTemplateId"] = state ? state.defaultPodSecurityPolicyTemplateId : undefined;
            resourceInputs["defaultProjectId"] = state ? state.defaultProjectId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredAgentImage"] = state ? state.desiredAgentImage : undefined;
            resourceInputs["desiredAuthImage"] = state ? state.desiredAuthImage : undefined;
            resourceInputs["dockerRootDir"] = state ? state.dockerRootDir : undefined;
            resourceInputs["driver"] = state ? state.driver : undefined;
            resourceInputs["eksConfig"] = state ? state.eksConfig : undefined;
            resourceInputs["eksConfigV2"] = state ? state.eksConfigV2 : undefined;
            resourceInputs["enableClusterAlerting"] = state ? state.enableClusterAlerting : undefined;
            resourceInputs["enableClusterIstio"] = state ? state.enableClusterIstio : undefined;
            resourceInputs["enableClusterMonitoring"] = state ? state.enableClusterMonitoring : undefined;
            resourceInputs["enableNetworkPolicy"] = state ? state.enableNetworkPolicy : undefined;
            resourceInputs["fleetWorkspaceName"] = state ? state.fleetWorkspaceName : undefined;
            resourceInputs["gkeConfig"] = state ? state.gkeConfig : undefined;
            resourceInputs["gkeConfigV2"] = state ? state.gkeConfigV2 : undefined;
            resourceInputs["istioEnabled"] = state ? state.istioEnabled : undefined;
            resourceInputs["k3sConfig"] = state ? state.k3sConfig : undefined;
            resourceInputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["okeConfig"] = state ? state.okeConfig : undefined;
            resourceInputs["rke2Config"] = state ? state.rke2Config : undefined;
            resourceInputs["rkeConfig"] = state ? state.rkeConfig : undefined;
            resourceInputs["scheduledClusterScan"] = state ? state.scheduledClusterScan : undefined;
            resourceInputs["systemProjectId"] = state ? state.systemProjectId : undefined;
            resourceInputs["windowsPreferedCluster"] = state ? state.windowsPreferedCluster : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            resourceInputs["agentEnvVars"] = args ? args.agentEnvVars : undefined;
            resourceInputs["aksConfig"] = args ? args.aksConfig : undefined;
            resourceInputs["aksConfigV2"] = args ? args.aksConfigV2 : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["clusterAuthEndpoint"] = args ? args.clusterAuthEndpoint : undefined;
            resourceInputs["clusterMonitoringInput"] = args ? args.clusterMonitoringInput : undefined;
            resourceInputs["clusterTemplateAnswers"] = args ? args.clusterTemplateAnswers : undefined;
            resourceInputs["clusterTemplateId"] = args ? args.clusterTemplateId : undefined;
            resourceInputs["clusterTemplateQuestions"] = args ? args.clusterTemplateQuestions : undefined;
            resourceInputs["clusterTemplateRevisionId"] = args ? args.clusterTemplateRevisionId : undefined;
            resourceInputs["defaultPodSecurityPolicyTemplateId"] = args ? args.defaultPodSecurityPolicyTemplateId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredAgentImage"] = args ? args.desiredAgentImage : undefined;
            resourceInputs["desiredAuthImage"] = args ? args.desiredAuthImage : undefined;
            resourceInputs["dockerRootDir"] = args ? args.dockerRootDir : undefined;
            resourceInputs["driver"] = args ? args.driver : undefined;
            resourceInputs["eksConfig"] = args ? args.eksConfig : undefined;
            resourceInputs["eksConfigV2"] = args ? args.eksConfigV2 : undefined;
            resourceInputs["enableClusterAlerting"] = args ? args.enableClusterAlerting : undefined;
            resourceInputs["enableClusterMonitoring"] = args ? args.enableClusterMonitoring : undefined;
            resourceInputs["enableNetworkPolicy"] = args ? args.enableNetworkPolicy : undefined;
            resourceInputs["fleetWorkspaceName"] = args ? args.fleetWorkspaceName : undefined;
            resourceInputs["gkeConfig"] = args ? args.gkeConfig : undefined;
            resourceInputs["gkeConfigV2"] = args ? args.gkeConfigV2 : undefined;
            resourceInputs["k3sConfig"] = args ? args.k3sConfig : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["okeConfig"] = args ? args.okeConfig : undefined;
            resourceInputs["rke2Config"] = args ? args.rke2Config : undefined;
            resourceInputs["rkeConfig"] = args ? args.rkeConfig : undefined;
            resourceInputs["scheduledClusterScan"] = args ? args.scheduledClusterScan : undefined;
            resourceInputs["windowsPreferedCluster"] = args ? args.windowsPreferedCluster : undefined;
            resourceInputs["caCert"] = undefined /*out*/;
            resourceInputs["clusterRegistrationToken"] = undefined /*out*/;
            resourceInputs["defaultProjectId"] = undefined /*out*/;
            resourceInputs["enableClusterIstio"] = undefined /*out*/;
            resourceInputs["istioEnabled"] = undefined /*out*/;
            resourceInputs["kubeConfig"] = undefined /*out*/;
            resourceInputs["systemProjectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Optional Agent Env Vars for Rancher agent. Just for Rancher v2.5.6 and above (list)
     */
    agentEnvVars?: pulumi.Input<pulumi.Input<inputs.ClusterAgentEnvVar>[]>;
    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    aksConfig?: pulumi.Input<inputs.ClusterAksConfig>;
    /**
     * The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    aksConfigV2?: pulumi.Input<inputs.ClusterAksConfigV2>;
    /**
     * Annotations for cluster registration token object (map)
     */
    annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * TLS CA certificate for etcd service (string)
     */
    caCert?: pulumi.Input<string>;
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     */
    clusterAuthEndpoint?: pulumi.Input<inputs.ClusterClusterAuthEndpoint>;
    /**
     * Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
     */
    clusterMonitoringInput?: pulumi.Input<inputs.ClusterClusterMonitoringInput>;
    /**
     * (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     */
    clusterRegistrationToken?: pulumi.Input<inputs.ClusterClusterRegistrationToken>;
    /**
     * Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
     */
    clusterTemplateAnswers?: pulumi.Input<inputs.ClusterClusterTemplateAnswers>;
    /**
     * Cluster template ID. Just for Rancher v2.3.x and above (string)
     */
    clusterTemplateId?: pulumi.Input<string>;
    /**
     * Cluster template questions. Just for Rancher v2.3.x and above (list)
     */
    clusterTemplateQuestions?: pulumi.Input<pulumi.Input<inputs.ClusterClusterTemplateQuestion>[]>;
    /**
     * Cluster template revision ID. Just for Rancher v2.3.x and above (string)
     */
    clusterTemplateRevisionId?: pulumi.Input<string>;
    /**
     * [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     */
    defaultPodSecurityPolicyTemplateId?: pulumi.Input<string>;
    /**
     * (Computed) Default project ID for the cluster (string)
     */
    defaultProjectId?: pulumi.Input<string>;
    /**
     * An optional description of this cluster (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Desired agent image. Just for Rancher v2.3.x and above (string)
     */
    desiredAgentImage?: pulumi.Input<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    desiredAuthImage?: pulumi.Input<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    dockerRootDir?: pulumi.Input<string>;
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     */
    driver?: pulumi.Input<string>;
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    eksConfig?: pulumi.Input<inputs.ClusterEksConfig>;
    /**
     * The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
     */
    eksConfigV2?: pulumi.Input<inputs.ClusterEksConfigV2>;
    /**
     * Enable built-in cluster alerting (bool)
     */
    enableClusterAlerting?: pulumi.Input<boolean>;
    /**
     * Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
     *
     * @deprecated Deploy istio using rancher2_app resource instead
     */
    enableClusterIstio?: pulumi.Input<boolean>;
    /**
     * Enable built-in cluster monitoring (bool)
     */
    enableClusterMonitoring?: pulumi.Input<boolean>;
    /**
     * Enable project network isolation (bool)
     */
    enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * Fleet workspace name (string)
     */
    fleetWorkspaceName?: pulumi.Input<string>;
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    gkeConfig?: pulumi.Input<inputs.ClusterGkeConfig>;
    /**
     * The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 or above (list maxitems:1)
     */
    gkeConfigV2?: pulumi.Input<inputs.ClusterGkeConfigV2>;
    /**
     * (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
     */
    istioEnabled?: pulumi.Input<boolean>;
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
     */
    k3sConfig?: pulumi.Input<inputs.ClusterK3sConfig>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `clusterAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected` (string)
     */
    kubeConfig?: pulumi.Input<string>;
    /**
     * Labels for cluster registration token object (map)
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of cluster registration token (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    okeConfig?: pulumi.Input<inputs.ClusterOkeConfig>;
    /**
     * The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    rke2Config?: pulumi.Input<inputs.ClusterRke2Config>;
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
     */
    rkeConfig?: pulumi.Input<inputs.ClusterRkeConfig>;
    /**
     * Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
     */
    scheduledClusterScan?: pulumi.Input<inputs.ClusterScheduledClusterScan>;
    /**
     * (Computed) System project ID for the cluster (string)
     */
    systemProjectId?: pulumi.Input<string>;
    /**
     * Windows preferred cluster. Default: `false` (bool)
     */
    windowsPreferedCluster?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Optional Agent Env Vars for Rancher agent. Just for Rancher v2.5.6 and above (list)
     */
    agentEnvVars?: pulumi.Input<pulumi.Input<inputs.ClusterAgentEnvVar>[]>;
    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    aksConfig?: pulumi.Input<inputs.ClusterAksConfig>;
    /**
     * The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    aksConfigV2?: pulumi.Input<inputs.ClusterAksConfigV2>;
    /**
     * Annotations for cluster registration token object (map)
     */
    annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     */
    clusterAuthEndpoint?: pulumi.Input<inputs.ClusterClusterAuthEndpoint>;
    /**
     * Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
     */
    clusterMonitoringInput?: pulumi.Input<inputs.ClusterClusterMonitoringInput>;
    /**
     * Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
     */
    clusterTemplateAnswers?: pulumi.Input<inputs.ClusterClusterTemplateAnswers>;
    /**
     * Cluster template ID. Just for Rancher v2.3.x and above (string)
     */
    clusterTemplateId?: pulumi.Input<string>;
    /**
     * Cluster template questions. Just for Rancher v2.3.x and above (list)
     */
    clusterTemplateQuestions?: pulumi.Input<pulumi.Input<inputs.ClusterClusterTemplateQuestion>[]>;
    /**
     * Cluster template revision ID. Just for Rancher v2.3.x and above (string)
     */
    clusterTemplateRevisionId?: pulumi.Input<string>;
    /**
     * [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
     */
    defaultPodSecurityPolicyTemplateId?: pulumi.Input<string>;
    /**
     * An optional description of this cluster (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Desired agent image. Just for Rancher v2.3.x and above (string)
     */
    desiredAgentImage?: pulumi.Input<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    desiredAuthImage?: pulumi.Input<string>;
    /**
     * Desired auth image. Just for Rancher v2.3.x and above (string)
     */
    dockerRootDir?: pulumi.Input<string>;
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     */
    driver?: pulumi.Input<string>;
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    eksConfig?: pulumi.Input<inputs.ClusterEksConfig>;
    /**
     * The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
     */
    eksConfigV2?: pulumi.Input<inputs.ClusterEksConfigV2>;
    /**
     * Enable built-in cluster alerting (bool)
     */
    enableClusterAlerting?: pulumi.Input<boolean>;
    /**
     * Enable built-in cluster monitoring (bool)
     */
    enableClusterMonitoring?: pulumi.Input<boolean>;
    /**
     * Enable project network isolation (bool)
     */
    enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * Fleet workspace name (string)
     */
    fleetWorkspaceName?: pulumi.Input<string>;
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    gkeConfig?: pulumi.Input<inputs.ClusterGkeConfig>;
    /**
     * The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 or above (list maxitems:1)
     */
    gkeConfigV2?: pulumi.Input<inputs.ClusterGkeConfigV2>;
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
     */
    k3sConfig?: pulumi.Input<inputs.ClusterK3sConfig>;
    /**
     * Labels for cluster registration token object (map)
     */
    labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of cluster registration token (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    okeConfig?: pulumi.Input<inputs.ClusterOkeConfig>;
    /**
     * The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    rke2Config?: pulumi.Input<inputs.ClusterRke2Config>;
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
     */
    rkeConfig?: pulumi.Input<inputs.ClusterRkeConfig>;
    /**
     * Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
     */
    scheduledClusterScan?: pulumi.Input<inputs.ClusterScheduledClusterScan>;
    /**
     * Windows preferred cluster. Default: `false` (bool)
     */
    windowsPreferedCluster?: pulumi.Input<boolean>;
}
