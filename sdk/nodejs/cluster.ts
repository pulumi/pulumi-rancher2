// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
 *
 * ## Example Usage
 *
 * **Note optional/computed arguments** If any `optional/computed` argument of this resource is defined by the user, removing it from tf file will NOT reset its value. To reset it, let its definition at tf file as empty/false object. Ex: `cloudProvider {}`, `name = ""`
 *
 * ### Creating Rancher v2 imported cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 imported Cluster
 * const foo_imported = new rancher2.Cluster("foo-imported", {
 *     name: "foo-imported",
 *     description: "Foo rancher2 imported cluster",
 * });
 * ```
 *
 * ### Creating Rancher v2 imported cluster with custom configuration. For Rancher v2.11.x and above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 imported Cluster with custom configuration 
 * const foo_imported = new rancher2.Cluster("foo-imported", {
 *     name: "foo-imported",
 *     importedConfig: {
 *         privateRegistryUrl: "test.io",
 *     },
 * });
 * ```
 *
 * ### Creating Rancher v2 RKE cluster enabling
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 RKE Cluster
 * const foo_custom = new rancher2.Cluster("foo-custom", {
 *     name: "foo-custom",
 *     description: "Foo rancher2 custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *     },
 * });
 * ```
 *
 * ### Creating Rancher v2 RKE cluster enabling/customizing istio
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 RKE Cluster
 * const foo_custom = new rancher2.Cluster("foo-custom", {
 *     name: "foo-custom",
 *     description: "Foo rancher2 custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *     },
 * });
 * // Create a new rancher2 Cluster Sync for foo-custom cluster
 * const foo_customClusterSync = new rancher2.ClusterSync("foo-custom", {clusterId: foo_custom.id});
 * // Create a new rancher2 Namespace
 * const foo_istio = new rancher2.Namespace("foo-istio", {
 *     name: "istio-system",
 *     projectId: foo_customClusterSync.systemProjectId,
 *     description: "istio namespace",
 * });
 * // Create a new rancher2 App deploying istio
 * const istio = new rancher2.index.App("istio", {
 *     catalogName: "system-library",
 *     name: "cluster-istio",
 *     description: "Terraform app acceptance test",
 *     projectId: foo_istio.projectId,
 *     templateName: "rancher-istio",
 *     templateVersion: "0.1.1",
 *     targetNamespace: foo_istio.id,
 *     answers: {
 *         enabled: false,
 *         enableCRDs: true,
 *         enabled: true,
 *         enabled: false,
 *         cpu: "2000m",
 *         memory: "1024Mi",
 *         cpu: "100m",
 *         memory: "128Mi",
 *         type: "NodePort",
 *         clusterId: foo_customClusterSync.clusterId,
 *         enabled: "false",
 *         enabled: "false",
 *         enabled: "true",
 *         enabled: "true",
 *         enabled: "true",
 *         cpu: "4800m",
 *         memory: "4096Mi",
 *         cpu: "1000m",
 *         memory: "1024Mi",
 *         cpu: "4800m",
 *         memory: "4096Mi",
 *         cpu: "1000m",
 *         memory: "1024Mi",
 *         enabled: false,
 *         enabled: false,
 *         enabled: true,
 *         cpu: "1000m",
 *         memory: "4096Mi",
 *         cpu: "500m",
 *         memory: "2048Mi",
 *         traceSampling: "1",
 *         enabled: true,
 *         enabled: true,
 *         enabled: true,
 *         cpu: "500m",
 *         memory: "1024Mi",
 *         cpu: "100m",
 *         memory: "100Mi",
 *     },
 * });
 * ```
 *
 * ### Creating Rancher v2 RKE cluster assigning a node pool (overlapped planes)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 RKE Cluster
 * const foo_custom = new rancher2.Cluster("foo-custom", {
 *     name: "foo-custom",
 *     description: "Foo rancher2 custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *     },
 * });
 * // Create a new rancher2 Node Template
 * const foo = new rancher2.NodeTemplate("foo", {
 *     name: "foo",
 *     description: "foo test",
 *     amazonec2Config: {
 *         accessKey: "<AWS_ACCESS_KEY>",
 *         secretKey: "<AWS_SECRET_KEY>",
 *         ami: "<AMI_ID>",
 *         region: "<REGION>",
 *         securityGroups: ["<AWS_SECURITY_GROUP>"],
 *         subnetId: "<SUBNET_ID>",
 *         vpcId: "<VPC_ID>",
 *         zone: "<ZONE>",
 *     },
 * });
 * // Create a new rancher2 Node Pool
 * const fooNodePool = new rancher2.NodePool("foo", {
 *     clusterId: foo_custom.id,
 *     name: "foo",
 *     hostnamePrefix: "foo-cluster-0",
 *     nodeTemplateId: foo.id,
 *     quantity: 3,
 *     controlPlane: true,
 *     etcd: true,
 *     worker: true,
 * });
 * ```
 *
 * ### Creating Rancher v2 RKE cluster from template. For Rancher v2.3.x and above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher2 cluster template
 * const foo = new rancher2.ClusterTemplate("foo", {
 *     name: "foo",
 *     members: [{
 *         accessType: "owner",
 *         userPrincipalId: "local://user-XXXXX",
 *     }],
 *     templateRevisions: [{
 *         name: "V1",
 *         clusterConfig: {
 *             rkeConfig: {
 *                 network: {
 *                     plugin: "canal",
 *                 },
 *                 services: {
 *                     etcd: {
 *                         creation: "6h",
 *                         retention: "24h",
 *                     },
 *                 },
 *             },
 *         },
 *         "default": true,
 *     }],
 *     description: "Test cluster template v2",
 * });
 * // Create a new rancher2 RKE Cluster from template
 * const fooCluster = new rancher2.Cluster("foo", {
 *     name: "foo",
 *     clusterTemplateId: foo.id,
 *     clusterTemplateRevisionId: foo.templateRevisions.apply(templateRevisions => templateRevisions[0].id),
 * });
 * ```
 *
 * ### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x and above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.Cluster("foo", {
 *     name: "foo",
 *     description: "Terraform custom cluster",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *         services: {
 *             etcd: {
 *                 creation: "6h",
 *                 retention: "24h",
 *             },
 *             kubeApi: {
 *                 auditLog: {
 *                     enabled: true,
 *                     configuration: {
 *                         maxAge: 5,
 *                         maxBackup: 5,
 *                         maxSize: 100,
 *                         path: "-",
 *                         format: "json",
 *                         policy: `apiVersion: audit.k8s.io/v1
 * kind: Policy
 * metadata:
 *   creationTimestamp: null
 * omitStages:
 * - RequestReceived
 * rules:
 * - level: RequestResponse
 *   resources:
 *   - resources:
 *     - pods
 * `,
 *                     },
 *                 },
 *             },
 *         },
 *         upgradeStrategy: {
 *             drain: true,
 *             maxUnavailableWorker: "20%",
 *         },
 *     },
 * });
 * ```
 *
 * ### Creating Rancher v2 RKE cluster with cluster agent customization. For Rancher v2.7.5 and above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.Cluster("foo", {
 *     name: "foo",
 *     description: "Terraform cluster with agent customization",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *     },
 *     clusterAgentDeploymentCustomizations: [{
 *         appendTolerations: [{
 *             effect: "NoSchedule",
 *             key: "tolerate/control-plane",
 *             value: "true",
 *         }],
 *         overrideAffinity: `{
 *   "nodeAffinity": {
 *     "requiredDuringSchedulingIgnoredDuringExecution": {
 *       "nodeSelectorTerms": [{
 *         "matchExpressions": [{
 *           "key": "not.this/nodepool",
 *           "operator": "In",
 *           "values": [
 *             "true"
 *           ]
 *         }]
 *       }]
 *     }
 *   }
 * }
 * `,
 *         overrideResourceRequirements: [{
 *             cpuLimit: "800",
 *             cpuRequest: "500",
 *             memoryLimit: "800",
 *             memoryRequest: "500",
 *         }],
 *     }],
 * });
 * ```
 *
 * ### Creating Rancher v2 RKE cluster with cluster agent scheduling customization. For Custom and Imported clusters provisioned by Rancher v2.11.0 and above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.Cluster("foo", {
 *     name: "foo",
 *     description: "Terraform cluster with agent customization",
 *     rkeConfig: {},
 *     clusterAgentDeploymentCustomizations: [{
 *         schedulingCustomizations: [{
 *             priorityClasses: [{
 *                 preemptionPolicy: "PreemptLowerPriority",
 *                 value: 1000000000,
 *             }],
 *             podDisruptionBudgets: [{
 *                 minAvailable: "1",
 *             }],
 *         }],
 *     }],
 * });
 * ```
 *
 * ### Creating Rancher v2 RKE cluster with Pod Security Admission Configuration Template (PSACT). For Rancher v2.7.2 and above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Custom PSACT (if you wish to use your own)
 * const foo = new rancher2.PodSecurityAdmissionConfigurationTemplate("foo", {
 *     name: "custom-psact",
 *     description: "This is my custom Pod Security Admission Configuration Template",
 *     defaults: {
 *         audit: "restricted",
 *         auditVersion: "latest",
 *         enforce: "restricted",
 *         enforceVersion: "latest",
 *         warn: "restricted",
 *         warnVersion: "latest",
 *     },
 *     exemptions: {
 *         usernames: ["testuser"],
 *         runtimeClasses: ["testclass"],
 *         namespaces: [
 *             "ingress-nginx",
 *             "kube-system",
 *         ],
 *     },
 * });
 * const fooCluster = new rancher2.Cluster("foo", {
 *     name: "foo",
 *     description: "Terraform cluster with PSACT",
 *     defaultPodSecurityAdmissionConfigurationTemplateName: "<name>",
 *     rkeConfig: {
 *         network: {
 *             plugin: "canal",
 *         },
 *     },
 * });
 * ```
 *
 * ### Importing EKS cluster to Rancher v2, using `eksConfigV2`. For Rancher v2.5.x and above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.CloudCredential("foo", {
 *     name: "foo",
 *     description: "foo test",
 *     amazonec2CredentialConfig: {
 *         accessKey: "<aws-access-key>",
 *         secretKey: "<aws-secret-key>",
 *     },
 * });
 * const fooCluster = new rancher2.Cluster("foo", {
 *     name: "foo",
 *     description: "Terraform EKS cluster",
 *     eksConfigV2: {
 *         cloudCredentialId: foo.id,
 *         name: "<cluster-name>",
 *         region: "<eks-region>",
 *         imported: true,
 *     },
 * });
 * ```
 *
 * ### Creating EKS cluster from Rancher v2, using `eksConfigV2`. For Rancher v2.5.x and above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.CloudCredential("foo", {
 *     name: "foo",
 *     description: "foo test",
 *     amazonec2CredentialConfig: {
 *         accessKey: "<aws-access-key>",
 *         secretKey: "<aws-secret-key>",
 *     },
 * });
 * const fooCluster = new rancher2.Cluster("foo", {
 *     name: "foo",
 *     description: "Terraform EKS cluster",
 *     eksConfigV2: {
 *         cloudCredentialId: foo.id,
 *         region: "<EKS_REGION>",
 *         kubernetesVersion: "1.24",
 *         loggingTypes: [
 *             "audit",
 *             "api",
 *         ],
 *         nodeGroups: [
 *             {
 *                 name: "node_group1",
 *                 instanceType: "t3.medium",
 *                 desiredSize: 3,
 *                 maxSize: 5,
 *             },
 *             {
 *                 name: "node_group2",
 *                 instanceType: "m5.xlarge",
 *                 desiredSize: 2,
 *                 maxSize: 3,
 *                 nodeRole: "arn:aws:iam::role/test-NodeInstanceRole",
 *             },
 *         ],
 *         privateAccess: true,
 *         publicAccess: false,
 *     },
 * });
 * ```
 *
 * ### Creating EKS cluster from Rancher v2, using `eksConfigV2` and launch template. For Rancher v2.5.6 and above.
 *
 * Note: To use `launchTemplate` you must provide the ID (seen as `<EC2_LAUNCH_TEMPLATE_ID>`) to the template either as a static value. Or fetched via AWS data-source using one of: aws_ami, aws_ami_ids, or similar data-sources. You can also create a custom `launchTemplate` first and provide the ID to that.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo = new rancher2.CloudCredential("foo", {
 *     name: "foo",
 *     description: "foo test",
 *     amazonec2CredentialConfig: {
 *         accessKey: "<aws-access-key>",
 *         secretKey: "<aws-secret-key>",
 *     },
 * });
 * const fooCluster = new rancher2.Cluster("foo", {
 *     name: "foo",
 *     description: "Terraform EKS cluster",
 *     eksConfigV2: {
 *         cloudCredentialId: foo.id,
 *         region: "<EKS_REGION>",
 *         kubernetesVersion: "1.24",
 *         loggingTypes: [
 *             "audit",
 *             "api",
 *         ],
 *         nodeGroups: [{
 *             desiredSize: 3,
 *             maxSize: 5,
 *             name: "node_group1",
 *             launchTemplates: [{
 *                 id: "<ec2-launch-template-id>",
 *                 version: 1,
 *             }],
 *         }],
 *         privateAccess: true,
 *         publicAccess: true,
 *     },
 * });
 * ```
 *
 * ### Creating AKS cluster from Rancher v2, using `aksConfigV2`. For Rancher v2.6.0 and above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const foo_aks = new rancher2.CloudCredential("foo-aks", {
 *     name: "foo-aks",
 *     azureCredentialConfig: {
 *         clientId: "<client-id>",
 *         clientSecret: "<client-secret>",
 *         subscriptionId: "<subscription-id>",
 *     },
 * });
 * const foo = new rancher2.Cluster("foo", {
 *     name: "foo",
 *     description: "Terraform AKS cluster",
 *     aksConfigV2: {
 *         cloudCredentialId: foo_aks.id,
 *         resourceGroup: "<resource-group>",
 *         resourceLocation: "<resource-location>",
 *         dnsPrefix: "<dns-prefix>",
 *         kubernetesVersion: "1.24.6",
 *         networkPlugin: "<network-plugin>",
 *         virtualNetwork: "<virtual-network>",
 *         virtualNetworkResourceGroup: "<virtual-network-resource-group>",
 *         subnet: "<subnet>",
 *         nodeResourceGroup: "<node-resource-group>",
 *         outboundType: "loadBalancer",
 *         nodePools: [
 *             {
 *                 availabilityZones: [
 *                     "1",
 *                     "2",
 *                     "3",
 *                 ],
 *                 name: "<nodepool-name-1>",
 *                 mode: "System",
 *                 count: 1,
 *                 orchestratorVersion: "1.21.2",
 *                 osDiskSizeGb: 128,
 *                 vmSize: "Standard_DS2_v2",
 *             },
 *             {
 *                 availabilityZones: [
 *                     "1",
 *                     "2",
 *                     "3",
 *                 ],
 *                 name: "<nodepool-name-2>",
 *                 count: 1,
 *                 mode: "User",
 *                 orchestratorVersion: "1.21.2",
 *                 osDiskSizeGb: 128,
 *                 vmSize: "Standard_DS2_v2",
 *                 maxSurge: "25%",
 *                 labels: {
 *                     test1: "data1",
 *                     test2: "data2",
 *                 },
 *                 taints: ["none:PreferNoSchedule"],
 *             },
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Clusters can be imported using the Rancher Cluster ID
 *
 * ```sh
 * $ pulumi import rancher2:index/cluster:Cluster foo &lt;CLUSTER_ID&gt;
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
     */
    declare public readonly agentEnvVars: pulumi.Output<outputs.ClusterAgentEnvVar[] | undefined>;
    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    declare public readonly aksConfig: pulumi.Output<outputs.ClusterAksConfig | undefined>;
    /**
     * The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    declare public readonly aksConfigV2: pulumi.Output<outputs.ClusterAksConfigV2 | undefined>;
    /**
     * Annotations for the Cluster (map)
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string}>;
    /**
     * (Computed/Sensitive) K8s cluster ca cert (string)
     */
    declare public /*out*/ readonly caCert: pulumi.Output<string>;
    /**
     * Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
     */
    declare public readonly clusterAgentDeploymentCustomizations: pulumi.Output<outputs.ClusterClusterAgentDeploymentCustomization[] | undefined>;
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     */
    declare public readonly clusterAuthEndpoint: pulumi.Output<outputs.ClusterClusterAuthEndpoint>;
    /**
     * (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     */
    declare public /*out*/ readonly clusterRegistrationToken: pulumi.Output<outputs.ClusterClusterRegistrationToken>;
    /**
     * Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
     */
    declare public readonly clusterTemplateAnswers: pulumi.Output<outputs.ClusterClusterTemplateAnswers>;
    /**
     * Cluster template ID. For Rancher v2.3.x and above (string)
     */
    declare public readonly clusterTemplateId: pulumi.Output<string | undefined>;
    /**
     * Cluster template questions. For Rancher v2.3.x and above (list)
     */
    declare public readonly clusterTemplateQuestions: pulumi.Output<outputs.ClusterClusterTemplateQuestion[]>;
    /**
     * Cluster template revision ID. For Rancher v2.3.x and above (string)
     */
    declare public readonly clusterTemplateRevisionId: pulumi.Output<string | undefined>;
    /**
     * The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)
     */
    declare public readonly defaultPodSecurityAdmissionConfigurationTemplateName: pulumi.Output<string>;
    /**
     * (Computed) Default project ID for the cluster (string)
     */
    declare public /*out*/ readonly defaultProjectId: pulumi.Output<string>;
    /**
     * The description for Cluster (string)
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Desired agent image. For Rancher v2.3.x and above (string)
     */
    declare public readonly desiredAgentImage: pulumi.Output<string>;
    /**
     * Desired auth image. For Rancher v2.3.x and above (string)
     */
    declare public readonly desiredAuthImage: pulumi.Output<string>;
    /**
     * Desired auth image. For Rancher v2.3.x and above (string)
     */
    declare public readonly dockerRootDir: pulumi.Output<string>;
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     */
    declare public readonly driver: pulumi.Output<string>;
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    declare public readonly eksConfig: pulumi.Output<outputs.ClusterEksConfig | undefined>;
    /**
     * The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x and above (list maxitems:1)
     */
    declare public readonly eksConfigV2: pulumi.Output<outputs.ClusterEksConfigV2>;
    /**
     * Deploy istio on `system` project and `istio-system` namespace, using rancher2App resource instead. See above example.
     *
     * @deprecated Deploy istio using rancher2App resource instead
     */
    declare public /*out*/ readonly enableClusterIstio: pulumi.Output<boolean>;
    /**
     * Enable project network isolation (bool)
     */
    declare public readonly enableNetworkPolicy: pulumi.Output<boolean>;
    /**
     * Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
     */
    declare public readonly fleetAgentDeploymentCustomizations: pulumi.Output<outputs.ClusterFleetAgentDeploymentCustomization[] | undefined>;
    /**
     * Fleet workspace name (string)
     */
    declare public readonly fleetWorkspaceName: pulumi.Output<string>;
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    declare public readonly gkeConfig: pulumi.Output<outputs.ClusterGkeConfig | undefined>;
    /**
     * The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 and above (list maxitems:1)
     */
    declare public readonly gkeConfigV2: pulumi.Output<outputs.ClusterGkeConfigV2 | undefined>;
    /**
     * The imported configuration for generic imported Clusters. Conflicts with `aksConfig`,`aksConfigV2`, `eksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `rkeConfig`, `rke2Config` and `k3sConfig` (list maxitems:1)
     */
    declare public readonly importedConfig: pulumi.Output<outputs.ClusterImportedConfig | undefined>;
    /**
     * (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
     */
    declare public /*out*/ readonly istioEnabled: pulumi.Output<boolean>;
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
     */
    declare public readonly k3sConfig: pulumi.Output<outputs.ClusterK3sConfig>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `clusterAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected` (string)
     */
    declare public /*out*/ readonly kubeConfig: pulumi.Output<string>;
    /**
     * Labels for the Cluster (map)
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the Cluster (string)
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    declare public readonly okeConfig: pulumi.Output<outputs.ClusterOkeConfig | undefined>;
    /**
     * The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    declare public readonly rke2Config: pulumi.Output<outputs.ClusterRke2Config>;
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
     */
    declare public readonly rkeConfig: pulumi.Output<outputs.ClusterRkeConfig>;
    /**
     * (Computed) System project ID for the cluster (string)
     */
    declare public /*out*/ readonly systemProjectId: pulumi.Output<string>;
    /**
     * Windows preferred cluster. Default: `false` (bool)
     */
    declare public readonly windowsPreferedCluster: pulumi.Output<boolean | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["agentEnvVars"] = state?.agentEnvVars;
            resourceInputs["aksConfig"] = state?.aksConfig;
            resourceInputs["aksConfigV2"] = state?.aksConfigV2;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["caCert"] = state?.caCert;
            resourceInputs["clusterAgentDeploymentCustomizations"] = state?.clusterAgentDeploymentCustomizations;
            resourceInputs["clusterAuthEndpoint"] = state?.clusterAuthEndpoint;
            resourceInputs["clusterRegistrationToken"] = state?.clusterRegistrationToken;
            resourceInputs["clusterTemplateAnswers"] = state?.clusterTemplateAnswers;
            resourceInputs["clusterTemplateId"] = state?.clusterTemplateId;
            resourceInputs["clusterTemplateQuestions"] = state?.clusterTemplateQuestions;
            resourceInputs["clusterTemplateRevisionId"] = state?.clusterTemplateRevisionId;
            resourceInputs["defaultPodSecurityAdmissionConfigurationTemplateName"] = state?.defaultPodSecurityAdmissionConfigurationTemplateName;
            resourceInputs["defaultProjectId"] = state?.defaultProjectId;
            resourceInputs["description"] = state?.description;
            resourceInputs["desiredAgentImage"] = state?.desiredAgentImage;
            resourceInputs["desiredAuthImage"] = state?.desiredAuthImage;
            resourceInputs["dockerRootDir"] = state?.dockerRootDir;
            resourceInputs["driver"] = state?.driver;
            resourceInputs["eksConfig"] = state?.eksConfig;
            resourceInputs["eksConfigV2"] = state?.eksConfigV2;
            resourceInputs["enableClusterIstio"] = state?.enableClusterIstio;
            resourceInputs["enableNetworkPolicy"] = state?.enableNetworkPolicy;
            resourceInputs["fleetAgentDeploymentCustomizations"] = state?.fleetAgentDeploymentCustomizations;
            resourceInputs["fleetWorkspaceName"] = state?.fleetWorkspaceName;
            resourceInputs["gkeConfig"] = state?.gkeConfig;
            resourceInputs["gkeConfigV2"] = state?.gkeConfigV2;
            resourceInputs["importedConfig"] = state?.importedConfig;
            resourceInputs["istioEnabled"] = state?.istioEnabled;
            resourceInputs["k3sConfig"] = state?.k3sConfig;
            resourceInputs["kubeConfig"] = state?.kubeConfig;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["okeConfig"] = state?.okeConfig;
            resourceInputs["rke2Config"] = state?.rke2Config;
            resourceInputs["rkeConfig"] = state?.rkeConfig;
            resourceInputs["systemProjectId"] = state?.systemProjectId;
            resourceInputs["windowsPreferedCluster"] = state?.windowsPreferedCluster;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            resourceInputs["agentEnvVars"] = args?.agentEnvVars;
            resourceInputs["aksConfig"] = args?.aksConfig;
            resourceInputs["aksConfigV2"] = args?.aksConfigV2;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["clusterAgentDeploymentCustomizations"] = args?.clusterAgentDeploymentCustomizations;
            resourceInputs["clusterAuthEndpoint"] = args?.clusterAuthEndpoint;
            resourceInputs["clusterTemplateAnswers"] = args?.clusterTemplateAnswers;
            resourceInputs["clusterTemplateId"] = args?.clusterTemplateId;
            resourceInputs["clusterTemplateQuestions"] = args?.clusterTemplateQuestions;
            resourceInputs["clusterTemplateRevisionId"] = args?.clusterTemplateRevisionId;
            resourceInputs["defaultPodSecurityAdmissionConfigurationTemplateName"] = args?.defaultPodSecurityAdmissionConfigurationTemplateName;
            resourceInputs["description"] = args?.description;
            resourceInputs["desiredAgentImage"] = args?.desiredAgentImage;
            resourceInputs["desiredAuthImage"] = args?.desiredAuthImage;
            resourceInputs["dockerRootDir"] = args?.dockerRootDir;
            resourceInputs["driver"] = args?.driver;
            resourceInputs["eksConfig"] = args?.eksConfig;
            resourceInputs["eksConfigV2"] = args?.eksConfigV2;
            resourceInputs["enableNetworkPolicy"] = args?.enableNetworkPolicy;
            resourceInputs["fleetAgentDeploymentCustomizations"] = args?.fleetAgentDeploymentCustomizations;
            resourceInputs["fleetWorkspaceName"] = args?.fleetWorkspaceName;
            resourceInputs["gkeConfig"] = args?.gkeConfig;
            resourceInputs["gkeConfigV2"] = args?.gkeConfigV2;
            resourceInputs["importedConfig"] = args?.importedConfig;
            resourceInputs["k3sConfig"] = args?.k3sConfig;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["okeConfig"] = args?.okeConfig;
            resourceInputs["rke2Config"] = args?.rke2Config;
            resourceInputs["rkeConfig"] = args?.rkeConfig;
            resourceInputs["windowsPreferedCluster"] = args?.windowsPreferedCluster;
            resourceInputs["caCert"] = undefined /*out*/;
            resourceInputs["clusterRegistrationToken"] = undefined /*out*/;
            resourceInputs["defaultProjectId"] = undefined /*out*/;
            resourceInputs["enableClusterIstio"] = undefined /*out*/;
            resourceInputs["istioEnabled"] = undefined /*out*/;
            resourceInputs["kubeConfig"] = undefined /*out*/;
            resourceInputs["systemProjectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caCert", "kubeConfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
     */
    agentEnvVars?: pulumi.Input<pulumi.Input<inputs.ClusterAgentEnvVar>[]>;
    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    aksConfig?: pulumi.Input<inputs.ClusterAksConfig>;
    /**
     * The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    aksConfigV2?: pulumi.Input<inputs.ClusterAksConfigV2>;
    /**
     * Annotations for the Cluster (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Computed/Sensitive) K8s cluster ca cert (string)
     */
    caCert?: pulumi.Input<string>;
    /**
     * Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
     */
    clusterAgentDeploymentCustomizations?: pulumi.Input<pulumi.Input<inputs.ClusterClusterAgentDeploymentCustomization>[]>;
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     */
    clusterAuthEndpoint?: pulumi.Input<inputs.ClusterClusterAuthEndpoint>;
    /**
     * (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
     */
    clusterRegistrationToken?: pulumi.Input<inputs.ClusterClusterRegistrationToken>;
    /**
     * Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
     */
    clusterTemplateAnswers?: pulumi.Input<inputs.ClusterClusterTemplateAnswers>;
    /**
     * Cluster template ID. For Rancher v2.3.x and above (string)
     */
    clusterTemplateId?: pulumi.Input<string>;
    /**
     * Cluster template questions. For Rancher v2.3.x and above (list)
     */
    clusterTemplateQuestions?: pulumi.Input<pulumi.Input<inputs.ClusterClusterTemplateQuestion>[]>;
    /**
     * Cluster template revision ID. For Rancher v2.3.x and above (string)
     */
    clusterTemplateRevisionId?: pulumi.Input<string>;
    /**
     * The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)
     */
    defaultPodSecurityAdmissionConfigurationTemplateName?: pulumi.Input<string>;
    /**
     * (Computed) Default project ID for the cluster (string)
     */
    defaultProjectId?: pulumi.Input<string>;
    /**
     * The description for Cluster (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Desired agent image. For Rancher v2.3.x and above (string)
     */
    desiredAgentImage?: pulumi.Input<string>;
    /**
     * Desired auth image. For Rancher v2.3.x and above (string)
     */
    desiredAuthImage?: pulumi.Input<string>;
    /**
     * Desired auth image. For Rancher v2.3.x and above (string)
     */
    dockerRootDir?: pulumi.Input<string>;
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     */
    driver?: pulumi.Input<string>;
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    eksConfig?: pulumi.Input<inputs.ClusterEksConfig>;
    /**
     * The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x and above (list maxitems:1)
     */
    eksConfigV2?: pulumi.Input<inputs.ClusterEksConfigV2>;
    /**
     * Deploy istio on `system` project and `istio-system` namespace, using rancher2App resource instead. See above example.
     *
     * @deprecated Deploy istio using rancher2App resource instead
     */
    enableClusterIstio?: pulumi.Input<boolean>;
    /**
     * Enable project network isolation (bool)
     */
    enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
     */
    fleetAgentDeploymentCustomizations?: pulumi.Input<pulumi.Input<inputs.ClusterFleetAgentDeploymentCustomization>[]>;
    /**
     * Fleet workspace name (string)
     */
    fleetWorkspaceName?: pulumi.Input<string>;
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    gkeConfig?: pulumi.Input<inputs.ClusterGkeConfig>;
    /**
     * The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 and above (list maxitems:1)
     */
    gkeConfigV2?: pulumi.Input<inputs.ClusterGkeConfigV2>;
    /**
     * The imported configuration for generic imported Clusters. Conflicts with `aksConfig`,`aksConfigV2`, `eksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `rkeConfig`, `rke2Config` and `k3sConfig` (list maxitems:1)
     */
    importedConfig?: pulumi.Input<inputs.ClusterImportedConfig>;
    /**
     * (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
     */
    istioEnabled?: pulumi.Input<boolean>;
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
     */
    k3sConfig?: pulumi.Input<inputs.ClusterK3sConfig>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `clusterAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected` (string)
     */
    kubeConfig?: pulumi.Input<string>;
    /**
     * Labels for the Cluster (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Cluster (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    okeConfig?: pulumi.Input<inputs.ClusterOkeConfig>;
    /**
     * The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    rke2Config?: pulumi.Input<inputs.ClusterRke2Config>;
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
     */
    rkeConfig?: pulumi.Input<inputs.ClusterRkeConfig>;
    /**
     * (Computed) System project ID for the cluster (string)
     */
    systemProjectId?: pulumi.Input<string>;
    /**
     * Windows preferred cluster. Default: `false` (bool)
     */
    windowsPreferedCluster?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
     */
    agentEnvVars?: pulumi.Input<pulumi.Input<inputs.ClusterAgentEnvVar>[]>;
    /**
     * The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    aksConfig?: pulumi.Input<inputs.ClusterAksConfig>;
    /**
     * The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    aksConfigV2?: pulumi.Input<inputs.ClusterAksConfigV2>;
    /**
     * Annotations for the Cluster (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
     */
    clusterAgentDeploymentCustomizations?: pulumi.Input<pulumi.Input<inputs.ClusterClusterAgentDeploymentCustomization>[]>;
    /**
     * Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
     */
    clusterAuthEndpoint?: pulumi.Input<inputs.ClusterClusterAuthEndpoint>;
    /**
     * Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
     */
    clusterTemplateAnswers?: pulumi.Input<inputs.ClusterClusterTemplateAnswers>;
    /**
     * Cluster template ID. For Rancher v2.3.x and above (string)
     */
    clusterTemplateId?: pulumi.Input<string>;
    /**
     * Cluster template questions. For Rancher v2.3.x and above (list)
     */
    clusterTemplateQuestions?: pulumi.Input<pulumi.Input<inputs.ClusterClusterTemplateQuestion>[]>;
    /**
     * Cluster template revision ID. For Rancher v2.3.x and above (string)
     */
    clusterTemplateRevisionId?: pulumi.Input<string>;
    /**
     * The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)
     */
    defaultPodSecurityAdmissionConfigurationTemplateName?: pulumi.Input<string>;
    /**
     * The description for Cluster (string)
     */
    description?: pulumi.Input<string>;
    /**
     * Desired agent image. For Rancher v2.3.x and above (string)
     */
    desiredAgentImage?: pulumi.Input<string>;
    /**
     * Desired auth image. For Rancher v2.3.x and above (string)
     */
    desiredAuthImage?: pulumi.Input<string>;
    /**
     * Desired auth image. For Rancher v2.3.x and above (string)
     */
    dockerRootDir?: pulumi.Input<string>;
    /**
     * (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
     */
    driver?: pulumi.Input<string>;
    /**
     * The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    eksConfig?: pulumi.Input<inputs.ClusterEksConfig>;
    /**
     * The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x and above (list maxitems:1)
     */
    eksConfigV2?: pulumi.Input<inputs.ClusterEksConfigV2>;
    /**
     * Enable project network isolation (bool)
     */
    enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
     */
    fleetAgentDeploymentCustomizations?: pulumi.Input<pulumi.Input<inputs.ClusterFleetAgentDeploymentCustomization>[]>;
    /**
     * Fleet workspace name (string)
     */
    fleetWorkspaceName?: pulumi.Input<string>;
    /**
     * The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    gkeConfig?: pulumi.Input<inputs.ClusterGkeConfig>;
    /**
     * The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 and above (list maxitems:1)
     */
    gkeConfigV2?: pulumi.Input<inputs.ClusterGkeConfigV2>;
    /**
     * The imported configuration for generic imported Clusters. Conflicts with `aksConfig`,`aksConfigV2`, `eksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `rkeConfig`, `rke2Config` and `k3sConfig` (list maxitems:1)
     */
    importedConfig?: pulumi.Input<inputs.ClusterImportedConfig>;
    /**
     * The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
     */
    k3sConfig?: pulumi.Input<inputs.ClusterK3sConfig>;
    /**
     * Labels for the Cluster (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Cluster (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    okeConfig?: pulumi.Input<inputs.ClusterOkeConfig>;
    /**
     * The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
     */
    rke2Config?: pulumi.Input<inputs.ClusterRke2Config>;
    /**
     * The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
     */
    rkeConfig?: pulumi.Input<inputs.ClusterRkeConfig>;
    /**
     * Windows preferred cluster. Default: `false` (bool)
     */
    windowsPreferedCluster?: pulumi.Input<boolean>;
}
