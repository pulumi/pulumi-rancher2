// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Rancher v2 Cluster v2 resource. This can be used to create RKE2 and K3S Clusters for Rancher v2 environments and retrieve their information. This resource is supported as tech preview from Rancher v2.6.0 and above.
 *
 * ## Example Usage
 * ### Creating Rancher v2 custom cluster v2
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * // Create a new rancher v2 K3S custom Cluster v2
 * const foo = new rancher2.ClusterV2("foo", {
 *     defaultClusterRoleForProjectMembers: "user",
 *     enableNetworkPolicy: false,
 *     fleetNamespace: "fleet-ns",
 *     kubernetesVersion: "v1.21.4+k3s1",
 * });
 * ```
 *
 * **Note** Once created, get the node command from `rancher2_cluster_v2.foo.cluster_registration_token`
 *
 * ## Import
 *
 * Clusters v2 can be imported using the Rancher Cluster v2 ID, that is in the form &lt;FLEET_NAMESPACE&gt;/&lt;CLUSTER_NAME&gt;
 *
 * ```sh
 *  $ pulumi import rancher2:index/clusterV2:ClusterV2 foo &lt;FLEET_NAMESPACE&gt;/&lt;CLUSTER_NAME&gt;
 * ```
 */
export class ClusterV2 extends pulumi.CustomResource {
    /**
     * Get an existing ClusterV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterV2State, opts?: pulumi.CustomResourceOptions): ClusterV2 {
        return new ClusterV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/clusterV2:ClusterV2';

    /**
     * Returns true if the given object is an instance of ClusterV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterV2.__pulumiType;
    }

    /**
     * Optional Agent Env Vars for Rancher agent (list)
     */
    public readonly agentEnvVars!: pulumi.Output<outputs.ClusterV2AgentEnvVar[] | undefined>;
    /**
     * Annotations for cluster registration token object (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * Cluster V2 cloud credential secret name (string)
     */
    public readonly cloudCredentialSecretName!: pulumi.Output<string | undefined>;
    /**
     * (Computed/Sensitive) Cluster Registration Token generated for the cluster v2 (list maxitems:1)
     */
    public /*out*/ readonly clusterRegistrationToken!: pulumi.Output<outputs.ClusterV2ClusterRegistrationToken>;
    /**
     * (Computed) Cluster v1 id for cluster v2. (e.g to be used with `rancher2Sync`) (string)
     */
    public /*out*/ readonly clusterV1Id!: pulumi.Output<string>;
    /**
     * Cluster V2 default cluster role for project members (string)
     */
    public readonly defaultClusterRoleForProjectMembers!: pulumi.Output<string | undefined>;
    /**
     * Cluster V2 default pod security policy template name (string)
     */
    public readonly defaultPodSecurityPolicyTemplateName!: pulumi.Output<string | undefined>;
    /**
     * Enable k8s network policy at Cluster V2 (bool)
     */
    public readonly enableNetworkPolicy!: pulumi.Output<boolean>;
    /**
     * The fleet namespace of the Cluster v2. Default: `\"fleet-default\"` (string)
     */
    public readonly fleetNamespace!: pulumi.Output<string | undefined>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster v2 (string)
     */
    public /*out*/ readonly kubeConfig!: pulumi.Output<string>;
    /**
     * The kubernetes version of the Cluster v2 (list maxitems:1)
     */
    public readonly kubernetesVersion!: pulumi.Output<string>;
    /**
     * Labels for cluster registration token object (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * Name of cluster registration token (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Computed) Cluster v2 k8s resource version (string)
     */
    public /*out*/ readonly resourceVersion!: pulumi.Output<string>;
    /**
     * The RKE configuration for `k3s` and `rke2` Clusters v2. (list maxitems:1)
     */
    public readonly rkeConfig!: pulumi.Output<outputs.ClusterV2RkeConfig>;

    /**
     * Create a ClusterV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterV2Args | ClusterV2State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterV2State | undefined;
            inputs["agentEnvVars"] = state ? state.agentEnvVars : undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["cloudCredentialSecretName"] = state ? state.cloudCredentialSecretName : undefined;
            inputs["clusterRegistrationToken"] = state ? state.clusterRegistrationToken : undefined;
            inputs["clusterV1Id"] = state ? state.clusterV1Id : undefined;
            inputs["defaultClusterRoleForProjectMembers"] = state ? state.defaultClusterRoleForProjectMembers : undefined;
            inputs["defaultPodSecurityPolicyTemplateName"] = state ? state.defaultPodSecurityPolicyTemplateName : undefined;
            inputs["enableNetworkPolicy"] = state ? state.enableNetworkPolicy : undefined;
            inputs["fleetNamespace"] = state ? state.fleetNamespace : undefined;
            inputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            inputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceVersion"] = state ? state.resourceVersion : undefined;
            inputs["rkeConfig"] = state ? state.rkeConfig : undefined;
        } else {
            const args = argsOrState as ClusterV2Args | undefined;
            if ((!args || args.kubernetesVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubernetesVersion'");
            }
            inputs["agentEnvVars"] = args ? args.agentEnvVars : undefined;
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["cloudCredentialSecretName"] = args ? args.cloudCredentialSecretName : undefined;
            inputs["defaultClusterRoleForProjectMembers"] = args ? args.defaultClusterRoleForProjectMembers : undefined;
            inputs["defaultPodSecurityPolicyTemplateName"] = args ? args.defaultPodSecurityPolicyTemplateName : undefined;
            inputs["enableNetworkPolicy"] = args ? args.enableNetworkPolicy : undefined;
            inputs["fleetNamespace"] = args ? args.fleetNamespace : undefined;
            inputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rkeConfig"] = args ? args.rkeConfig : undefined;
            inputs["clusterRegistrationToken"] = undefined /*out*/;
            inputs["clusterV1Id"] = undefined /*out*/;
            inputs["kubeConfig"] = undefined /*out*/;
            inputs["resourceVersion"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ClusterV2.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterV2 resources.
 */
export interface ClusterV2State {
    /**
     * Optional Agent Env Vars for Rancher agent (list)
     */
    readonly agentEnvVars?: pulumi.Input<pulumi.Input<inputs.ClusterV2AgentEnvVar>[]>;
    /**
     * Annotations for cluster registration token object (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * Cluster V2 cloud credential secret name (string)
     */
    readonly cloudCredentialSecretName?: pulumi.Input<string>;
    /**
     * (Computed/Sensitive) Cluster Registration Token generated for the cluster v2 (list maxitems:1)
     */
    readonly clusterRegistrationToken?: pulumi.Input<inputs.ClusterV2ClusterRegistrationToken>;
    /**
     * (Computed) Cluster v1 id for cluster v2. (e.g to be used with `rancher2Sync`) (string)
     */
    readonly clusterV1Id?: pulumi.Input<string>;
    /**
     * Cluster V2 default cluster role for project members (string)
     */
    readonly defaultClusterRoleForProjectMembers?: pulumi.Input<string>;
    /**
     * Cluster V2 default pod security policy template name (string)
     */
    readonly defaultPodSecurityPolicyTemplateName?: pulumi.Input<string>;
    /**
     * Enable k8s network policy at Cluster V2 (bool)
     */
    readonly enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * The fleet namespace of the Cluster v2. Default: `\"fleet-default\"` (string)
     */
    readonly fleetNamespace?: pulumi.Input<string>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster v2 (string)
     */
    readonly kubeConfig?: pulumi.Input<string>;
    /**
     * The kubernetes version of the Cluster v2 (list maxitems:1)
     */
    readonly kubernetesVersion?: pulumi.Input<string>;
    /**
     * Labels for cluster registration token object (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of cluster registration token (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * (Computed) Cluster v2 k8s resource version (string)
     */
    readonly resourceVersion?: pulumi.Input<string>;
    /**
     * The RKE configuration for `k3s` and `rke2` Clusters v2. (list maxitems:1)
     */
    readonly rkeConfig?: pulumi.Input<inputs.ClusterV2RkeConfig>;
}

/**
 * The set of arguments for constructing a ClusterV2 resource.
 */
export interface ClusterV2Args {
    /**
     * Optional Agent Env Vars for Rancher agent (list)
     */
    readonly agentEnvVars?: pulumi.Input<pulumi.Input<inputs.ClusterV2AgentEnvVar>[]>;
    /**
     * Annotations for cluster registration token object (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * Cluster V2 cloud credential secret name (string)
     */
    readonly cloudCredentialSecretName?: pulumi.Input<string>;
    /**
     * Cluster V2 default cluster role for project members (string)
     */
    readonly defaultClusterRoleForProjectMembers?: pulumi.Input<string>;
    /**
     * Cluster V2 default pod security policy template name (string)
     */
    readonly defaultPodSecurityPolicyTemplateName?: pulumi.Input<string>;
    /**
     * Enable k8s network policy at Cluster V2 (bool)
     */
    readonly enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * The fleet namespace of the Cluster v2. Default: `\"fleet-default\"` (string)
     */
    readonly fleetNamespace?: pulumi.Input<string>;
    /**
     * The kubernetes version of the Cluster v2 (list maxitems:1)
     */
    readonly kubernetesVersion: pulumi.Input<string>;
    /**
     * Labels for cluster registration token object (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * Name of cluster registration token (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The RKE configuration for `k3s` and `rke2` Clusters v2. (list maxitems:1)
     */
    readonly rkeConfig?: pulumi.Input<inputs.ClusterV2RkeConfig>;
}
