// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * Clusters v2 can be imported using the Rancher Cluster v2 ID, that is in the form &lt;FLEET_NAMESPACE&gt;/&lt;CLUSTER_NAME&gt;
 *
 * ```sh
 * $ pulumi import rancher2:index/clusterV2:ClusterV2 foo <FLEET_NAMESPACE>/<CLUSTER_NAME>
 * ```
 */
export class ClusterV2 extends pulumi.CustomResource {
    /**
     * Get an existing ClusterV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterV2State, opts?: pulumi.CustomResourceOptions): ClusterV2 {
        return new ClusterV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/clusterV2:ClusterV2';

    /**
     * Returns true if the given object is an instance of ClusterV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterV2.__pulumiType;
    }

    /**
     * Agent env vars is a list of additional environment variables to be appended to the `cattle-cluster-agent` and `fleet-agent` deployment, and the plan for the [system upgrade controller](https://github.com/rancher/system-upgrade-controller) to upgrade nodes.
     */
    public readonly agentEnvVars!: pulumi.Output<outputs.ClusterV2AgentEnvVar[] | undefined>;
    /**
     * Annotations for the Cluster.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * Cloud credential secret name is the secret to be used when a cloud credential secret name is not specified at the machine pool level.
     */
    public readonly cloudCredentialSecretName!: pulumi.Output<string | undefined>;
    /**
     * Cluster agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `cattle-cluster-agent` deployment. This argument is available in Rancher v2.7.5 and above.
     */
    public readonly clusterAgentDeploymentCustomizations!: pulumi.Output<outputs.ClusterV2ClusterAgentDeploymentCustomization[] | undefined>;
    /**
     * (Computed, sensitive, list, max length: 1) Cluster Registration Token generated for the cluster.
     */
    public /*out*/ readonly clusterRegistrationToken!: pulumi.Output<outputs.ClusterV2ClusterRegistrationToken>;
    /**
     * (Computed, string) Cluster v1 id for cluster v2. (e.g. to be used with `rancher2Sync`).
     */
    public /*out*/ readonly clusterV1Id!: pulumi.Output<string>;
    /**
     * Default cluster role for project members.
     */
    public readonly defaultClusterRoleForProjectMembers!: pulumi.Output<string | undefined>;
    /**
     * The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above.
     */
    public readonly defaultPodSecurityAdmissionConfigurationTemplateName!: pulumi.Output<string | undefined>;
    /**
     * Default pod security policy template name specifies the default PSP for the cluster. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/create-pod-security-policies).
     */
    public readonly defaultPodSecurityPolicyTemplateName!: pulumi.Output<string | undefined>;
    /**
     * Enable k8s network policy on the cluster.
     */
    public readonly enableNetworkPolicy!: pulumi.Output<boolean>;
    /**
     * Fleet agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `fleet-agent` deployment. The argument is available in Rancher v2.7.5 and above.
     */
    public readonly fleetAgentDeploymentCustomizations!: pulumi.Output<outputs.ClusterV2FleetAgentDeploymentCustomization[] | undefined>;
    /**
     * Fleet namespace is the namespace where the cluster is to create in the local cluster. It is recommended to leave it as the default value.
     */
    public readonly fleetNamespace!: pulumi.Output<string | undefined>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster. Note: When the cluster has `localAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected`.
     */
    public /*out*/ readonly kubeConfig!: pulumi.Output<string>;
    /**
     * The RKE2 or K3s version for the cluster.
     */
    public readonly kubernetesVersion!: pulumi.Output<string>;
    /**
     * Labels for the Cluster.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Local auth endpoint configures the Authorized Cluster Endpoint (ACE) which can be used to directly access the Kubernetes API server, without requiring communication through Rancher. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/register-existing-clusters#authorized-cluster-endpoint-support-for-rke2-and-k3s-clusters).
     */
    public readonly localAuthEndpoint!: pulumi.Output<outputs.ClusterV2LocalAuthEndpoint | undefined>;
    /**
     * The name of the cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Computed, string) Cluster's k8s resource version.
     */
    public /*out*/ readonly resourceVersion!: pulumi.Output<string>;
    /**
     * The RKE configuration for the cluster.
     */
    public readonly rkeConfig!: pulumi.Output<outputs.ClusterV2RkeConfig>;

    /**
     * Create a ClusterV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterV2Args | ClusterV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterV2State | undefined;
            resourceInputs["agentEnvVars"] = state ? state.agentEnvVars : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["cloudCredentialSecretName"] = state ? state.cloudCredentialSecretName : undefined;
            resourceInputs["clusterAgentDeploymentCustomizations"] = state ? state.clusterAgentDeploymentCustomizations : undefined;
            resourceInputs["clusterRegistrationToken"] = state ? state.clusterRegistrationToken : undefined;
            resourceInputs["clusterV1Id"] = state ? state.clusterV1Id : undefined;
            resourceInputs["defaultClusterRoleForProjectMembers"] = state ? state.defaultClusterRoleForProjectMembers : undefined;
            resourceInputs["defaultPodSecurityAdmissionConfigurationTemplateName"] = state ? state.defaultPodSecurityAdmissionConfigurationTemplateName : undefined;
            resourceInputs["defaultPodSecurityPolicyTemplateName"] = state ? state.defaultPodSecurityPolicyTemplateName : undefined;
            resourceInputs["enableNetworkPolicy"] = state ? state.enableNetworkPolicy : undefined;
            resourceInputs["fleetAgentDeploymentCustomizations"] = state ? state.fleetAgentDeploymentCustomizations : undefined;
            resourceInputs["fleetNamespace"] = state ? state.fleetNamespace : undefined;
            resourceInputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            resourceInputs["kubernetesVersion"] = state ? state.kubernetesVersion : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["localAuthEndpoint"] = state ? state.localAuthEndpoint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceVersion"] = state ? state.resourceVersion : undefined;
            resourceInputs["rkeConfig"] = state ? state.rkeConfig : undefined;
        } else {
            const args = argsOrState as ClusterV2Args | undefined;
            if ((!args || args.kubernetesVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubernetesVersion'");
            }
            resourceInputs["agentEnvVars"] = args ? args.agentEnvVars : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["cloudCredentialSecretName"] = args ? args.cloudCredentialSecretName : undefined;
            resourceInputs["clusterAgentDeploymentCustomizations"] = args ? args.clusterAgentDeploymentCustomizations : undefined;
            resourceInputs["defaultClusterRoleForProjectMembers"] = args ? args.defaultClusterRoleForProjectMembers : undefined;
            resourceInputs["defaultPodSecurityAdmissionConfigurationTemplateName"] = args ? args.defaultPodSecurityAdmissionConfigurationTemplateName : undefined;
            resourceInputs["defaultPodSecurityPolicyTemplateName"] = args ? args.defaultPodSecurityPolicyTemplateName : undefined;
            resourceInputs["enableNetworkPolicy"] = args ? args.enableNetworkPolicy : undefined;
            resourceInputs["fleetAgentDeploymentCustomizations"] = args ? args.fleetAgentDeploymentCustomizations : undefined;
            resourceInputs["fleetNamespace"] = args ? args.fleetNamespace : undefined;
            resourceInputs["kubernetesVersion"] = args ? args.kubernetesVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["localAuthEndpoint"] = args ? args.localAuthEndpoint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rkeConfig"] = args ? args.rkeConfig : undefined;
            resourceInputs["clusterRegistrationToken"] = undefined /*out*/;
            resourceInputs["clusterV1Id"] = undefined /*out*/;
            resourceInputs["kubeConfig"] = undefined /*out*/;
            resourceInputs["resourceVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clusterRegistrationToken", "kubeConfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ClusterV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterV2 resources.
 */
export interface ClusterV2State {
    /**
     * Agent env vars is a list of additional environment variables to be appended to the `cattle-cluster-agent` and `fleet-agent` deployment, and the plan for the [system upgrade controller](https://github.com/rancher/system-upgrade-controller) to upgrade nodes.
     */
    agentEnvVars?: pulumi.Input<pulumi.Input<inputs.ClusterV2AgentEnvVar>[]>;
    /**
     * Annotations for the Cluster.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cloud credential secret name is the secret to be used when a cloud credential secret name is not specified at the machine pool level.
     */
    cloudCredentialSecretName?: pulumi.Input<string>;
    /**
     * Cluster agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `cattle-cluster-agent` deployment. This argument is available in Rancher v2.7.5 and above.
     */
    clusterAgentDeploymentCustomizations?: pulumi.Input<pulumi.Input<inputs.ClusterV2ClusterAgentDeploymentCustomization>[]>;
    /**
     * (Computed, sensitive, list, max length: 1) Cluster Registration Token generated for the cluster.
     */
    clusterRegistrationToken?: pulumi.Input<inputs.ClusterV2ClusterRegistrationToken>;
    /**
     * (Computed, string) Cluster v1 id for cluster v2. (e.g. to be used with `rancher2Sync`).
     */
    clusterV1Id?: pulumi.Input<string>;
    /**
     * Default cluster role for project members.
     */
    defaultClusterRoleForProjectMembers?: pulumi.Input<string>;
    /**
     * The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above.
     */
    defaultPodSecurityAdmissionConfigurationTemplateName?: pulumi.Input<string>;
    /**
     * Default pod security policy template name specifies the default PSP for the cluster. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/create-pod-security-policies).
     */
    defaultPodSecurityPolicyTemplateName?: pulumi.Input<string>;
    /**
     * Enable k8s network policy on the cluster.
     */
    enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * Fleet agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `fleet-agent` deployment. The argument is available in Rancher v2.7.5 and above.
     */
    fleetAgentDeploymentCustomizations?: pulumi.Input<pulumi.Input<inputs.ClusterV2FleetAgentDeploymentCustomization>[]>;
    /**
     * Fleet namespace is the namespace where the cluster is to create in the local cluster. It is recommended to leave it as the default value.
     */
    fleetNamespace?: pulumi.Input<string>;
    /**
     * (Computed/Sensitive) Kube Config generated for the cluster. Note: When the cluster has `localAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected`.
     */
    kubeConfig?: pulumi.Input<string>;
    /**
     * The RKE2 or K3s version for the cluster.
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Labels for the Cluster.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Local auth endpoint configures the Authorized Cluster Endpoint (ACE) which can be used to directly access the Kubernetes API server, without requiring communication through Rancher. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/register-existing-clusters#authorized-cluster-endpoint-support-for-rke2-and-k3s-clusters).
     */
    localAuthEndpoint?: pulumi.Input<inputs.ClusterV2LocalAuthEndpoint>;
    /**
     * The name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * (Computed, string) Cluster's k8s resource version.
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * The RKE configuration for the cluster.
     */
    rkeConfig?: pulumi.Input<inputs.ClusterV2RkeConfig>;
}

/**
 * The set of arguments for constructing a ClusterV2 resource.
 */
export interface ClusterV2Args {
    /**
     * Agent env vars is a list of additional environment variables to be appended to the `cattle-cluster-agent` and `fleet-agent` deployment, and the plan for the [system upgrade controller](https://github.com/rancher/system-upgrade-controller) to upgrade nodes.
     */
    agentEnvVars?: pulumi.Input<pulumi.Input<inputs.ClusterV2AgentEnvVar>[]>;
    /**
     * Annotations for the Cluster.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cloud credential secret name is the secret to be used when a cloud credential secret name is not specified at the machine pool level.
     */
    cloudCredentialSecretName?: pulumi.Input<string>;
    /**
     * Cluster agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `cattle-cluster-agent` deployment. This argument is available in Rancher v2.7.5 and above.
     */
    clusterAgentDeploymentCustomizations?: pulumi.Input<pulumi.Input<inputs.ClusterV2ClusterAgentDeploymentCustomization>[]>;
    /**
     * Default cluster role for project members.
     */
    defaultClusterRoleForProjectMembers?: pulumi.Input<string>;
    /**
     * The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above.
     */
    defaultPodSecurityAdmissionConfigurationTemplateName?: pulumi.Input<string>;
    /**
     * Default pod security policy template name specifies the default PSP for the cluster. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/create-pod-security-policies).
     */
    defaultPodSecurityPolicyTemplateName?: pulumi.Input<string>;
    /**
     * Enable k8s network policy on the cluster.
     */
    enableNetworkPolicy?: pulumi.Input<boolean>;
    /**
     * Fleet agent deployment customization specifies the additional tolerations, new affinity rules, and new resource requirements on the `fleet-agent` deployment. The argument is available in Rancher v2.7.5 and above.
     */
    fleetAgentDeploymentCustomizations?: pulumi.Input<pulumi.Input<inputs.ClusterV2FleetAgentDeploymentCustomization>[]>;
    /**
     * Fleet namespace is the namespace where the cluster is to create in the local cluster. It is recommended to leave it as the default value.
     */
    fleetNamespace?: pulumi.Input<string>;
    /**
     * The RKE2 or K3s version for the cluster.
     */
    kubernetesVersion: pulumi.Input<string>;
    /**
     * Labels for the Cluster.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Local auth endpoint configures the Authorized Cluster Endpoint (ACE) which can be used to directly access the Kubernetes API server, without requiring communication through Rancher. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/register-existing-clusters#authorized-cluster-endpoint-support-for-rke2-and-k3s-clusters).
     */
    localAuthEndpoint?: pulumi.Input<inputs.ClusterV2LocalAuthEndpoint>;
    /**
     * The name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The RKE configuration for the cluster.
     */
    rkeConfig?: pulumi.Input<inputs.ClusterV2RkeConfig>;
}
