// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Rancher App v2 resource. This can be used to manage helm charts for Rancher v2 environments and retrieve their information. App v2 resource is available at Rancher v2.5.x and above.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 * import * from "fs";
 *
 * // Create a new Rancher2 App V2 using
 * const foo = new rancher2.AppV2("foo", {
 *     clusterId: "<CLUSTER_ID>",
 *     namespace: "cattle-monitoring-system",
 *     repoName: "rancher-charts",
 *     chartName: "rancher-monitoring",
 *     chartVersion: "9.4.200",
 *     values: fs.readFileSync("values.yaml"),
 * });
 * ```
 *
 * ## Import
 *
 * V2 apps can be imported using the Rancher cluster ID and App V2 name.
 *
 * ```sh
 *  $ pulumi import rancher2:index/appV2:AppV2 foo &lt;CLUSTER_ID&gt;.&lt;APP_V2_NAME&gt;
 * ```
 */
export class AppV2 extends pulumi.CustomResource {
    /**
     * Get an existing AppV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppV2State, opts?: pulumi.CustomResourceOptions): AppV2 {
        return new AppV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/appV2:AppV2';

    /**
     * Returns true if the given object is an instance of AppV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppV2.__pulumiType;
    }

    /**
     * Annotations for the app v2 (map)
     */
    public readonly annotations!: pulumi.Output<{[key: string]: any}>;
    /**
     * The app v2 chart name (string)
     */
    public readonly chartName!: pulumi.Output<string>;
    /**
     * The app v2 chart version (string)
     */
    public readonly chartVersion!: pulumi.Output<string | undefined>;
    /**
     * Cleanup app v2 on failed chart upgrade. Default: `false` (bool)
     */
    public readonly cleanupOnFail!: pulumi.Output<boolean | undefined>;
    /**
     * The cluster id of the app (string)
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * (Computed) The cluster name of the app (string)
     */
    public /*out*/ readonly clusterName!: pulumi.Output<string>;
    /**
     * Disable app v2 chart hooks. Default: `false` (bool)
     */
    public readonly disableHooks!: pulumi.Output<boolean | undefined>;
    /**
     * Disable app V2 Open API Validation. Default: `false` (bool)
     */
    public readonly disableOpenApiValidation!: pulumi.Output<boolean | undefined>;
    /**
     * Force app V2 chart upgrade. Default: `false` (bool)
     */
    public readonly forceUpgrade!: pulumi.Output<boolean | undefined>;
    /**
     * Labels for the app v2 (map)
     */
    public readonly labels!: pulumi.Output<{[key: string]: any}>;
    /**
     * The name of the app v2 (string)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace of the app v2 (string)
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Deploy the app v2 within project ID (string)
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * Repo name (string)
     */
    public readonly repoName!: pulumi.Output<string>;
    /**
     * The app v2 values yaml. Yaml format is required (string)
     */
    public readonly values!: pulumi.Output<string | undefined>;
    /**
     * Wait until app is deployed. Default: `false` (bool)
     */
    public readonly wait!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AppV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppV2Args | AppV2State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AppV2State | undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["chartName"] = state ? state.chartName : undefined;
            inputs["chartVersion"] = state ? state.chartVersion : undefined;
            inputs["cleanupOnFail"] = state ? state.cleanupOnFail : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["disableHooks"] = state ? state.disableHooks : undefined;
            inputs["disableOpenApiValidation"] = state ? state.disableOpenApiValidation : undefined;
            inputs["forceUpgrade"] = state ? state.forceUpgrade : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespace"] = state ? state.namespace : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["repoName"] = state ? state.repoName : undefined;
            inputs["values"] = state ? state.values : undefined;
            inputs["wait"] = state ? state.wait : undefined;
        } else {
            const args = argsOrState as AppV2Args | undefined;
            if (!args || args.chartName === undefined) {
                throw new Error("Missing required property 'chartName'");
            }
            if (!args || args.clusterId === undefined) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (!args || args.namespace === undefined) {
                throw new Error("Missing required property 'namespace'");
            }
            if (!args || args.repoName === undefined) {
                throw new Error("Missing required property 'repoName'");
            }
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["chartName"] = args ? args.chartName : undefined;
            inputs["chartVersion"] = args ? args.chartVersion : undefined;
            inputs["cleanupOnFail"] = args ? args.cleanupOnFail : undefined;
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["disableHooks"] = args ? args.disableHooks : undefined;
            inputs["disableOpenApiValidation"] = args ? args.disableOpenApiValidation : undefined;
            inputs["forceUpgrade"] = args ? args.forceUpgrade : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["repoName"] = args ? args.repoName : undefined;
            inputs["values"] = args ? args.values : undefined;
            inputs["wait"] = args ? args.wait : undefined;
            inputs["clusterName"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AppV2.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppV2 resources.
 */
export interface AppV2State {
    /**
     * Annotations for the app v2 (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The app v2 chart name (string)
     */
    readonly chartName?: pulumi.Input<string>;
    /**
     * The app v2 chart version (string)
     */
    readonly chartVersion?: pulumi.Input<string>;
    /**
     * Cleanup app v2 on failed chart upgrade. Default: `false` (bool)
     */
    readonly cleanupOnFail?: pulumi.Input<boolean>;
    /**
     * The cluster id of the app (string)
     */
    readonly clusterId?: pulumi.Input<string>;
    /**
     * (Computed) The cluster name of the app (string)
     */
    readonly clusterName?: pulumi.Input<string>;
    /**
     * Disable app v2 chart hooks. Default: `false` (bool)
     */
    readonly disableHooks?: pulumi.Input<boolean>;
    /**
     * Disable app V2 Open API Validation. Default: `false` (bool)
     */
    readonly disableOpenApiValidation?: pulumi.Input<boolean>;
    /**
     * Force app V2 chart upgrade. Default: `false` (bool)
     */
    readonly forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Labels for the app v2 (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the app v2 (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The namespace of the app v2 (string)
     */
    readonly namespace?: pulumi.Input<string>;
    /**
     * Deploy the app v2 within project ID (string)
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * Repo name (string)
     */
    readonly repoName?: pulumi.Input<string>;
    /**
     * The app v2 values yaml. Yaml format is required (string)
     */
    readonly values?: pulumi.Input<string>;
    /**
     * Wait until app is deployed. Default: `false` (bool)
     */
    readonly wait?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AppV2 resource.
 */
export interface AppV2Args {
    /**
     * Annotations for the app v2 (map)
     */
    readonly annotations?: pulumi.Input<{[key: string]: any}>;
    /**
     * The app v2 chart name (string)
     */
    readonly chartName: pulumi.Input<string>;
    /**
     * The app v2 chart version (string)
     */
    readonly chartVersion?: pulumi.Input<string>;
    /**
     * Cleanup app v2 on failed chart upgrade. Default: `false` (bool)
     */
    readonly cleanupOnFail?: pulumi.Input<boolean>;
    /**
     * The cluster id of the app (string)
     */
    readonly clusterId: pulumi.Input<string>;
    /**
     * Disable app v2 chart hooks. Default: `false` (bool)
     */
    readonly disableHooks?: pulumi.Input<boolean>;
    /**
     * Disable app V2 Open API Validation. Default: `false` (bool)
     */
    readonly disableOpenApiValidation?: pulumi.Input<boolean>;
    /**
     * Force app V2 chart upgrade. Default: `false` (bool)
     */
    readonly forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Labels for the app v2 (map)
     */
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the app v2 (string)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The namespace of the app v2 (string)
     */
    readonly namespace: pulumi.Input<string>;
    /**
     * Deploy the app v2 within project ID (string)
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * Repo name (string)
     */
    readonly repoName: pulumi.Input<string>;
    /**
     * The app v2 values yaml. Yaml format is required (string)
     */
    readonly values?: pulumi.Input<string>;
    /**
     * Wait until app is deployed. Default: `false` (bool)
     */
    readonly wait?: pulumi.Input<boolean>;
}
