// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Rancher App v2 resource. This can be used to manage helm charts for Rancher v2 environments and retrieve their information. App v2 resource is available at Rancher v2.5.x and above.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 * import * as std from "@pulumi/std";
 *
 * // Create a new Rancher2 App V2 using
 * const foo = new rancher2.AppV2("foo", {
 *     clusterId: "<CLUSTER_ID>",
 *     name: "rancher-monitoring",
 *     namespace: "cattle-monitoring-system",
 *     repoName: "rancher-charts",
 *     chartName: "rancher-monitoring",
 *     chartVersion: "9.4.200",
 *     values: std.file({
 *         input: "values.yaml",
 *     }).then(invoke => invoke.result),
 * });
 * ```
 *
 * ### Create an App from a Helm Chart using a different registry
 *
 * The `systemDefaultRegistry` argument can override the global value at App installation. If argument is not provided, the global value for System Default Registry will be used instead.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rancher2 from "@pulumi/rancher2";
 *
 * const cisBenchmark = new rancher2.AppV2("cis_benchmark", {
 *     clusterId: "<CLUSTER_ID>",
 *     name: "rancher-cis-benchmark",
 *     namespace: "cis-operator-system",
 *     repoName: "rancher-charts",
 *     chartName: "rancher-cis-benchmark",
 *     systemDefaultRegistry: "<some.dns.here>:<PORT>",
 * });
 * ```
 *
 * ## Import
 *
 * V2 apps can be imported using the Rancher cluster ID and App V2 name, which is composed of `<namespace>/<application_name>`.
 *
 * ```sh
 * $ pulumi import rancher2:index/appV2:AppV2 foo &lt;CLUSTER_ID&gt;.&lt;APP_V2_NAME&gt;
 * ```
 */
export class AppV2 extends pulumi.CustomResource {
    /**
     * Get an existing AppV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppV2State, opts?: pulumi.CustomResourceOptions): AppV2 {
        return new AppV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rancher2:index/appV2:AppV2';

    /**
     * Returns true if the given object is an instance of AppV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppV2.__pulumiType;
    }

    /**
     * Annotations for the app v2 (map)
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string}>;
    /**
     * The app v2 chart name (string)
     */
    declare public readonly chartName: pulumi.Output<string>;
    /**
     * The app v2 chart version (string)
     */
    declare public readonly chartVersion: pulumi.Output<string>;
    /**
     * Cleanup app v2 on failed chart upgrade. Default: `false` (bool)
     */
    declare public readonly cleanupOnFail: pulumi.Output<boolean | undefined>;
    /**
     * The cluster id of the app (string)
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * (Computed) The cluster name of the app (string)
     */
    declare public /*out*/ readonly clusterName: pulumi.Output<string>;
    declare public /*out*/ readonly deploymentValues: pulumi.Output<string>;
    /**
     * Disable app v2 chart hooks. Default: `false` (bool)
     */
    declare public readonly disableHooks: pulumi.Output<boolean | undefined>;
    /**
     * Disable app V2 Open API Validation. Default: `false` (bool)
     */
    declare public readonly disableOpenApiValidation: pulumi.Output<boolean | undefined>;
    /**
     * Force app V2 chart upgrade. Default: `false` (bool)
     */
    declare public readonly forceUpgrade: pulumi.Output<boolean | undefined>;
    /**
     * Labels for the app v2 (map)
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the app v2 (string)
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The namespace of the app v2 (string)
     */
    declare public readonly namespace: pulumi.Output<string>;
    /**
     * Deploy the app v2 within project ID (string)
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Repo name (string)
     */
    declare public readonly repoName: pulumi.Output<string>;
    /**
     * System default registry providing images for app deployment (string)
     */
    declare public readonly systemDefaultRegistry: pulumi.Output<string>;
    /**
     * The app v2 values yaml. Yaml format is required (string)
     */
    declare public readonly values: pulumi.Output<string | undefined>;
    /**
     * Wait until app is deployed. Default: `true` (bool)
     */
    declare public readonly wait: pulumi.Output<boolean | undefined>;

    /**
     * Create a AppV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppV2Args | AppV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppV2State | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["chartName"] = state?.chartName;
            resourceInputs["chartVersion"] = state?.chartVersion;
            resourceInputs["cleanupOnFail"] = state?.cleanupOnFail;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["clusterName"] = state?.clusterName;
            resourceInputs["deploymentValues"] = state?.deploymentValues;
            resourceInputs["disableHooks"] = state?.disableHooks;
            resourceInputs["disableOpenApiValidation"] = state?.disableOpenApiValidation;
            resourceInputs["forceUpgrade"] = state?.forceUpgrade;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["namespace"] = state?.namespace;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["repoName"] = state?.repoName;
            resourceInputs["systemDefaultRegistry"] = state?.systemDefaultRegistry;
            resourceInputs["values"] = state?.values;
            resourceInputs["wait"] = state?.wait;
        } else {
            const args = argsOrState as AppV2Args | undefined;
            if (args?.chartName === undefined && !opts.urn) {
                throw new Error("Missing required property 'chartName'");
            }
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.namespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if (args?.repoName === undefined && !opts.urn) {
                throw new Error("Missing required property 'repoName'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["chartName"] = args?.chartName;
            resourceInputs["chartVersion"] = args?.chartVersion;
            resourceInputs["cleanupOnFail"] = args?.cleanupOnFail;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["disableHooks"] = args?.disableHooks;
            resourceInputs["disableOpenApiValidation"] = args?.disableOpenApiValidation;
            resourceInputs["forceUpgrade"] = args?.forceUpgrade;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["namespace"] = args?.namespace;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["repoName"] = args?.repoName;
            resourceInputs["systemDefaultRegistry"] = args?.systemDefaultRegistry;
            resourceInputs["values"] = args?.values;
            resourceInputs["wait"] = args?.wait;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["deploymentValues"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppV2 resources.
 */
export interface AppV2State {
    /**
     * Annotations for the app v2 (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The app v2 chart name (string)
     */
    chartName?: pulumi.Input<string>;
    /**
     * The app v2 chart version (string)
     */
    chartVersion?: pulumi.Input<string>;
    /**
     * Cleanup app v2 on failed chart upgrade. Default: `false` (bool)
     */
    cleanupOnFail?: pulumi.Input<boolean>;
    /**
     * The cluster id of the app (string)
     */
    clusterId?: pulumi.Input<string>;
    /**
     * (Computed) The cluster name of the app (string)
     */
    clusterName?: pulumi.Input<string>;
    deploymentValues?: pulumi.Input<string>;
    /**
     * Disable app v2 chart hooks. Default: `false` (bool)
     */
    disableHooks?: pulumi.Input<boolean>;
    /**
     * Disable app V2 Open API Validation. Default: `false` (bool)
     */
    disableOpenApiValidation?: pulumi.Input<boolean>;
    /**
     * Force app V2 chart upgrade. Default: `false` (bool)
     */
    forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Labels for the app v2 (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the app v2 (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the app v2 (string)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Deploy the app v2 within project ID (string)
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repo name (string)
     */
    repoName?: pulumi.Input<string>;
    /**
     * System default registry providing images for app deployment (string)
     */
    systemDefaultRegistry?: pulumi.Input<string>;
    /**
     * The app v2 values yaml. Yaml format is required (string)
     */
    values?: pulumi.Input<string>;
    /**
     * Wait until app is deployed. Default: `true` (bool)
     */
    wait?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AppV2 resource.
 */
export interface AppV2Args {
    /**
     * Annotations for the app v2 (map)
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The app v2 chart name (string)
     */
    chartName: pulumi.Input<string>;
    /**
     * The app v2 chart version (string)
     */
    chartVersion?: pulumi.Input<string>;
    /**
     * Cleanup app v2 on failed chart upgrade. Default: `false` (bool)
     */
    cleanupOnFail?: pulumi.Input<boolean>;
    /**
     * The cluster id of the app (string)
     */
    clusterId: pulumi.Input<string>;
    /**
     * Disable app v2 chart hooks. Default: `false` (bool)
     */
    disableHooks?: pulumi.Input<boolean>;
    /**
     * Disable app V2 Open API Validation. Default: `false` (bool)
     */
    disableOpenApiValidation?: pulumi.Input<boolean>;
    /**
     * Force app V2 chart upgrade. Default: `false` (bool)
     */
    forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Labels for the app v2 (map)
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the app v2 (string)
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the app v2 (string)
     */
    namespace: pulumi.Input<string>;
    /**
     * Deploy the app v2 within project ID (string)
     */
    projectId?: pulumi.Input<string>;
    /**
     * Repo name (string)
     */
    repoName: pulumi.Input<string>;
    /**
     * System default registry providing images for app deployment (string)
     */
    systemDefaultRegistry?: pulumi.Input<string>;
    /**
     * The app v2 values yaml. Yaml format is required (string)
     */
    values?: pulumi.Input<string>;
    /**
     * Wait until app is deployed. Default: `true` (bool)
     */
    wait?: pulumi.Input<boolean>;
}
