# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetAppResult:
    """
    A collection of values returned by getApp.
    """
    def __init__(__self__, annotations=None, answers=None, catalog_name=None, description=None, external_id=None, id=None, labels=None, name=None, project_id=None, revision_id=None, target_namespace=None, template_name=None, template_version=None, values_yaml=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        __self__.annotations = annotations
        """
        (Computed) Annotations for the catalog (map)
        """
        if answers and not isinstance(answers, dict):
            raise TypeError("Expected argument 'answers' to be a dict")
        __self__.answers = answers
        """
        (Computed) Answers for the app (map)
        """
        if catalog_name and not isinstance(catalog_name, str):
            raise TypeError("Expected argument 'catalog_name' to be a str")
        __self__.catalog_name = catalog_name
        """
        (Computed) Catalog name of the app (string)
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        (Computed) Description for the app (string)
        """
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        __self__.external_id = external_id
        """
        (Computed) The URL of the helm catalog app (string)
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        __self__.labels = labels
        """
        (Computed) Labels for the catalog (map)
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        if revision_id and not isinstance(revision_id, str):
            raise TypeError("Expected argument 'revision_id' to be a str")
        __self__.revision_id = revision_id
        """
        (Computed) Current revision id for the app (string)
        """
        if target_namespace and not isinstance(target_namespace, str):
            raise TypeError("Expected argument 'target_namespace' to be a str")
        __self__.target_namespace = target_namespace
        if template_name and not isinstance(template_name, str):
            raise TypeError("Expected argument 'template_name' to be a str")
        __self__.template_name = template_name
        """
        (Computed) Template name of the app (string)
        """
        if template_version and not isinstance(template_version, str):
            raise TypeError("Expected argument 'template_version' to be a str")
        __self__.template_version = template_version
        """
        (Computed) Template version of the app (string)
        """
        if values_yaml and not isinstance(values_yaml, str):
            raise TypeError("Expected argument 'values_yaml' to be a str")
        __self__.values_yaml = values_yaml
        """
        (Computed) values.yaml base64 encoded file content for the app (string)
        """
class AwaitableGetAppResult(GetAppResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppResult(
            annotations=self.annotations,
            answers=self.answers,
            catalog_name=self.catalog_name,
            description=self.description,
            external_id=self.external_id,
            id=self.id,
            labels=self.labels,
            name=self.name,
            project_id=self.project_id,
            revision_id=self.revision_id,
            target_namespace=self.target_namespace,
            template_name=self.template_name,
            template_version=self.template_version,
            values_yaml=self.values_yaml)

def get_app(annotations=None,name=None,project_id=None,target_namespace=None,opts=None):
    """
    Use this data source to retrieve information about a Rancher v2 app.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_rancher2 as rancher2

    rancher2 = rancher2.get_app(name="foo",
        project_id="<project_id>",
        target_namespace="<namespace_name>")
    ```



    :param dict annotations: (Computed) Annotations for the catalog (map)
    :param str name: The app name (string)
    :param str project_id: The id of the project where the app is deployed (string)
    :param str target_namespace: The namespace name where the app is deployed (string)
    """
    __args__ = dict()


    __args__['annotations'] = annotations
    __args__['name'] = name
    __args__['projectId'] = project_id
    __args__['targetNamespace'] = target_namespace
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('rancher2:index/getApp:getApp', __args__, opts=opts).value

    return AwaitableGetAppResult(
        annotations=__ret__.get('annotations'),
        answers=__ret__.get('answers'),
        catalog_name=__ret__.get('catalogName'),
        description=__ret__.get('description'),
        external_id=__ret__.get('externalId'),
        id=__ret__.get('id'),
        labels=__ret__.get('labels'),
        name=__ret__.get('name'),
        project_id=__ret__.get('projectId'),
        revision_id=__ret__.get('revisionId'),
        target_namespace=__ret__.get('targetNamespace'),
        template_name=__ret__.get('templateName'),
        template_version=__ret__.get('templateVersion'),
        values_yaml=__ret__.get('valuesYaml'))
