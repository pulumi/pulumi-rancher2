# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'CloudCredentialAmazonec2CredentialConfigArgs',
    'CloudCredentialAzureCredentialConfigArgs',
    'CloudCredentialDigitaloceanCredentialConfigArgs',
    'CloudCredentialGoogleCredentialConfigArgs',
    'CloudCredentialHarvesterCredentialConfigArgs',
    'CloudCredentialLinodeCredentialConfigArgs',
    'CloudCredentialOpenstackCredentialConfigArgs',
    'CloudCredentialS3CredentialConfigArgs',
    'CloudCredentialVsphereCredentialConfigArgs',
    'ClusterAgentEnvVarArgs',
    'ClusterAksConfigArgs',
    'ClusterAksConfigV2Args',
    'ClusterAksConfigV2NodePoolArgs',
    'ClusterAlertGroupRecipientArgs',
    'ClusterAlertRuleEventRuleArgs',
    'ClusterAlertRuleMetricRuleArgs',
    'ClusterAlertRuleNodeRuleArgs',
    'ClusterAlertRuleSystemServiceRuleArgs',
    'ClusterAlterGroupRecipientArgs',
    'ClusterAlterRuleEventRuleArgs',
    'ClusterAlterRuleMetricRuleArgs',
    'ClusterAlterRuleNodeRuleArgs',
    'ClusterAlterRuleSystemServiceRuleArgs',
    'ClusterClusterAgentDeploymentCustomizationArgs',
    'ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs',
    'ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs',
    'ClusterClusterAuthEndpointArgs',
    'ClusterClusterMonitoringInputArgs',
    'ClusterClusterRegistrationTokenArgs',
    'ClusterClusterTemplateAnswersArgs',
    'ClusterClusterTemplateQuestionArgs',
    'ClusterEksConfigArgs',
    'ClusterEksConfigV2Args',
    'ClusterEksConfigV2NodeGroupArgs',
    'ClusterEksConfigV2NodeGroupLaunchTemplateArgs',
    'ClusterFleetAgentDeploymentCustomizationArgs',
    'ClusterFleetAgentDeploymentCustomizationAppendTolerationArgs',
    'ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirementArgs',
    'ClusterGkeConfigArgs',
    'ClusterGkeConfigV2Args',
    'ClusterGkeConfigV2ClusterAddonsArgs',
    'ClusterGkeConfigV2IpAllocationPolicyArgs',
    'ClusterGkeConfigV2MasterAuthorizedNetworksConfigArgs',
    'ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlockArgs',
    'ClusterGkeConfigV2NodePoolArgs',
    'ClusterGkeConfigV2NodePoolAutoscalingArgs',
    'ClusterGkeConfigV2NodePoolConfigArgs',
    'ClusterGkeConfigV2NodePoolConfigTaintArgs',
    'ClusterGkeConfigV2NodePoolManagementArgs',
    'ClusterGkeConfigV2PrivateClusterConfigArgs',
    'ClusterK3sConfigArgs',
    'ClusterK3sConfigUpgradeStrategyArgs',
    'ClusterOkeConfigArgs',
    'ClusterRke2ConfigArgs',
    'ClusterRke2ConfigUpgradeStrategyArgs',
    'ClusterRkeConfigArgs',
    'ClusterRkeConfigAuthenticationArgs',
    'ClusterRkeConfigAuthorizationArgs',
    'ClusterRkeConfigBastionHostArgs',
    'ClusterRkeConfigCloudProviderArgs',
    'ClusterRkeConfigCloudProviderAwsCloudProviderArgs',
    'ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs',
    'ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs',
    'ClusterRkeConfigCloudProviderAzureCloudProviderArgs',
    'ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs',
    'ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs',
    'ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs',
    'ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs',
    'ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs',
    'ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs',
    'ClusterRkeConfigCloudProviderVsphereCloudProviderArgs',
    'ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs',
    'ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs',
    'ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs',
    'ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs',
    'ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs',
    'ClusterRkeConfigDnsArgs',
    'ClusterRkeConfigDnsLinearAutoscalerParamsArgs',
    'ClusterRkeConfigDnsNodelocalArgs',
    'ClusterRkeConfigDnsTolerationArgs',
    'ClusterRkeConfigDnsUpdateStrategyArgs',
    'ClusterRkeConfigDnsUpdateStrategyRollingUpdateArgs',
    'ClusterRkeConfigIngressArgs',
    'ClusterRkeConfigIngressTolerationArgs',
    'ClusterRkeConfigIngressUpdateStrategyArgs',
    'ClusterRkeConfigIngressUpdateStrategyRollingUpdateArgs',
    'ClusterRkeConfigMonitoringArgs',
    'ClusterRkeConfigMonitoringTolerationArgs',
    'ClusterRkeConfigMonitoringUpdateStrategyArgs',
    'ClusterRkeConfigMonitoringUpdateStrategyRollingUpdateArgs',
    'ClusterRkeConfigNetworkArgs',
    'ClusterRkeConfigNetworkAciNetworkProviderArgs',
    'ClusterRkeConfigNetworkCalicoNetworkProviderArgs',
    'ClusterRkeConfigNetworkCanalNetworkProviderArgs',
    'ClusterRkeConfigNetworkFlannelNetworkProviderArgs',
    'ClusterRkeConfigNetworkTolerationArgs',
    'ClusterRkeConfigNetworkWeaveNetworkProviderArgs',
    'ClusterRkeConfigNodeArgs',
    'ClusterRkeConfigPrivateRegistryArgs',
    'ClusterRkeConfigPrivateRegistryEcrCredentialPluginArgs',
    'ClusterRkeConfigServicesArgs',
    'ClusterRkeConfigServicesEtcdArgs',
    'ClusterRkeConfigServicesEtcdBackupConfigArgs',
    'ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs',
    'ClusterRkeConfigServicesKubeApiArgs',
    'ClusterRkeConfigServicesKubeApiAdmissionConfigurationArgs',
    'ClusterRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs',
    'ClusterRkeConfigServicesKubeApiAuditLogArgs',
    'ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs',
    'ClusterRkeConfigServicesKubeApiEventRateLimitArgs',
    'ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs',
    'ClusterRkeConfigServicesKubeControllerArgs',
    'ClusterRkeConfigServicesKubeletArgs',
    'ClusterRkeConfigServicesKubeproxyArgs',
    'ClusterRkeConfigServicesSchedulerArgs',
    'ClusterRkeConfigUpgradeStrategyArgs',
    'ClusterRkeConfigUpgradeStrategyDrainInputArgs',
    'ClusterSyncNodeArgs',
    'ClusterTemplateMemberArgs',
    'ClusterTemplateTemplateRevisionArgs',
    'ClusterTemplateTemplateRevisionClusterConfigArgs',
    'ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpointArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthenticationArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorizationArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHostArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParamsArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocalArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsTolerationArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdateArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressTolerationArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdateArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringTolerationArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdateArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkTolerationArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProviderArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigNodeArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPluginArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimitArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeControllerArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeletArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxyArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesSchedulerArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs',
    'ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInputArgs',
    'ClusterTemplateTemplateRevisionQuestionArgs',
    'ClusterV2AgentEnvVarArgs',
    'ClusterV2ClusterAgentDeploymentCustomizationArgs',
    'ClusterV2ClusterAgentDeploymentCustomizationAppendTolerationArgs',
    'ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs',
    'ClusterV2ClusterRegistrationTokenArgs',
    'ClusterV2FleetAgentDeploymentCustomizationArgs',
    'ClusterV2FleetAgentDeploymentCustomizationAppendTolerationArgs',
    'ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirementArgs',
    'ClusterV2LocalAuthEndpointArgs',
    'ClusterV2RkeConfigArgs',
    'ClusterV2RkeConfigEtcdArgs',
    'ClusterV2RkeConfigEtcdS3ConfigArgs',
    'ClusterV2RkeConfigEtcdSnapshotCreateArgs',
    'ClusterV2RkeConfigEtcdSnapshotRestoreArgs',
    'ClusterV2RkeConfigLocalAuthEndpointArgs',
    'ClusterV2RkeConfigMachinePoolArgs',
    'ClusterV2RkeConfigMachinePoolDefaultArgs',
    'ClusterV2RkeConfigMachinePoolMachineConfigArgs',
    'ClusterV2RkeConfigMachinePoolRollingUpdateArgs',
    'ClusterV2RkeConfigMachinePoolTaintArgs',
    'ClusterV2RkeConfigMachineSelectorConfigArgs',
    'ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorArgs',
    'ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionArgs',
    'ClusterV2RkeConfigRegistriesArgs',
    'ClusterV2RkeConfigRegistriesConfigArgs',
    'ClusterV2RkeConfigRegistriesMirrorArgs',
    'ClusterV2RkeConfigRotateCertificatesArgs',
    'ClusterV2RkeConfigUpgradeStrategyArgs',
    'ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs',
    'ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs',
    'EtcdBackupBackupConfigArgs',
    'EtcdBackupBackupConfigS3BackupConfigArgs',
    'GlobalDnsProviderAlidnsConfigArgs',
    'GlobalDnsProviderCloudflareConfigArgs',
    'GlobalDnsProviderRoute53ConfigArgs',
    'GlobalRoleRuleArgs',
    'MachineConfigV2Amazonec2ConfigArgs',
    'MachineConfigV2AzureConfigArgs',
    'MachineConfigV2DigitaloceanConfigArgs',
    'MachineConfigV2HarvesterConfigArgs',
    'MachineConfigV2LinodeConfigArgs',
    'MachineConfigV2OpenstackConfigArgs',
    'MachineConfigV2VsphereConfigArgs',
    'MultiClusterAppAnswerArgs',
    'MultiClusterAppMemberArgs',
    'MultiClusterAppTargetArgs',
    'MultiClusterAppUpgradeStrategyArgs',
    'MultiClusterAppUpgradeStrategyRollingUpdateArgs',
    'NamespaceContainerResourceLimitArgs',
    'NamespaceResourceQuotaArgs',
    'NamespaceResourceQuotaLimitArgs',
    'NodePoolNodeTaintArgs',
    'NodeTemplateAmazonec2ConfigArgs',
    'NodeTemplateAzureConfigArgs',
    'NodeTemplateDigitaloceanConfigArgs',
    'NodeTemplateHarvesterConfigArgs',
    'NodeTemplateHetznerConfigArgs',
    'NodeTemplateLinodeConfigArgs',
    'NodeTemplateNodeTaintArgs',
    'NodeTemplateOpennebulaConfigArgs',
    'NodeTemplateOpenstackConfigArgs',
    'NodeTemplateOutscaleConfigArgs',
    'NodeTemplateVsphereConfigArgs',
    'NotifierDingtalkConfigArgs',
    'NotifierMsteamsConfigArgs',
    'NotifierPagerdutyConfigArgs',
    'NotifierSlackConfigArgs',
    'NotifierSmtpConfigArgs',
    'NotifierWebhookConfigArgs',
    'NotifierWechatConfigArgs',
    'PodSecurityPolicyTemplateAllowedCsiDriverArgs',
    'PodSecurityPolicyTemplateAllowedFlexVolumeArgs',
    'PodSecurityPolicyTemplateAllowedHostPathArgs',
    'PodSecurityPolicyTemplateFsGroupArgs',
    'PodSecurityPolicyTemplateFsGroupRangeArgs',
    'PodSecurityPolicyTemplateHostPortArgs',
    'PodSecurityPolicyTemplateRunAsGroupArgs',
    'PodSecurityPolicyTemplateRunAsGroupRangeArgs',
    'PodSecurityPolicyTemplateRunAsUserArgs',
    'PodSecurityPolicyTemplateRunAsUserRangeArgs',
    'PodSecurityPolicyTemplateRuntimeClassArgs',
    'PodSecurityPolicyTemplateSeLinuxArgs',
    'PodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs',
    'PodSecurityPolicyTemplateSupplementalGroupArgs',
    'PodSecurityPolicyTemplateSupplementalGroupRangeArgs',
    'ProjectAlertGroupRecipientArgs',
    'ProjectAlertRuleMetricRuleArgs',
    'ProjectAlertRulePodRuleArgs',
    'ProjectAlertRuleWorkloadRuleArgs',
    'ProjectContainerResourceLimitArgs',
    'ProjectProjectMonitoringInputArgs',
    'ProjectResourceQuotaArgs',
    'ProjectResourceQuotaNamespaceDefaultLimitArgs',
    'ProjectResourceQuotaProjectLimitArgs',
    'RegistryRegistryArgs',
    'RoleTempalteRuleArgs',
    'RoleTemplateRuleArgs',
    'GetNotifierDingtalkConfigArgs',
    'GetNotifierMsteamsConfigArgs',
    'GetPodSecurityPolicyTemplateAllowedCsiDriverArgs',
    'GetPodSecurityPolicyTemplateAllowedFlexVolumeArgs',
    'GetPodSecurityPolicyTemplateAllowedHostPathArgs',
    'GetPodSecurityPolicyTemplateFsGroupArgs',
    'GetPodSecurityPolicyTemplateFsGroupRangeArgs',
    'GetPodSecurityPolicyTemplateHostPortArgs',
    'GetPodSecurityPolicyTemplateRunAsGroupArgs',
    'GetPodSecurityPolicyTemplateRunAsGroupRangeArgs',
    'GetPodSecurityPolicyTemplateRunAsUserArgs',
    'GetPodSecurityPolicyTemplateRunAsUserRangeArgs',
    'GetPodSecurityPolicyTemplateRuntimeClassArgs',
    'GetPodSecurityPolicyTemplateSeLinuxArgs',
    'GetPodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs',
    'GetPodSecurityPolicyTemplateSupplementalGroupArgs',
    'GetPodSecurityPolicyTemplateSupplementalGroupRangeArgs',
]

@pulumi.input_type
class CloudCredentialAmazonec2CredentialConfigArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 default_region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_key: AWS access key (string)
        :param pulumi.Input[str] secret_key: AWS secret key (string)
        :param pulumi.Input[str] default_region: AWS default region (string)
        """
        CloudCredentialAmazonec2CredentialConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            secret_key=secret_key,
            default_region=default_region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: pulumi.Input[str],
             secret_key: pulumi.Input[str],
             default_region: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'defaultRegion' in kwargs:
            default_region = kwargs['defaultRegion']

        _setter("access_key", access_key)
        _setter("secret_key", secret_key)
        if default_region is not None:
            _setter("default_region", default_region)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        AWS access key (string)
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        AWS secret key (string)
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="defaultRegion")
    def default_region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS default region (string)
        """
        return pulumi.get(self, "default_region")

    @default_region.setter
    def default_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_region", value)


@pulumi.input_type
class CloudCredentialAzureCredentialConfigArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 environment: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id: Azure Service Principal Account ID (string)
        :param pulumi.Input[str] client_secret: Azure Service Principal Account password (string)
        :param pulumi.Input[str] subscription_id: Azure Subscription ID (string)
        :param pulumi.Input[str] environment: Azure environment (e.g. AzurePublicCloud, AzureChinaCloud) (string)
        :param pulumi.Input[str] tenant_id: Azure Tenant ID (string)
        """
        CloudCredentialAzureCredentialConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
            client_secret=client_secret,
            subscription_id=subscription_id,
            environment=environment,
            tenant_id=tenant_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: pulumi.Input[str],
             client_secret: pulumi.Input[str],
             subscription_id: pulumi.Input[str],
             environment: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']
        if 'subscriptionId' in kwargs:
            subscription_id = kwargs['subscriptionId']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']

        _setter("client_id", client_id)
        _setter("client_secret", client_secret)
        _setter("subscription_id", subscription_id)
        if environment is not None:
            _setter("environment", environment)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Azure Service Principal Account ID (string)
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        Azure Service Principal Account password (string)
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        Azure Subscription ID (string)
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Azure environment (e.g. AzurePublicCloud, AzureChinaCloud) (string)
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Tenant ID (string)
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class CloudCredentialDigitaloceanCredentialConfigArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_token: DigitalOcean access token (string)
        """
        CloudCredentialDigitaloceanCredentialConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token=access_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessToken' in kwargs:
            access_token = kwargs['accessToken']

        _setter("access_token", access_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        """
        DigitalOcean access token (string)
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)


@pulumi.input_type
class CloudCredentialGoogleCredentialConfigArgs:
    def __init__(__self__, *,
                 auth_encoded_json: pulumi.Input[str]):
        """
        :param pulumi.Input[str] auth_encoded_json: Google auth encoded json (string)
        """
        CloudCredentialGoogleCredentialConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_encoded_json=auth_encoded_json,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_encoded_json: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authEncodedJson' in kwargs:
            auth_encoded_json = kwargs['authEncodedJson']

        _setter("auth_encoded_json", auth_encoded_json)

    @property
    @pulumi.getter(name="authEncodedJson")
    def auth_encoded_json(self) -> pulumi.Input[str]:
        """
        Google auth encoded json (string)
        """
        return pulumi.get(self, "auth_encoded_json")

    @auth_encoded_json.setter
    def auth_encoded_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_encoded_json", value)


@pulumi.input_type
class CloudCredentialHarvesterCredentialConfigArgs:
    def __init__(__self__, *,
                 cluster_type: pulumi.Input[str],
                 kubeconfig_content: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_type: Harvester Cluster Type. Supported values : `"imported" | "external"` (string)
        :param pulumi.Input[str] kubeconfig_content: Harvester Cluster KubeConfig Content (string)
        :param pulumi.Input[str] cluster_id: Imported Harvester Cluster ID (string)
        """
        CloudCredentialHarvesterCredentialConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_type=cluster_type,
            kubeconfig_content=kubeconfig_content,
            cluster_id=cluster_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_type: pulumi.Input[str],
             kubeconfig_content: pulumi.Input[str],
             cluster_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterType' in kwargs:
            cluster_type = kwargs['clusterType']
        if 'kubeconfigContent' in kwargs:
            kubeconfig_content = kwargs['kubeconfigContent']
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']

        _setter("cluster_type", cluster_type)
        _setter("kubeconfig_content", kubeconfig_content)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Input[str]:
        """
        Harvester Cluster Type. Supported values : `"imported" | "external"` (string)
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="kubeconfigContent")
    def kubeconfig_content(self) -> pulumi.Input[str]:
        """
        Harvester Cluster KubeConfig Content (string)
        """
        return pulumi.get(self, "kubeconfig_content")

    @kubeconfig_content.setter
    def kubeconfig_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubeconfig_content", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Imported Harvester Cluster ID (string)
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)


@pulumi.input_type
class CloudCredentialLinodeCredentialConfigArgs:
    def __init__(__self__, *,
                 token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] token: Linode API token (string)
        """
        CloudCredentialLinodeCredentialConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            token=token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             token: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("token", token)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        Linode API token (string)
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class CloudCredentialOpenstackCredentialConfigArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: vSphere password (string)
        """
        CloudCredentialOpenstackCredentialConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        vSphere password (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class CloudCredentialS3CredentialConfigArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 default_bucket: Optional[pulumi.Input[str]] = None,
                 default_endpoint: Optional[pulumi.Input[str]] = None,
                 default_endpoint_ca: Optional[pulumi.Input[str]] = None,
                 default_folder: Optional[pulumi.Input[str]] = None,
                 default_region: Optional[pulumi.Input[str]] = None,
                 default_skip_ssl_verify: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] access_key: AWS access key (string)
        :param pulumi.Input[str] secret_key: AWS secret key (string)
        :param pulumi.Input[str] default_bucket: AWS default bucket (string)
        :param pulumi.Input[str] default_endpoint: AWS default endpoint (string)
        :param pulumi.Input[str] default_endpoint_ca: AWS default endpoint CA (string)
        :param pulumi.Input[str] default_folder: AWS default folder (string)
        :param pulumi.Input[str] default_region: AWS default region (string)
        :param pulumi.Input[bool] default_skip_ssl_verify: AWS default skip ssl verify. Default: `false` (bool)
        """
        CloudCredentialS3CredentialConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            secret_key=secret_key,
            default_bucket=default_bucket,
            default_endpoint=default_endpoint,
            default_endpoint_ca=default_endpoint_ca,
            default_folder=default_folder,
            default_region=default_region,
            default_skip_ssl_verify=default_skip_ssl_verify,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: pulumi.Input[str],
             secret_key: pulumi.Input[str],
             default_bucket: Optional[pulumi.Input[str]] = None,
             default_endpoint: Optional[pulumi.Input[str]] = None,
             default_endpoint_ca: Optional[pulumi.Input[str]] = None,
             default_folder: Optional[pulumi.Input[str]] = None,
             default_region: Optional[pulumi.Input[str]] = None,
             default_skip_ssl_verify: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'defaultBucket' in kwargs:
            default_bucket = kwargs['defaultBucket']
        if 'defaultEndpoint' in kwargs:
            default_endpoint = kwargs['defaultEndpoint']
        if 'defaultEndpointCa' in kwargs:
            default_endpoint_ca = kwargs['defaultEndpointCa']
        if 'defaultFolder' in kwargs:
            default_folder = kwargs['defaultFolder']
        if 'defaultRegion' in kwargs:
            default_region = kwargs['defaultRegion']
        if 'defaultSkipSslVerify' in kwargs:
            default_skip_ssl_verify = kwargs['defaultSkipSslVerify']

        _setter("access_key", access_key)
        _setter("secret_key", secret_key)
        if default_bucket is not None:
            _setter("default_bucket", default_bucket)
        if default_endpoint is not None:
            _setter("default_endpoint", default_endpoint)
        if default_endpoint_ca is not None:
            _setter("default_endpoint_ca", default_endpoint_ca)
        if default_folder is not None:
            _setter("default_folder", default_folder)
        if default_region is not None:
            _setter("default_region", default_region)
        if default_skip_ssl_verify is not None:
            _setter("default_skip_ssl_verify", default_skip_ssl_verify)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        AWS access key (string)
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        AWS secret key (string)
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="defaultBucket")
    def default_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        AWS default bucket (string)
        """
        return pulumi.get(self, "default_bucket")

    @default_bucket.setter
    def default_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_bucket", value)

    @property
    @pulumi.getter(name="defaultEndpoint")
    def default_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        AWS default endpoint (string)
        """
        return pulumi.get(self, "default_endpoint")

    @default_endpoint.setter
    def default_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_endpoint", value)

    @property
    @pulumi.getter(name="defaultEndpointCa")
    def default_endpoint_ca(self) -> Optional[pulumi.Input[str]]:
        """
        AWS default endpoint CA (string)
        """
        return pulumi.get(self, "default_endpoint_ca")

    @default_endpoint_ca.setter
    def default_endpoint_ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_endpoint_ca", value)

    @property
    @pulumi.getter(name="defaultFolder")
    def default_folder(self) -> Optional[pulumi.Input[str]]:
        """
        AWS default folder (string)
        """
        return pulumi.get(self, "default_folder")

    @default_folder.setter
    def default_folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_folder", value)

    @property
    @pulumi.getter(name="defaultRegion")
    def default_region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS default region (string)
        """
        return pulumi.get(self, "default_region")

    @default_region.setter
    def default_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_region", value)

    @property
    @pulumi.getter(name="defaultSkipSslVerify")
    def default_skip_ssl_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        AWS default skip ssl verify. Default: `false` (bool)
        """
        return pulumi.get(self, "default_skip_ssl_verify")

    @default_skip_ssl_verify.setter
    def default_skip_ssl_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_skip_ssl_verify", value)


@pulumi.input_type
class CloudCredentialVsphereCredentialConfigArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 vcenter: pulumi.Input[str],
                 vcenter_port: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: vSphere password (string)
        :param pulumi.Input[str] username: vSphere username (string)
        :param pulumi.Input[str] vcenter: vSphere IP/hostname for vCenter (string)
        :param pulumi.Input[str] vcenter_port: vSphere Port for vCenter. Default `443` (string)
        """
        CloudCredentialVsphereCredentialConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
            vcenter=vcenter,
            vcenter_port=vcenter_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: pulumi.Input[str],
             username: pulumi.Input[str],
             vcenter: pulumi.Input[str],
             vcenter_port: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'vcenterPort' in kwargs:
            vcenter_port = kwargs['vcenterPort']

        _setter("password", password)
        _setter("username", username)
        _setter("vcenter", vcenter)
        if vcenter_port is not None:
            _setter("vcenter_port", vcenter_port)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        vSphere password (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        vSphere username (string)
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def vcenter(self) -> pulumi.Input[str]:
        """
        vSphere IP/hostname for vCenter (string)
        """
        return pulumi.get(self, "vcenter")

    @vcenter.setter
    def vcenter(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcenter", value)

    @property
    @pulumi.getter(name="vcenterPort")
    def vcenter_port(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere Port for vCenter. Default `443` (string)
        """
        return pulumi.get(self, "vcenter_port")

    @vcenter_port.setter
    def vcenter_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_port", value)


@pulumi.input_type
class ClusterAgentEnvVarArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[str] value: The GKE taint value (string)
        """
        ClusterAgentEnvVarArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The GKE taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterAksConfigArgs:
    def __init__(__self__, *,
                 agent_dns_prefix: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 kubernetes_version: pulumi.Input[str],
                 master_dns_prefix: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 ssh_public_key_contents: pulumi.Input[str],
                 subnet: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 virtual_network: pulumi.Input[str],
                 virtual_network_resource_group: pulumi.Input[str],
                 aad_server_app_secret: Optional[pulumi.Input[str]] = None,
                 aad_tenant_id: Optional[pulumi.Input[str]] = None,
                 add_client_app_id: Optional[pulumi.Input[str]] = None,
                 add_server_app_id: Optional[pulumi.Input[str]] = None,
                 admin_username: Optional[pulumi.Input[str]] = None,
                 agent_os_disk_size: Optional[pulumi.Input[int]] = None,
                 agent_pool_name: Optional[pulumi.Input[str]] = None,
                 agent_storage_profile: Optional[pulumi.Input[str]] = None,
                 agent_vm_size: Optional[pulumi.Input[str]] = None,
                 auth_base_url: Optional[pulumi.Input[str]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 dns_service_ip: Optional[pulumi.Input[str]] = None,
                 docker_bridge_cidr: Optional[pulumi.Input[str]] = None,
                 enable_http_application_routing: Optional[pulumi.Input[bool]] = None,
                 enable_monitoring: Optional[pulumi.Input[bool]] = None,
                 load_balancer_sku: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log_analytics_workspace: Optional[pulumi.Input[str]] = None,
                 log_analytics_workspace_resource_group: Optional[pulumi.Input[str]] = None,
                 max_pods: Optional[pulumi.Input[int]] = None,
                 network_plugin: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[str]] = None,
                 pod_cidr: Optional[pulumi.Input[str]] = None,
                 service_cidr: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] agent_dns_prefix: DNS prefix to be used to create the FQDN for the agent pool (string)
        :param pulumi.Input[str] client_id: Azure client ID to use (string)
        :param pulumi.Input[str] client_secret: Azure client secret associated with the \\"client id\\" (string)
        :param pulumi.Input[str] kubernetes_version: The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        :param pulumi.Input[str] master_dns_prefix: DNS prefix to use the Kubernetes cluster control pane (string)
        :param pulumi.Input[str] resource_group: The AKS resource group (string)
        :param pulumi.Input[str] ssh_public_key_contents: Contents of the SSH public key used to authenticate with Linux hosts (string)
        :param pulumi.Input[str] subnet: The AKS subnet (string)
        :param pulumi.Input[str] subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        :param pulumi.Input[str] tenant_id: Azure tenant ID to use (string)
        :param pulumi.Input[str] virtual_network: The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        :param pulumi.Input[str] virtual_network_resource_group: The AKS virtual network resource group (string)
        :param pulumi.Input[str] aad_server_app_secret: The secret of an Azure Active Directory server application (string)
        :param pulumi.Input[str] aad_tenant_id: The ID of an Azure Active Directory tenant (string)
        :param pulumi.Input[str] add_client_app_id: The ID of an Azure Active Directory client application of type \\"Native\\". This application is for user login via kubectl (string)
        :param pulumi.Input[str] add_server_app_id: The ID of an Azure Active Directory server application of type \\"Web app/API\\". This application represents the managed cluster's apiserver (Server application) (string)
        :param pulumi.Input[str] admin_username: The administrator username to use for Linux hosts. Default `azureuser` (string)
        :param pulumi.Input[int] agent_os_disk_size: GB size to be used to specify the disk for every machine in the agent pool. If you specify 0, it will apply the default according to the \\"agent vm size\\" specified. Default `0` (int)
        :param pulumi.Input[str] agent_pool_name: Name for the agent pool, upto 12 alphanumeric characters. Default `agentpool0` (string)
        :param pulumi.Input[str] agent_storage_profile: Storage profile specifies what kind of storage used on machine in the agent pool. Chooses from [ManagedDisks StorageAccount]. Default `ManagedDisks` (string)
        :param pulumi.Input[str] agent_vm_size: Size of machine in the agent pool. Default `Standard_D1_v2` (string)
        :param pulumi.Input[str] auth_base_url: The AKS auth base url (string)
        :param pulumi.Input[str] base_url: The AKS base url (string)
        :param pulumi.Input[int] count: The AKS node pool count. Default: `1` (int)
        :param pulumi.Input[str] dns_service_ip: An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes Service address range specified in \\"service cidr\\". Default `10.0.0.10` (string)
        :param pulumi.Input[str] docker_bridge_cidr: A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes Service address range specified in \\"service cidr\\". Default `172.17.0.1/16` (string)
        :param pulumi.Input[bool] enable_http_application_routing: Enable the Kubernetes ingress with automatic public DNS name creation. Default `false` (bool)
        :param pulumi.Input[bool] enable_monitoring: Turn on Azure Log Analytics monitoring. Uses the Log Analytics \\"Default\\" workspace if it exists, else creates one. if using an existing workspace, specifies \\"log analytics workspace resource id\\". Default `true` (bool)
        :param pulumi.Input[str] load_balancer_sku: The AKS load balancer sku (string)
        :param pulumi.Input[str] location: Azure Kubernetes cluster location. Default `eastus` (string)
        :param pulumi.Input[str] log_analytics_workspace: The name of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses '{resource group}-{subscription id}-{location code}' (string)
        :param pulumi.Input[str] log_analytics_workspace_resource_group: The resource group of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses the 'Cluster' resource group (string)
        :param pulumi.Input[int] max_pods: The AKS node pool max pods. Default: `110` (int)
        :param pulumi.Input[str] network_plugin: The AKS network plugin. Required if `imported=false` (string)
        :param pulumi.Input[str] network_policy: The AKS network policy (string)
        :param pulumi.Input[str] pod_cidr: A CIDR IP range from which to assign Kubernetes Pod IPs (string)
        :param pulumi.Input[str] service_cidr: A CIDR IP range from which to assign Kubernetes Service IPs (string)
        :param pulumi.Input[Mapping[str, Any]] tag: Use `tags` argument instead as []string
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The GKE node config tags (List)
        """
        ClusterAksConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            agent_dns_prefix=agent_dns_prefix,
            client_id=client_id,
            client_secret=client_secret,
            kubernetes_version=kubernetes_version,
            master_dns_prefix=master_dns_prefix,
            resource_group=resource_group,
            ssh_public_key_contents=ssh_public_key_contents,
            subnet=subnet,
            subscription_id=subscription_id,
            tenant_id=tenant_id,
            virtual_network=virtual_network,
            virtual_network_resource_group=virtual_network_resource_group,
            aad_server_app_secret=aad_server_app_secret,
            aad_tenant_id=aad_tenant_id,
            add_client_app_id=add_client_app_id,
            add_server_app_id=add_server_app_id,
            admin_username=admin_username,
            agent_os_disk_size=agent_os_disk_size,
            agent_pool_name=agent_pool_name,
            agent_storage_profile=agent_storage_profile,
            agent_vm_size=agent_vm_size,
            auth_base_url=auth_base_url,
            base_url=base_url,
            count=count,
            dns_service_ip=dns_service_ip,
            docker_bridge_cidr=docker_bridge_cidr,
            enable_http_application_routing=enable_http_application_routing,
            enable_monitoring=enable_monitoring,
            load_balancer_sku=load_balancer_sku,
            location=location,
            log_analytics_workspace=log_analytics_workspace,
            log_analytics_workspace_resource_group=log_analytics_workspace_resource_group,
            max_pods=max_pods,
            network_plugin=network_plugin,
            network_policy=network_policy,
            pod_cidr=pod_cidr,
            service_cidr=service_cidr,
            tag=tag,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             agent_dns_prefix: pulumi.Input[str],
             client_id: pulumi.Input[str],
             client_secret: pulumi.Input[str],
             kubernetes_version: pulumi.Input[str],
             master_dns_prefix: pulumi.Input[str],
             resource_group: pulumi.Input[str],
             ssh_public_key_contents: pulumi.Input[str],
             subnet: pulumi.Input[str],
             subscription_id: pulumi.Input[str],
             tenant_id: pulumi.Input[str],
             virtual_network: pulumi.Input[str],
             virtual_network_resource_group: pulumi.Input[str],
             aad_server_app_secret: Optional[pulumi.Input[str]] = None,
             aad_tenant_id: Optional[pulumi.Input[str]] = None,
             add_client_app_id: Optional[pulumi.Input[str]] = None,
             add_server_app_id: Optional[pulumi.Input[str]] = None,
             admin_username: Optional[pulumi.Input[str]] = None,
             agent_os_disk_size: Optional[pulumi.Input[int]] = None,
             agent_pool_name: Optional[pulumi.Input[str]] = None,
             agent_storage_profile: Optional[pulumi.Input[str]] = None,
             agent_vm_size: Optional[pulumi.Input[str]] = None,
             auth_base_url: Optional[pulumi.Input[str]] = None,
             base_url: Optional[pulumi.Input[str]] = None,
             count: Optional[pulumi.Input[int]] = None,
             dns_service_ip: Optional[pulumi.Input[str]] = None,
             docker_bridge_cidr: Optional[pulumi.Input[str]] = None,
             enable_http_application_routing: Optional[pulumi.Input[bool]] = None,
             enable_monitoring: Optional[pulumi.Input[bool]] = None,
             load_balancer_sku: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             log_analytics_workspace: Optional[pulumi.Input[str]] = None,
             log_analytics_workspace_resource_group: Optional[pulumi.Input[str]] = None,
             max_pods: Optional[pulumi.Input[int]] = None,
             network_plugin: Optional[pulumi.Input[str]] = None,
             network_policy: Optional[pulumi.Input[str]] = None,
             pod_cidr: Optional[pulumi.Input[str]] = None,
             service_cidr: Optional[pulumi.Input[str]] = None,
             tag: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'agentDnsPrefix' in kwargs:
            agent_dns_prefix = kwargs['agentDnsPrefix']
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']
        if 'kubernetesVersion' in kwargs:
            kubernetes_version = kwargs['kubernetesVersion']
        if 'masterDnsPrefix' in kwargs:
            master_dns_prefix = kwargs['masterDnsPrefix']
        if 'resourceGroup' in kwargs:
            resource_group = kwargs['resourceGroup']
        if 'sshPublicKeyContents' in kwargs:
            ssh_public_key_contents = kwargs['sshPublicKeyContents']
        if 'subscriptionId' in kwargs:
            subscription_id = kwargs['subscriptionId']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if 'virtualNetwork' in kwargs:
            virtual_network = kwargs['virtualNetwork']
        if 'virtualNetworkResourceGroup' in kwargs:
            virtual_network_resource_group = kwargs['virtualNetworkResourceGroup']
        if 'aadServerAppSecret' in kwargs:
            aad_server_app_secret = kwargs['aadServerAppSecret']
        if 'aadTenantId' in kwargs:
            aad_tenant_id = kwargs['aadTenantId']
        if 'addClientAppId' in kwargs:
            add_client_app_id = kwargs['addClientAppId']
        if 'addServerAppId' in kwargs:
            add_server_app_id = kwargs['addServerAppId']
        if 'adminUsername' in kwargs:
            admin_username = kwargs['adminUsername']
        if 'agentOsDiskSize' in kwargs:
            agent_os_disk_size = kwargs['agentOsDiskSize']
        if 'agentPoolName' in kwargs:
            agent_pool_name = kwargs['agentPoolName']
        if 'agentStorageProfile' in kwargs:
            agent_storage_profile = kwargs['agentStorageProfile']
        if 'agentVmSize' in kwargs:
            agent_vm_size = kwargs['agentVmSize']
        if 'authBaseUrl' in kwargs:
            auth_base_url = kwargs['authBaseUrl']
        if 'baseUrl' in kwargs:
            base_url = kwargs['baseUrl']
        if 'dnsServiceIp' in kwargs:
            dns_service_ip = kwargs['dnsServiceIp']
        if 'dockerBridgeCidr' in kwargs:
            docker_bridge_cidr = kwargs['dockerBridgeCidr']
        if 'enableHttpApplicationRouting' in kwargs:
            enable_http_application_routing = kwargs['enableHttpApplicationRouting']
        if 'enableMonitoring' in kwargs:
            enable_monitoring = kwargs['enableMonitoring']
        if 'loadBalancerSku' in kwargs:
            load_balancer_sku = kwargs['loadBalancerSku']
        if 'logAnalyticsWorkspace' in kwargs:
            log_analytics_workspace = kwargs['logAnalyticsWorkspace']
        if 'logAnalyticsWorkspaceResourceGroup' in kwargs:
            log_analytics_workspace_resource_group = kwargs['logAnalyticsWorkspaceResourceGroup']
        if 'maxPods' in kwargs:
            max_pods = kwargs['maxPods']
        if 'networkPlugin' in kwargs:
            network_plugin = kwargs['networkPlugin']
        if 'networkPolicy' in kwargs:
            network_policy = kwargs['networkPolicy']
        if 'podCidr' in kwargs:
            pod_cidr = kwargs['podCidr']
        if 'serviceCidr' in kwargs:
            service_cidr = kwargs['serviceCidr']

        _setter("agent_dns_prefix", agent_dns_prefix)
        _setter("client_id", client_id)
        _setter("client_secret", client_secret)
        _setter("kubernetes_version", kubernetes_version)
        _setter("master_dns_prefix", master_dns_prefix)
        _setter("resource_group", resource_group)
        _setter("ssh_public_key_contents", ssh_public_key_contents)
        _setter("subnet", subnet)
        _setter("subscription_id", subscription_id)
        _setter("tenant_id", tenant_id)
        _setter("virtual_network", virtual_network)
        _setter("virtual_network_resource_group", virtual_network_resource_group)
        if aad_server_app_secret is not None:
            _setter("aad_server_app_secret", aad_server_app_secret)
        if aad_tenant_id is not None:
            _setter("aad_tenant_id", aad_tenant_id)
        if add_client_app_id is not None:
            _setter("add_client_app_id", add_client_app_id)
        if add_server_app_id is not None:
            _setter("add_server_app_id", add_server_app_id)
        if admin_username is not None:
            _setter("admin_username", admin_username)
        if agent_os_disk_size is not None:
            _setter("agent_os_disk_size", agent_os_disk_size)
        if agent_pool_name is not None:
            _setter("agent_pool_name", agent_pool_name)
        if agent_storage_profile is not None:
            _setter("agent_storage_profile", agent_storage_profile)
        if agent_vm_size is not None:
            _setter("agent_vm_size", agent_vm_size)
        if auth_base_url is not None:
            _setter("auth_base_url", auth_base_url)
        if base_url is not None:
            _setter("base_url", base_url)
        if count is not None:
            _setter("count", count)
        if dns_service_ip is not None:
            _setter("dns_service_ip", dns_service_ip)
        if docker_bridge_cidr is not None:
            _setter("docker_bridge_cidr", docker_bridge_cidr)
        if enable_http_application_routing is not None:
            _setter("enable_http_application_routing", enable_http_application_routing)
        if enable_monitoring is not None:
            _setter("enable_monitoring", enable_monitoring)
        if load_balancer_sku is not None:
            _setter("load_balancer_sku", load_balancer_sku)
        if location is not None:
            _setter("location", location)
        if log_analytics_workspace is not None:
            _setter("log_analytics_workspace", log_analytics_workspace)
        if log_analytics_workspace_resource_group is not None:
            _setter("log_analytics_workspace_resource_group", log_analytics_workspace_resource_group)
        if max_pods is not None:
            _setter("max_pods", max_pods)
        if network_plugin is not None:
            _setter("network_plugin", network_plugin)
        if network_policy is not None:
            _setter("network_policy", network_policy)
        if pod_cidr is not None:
            _setter("pod_cidr", pod_cidr)
        if service_cidr is not None:
            _setter("service_cidr", service_cidr)
        if tag is not None:
            warnings.warn("""Use tags argument instead as []string""", DeprecationWarning)
            pulumi.log.warn("""tag is deprecated: Use tags argument instead as []string""")
        if tag is not None:
            _setter("tag", tag)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="agentDnsPrefix")
    def agent_dns_prefix(self) -> pulumi.Input[str]:
        """
        DNS prefix to be used to create the FQDN for the agent pool (string)
        """
        return pulumi.get(self, "agent_dns_prefix")

    @agent_dns_prefix.setter
    def agent_dns_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_dns_prefix", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Azure client ID to use (string)
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        Azure client secret associated with the \\"client id\\" (string)
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Input[str]:
        """
        The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="masterDnsPrefix")
    def master_dns_prefix(self) -> pulumi.Input[str]:
        """
        DNS prefix to use the Kubernetes cluster control pane (string)
        """
        return pulumi.get(self, "master_dns_prefix")

    @master_dns_prefix.setter
    def master_dns_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_dns_prefix", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        The AKS resource group (string)
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="sshPublicKeyContents")
    def ssh_public_key_contents(self) -> pulumi.Input[str]:
        """
        Contents of the SSH public key used to authenticate with Linux hosts (string)
        """
        return pulumi.get(self, "ssh_public_key_contents")

    @ssh_public_key_contents.setter
    def ssh_public_key_contents(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_public_key_contents", value)

    @property
    @pulumi.getter
    def subnet(self) -> pulumi.Input[str]:
        """
        The AKS subnet (string)
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        Azure tenant ID to use (string)
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="virtualNetwork")
    def virtual_network(self) -> pulumi.Input[str]:
        """
        The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        """
        return pulumi.get(self, "virtual_network")

    @virtual_network.setter
    def virtual_network(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_network", value)

    @property
    @pulumi.getter(name="virtualNetworkResourceGroup")
    def virtual_network_resource_group(self) -> pulumi.Input[str]:
        """
        The AKS virtual network resource group (string)
        """
        return pulumi.get(self, "virtual_network_resource_group")

    @virtual_network_resource_group.setter
    def virtual_network_resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_network_resource_group", value)

    @property
    @pulumi.getter(name="aadServerAppSecret")
    def aad_server_app_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret of an Azure Active Directory server application (string)
        """
        return pulumi.get(self, "aad_server_app_secret")

    @aad_server_app_secret.setter
    def aad_server_app_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_server_app_secret", value)

    @property
    @pulumi.getter(name="aadTenantId")
    def aad_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of an Azure Active Directory tenant (string)
        """
        return pulumi.get(self, "aad_tenant_id")

    @aad_tenant_id.setter
    def aad_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_tenant_id", value)

    @property
    @pulumi.getter(name="addClientAppId")
    def add_client_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of an Azure Active Directory client application of type \\"Native\\". This application is for user login via kubectl (string)
        """
        return pulumi.get(self, "add_client_app_id")

    @add_client_app_id.setter
    def add_client_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_client_app_id", value)

    @property
    @pulumi.getter(name="addServerAppId")
    def add_server_app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of an Azure Active Directory server application of type \\"Web app/API\\". This application represents the managed cluster's apiserver (Server application) (string)
        """
        return pulumi.get(self, "add_server_app_id")

    @add_server_app_id.setter
    def add_server_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_server_app_id", value)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[pulumi.Input[str]]:
        """
        The administrator username to use for Linux hosts. Default `azureuser` (string)
        """
        return pulumi.get(self, "admin_username")

    @admin_username.setter
    def admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_username", value)

    @property
    @pulumi.getter(name="agentOsDiskSize")
    def agent_os_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        GB size to be used to specify the disk for every machine in the agent pool. If you specify 0, it will apply the default according to the \\"agent vm size\\" specified. Default `0` (int)
        """
        return pulumi.get(self, "agent_os_disk_size")

    @agent_os_disk_size.setter
    def agent_os_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "agent_os_disk_size", value)

    @property
    @pulumi.getter(name="agentPoolName")
    def agent_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for the agent pool, upto 12 alphanumeric characters. Default `agentpool0` (string)
        """
        return pulumi.get(self, "agent_pool_name")

    @agent_pool_name.setter
    def agent_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_pool_name", value)

    @property
    @pulumi.getter(name="agentStorageProfile")
    def agent_storage_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Storage profile specifies what kind of storage used on machine in the agent pool. Chooses from [ManagedDisks StorageAccount]. Default `ManagedDisks` (string)
        """
        return pulumi.get(self, "agent_storage_profile")

    @agent_storage_profile.setter
    def agent_storage_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_storage_profile", value)

    @property
    @pulumi.getter(name="agentVmSize")
    def agent_vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size of machine in the agent pool. Default `Standard_D1_v2` (string)
        """
        return pulumi.get(self, "agent_vm_size")

    @agent_vm_size.setter
    def agent_vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_vm_size", value)

    @property
    @pulumi.getter(name="authBaseUrl")
    def auth_base_url(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS auth base url (string)
        """
        return pulumi.get(self, "auth_base_url")

    @auth_base_url.setter
    def auth_base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_base_url", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS base url (string)
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The AKS node pool count. Default: `1` (int)
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="dnsServiceIp")
    def dns_service_ip(self) -> Optional[pulumi.Input[str]]:
        """
        An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes Service address range specified in \\"service cidr\\". Default `10.0.0.10` (string)
        """
        return pulumi.get(self, "dns_service_ip")

    @dns_service_ip.setter
    def dns_service_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_service_ip", value)

    @property
    @pulumi.getter(name="dockerBridgeCidr")
    def docker_bridge_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes Service address range specified in \\"service cidr\\". Default `172.17.0.1/16` (string)
        """
        return pulumi.get(self, "docker_bridge_cidr")

    @docker_bridge_cidr.setter
    def docker_bridge_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_bridge_cidr", value)

    @property
    @pulumi.getter(name="enableHttpApplicationRouting")
    def enable_http_application_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the Kubernetes ingress with automatic public DNS name creation. Default `false` (bool)
        """
        return pulumi.get(self, "enable_http_application_routing")

    @enable_http_application_routing.setter
    def enable_http_application_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_http_application_routing", value)

    @property
    @pulumi.getter(name="enableMonitoring")
    def enable_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Turn on Azure Log Analytics monitoring. Uses the Log Analytics \\"Default\\" workspace if it exists, else creates one. if using an existing workspace, specifies \\"log analytics workspace resource id\\". Default `true` (bool)
        """
        return pulumi.get(self, "enable_monitoring")

    @enable_monitoring.setter
    def enable_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_monitoring", value)

    @property
    @pulumi.getter(name="loadBalancerSku")
    def load_balancer_sku(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS load balancer sku (string)
        """
        return pulumi.get(self, "load_balancer_sku")

    @load_balancer_sku.setter
    def load_balancer_sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_sku", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Kubernetes cluster location. Default `eastus` (string)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="logAnalyticsWorkspace")
    def log_analytics_workspace(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses '{resource group}-{subscription id}-{location code}' (string)
        """
        return pulumi.get(self, "log_analytics_workspace")

    @log_analytics_workspace.setter
    def log_analytics_workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_analytics_workspace", value)

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceResourceGroup")
    def log_analytics_workspace_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        The resource group of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses the 'Cluster' resource group (string)
        """
        return pulumi.get(self, "log_analytics_workspace_resource_group")

    @log_analytics_workspace_resource_group.setter
    def log_analytics_workspace_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_analytics_workspace_resource_group", value)

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[pulumi.Input[int]]:
        """
        The AKS node pool max pods. Default: `110` (int)
        """
        return pulumi.get(self, "max_pods")

    @max_pods.setter
    def max_pods(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pods", value)

    @property
    @pulumi.getter(name="networkPlugin")
    def network_plugin(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS network plugin. Required if `imported=false` (string)
        """
        return pulumi.get(self, "network_plugin")

    @network_plugin.setter
    def network_plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_plugin", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS network policy (string)
        """
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter(name="podCidr")
    def pod_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR IP range from which to assign Kubernetes Pod IPs (string)
        """
        return pulumi.get(self, "pod_cidr")

    @pod_cidr.setter
    def pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_cidr", value)

    @property
    @pulumi.getter(name="serviceCidr")
    def service_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR IP range from which to assign Kubernetes Service IPs (string)
        """
        return pulumi.get(self, "service_cidr")

    @service_cidr.setter
    def service_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cidr", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Use `tags` argument instead as []string
        """
        warnings.warn("""Use tags argument instead as []string""", DeprecationWarning)
        pulumi.log.warn("""tag is deprecated: Use tags argument instead as []string""")

        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The GKE node config tags (List)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ClusterAksConfigV2Args:
    def __init__(__self__, *,
                 cloud_credential_id: pulumi.Input[str],
                 resource_group: pulumi.Input[str],
                 resource_location: pulumi.Input[str],
                 auth_base_url: Optional[pulumi.Input[str]] = None,
                 authorized_ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 base_url: Optional[pulumi.Input[str]] = None,
                 dns_prefix: Optional[pulumi.Input[str]] = None,
                 http_application_routing: Optional[pulumi.Input[bool]] = None,
                 imported: Optional[pulumi.Input[bool]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 linux_admin_username: Optional[pulumi.Input[str]] = None,
                 linux_ssh_public_key: Optional[pulumi.Input[str]] = None,
                 load_balancer_sku: Optional[pulumi.Input[str]] = None,
                 log_analytics_workspace_group: Optional[pulumi.Input[str]] = None,
                 log_analytics_workspace_name: Optional[pulumi.Input[str]] = None,
                 monitoring: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_dns_service_ip: Optional[pulumi.Input[str]] = None,
                 network_docker_bridge_cidr: Optional[pulumi.Input[str]] = None,
                 network_plugin: Optional[pulumi.Input[str]] = None,
                 network_pod_cidr: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[str]] = None,
                 network_service_cidr: Optional[pulumi.Input[str]] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAksConfigV2NodePoolArgs']]]] = None,
                 private_cluster: Optional[pulumi.Input[bool]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 virtual_network: Optional[pulumi.Input[str]] = None,
                 virtual_network_resource_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cloud_credential_id: The EKS cloud_credential id (string)
        :param pulumi.Input[str] resource_group: The AKS resource group (string)
        :param pulumi.Input[str] resource_location: The AKS resource location (string)
        :param pulumi.Input[str] auth_base_url: The AKS auth base url (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authorized_ip_ranges: The AKS authorized ip ranges (list)
        :param pulumi.Input[str] base_url: The AKS base url (string)
        :param pulumi.Input[str] dns_prefix: The AKS dns prefix. Required if `imported=false` (string)
        :param pulumi.Input[bool] http_application_routing: Enable AKS http application routing? (bool)
        :param pulumi.Input[bool] imported: Is GKE cluster imported? Default: `false` (bool)
        :param pulumi.Input[str] kubernetes_version: The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        :param pulumi.Input[str] linux_admin_username: The AKS linux admin username (string)
        :param pulumi.Input[str] linux_ssh_public_key: The AKS linux ssh public key (string)
        :param pulumi.Input[str] load_balancer_sku: The AKS load balancer sku (string)
        :param pulumi.Input[str] log_analytics_workspace_group: The AKS log analytics workspace group (string)
        :param pulumi.Input[str] log_analytics_workspace_name: The AKS log analytics workspace name (string)
        :param pulumi.Input[bool] monitoring: Is AKS cluster monitoring enabled? (bool)
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[str] network_dns_service_ip: The AKS network dns service ip (string)
        :param pulumi.Input[str] network_docker_bridge_cidr: The AKS network docker bridge cidr (string)
        :param pulumi.Input[str] network_plugin: The AKS network plugin. Required if `imported=false` (string)
        :param pulumi.Input[str] network_pod_cidr: The AKS network pod cidr (string)
        :param pulumi.Input[str] network_policy: The AKS network policy (string)
        :param pulumi.Input[str] network_service_cidr: The AKS network service cidr (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterAksConfigV2NodePoolArgs']]] node_pools: The GKE cluster node pools. Required for create new cluster (List)
        :param pulumi.Input[bool] private_cluster: Is AKS cluster private? (bool)
        :param pulumi.Input[str] subnet: The AKS subnet (string)
        :param pulumi.Input[Mapping[str, Any]] tags: The GKE node config tags (List)
        :param pulumi.Input[str] virtual_network: The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        :param pulumi.Input[str] virtual_network_resource_group: The AKS virtual network resource group (string)
        """
        ClusterAksConfigV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_credential_id=cloud_credential_id,
            resource_group=resource_group,
            resource_location=resource_location,
            auth_base_url=auth_base_url,
            authorized_ip_ranges=authorized_ip_ranges,
            base_url=base_url,
            dns_prefix=dns_prefix,
            http_application_routing=http_application_routing,
            imported=imported,
            kubernetes_version=kubernetes_version,
            linux_admin_username=linux_admin_username,
            linux_ssh_public_key=linux_ssh_public_key,
            load_balancer_sku=load_balancer_sku,
            log_analytics_workspace_group=log_analytics_workspace_group,
            log_analytics_workspace_name=log_analytics_workspace_name,
            monitoring=monitoring,
            name=name,
            network_dns_service_ip=network_dns_service_ip,
            network_docker_bridge_cidr=network_docker_bridge_cidr,
            network_plugin=network_plugin,
            network_pod_cidr=network_pod_cidr,
            network_policy=network_policy,
            network_service_cidr=network_service_cidr,
            node_pools=node_pools,
            private_cluster=private_cluster,
            subnet=subnet,
            tags=tags,
            virtual_network=virtual_network,
            virtual_network_resource_group=virtual_network_resource_group,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_credential_id: pulumi.Input[str],
             resource_group: pulumi.Input[str],
             resource_location: pulumi.Input[str],
             auth_base_url: Optional[pulumi.Input[str]] = None,
             authorized_ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             base_url: Optional[pulumi.Input[str]] = None,
             dns_prefix: Optional[pulumi.Input[str]] = None,
             http_application_routing: Optional[pulumi.Input[bool]] = None,
             imported: Optional[pulumi.Input[bool]] = None,
             kubernetes_version: Optional[pulumi.Input[str]] = None,
             linux_admin_username: Optional[pulumi.Input[str]] = None,
             linux_ssh_public_key: Optional[pulumi.Input[str]] = None,
             load_balancer_sku: Optional[pulumi.Input[str]] = None,
             log_analytics_workspace_group: Optional[pulumi.Input[str]] = None,
             log_analytics_workspace_name: Optional[pulumi.Input[str]] = None,
             monitoring: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             network_dns_service_ip: Optional[pulumi.Input[str]] = None,
             network_docker_bridge_cidr: Optional[pulumi.Input[str]] = None,
             network_plugin: Optional[pulumi.Input[str]] = None,
             network_pod_cidr: Optional[pulumi.Input[str]] = None,
             network_policy: Optional[pulumi.Input[str]] = None,
             network_service_cidr: Optional[pulumi.Input[str]] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAksConfigV2NodePoolArgs']]]] = None,
             private_cluster: Optional[pulumi.Input[bool]] = None,
             subnet: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             virtual_network: Optional[pulumi.Input[str]] = None,
             virtual_network_resource_group: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudCredentialId' in kwargs:
            cloud_credential_id = kwargs['cloudCredentialId']
        if 'resourceGroup' in kwargs:
            resource_group = kwargs['resourceGroup']
        if 'resourceLocation' in kwargs:
            resource_location = kwargs['resourceLocation']
        if 'authBaseUrl' in kwargs:
            auth_base_url = kwargs['authBaseUrl']
        if 'authorizedIpRanges' in kwargs:
            authorized_ip_ranges = kwargs['authorizedIpRanges']
        if 'baseUrl' in kwargs:
            base_url = kwargs['baseUrl']
        if 'dnsPrefix' in kwargs:
            dns_prefix = kwargs['dnsPrefix']
        if 'httpApplicationRouting' in kwargs:
            http_application_routing = kwargs['httpApplicationRouting']
        if 'kubernetesVersion' in kwargs:
            kubernetes_version = kwargs['kubernetesVersion']
        if 'linuxAdminUsername' in kwargs:
            linux_admin_username = kwargs['linuxAdminUsername']
        if 'linuxSshPublicKey' in kwargs:
            linux_ssh_public_key = kwargs['linuxSshPublicKey']
        if 'loadBalancerSku' in kwargs:
            load_balancer_sku = kwargs['loadBalancerSku']
        if 'logAnalyticsWorkspaceGroup' in kwargs:
            log_analytics_workspace_group = kwargs['logAnalyticsWorkspaceGroup']
        if 'logAnalyticsWorkspaceName' in kwargs:
            log_analytics_workspace_name = kwargs['logAnalyticsWorkspaceName']
        if 'networkDnsServiceIp' in kwargs:
            network_dns_service_ip = kwargs['networkDnsServiceIp']
        if 'networkDockerBridgeCidr' in kwargs:
            network_docker_bridge_cidr = kwargs['networkDockerBridgeCidr']
        if 'networkPlugin' in kwargs:
            network_plugin = kwargs['networkPlugin']
        if 'networkPodCidr' in kwargs:
            network_pod_cidr = kwargs['networkPodCidr']
        if 'networkPolicy' in kwargs:
            network_policy = kwargs['networkPolicy']
        if 'networkServiceCidr' in kwargs:
            network_service_cidr = kwargs['networkServiceCidr']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'privateCluster' in kwargs:
            private_cluster = kwargs['privateCluster']
        if 'virtualNetwork' in kwargs:
            virtual_network = kwargs['virtualNetwork']
        if 'virtualNetworkResourceGroup' in kwargs:
            virtual_network_resource_group = kwargs['virtualNetworkResourceGroup']

        _setter("cloud_credential_id", cloud_credential_id)
        _setter("resource_group", resource_group)
        _setter("resource_location", resource_location)
        if auth_base_url is not None:
            _setter("auth_base_url", auth_base_url)
        if authorized_ip_ranges is not None:
            _setter("authorized_ip_ranges", authorized_ip_ranges)
        if base_url is not None:
            _setter("base_url", base_url)
        if dns_prefix is not None:
            _setter("dns_prefix", dns_prefix)
        if http_application_routing is not None:
            _setter("http_application_routing", http_application_routing)
        if imported is not None:
            _setter("imported", imported)
        if kubernetes_version is not None:
            _setter("kubernetes_version", kubernetes_version)
        if linux_admin_username is not None:
            _setter("linux_admin_username", linux_admin_username)
        if linux_ssh_public_key is not None:
            _setter("linux_ssh_public_key", linux_ssh_public_key)
        if load_balancer_sku is not None:
            _setter("load_balancer_sku", load_balancer_sku)
        if log_analytics_workspace_group is not None:
            _setter("log_analytics_workspace_group", log_analytics_workspace_group)
        if log_analytics_workspace_name is not None:
            _setter("log_analytics_workspace_name", log_analytics_workspace_name)
        if monitoring is not None:
            _setter("monitoring", monitoring)
        if name is not None:
            _setter("name", name)
        if network_dns_service_ip is not None:
            _setter("network_dns_service_ip", network_dns_service_ip)
        if network_docker_bridge_cidr is not None:
            _setter("network_docker_bridge_cidr", network_docker_bridge_cidr)
        if network_plugin is not None:
            _setter("network_plugin", network_plugin)
        if network_pod_cidr is not None:
            _setter("network_pod_cidr", network_pod_cidr)
        if network_policy is not None:
            _setter("network_policy", network_policy)
        if network_service_cidr is not None:
            _setter("network_service_cidr", network_service_cidr)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if private_cluster is not None:
            _setter("private_cluster", private_cluster)
        if subnet is not None:
            _setter("subnet", subnet)
        if tags is not None:
            _setter("tags", tags)
        if virtual_network is not None:
            _setter("virtual_network", virtual_network)
        if virtual_network_resource_group is not None:
            _setter("virtual_network_resource_group", virtual_network_resource_group)

    @property
    @pulumi.getter(name="cloudCredentialId")
    def cloud_credential_id(self) -> pulumi.Input[str]:
        """
        The EKS cloud_credential id (string)
        """
        return pulumi.get(self, "cloud_credential_id")

    @cloud_credential_id.setter
    def cloud_credential_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_credential_id", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> pulumi.Input[str]:
        """
        The AKS resource group (string)
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="resourceLocation")
    def resource_location(self) -> pulumi.Input[str]:
        """
        The AKS resource location (string)
        """
        return pulumi.get(self, "resource_location")

    @resource_location.setter
    def resource_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_location", value)

    @property
    @pulumi.getter(name="authBaseUrl")
    def auth_base_url(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS auth base url (string)
        """
        return pulumi.get(self, "auth_base_url")

    @auth_base_url.setter
    def auth_base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_base_url", value)

    @property
    @pulumi.getter(name="authorizedIpRanges")
    def authorized_ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The AKS authorized ip ranges (list)
        """
        return pulumi.get(self, "authorized_ip_ranges")

    @authorized_ip_ranges.setter
    def authorized_ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorized_ip_ranges", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS base url (string)
        """
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter(name="dnsPrefix")
    def dns_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS dns prefix. Required if `imported=false` (string)
        """
        return pulumi.get(self, "dns_prefix")

    @dns_prefix.setter
    def dns_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_prefix", value)

    @property
    @pulumi.getter(name="httpApplicationRouting")
    def http_application_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable AKS http application routing? (bool)
        """
        return pulumi.get(self, "http_application_routing")

    @http_application_routing.setter
    def http_application_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http_application_routing", value)

    @property
    @pulumi.getter
    def imported(self) -> Optional[pulumi.Input[bool]]:
        """
        Is GKE cluster imported? Default: `false` (bool)
        """
        return pulumi.get(self, "imported")

    @imported.setter
    def imported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "imported", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="linuxAdminUsername")
    def linux_admin_username(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS linux admin username (string)
        """
        return pulumi.get(self, "linux_admin_username")

    @linux_admin_username.setter
    def linux_admin_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux_admin_username", value)

    @property
    @pulumi.getter(name="linuxSshPublicKey")
    def linux_ssh_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS linux ssh public key (string)
        """
        return pulumi.get(self, "linux_ssh_public_key")

    @linux_ssh_public_key.setter
    def linux_ssh_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linux_ssh_public_key", value)

    @property
    @pulumi.getter(name="loadBalancerSku")
    def load_balancer_sku(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS load balancer sku (string)
        """
        return pulumi.get(self, "load_balancer_sku")

    @load_balancer_sku.setter
    def load_balancer_sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_sku", value)

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceGroup")
    def log_analytics_workspace_group(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS log analytics workspace group (string)
        """
        return pulumi.get(self, "log_analytics_workspace_group")

    @log_analytics_workspace_group.setter
    def log_analytics_workspace_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_analytics_workspace_group", value)

    @property
    @pulumi.getter(name="logAnalyticsWorkspaceName")
    def log_analytics_workspace_name(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS log analytics workspace name (string)
        """
        return pulumi.get(self, "log_analytics_workspace_name")

    @log_analytics_workspace_name.setter
    def log_analytics_workspace_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_analytics_workspace_name", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Is AKS cluster monitoring enabled? (bool)
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkDnsServiceIp")
    def network_dns_service_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS network dns service ip (string)
        """
        return pulumi.get(self, "network_dns_service_ip")

    @network_dns_service_ip.setter
    def network_dns_service_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_dns_service_ip", value)

    @property
    @pulumi.getter(name="networkDockerBridgeCidr")
    def network_docker_bridge_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS network docker bridge cidr (string)
        """
        return pulumi.get(self, "network_docker_bridge_cidr")

    @network_docker_bridge_cidr.setter
    def network_docker_bridge_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_docker_bridge_cidr", value)

    @property
    @pulumi.getter(name="networkPlugin")
    def network_plugin(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS network plugin. Required if `imported=false` (string)
        """
        return pulumi.get(self, "network_plugin")

    @network_plugin.setter
    def network_plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_plugin", value)

    @property
    @pulumi.getter(name="networkPodCidr")
    def network_pod_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS network pod cidr (string)
        """
        return pulumi.get(self, "network_pod_cidr")

    @network_pod_cidr.setter
    def network_pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_pod_cidr", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS network policy (string)
        """
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter(name="networkServiceCidr")
    def network_service_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS network service cidr (string)
        """
        return pulumi.get(self, "network_service_cidr")

    @network_service_cidr.setter
    def network_service_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_service_cidr", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAksConfigV2NodePoolArgs']]]]:
        """
        The GKE cluster node pools. Required for create new cluster (List)
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAksConfigV2NodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="privateCluster")
    def private_cluster(self) -> Optional[pulumi.Input[bool]]:
        """
        Is AKS cluster private? (bool)
        """
        return pulumi.get(self, "private_cluster")

    @private_cluster.setter
    def private_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_cluster", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS subnet (string)
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The GKE node config tags (List)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="virtualNetwork")
    def virtual_network(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        """
        return pulumi.get(self, "virtual_network")

    @virtual_network.setter
    def virtual_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_network", value)

    @property
    @pulumi.getter(name="virtualNetworkResourceGroup")
    def virtual_network_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS virtual network resource group (string)
        """
        return pulumi.get(self, "virtual_network_resource_group")

    @virtual_network_resource_group.setter
    def virtual_network_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_network_resource_group", value)


@pulumi.input_type
class ClusterAksConfigV2NodePoolArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 count: Optional[pulumi.Input[int]] = None,
                 enable_auto_scaling: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 max_count: Optional[pulumi.Input[int]] = None,
                 max_pods: Optional[pulumi.Input[int]] = None,
                 max_surge: Optional[pulumi.Input[str]] = None,
                 min_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 orchestrator_version: Optional[pulumi.Input[str]] = None,
                 os_disk_size_gb: Optional[pulumi.Input[int]] = None,
                 os_disk_type: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vm_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] availability_zones: The AKS node pool availability zones (list)
        :param pulumi.Input[int] count: The AKS node pool count. Default: `1` (int)
        :param pulumi.Input[bool] enable_auto_scaling: Is AKS node pool auto scaling enabled? Default: `false` (bool)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the Cluster (map)
        :param pulumi.Input[int] max_count: The AKS node pool max count. Required if `enable_auto_scaling=true` (int)
        :param pulumi.Input[int] max_pods: The AKS node pool max pods. Default: `110` (int)
        :param pulumi.Input[str] max_surge: The AKS node pool max surge (string), example value: `25%`
        :param pulumi.Input[int] min_count: The AKS node pool min count. Required if `enable_auto_scaling=true` (int)
        :param pulumi.Input[str] mode: The AKS node group mode. Default: `System` (string)
        :param pulumi.Input[str] orchestrator_version: The AKS node pool orchestrator version (string)
        :param pulumi.Input[int] os_disk_size_gb: The AKS node pool os disk size gb. Default: `128` (int)
        :param pulumi.Input[str] os_disk_type: The AKS node pool os disk type. Default: `Managed` (string)
        :param pulumi.Input[str] os_type: The AKS node pool os type. Default: `Linux` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taints: The GKE node config taints (List)
        :param pulumi.Input[str] vm_size: The AKS node pool orchestrator version (string)
        """
        ClusterAksConfigV2NodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            availability_zones=availability_zones,
            count=count,
            enable_auto_scaling=enable_auto_scaling,
            labels=labels,
            max_count=max_count,
            max_pods=max_pods,
            max_surge=max_surge,
            min_count=min_count,
            mode=mode,
            orchestrator_version=orchestrator_version,
            os_disk_size_gb=os_disk_size_gb,
            os_disk_type=os_disk_type,
            os_type=os_type,
            taints=taints,
            vm_size=vm_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             availability_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             count: Optional[pulumi.Input[int]] = None,
             enable_auto_scaling: Optional[pulumi.Input[bool]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             max_count: Optional[pulumi.Input[int]] = None,
             max_pods: Optional[pulumi.Input[int]] = None,
             max_surge: Optional[pulumi.Input[str]] = None,
             min_count: Optional[pulumi.Input[int]] = None,
             mode: Optional[pulumi.Input[str]] = None,
             orchestrator_version: Optional[pulumi.Input[str]] = None,
             os_disk_size_gb: Optional[pulumi.Input[int]] = None,
             os_disk_type: Optional[pulumi.Input[str]] = None,
             os_type: Optional[pulumi.Input[str]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             vm_size: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'availabilityZones' in kwargs:
            availability_zones = kwargs['availabilityZones']
        if 'enableAutoScaling' in kwargs:
            enable_auto_scaling = kwargs['enableAutoScaling']
        if 'maxCount' in kwargs:
            max_count = kwargs['maxCount']
        if 'maxPods' in kwargs:
            max_pods = kwargs['maxPods']
        if 'maxSurge' in kwargs:
            max_surge = kwargs['maxSurge']
        if 'minCount' in kwargs:
            min_count = kwargs['minCount']
        if 'orchestratorVersion' in kwargs:
            orchestrator_version = kwargs['orchestratorVersion']
        if 'osDiskSizeGb' in kwargs:
            os_disk_size_gb = kwargs['osDiskSizeGb']
        if 'osDiskType' in kwargs:
            os_disk_type = kwargs['osDiskType']
        if 'osType' in kwargs:
            os_type = kwargs['osType']
        if 'vmSize' in kwargs:
            vm_size = kwargs['vmSize']

        _setter("name", name)
        if availability_zones is not None:
            _setter("availability_zones", availability_zones)
        if count is not None:
            _setter("count", count)
        if enable_auto_scaling is not None:
            _setter("enable_auto_scaling", enable_auto_scaling)
        if labels is not None:
            _setter("labels", labels)
        if max_count is not None:
            _setter("max_count", max_count)
        if max_pods is not None:
            _setter("max_pods", max_pods)
        if max_surge is not None:
            _setter("max_surge", max_surge)
        if min_count is not None:
            _setter("min_count", min_count)
        if mode is not None:
            _setter("mode", mode)
        if orchestrator_version is not None:
            _setter("orchestrator_version", orchestrator_version)
        if os_disk_size_gb is not None:
            _setter("os_disk_size_gb", os_disk_size_gb)
        if os_disk_type is not None:
            _setter("os_disk_type", os_disk_type)
        if os_type is not None:
            _setter("os_type", os_type)
        if taints is not None:
            _setter("taints", taints)
        if vm_size is not None:
            _setter("vm_size", vm_size)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The AKS node pool availability zones (list)
        """
        return pulumi.get(self, "availability_zones")

    @availability_zones.setter
    def availability_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "availability_zones", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The AKS node pool count. Default: `1` (int)
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="enableAutoScaling")
    def enable_auto_scaling(self) -> Optional[pulumi.Input[bool]]:
        """
        Is AKS node pool auto scaling enabled? Default: `false` (bool)
        """
        return pulumi.get(self, "enable_auto_scaling")

    @enable_auto_scaling.setter
    def enable_auto_scaling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto_scaling", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the Cluster (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maxCount")
    def max_count(self) -> Optional[pulumi.Input[int]]:
        """
        The AKS node pool max count. Required if `enable_auto_scaling=true` (int)
        """
        return pulumi.get(self, "max_count")

    @max_count.setter
    def max_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_count", value)

    @property
    @pulumi.getter(name="maxPods")
    def max_pods(self) -> Optional[pulumi.Input[int]]:
        """
        The AKS node pool max pods. Default: `110` (int)
        """
        return pulumi.get(self, "max_pods")

    @max_pods.setter
    def max_pods(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pods", value)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS node pool max surge (string), example value: `25%`
        """
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="minCount")
    def min_count(self) -> Optional[pulumi.Input[int]]:
        """
        The AKS node pool min count. Required if `enable_auto_scaling=true` (int)
        """
        return pulumi.get(self, "min_count")

    @min_count.setter
    def min_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS node group mode. Default: `System` (string)
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="orchestratorVersion")
    def orchestrator_version(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS node pool orchestrator version (string)
        """
        return pulumi.get(self, "orchestrator_version")

    @orchestrator_version.setter
    def orchestrator_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orchestrator_version", value)

    @property
    @pulumi.getter(name="osDiskSizeGb")
    def os_disk_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        The AKS node pool os disk size gb. Default: `128` (int)
        """
        return pulumi.get(self, "os_disk_size_gb")

    @os_disk_size_gb.setter
    def os_disk_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "os_disk_size_gb", value)

    @property
    @pulumi.getter(name="osDiskType")
    def os_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS node pool os disk type. Default: `Managed` (string)
        """
        return pulumi.get(self, "os_disk_type")

    @os_disk_type.setter
    def os_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_disk_type", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS node pool os type. Default: `Linux` (string)
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The GKE node config taints (List)
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="vmSize")
    def vm_size(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS node pool orchestrator version (string)
        """
        return pulumi.get(self, "vm_size")

    @vm_size.setter
    def vm_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_size", value)


@pulumi.input_type
class ClusterAlertGroupRecipientArgs:
    def __init__(__self__, *,
                 notifier_id: pulumi.Input[str],
                 default_recipient: Optional[pulumi.Input[bool]] = None,
                 notifier_type: Optional[pulumi.Input[str]] = None,
                 recipient: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] notifier_id: Recipient notifier ID (string)
        :param pulumi.Input[bool] default_recipient: Use notifier default recipient, overriding `recipient` argument if set.  Default: `false` (bool)
        :param pulumi.Input[str] notifier_type: Recipient notifier ID. Supported values : `"dingtalk" | "msteams" | "pagerduty" | "slack" | "email" | "webhook" | "wechat"` (string)
        :param pulumi.Input[str] recipient: Recipient (string)
        """
        ClusterAlertGroupRecipientArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notifier_id=notifier_id,
            default_recipient=default_recipient,
            notifier_type=notifier_type,
            recipient=recipient,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notifier_id: pulumi.Input[str],
             default_recipient: Optional[pulumi.Input[bool]] = None,
             notifier_type: Optional[pulumi.Input[str]] = None,
             recipient: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'notifierId' in kwargs:
            notifier_id = kwargs['notifierId']
        if 'defaultRecipient' in kwargs:
            default_recipient = kwargs['defaultRecipient']
        if 'notifierType' in kwargs:
            notifier_type = kwargs['notifierType']

        _setter("notifier_id", notifier_id)
        if default_recipient is not None:
            _setter("default_recipient", default_recipient)
        if notifier_type is not None:
            _setter("notifier_type", notifier_type)
        if recipient is not None:
            _setter("recipient", recipient)

    @property
    @pulumi.getter(name="notifierId")
    def notifier_id(self) -> pulumi.Input[str]:
        """
        Recipient notifier ID (string)
        """
        return pulumi.get(self, "notifier_id")

    @notifier_id.setter
    def notifier_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "notifier_id", value)

    @property
    @pulumi.getter(name="defaultRecipient")
    def default_recipient(self) -> Optional[pulumi.Input[bool]]:
        """
        Use notifier default recipient, overriding `recipient` argument if set.  Default: `false` (bool)
        """
        return pulumi.get(self, "default_recipient")

    @default_recipient.setter
    def default_recipient(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_recipient", value)

    @property
    @pulumi.getter(name="notifierType")
    def notifier_type(self) -> Optional[pulumi.Input[str]]:
        """
        Recipient notifier ID. Supported values : `"dingtalk" | "msteams" | "pagerduty" | "slack" | "email" | "webhook" | "wechat"` (string)
        """
        return pulumi.get(self, "notifier_type")

    @notifier_type.setter
    def notifier_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notifier_type", value)

    @property
    @pulumi.getter
    def recipient(self) -> Optional[pulumi.Input[str]]:
        """
        Recipient (string)
        """
        return pulumi.get(self, "recipient")

    @recipient.setter
    def recipient(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recipient", value)


@pulumi.input_type
class ClusterAlertRuleEventRuleArgs:
    def __init__(__self__, *,
                 resource_kind: pulumi.Input[str],
                 event_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource_kind: Resource kind. Supported values : `"DaemonSet" | "Deployment" | "Node" | "Pod" | "StatefulSet"` (string)
        :param pulumi.Input[str] event_type: Event type. Supported values : `"Warning" | "Normal"`. Default: `Warning` (string)
        """
        ClusterAlertRuleEventRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_kind=resource_kind,
            event_type=event_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_kind: pulumi.Input[str],
             event_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'resourceKind' in kwargs:
            resource_kind = kwargs['resourceKind']
        if 'eventType' in kwargs:
            event_type = kwargs['eventType']

        _setter("resource_kind", resource_kind)
        if event_type is not None:
            _setter("event_type", event_type)

    @property
    @pulumi.getter(name="resourceKind")
    def resource_kind(self) -> pulumi.Input[str]:
        """
        Resource kind. Supported values : `"DaemonSet" | "Deployment" | "Node" | "Pod" | "StatefulSet"` (string)
        """
        return pulumi.get(self, "resource_kind")

    @resource_kind.setter
    def resource_kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_kind", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[pulumi.Input[str]]:
        """
        Event type. Supported values : `"Warning" | "Normal"`. Default: `Warning` (string)
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_type", value)


@pulumi.input_type
class ClusterAlertRuleMetricRuleArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 threshold_value: pulumi.Input[float],
                 comparison: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] duration: Metric rule duration (string)
        :param pulumi.Input[str] expression: Metric rule expression (string)
        :param pulumi.Input[float] threshold_value: Metric rule threshold value (float64)
        :param pulumi.Input[str] comparison: Metric rule comparison. Supported values : `"equal" | "greater-or-equal" | "greater-than" | "less-or-equal" | "less-than" | "not-equal" | "has-value"`. Default: `equal`  (string)
        :param pulumi.Input[str] description: Metric rule description (string)
        """
        ClusterAlertRuleMetricRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            expression=expression,
            threshold_value=threshold_value,
            comparison=comparison,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: pulumi.Input[str],
             expression: pulumi.Input[str],
             threshold_value: pulumi.Input[float],
             comparison: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'thresholdValue' in kwargs:
            threshold_value = kwargs['thresholdValue']

        _setter("duration", duration)
        _setter("expression", expression)
        _setter("threshold_value", threshold_value)
        if comparison is not None:
            _setter("comparison", comparison)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        Metric rule duration (string)
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Metric rule expression (string)
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> pulumi.Input[float]:
        """
        Metric rule threshold value (float64)
        """
        return pulumi.get(self, "threshold_value")

    @threshold_value.setter
    def threshold_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_value", value)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input[str]]:
        """
        Metric rule comparison. Supported values : `"equal" | "greater-or-equal" | "greater-than" | "less-or-equal" | "less-than" | "not-equal" | "has-value"`. Default: `equal`  (string)
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Metric rule description (string)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class ClusterAlertRuleNodeRuleArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[str]] = None,
                 cpu_threshold: Optional[pulumi.Input[int]] = None,
                 mem_threshold: Optional[pulumi.Input[int]] = None,
                 node_id: Optional[pulumi.Input[str]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] condition: System service rule condition. Supported values : `"controller-manager" | "etcd" | "scheduler"`. Default: `scheduler` (string)
        :param pulumi.Input[int] cpu_threshold: Node rule cpu threshold. Default: `70` (int)
        :param pulumi.Input[int] mem_threshold: Node rule mem threshold. Default: `70` (int)
        :param pulumi.Input[str] node_id: Node ID (string)
        :param pulumi.Input[Mapping[str, Any]] selector: Node rule selector (map)
        """
        ClusterAlertRuleNodeRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            condition=condition,
            cpu_threshold=cpu_threshold,
            mem_threshold=mem_threshold,
            node_id=node_id,
            selector=selector,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             condition: Optional[pulumi.Input[str]] = None,
             cpu_threshold: Optional[pulumi.Input[int]] = None,
             mem_threshold: Optional[pulumi.Input[int]] = None,
             node_id: Optional[pulumi.Input[str]] = None,
             selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpuThreshold' in kwargs:
            cpu_threshold = kwargs['cpuThreshold']
        if 'memThreshold' in kwargs:
            mem_threshold = kwargs['memThreshold']
        if 'nodeId' in kwargs:
            node_id = kwargs['nodeId']

        if condition is not None:
            _setter("condition", condition)
        if cpu_threshold is not None:
            _setter("cpu_threshold", cpu_threshold)
        if mem_threshold is not None:
            _setter("mem_threshold", mem_threshold)
        if node_id is not None:
            _setter("node_id", node_id)
        if selector is not None:
            _setter("selector", selector)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        System service rule condition. Supported values : `"controller-manager" | "etcd" | "scheduler"`. Default: `scheduler` (string)
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="cpuThreshold")
    def cpu_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Node rule cpu threshold. Default: `70` (int)
        """
        return pulumi.get(self, "cpu_threshold")

    @cpu_threshold.setter
    def cpu_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_threshold", value)

    @property
    @pulumi.getter(name="memThreshold")
    def mem_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Node rule mem threshold. Default: `70` (int)
        """
        return pulumi.get(self, "mem_threshold")

    @mem_threshold.setter
    def mem_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_threshold", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        """
        Node ID (string)
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Node rule selector (map)
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class ClusterAlertRuleSystemServiceRuleArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] condition: System service rule condition. Supported values : `"controller-manager" | "etcd" | "scheduler"`. Default: `scheduler` (string)
        """
        ClusterAlertRuleSystemServiceRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            condition=condition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             condition: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if condition is not None:
            _setter("condition", condition)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        System service rule condition. Supported values : `"controller-manager" | "etcd" | "scheduler"`. Default: `scheduler` (string)
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)


@pulumi.input_type
class ClusterAlterGroupRecipientArgs:
    def __init__(__self__, *,
                 notifier_id: pulumi.Input[str],
                 default_recipient: Optional[pulumi.Input[bool]] = None,
                 notifier_type: Optional[pulumi.Input[str]] = None,
                 recipient: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] notifier_id: Recipient notifier ID (string)
        :param pulumi.Input[bool] default_recipient: Use notifier default recipient, overriding `recipient` argument if set.  Default: `false` (bool)
        :param pulumi.Input[str] notifier_type: Recipient notifier ID. Supported values : `"dingtalk" | "msteams" | "pagerduty" | "slack" | "email" | "webhook" | "wechat"` (string)
        :param pulumi.Input[str] recipient: Recipient (string)
        """
        ClusterAlterGroupRecipientArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notifier_id=notifier_id,
            default_recipient=default_recipient,
            notifier_type=notifier_type,
            recipient=recipient,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notifier_id: pulumi.Input[str],
             default_recipient: Optional[pulumi.Input[bool]] = None,
             notifier_type: Optional[pulumi.Input[str]] = None,
             recipient: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'notifierId' in kwargs:
            notifier_id = kwargs['notifierId']
        if 'defaultRecipient' in kwargs:
            default_recipient = kwargs['defaultRecipient']
        if 'notifierType' in kwargs:
            notifier_type = kwargs['notifierType']

        _setter("notifier_id", notifier_id)
        if default_recipient is not None:
            _setter("default_recipient", default_recipient)
        if notifier_type is not None:
            _setter("notifier_type", notifier_type)
        if recipient is not None:
            _setter("recipient", recipient)

    @property
    @pulumi.getter(name="notifierId")
    def notifier_id(self) -> pulumi.Input[str]:
        """
        Recipient notifier ID (string)
        """
        return pulumi.get(self, "notifier_id")

    @notifier_id.setter
    def notifier_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "notifier_id", value)

    @property
    @pulumi.getter(name="defaultRecipient")
    def default_recipient(self) -> Optional[pulumi.Input[bool]]:
        """
        Use notifier default recipient, overriding `recipient` argument if set.  Default: `false` (bool)
        """
        return pulumi.get(self, "default_recipient")

    @default_recipient.setter
    def default_recipient(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_recipient", value)

    @property
    @pulumi.getter(name="notifierType")
    def notifier_type(self) -> Optional[pulumi.Input[str]]:
        """
        Recipient notifier ID. Supported values : `"dingtalk" | "msteams" | "pagerduty" | "slack" | "email" | "webhook" | "wechat"` (string)
        """
        return pulumi.get(self, "notifier_type")

    @notifier_type.setter
    def notifier_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notifier_type", value)

    @property
    @pulumi.getter
    def recipient(self) -> Optional[pulumi.Input[str]]:
        """
        Recipient (string)
        """
        return pulumi.get(self, "recipient")

    @recipient.setter
    def recipient(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recipient", value)


@pulumi.input_type
class ClusterAlterRuleEventRuleArgs:
    def __init__(__self__, *,
                 resource_kind: pulumi.Input[str],
                 event_type: Optional[pulumi.Input[str]] = None):
        ClusterAlterRuleEventRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_kind=resource_kind,
            event_type=event_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_kind: pulumi.Input[str],
             event_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'resourceKind' in kwargs:
            resource_kind = kwargs['resourceKind']
        if 'eventType' in kwargs:
            event_type = kwargs['eventType']

        _setter("resource_kind", resource_kind)
        if event_type is not None:
            _setter("event_type", event_type)

    @property
    @pulumi.getter(name="resourceKind")
    def resource_kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_kind")

    @resource_kind.setter
    def resource_kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_kind", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_type", value)


@pulumi.input_type
class ClusterAlterRuleMetricRuleArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 threshold_value: pulumi.Input[float],
                 comparison: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: The cluster alert group description (string)
        """
        ClusterAlterRuleMetricRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            expression=expression,
            threshold_value=threshold_value,
            comparison=comparison,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: pulumi.Input[str],
             expression: pulumi.Input[str],
             threshold_value: pulumi.Input[float],
             comparison: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'thresholdValue' in kwargs:
            threshold_value = kwargs['thresholdValue']

        _setter("duration", duration)
        _setter("expression", expression)
        _setter("threshold_value", threshold_value)
        if comparison is not None:
            _setter("comparison", comparison)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold_value")

    @threshold_value.setter
    def threshold_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_value", value)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster alert group description (string)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class ClusterAlterRuleNodeRuleArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[str]] = None,
                 cpu_threshold: Optional[pulumi.Input[int]] = None,
                 mem_threshold: Optional[pulumi.Input[int]] = None,
                 node_id: Optional[pulumi.Input[str]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        ClusterAlterRuleNodeRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            condition=condition,
            cpu_threshold=cpu_threshold,
            mem_threshold=mem_threshold,
            node_id=node_id,
            selector=selector,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             condition: Optional[pulumi.Input[str]] = None,
             cpu_threshold: Optional[pulumi.Input[int]] = None,
             mem_threshold: Optional[pulumi.Input[int]] = None,
             node_id: Optional[pulumi.Input[str]] = None,
             selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpuThreshold' in kwargs:
            cpu_threshold = kwargs['cpuThreshold']
        if 'memThreshold' in kwargs:
            mem_threshold = kwargs['memThreshold']
        if 'nodeId' in kwargs:
            node_id = kwargs['nodeId']

        if condition is not None:
            _setter("condition", condition)
        if cpu_threshold is not None:
            _setter("cpu_threshold", cpu_threshold)
        if mem_threshold is not None:
            _setter("mem_threshold", mem_threshold)
        if node_id is not None:
            _setter("node_id", node_id)
        if selector is not None:
            _setter("selector", selector)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="cpuThreshold")
    def cpu_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu_threshold")

    @cpu_threshold.setter
    def cpu_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_threshold", value)

    @property
    @pulumi.getter(name="memThreshold")
    def mem_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mem_threshold")

    @mem_threshold.setter
    def mem_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_threshold", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class ClusterAlterRuleSystemServiceRuleArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input[str]] = None):
        ClusterAlterRuleSystemServiceRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            condition=condition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             condition: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if condition is not None:
            _setter("condition", condition)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)


@pulumi.input_type
class ClusterClusterAgentDeploymentCustomizationArgs:
    def __init__(__self__, *,
                 append_tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs']]]] = None,
                 override_affinity: Optional[pulumi.Input[str]] = None,
                 override_resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs']]] append_tolerations: User defined tolerations to append to agent (list)
        :param pulumi.Input[str] override_affinity: User defined affinity to override default agent affinity (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]] override_resource_requirements: User defined resource requirements to set on the agent (list)
        """
        ClusterClusterAgentDeploymentCustomizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            append_tolerations=append_tolerations,
            override_affinity=override_affinity,
            override_resource_requirements=override_resource_requirements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             append_tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs']]]] = None,
             override_affinity: Optional[pulumi.Input[str]] = None,
             override_resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'appendTolerations' in kwargs:
            append_tolerations = kwargs['appendTolerations']
        if 'overrideAffinity' in kwargs:
            override_affinity = kwargs['overrideAffinity']
        if 'overrideResourceRequirements' in kwargs:
            override_resource_requirements = kwargs['overrideResourceRequirements']

        if append_tolerations is not None:
            _setter("append_tolerations", append_tolerations)
        if override_affinity is not None:
            _setter("override_affinity", override_affinity)
        if override_resource_requirements is not None:
            _setter("override_resource_requirements", override_resource_requirements)

    @property
    @pulumi.getter(name="appendTolerations")
    def append_tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs']]]]:
        """
        User defined tolerations to append to agent (list)
        """
        return pulumi.get(self, "append_tolerations")

    @append_tolerations.setter
    def append_tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs']]]]):
        pulumi.set(self, "append_tolerations", value)

    @property
    @pulumi.getter(name="overrideAffinity")
    def override_affinity(self) -> Optional[pulumi.Input[str]]:
        """
        User defined affinity to override default agent affinity (string)
        """
        return pulumi.get(self, "override_affinity")

    @override_affinity.setter
    def override_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_affinity", value)

    @property
    @pulumi.getter(name="overrideResourceRequirements")
    def override_resource_requirements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]]:
        """
        User defined resource requirements to set on the agent (list)
        """
        return pulumi.get(self, "override_resource_requirements")

    @override_resource_requirements.setter
    def override_resource_requirements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]]):
        pulumi.set(self, "override_resource_requirements", value)


@pulumi.input_type
class ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The GKE taint key (string)
        :param pulumi.Input[str] effect: The GKE taint effect (string)
        :param pulumi.Input[str] operator: The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        :param pulumi.Input[int] seconds: The toleration seconds (int)
        :param pulumi.Input[str] value: The GKE taint value (string)
        """
        ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The GKE taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint effect (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The toleration seconds (int)
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs:
    def __init__(__self__, *,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpu_limit: The maximum CPU limit for agent (string)
        :param pulumi.Input[str] cpu_request: The minimum CPU required for agent (string)
        :param pulumi.Input[str] memory_limit: The maximum memory limit for agent (string)
        :param pulumi.Input[str] memory_request: The minimum memory required for agent (string)
        """
        ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cpu_limit=cpu_limit,
            cpu_request=cpu_request,
            memory_limit=memory_limit,
            memory_request=memory_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cpu_limit: Optional[pulumi.Input[str]] = None,
             cpu_request: Optional[pulumi.Input[str]] = None,
             memory_limit: Optional[pulumi.Input[str]] = None,
             memory_request: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpuLimit' in kwargs:
            cpu_limit = kwargs['cpuLimit']
        if 'cpuRequest' in kwargs:
            cpu_request = kwargs['cpuRequest']
        if 'memoryLimit' in kwargs:
            memory_limit = kwargs['memoryLimit']
        if 'memoryRequest' in kwargs:
            memory_request = kwargs['memoryRequest']

        if cpu_limit is not None:
            _setter("cpu_limit", cpu_limit)
        if cpu_request is not None:
            _setter("cpu_request", cpu_request)
        if memory_limit is not None:
            _setter("memory_limit", memory_limit)
        if memory_request is not None:
            _setter("memory_request", memory_request)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum CPU limit for agent (string)
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum CPU required for agent (string)
        """
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory limit for agent (string)
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum memory required for agent (string)
        """
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)


@pulumi.input_type
class ClusterClusterAuthEndpointArgs:
    def __init__(__self__, *,
                 ca_certs: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ca_certs: CA certs for the authorized cluster endpoint (string)
        :param pulumi.Input[bool] enabled: Enable the authorized cluster endpoint. Default `true` (bool)
        :param pulumi.Input[str] fqdn: FQDN for the authorized cluster endpoint (string)
        """
        ClusterClusterAuthEndpointArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ca_certs=ca_certs,
            enabled=enabled,
            fqdn=fqdn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ca_certs: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             fqdn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caCerts' in kwargs:
            ca_certs = kwargs['caCerts']

        if ca_certs is not None:
            _setter("ca_certs", ca_certs)
        if enabled is not None:
            _setter("enabled", enabled)
        if fqdn is not None:
            _setter("fqdn", fqdn)

    @property
    @pulumi.getter(name="caCerts")
    def ca_certs(self) -> Optional[pulumi.Input[str]]:
        """
        CA certs for the authorized cluster endpoint (string)
        """
        return pulumi.get(self, "ca_certs")

    @ca_certs.setter
    def ca_certs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certs", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the authorized cluster endpoint. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN for the authorized cluster endpoint (string)
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)


@pulumi.input_type
class ClusterClusterMonitoringInputArgs:
    def __init__(__self__, *,
                 answers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] answers: Key/value answers for monitor input (map)
        :param pulumi.Input[str] version: rancher-monitoring chart version (string)
        """
        ClusterClusterMonitoringInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            answers=answers,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             answers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if answers is not None:
            _setter("answers", answers)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def answers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key/value answers for monitor input (map)
        """
        return pulumi.get(self, "answers")

    @answers.setter
    def answers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "answers", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        rancher-monitoring chart version (string)
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterClusterRegistrationTokenArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 insecure_command: Optional[pulumi.Input[str]] = None,
                 insecure_node_command: Optional[pulumi.Input[str]] = None,
                 insecure_windows_node_command: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 manifest_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_command: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 windows_node_command: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for the Cluster (map)
        :param pulumi.Input[str] cluster_id: Cluster ID to apply answer (string)
        :param pulumi.Input[str] command: Command to execute in a imported k8s cluster (string)
        :param pulumi.Input[str] id: The EKS node group launch template ID (string)
        :param pulumi.Input[str] insecure_command: Insecure command to execute in a imported k8s cluster (string)
        :param pulumi.Input[str] insecure_node_command: Insecure node command to execute in a imported k8s cluster (string)
        :param pulumi.Input[str] insecure_windows_node_command: Insecure windows command to execute in a imported k8s cluster (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the Cluster (map)
        :param pulumi.Input[str] manifest_url: K8s manifest url to execute with `kubectl` to import an existing k8s cluster (string)
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[str] node_command: Node command to execute in linux nodes for custom k8s cluster (string)
        :param pulumi.Input[str] token: ACI token (string)
        :param pulumi.Input[str] windows_node_command: Node command to execute in windows nodes for custom k8s cluster (string)
        """
        ClusterClusterRegistrationTokenArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            cluster_id=cluster_id,
            command=command,
            id=id,
            insecure_command=insecure_command,
            insecure_node_command=insecure_node_command,
            insecure_windows_node_command=insecure_windows_node_command,
            labels=labels,
            manifest_url=manifest_url,
            name=name,
            node_command=node_command,
            token=token,
            windows_node_command=windows_node_command,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             cluster_id: Optional[pulumi.Input[str]] = None,
             command: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             insecure_command: Optional[pulumi.Input[str]] = None,
             insecure_node_command: Optional[pulumi.Input[str]] = None,
             insecure_windows_node_command: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             manifest_url: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_command: Optional[pulumi.Input[str]] = None,
             token: Optional[pulumi.Input[str]] = None,
             windows_node_command: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'insecureCommand' in kwargs:
            insecure_command = kwargs['insecureCommand']
        if 'insecureNodeCommand' in kwargs:
            insecure_node_command = kwargs['insecureNodeCommand']
        if 'insecureWindowsNodeCommand' in kwargs:
            insecure_windows_node_command = kwargs['insecureWindowsNodeCommand']
        if 'manifestUrl' in kwargs:
            manifest_url = kwargs['manifestUrl']
        if 'nodeCommand' in kwargs:
            node_command = kwargs['nodeCommand']
        if 'windowsNodeCommand' in kwargs:
            windows_node_command = kwargs['windowsNodeCommand']

        if annotations is not None:
            _setter("annotations", annotations)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if command is not None:
            _setter("command", command)
        if id is not None:
            _setter("id", id)
        if insecure_command is not None:
            _setter("insecure_command", insecure_command)
        if insecure_node_command is not None:
            _setter("insecure_node_command", insecure_node_command)
        if insecure_windows_node_command is not None:
            _setter("insecure_windows_node_command", insecure_windows_node_command)
        if labels is not None:
            _setter("labels", labels)
        if manifest_url is not None:
            _setter("manifest_url", manifest_url)
        if name is not None:
            _setter("name", name)
        if node_command is not None:
            _setter("node_command", node_command)
        if token is not None:
            _setter("token", token)
        if windows_node_command is not None:
            _setter("windows_node_command", windows_node_command)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations for the Cluster (map)
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID to apply answer (string)
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        """
        Command to execute in a imported k8s cluster (string)
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The EKS node group launch template ID (string)
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="insecureCommand")
    def insecure_command(self) -> Optional[pulumi.Input[str]]:
        """
        Insecure command to execute in a imported k8s cluster (string)
        """
        return pulumi.get(self, "insecure_command")

    @insecure_command.setter
    def insecure_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_command", value)

    @property
    @pulumi.getter(name="insecureNodeCommand")
    def insecure_node_command(self) -> Optional[pulumi.Input[str]]:
        """
        Insecure node command to execute in a imported k8s cluster (string)
        """
        return pulumi.get(self, "insecure_node_command")

    @insecure_node_command.setter
    def insecure_node_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_node_command", value)

    @property
    @pulumi.getter(name="insecureWindowsNodeCommand")
    def insecure_windows_node_command(self) -> Optional[pulumi.Input[str]]:
        """
        Insecure windows command to execute in a imported k8s cluster (string)
        """
        return pulumi.get(self, "insecure_windows_node_command")

    @insecure_windows_node_command.setter
    def insecure_windows_node_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_windows_node_command", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the Cluster (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="manifestUrl")
    def manifest_url(self) -> Optional[pulumi.Input[str]]:
        """
        K8s manifest url to execute with `kubectl` to import an existing k8s cluster (string)
        """
        return pulumi.get(self, "manifest_url")

    @manifest_url.setter
    def manifest_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manifest_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeCommand")
    def node_command(self) -> Optional[pulumi.Input[str]]:
        """
        Node command to execute in linux nodes for custom k8s cluster (string)
        """
        return pulumi.get(self, "node_command")

    @node_command.setter
    def node_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_command", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        ACI token (string)
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="windowsNodeCommand")
    def windows_node_command(self) -> Optional[pulumi.Input[str]]:
        """
        Node command to execute in windows nodes for custom k8s cluster (string)
        """
        return pulumi.get(self, "windows_node_command")

    @windows_node_command.setter
    def windows_node_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "windows_node_command", value)


@pulumi.input_type
class ClusterClusterTemplateAnswersArgs:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] cluster_id: Cluster ID to apply answer (string)
        :param pulumi.Input[str] project_id: Project ID to apply answer (string)
        :param pulumi.Input[Mapping[str, Any]] values: Key/values for answer (map)
        """
        ClusterClusterTemplateAnswersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_id=cluster_id,
            project_id=project_id,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_id: Optional[pulumi.Input[str]] = None,
             project_id: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']

        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if project_id is not None:
            _setter("project_id", project_id)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID to apply answer (string)
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID to apply answer (string)
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key/values for answer (map)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterClusterTemplateQuestionArgs:
    def __init__(__self__, *,
                 default: pulumi.Input[str],
                 variable: pulumi.Input[str],
                 required: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default: Default variable value (string)
        :param pulumi.Input[str] variable: Variable name (string)
        :param pulumi.Input[bool] required: Required variable. Default `false` (bool)
        :param pulumi.Input[str] type: Variable type. `boolean`, `int`, `password`, and `string` are allowed. Default `string` (string)
        """
        ClusterClusterTemplateQuestionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            variable=variable,
            required=required,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: pulumi.Input[str],
             variable: pulumi.Input[str],
             required: Optional[pulumi.Input[bool]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("default", default)
        _setter("variable", variable)
        if required is not None:
            _setter("required", required)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def default(self) -> pulumi.Input[str]:
        """
        Default variable value (string)
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: pulumi.Input[str]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def variable(self) -> pulumi.Input[str]:
        """
        Variable name (string)
        """
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: pulumi.Input[str]):
        pulumi.set(self, "variable", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Required variable. Default `false` (bool)
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Variable type. `boolean`, `int`, `password`, and `string` are allowed. Default `string` (string)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ClusterEksConfigArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 kubernetes_version: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 ami: Optional[pulumi.Input[str]] = None,
                 associate_worker_node_public_ip: Optional[pulumi.Input[bool]] = None,
                 desired_nodes: Optional[pulumi.Input[int]] = None,
                 ebs_encryption: Optional[pulumi.Input[bool]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 key_pair_name: Optional[pulumi.Input[str]] = None,
                 maximum_nodes: Optional[pulumi.Input[int]] = None,
                 minimum_nodes: Optional[pulumi.Input[int]] = None,
                 node_volume_size: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_role: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtual_network: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_key: The AWS Client ID to use (string)
        :param pulumi.Input[str] kubernetes_version: The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        :param pulumi.Input[str] secret_key: The AWS Client Secret associated with the Client ID (string)
        :param pulumi.Input[str] ami: AMI ID to use for the worker nodes instead of the default (string)
        :param pulumi.Input[bool] associate_worker_node_public_ip: Associate public ip EKS worker nodes. Default `true` (bool)
        :param pulumi.Input[int] desired_nodes: The desired number of worker nodes. For Rancher v2.3.x and above. Default `3` (int)
        :param pulumi.Input[str] instance_type: The EKS node group instance type. Default: `t3.medium` (string)
        :param pulumi.Input[str] key_pair_name: Allow user to specify key name to use. For Rancher v2.2.7 and above (string)
        :param pulumi.Input[int] maximum_nodes: The maximum number of worker nodes. Default `3` (int)
        :param pulumi.Input[int] minimum_nodes: The minimum number of worker nodes. Default `1` (int)
        :param pulumi.Input[int] node_volume_size: The volume size for each node. Default `20` (int)
        :param pulumi.Input[str] region: The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: List of security groups to use for the cluster (list)
        :param pulumi.Input[str] service_role: The AWS service role to use (string)
        :param pulumi.Input[str] session_token: A session token to use with the client key and secret if applicable (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The EKS node group subnets (list string)
        :param pulumi.Input[str] user_data: The EKS node group user data (string)
        :param pulumi.Input[str] virtual_network: The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        """
        ClusterEksConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            kubernetes_version=kubernetes_version,
            secret_key=secret_key,
            ami=ami,
            associate_worker_node_public_ip=associate_worker_node_public_ip,
            desired_nodes=desired_nodes,
            ebs_encryption=ebs_encryption,
            instance_type=instance_type,
            key_pair_name=key_pair_name,
            maximum_nodes=maximum_nodes,
            minimum_nodes=minimum_nodes,
            node_volume_size=node_volume_size,
            region=region,
            security_groups=security_groups,
            service_role=service_role,
            session_token=session_token,
            subnets=subnets,
            user_data=user_data,
            virtual_network=virtual_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: pulumi.Input[str],
             kubernetes_version: pulumi.Input[str],
             secret_key: pulumi.Input[str],
             ami: Optional[pulumi.Input[str]] = None,
             associate_worker_node_public_ip: Optional[pulumi.Input[bool]] = None,
             desired_nodes: Optional[pulumi.Input[int]] = None,
             ebs_encryption: Optional[pulumi.Input[bool]] = None,
             instance_type: Optional[pulumi.Input[str]] = None,
             key_pair_name: Optional[pulumi.Input[str]] = None,
             maximum_nodes: Optional[pulumi.Input[int]] = None,
             minimum_nodes: Optional[pulumi.Input[int]] = None,
             node_volume_size: Optional[pulumi.Input[int]] = None,
             region: Optional[pulumi.Input[str]] = None,
             security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             service_role: Optional[pulumi.Input[str]] = None,
             session_token: Optional[pulumi.Input[str]] = None,
             subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             user_data: Optional[pulumi.Input[str]] = None,
             virtual_network: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'kubernetesVersion' in kwargs:
            kubernetes_version = kwargs['kubernetesVersion']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'associateWorkerNodePublicIp' in kwargs:
            associate_worker_node_public_ip = kwargs['associateWorkerNodePublicIp']
        if 'desiredNodes' in kwargs:
            desired_nodes = kwargs['desiredNodes']
        if 'ebsEncryption' in kwargs:
            ebs_encryption = kwargs['ebsEncryption']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'keyPairName' in kwargs:
            key_pair_name = kwargs['keyPairName']
        if 'maximumNodes' in kwargs:
            maximum_nodes = kwargs['maximumNodes']
        if 'minimumNodes' in kwargs:
            minimum_nodes = kwargs['minimumNodes']
        if 'nodeVolumeSize' in kwargs:
            node_volume_size = kwargs['nodeVolumeSize']
        if 'securityGroups' in kwargs:
            security_groups = kwargs['securityGroups']
        if 'serviceRole' in kwargs:
            service_role = kwargs['serviceRole']
        if 'sessionToken' in kwargs:
            session_token = kwargs['sessionToken']
        if 'userData' in kwargs:
            user_data = kwargs['userData']
        if 'virtualNetwork' in kwargs:
            virtual_network = kwargs['virtualNetwork']

        _setter("access_key", access_key)
        _setter("kubernetes_version", kubernetes_version)
        _setter("secret_key", secret_key)
        if ami is not None:
            _setter("ami", ami)
        if associate_worker_node_public_ip is not None:
            _setter("associate_worker_node_public_ip", associate_worker_node_public_ip)
        if desired_nodes is not None:
            _setter("desired_nodes", desired_nodes)
        if ebs_encryption is not None:
            _setter("ebs_encryption", ebs_encryption)
        if instance_type is not None:
            _setter("instance_type", instance_type)
        if key_pair_name is not None:
            _setter("key_pair_name", key_pair_name)
        if maximum_nodes is not None:
            _setter("maximum_nodes", maximum_nodes)
        if minimum_nodes is not None:
            _setter("minimum_nodes", minimum_nodes)
        if node_volume_size is not None:
            _setter("node_volume_size", node_volume_size)
        if region is not None:
            _setter("region", region)
        if security_groups is not None:
            _setter("security_groups", security_groups)
        if service_role is not None:
            _setter("service_role", service_role)
        if session_token is not None:
            _setter("session_token", session_token)
        if subnets is not None:
            _setter("subnets", subnets)
        if user_data is not None:
            _setter("user_data", user_data)
        if virtual_network is not None:
            _setter("virtual_network", virtual_network)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        The AWS Client ID to use (string)
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Input[str]:
        """
        The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The AWS Client Secret associated with the Client ID (string)
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter
    def ami(self) -> Optional[pulumi.Input[str]]:
        """
        AMI ID to use for the worker nodes instead of the default (string)
        """
        return pulumi.get(self, "ami")

    @ami.setter
    def ami(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ami", value)

    @property
    @pulumi.getter(name="associateWorkerNodePublicIp")
    def associate_worker_node_public_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Associate public ip EKS worker nodes. Default `true` (bool)
        """
        return pulumi.get(self, "associate_worker_node_public_ip")

    @associate_worker_node_public_ip.setter
    def associate_worker_node_public_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "associate_worker_node_public_ip", value)

    @property
    @pulumi.getter(name="desiredNodes")
    def desired_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        The desired number of worker nodes. For Rancher v2.3.x and above. Default `3` (int)
        """
        return pulumi.get(self, "desired_nodes")

    @desired_nodes.setter
    def desired_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_nodes", value)

    @property
    @pulumi.getter(name="ebsEncryption")
    def ebs_encryption(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ebs_encryption")

    @ebs_encryption.setter
    def ebs_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ebs_encryption", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The EKS node group instance type. Default: `t3.medium` (string)
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="keyPairName")
    def key_pair_name(self) -> Optional[pulumi.Input[str]]:
        """
        Allow user to specify key name to use. For Rancher v2.2.7 and above (string)
        """
        return pulumi.get(self, "key_pair_name")

    @key_pair_name.setter
    def key_pair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pair_name", value)

    @property
    @pulumi.getter(name="maximumNodes")
    def maximum_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of worker nodes. Default `3` (int)
        """
        return pulumi.get(self, "maximum_nodes")

    @maximum_nodes.setter
    def maximum_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_nodes", value)

    @property
    @pulumi.getter(name="minimumNodes")
    def minimum_nodes(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of worker nodes. Default `1` (int)
        """
        return pulumi.get(self, "minimum_nodes")

    @minimum_nodes.setter
    def minimum_nodes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_nodes", value)

    @property
    @pulumi.getter(name="nodeVolumeSize")
    def node_volume_size(self) -> Optional[pulumi.Input[int]]:
        """
        The volume size for each node. Default `20` (int)
        """
        return pulumi.get(self, "node_volume_size")

    @node_volume_size.setter
    def node_volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_volume_size", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of security groups to use for the cluster (list)
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="serviceRole")
    def service_role(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS service role to use (string)
        """
        return pulumi.get(self, "service_role")

    @service_role.setter
    def service_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_role", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input[str]]:
        """
        A session token to use with the client key and secret if applicable (string)
        """
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_token", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The EKS node group subnets (list string)
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        The EKS node group user data (string)
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="virtualNetwork")
    def virtual_network(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        """
        return pulumi.get(self, "virtual_network")

    @virtual_network.setter
    def virtual_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_network", value)


@pulumi.input_type
class ClusterEksConfigV2Args:
    def __init__(__self__, *,
                 cloud_credential_id: pulumi.Input[str],
                 imported: Optional[pulumi.Input[bool]] = None,
                 kms_key: Optional[pulumi.Input[str]] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 logging_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupArgs']]]] = None,
                 private_access: Optional[pulumi.Input[bool]] = None,
                 public_access: Optional[pulumi.Input[bool]] = None,
                 public_access_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secrets_encryption: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_role: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] cloud_credential_id: The EKS cloud_credential id (string)
        :param pulumi.Input[bool] imported: Is GKE cluster imported? Default: `false` (bool)
        :param pulumi.Input[str] kms_key: The AWS kms key to use (string)
        :param pulumi.Input[str] kubernetes_version: The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] logging_types: The AWS cloudwatch logging types. `audit`, `api`, `scheduler`, `controllerManager` and `authenticator` values are allowed (list)
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupArgs']]] node_groups: The EKS cluster name to import. Required to create a new cluster (list)
        :param pulumi.Input[bool] private_access: The EKS cluster has private access (bool)
        :param pulumi.Input[bool] public_access: The EKS cluster has public access (bool)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_access_sources: The EKS cluster public access sources (map)
        :param pulumi.Input[str] region: The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        :param pulumi.Input[bool] secrets_encryption: Enable EKS cluster secret encryption (bool)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: List of security groups to use for the cluster (list)
        :param pulumi.Input[str] service_role: The AWS service role to use (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The EKS node group subnets (list string)
        :param pulumi.Input[Mapping[str, Any]] tags: The GKE node config tags (List)
        """
        ClusterEksConfigV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_credential_id=cloud_credential_id,
            imported=imported,
            kms_key=kms_key,
            kubernetes_version=kubernetes_version,
            logging_types=logging_types,
            name=name,
            node_groups=node_groups,
            private_access=private_access,
            public_access=public_access,
            public_access_sources=public_access_sources,
            region=region,
            secrets_encryption=secrets_encryption,
            security_groups=security_groups,
            service_role=service_role,
            subnets=subnets,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_credential_id: pulumi.Input[str],
             imported: Optional[pulumi.Input[bool]] = None,
             kms_key: Optional[pulumi.Input[str]] = None,
             kubernetes_version: Optional[pulumi.Input[str]] = None,
             logging_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupArgs']]]] = None,
             private_access: Optional[pulumi.Input[bool]] = None,
             public_access: Optional[pulumi.Input[bool]] = None,
             public_access_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             region: Optional[pulumi.Input[str]] = None,
             secrets_encryption: Optional[pulumi.Input[bool]] = None,
             security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             service_role: Optional[pulumi.Input[str]] = None,
             subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudCredentialId' in kwargs:
            cloud_credential_id = kwargs['cloudCredentialId']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']
        if 'kubernetesVersion' in kwargs:
            kubernetes_version = kwargs['kubernetesVersion']
        if 'loggingTypes' in kwargs:
            logging_types = kwargs['loggingTypes']
        if 'nodeGroups' in kwargs:
            node_groups = kwargs['nodeGroups']
        if 'privateAccess' in kwargs:
            private_access = kwargs['privateAccess']
        if 'publicAccess' in kwargs:
            public_access = kwargs['publicAccess']
        if 'publicAccessSources' in kwargs:
            public_access_sources = kwargs['publicAccessSources']
        if 'secretsEncryption' in kwargs:
            secrets_encryption = kwargs['secretsEncryption']
        if 'securityGroups' in kwargs:
            security_groups = kwargs['securityGroups']
        if 'serviceRole' in kwargs:
            service_role = kwargs['serviceRole']

        _setter("cloud_credential_id", cloud_credential_id)
        if imported is not None:
            _setter("imported", imported)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if kubernetes_version is not None:
            _setter("kubernetes_version", kubernetes_version)
        if logging_types is not None:
            _setter("logging_types", logging_types)
        if name is not None:
            _setter("name", name)
        if node_groups is not None:
            _setter("node_groups", node_groups)
        if private_access is not None:
            _setter("private_access", private_access)
        if public_access is not None:
            _setter("public_access", public_access)
        if public_access_sources is not None:
            _setter("public_access_sources", public_access_sources)
        if region is not None:
            _setter("region", region)
        if secrets_encryption is not None:
            _setter("secrets_encryption", secrets_encryption)
        if security_groups is not None:
            _setter("security_groups", security_groups)
        if service_role is not None:
            _setter("service_role", service_role)
        if subnets is not None:
            _setter("subnets", subnets)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="cloudCredentialId")
    def cloud_credential_id(self) -> pulumi.Input[str]:
        """
        The EKS cloud_credential id (string)
        """
        return pulumi.get(self, "cloud_credential_id")

    @cloud_credential_id.setter
    def cloud_credential_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_credential_id", value)

    @property
    @pulumi.getter
    def imported(self) -> Optional[pulumi.Input[bool]]:
        """
        Is GKE cluster imported? Default: `false` (bool)
        """
        return pulumi.get(self, "imported")

    @imported.setter
    def imported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "imported", value)

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS kms key to use (string)
        """
        return pulumi.get(self, "kms_key")

    @kms_key.setter
    def kms_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="loggingTypes")
    def logging_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The AWS cloudwatch logging types. `audit`, `api`, `scheduler`, `controllerManager` and `authenticator` values are allowed (list)
        """
        return pulumi.get(self, "logging_types")

    @logging_types.setter
    def logging_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "logging_types", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeGroups")
    def node_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupArgs']]]]:
        """
        The EKS cluster name to import. Required to create a new cluster (list)
        """
        return pulumi.get(self, "node_groups")

    @node_groups.setter
    def node_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupArgs']]]]):
        pulumi.set(self, "node_groups", value)

    @property
    @pulumi.getter(name="privateAccess")
    def private_access(self) -> Optional[pulumi.Input[bool]]:
        """
        The EKS cluster has private access (bool)
        """
        return pulumi.get(self, "private_access")

    @private_access.setter
    def private_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_access", value)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional[pulumi.Input[bool]]:
        """
        The EKS cluster has public access (bool)
        """
        return pulumi.get(self, "public_access")

    @public_access.setter
    def public_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_access", value)

    @property
    @pulumi.getter(name="publicAccessSources")
    def public_access_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The EKS cluster public access sources (map)
        """
        return pulumi.get(self, "public_access_sources")

    @public_access_sources.setter
    def public_access_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_access_sources", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretsEncryption")
    def secrets_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable EKS cluster secret encryption (bool)
        """
        return pulumi.get(self, "secrets_encryption")

    @secrets_encryption.setter
    def secrets_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secrets_encryption", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of security groups to use for the cluster (list)
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="serviceRole")
    def service_role(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS service role to use (string)
        """
        return pulumi.get(self, "service_role")

    @service_role.setter
    def service_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_role", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The EKS node group subnets (list string)
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The GKE node config tags (List)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ClusterEksConfigV2NodeGroupArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 desired_size: Optional[pulumi.Input[int]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 ec2_ssh_key: Optional[pulumi.Input[str]] = None,
                 gpu: Optional[pulumi.Input[bool]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 launch_templates: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupLaunchTemplateArgs']]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 node_role: Optional[pulumi.Input[str]] = None,
                 request_spot_instances: Optional[pulumi.Input[bool]] = None,
                 resource_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 spot_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[int] desired_size: The EKS node group desired size. Default: `2` (int)
        :param pulumi.Input[int] disk_size: The EKS node group disk size (Gb). Default: `20` (int)
        :param pulumi.Input[str] ec2_ssh_key: The EKS node group ssh key (string)
        :param pulumi.Input[bool] gpu: Set true to EKS use gpu. Default: `false` (bool)
        :param pulumi.Input[str] image_id: The EKS node group image ID (string)
        :param pulumi.Input[str] instance_type: The EKS node group instance type. Default: `t3.medium` (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the Cluster (map)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupLaunchTemplateArgs']]] launch_templates: The EKS node groups launch template (list Maxitem: 1)
        :param pulumi.Input[int] max_size: The EKS node group maximum size. Default `2` (int)
        :param pulumi.Input[int] min_size: The EKS node group maximum size. Default `2` (int)
        :param pulumi.Input[str] node_role: The EKS node group node role ARN. Default `""` (string)
        :param pulumi.Input[bool] request_spot_instances: Enable EKS node group request spot instances (bool)
        :param pulumi.Input[Mapping[str, Any]] resource_tags: The EKS node group resource tags (map)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] spot_instance_types: The EKS node group sport instace types (list string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The EKS node group subnets (list string)
        :param pulumi.Input[Mapping[str, Any]] tags: The GKE node config tags (List)
        :param pulumi.Input[str] user_data: The EKS node group user data (string)
        :param pulumi.Input[str] version: rancher-monitoring chart version (string)
        """
        ClusterEksConfigV2NodeGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            desired_size=desired_size,
            disk_size=disk_size,
            ec2_ssh_key=ec2_ssh_key,
            gpu=gpu,
            image_id=image_id,
            instance_type=instance_type,
            labels=labels,
            launch_templates=launch_templates,
            max_size=max_size,
            min_size=min_size,
            node_role=node_role,
            request_spot_instances=request_spot_instances,
            resource_tags=resource_tags,
            spot_instance_types=spot_instance_types,
            subnets=subnets,
            tags=tags,
            user_data=user_data,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             desired_size: Optional[pulumi.Input[int]] = None,
             disk_size: Optional[pulumi.Input[int]] = None,
             ec2_ssh_key: Optional[pulumi.Input[str]] = None,
             gpu: Optional[pulumi.Input[bool]] = None,
             image_id: Optional[pulumi.Input[str]] = None,
             instance_type: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             launch_templates: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupLaunchTemplateArgs']]]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             min_size: Optional[pulumi.Input[int]] = None,
             node_role: Optional[pulumi.Input[str]] = None,
             request_spot_instances: Optional[pulumi.Input[bool]] = None,
             resource_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             spot_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             user_data: Optional[pulumi.Input[str]] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'desiredSize' in kwargs:
            desired_size = kwargs['desiredSize']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'ec2SshKey' in kwargs:
            ec2_ssh_key = kwargs['ec2SshKey']
        if 'imageId' in kwargs:
            image_id = kwargs['imageId']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'launchTemplates' in kwargs:
            launch_templates = kwargs['launchTemplates']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']
        if 'minSize' in kwargs:
            min_size = kwargs['minSize']
        if 'nodeRole' in kwargs:
            node_role = kwargs['nodeRole']
        if 'requestSpotInstances' in kwargs:
            request_spot_instances = kwargs['requestSpotInstances']
        if 'resourceTags' in kwargs:
            resource_tags = kwargs['resourceTags']
        if 'spotInstanceTypes' in kwargs:
            spot_instance_types = kwargs['spotInstanceTypes']
        if 'userData' in kwargs:
            user_data = kwargs['userData']

        _setter("name", name)
        if desired_size is not None:
            _setter("desired_size", desired_size)
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if ec2_ssh_key is not None:
            _setter("ec2_ssh_key", ec2_ssh_key)
        if gpu is not None:
            _setter("gpu", gpu)
        if image_id is not None:
            _setter("image_id", image_id)
        if instance_type is not None:
            _setter("instance_type", instance_type)
        if labels is not None:
            _setter("labels", labels)
        if launch_templates is not None:
            _setter("launch_templates", launch_templates)
        if max_size is not None:
            _setter("max_size", max_size)
        if min_size is not None:
            _setter("min_size", min_size)
        if node_role is not None:
            _setter("node_role", node_role)
        if request_spot_instances is not None:
            _setter("request_spot_instances", request_spot_instances)
        if resource_tags is not None:
            _setter("resource_tags", resource_tags)
        if spot_instance_types is not None:
            _setter("spot_instance_types", spot_instance_types)
        if subnets is not None:
            _setter("subnets", subnets)
        if tags is not None:
            _setter("tags", tags)
        if user_data is not None:
            _setter("user_data", user_data)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="desiredSize")
    def desired_size(self) -> Optional[pulumi.Input[int]]:
        """
        The EKS node group desired size. Default: `2` (int)
        """
        return pulumi.get(self, "desired_size")

    @desired_size.setter
    def desired_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "desired_size", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        The EKS node group disk size (Gb). Default: `20` (int)
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="ec2SshKey")
    def ec2_ssh_key(self) -> Optional[pulumi.Input[str]]:
        """
        The EKS node group ssh key (string)
        """
        return pulumi.get(self, "ec2_ssh_key")

    @ec2_ssh_key.setter
    def ec2_ssh_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ec2_ssh_key", value)

    @property
    @pulumi.getter
    def gpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Set true to EKS use gpu. Default: `false` (bool)
        """
        return pulumi.get(self, "gpu")

    @gpu.setter
    def gpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gpu", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        The EKS node group image ID (string)
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The EKS node group instance type. Default: `t3.medium` (string)
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the Cluster (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="launchTemplates")
    def launch_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupLaunchTemplateArgs']]]]:
        """
        The EKS node groups launch template (list Maxitem: 1)
        """
        return pulumi.get(self, "launch_templates")

    @launch_templates.setter
    def launch_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterEksConfigV2NodeGroupLaunchTemplateArgs']]]]):
        pulumi.set(self, "launch_templates", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        The EKS node group maximum size. Default `2` (int)
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        The EKS node group maximum size. Default `2` (int)
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> Optional[pulumi.Input[str]]:
        """
        The EKS node group node role ARN. Default `""` (string)
        """
        return pulumi.get(self, "node_role")

    @node_role.setter
    def node_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_role", value)

    @property
    @pulumi.getter(name="requestSpotInstances")
    def request_spot_instances(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable EKS node group request spot instances (bool)
        """
        return pulumi.get(self, "request_spot_instances")

    @request_spot_instances.setter
    def request_spot_instances(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "request_spot_instances", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The EKS node group resource tags (map)
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="spotInstanceTypes")
    def spot_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The EKS node group sport instace types (list string)
        """
        return pulumi.get(self, "spot_instance_types")

    @spot_instance_types.setter
    def spot_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "spot_instance_types", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The EKS node group subnets (list string)
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The GKE node config tags (List)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        The EKS node group user data (string)
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        rancher-monitoring chart version (string)
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterEksConfigV2NodeGroupLaunchTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] id: The EKS node group launch template ID (string)
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[int] version: rancher-monitoring chart version (string)
        """
        ClusterEksConfigV2NodeGroupLaunchTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             version: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("id", id)
        if name is not None:
            _setter("name", name)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The EKS node group launch template ID (string)
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        rancher-monitoring chart version (string)
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterFleetAgentDeploymentCustomizationArgs:
    def __init__(__self__, *,
                 append_tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationAppendTolerationArgs']]]] = None,
                 override_affinity: Optional[pulumi.Input[str]] = None,
                 override_resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationAppendTolerationArgs']]] append_tolerations: User defined tolerations to append to agent (list)
        :param pulumi.Input[str] override_affinity: User defined affinity to override default agent affinity (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]] override_resource_requirements: User defined resource requirements to set on the agent (list)
        """
        ClusterFleetAgentDeploymentCustomizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            append_tolerations=append_tolerations,
            override_affinity=override_affinity,
            override_resource_requirements=override_resource_requirements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             append_tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationAppendTolerationArgs']]]] = None,
             override_affinity: Optional[pulumi.Input[str]] = None,
             override_resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'appendTolerations' in kwargs:
            append_tolerations = kwargs['appendTolerations']
        if 'overrideAffinity' in kwargs:
            override_affinity = kwargs['overrideAffinity']
        if 'overrideResourceRequirements' in kwargs:
            override_resource_requirements = kwargs['overrideResourceRequirements']

        if append_tolerations is not None:
            _setter("append_tolerations", append_tolerations)
        if override_affinity is not None:
            _setter("override_affinity", override_affinity)
        if override_resource_requirements is not None:
            _setter("override_resource_requirements", override_resource_requirements)

    @property
    @pulumi.getter(name="appendTolerations")
    def append_tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationAppendTolerationArgs']]]]:
        """
        User defined tolerations to append to agent (list)
        """
        return pulumi.get(self, "append_tolerations")

    @append_tolerations.setter
    def append_tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationAppendTolerationArgs']]]]):
        pulumi.set(self, "append_tolerations", value)

    @property
    @pulumi.getter(name="overrideAffinity")
    def override_affinity(self) -> Optional[pulumi.Input[str]]:
        """
        User defined affinity to override default agent affinity (string)
        """
        return pulumi.get(self, "override_affinity")

    @override_affinity.setter
    def override_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_affinity", value)

    @property
    @pulumi.getter(name="overrideResourceRequirements")
    def override_resource_requirements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]]:
        """
        User defined resource requirements to set on the agent (list)
        """
        return pulumi.get(self, "override_resource_requirements")

    @override_resource_requirements.setter
    def override_resource_requirements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]]):
        pulumi.set(self, "override_resource_requirements", value)


@pulumi.input_type
class ClusterFleetAgentDeploymentCustomizationAppendTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The GKE taint key (string)
        :param pulumi.Input[str] effect: The GKE taint effect (string)
        :param pulumi.Input[str] operator: The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        :param pulumi.Input[int] seconds: The toleration seconds (int)
        :param pulumi.Input[str] value: The GKE taint value (string)
        """
        ClusterFleetAgentDeploymentCustomizationAppendTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The GKE taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint effect (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The toleration seconds (int)
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirementArgs:
    def __init__(__self__, *,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpu_limit: The maximum CPU limit for agent (string)
        :param pulumi.Input[str] cpu_request: The minimum CPU required for agent (string)
        :param pulumi.Input[str] memory_limit: The maximum memory limit for agent (string)
        :param pulumi.Input[str] memory_request: The minimum memory required for agent (string)
        """
        ClusterFleetAgentDeploymentCustomizationOverrideResourceRequirementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cpu_limit=cpu_limit,
            cpu_request=cpu_request,
            memory_limit=memory_limit,
            memory_request=memory_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cpu_limit: Optional[pulumi.Input[str]] = None,
             cpu_request: Optional[pulumi.Input[str]] = None,
             memory_limit: Optional[pulumi.Input[str]] = None,
             memory_request: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpuLimit' in kwargs:
            cpu_limit = kwargs['cpuLimit']
        if 'cpuRequest' in kwargs:
            cpu_request = kwargs['cpuRequest']
        if 'memoryLimit' in kwargs:
            memory_limit = kwargs['memoryLimit']
        if 'memoryRequest' in kwargs:
            memory_request = kwargs['memoryRequest']

        if cpu_limit is not None:
            _setter("cpu_limit", cpu_limit)
        if cpu_request is not None:
            _setter("cpu_request", cpu_request)
        if memory_limit is not None:
            _setter("memory_limit", memory_limit)
        if memory_request is not None:
            _setter("memory_request", memory_request)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum CPU limit for agent (string)
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum CPU required for agent (string)
        """
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory limit for agent (string)
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum memory required for agent (string)
        """
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)


@pulumi.input_type
class ClusterGkeConfigArgs:
    def __init__(__self__, *,
                 cluster_ipv4_cidr: pulumi.Input[str],
                 credential: pulumi.Input[str],
                 disk_type: pulumi.Input[str],
                 image_type: pulumi.Input[str],
                 ip_policy_cluster_ipv4_cidr_block: pulumi.Input[str],
                 ip_policy_cluster_secondary_range_name: pulumi.Input[str],
                 ip_policy_node_ipv4_cidr_block: pulumi.Input[str],
                 ip_policy_services_ipv4_cidr_block: pulumi.Input[str],
                 ip_policy_services_secondary_range_name: pulumi.Input[str],
                 ip_policy_subnetwork_name: pulumi.Input[str],
                 locations: pulumi.Input[Sequence[pulumi.Input[str]]],
                 machine_type: pulumi.Input[str],
                 maintenance_window: pulumi.Input[str],
                 master_ipv4_cidr_block: pulumi.Input[str],
                 master_version: pulumi.Input[str],
                 network: pulumi.Input[str],
                 node_pool: pulumi.Input[str],
                 node_version: pulumi.Input[str],
                 oauth_scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 project_id: pulumi.Input[str],
                 service_account: pulumi.Input[str],
                 sub_network: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size_gb: Optional[pulumi.Input[int]] = None,
                 enable_alpha_feature: Optional[pulumi.Input[bool]] = None,
                 enable_auto_repair: Optional[pulumi.Input[bool]] = None,
                 enable_auto_upgrade: Optional[pulumi.Input[bool]] = None,
                 enable_horizontal_pod_autoscaling: Optional[pulumi.Input[bool]] = None,
                 enable_http_load_balancing: Optional[pulumi.Input[bool]] = None,
                 enable_kubernetes_dashboard: Optional[pulumi.Input[bool]] = None,
                 enable_legacy_abac: Optional[pulumi.Input[bool]] = None,
                 enable_master_authorized_network: Optional[pulumi.Input[bool]] = None,
                 enable_network_policy_config: Optional[pulumi.Input[bool]] = None,
                 enable_nodepool_autoscaling: Optional[pulumi.Input[bool]] = None,
                 enable_private_endpoint: Optional[pulumi.Input[bool]] = None,
                 enable_private_nodes: Optional[pulumi.Input[bool]] = None,
                 enable_stackdriver_logging: Optional[pulumi.Input[bool]] = None,
                 enable_stackdriver_monitoring: Optional[pulumi.Input[bool]] = None,
                 ip_policy_create_subnetwork: Optional[pulumi.Input[bool]] = None,
                 issue_client_certificate: Optional[pulumi.Input[bool]] = None,
                 kubernetes_dashboard: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 local_ssd_count: Optional[pulumi.Input[int]] = None,
                 master_authorized_network_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_node_count: Optional[pulumi.Input[int]] = None,
                 min_node_count: Optional[pulumi.Input[int]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 preemptible: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_ip_aliases: Optional[pulumi.Input[bool]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_ipv4_cidr: The IP address range of the container pods (string)
        :param pulumi.Input[str] credential: The contents of the GC credential file (string)
        :param pulumi.Input[str] disk_type: The GKE node config disk type (string)
        :param pulumi.Input[str] image_type: The GKE node config image type (string)
        :param pulumi.Input[str] ip_policy_cluster_ipv4_cidr_block: The IP address range for the cluster pod IPs (string)
        :param pulumi.Input[str] ip_policy_cluster_secondary_range_name: The name of the secondary range to be used for the cluster CIDR block (string)
        :param pulumi.Input[str] ip_policy_node_ipv4_cidr_block: The IP address range of the instance IPs in this cluster (string)
        :param pulumi.Input[str] ip_policy_services_ipv4_cidr_block: The IP address range of the services IPs in this cluster (string)
        :param pulumi.Input[str] ip_policy_services_secondary_range_name: The name of the secondary range to be used for the services CIDR block (string)
        :param pulumi.Input[str] ip_policy_subnetwork_name: A custom subnetwork name to be used if createSubnetwork is true (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: The GKE cluster locations (List)
        :param pulumi.Input[str] machine_type: The GKE node config machine type (string)
        :param pulumi.Input[str] maintenance_window: The GKE cluster maintenance window (string)
        :param pulumi.Input[str] master_ipv4_cidr_block: The GKE cluster private master ip v4 cidr block (string)
        :param pulumi.Input[str] master_version: Master version for GKE cluster (string)
        :param pulumi.Input[str] network: The GKE cluster network. Required for create new cluster (string)
        :param pulumi.Input[str] node_pool: The ID of the cluster node pool (string)
        :param pulumi.Input[str] node_version: Node version for GKE cluster (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] oauth_scopes: The GKE node config oauth scopes (List)
        :param pulumi.Input[str] project_id: Project ID to apply answer (string)
        :param pulumi.Input[str] service_account: The Google Cloud Platform Service Account to be used by the node VMs (string)
        :param pulumi.Input[str] sub_network: Subnetwork for GKE cluster (string)
        :param pulumi.Input[str] description: The description for Cluster (string)
        :param pulumi.Input[int] disk_size_gb: The GKE node config disk size Gb (int)
        :param pulumi.Input[bool] enable_alpha_feature: To enable Kubernetes alpha feature. Default `true` (bool)
        :param pulumi.Input[bool] enable_auto_repair: Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
        :param pulumi.Input[bool] enable_auto_upgrade: Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
        :param pulumi.Input[bool] enable_horizontal_pod_autoscaling: Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
        :param pulumi.Input[bool] enable_http_load_balancing: Enable HTTP load balancing on GKE cluster. Default `true` (bool)
        :param pulumi.Input[bool] enable_kubernetes_dashboard: Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
        :param pulumi.Input[bool] enable_legacy_abac: Whether to enable legacy abac on the cluster. Default `false` (bool)
        :param pulumi.Input[bool] enable_master_authorized_network: Enable master authorized network. Set to `true` if `master_authorized_network_cidr_blocks` is set. Default `false` (bool)
        :param pulumi.Input[bool] enable_network_policy_config: Enable network policy config for the cluster. Default `true` (bool)
        :param pulumi.Input[bool] enable_nodepool_autoscaling: Enable nodepool autoscaling. Default `false` (bool)
        :param pulumi.Input[bool] enable_private_endpoint: Enable GKE cluster private endpoint. Default: `false` (bool)
        :param pulumi.Input[bool] enable_private_nodes: Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
        :param pulumi.Input[bool] enable_stackdriver_logging: Enable stackdriver monitoring. Default `true` (bool)
        :param pulumi.Input[bool] enable_stackdriver_monitoring: Enable stackdriver monitoring on GKE cluster (bool)
        :param pulumi.Input[bool] ip_policy_create_subnetwork: Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
        :param pulumi.Input[bool] issue_client_certificate: Issue a client certificate. Default `false` (bool)
        :param pulumi.Input[bool] kubernetes_dashboard: Enable the Kubernetes dashboard. Default `false` (bool)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the Cluster (map)
        :param pulumi.Input[int] local_ssd_count: The GKE node config local ssd count (int)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] master_authorized_network_cidr_blocks: Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
        :param pulumi.Input[int] max_node_count: The GKE node pool config max node count (int)
        :param pulumi.Input[int] min_node_count: The GKE node pool config min node count (int)
        :param pulumi.Input[int] node_count: Node count for GKE cluster. Default `3` (int)
        :param pulumi.Input[bool] preemptible: Enable GKE node config preemptible. Default: `false` (bool)
        :param pulumi.Input[str] region: The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        :param pulumi.Input[Mapping[str, Any]] resource_labels: The map of Kubernetes labels to be applied to each cluster (map)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] taints: The GKE node config taints (List)
        :param pulumi.Input[bool] use_ip_aliases: Use GKE ip aliases? Default: `true` (bool)
        :param pulumi.Input[str] zone: The GKE cluster zone. Required if `region` not set (string)
        """
        ClusterGkeConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_ipv4_cidr=cluster_ipv4_cidr,
            credential=credential,
            disk_type=disk_type,
            image_type=image_type,
            ip_policy_cluster_ipv4_cidr_block=ip_policy_cluster_ipv4_cidr_block,
            ip_policy_cluster_secondary_range_name=ip_policy_cluster_secondary_range_name,
            ip_policy_node_ipv4_cidr_block=ip_policy_node_ipv4_cidr_block,
            ip_policy_services_ipv4_cidr_block=ip_policy_services_ipv4_cidr_block,
            ip_policy_services_secondary_range_name=ip_policy_services_secondary_range_name,
            ip_policy_subnetwork_name=ip_policy_subnetwork_name,
            locations=locations,
            machine_type=machine_type,
            maintenance_window=maintenance_window,
            master_ipv4_cidr_block=master_ipv4_cidr_block,
            master_version=master_version,
            network=network,
            node_pool=node_pool,
            node_version=node_version,
            oauth_scopes=oauth_scopes,
            project_id=project_id,
            service_account=service_account,
            sub_network=sub_network,
            description=description,
            disk_size_gb=disk_size_gb,
            enable_alpha_feature=enable_alpha_feature,
            enable_auto_repair=enable_auto_repair,
            enable_auto_upgrade=enable_auto_upgrade,
            enable_horizontal_pod_autoscaling=enable_horizontal_pod_autoscaling,
            enable_http_load_balancing=enable_http_load_balancing,
            enable_kubernetes_dashboard=enable_kubernetes_dashboard,
            enable_legacy_abac=enable_legacy_abac,
            enable_master_authorized_network=enable_master_authorized_network,
            enable_network_policy_config=enable_network_policy_config,
            enable_nodepool_autoscaling=enable_nodepool_autoscaling,
            enable_private_endpoint=enable_private_endpoint,
            enable_private_nodes=enable_private_nodes,
            enable_stackdriver_logging=enable_stackdriver_logging,
            enable_stackdriver_monitoring=enable_stackdriver_monitoring,
            ip_policy_create_subnetwork=ip_policy_create_subnetwork,
            issue_client_certificate=issue_client_certificate,
            kubernetes_dashboard=kubernetes_dashboard,
            labels=labels,
            local_ssd_count=local_ssd_count,
            master_authorized_network_cidr_blocks=master_authorized_network_cidr_blocks,
            max_node_count=max_node_count,
            min_node_count=min_node_count,
            node_count=node_count,
            preemptible=preemptible,
            region=region,
            resource_labels=resource_labels,
            taints=taints,
            use_ip_aliases=use_ip_aliases,
            zone=zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_ipv4_cidr: pulumi.Input[str],
             credential: pulumi.Input[str],
             disk_type: pulumi.Input[str],
             image_type: pulumi.Input[str],
             ip_policy_cluster_ipv4_cidr_block: pulumi.Input[str],
             ip_policy_cluster_secondary_range_name: pulumi.Input[str],
             ip_policy_node_ipv4_cidr_block: pulumi.Input[str],
             ip_policy_services_ipv4_cidr_block: pulumi.Input[str],
             ip_policy_services_secondary_range_name: pulumi.Input[str],
             ip_policy_subnetwork_name: pulumi.Input[str],
             locations: pulumi.Input[Sequence[pulumi.Input[str]]],
             machine_type: pulumi.Input[str],
             maintenance_window: pulumi.Input[str],
             master_ipv4_cidr_block: pulumi.Input[str],
             master_version: pulumi.Input[str],
             network: pulumi.Input[str],
             node_pool: pulumi.Input[str],
             node_version: pulumi.Input[str],
             oauth_scopes: pulumi.Input[Sequence[pulumi.Input[str]]],
             project_id: pulumi.Input[str],
             service_account: pulumi.Input[str],
             sub_network: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             disk_size_gb: Optional[pulumi.Input[int]] = None,
             enable_alpha_feature: Optional[pulumi.Input[bool]] = None,
             enable_auto_repair: Optional[pulumi.Input[bool]] = None,
             enable_auto_upgrade: Optional[pulumi.Input[bool]] = None,
             enable_horizontal_pod_autoscaling: Optional[pulumi.Input[bool]] = None,
             enable_http_load_balancing: Optional[pulumi.Input[bool]] = None,
             enable_kubernetes_dashboard: Optional[pulumi.Input[bool]] = None,
             enable_legacy_abac: Optional[pulumi.Input[bool]] = None,
             enable_master_authorized_network: Optional[pulumi.Input[bool]] = None,
             enable_network_policy_config: Optional[pulumi.Input[bool]] = None,
             enable_nodepool_autoscaling: Optional[pulumi.Input[bool]] = None,
             enable_private_endpoint: Optional[pulumi.Input[bool]] = None,
             enable_private_nodes: Optional[pulumi.Input[bool]] = None,
             enable_stackdriver_logging: Optional[pulumi.Input[bool]] = None,
             enable_stackdriver_monitoring: Optional[pulumi.Input[bool]] = None,
             ip_policy_create_subnetwork: Optional[pulumi.Input[bool]] = None,
             issue_client_certificate: Optional[pulumi.Input[bool]] = None,
             kubernetes_dashboard: Optional[pulumi.Input[bool]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             local_ssd_count: Optional[pulumi.Input[int]] = None,
             master_authorized_network_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             max_node_count: Optional[pulumi.Input[int]] = None,
             min_node_count: Optional[pulumi.Input[int]] = None,
             node_count: Optional[pulumi.Input[int]] = None,
             preemptible: Optional[pulumi.Input[bool]] = None,
             region: Optional[pulumi.Input[str]] = None,
             resource_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             use_ip_aliases: Optional[pulumi.Input[bool]] = None,
             zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterIpv4Cidr' in kwargs:
            cluster_ipv4_cidr = kwargs['clusterIpv4Cidr']
        if 'diskType' in kwargs:
            disk_type = kwargs['diskType']
        if 'imageType' in kwargs:
            image_type = kwargs['imageType']
        if 'ipPolicyClusterIpv4CidrBlock' in kwargs:
            ip_policy_cluster_ipv4_cidr_block = kwargs['ipPolicyClusterIpv4CidrBlock']
        if 'ipPolicyClusterSecondaryRangeName' in kwargs:
            ip_policy_cluster_secondary_range_name = kwargs['ipPolicyClusterSecondaryRangeName']
        if 'ipPolicyNodeIpv4CidrBlock' in kwargs:
            ip_policy_node_ipv4_cidr_block = kwargs['ipPolicyNodeIpv4CidrBlock']
        if 'ipPolicyServicesIpv4CidrBlock' in kwargs:
            ip_policy_services_ipv4_cidr_block = kwargs['ipPolicyServicesIpv4CidrBlock']
        if 'ipPolicyServicesSecondaryRangeName' in kwargs:
            ip_policy_services_secondary_range_name = kwargs['ipPolicyServicesSecondaryRangeName']
        if 'ipPolicySubnetworkName' in kwargs:
            ip_policy_subnetwork_name = kwargs['ipPolicySubnetworkName']
        if 'machineType' in kwargs:
            machine_type = kwargs['machineType']
        if 'maintenanceWindow' in kwargs:
            maintenance_window = kwargs['maintenanceWindow']
        if 'masterIpv4CidrBlock' in kwargs:
            master_ipv4_cidr_block = kwargs['masterIpv4CidrBlock']
        if 'masterVersion' in kwargs:
            master_version = kwargs['masterVersion']
        if 'nodePool' in kwargs:
            node_pool = kwargs['nodePool']
        if 'nodeVersion' in kwargs:
            node_version = kwargs['nodeVersion']
        if 'oauthScopes' in kwargs:
            oauth_scopes = kwargs['oauthScopes']
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'serviceAccount' in kwargs:
            service_account = kwargs['serviceAccount']
        if 'subNetwork' in kwargs:
            sub_network = kwargs['subNetwork']
        if 'diskSizeGb' in kwargs:
            disk_size_gb = kwargs['diskSizeGb']
        if 'enableAlphaFeature' in kwargs:
            enable_alpha_feature = kwargs['enableAlphaFeature']
        if 'enableAutoRepair' in kwargs:
            enable_auto_repair = kwargs['enableAutoRepair']
        if 'enableAutoUpgrade' in kwargs:
            enable_auto_upgrade = kwargs['enableAutoUpgrade']
        if 'enableHorizontalPodAutoscaling' in kwargs:
            enable_horizontal_pod_autoscaling = kwargs['enableHorizontalPodAutoscaling']
        if 'enableHttpLoadBalancing' in kwargs:
            enable_http_load_balancing = kwargs['enableHttpLoadBalancing']
        if 'enableKubernetesDashboard' in kwargs:
            enable_kubernetes_dashboard = kwargs['enableKubernetesDashboard']
        if 'enableLegacyAbac' in kwargs:
            enable_legacy_abac = kwargs['enableLegacyAbac']
        if 'enableMasterAuthorizedNetwork' in kwargs:
            enable_master_authorized_network = kwargs['enableMasterAuthorizedNetwork']
        if 'enableNetworkPolicyConfig' in kwargs:
            enable_network_policy_config = kwargs['enableNetworkPolicyConfig']
        if 'enableNodepoolAutoscaling' in kwargs:
            enable_nodepool_autoscaling = kwargs['enableNodepoolAutoscaling']
        if 'enablePrivateEndpoint' in kwargs:
            enable_private_endpoint = kwargs['enablePrivateEndpoint']
        if 'enablePrivateNodes' in kwargs:
            enable_private_nodes = kwargs['enablePrivateNodes']
        if 'enableStackdriverLogging' in kwargs:
            enable_stackdriver_logging = kwargs['enableStackdriverLogging']
        if 'enableStackdriverMonitoring' in kwargs:
            enable_stackdriver_monitoring = kwargs['enableStackdriverMonitoring']
        if 'ipPolicyCreateSubnetwork' in kwargs:
            ip_policy_create_subnetwork = kwargs['ipPolicyCreateSubnetwork']
        if 'issueClientCertificate' in kwargs:
            issue_client_certificate = kwargs['issueClientCertificate']
        if 'kubernetesDashboard' in kwargs:
            kubernetes_dashboard = kwargs['kubernetesDashboard']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'masterAuthorizedNetworkCidrBlocks' in kwargs:
            master_authorized_network_cidr_blocks = kwargs['masterAuthorizedNetworkCidrBlocks']
        if 'maxNodeCount' in kwargs:
            max_node_count = kwargs['maxNodeCount']
        if 'minNodeCount' in kwargs:
            min_node_count = kwargs['minNodeCount']
        if 'nodeCount' in kwargs:
            node_count = kwargs['nodeCount']
        if 'resourceLabels' in kwargs:
            resource_labels = kwargs['resourceLabels']
        if 'useIpAliases' in kwargs:
            use_ip_aliases = kwargs['useIpAliases']

        _setter("cluster_ipv4_cidr", cluster_ipv4_cidr)
        _setter("credential", credential)
        _setter("disk_type", disk_type)
        _setter("image_type", image_type)
        _setter("ip_policy_cluster_ipv4_cidr_block", ip_policy_cluster_ipv4_cidr_block)
        _setter("ip_policy_cluster_secondary_range_name", ip_policy_cluster_secondary_range_name)
        _setter("ip_policy_node_ipv4_cidr_block", ip_policy_node_ipv4_cidr_block)
        _setter("ip_policy_services_ipv4_cidr_block", ip_policy_services_ipv4_cidr_block)
        _setter("ip_policy_services_secondary_range_name", ip_policy_services_secondary_range_name)
        _setter("ip_policy_subnetwork_name", ip_policy_subnetwork_name)
        _setter("locations", locations)
        _setter("machine_type", machine_type)
        _setter("maintenance_window", maintenance_window)
        _setter("master_ipv4_cidr_block", master_ipv4_cidr_block)
        _setter("master_version", master_version)
        _setter("network", network)
        _setter("node_pool", node_pool)
        _setter("node_version", node_version)
        _setter("oauth_scopes", oauth_scopes)
        _setter("project_id", project_id)
        _setter("service_account", service_account)
        _setter("sub_network", sub_network)
        if description is not None:
            _setter("description", description)
        if disk_size_gb is not None:
            _setter("disk_size_gb", disk_size_gb)
        if enable_alpha_feature is not None:
            _setter("enable_alpha_feature", enable_alpha_feature)
        if enable_auto_repair is not None:
            _setter("enable_auto_repair", enable_auto_repair)
        if enable_auto_upgrade is not None:
            _setter("enable_auto_upgrade", enable_auto_upgrade)
        if enable_horizontal_pod_autoscaling is not None:
            _setter("enable_horizontal_pod_autoscaling", enable_horizontal_pod_autoscaling)
        if enable_http_load_balancing is not None:
            _setter("enable_http_load_balancing", enable_http_load_balancing)
        if enable_kubernetes_dashboard is not None:
            _setter("enable_kubernetes_dashboard", enable_kubernetes_dashboard)
        if enable_legacy_abac is not None:
            _setter("enable_legacy_abac", enable_legacy_abac)
        if enable_master_authorized_network is not None:
            _setter("enable_master_authorized_network", enable_master_authorized_network)
        if enable_network_policy_config is not None:
            _setter("enable_network_policy_config", enable_network_policy_config)
        if enable_nodepool_autoscaling is not None:
            _setter("enable_nodepool_autoscaling", enable_nodepool_autoscaling)
        if enable_private_endpoint is not None:
            _setter("enable_private_endpoint", enable_private_endpoint)
        if enable_private_nodes is not None:
            _setter("enable_private_nodes", enable_private_nodes)
        if enable_stackdriver_logging is not None:
            _setter("enable_stackdriver_logging", enable_stackdriver_logging)
        if enable_stackdriver_monitoring is not None:
            _setter("enable_stackdriver_monitoring", enable_stackdriver_monitoring)
        if ip_policy_create_subnetwork is not None:
            _setter("ip_policy_create_subnetwork", ip_policy_create_subnetwork)
        if issue_client_certificate is not None:
            _setter("issue_client_certificate", issue_client_certificate)
        if kubernetes_dashboard is not None:
            _setter("kubernetes_dashboard", kubernetes_dashboard)
        if labels is not None:
            _setter("labels", labels)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if master_authorized_network_cidr_blocks is not None:
            _setter("master_authorized_network_cidr_blocks", master_authorized_network_cidr_blocks)
        if max_node_count is not None:
            _setter("max_node_count", max_node_count)
        if min_node_count is not None:
            _setter("min_node_count", min_node_count)
        if node_count is not None:
            _setter("node_count", node_count)
        if preemptible is not None:
            _setter("preemptible", preemptible)
        if region is not None:
            _setter("region", region)
        if resource_labels is not None:
            _setter("resource_labels", resource_labels)
        if taints is not None:
            _setter("taints", taints)
        if use_ip_aliases is not None:
            _setter("use_ip_aliases", use_ip_aliases)
        if zone is not None:
            _setter("zone", zone)

    @property
    @pulumi.getter(name="clusterIpv4Cidr")
    def cluster_ipv4_cidr(self) -> pulumi.Input[str]:
        """
        The IP address range of the container pods (string)
        """
        return pulumi.get(self, "cluster_ipv4_cidr")

    @cluster_ipv4_cidr.setter
    def cluster_ipv4_cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_ipv4_cidr", value)

    @property
    @pulumi.getter
    def credential(self) -> pulumi.Input[str]:
        """
        The contents of the GC credential file (string)
        """
        return pulumi.get(self, "credential")

    @credential.setter
    def credential(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[str]:
        """
        The GKE node config disk type (string)
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Input[str]:
        """
        The GKE node config image type (string)
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_type", value)

    @property
    @pulumi.getter(name="ipPolicyClusterIpv4CidrBlock")
    def ip_policy_cluster_ipv4_cidr_block(self) -> pulumi.Input[str]:
        """
        The IP address range for the cluster pod IPs (string)
        """
        return pulumi.get(self, "ip_policy_cluster_ipv4_cidr_block")

    @ip_policy_cluster_ipv4_cidr_block.setter
    def ip_policy_cluster_ipv4_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_policy_cluster_ipv4_cidr_block", value)

    @property
    @pulumi.getter(name="ipPolicyClusterSecondaryRangeName")
    def ip_policy_cluster_secondary_range_name(self) -> pulumi.Input[str]:
        """
        The name of the secondary range to be used for the cluster CIDR block (string)
        """
        return pulumi.get(self, "ip_policy_cluster_secondary_range_name")

    @ip_policy_cluster_secondary_range_name.setter
    def ip_policy_cluster_secondary_range_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_policy_cluster_secondary_range_name", value)

    @property
    @pulumi.getter(name="ipPolicyNodeIpv4CidrBlock")
    def ip_policy_node_ipv4_cidr_block(self) -> pulumi.Input[str]:
        """
        The IP address range of the instance IPs in this cluster (string)
        """
        return pulumi.get(self, "ip_policy_node_ipv4_cidr_block")

    @ip_policy_node_ipv4_cidr_block.setter
    def ip_policy_node_ipv4_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_policy_node_ipv4_cidr_block", value)

    @property
    @pulumi.getter(name="ipPolicyServicesIpv4CidrBlock")
    def ip_policy_services_ipv4_cidr_block(self) -> pulumi.Input[str]:
        """
        The IP address range of the services IPs in this cluster (string)
        """
        return pulumi.get(self, "ip_policy_services_ipv4_cidr_block")

    @ip_policy_services_ipv4_cidr_block.setter
    def ip_policy_services_ipv4_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_policy_services_ipv4_cidr_block", value)

    @property
    @pulumi.getter(name="ipPolicyServicesSecondaryRangeName")
    def ip_policy_services_secondary_range_name(self) -> pulumi.Input[str]:
        """
        The name of the secondary range to be used for the services CIDR block (string)
        """
        return pulumi.get(self, "ip_policy_services_secondary_range_name")

    @ip_policy_services_secondary_range_name.setter
    def ip_policy_services_secondary_range_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_policy_services_secondary_range_name", value)

    @property
    @pulumi.getter(name="ipPolicySubnetworkName")
    def ip_policy_subnetwork_name(self) -> pulumi.Input[str]:
        """
        A custom subnetwork name to be used if createSubnetwork is true (string)
        """
        return pulumi.get(self, "ip_policy_subnetwork_name")

    @ip_policy_subnetwork_name.setter
    def ip_policy_subnetwork_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_policy_subnetwork_name", value)

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The GKE cluster locations (List)
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[str]:
        """
        The GKE node config machine type (string)
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Input[str]:
        """
        The GKE cluster maintenance window (string)
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: pulumi.Input[str]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="masterIpv4CidrBlock")
    def master_ipv4_cidr_block(self) -> pulumi.Input[str]:
        """
        The GKE cluster private master ip v4 cidr block (string)
        """
        return pulumi.get(self, "master_ipv4_cidr_block")

    @master_ipv4_cidr_block.setter
    def master_ipv4_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_ipv4_cidr_block", value)

    @property
    @pulumi.getter(name="masterVersion")
    def master_version(self) -> pulumi.Input[str]:
        """
        Master version for GKE cluster (string)
        """
        return pulumi.get(self, "master_version")

    @master_version.setter
    def master_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_version", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        """
        The GKE cluster network. Required for create new cluster (string)
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="nodePool")
    def node_pool(self) -> pulumi.Input[str]:
        """
        The ID of the cluster node pool (string)
        """
        return pulumi.get(self, "node_pool")

    @node_pool.setter
    def node_pool(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_pool", value)

    @property
    @pulumi.getter(name="nodeVersion")
    def node_version(self) -> pulumi.Input[str]:
        """
        Node version for GKE cluster (string)
        """
        return pulumi.get(self, "node_version")

    @node_version.setter
    def node_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_version", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The GKE node config oauth scopes (List)
        """
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID to apply answer (string)
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Input[str]:
        """
        The Google Cloud Platform Service Account to be used by the node VMs (string)
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="subNetwork")
    def sub_network(self) -> pulumi.Input[str]:
        """
        Subnetwork for GKE cluster (string)
        """
        return pulumi.get(self, "sub_network")

    @sub_network.setter
    def sub_network(self, value: pulumi.Input[str]):
        pulumi.set(self, "sub_network", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for Cluster (string)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        The GKE node config disk size Gb (int)
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="enableAlphaFeature")
    def enable_alpha_feature(self) -> Optional[pulumi.Input[bool]]:
        """
        To enable Kubernetes alpha feature. Default `true` (bool)
        """
        return pulumi.get(self, "enable_alpha_feature")

    @enable_alpha_feature.setter
    def enable_alpha_feature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_alpha_feature", value)

    @property
    @pulumi.getter(name="enableAutoRepair")
    def enable_auto_repair(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
        """
        return pulumi.get(self, "enable_auto_repair")

    @enable_auto_repair.setter
    def enable_auto_repair(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto_repair", value)

    @property
    @pulumi.getter(name="enableAutoUpgrade")
    def enable_auto_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
        """
        return pulumi.get(self, "enable_auto_upgrade")

    @enable_auto_upgrade.setter
    def enable_auto_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_auto_upgrade", value)

    @property
    @pulumi.getter(name="enableHorizontalPodAutoscaling")
    def enable_horizontal_pod_autoscaling(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
        """
        return pulumi.get(self, "enable_horizontal_pod_autoscaling")

    @enable_horizontal_pod_autoscaling.setter
    def enable_horizontal_pod_autoscaling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_horizontal_pod_autoscaling", value)

    @property
    @pulumi.getter(name="enableHttpLoadBalancing")
    def enable_http_load_balancing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable HTTP load balancing on GKE cluster. Default `true` (bool)
        """
        return pulumi.get(self, "enable_http_load_balancing")

    @enable_http_load_balancing.setter
    def enable_http_load_balancing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_http_load_balancing", value)

    @property
    @pulumi.getter(name="enableKubernetesDashboard")
    def enable_kubernetes_dashboard(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
        """
        return pulumi.get(self, "enable_kubernetes_dashboard")

    @enable_kubernetes_dashboard.setter
    def enable_kubernetes_dashboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_kubernetes_dashboard", value)

    @property
    @pulumi.getter(name="enableLegacyAbac")
    def enable_legacy_abac(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable legacy abac on the cluster. Default `false` (bool)
        """
        return pulumi.get(self, "enable_legacy_abac")

    @enable_legacy_abac.setter
    def enable_legacy_abac(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_legacy_abac", value)

    @property
    @pulumi.getter(name="enableMasterAuthorizedNetwork")
    def enable_master_authorized_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable master authorized network. Set to `true` if `master_authorized_network_cidr_blocks` is set. Default `false` (bool)
        """
        return pulumi.get(self, "enable_master_authorized_network")

    @enable_master_authorized_network.setter
    def enable_master_authorized_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_master_authorized_network", value)

    @property
    @pulumi.getter(name="enableNetworkPolicyConfig")
    def enable_network_policy_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable network policy config for the cluster. Default `true` (bool)
        """
        return pulumi.get(self, "enable_network_policy_config")

    @enable_network_policy_config.setter
    def enable_network_policy_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_network_policy_config", value)

    @property
    @pulumi.getter(name="enableNodepoolAutoscaling")
    def enable_nodepool_autoscaling(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable nodepool autoscaling. Default `false` (bool)
        """
        return pulumi.get(self, "enable_nodepool_autoscaling")

    @enable_nodepool_autoscaling.setter
    def enable_nodepool_autoscaling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_nodepool_autoscaling", value)

    @property
    @pulumi.getter(name="enablePrivateEndpoint")
    def enable_private_endpoint(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GKE cluster private endpoint. Default: `false` (bool)
        """
        return pulumi.get(self, "enable_private_endpoint")

    @enable_private_endpoint.setter
    def enable_private_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_private_endpoint", value)

    @property
    @pulumi.getter(name="enablePrivateNodes")
    def enable_private_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
        """
        return pulumi.get(self, "enable_private_nodes")

    @enable_private_nodes.setter
    def enable_private_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_private_nodes", value)

    @property
    @pulumi.getter(name="enableStackdriverLogging")
    def enable_stackdriver_logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable stackdriver monitoring. Default `true` (bool)
        """
        return pulumi.get(self, "enable_stackdriver_logging")

    @enable_stackdriver_logging.setter
    def enable_stackdriver_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_stackdriver_logging", value)

    @property
    @pulumi.getter(name="enableStackdriverMonitoring")
    def enable_stackdriver_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable stackdriver monitoring on GKE cluster (bool)
        """
        return pulumi.get(self, "enable_stackdriver_monitoring")

    @enable_stackdriver_monitoring.setter
    def enable_stackdriver_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_stackdriver_monitoring", value)

    @property
    @pulumi.getter(name="ipPolicyCreateSubnetwork")
    def ip_policy_create_subnetwork(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
        """
        return pulumi.get(self, "ip_policy_create_subnetwork")

    @ip_policy_create_subnetwork.setter
    def ip_policy_create_subnetwork(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_policy_create_subnetwork", value)

    @property
    @pulumi.getter(name="issueClientCertificate")
    def issue_client_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        Issue a client certificate. Default `false` (bool)
        """
        return pulumi.get(self, "issue_client_certificate")

    @issue_client_certificate.setter
    def issue_client_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "issue_client_certificate", value)

    @property
    @pulumi.getter(name="kubernetesDashboard")
    def kubernetes_dashboard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the Kubernetes dashboard. Default `false` (bool)
        """
        return pulumi.get(self, "kubernetes_dashboard")

    @kubernetes_dashboard.setter
    def kubernetes_dashboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kubernetes_dashboard", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the Cluster (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[pulumi.Input[int]]:
        """
        The GKE node config local ssd count (int)
        """
        return pulumi.get(self, "local_ssd_count")

    @local_ssd_count.setter
    def local_ssd_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_ssd_count", value)

    @property
    @pulumi.getter(name="masterAuthorizedNetworkCidrBlocks")
    def master_authorized_network_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
        """
        return pulumi.get(self, "master_authorized_network_cidr_blocks")

    @master_authorized_network_cidr_blocks.setter
    def master_authorized_network_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "master_authorized_network_cidr_blocks", value)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The GKE node pool config max node count (int)
        """
        return pulumi.get(self, "max_node_count")

    @max_node_count.setter
    def max_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_node_count", value)

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The GKE node pool config min node count (int)
        """
        return pulumi.get(self, "min_node_count")

    @min_node_count.setter
    def min_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_node_count", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        Node count for GKE cluster. Default `3` (int)
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GKE node config preemptible. Default: `false` (bool)
        """
        return pulumi.get(self, "preemptible")

    @preemptible.setter
    def preemptible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preemptible", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="resourceLabels")
    def resource_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The map of Kubernetes labels to be applied to each cluster (map)
        """
        return pulumi.get(self, "resource_labels")

    @resource_labels.setter
    def resource_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resource_labels", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The GKE node config taints (List)
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="useIpAliases")
    def use_ip_aliases(self) -> Optional[pulumi.Input[bool]]:
        """
        Use GKE ip aliases? Default: `true` (bool)
        """
        return pulumi.get(self, "use_ip_aliases")

    @use_ip_aliases.setter
    def use_ip_aliases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ip_aliases", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster zone. Required if `region` not set (string)
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class ClusterGkeConfigV2Args:
    def __init__(__self__, *,
                 google_credential_secret: pulumi.Input[str],
                 name: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 cluster_addons: Optional[pulumi.Input['ClusterGkeConfigV2ClusterAddonsArgs']] = None,
                 cluster_ipv4_cidr_block: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_kubernetes_alpha: Optional[pulumi.Input[bool]] = None,
                 imported: Optional[pulumi.Input[bool]] = None,
                 ip_allocation_policy: Optional[pulumi.Input['ClusterGkeConfigV2IpAllocationPolicyArgs']] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logging_service: Optional[pulumi.Input[str]] = None,
                 maintenance_window: Optional[pulumi.Input[str]] = None,
                 master_authorized_networks_config: Optional[pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigArgs']] = None,
                 monitoring_service: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 network_policy_enabled: Optional[pulumi.Input[bool]] = None,
                 node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolArgs']]]] = None,
                 private_cluster_config: Optional[pulumi.Input['ClusterGkeConfigV2PrivateClusterConfigArgs']] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 subnetwork: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] google_credential_secret: Google credential secret (string)
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[str] project_id: Project ID to apply answer (string)
        :param pulumi.Input['ClusterGkeConfigV2ClusterAddonsArgs'] cluster_addons: The GKE cluster addons (List maxitems:1)
        :param pulumi.Input[str] cluster_ipv4_cidr_block: The GKE cluster ip v4 allocation cidr block (string)
        :param pulumi.Input[str] description: The description for Cluster (string)
        :param pulumi.Input[bool] enable_kubernetes_alpha: Enable Kubernetes alpha. Default: `false` (bool)
        :param pulumi.Input[bool] imported: Is GKE cluster imported? Default: `false` (bool)
        :param pulumi.Input['ClusterGkeConfigV2IpAllocationPolicyArgs'] ip_allocation_policy: The GKE ip allocation policy (List maxitems:1)
        :param pulumi.Input[str] kubernetes_version: The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the Cluster (map)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: The GKE cluster locations (List)
        :param pulumi.Input[str] logging_service: The GKE cluster logging service (string)
        :param pulumi.Input[str] maintenance_window: The GKE cluster maintenance window (string)
        :param pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigArgs'] master_authorized_networks_config: The GKE cluster master authorized networks config (List maxitems:1)
        :param pulumi.Input[str] monitoring_service: The GKE cluster monitoring service (string)
        :param pulumi.Input[str] network: The GKE cluster network. Required for create new cluster (string)
        :param pulumi.Input[bool] network_policy_enabled: Is GKE cluster network policy enabled? Default: `false` (bool)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolArgs']]] node_pools: The GKE cluster node pools. Required for create new cluster (List)
        :param pulumi.Input['ClusterGkeConfigV2PrivateClusterConfigArgs'] private_cluster_config: The GKE private cluster config (List maxitems:1)
        :param pulumi.Input[str] region: The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        :param pulumi.Input[str] subnetwork: The GKE cluster subnetwork. Required for create new cluster (string)
        :param pulumi.Input[str] zone: The GKE cluster zone. Required if `region` not set (string)
        """
        ClusterGkeConfigV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            google_credential_secret=google_credential_secret,
            name=name,
            project_id=project_id,
            cluster_addons=cluster_addons,
            cluster_ipv4_cidr_block=cluster_ipv4_cidr_block,
            description=description,
            enable_kubernetes_alpha=enable_kubernetes_alpha,
            imported=imported,
            ip_allocation_policy=ip_allocation_policy,
            kubernetes_version=kubernetes_version,
            labels=labels,
            locations=locations,
            logging_service=logging_service,
            maintenance_window=maintenance_window,
            master_authorized_networks_config=master_authorized_networks_config,
            monitoring_service=monitoring_service,
            network=network,
            network_policy_enabled=network_policy_enabled,
            node_pools=node_pools,
            private_cluster_config=private_cluster_config,
            region=region,
            subnetwork=subnetwork,
            zone=zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             google_credential_secret: pulumi.Input[str],
             name: pulumi.Input[str],
             project_id: pulumi.Input[str],
             cluster_addons: Optional[pulumi.Input['ClusterGkeConfigV2ClusterAddonsArgs']] = None,
             cluster_ipv4_cidr_block: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             enable_kubernetes_alpha: Optional[pulumi.Input[bool]] = None,
             imported: Optional[pulumi.Input[bool]] = None,
             ip_allocation_policy: Optional[pulumi.Input['ClusterGkeConfigV2IpAllocationPolicyArgs']] = None,
             kubernetes_version: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             logging_service: Optional[pulumi.Input[str]] = None,
             maintenance_window: Optional[pulumi.Input[str]] = None,
             master_authorized_networks_config: Optional[pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigArgs']] = None,
             monitoring_service: Optional[pulumi.Input[str]] = None,
             network: Optional[pulumi.Input[str]] = None,
             network_policy_enabled: Optional[pulumi.Input[bool]] = None,
             node_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolArgs']]]] = None,
             private_cluster_config: Optional[pulumi.Input['ClusterGkeConfigV2PrivateClusterConfigArgs']] = None,
             region: Optional[pulumi.Input[str]] = None,
             subnetwork: Optional[pulumi.Input[str]] = None,
             zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'googleCredentialSecret' in kwargs:
            google_credential_secret = kwargs['googleCredentialSecret']
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'clusterAddons' in kwargs:
            cluster_addons = kwargs['clusterAddons']
        if 'clusterIpv4CidrBlock' in kwargs:
            cluster_ipv4_cidr_block = kwargs['clusterIpv4CidrBlock']
        if 'enableKubernetesAlpha' in kwargs:
            enable_kubernetes_alpha = kwargs['enableKubernetesAlpha']
        if 'ipAllocationPolicy' in kwargs:
            ip_allocation_policy = kwargs['ipAllocationPolicy']
        if 'kubernetesVersion' in kwargs:
            kubernetes_version = kwargs['kubernetesVersion']
        if 'loggingService' in kwargs:
            logging_service = kwargs['loggingService']
        if 'maintenanceWindow' in kwargs:
            maintenance_window = kwargs['maintenanceWindow']
        if 'masterAuthorizedNetworksConfig' in kwargs:
            master_authorized_networks_config = kwargs['masterAuthorizedNetworksConfig']
        if 'monitoringService' in kwargs:
            monitoring_service = kwargs['monitoringService']
        if 'networkPolicyEnabled' in kwargs:
            network_policy_enabled = kwargs['networkPolicyEnabled']
        if 'nodePools' in kwargs:
            node_pools = kwargs['nodePools']
        if 'privateClusterConfig' in kwargs:
            private_cluster_config = kwargs['privateClusterConfig']

        _setter("google_credential_secret", google_credential_secret)
        _setter("name", name)
        _setter("project_id", project_id)
        if cluster_addons is not None:
            _setter("cluster_addons", cluster_addons)
        if cluster_ipv4_cidr_block is not None:
            _setter("cluster_ipv4_cidr_block", cluster_ipv4_cidr_block)
        if description is not None:
            _setter("description", description)
        if enable_kubernetes_alpha is not None:
            _setter("enable_kubernetes_alpha", enable_kubernetes_alpha)
        if imported is not None:
            _setter("imported", imported)
        if ip_allocation_policy is not None:
            _setter("ip_allocation_policy", ip_allocation_policy)
        if kubernetes_version is not None:
            _setter("kubernetes_version", kubernetes_version)
        if labels is not None:
            _setter("labels", labels)
        if locations is not None:
            _setter("locations", locations)
        if logging_service is not None:
            _setter("logging_service", logging_service)
        if maintenance_window is not None:
            _setter("maintenance_window", maintenance_window)
        if master_authorized_networks_config is not None:
            _setter("master_authorized_networks_config", master_authorized_networks_config)
        if monitoring_service is not None:
            _setter("monitoring_service", monitoring_service)
        if network is not None:
            _setter("network", network)
        if network_policy_enabled is not None:
            _setter("network_policy_enabled", network_policy_enabled)
        if node_pools is not None:
            _setter("node_pools", node_pools)
        if private_cluster_config is not None:
            _setter("private_cluster_config", private_cluster_config)
        if region is not None:
            _setter("region", region)
        if subnetwork is not None:
            _setter("subnetwork", subnetwork)
        if zone is not None:
            _setter("zone", zone)

    @property
    @pulumi.getter(name="googleCredentialSecret")
    def google_credential_secret(self) -> pulumi.Input[str]:
        """
        Google credential secret (string)
        """
        return pulumi.get(self, "google_credential_secret")

    @google_credential_secret.setter
    def google_credential_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "google_credential_secret", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID to apply answer (string)
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="clusterAddons")
    def cluster_addons(self) -> Optional[pulumi.Input['ClusterGkeConfigV2ClusterAddonsArgs']]:
        """
        The GKE cluster addons (List maxitems:1)
        """
        return pulumi.get(self, "cluster_addons")

    @cluster_addons.setter
    def cluster_addons(self, value: Optional[pulumi.Input['ClusterGkeConfigV2ClusterAddonsArgs']]):
        pulumi.set(self, "cluster_addons", value)

    @property
    @pulumi.getter(name="clusterIpv4CidrBlock")
    def cluster_ipv4_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster ip v4 allocation cidr block (string)
        """
        return pulumi.get(self, "cluster_ipv4_cidr_block")

    @cluster_ipv4_cidr_block.setter
    def cluster_ipv4_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ipv4_cidr_block", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for Cluster (string)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableKubernetesAlpha")
    def enable_kubernetes_alpha(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Kubernetes alpha. Default: `false` (bool)
        """
        return pulumi.get(self, "enable_kubernetes_alpha")

    @enable_kubernetes_alpha.setter
    def enable_kubernetes_alpha(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_kubernetes_alpha", value)

    @property
    @pulumi.getter
    def imported(self) -> Optional[pulumi.Input[bool]]:
        """
        Is GKE cluster imported? Default: `false` (bool)
        """
        return pulumi.get(self, "imported")

    @imported.setter
    def imported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "imported", value)

    @property
    @pulumi.getter(name="ipAllocationPolicy")
    def ip_allocation_policy(self) -> Optional[pulumi.Input['ClusterGkeConfigV2IpAllocationPolicyArgs']]:
        """
        The GKE ip allocation policy (List maxitems:1)
        """
        return pulumi.get(self, "ip_allocation_policy")

    @ip_allocation_policy.setter
    def ip_allocation_policy(self, value: Optional[pulumi.Input['ClusterGkeConfigV2IpAllocationPolicyArgs']]):
        pulumi.set(self, "ip_allocation_policy", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the Cluster (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The GKE cluster locations (List)
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="loggingService")
    def logging_service(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster logging service (string)
        """
        return pulumi.get(self, "logging_service")

    @logging_service.setter
    def logging_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logging_service", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster maintenance window (string)
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter(name="masterAuthorizedNetworksConfig")
    def master_authorized_networks_config(self) -> Optional[pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigArgs']]:
        """
        The GKE cluster master authorized networks config (List maxitems:1)
        """
        return pulumi.get(self, "master_authorized_networks_config")

    @master_authorized_networks_config.setter
    def master_authorized_networks_config(self, value: Optional[pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigArgs']]):
        pulumi.set(self, "master_authorized_networks_config", value)

    @property
    @pulumi.getter(name="monitoringService")
    def monitoring_service(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster monitoring service (string)
        """
        return pulumi.get(self, "monitoring_service")

    @monitoring_service.setter
    def monitoring_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitoring_service", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster network. Required for create new cluster (string)
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="networkPolicyEnabled")
    def network_policy_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is GKE cluster network policy enabled? Default: `false` (bool)
        """
        return pulumi.get(self, "network_policy_enabled")

    @network_policy_enabled.setter
    def network_policy_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "network_policy_enabled", value)

    @property
    @pulumi.getter(name="nodePools")
    def node_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolArgs']]]]:
        """
        The GKE cluster node pools. Required for create new cluster (List)
        """
        return pulumi.get(self, "node_pools")

    @node_pools.setter
    def node_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolArgs']]]]):
        pulumi.set(self, "node_pools", value)

    @property
    @pulumi.getter(name="privateClusterConfig")
    def private_cluster_config(self) -> Optional[pulumi.Input['ClusterGkeConfigV2PrivateClusterConfigArgs']]:
        """
        The GKE private cluster config (List maxitems:1)
        """
        return pulumi.get(self, "private_cluster_config")

    @private_cluster_config.setter
    def private_cluster_config(self, value: Optional[pulumi.Input['ClusterGkeConfigV2PrivateClusterConfigArgs']]):
        pulumi.set(self, "private_cluster_config", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def subnetwork(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster subnetwork. Required for create new cluster (string)
        """
        return pulumi.get(self, "subnetwork")

    @subnetwork.setter
    def subnetwork(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnetwork", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster zone. Required if `region` not set (string)
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class ClusterGkeConfigV2ClusterAddonsArgs:
    def __init__(__self__, *,
                 horizontal_pod_autoscaling: Optional[pulumi.Input[bool]] = None,
                 http_load_balancing: Optional[pulumi.Input[bool]] = None,
                 network_policy_config: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] horizontal_pod_autoscaling: Enable GKE horizontal pod autoscaling. Default: `false` (bool)
        :param pulumi.Input[bool] http_load_balancing: Enable GKE HTTP load balancing. Default: `false` (bool)
        :param pulumi.Input[bool] network_policy_config: Enable GKE network policy config. Default: `false` (bool)
        """
        ClusterGkeConfigV2ClusterAddonsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            horizontal_pod_autoscaling=horizontal_pod_autoscaling,
            http_load_balancing=http_load_balancing,
            network_policy_config=network_policy_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             horizontal_pod_autoscaling: Optional[pulumi.Input[bool]] = None,
             http_load_balancing: Optional[pulumi.Input[bool]] = None,
             network_policy_config: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'horizontalPodAutoscaling' in kwargs:
            horizontal_pod_autoscaling = kwargs['horizontalPodAutoscaling']
        if 'httpLoadBalancing' in kwargs:
            http_load_balancing = kwargs['httpLoadBalancing']
        if 'networkPolicyConfig' in kwargs:
            network_policy_config = kwargs['networkPolicyConfig']

        if horizontal_pod_autoscaling is not None:
            _setter("horizontal_pod_autoscaling", horizontal_pod_autoscaling)
        if http_load_balancing is not None:
            _setter("http_load_balancing", http_load_balancing)
        if network_policy_config is not None:
            _setter("network_policy_config", network_policy_config)

    @property
    @pulumi.getter(name="horizontalPodAutoscaling")
    def horizontal_pod_autoscaling(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GKE horizontal pod autoscaling. Default: `false` (bool)
        """
        return pulumi.get(self, "horizontal_pod_autoscaling")

    @horizontal_pod_autoscaling.setter
    def horizontal_pod_autoscaling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "horizontal_pod_autoscaling", value)

    @property
    @pulumi.getter(name="httpLoadBalancing")
    def http_load_balancing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GKE HTTP load balancing. Default: `false` (bool)
        """
        return pulumi.get(self, "http_load_balancing")

    @http_load_balancing.setter
    def http_load_balancing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http_load_balancing", value)

    @property
    @pulumi.getter(name="networkPolicyConfig")
    def network_policy_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GKE network policy config. Default: `false` (bool)
        """
        return pulumi.get(self, "network_policy_config")

    @network_policy_config.setter
    def network_policy_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "network_policy_config", value)


@pulumi.input_type
class ClusterGkeConfigV2IpAllocationPolicyArgs:
    def __init__(__self__, *,
                 cluster_ipv4_cidr_block: Optional[pulumi.Input[str]] = None,
                 cluster_secondary_range_name: Optional[pulumi.Input[str]] = None,
                 create_subnetwork: Optional[pulumi.Input[bool]] = None,
                 node_ipv4_cidr_block: Optional[pulumi.Input[str]] = None,
                 services_ipv4_cidr_block: Optional[pulumi.Input[str]] = None,
                 services_secondary_range_name: Optional[pulumi.Input[str]] = None,
                 subnetwork_name: Optional[pulumi.Input[str]] = None,
                 use_ip_aliases: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] cluster_ipv4_cidr_block: The GKE cluster ip v4 allocation cidr block (string)
        :param pulumi.Input[str] cluster_secondary_range_name: The GKE cluster ip v4 allocation secondary range name(string)
        :param pulumi.Input[bool] create_subnetwork: Create GKE subnetwork? Default: `false` (bool)
        :param pulumi.Input[str] node_ipv4_cidr_block: The GKE node ip v4 allocation cidr block (string)
        :param pulumi.Input[str] services_ipv4_cidr_block: The GKE services ip v4 allocation cidr block (string)
        :param pulumi.Input[str] services_secondary_range_name: The GKE services ip v4 allocation secondary range name (string)
        :param pulumi.Input[str] subnetwork_name: The GKE cluster subnetwork name (string)
        :param pulumi.Input[bool] use_ip_aliases: Use GKE ip aliases? Default: `true` (bool)
        """
        ClusterGkeConfigV2IpAllocationPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_ipv4_cidr_block=cluster_ipv4_cidr_block,
            cluster_secondary_range_name=cluster_secondary_range_name,
            create_subnetwork=create_subnetwork,
            node_ipv4_cidr_block=node_ipv4_cidr_block,
            services_ipv4_cidr_block=services_ipv4_cidr_block,
            services_secondary_range_name=services_secondary_range_name,
            subnetwork_name=subnetwork_name,
            use_ip_aliases=use_ip_aliases,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_ipv4_cidr_block: Optional[pulumi.Input[str]] = None,
             cluster_secondary_range_name: Optional[pulumi.Input[str]] = None,
             create_subnetwork: Optional[pulumi.Input[bool]] = None,
             node_ipv4_cidr_block: Optional[pulumi.Input[str]] = None,
             services_ipv4_cidr_block: Optional[pulumi.Input[str]] = None,
             services_secondary_range_name: Optional[pulumi.Input[str]] = None,
             subnetwork_name: Optional[pulumi.Input[str]] = None,
             use_ip_aliases: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterIpv4CidrBlock' in kwargs:
            cluster_ipv4_cidr_block = kwargs['clusterIpv4CidrBlock']
        if 'clusterSecondaryRangeName' in kwargs:
            cluster_secondary_range_name = kwargs['clusterSecondaryRangeName']
        if 'createSubnetwork' in kwargs:
            create_subnetwork = kwargs['createSubnetwork']
        if 'nodeIpv4CidrBlock' in kwargs:
            node_ipv4_cidr_block = kwargs['nodeIpv4CidrBlock']
        if 'servicesIpv4CidrBlock' in kwargs:
            services_ipv4_cidr_block = kwargs['servicesIpv4CidrBlock']
        if 'servicesSecondaryRangeName' in kwargs:
            services_secondary_range_name = kwargs['servicesSecondaryRangeName']
        if 'subnetworkName' in kwargs:
            subnetwork_name = kwargs['subnetworkName']
        if 'useIpAliases' in kwargs:
            use_ip_aliases = kwargs['useIpAliases']

        if cluster_ipv4_cidr_block is not None:
            _setter("cluster_ipv4_cidr_block", cluster_ipv4_cidr_block)
        if cluster_secondary_range_name is not None:
            _setter("cluster_secondary_range_name", cluster_secondary_range_name)
        if create_subnetwork is not None:
            _setter("create_subnetwork", create_subnetwork)
        if node_ipv4_cidr_block is not None:
            _setter("node_ipv4_cidr_block", node_ipv4_cidr_block)
        if services_ipv4_cidr_block is not None:
            _setter("services_ipv4_cidr_block", services_ipv4_cidr_block)
        if services_secondary_range_name is not None:
            _setter("services_secondary_range_name", services_secondary_range_name)
        if subnetwork_name is not None:
            _setter("subnetwork_name", subnetwork_name)
        if use_ip_aliases is not None:
            _setter("use_ip_aliases", use_ip_aliases)

    @property
    @pulumi.getter(name="clusterIpv4CidrBlock")
    def cluster_ipv4_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster ip v4 allocation cidr block (string)
        """
        return pulumi.get(self, "cluster_ipv4_cidr_block")

    @cluster_ipv4_cidr_block.setter
    def cluster_ipv4_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ipv4_cidr_block", value)

    @property
    @pulumi.getter(name="clusterSecondaryRangeName")
    def cluster_secondary_range_name(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster ip v4 allocation secondary range name(string)
        """
        return pulumi.get(self, "cluster_secondary_range_name")

    @cluster_secondary_range_name.setter
    def cluster_secondary_range_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_secondary_range_name", value)

    @property
    @pulumi.getter(name="createSubnetwork")
    def create_subnetwork(self) -> Optional[pulumi.Input[bool]]:
        """
        Create GKE subnetwork? Default: `false` (bool)
        """
        return pulumi.get(self, "create_subnetwork")

    @create_subnetwork.setter
    def create_subnetwork(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_subnetwork", value)

    @property
    @pulumi.getter(name="nodeIpv4CidrBlock")
    def node_ipv4_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE node ip v4 allocation cidr block (string)
        """
        return pulumi.get(self, "node_ipv4_cidr_block")

    @node_ipv4_cidr_block.setter
    def node_ipv4_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_ipv4_cidr_block", value)

    @property
    @pulumi.getter(name="servicesIpv4CidrBlock")
    def services_ipv4_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE services ip v4 allocation cidr block (string)
        """
        return pulumi.get(self, "services_ipv4_cidr_block")

    @services_ipv4_cidr_block.setter
    def services_ipv4_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_ipv4_cidr_block", value)

    @property
    @pulumi.getter(name="servicesSecondaryRangeName")
    def services_secondary_range_name(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE services ip v4 allocation secondary range name (string)
        """
        return pulumi.get(self, "services_secondary_range_name")

    @services_secondary_range_name.setter
    def services_secondary_range_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_secondary_range_name", value)

    @property
    @pulumi.getter(name="subnetworkName")
    def subnetwork_name(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster subnetwork name (string)
        """
        return pulumi.get(self, "subnetwork_name")

    @subnetwork_name.setter
    def subnetwork_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnetwork_name", value)

    @property
    @pulumi.getter(name="useIpAliases")
    def use_ip_aliases(self) -> Optional[pulumi.Input[bool]]:
        """
        Use GKE ip aliases? Default: `true` (bool)
        """
        return pulumi.get(self, "use_ip_aliases")

    @use_ip_aliases.setter
    def use_ip_aliases(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ip_aliases", value)


@pulumi.input_type
class ClusterGkeConfigV2MasterAuthorizedNetworksConfigArgs:
    def __init__(__self__, *,
                 cidr_blocks: pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlockArgs']]],
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlockArgs']]] cidr_blocks: The GKE master authorized network config cidr blocks (List)
        :param pulumi.Input[bool] enabled: Enable the authorized cluster endpoint. Default `true` (bool)
        """
        ClusterGkeConfigV2MasterAuthorizedNetworksConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cidr_blocks=cidr_blocks,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cidr_blocks: pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlockArgs']]],
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cidrBlocks' in kwargs:
            cidr_blocks = kwargs['cidrBlocks']

        _setter("cidr_blocks", cidr_blocks)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlockArgs']]]:
        """
        The GKE master authorized network config cidr blocks (List)
        """
        return pulumi.get(self, "cidr_blocks")

    @cidr_blocks.setter
    def cidr_blocks(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlockArgs']]]):
        pulumi.set(self, "cidr_blocks", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the authorized cluster endpoint. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlockArgs:
    def __init__(__self__, *,
                 cidr_block: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cidr_block: The GKE master authorized network config cidr block (string)
        :param pulumi.Input[str] display_name: The GKE master authorized network config cidr block dispaly name (string)
        """
        ClusterGkeConfigV2MasterAuthorizedNetworksConfigCidrBlockArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cidr_block=cidr_block,
            display_name=display_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cidr_block: pulumi.Input[str],
             display_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cidrBlock' in kwargs:
            cidr_block = kwargs['cidrBlock']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']

        _setter("cidr_block", cidr_block)
        if display_name is not None:
            _setter("display_name", display_name)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Input[str]:
        """
        The GKE master authorized network config cidr block (string)
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE master authorized network config cidr block dispaly name (string)
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class ClusterGkeConfigV2NodePoolArgs:
    def __init__(__self__, *,
                 initial_node_count: pulumi.Input[int],
                 name: pulumi.Input[str],
                 version: pulumi.Input[str],
                 autoscaling: Optional[pulumi.Input['ClusterGkeConfigV2NodePoolAutoscalingArgs']] = None,
                 config: Optional[pulumi.Input['ClusterGkeConfigV2NodePoolConfigArgs']] = None,
                 management: Optional[pulumi.Input['ClusterGkeConfigV2NodePoolManagementArgs']] = None,
                 max_pods_constraint: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] initial_node_count: The GKE node pool config initial node count (int)
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[str] version: rancher-monitoring chart version (string)
        :param pulumi.Input['ClusterGkeConfigV2NodePoolAutoscalingArgs'] autoscaling: The GKE node pool config autoscaling (List maxitems:1)
        :param pulumi.Input['ClusterGkeConfigV2NodePoolConfigArgs'] config: The GKE node pool node config (List maxitems:1)
        :param pulumi.Input['ClusterGkeConfigV2NodePoolManagementArgs'] management: The GKE node pool config management (List maxitems:1)
        :param pulumi.Input[int] max_pods_constraint: The GKE node pool config max pods constraint. Required for create new cluster if `ip_allocation_policy.use_ip_aliases = true` (int)
        """
        ClusterGkeConfigV2NodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            initial_node_count=initial_node_count,
            name=name,
            version=version,
            autoscaling=autoscaling,
            config=config,
            management=management,
            max_pods_constraint=max_pods_constraint,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             initial_node_count: pulumi.Input[int],
             name: pulumi.Input[str],
             version: pulumi.Input[str],
             autoscaling: Optional[pulumi.Input['ClusterGkeConfigV2NodePoolAutoscalingArgs']] = None,
             config: Optional[pulumi.Input['ClusterGkeConfigV2NodePoolConfigArgs']] = None,
             management: Optional[pulumi.Input['ClusterGkeConfigV2NodePoolManagementArgs']] = None,
             max_pods_constraint: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'initialNodeCount' in kwargs:
            initial_node_count = kwargs['initialNodeCount']
        if 'maxPodsConstraint' in kwargs:
            max_pods_constraint = kwargs['maxPodsConstraint']

        _setter("initial_node_count", initial_node_count)
        _setter("name", name)
        _setter("version", version)
        if autoscaling is not None:
            _setter("autoscaling", autoscaling)
        if config is not None:
            _setter("config", config)
        if management is not None:
            _setter("management", management)
        if max_pods_constraint is not None:
            _setter("max_pods_constraint", max_pods_constraint)

    @property
    @pulumi.getter(name="initialNodeCount")
    def initial_node_count(self) -> pulumi.Input[int]:
        """
        The GKE node pool config initial node count (int)
        """
        return pulumi.get(self, "initial_node_count")

    @initial_node_count.setter
    def initial_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "initial_node_count", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        rancher-monitoring chart version (string)
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def autoscaling(self) -> Optional[pulumi.Input['ClusterGkeConfigV2NodePoolAutoscalingArgs']]:
        """
        The GKE node pool config autoscaling (List maxitems:1)
        """
        return pulumi.get(self, "autoscaling")

    @autoscaling.setter
    def autoscaling(self, value: Optional[pulumi.Input['ClusterGkeConfigV2NodePoolAutoscalingArgs']]):
        pulumi.set(self, "autoscaling", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ClusterGkeConfigV2NodePoolConfigArgs']]:
        """
        The GKE node pool node config (List maxitems:1)
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ClusterGkeConfigV2NodePoolConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def management(self) -> Optional[pulumi.Input['ClusterGkeConfigV2NodePoolManagementArgs']]:
        """
        The GKE node pool config management (List maxitems:1)
        """
        return pulumi.get(self, "management")

    @management.setter
    def management(self, value: Optional[pulumi.Input['ClusterGkeConfigV2NodePoolManagementArgs']]):
        pulumi.set(self, "management", value)

    @property
    @pulumi.getter(name="maxPodsConstraint")
    def max_pods_constraint(self) -> Optional[pulumi.Input[int]]:
        """
        The GKE node pool config max pods constraint. Required for create new cluster if `ip_allocation_policy.use_ip_aliases = true` (int)
        """
        return pulumi.get(self, "max_pods_constraint")

    @max_pods_constraint.setter
    def max_pods_constraint(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pods_constraint", value)


@pulumi.input_type
class ClusterGkeConfigV2NodePoolAutoscalingArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 max_node_count: Optional[pulumi.Input[int]] = None,
                 min_node_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable the authorized cluster endpoint. Default `true` (bool)
        :param pulumi.Input[int] max_node_count: The GKE node pool config max node count (int)
        :param pulumi.Input[int] min_node_count: The GKE node pool config min node count (int)
        """
        ClusterGkeConfigV2NodePoolAutoscalingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            max_node_count=max_node_count,
            min_node_count=min_node_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             max_node_count: Optional[pulumi.Input[int]] = None,
             min_node_count: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxNodeCount' in kwargs:
            max_node_count = kwargs['maxNodeCount']
        if 'minNodeCount' in kwargs:
            min_node_count = kwargs['minNodeCount']

        if enabled is not None:
            _setter("enabled", enabled)
        if max_node_count is not None:
            _setter("max_node_count", max_node_count)
        if min_node_count is not None:
            _setter("min_node_count", min_node_count)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the authorized cluster endpoint. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxNodeCount")
    def max_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The GKE node pool config max node count (int)
        """
        return pulumi.get(self, "max_node_count")

    @max_node_count.setter
    def max_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_node_count", value)

    @property
    @pulumi.getter(name="minNodeCount")
    def min_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The GKE node pool config min node count (int)
        """
        return pulumi.get(self, "min_node_count")

    @min_node_count.setter
    def min_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_node_count", value)


@pulumi.input_type
class ClusterGkeConfigV2NodePoolConfigArgs:
    def __init__(__self__, *,
                 disk_size_gb: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 image_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 local_ssd_count: Optional[pulumi.Input[int]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preemptible: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolConfigTaintArgs']]]] = None):
        """
        :param pulumi.Input[int] disk_size_gb: The GKE node config disk size Gb (int)
        :param pulumi.Input[str] disk_type: The GKE node config disk type (string)
        :param pulumi.Input[str] image_type: The GKE node config image type (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the Cluster (map)
        :param pulumi.Input[int] local_ssd_count: The GKE node config local ssd count (int)
        :param pulumi.Input[str] machine_type: The GKE node config machine type (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] oauth_scopes: The GKE node config oauth scopes (List)
        :param pulumi.Input[bool] preemptible: Enable GKE node config preemptible. Default: `false` (bool)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: The GKE node config tags (List)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolConfigTaintArgs']]] taints: The GKE node config taints (List)
        """
        ClusterGkeConfigV2NodePoolConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disk_size_gb=disk_size_gb,
            disk_type=disk_type,
            image_type=image_type,
            labels=labels,
            local_ssd_count=local_ssd_count,
            machine_type=machine_type,
            oauth_scopes=oauth_scopes,
            preemptible=preemptible,
            tags=tags,
            taints=taints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disk_size_gb: Optional[pulumi.Input[int]] = None,
             disk_type: Optional[pulumi.Input[str]] = None,
             image_type: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             local_ssd_count: Optional[pulumi.Input[int]] = None,
             machine_type: Optional[pulumi.Input[str]] = None,
             oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             preemptible: Optional[pulumi.Input[bool]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolConfigTaintArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'diskSizeGb' in kwargs:
            disk_size_gb = kwargs['diskSizeGb']
        if 'diskType' in kwargs:
            disk_type = kwargs['diskType']
        if 'imageType' in kwargs:
            image_type = kwargs['imageType']
        if 'localSsdCount' in kwargs:
            local_ssd_count = kwargs['localSsdCount']
        if 'machineType' in kwargs:
            machine_type = kwargs['machineType']
        if 'oauthScopes' in kwargs:
            oauth_scopes = kwargs['oauthScopes']

        if disk_size_gb is not None:
            _setter("disk_size_gb", disk_size_gb)
        if disk_type is not None:
            _setter("disk_type", disk_type)
        if image_type is not None:
            _setter("image_type", image_type)
        if labels is not None:
            _setter("labels", labels)
        if local_ssd_count is not None:
            _setter("local_ssd_count", local_ssd_count)
        if machine_type is not None:
            _setter("machine_type", machine_type)
        if oauth_scopes is not None:
            _setter("oauth_scopes", oauth_scopes)
        if preemptible is not None:
            _setter("preemptible", preemptible)
        if tags is not None:
            _setter("tags", tags)
        if taints is not None:
            _setter("taints", taints)

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> Optional[pulumi.Input[int]]:
        """
        The GKE node config disk size Gb (int)
        """
        return pulumi.get(self, "disk_size_gb")

    @disk_size_gb.setter
    def disk_size_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size_gb", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE node config disk type (string)
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE node config image type (string)
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the Cluster (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="localSsdCount")
    def local_ssd_count(self) -> Optional[pulumi.Input[int]]:
        """
        The GKE node config local ssd count (int)
        """
        return pulumi.get(self, "local_ssd_count")

    @local_ssd_count.setter
    def local_ssd_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_ssd_count", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE node config machine type (string)
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The GKE node config oauth scopes (List)
        """
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GKE node config preemptible. Default: `false` (bool)
        """
        return pulumi.get(self, "preemptible")

    @preemptible.setter
    def preemptible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preemptible", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The GKE node config tags (List)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolConfigTaintArgs']]]]:
        """
        The GKE node config taints (List)
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterGkeConfigV2NodePoolConfigTaintArgs']]]]):
        pulumi.set(self, "taints", value)


@pulumi.input_type
class ClusterGkeConfigV2NodePoolConfigTaintArgs:
    def __init__(__self__, *,
                 effect: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] effect: The GKE taint effect (string)
        :param pulumi.Input[str] key: The GKE taint key (string)
        :param pulumi.Input[str] value: The GKE taint value (string)
        """
        ClusterGkeConfigV2NodePoolConfigTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            effect=effect,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             effect: pulumi.Input[str],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("effect", effect)
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def effect(self) -> pulumi.Input[str]:
        """
        The GKE taint effect (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: pulumi.Input[str]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The GKE taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The GKE taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterGkeConfigV2NodePoolManagementArgs:
    def __init__(__self__, *,
                 auto_repair: Optional[pulumi.Input[bool]] = None,
                 auto_upgrade: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] auto_repair: Enable GKE node pool config management auto repair. Default: `false` (bool)
        :param pulumi.Input[bool] auto_upgrade: Enable GKE node pool config management auto upgrade. Default: `false` (bool)
        """
        ClusterGkeConfigV2NodePoolManagementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_repair=auto_repair,
            auto_upgrade=auto_upgrade,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_repair: Optional[pulumi.Input[bool]] = None,
             auto_upgrade: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'autoRepair' in kwargs:
            auto_repair = kwargs['autoRepair']
        if 'autoUpgrade' in kwargs:
            auto_upgrade = kwargs['autoUpgrade']

        if auto_repair is not None:
            _setter("auto_repair", auto_repair)
        if auto_upgrade is not None:
            _setter("auto_upgrade", auto_upgrade)

    @property
    @pulumi.getter(name="autoRepair")
    def auto_repair(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GKE node pool config management auto repair. Default: `false` (bool)
        """
        return pulumi.get(self, "auto_repair")

    @auto_repair.setter
    def auto_repair(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_repair", value)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GKE node pool config management auto upgrade. Default: `false` (bool)
        """
        return pulumi.get(self, "auto_upgrade")

    @auto_upgrade.setter
    def auto_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_upgrade", value)


@pulumi.input_type
class ClusterGkeConfigV2PrivateClusterConfigArgs:
    def __init__(__self__, *,
                 master_ipv4_cidr_block: pulumi.Input[str],
                 enable_private_endpoint: Optional[pulumi.Input[bool]] = None,
                 enable_private_nodes: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] master_ipv4_cidr_block: The GKE cluster private master ip v4 cidr block (string)
        :param pulumi.Input[bool] enable_private_endpoint: Enable GKE cluster private endpoint. Default: `false` (bool)
        :param pulumi.Input[bool] enable_private_nodes: Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
        """
        ClusterGkeConfigV2PrivateClusterConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            master_ipv4_cidr_block=master_ipv4_cidr_block,
            enable_private_endpoint=enable_private_endpoint,
            enable_private_nodes=enable_private_nodes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             master_ipv4_cidr_block: pulumi.Input[str],
             enable_private_endpoint: Optional[pulumi.Input[bool]] = None,
             enable_private_nodes: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'masterIpv4CidrBlock' in kwargs:
            master_ipv4_cidr_block = kwargs['masterIpv4CidrBlock']
        if 'enablePrivateEndpoint' in kwargs:
            enable_private_endpoint = kwargs['enablePrivateEndpoint']
        if 'enablePrivateNodes' in kwargs:
            enable_private_nodes = kwargs['enablePrivateNodes']

        _setter("master_ipv4_cidr_block", master_ipv4_cidr_block)
        if enable_private_endpoint is not None:
            _setter("enable_private_endpoint", enable_private_endpoint)
        if enable_private_nodes is not None:
            _setter("enable_private_nodes", enable_private_nodes)

    @property
    @pulumi.getter(name="masterIpv4CidrBlock")
    def master_ipv4_cidr_block(self) -> pulumi.Input[str]:
        """
        The GKE cluster private master ip v4 cidr block (string)
        """
        return pulumi.get(self, "master_ipv4_cidr_block")

    @master_ipv4_cidr_block.setter
    def master_ipv4_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_ipv4_cidr_block", value)

    @property
    @pulumi.getter(name="enablePrivateEndpoint")
    def enable_private_endpoint(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable GKE cluster private endpoint. Default: `false` (bool)
        """
        return pulumi.get(self, "enable_private_endpoint")

    @enable_private_endpoint.setter
    def enable_private_endpoint(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_private_endpoint", value)

    @property
    @pulumi.getter(name="enablePrivateNodes")
    def enable_private_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
        """
        return pulumi.get(self, "enable_private_nodes")

    @enable_private_nodes.setter
    def enable_private_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_private_nodes", value)


@pulumi.input_type
class ClusterK3sConfigArgs:
    def __init__(__self__, *,
                 upgrade_strategy: Optional[pulumi.Input['ClusterK3sConfigUpgradeStrategyArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ClusterK3sConfigUpgradeStrategyArgs'] upgrade_strategy: K3S upgrade strategy (List maxitems: 1)
        :param pulumi.Input[str] version: rancher-monitoring chart version (string)
        """
        ClusterK3sConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            upgrade_strategy=upgrade_strategy,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             upgrade_strategy: Optional[pulumi.Input['ClusterK3sConfigUpgradeStrategyArgs']] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'upgradeStrategy' in kwargs:
            upgrade_strategy = kwargs['upgradeStrategy']

        if upgrade_strategy is not None:
            _setter("upgrade_strategy", upgrade_strategy)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> Optional[pulumi.Input['ClusterK3sConfigUpgradeStrategyArgs']]:
        """
        K3S upgrade strategy (List maxitems: 1)
        """
        return pulumi.get(self, "upgrade_strategy")

    @upgrade_strategy.setter
    def upgrade_strategy(self, value: Optional[pulumi.Input['ClusterK3sConfigUpgradeStrategyArgs']]):
        pulumi.set(self, "upgrade_strategy", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        rancher-monitoring chart version (string)
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterK3sConfigUpgradeStrategyArgs:
    def __init__(__self__, *,
                 drain_server_nodes: Optional[pulumi.Input[bool]] = None,
                 drain_worker_nodes: Optional[pulumi.Input[bool]] = None,
                 server_concurrency: Optional[pulumi.Input[int]] = None,
                 worker_concurrency: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] drain_server_nodes: Drain server nodes. Default: `false` (bool)
        :param pulumi.Input[bool] drain_worker_nodes: Drain worker nodes. Default: `false` (bool)
        :param pulumi.Input[int] server_concurrency: Server concurrency. Default: `1` (int)
        :param pulumi.Input[int] worker_concurrency: Worker concurrency. Default: `1` (int)
        """
        ClusterK3sConfigUpgradeStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            drain_server_nodes=drain_server_nodes,
            drain_worker_nodes=drain_worker_nodes,
            server_concurrency=server_concurrency,
            worker_concurrency=worker_concurrency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             drain_server_nodes: Optional[pulumi.Input[bool]] = None,
             drain_worker_nodes: Optional[pulumi.Input[bool]] = None,
             server_concurrency: Optional[pulumi.Input[int]] = None,
             worker_concurrency: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'drainServerNodes' in kwargs:
            drain_server_nodes = kwargs['drainServerNodes']
        if 'drainWorkerNodes' in kwargs:
            drain_worker_nodes = kwargs['drainWorkerNodes']
        if 'serverConcurrency' in kwargs:
            server_concurrency = kwargs['serverConcurrency']
        if 'workerConcurrency' in kwargs:
            worker_concurrency = kwargs['workerConcurrency']

        if drain_server_nodes is not None:
            _setter("drain_server_nodes", drain_server_nodes)
        if drain_worker_nodes is not None:
            _setter("drain_worker_nodes", drain_worker_nodes)
        if server_concurrency is not None:
            _setter("server_concurrency", server_concurrency)
        if worker_concurrency is not None:
            _setter("worker_concurrency", worker_concurrency)

    @property
    @pulumi.getter(name="drainServerNodes")
    def drain_server_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain server nodes. Default: `false` (bool)
        """
        return pulumi.get(self, "drain_server_nodes")

    @drain_server_nodes.setter
    def drain_server_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain_server_nodes", value)

    @property
    @pulumi.getter(name="drainWorkerNodes")
    def drain_worker_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain worker nodes. Default: `false` (bool)
        """
        return pulumi.get(self, "drain_worker_nodes")

    @drain_worker_nodes.setter
    def drain_worker_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain_worker_nodes", value)

    @property
    @pulumi.getter(name="serverConcurrency")
    def server_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Server concurrency. Default: `1` (int)
        """
        return pulumi.get(self, "server_concurrency")

    @server_concurrency.setter
    def server_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "server_concurrency", value)

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Worker concurrency. Default: `1` (int)
        """
        return pulumi.get(self, "worker_concurrency")

    @worker_concurrency.setter
    def worker_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "worker_concurrency", value)


@pulumi.input_type
class ClusterOkeConfigArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 fingerprint: pulumi.Input[str],
                 kubernetes_version: pulumi.Input[str],
                 node_image: pulumi.Input[str],
                 node_shape: pulumi.Input[str],
                 private_key_contents: pulumi.Input[str],
                 region: pulumi.Input[str],
                 tenancy_id: pulumi.Input[str],
                 user_ocid: pulumi.Input[str],
                 custom_boot_volume_size: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_kubernetes_dashboard: Optional[pulumi.Input[bool]] = None,
                 enable_private_control_plane: Optional[pulumi.Input[bool]] = None,
                 enable_private_nodes: Optional[pulumi.Input[bool]] = None,
                 flex_ocpus: Optional[pulumi.Input[int]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 limit_node_count: Optional[pulumi.Input[int]] = None,
                 load_balancer_subnet_name1: Optional[pulumi.Input[str]] = None,
                 load_balancer_subnet_name2: Optional[pulumi.Input[str]] = None,
                 node_pool_dns_domain_name: Optional[pulumi.Input[str]] = None,
                 node_pool_subnet_name: Optional[pulumi.Input[str]] = None,
                 node_public_key_contents: Optional[pulumi.Input[str]] = None,
                 pod_cidr: Optional[pulumi.Input[str]] = None,
                 private_key_passphrase: Optional[pulumi.Input[str]] = None,
                 quantity_of_node_subnets: Optional[pulumi.Input[int]] = None,
                 quantity_per_subnet: Optional[pulumi.Input[int]] = None,
                 service_cidr: Optional[pulumi.Input[str]] = None,
                 service_dns_domain_name: Optional[pulumi.Input[str]] = None,
                 skip_vcn_delete: Optional[pulumi.Input[bool]] = None,
                 vcn_compartment_id: Optional[pulumi.Input[str]] = None,
                 vcn_name: Optional[pulumi.Input[str]] = None,
                 worker_node_ingress_cidr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] compartment_id: The OCID of the compartment in which to create resources OKE cluster and related resources (string)
        :param pulumi.Input[str] fingerprint: The fingerprint corresponding to the specified user's private API Key (string)
        :param pulumi.Input[str] kubernetes_version: The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        :param pulumi.Input[str] node_image: The Oracle Linux OS image name to use for the OKE node(s). See [here](https://docs.cloud.oracle.com/en-us/iaas/images/) for a list of images. (string)
        :param pulumi.Input[str] node_shape: The shape of the node (determines number of CPUs and  amount of memory on each OKE node) (string)
        :param pulumi.Input[str] private_key_contents: The private API key file contents for the specified user, in PEM format (string)
        :param pulumi.Input[str] region: The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        :param pulumi.Input[str] tenancy_id: The OCID of the tenancy in which to create resources (string)
        :param pulumi.Input[str] user_ocid: The OCID of a user who has access to the tenancy/compartment (string)
        :param pulumi.Input[int] custom_boot_volume_size: Optional custom boot volume size (GB) for all nodes. If you specify 0, it will apply the default according to the `node_image` specified. Default `0` (int)
        :param pulumi.Input[str] description: The description for Cluster (string)
        :param pulumi.Input[bool] enable_kubernetes_dashboard: Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
        :param pulumi.Input[bool] enable_private_control_plane: Specifies whether Kubernetes API endpoint is a private IP only accessible from within the VCN. Default `false` for Rancher v2.5.10 and above (bool)
        :param pulumi.Input[bool] enable_private_nodes: Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
        :param pulumi.Input[int] flex_ocpus: Specifies number of OCPUs for nodes (requires flexible shape specified with `node_shape`) (int)
        :param pulumi.Input[str] kms_key_id: The OCID of a KMS vault master key used to encrypt secrets at rest. See [here](https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengencryptingdata.htm) for help creating a vault and master encryption key. For Rancher v2.5.9 and above (string)
        :param pulumi.Input[int] limit_node_count: The maximum number of worker nodes. Can limit `quantity_per_subnet`. Default `0` (no limit) (int)
        :param pulumi.Input[str] load_balancer_subnet_name1: The name of the first existing subnet to use for Kubernetes services / LB. `vcn_name` is also required when specifying an existing subnet. (string)
        :param pulumi.Input[str] load_balancer_subnet_name2: The name of a second existing subnet to use for Kubernetes services / LB. A second subnet is only required when it is AD-specific (non-regional) (string)
        :param pulumi.Input[str] node_pool_dns_domain_name: Name for DNS domain of node pool subnet. Default `nodedns` (string)
        :param pulumi.Input[str] node_pool_subnet_name: Name for node pool subnet. Default `nodedns` (string)
        :param pulumi.Input[str] node_public_key_contents: The contents of the SSH public key file to use for the nodes (string)
        :param pulumi.Input[str] pod_cidr: A CIDR IP range from which to assign Kubernetes Pod IPs (string)
        :param pulumi.Input[str] private_key_passphrase: The passphrase (if any) of the private key for the OKE cluster (string)
        :param pulumi.Input[int] quantity_of_node_subnets: Number of node subnets. Default `1` (int)
        :param pulumi.Input[int] quantity_per_subnet: Number of OKE worker nodes in each subnet / availability domain. Default `1` (int)
        :param pulumi.Input[str] service_cidr: A CIDR IP range from which to assign Kubernetes Service IPs (string)
        :param pulumi.Input[str] service_dns_domain_name: Name for DNS domain of service subnet. Default `svcdns` (string)
        :param pulumi.Input[bool] skip_vcn_delete: Specifies whether to skip deleting the virtual cloud network (VCN) on destroy. Default `false` (bool)
        :param pulumi.Input[str] vcn_compartment_id: The OCID of the compartment (if different from `compartment_id`) in which to find the pre-existing virtual network set with `vcn_name`. (string)
        :param pulumi.Input[str] vcn_name: The name of an existing virtual network to use for the cluster creation. If set, you must also set `load_balancer_subnet_name_1`. A VCN and subnets will be created if none are specified. (string)
        :param pulumi.Input[str] worker_node_ingress_cidr: Additional CIDR from which to allow ingress to worker nodes (string)
        """
        ClusterOkeConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            fingerprint=fingerprint,
            kubernetes_version=kubernetes_version,
            node_image=node_image,
            node_shape=node_shape,
            private_key_contents=private_key_contents,
            region=region,
            tenancy_id=tenancy_id,
            user_ocid=user_ocid,
            custom_boot_volume_size=custom_boot_volume_size,
            description=description,
            enable_kubernetes_dashboard=enable_kubernetes_dashboard,
            enable_private_control_plane=enable_private_control_plane,
            enable_private_nodes=enable_private_nodes,
            flex_ocpus=flex_ocpus,
            kms_key_id=kms_key_id,
            limit_node_count=limit_node_count,
            load_balancer_subnet_name1=load_balancer_subnet_name1,
            load_balancer_subnet_name2=load_balancer_subnet_name2,
            node_pool_dns_domain_name=node_pool_dns_domain_name,
            node_pool_subnet_name=node_pool_subnet_name,
            node_public_key_contents=node_public_key_contents,
            pod_cidr=pod_cidr,
            private_key_passphrase=private_key_passphrase,
            quantity_of_node_subnets=quantity_of_node_subnets,
            quantity_per_subnet=quantity_per_subnet,
            service_cidr=service_cidr,
            service_dns_domain_name=service_dns_domain_name,
            skip_vcn_delete=skip_vcn_delete,
            vcn_compartment_id=vcn_compartment_id,
            vcn_name=vcn_name,
            worker_node_ingress_cidr=worker_node_ingress_cidr,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: pulumi.Input[str],
             fingerprint: pulumi.Input[str],
             kubernetes_version: pulumi.Input[str],
             node_image: pulumi.Input[str],
             node_shape: pulumi.Input[str],
             private_key_contents: pulumi.Input[str],
             region: pulumi.Input[str],
             tenancy_id: pulumi.Input[str],
             user_ocid: pulumi.Input[str],
             custom_boot_volume_size: Optional[pulumi.Input[int]] = None,
             description: Optional[pulumi.Input[str]] = None,
             enable_kubernetes_dashboard: Optional[pulumi.Input[bool]] = None,
             enable_private_control_plane: Optional[pulumi.Input[bool]] = None,
             enable_private_nodes: Optional[pulumi.Input[bool]] = None,
             flex_ocpus: Optional[pulumi.Input[int]] = None,
             kms_key_id: Optional[pulumi.Input[str]] = None,
             limit_node_count: Optional[pulumi.Input[int]] = None,
             load_balancer_subnet_name1: Optional[pulumi.Input[str]] = None,
             load_balancer_subnet_name2: Optional[pulumi.Input[str]] = None,
             node_pool_dns_domain_name: Optional[pulumi.Input[str]] = None,
             node_pool_subnet_name: Optional[pulumi.Input[str]] = None,
             node_public_key_contents: Optional[pulumi.Input[str]] = None,
             pod_cidr: Optional[pulumi.Input[str]] = None,
             private_key_passphrase: Optional[pulumi.Input[str]] = None,
             quantity_of_node_subnets: Optional[pulumi.Input[int]] = None,
             quantity_per_subnet: Optional[pulumi.Input[int]] = None,
             service_cidr: Optional[pulumi.Input[str]] = None,
             service_dns_domain_name: Optional[pulumi.Input[str]] = None,
             skip_vcn_delete: Optional[pulumi.Input[bool]] = None,
             vcn_compartment_id: Optional[pulumi.Input[str]] = None,
             vcn_name: Optional[pulumi.Input[str]] = None,
             worker_node_ingress_cidr: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'kubernetesVersion' in kwargs:
            kubernetes_version = kwargs['kubernetesVersion']
        if 'nodeImage' in kwargs:
            node_image = kwargs['nodeImage']
        if 'nodeShape' in kwargs:
            node_shape = kwargs['nodeShape']
        if 'privateKeyContents' in kwargs:
            private_key_contents = kwargs['privateKeyContents']
        if 'tenancyId' in kwargs:
            tenancy_id = kwargs['tenancyId']
        if 'userOcid' in kwargs:
            user_ocid = kwargs['userOcid']
        if 'customBootVolumeSize' in kwargs:
            custom_boot_volume_size = kwargs['customBootVolumeSize']
        if 'enableKubernetesDashboard' in kwargs:
            enable_kubernetes_dashboard = kwargs['enableKubernetesDashboard']
        if 'enablePrivateControlPlane' in kwargs:
            enable_private_control_plane = kwargs['enablePrivateControlPlane']
        if 'enablePrivateNodes' in kwargs:
            enable_private_nodes = kwargs['enablePrivateNodes']
        if 'flexOcpus' in kwargs:
            flex_ocpus = kwargs['flexOcpus']
        if 'kmsKeyId' in kwargs:
            kms_key_id = kwargs['kmsKeyId']
        if 'limitNodeCount' in kwargs:
            limit_node_count = kwargs['limitNodeCount']
        if 'loadBalancerSubnetName1' in kwargs:
            load_balancer_subnet_name1 = kwargs['loadBalancerSubnetName1']
        if 'loadBalancerSubnetName2' in kwargs:
            load_balancer_subnet_name2 = kwargs['loadBalancerSubnetName2']
        if 'nodePoolDnsDomainName' in kwargs:
            node_pool_dns_domain_name = kwargs['nodePoolDnsDomainName']
        if 'nodePoolSubnetName' in kwargs:
            node_pool_subnet_name = kwargs['nodePoolSubnetName']
        if 'nodePublicKeyContents' in kwargs:
            node_public_key_contents = kwargs['nodePublicKeyContents']
        if 'podCidr' in kwargs:
            pod_cidr = kwargs['podCidr']
        if 'privateKeyPassphrase' in kwargs:
            private_key_passphrase = kwargs['privateKeyPassphrase']
        if 'quantityOfNodeSubnets' in kwargs:
            quantity_of_node_subnets = kwargs['quantityOfNodeSubnets']
        if 'quantityPerSubnet' in kwargs:
            quantity_per_subnet = kwargs['quantityPerSubnet']
        if 'serviceCidr' in kwargs:
            service_cidr = kwargs['serviceCidr']
        if 'serviceDnsDomainName' in kwargs:
            service_dns_domain_name = kwargs['serviceDnsDomainName']
        if 'skipVcnDelete' in kwargs:
            skip_vcn_delete = kwargs['skipVcnDelete']
        if 'vcnCompartmentId' in kwargs:
            vcn_compartment_id = kwargs['vcnCompartmentId']
        if 'vcnName' in kwargs:
            vcn_name = kwargs['vcnName']
        if 'workerNodeIngressCidr' in kwargs:
            worker_node_ingress_cidr = kwargs['workerNodeIngressCidr']

        _setter("compartment_id", compartment_id)
        _setter("fingerprint", fingerprint)
        _setter("kubernetes_version", kubernetes_version)
        _setter("node_image", node_image)
        _setter("node_shape", node_shape)
        _setter("private_key_contents", private_key_contents)
        _setter("region", region)
        _setter("tenancy_id", tenancy_id)
        _setter("user_ocid", user_ocid)
        if custom_boot_volume_size is not None:
            _setter("custom_boot_volume_size", custom_boot_volume_size)
        if description is not None:
            _setter("description", description)
        if enable_kubernetes_dashboard is not None:
            _setter("enable_kubernetes_dashboard", enable_kubernetes_dashboard)
        if enable_private_control_plane is not None:
            _setter("enable_private_control_plane", enable_private_control_plane)
        if enable_private_nodes is not None:
            _setter("enable_private_nodes", enable_private_nodes)
        if flex_ocpus is not None:
            _setter("flex_ocpus", flex_ocpus)
        if kms_key_id is not None:
            _setter("kms_key_id", kms_key_id)
        if limit_node_count is not None:
            _setter("limit_node_count", limit_node_count)
        if load_balancer_subnet_name1 is not None:
            _setter("load_balancer_subnet_name1", load_balancer_subnet_name1)
        if load_balancer_subnet_name2 is not None:
            _setter("load_balancer_subnet_name2", load_balancer_subnet_name2)
        if node_pool_dns_domain_name is not None:
            _setter("node_pool_dns_domain_name", node_pool_dns_domain_name)
        if node_pool_subnet_name is not None:
            _setter("node_pool_subnet_name", node_pool_subnet_name)
        if node_public_key_contents is not None:
            _setter("node_public_key_contents", node_public_key_contents)
        if pod_cidr is not None:
            _setter("pod_cidr", pod_cidr)
        if private_key_passphrase is not None:
            _setter("private_key_passphrase", private_key_passphrase)
        if quantity_of_node_subnets is not None:
            _setter("quantity_of_node_subnets", quantity_of_node_subnets)
        if quantity_per_subnet is not None:
            _setter("quantity_per_subnet", quantity_per_subnet)
        if service_cidr is not None:
            _setter("service_cidr", service_cidr)
        if service_dns_domain_name is not None:
            _setter("service_dns_domain_name", service_dns_domain_name)
        if skip_vcn_delete is not None:
            _setter("skip_vcn_delete", skip_vcn_delete)
        if vcn_compartment_id is not None:
            _setter("vcn_compartment_id", vcn_compartment_id)
        if vcn_name is not None:
            _setter("vcn_name", vcn_name)
        if worker_node_ingress_cidr is not None:
            _setter("worker_node_ingress_cidr", worker_node_ingress_cidr)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        The OCID of the compartment in which to create resources OKE cluster and related resources (string)
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Input[str]:
        """
        The fingerprint corresponding to the specified user's private API Key (string)
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: pulumi.Input[str]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> pulumi.Input[str]:
        """
        The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter(name="nodeImage")
    def node_image(self) -> pulumi.Input[str]:
        """
        The Oracle Linux OS image name to use for the OKE node(s). See [here](https://docs.cloud.oracle.com/en-us/iaas/images/) for a list of images. (string)
        """
        return pulumi.get(self, "node_image")

    @node_image.setter
    def node_image(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_image", value)

    @property
    @pulumi.getter(name="nodeShape")
    def node_shape(self) -> pulumi.Input[str]:
        """
        The shape of the node (determines number of CPUs and  amount of memory on each OKE node) (string)
        """
        return pulumi.get(self, "node_shape")

    @node_shape.setter
    def node_shape(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_shape", value)

    @property
    @pulumi.getter(name="privateKeyContents")
    def private_key_contents(self) -> pulumi.Input[str]:
        """
        The private API key file contents for the specified user, in PEM format (string)
        """
        return pulumi.get(self, "private_key_contents")

    @private_key_contents.setter
    def private_key_contents(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key_contents", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> pulumi.Input[str]:
        """
        The OCID of the tenancy in which to create resources (string)
        """
        return pulumi.get(self, "tenancy_id")

    @tenancy_id.setter
    def tenancy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenancy_id", value)

    @property
    @pulumi.getter(name="userOcid")
    def user_ocid(self) -> pulumi.Input[str]:
        """
        The OCID of a user who has access to the tenancy/compartment (string)
        """
        return pulumi.get(self, "user_ocid")

    @user_ocid.setter
    def user_ocid(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_ocid", value)

    @property
    @pulumi.getter(name="customBootVolumeSize")
    def custom_boot_volume_size(self) -> Optional[pulumi.Input[int]]:
        """
        Optional custom boot volume size (GB) for all nodes. If you specify 0, it will apply the default according to the `node_image` specified. Default `0` (int)
        """
        return pulumi.get(self, "custom_boot_volume_size")

    @custom_boot_volume_size.setter
    def custom_boot_volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_boot_volume_size", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description for Cluster (string)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableKubernetesDashboard")
    def enable_kubernetes_dashboard(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
        """
        return pulumi.get(self, "enable_kubernetes_dashboard")

    @enable_kubernetes_dashboard.setter
    def enable_kubernetes_dashboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_kubernetes_dashboard", value)

    @property
    @pulumi.getter(name="enablePrivateControlPlane")
    def enable_private_control_plane(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether Kubernetes API endpoint is a private IP only accessible from within the VCN. Default `false` for Rancher v2.5.10 and above (bool)
        """
        return pulumi.get(self, "enable_private_control_plane")

    @enable_private_control_plane.setter
    def enable_private_control_plane(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_private_control_plane", value)

    @property
    @pulumi.getter(name="enablePrivateNodes")
    def enable_private_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
        """
        return pulumi.get(self, "enable_private_nodes")

    @enable_private_nodes.setter
    def enable_private_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_private_nodes", value)

    @property
    @pulumi.getter(name="flexOcpus")
    def flex_ocpus(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies number of OCPUs for nodes (requires flexible shape specified with `node_shape`) (int)
        """
        return pulumi.get(self, "flex_ocpus")

    @flex_ocpus.setter
    def flex_ocpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flex_ocpus", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of a KMS vault master key used to encrypt secrets at rest. See [here](https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengencryptingdata.htm) for help creating a vault and master encryption key. For Rancher v2.5.9 and above (string)
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="limitNodeCount")
    def limit_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of worker nodes. Can limit `quantity_per_subnet`. Default `0` (no limit) (int)
        """
        return pulumi.get(self, "limit_node_count")

    @limit_node_count.setter
    def limit_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit_node_count", value)

    @property
    @pulumi.getter(name="loadBalancerSubnetName1")
    def load_balancer_subnet_name1(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the first existing subnet to use for Kubernetes services / LB. `vcn_name` is also required when specifying an existing subnet. (string)
        """
        return pulumi.get(self, "load_balancer_subnet_name1")

    @load_balancer_subnet_name1.setter
    def load_balancer_subnet_name1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_subnet_name1", value)

    @property
    @pulumi.getter(name="loadBalancerSubnetName2")
    def load_balancer_subnet_name2(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a second existing subnet to use for Kubernetes services / LB. A second subnet is only required when it is AD-specific (non-regional) (string)
        """
        return pulumi.get(self, "load_balancer_subnet_name2")

    @load_balancer_subnet_name2.setter
    def load_balancer_subnet_name2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_subnet_name2", value)

    @property
    @pulumi.getter(name="nodePoolDnsDomainName")
    def node_pool_dns_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for DNS domain of node pool subnet. Default `nodedns` (string)
        """
        return pulumi.get(self, "node_pool_dns_domain_name")

    @node_pool_dns_domain_name.setter
    def node_pool_dns_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_dns_domain_name", value)

    @property
    @pulumi.getter(name="nodePoolSubnetName")
    def node_pool_subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for node pool subnet. Default `nodedns` (string)
        """
        return pulumi.get(self, "node_pool_subnet_name")

    @node_pool_subnet_name.setter
    def node_pool_subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_subnet_name", value)

    @property
    @pulumi.getter(name="nodePublicKeyContents")
    def node_public_key_contents(self) -> Optional[pulumi.Input[str]]:
        """
        The contents of the SSH public key file to use for the nodes (string)
        """
        return pulumi.get(self, "node_public_key_contents")

    @node_public_key_contents.setter
    def node_public_key_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_public_key_contents", value)

    @property
    @pulumi.getter(name="podCidr")
    def pod_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR IP range from which to assign Kubernetes Pod IPs (string)
        """
        return pulumi.get(self, "pod_cidr")

    @pod_cidr.setter
    def pod_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_cidr", value)

    @property
    @pulumi.getter(name="privateKeyPassphrase")
    def private_key_passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        The passphrase (if any) of the private key for the OKE cluster (string)
        """
        return pulumi.get(self, "private_key_passphrase")

    @private_key_passphrase.setter
    def private_key_passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_passphrase", value)

    @property
    @pulumi.getter(name="quantityOfNodeSubnets")
    def quantity_of_node_subnets(self) -> Optional[pulumi.Input[int]]:
        """
        Number of node subnets. Default `1` (int)
        """
        return pulumi.get(self, "quantity_of_node_subnets")

    @quantity_of_node_subnets.setter
    def quantity_of_node_subnets(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_of_node_subnets", value)

    @property
    @pulumi.getter(name="quantityPerSubnet")
    def quantity_per_subnet(self) -> Optional[pulumi.Input[int]]:
        """
        Number of OKE worker nodes in each subnet / availability domain. Default `1` (int)
        """
        return pulumi.get(self, "quantity_per_subnet")

    @quantity_per_subnet.setter
    def quantity_per_subnet(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity_per_subnet", value)

    @property
    @pulumi.getter(name="serviceCidr")
    def service_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        A CIDR IP range from which to assign Kubernetes Service IPs (string)
        """
        return pulumi.get(self, "service_cidr")

    @service_cidr.setter
    def service_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cidr", value)

    @property
    @pulumi.getter(name="serviceDnsDomainName")
    def service_dns_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for DNS domain of service subnet. Default `svcdns` (string)
        """
        return pulumi.get(self, "service_dns_domain_name")

    @service_dns_domain_name.setter
    def service_dns_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_dns_domain_name", value)

    @property
    @pulumi.getter(name="skipVcnDelete")
    def skip_vcn_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to skip deleting the virtual cloud network (VCN) on destroy. Default `false` (bool)
        """
        return pulumi.get(self, "skip_vcn_delete")

    @skip_vcn_delete.setter
    def skip_vcn_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_vcn_delete", value)

    @property
    @pulumi.getter(name="vcnCompartmentId")
    def vcn_compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the compartment (if different from `compartment_id`) in which to find the pre-existing virtual network set with `vcn_name`. (string)
        """
        return pulumi.get(self, "vcn_compartment_id")

    @vcn_compartment_id.setter
    def vcn_compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcn_compartment_id", value)

    @property
    @pulumi.getter(name="vcnName")
    def vcn_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an existing virtual network to use for the cluster creation. If set, you must also set `load_balancer_subnet_name_1`. A VCN and subnets will be created if none are specified. (string)
        """
        return pulumi.get(self, "vcn_name")

    @vcn_name.setter
    def vcn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcn_name", value)

    @property
    @pulumi.getter(name="workerNodeIngressCidr")
    def worker_node_ingress_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        Additional CIDR from which to allow ingress to worker nodes (string)
        """
        return pulumi.get(self, "worker_node_ingress_cidr")

    @worker_node_ingress_cidr.setter
    def worker_node_ingress_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_node_ingress_cidr", value)


@pulumi.input_type
class ClusterRke2ConfigArgs:
    def __init__(__self__, *,
                 upgrade_strategy: Optional[pulumi.Input['ClusterRke2ConfigUpgradeStrategyArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ClusterRke2ConfigUpgradeStrategyArgs'] upgrade_strategy: K3S upgrade strategy (List maxitems: 1)
        :param pulumi.Input[str] version: rancher-monitoring chart version (string)
        """
        ClusterRke2ConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            upgrade_strategy=upgrade_strategy,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             upgrade_strategy: Optional[pulumi.Input['ClusterRke2ConfigUpgradeStrategyArgs']] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'upgradeStrategy' in kwargs:
            upgrade_strategy = kwargs['upgradeStrategy']

        if upgrade_strategy is not None:
            _setter("upgrade_strategy", upgrade_strategy)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> Optional[pulumi.Input['ClusterRke2ConfigUpgradeStrategyArgs']]:
        """
        K3S upgrade strategy (List maxitems: 1)
        """
        return pulumi.get(self, "upgrade_strategy")

    @upgrade_strategy.setter
    def upgrade_strategy(self, value: Optional[pulumi.Input['ClusterRke2ConfigUpgradeStrategyArgs']]):
        pulumi.set(self, "upgrade_strategy", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        rancher-monitoring chart version (string)
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ClusterRke2ConfigUpgradeStrategyArgs:
    def __init__(__self__, *,
                 drain_server_nodes: Optional[pulumi.Input[bool]] = None,
                 drain_worker_nodes: Optional[pulumi.Input[bool]] = None,
                 server_concurrency: Optional[pulumi.Input[int]] = None,
                 worker_concurrency: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] drain_server_nodes: Drain server nodes. Default: `false` (bool)
        :param pulumi.Input[bool] drain_worker_nodes: Drain worker nodes. Default: `false` (bool)
        :param pulumi.Input[int] server_concurrency: Server concurrency. Default: `1` (int)
        :param pulumi.Input[int] worker_concurrency: Worker concurrency. Default: `1` (int)
        """
        ClusterRke2ConfigUpgradeStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            drain_server_nodes=drain_server_nodes,
            drain_worker_nodes=drain_worker_nodes,
            server_concurrency=server_concurrency,
            worker_concurrency=worker_concurrency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             drain_server_nodes: Optional[pulumi.Input[bool]] = None,
             drain_worker_nodes: Optional[pulumi.Input[bool]] = None,
             server_concurrency: Optional[pulumi.Input[int]] = None,
             worker_concurrency: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'drainServerNodes' in kwargs:
            drain_server_nodes = kwargs['drainServerNodes']
        if 'drainWorkerNodes' in kwargs:
            drain_worker_nodes = kwargs['drainWorkerNodes']
        if 'serverConcurrency' in kwargs:
            server_concurrency = kwargs['serverConcurrency']
        if 'workerConcurrency' in kwargs:
            worker_concurrency = kwargs['workerConcurrency']

        if drain_server_nodes is not None:
            _setter("drain_server_nodes", drain_server_nodes)
        if drain_worker_nodes is not None:
            _setter("drain_worker_nodes", drain_worker_nodes)
        if server_concurrency is not None:
            _setter("server_concurrency", server_concurrency)
        if worker_concurrency is not None:
            _setter("worker_concurrency", worker_concurrency)

    @property
    @pulumi.getter(name="drainServerNodes")
    def drain_server_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain server nodes. Default: `false` (bool)
        """
        return pulumi.get(self, "drain_server_nodes")

    @drain_server_nodes.setter
    def drain_server_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain_server_nodes", value)

    @property
    @pulumi.getter(name="drainWorkerNodes")
    def drain_worker_nodes(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain worker nodes. Default: `false` (bool)
        """
        return pulumi.get(self, "drain_worker_nodes")

    @drain_worker_nodes.setter
    def drain_worker_nodes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain_worker_nodes", value)

    @property
    @pulumi.getter(name="serverConcurrency")
    def server_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Server concurrency. Default: `1` (int)
        """
        return pulumi.get(self, "server_concurrency")

    @server_concurrency.setter
    def server_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "server_concurrency", value)

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Worker concurrency. Default: `1` (int)
        """
        return pulumi.get(self, "worker_concurrency")

    @worker_concurrency.setter
    def worker_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "worker_concurrency", value)


@pulumi.input_type
class ClusterRkeConfigArgs:
    def __init__(__self__, *,
                 addon_job_timeout: Optional[pulumi.Input[int]] = None,
                 addons: Optional[pulumi.Input[str]] = None,
                 addons_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authentication: Optional[pulumi.Input['ClusterRkeConfigAuthenticationArgs']] = None,
                 authorization: Optional[pulumi.Input['ClusterRkeConfigAuthorizationArgs']] = None,
                 bastion_host: Optional[pulumi.Input['ClusterRkeConfigBastionHostArgs']] = None,
                 cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderArgs']] = None,
                 dns: Optional[pulumi.Input['ClusterRkeConfigDnsArgs']] = None,
                 enable_cri_dockerd: Optional[pulumi.Input[bool]] = None,
                 ignore_docker_version: Optional[pulumi.Input[bool]] = None,
                 ingress: Optional[pulumi.Input['ClusterRkeConfigIngressArgs']] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 monitoring: Optional[pulumi.Input['ClusterRkeConfigMonitoringArgs']] = None,
                 network: Optional[pulumi.Input['ClusterRkeConfigNetworkArgs']] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNodeArgs']]]] = None,
                 prefix_path: Optional[pulumi.Input[str]] = None,
                 private_registries: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigPrivateRegistryArgs']]]] = None,
                 services: Optional[pulumi.Input['ClusterRkeConfigServicesArgs']] = None,
                 ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
                 ssh_cert_path: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None,
                 upgrade_strategy: Optional[pulumi.Input['ClusterRkeConfigUpgradeStrategyArgs']] = None,
                 win_prefix_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] addon_job_timeout: Duration in seconds of addon job (int)
        :param pulumi.Input[str] addons: Addons descripton to deploy on RKE cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] addons_includes: Addons yaml manifests to deploy on RKE cluster (list)
        :param pulumi.Input['ClusterRkeConfigAuthenticationArgs'] authentication: Kubernetes cluster authentication (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigAuthorizationArgs'] authorization: Kubernetes cluster authorization (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigBastionHostArgs'] bastion_host: RKE bastion host (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderArgs'] cloud_provider: RKE options for Calico network provider (string)
        :param pulumi.Input['ClusterRkeConfigDnsArgs'] dns: RKE dns add-on. For Rancher v2.2.x (list maxitems:1)
        :param pulumi.Input[bool] enable_cri_dockerd: Enable/disable using cri-dockerd. Deafult: `false` [enable_cri_dockerd](https://rancher.com/docs/rke/latest/en/config-options/#cri-dockerd) (bool)
        :param pulumi.Input[bool] ignore_docker_version: Ignore docker version. Default `true` (bool)
        :param pulumi.Input['ClusterRkeConfigIngressArgs'] ingress: Kubernetes ingress configuration (list maxitems:1)
        :param pulumi.Input[str] kubernetes_version: The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        :param pulumi.Input['ClusterRkeConfigMonitoringArgs'] monitoring: Is AKS cluster monitoring enabled? (bool)
        :param pulumi.Input['ClusterRkeConfigNetworkArgs'] network: The GKE cluster network. Required for create new cluster (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNodeArgs']]] nodes: RKE cluster nodes (list)
        :param pulumi.Input[str] prefix_path: Prefix to customize Kubernetes path (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigPrivateRegistryArgs']]] private_registries: private registries for docker images (list)
        :param pulumi.Input['ClusterRkeConfigServicesArgs'] services: Kubernetes cluster services (list maxitems:1)
        :param pulumi.Input[bool] ssh_agent_auth: Use ssh agent auth. Default `false` (bool)
        :param pulumi.Input[str] ssh_cert_path: Cluster level SSH certificate path (string)
        :param pulumi.Input[str] ssh_key_path: Node SSH private key path (string)
        :param pulumi.Input['ClusterRkeConfigUpgradeStrategyArgs'] upgrade_strategy: K3S upgrade strategy (List maxitems: 1)
        :param pulumi.Input[str] win_prefix_path: Prefix to customize Kubernetes path for windows (string)
        """
        ClusterRkeConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            addon_job_timeout=addon_job_timeout,
            addons=addons,
            addons_includes=addons_includes,
            authentication=authentication,
            authorization=authorization,
            bastion_host=bastion_host,
            cloud_provider=cloud_provider,
            dns=dns,
            enable_cri_dockerd=enable_cri_dockerd,
            ignore_docker_version=ignore_docker_version,
            ingress=ingress,
            kubernetes_version=kubernetes_version,
            monitoring=monitoring,
            network=network,
            nodes=nodes,
            prefix_path=prefix_path,
            private_registries=private_registries,
            services=services,
            ssh_agent_auth=ssh_agent_auth,
            ssh_cert_path=ssh_cert_path,
            ssh_key_path=ssh_key_path,
            upgrade_strategy=upgrade_strategy,
            win_prefix_path=win_prefix_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             addon_job_timeout: Optional[pulumi.Input[int]] = None,
             addons: Optional[pulumi.Input[str]] = None,
             addons_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             authentication: Optional[pulumi.Input['ClusterRkeConfigAuthenticationArgs']] = None,
             authorization: Optional[pulumi.Input['ClusterRkeConfigAuthorizationArgs']] = None,
             bastion_host: Optional[pulumi.Input['ClusterRkeConfigBastionHostArgs']] = None,
             cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderArgs']] = None,
             dns: Optional[pulumi.Input['ClusterRkeConfigDnsArgs']] = None,
             enable_cri_dockerd: Optional[pulumi.Input[bool]] = None,
             ignore_docker_version: Optional[pulumi.Input[bool]] = None,
             ingress: Optional[pulumi.Input['ClusterRkeConfigIngressArgs']] = None,
             kubernetes_version: Optional[pulumi.Input[str]] = None,
             monitoring: Optional[pulumi.Input['ClusterRkeConfigMonitoringArgs']] = None,
             network: Optional[pulumi.Input['ClusterRkeConfigNetworkArgs']] = None,
             nodes: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNodeArgs']]]] = None,
             prefix_path: Optional[pulumi.Input[str]] = None,
             private_registries: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigPrivateRegistryArgs']]]] = None,
             services: Optional[pulumi.Input['ClusterRkeConfigServicesArgs']] = None,
             ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
             ssh_cert_path: Optional[pulumi.Input[str]] = None,
             ssh_key_path: Optional[pulumi.Input[str]] = None,
             upgrade_strategy: Optional[pulumi.Input['ClusterRkeConfigUpgradeStrategyArgs']] = None,
             win_prefix_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addonJobTimeout' in kwargs:
            addon_job_timeout = kwargs['addonJobTimeout']
        if 'addonsIncludes' in kwargs:
            addons_includes = kwargs['addonsIncludes']
        if 'bastionHost' in kwargs:
            bastion_host = kwargs['bastionHost']
        if 'cloudProvider' in kwargs:
            cloud_provider = kwargs['cloudProvider']
        if 'enableCriDockerd' in kwargs:
            enable_cri_dockerd = kwargs['enableCriDockerd']
        if 'ignoreDockerVersion' in kwargs:
            ignore_docker_version = kwargs['ignoreDockerVersion']
        if 'kubernetesVersion' in kwargs:
            kubernetes_version = kwargs['kubernetesVersion']
        if 'prefixPath' in kwargs:
            prefix_path = kwargs['prefixPath']
        if 'privateRegistries' in kwargs:
            private_registries = kwargs['privateRegistries']
        if 'sshAgentAuth' in kwargs:
            ssh_agent_auth = kwargs['sshAgentAuth']
        if 'sshCertPath' in kwargs:
            ssh_cert_path = kwargs['sshCertPath']
        if 'sshKeyPath' in kwargs:
            ssh_key_path = kwargs['sshKeyPath']
        if 'upgradeStrategy' in kwargs:
            upgrade_strategy = kwargs['upgradeStrategy']
        if 'winPrefixPath' in kwargs:
            win_prefix_path = kwargs['winPrefixPath']

        if addon_job_timeout is not None:
            _setter("addon_job_timeout", addon_job_timeout)
        if addons is not None:
            _setter("addons", addons)
        if addons_includes is not None:
            _setter("addons_includes", addons_includes)
        if authentication is not None:
            _setter("authentication", authentication)
        if authorization is not None:
            _setter("authorization", authorization)
        if bastion_host is not None:
            _setter("bastion_host", bastion_host)
        if cloud_provider is not None:
            _setter("cloud_provider", cloud_provider)
        if dns is not None:
            _setter("dns", dns)
        if enable_cri_dockerd is not None:
            _setter("enable_cri_dockerd", enable_cri_dockerd)
        if ignore_docker_version is not None:
            _setter("ignore_docker_version", ignore_docker_version)
        if ingress is not None:
            _setter("ingress", ingress)
        if kubernetes_version is not None:
            _setter("kubernetes_version", kubernetes_version)
        if monitoring is not None:
            _setter("monitoring", monitoring)
        if network is not None:
            _setter("network", network)
        if nodes is not None:
            _setter("nodes", nodes)
        if prefix_path is not None:
            _setter("prefix_path", prefix_path)
        if private_registries is not None:
            _setter("private_registries", private_registries)
        if services is not None:
            _setter("services", services)
        if ssh_agent_auth is not None:
            _setter("ssh_agent_auth", ssh_agent_auth)
        if ssh_cert_path is not None:
            _setter("ssh_cert_path", ssh_cert_path)
        if ssh_key_path is not None:
            _setter("ssh_key_path", ssh_key_path)
        if upgrade_strategy is not None:
            _setter("upgrade_strategy", upgrade_strategy)
        if win_prefix_path is not None:
            _setter("win_prefix_path", win_prefix_path)

    @property
    @pulumi.getter(name="addonJobTimeout")
    def addon_job_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Duration in seconds of addon job (int)
        """
        return pulumi.get(self, "addon_job_timeout")

    @addon_job_timeout.setter
    def addon_job_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "addon_job_timeout", value)

    @property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input[str]]:
        """
        Addons descripton to deploy on RKE cluster.
        """
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addons", value)

    @property
    @pulumi.getter(name="addonsIncludes")
    def addons_includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Addons yaml manifests to deploy on RKE cluster (list)
        """
        return pulumi.get(self, "addons_includes")

    @addons_includes.setter
    def addons_includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addons_includes", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['ClusterRkeConfigAuthenticationArgs']]:
        """
        Kubernetes cluster authentication (list maxitems:1)
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['ClusterRkeConfigAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['ClusterRkeConfigAuthorizationArgs']]:
        """
        Kubernetes cluster authorization (list maxitems:1)
        """
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['ClusterRkeConfigAuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="bastionHost")
    def bastion_host(self) -> Optional[pulumi.Input['ClusterRkeConfigBastionHostArgs']]:
        """
        RKE bastion host (list maxitems:1)
        """
        return pulumi.get(self, "bastion_host")

    @bastion_host.setter
    def bastion_host(self, value: Optional[pulumi.Input['ClusterRkeConfigBastionHostArgs']]):
        pulumi.set(self, "bastion_host", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderArgs']]:
        """
        RKE options for Calico network provider (string)
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderArgs']]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['ClusterRkeConfigDnsArgs']]:
        """
        RKE dns add-on. For Rancher v2.2.x (list maxitems:1)
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['ClusterRkeConfigDnsArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="enableCriDockerd")
    def enable_cri_dockerd(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable/disable using cri-dockerd. Deafult: `false` [enable_cri_dockerd](https://rancher.com/docs/rke/latest/en/config-options/#cri-dockerd) (bool)
        """
        return pulumi.get(self, "enable_cri_dockerd")

    @enable_cri_dockerd.setter
    def enable_cri_dockerd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cri_dockerd", value)

    @property
    @pulumi.getter(name="ignoreDockerVersion")
    def ignore_docker_version(self) -> Optional[pulumi.Input[bool]]:
        """
        Ignore docker version. Default `true` (bool)
        """
        return pulumi.get(self, "ignore_docker_version")

    @ignore_docker_version.setter
    def ignore_docker_version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_docker_version", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ClusterRkeConfigIngressArgs']]:
        """
        Kubernetes ingress configuration (list maxitems:1)
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ClusterRkeConfigIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        """
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input['ClusterRkeConfigMonitoringArgs']]:
        """
        Is AKS cluster monitoring enabled? (bool)
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input['ClusterRkeConfigMonitoringArgs']]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ClusterRkeConfigNetworkArgs']]:
        """
        The GKE cluster network. Required for create new cluster (string)
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ClusterRkeConfigNetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNodeArgs']]]]:
        """
        RKE cluster nodes (list)
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="prefixPath")
    def prefix_path(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix to customize Kubernetes path (string)
        """
        return pulumi.get(self, "prefix_path")

    @prefix_path.setter
    def prefix_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_path", value)

    @property
    @pulumi.getter(name="privateRegistries")
    def private_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigPrivateRegistryArgs']]]]:
        """
        private registries for docker images (list)
        """
        return pulumi.get(self, "private_registries")

    @private_registries.setter
    def private_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigPrivateRegistryArgs']]]]):
        pulumi.set(self, "private_registries", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesArgs']]:
        """
        Kubernetes cluster services (list maxitems:1)
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesArgs']]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sshAgentAuth")
    def ssh_agent_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Use ssh agent auth. Default `false` (bool)
        """
        return pulumi.get(self, "ssh_agent_auth")

    @ssh_agent_auth.setter
    def ssh_agent_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssh_agent_auth", value)

    @property
    @pulumi.getter(name="sshCertPath")
    def ssh_cert_path(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster level SSH certificate path (string)
        """
        return pulumi.get(self, "ssh_cert_path")

    @ssh_cert_path.setter
    def ssh_cert_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_cert_path", value)

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> Optional[pulumi.Input[str]]:
        """
        Node SSH private key path (string)
        """
        return pulumi.get(self, "ssh_key_path")

    @ssh_key_path.setter
    def ssh_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_path", value)

    @property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> Optional[pulumi.Input['ClusterRkeConfigUpgradeStrategyArgs']]:
        """
        K3S upgrade strategy (List maxitems: 1)
        """
        return pulumi.get(self, "upgrade_strategy")

    @upgrade_strategy.setter
    def upgrade_strategy(self, value: Optional[pulumi.Input['ClusterRkeConfigUpgradeStrategyArgs']]):
        pulumi.set(self, "upgrade_strategy", value)

    @property
    @pulumi.getter(name="winPrefixPath")
    def win_prefix_path(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix to customize Kubernetes path for windows (string)
        """
        return pulumi.get(self, "win_prefix_path")

    @win_prefix_path.setter
    def win_prefix_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "win_prefix_path", value)


@pulumi.input_type
class ClusterRkeConfigAuthenticationArgs:
    def __init__(__self__, *,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sans: RKE sans for authentication ([]string)
        :param pulumi.Input[str] strategy: Monitoring deployment update strategy (string)
        """
        ClusterRkeConfigAuthenticationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sans=sans,
            strategy=strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if sans is not None:
            _setter("sans", sans)
        if strategy is not None:
            _setter("strategy", strategy)

    @property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        RKE sans for authentication ([]string)
        """
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sans", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring deployment update strategy (string)
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ClusterRkeConfigAuthorizationArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] mode: The AKS node group mode. Default: `System` (string)
        :param pulumi.Input[Mapping[str, Any]] options: RKE options for network (map)
        """
        ClusterRkeConfigAuthorizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
            options=options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: Optional[pulumi.Input[str]] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if mode is not None:
            _setter("mode", mode)
        if options is not None:
            _setter("options", options)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS node group mode. Default: `System` (string)
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        RKE options for network (map)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class ClusterRkeConfigBastionHostArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 user: pulumi.Input[str],
                 port: Optional[pulumi.Input[str]] = None,
                 ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
                 ssh_key: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Address ip for node (string)
        :param pulumi.Input[str] user: Registry user (string)
        :param pulumi.Input[str] port: Port for node. Default `22` (string)
        :param pulumi.Input[bool] ssh_agent_auth: Use ssh agent auth. Default `false` (bool)
        :param pulumi.Input[str] ssh_key: Node SSH private key (string)
        :param pulumi.Input[str] ssh_key_path: Node SSH private key path (string)
        """
        ClusterRkeConfigBastionHostArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            user=user,
            port=port,
            ssh_agent_auth=ssh_agent_auth,
            ssh_key=ssh_key,
            ssh_key_path=ssh_key_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: pulumi.Input[str],
             user: pulumi.Input[str],
             port: Optional[pulumi.Input[str]] = None,
             ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
             ssh_key: Optional[pulumi.Input[str]] = None,
             ssh_key_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sshAgentAuth' in kwargs:
            ssh_agent_auth = kwargs['sshAgentAuth']
        if 'sshKey' in kwargs:
            ssh_key = kwargs['sshKey']
        if 'sshKeyPath' in kwargs:
            ssh_key_path = kwargs['sshKeyPath']

        _setter("address", address)
        _setter("user", user)
        if port is not None:
            _setter("port", port)
        if ssh_agent_auth is not None:
            _setter("ssh_agent_auth", ssh_agent_auth)
        if ssh_key is not None:
            _setter("ssh_key", ssh_key)
        if ssh_key_path is not None:
            _setter("ssh_key_path", ssh_key_path)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        Address ip for node (string)
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        Registry user (string)
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port for node. Default `22` (string)
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshAgentAuth")
    def ssh_agent_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Use ssh agent auth. Default `false` (bool)
        """
        return pulumi.get(self, "ssh_agent_auth")

    @ssh_agent_auth.setter
    def ssh_agent_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssh_agent_auth", value)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional[pulumi.Input[str]]:
        """
        Node SSH private key (string)
        """
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> Optional[pulumi.Input[str]]:
        """
        Node SSH private key path (string)
        """
        return pulumi.get(self, "ssh_key_path")

    @ssh_key_path.setter
    def ssh_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_path", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderArgs:
    def __init__(__self__, *,
                 aws_cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderArgs']] = None,
                 azure_cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderAzureCloudProviderArgs']] = None,
                 custom_cloud_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 openstack_cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs']] = None,
                 vsphere_cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderArgs']] = None):
        """
        :param pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderArgs'] aws_cloud_provider: RKE AWS Cloud Provider config for Cloud Provider [rke-aws-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/) (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderAzureCloudProviderArgs'] azure_cloud_provider: RKE Azure Cloud Provider config for Cloud Provider [rke-azure-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/azure/) (list maxitems:1)
        :param pulumi.Input[str] custom_cloud_provider: RKE Custom Cloud Provider config for Cloud Provider (string)
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs'] openstack_cloud_provider: RKE Openstack Cloud Provider config for Cloud Provider [rke-openstack-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/openstack/) (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderArgs'] vsphere_cloud_provider: RKE Vsphere Cloud Provider config for Cloud Provider [rke-vsphere-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/vsphere/) Extra argument `name` is required on `virtual_center` configuration. (list maxitems:1)
        """
        ClusterRkeConfigCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_cloud_provider=aws_cloud_provider,
            azure_cloud_provider=azure_cloud_provider,
            custom_cloud_provider=custom_cloud_provider,
            name=name,
            openstack_cloud_provider=openstack_cloud_provider,
            vsphere_cloud_provider=vsphere_cloud_provider,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderArgs']] = None,
             azure_cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderAzureCloudProviderArgs']] = None,
             custom_cloud_provider: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             openstack_cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs']] = None,
             vsphere_cloud_provider: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awsCloudProvider' in kwargs:
            aws_cloud_provider = kwargs['awsCloudProvider']
        if 'azureCloudProvider' in kwargs:
            azure_cloud_provider = kwargs['azureCloudProvider']
        if 'customCloudProvider' in kwargs:
            custom_cloud_provider = kwargs['customCloudProvider']
        if 'openstackCloudProvider' in kwargs:
            openstack_cloud_provider = kwargs['openstackCloudProvider']
        if 'vsphereCloudProvider' in kwargs:
            vsphere_cloud_provider = kwargs['vsphereCloudProvider']

        if aws_cloud_provider is not None:
            _setter("aws_cloud_provider", aws_cloud_provider)
        if azure_cloud_provider is not None:
            _setter("azure_cloud_provider", azure_cloud_provider)
        if custom_cloud_provider is not None:
            _setter("custom_cloud_provider", custom_cloud_provider)
        if name is not None:
            _setter("name", name)
        if openstack_cloud_provider is not None:
            _setter("openstack_cloud_provider", openstack_cloud_provider)
        if vsphere_cloud_provider is not None:
            _setter("vsphere_cloud_provider", vsphere_cloud_provider)

    @property
    @pulumi.getter(name="awsCloudProvider")
    def aws_cloud_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderArgs']]:
        """
        RKE AWS Cloud Provider config for Cloud Provider [rke-aws-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/) (list maxitems:1)
        """
        return pulumi.get(self, "aws_cloud_provider")

    @aws_cloud_provider.setter
    def aws_cloud_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderArgs']]):
        pulumi.set(self, "aws_cloud_provider", value)

    @property
    @pulumi.getter(name="azureCloudProvider")
    def azure_cloud_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderAzureCloudProviderArgs']]:
        """
        RKE Azure Cloud Provider config for Cloud Provider [rke-azure-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/azure/) (list maxitems:1)
        """
        return pulumi.get(self, "azure_cloud_provider")

    @azure_cloud_provider.setter
    def azure_cloud_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderAzureCloudProviderArgs']]):
        pulumi.set(self, "azure_cloud_provider", value)

    @property
    @pulumi.getter(name="customCloudProvider")
    def custom_cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        RKE Custom Cloud Provider config for Cloud Provider (string)
        """
        return pulumi.get(self, "custom_cloud_provider")

    @custom_cloud_provider.setter
    def custom_cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_cloud_provider", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="openstackCloudProvider")
    def openstack_cloud_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs']]:
        """
        RKE Openstack Cloud Provider config for Cloud Provider [rke-openstack-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/openstack/) (list maxitems:1)
        """
        return pulumi.get(self, "openstack_cloud_provider")

    @openstack_cloud_provider.setter
    def openstack_cloud_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs']]):
        pulumi.set(self, "openstack_cloud_provider", value)

    @property
    @pulumi.getter(name="vsphereCloudProvider")
    def vsphere_cloud_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderArgs']]:
        """
        RKE Vsphere Cloud Provider config for Cloud Provider [rke-vsphere-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/vsphere/) Extra argument `name` is required on `virtual_center` configuration. (list maxitems:1)
        """
        return pulumi.get(self, "vsphere_cloud_provider")

    @vsphere_cloud_provider.setter
    def vsphere_cloud_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderArgs']]):
        pulumi.set(self, "vsphere_cloud_provider", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderAwsCloudProviderArgs:
    def __init__(__self__, *,
                 global_: Optional[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs']] = None,
                 service_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs']]]] = None):
        """
        :param pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs'] global_: (list maxitems:1)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs']]] service_overrides: (list)
        """
        ClusterRkeConfigCloudProviderAwsCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            global_=global_,
            service_overrides=service_overrides,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             global_: Optional[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs']] = None,
             service_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'global' in kwargs:
            global_ = kwargs['global']
        if 'serviceOverrides' in kwargs:
            service_overrides = kwargs['serviceOverrides']

        if global_ is not None:
            _setter("global_", global_)
        if service_overrides is not None:
            _setter("service_overrides", service_overrides)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs']]:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs']]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter(name="serviceOverrides")
    def service_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs']]]]:
        """
        (list)
        """
        return pulumi.get(self, "service_overrides")

    @service_overrides.setter
    def service_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs']]]]):
        pulumi.set(self, "service_overrides", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs:
    def __init__(__self__, *,
                 disable_security_group_ingress: Optional[pulumi.Input[bool]] = None,
                 disable_strict_zone_check: Optional[pulumi.Input[bool]] = None,
                 elb_security_group: Optional[pulumi.Input[str]] = None,
                 kubernetes_cluster_id: Optional[pulumi.Input[str]] = None,
                 kubernetes_cluster_tag: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disable_security_group_ingress: Default `false` (bool)
        :param pulumi.Input[bool] disable_strict_zone_check: Default `false` (bool)
        :param pulumi.Input[str] elb_security_group: (string)
        :param pulumi.Input[str] kubernetes_cluster_id: (string)
        :param pulumi.Input[str] kubernetes_cluster_tag: (string)
        :param pulumi.Input[str] role_arn: (string)
        :param pulumi.Input[str] route_table_id: (string)
        :param pulumi.Input[str] subnet_id: (string)
        :param pulumi.Input[str] vpc: (string)
        :param pulumi.Input[str] zone: The GKE cluster zone. Required if `region` not set (string)
        """
        ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disable_security_group_ingress=disable_security_group_ingress,
            disable_strict_zone_check=disable_strict_zone_check,
            elb_security_group=elb_security_group,
            kubernetes_cluster_id=kubernetes_cluster_id,
            kubernetes_cluster_tag=kubernetes_cluster_tag,
            role_arn=role_arn,
            route_table_id=route_table_id,
            subnet_id=subnet_id,
            vpc=vpc,
            zone=zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disable_security_group_ingress: Optional[pulumi.Input[bool]] = None,
             disable_strict_zone_check: Optional[pulumi.Input[bool]] = None,
             elb_security_group: Optional[pulumi.Input[str]] = None,
             kubernetes_cluster_id: Optional[pulumi.Input[str]] = None,
             kubernetes_cluster_tag: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             route_table_id: Optional[pulumi.Input[str]] = None,
             subnet_id: Optional[pulumi.Input[str]] = None,
             vpc: Optional[pulumi.Input[str]] = None,
             zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'disableSecurityGroupIngress' in kwargs:
            disable_security_group_ingress = kwargs['disableSecurityGroupIngress']
        if 'disableStrictZoneCheck' in kwargs:
            disable_strict_zone_check = kwargs['disableStrictZoneCheck']
        if 'elbSecurityGroup' in kwargs:
            elb_security_group = kwargs['elbSecurityGroup']
        if 'kubernetesClusterId' in kwargs:
            kubernetes_cluster_id = kwargs['kubernetesClusterId']
        if 'kubernetesClusterTag' in kwargs:
            kubernetes_cluster_tag = kwargs['kubernetesClusterTag']
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if 'routeTableId' in kwargs:
            route_table_id = kwargs['routeTableId']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']

        if disable_security_group_ingress is not None:
            _setter("disable_security_group_ingress", disable_security_group_ingress)
        if disable_strict_zone_check is not None:
            _setter("disable_strict_zone_check", disable_strict_zone_check)
        if elb_security_group is not None:
            _setter("elb_security_group", elb_security_group)
        if kubernetes_cluster_id is not None:
            _setter("kubernetes_cluster_id", kubernetes_cluster_id)
        if kubernetes_cluster_tag is not None:
            _setter("kubernetes_cluster_tag", kubernetes_cluster_tag)
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if route_table_id is not None:
            _setter("route_table_id", route_table_id)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)
        if vpc is not None:
            _setter("vpc", vpc)
        if zone is not None:
            _setter("zone", zone)

    @property
    @pulumi.getter(name="disableSecurityGroupIngress")
    def disable_security_group_ingress(self) -> Optional[pulumi.Input[bool]]:
        """
        Default `false` (bool)
        """
        return pulumi.get(self, "disable_security_group_ingress")

    @disable_security_group_ingress.setter
    def disable_security_group_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_security_group_ingress", value)

    @property
    @pulumi.getter(name="disableStrictZoneCheck")
    def disable_strict_zone_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Default `false` (bool)
        """
        return pulumi.get(self, "disable_strict_zone_check")

    @disable_strict_zone_check.setter
    def disable_strict_zone_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_strict_zone_check", value)

    @property
    @pulumi.getter(name="elbSecurityGroup")
    def elb_security_group(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "elb_security_group")

    @elb_security_group.setter
    def elb_security_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elb_security_group", value)

    @property
    @pulumi.getter(name="kubernetesClusterId")
    def kubernetes_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "kubernetes_cluster_id")

    @kubernetes_cluster_id.setter
    def kubernetes_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_cluster_id", value)

    @property
    @pulumi.getter(name="kubernetesClusterTag")
    def kubernetes_cluster_tag(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "kubernetes_cluster_tag")

    @kubernetes_cluster_tag.setter
    def kubernetes_cluster_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_cluster_tag", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE cluster zone. Required if `region` not set (string)
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs:
    def __init__(__self__, *,
                 service: pulumi.Input[str],
                 region: Optional[pulumi.Input[str]] = None,
                 signing_method: Optional[pulumi.Input[str]] = None,
                 signing_name: Optional[pulumi.Input[str]] = None,
                 signing_region: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] service: (string)
        :param pulumi.Input[str] region: The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        :param pulumi.Input[str] signing_method: (string)
        :param pulumi.Input[str] signing_name: (string)
        :param pulumi.Input[str] signing_region: (string)
        :param pulumi.Input[str] url: Registry URL (string)
        """
        ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            service=service,
            region=region,
            signing_method=signing_method,
            signing_name=signing_name,
            signing_region=signing_region,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             service: pulumi.Input[str],
             region: Optional[pulumi.Input[str]] = None,
             signing_method: Optional[pulumi.Input[str]] = None,
             signing_name: Optional[pulumi.Input[str]] = None,
             signing_region: Optional[pulumi.Input[str]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'signingMethod' in kwargs:
            signing_method = kwargs['signingMethod']
        if 'signingName' in kwargs:
            signing_name = kwargs['signingName']
        if 'signingRegion' in kwargs:
            signing_region = kwargs['signingRegion']

        _setter("service", service)
        if region is not None:
            _setter("region", region)
        if signing_method is not None:
            _setter("signing_method", signing_method)
        if signing_name is not None:
            _setter("signing_name", signing_name)
        if signing_region is not None:
            _setter("signing_region", signing_region)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="signingMethod")
    def signing_method(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "signing_method")

    @signing_method.setter
    def signing_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signing_method", value)

    @property
    @pulumi.getter(name="signingName")
    def signing_name(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "signing_name")

    @signing_name.setter
    def signing_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signing_name", value)

    @property
    @pulumi.getter(name="signingRegion")
    def signing_region(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "signing_region")

    @signing_region.setter
    def signing_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signing_region", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Registry URL (string)
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderAzureCloudProviderArgs:
    def __init__(__self__, *,
                 aad_client_id: pulumi.Input[str],
                 aad_client_secret: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 aad_client_cert_password: Optional[pulumi.Input[str]] = None,
                 aad_client_cert_path: Optional[pulumi.Input[str]] = None,
                 cloud: Optional[pulumi.Input[str]] = None,
                 cloud_provider_backoff: Optional[pulumi.Input[bool]] = None,
                 cloud_provider_backoff_duration: Optional[pulumi.Input[int]] = None,
                 cloud_provider_backoff_exponent: Optional[pulumi.Input[int]] = None,
                 cloud_provider_backoff_jitter: Optional[pulumi.Input[int]] = None,
                 cloud_provider_backoff_retries: Optional[pulumi.Input[int]] = None,
                 cloud_provider_rate_limit: Optional[pulumi.Input[bool]] = None,
                 cloud_provider_rate_limit_bucket: Optional[pulumi.Input[int]] = None,
                 cloud_provider_rate_limit_qps: Optional[pulumi.Input[int]] = None,
                 load_balancer_sku: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_load_balancer_rule_count: Optional[pulumi.Input[int]] = None,
                 primary_availability_set_name: Optional[pulumi.Input[str]] = None,
                 primary_scale_set_name: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 route_table_name: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None,
                 subnet_name: Optional[pulumi.Input[str]] = None,
                 use_instance_metadata: Optional[pulumi.Input[bool]] = None,
                 use_managed_identity_extension: Optional[pulumi.Input[bool]] = None,
                 vm_type: Optional[pulumi.Input[str]] = None,
                 vnet_name: Optional[pulumi.Input[str]] = None,
                 vnet_resource_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aad_client_id: (string)
        :param pulumi.Input[str] aad_client_secret: (string)
        :param pulumi.Input[str] subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        :param pulumi.Input[str] tenant_id: Azure tenant ID to use (string)
        :param pulumi.Input[str] aad_client_cert_password: (string)
        :param pulumi.Input[str] aad_client_cert_path: (string)
        :param pulumi.Input[str] cloud: (string)
        :param pulumi.Input[bool] cloud_provider_backoff: (bool)
        :param pulumi.Input[int] cloud_provider_backoff_duration: (int)
        :param pulumi.Input[int] cloud_provider_backoff_exponent: (int)
        :param pulumi.Input[int] cloud_provider_backoff_jitter: (int)
        :param pulumi.Input[int] cloud_provider_backoff_retries: (int)
        :param pulumi.Input[bool] cloud_provider_rate_limit: (bool)
        :param pulumi.Input[int] cloud_provider_rate_limit_bucket: (int)
        :param pulumi.Input[int] cloud_provider_rate_limit_qps: (int)
        :param pulumi.Input[str] load_balancer_sku: The AKS load balancer sku (string)
        :param pulumi.Input[str] location: Azure Kubernetes cluster location. Default `eastus` (string)
        :param pulumi.Input[int] maximum_load_balancer_rule_count: (int)
        :param pulumi.Input[str] primary_availability_set_name: (string)
        :param pulumi.Input[str] primary_scale_set_name: (string)
        :param pulumi.Input[str] resource_group: The AKS resource group (string)
        :param pulumi.Input[str] route_table_name: (string)
        :param pulumi.Input[str] security_group_name: (string)
        :param pulumi.Input[str] subnet_name: (string)
        :param pulumi.Input[bool] use_instance_metadata: (bool)
        :param pulumi.Input[bool] use_managed_identity_extension: (bool)
        :param pulumi.Input[str] vm_type: (string)
        :param pulumi.Input[str] vnet_name: (string)
        :param pulumi.Input[str] vnet_resource_group: (string)
        """
        ClusterRkeConfigCloudProviderAzureCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aad_client_id=aad_client_id,
            aad_client_secret=aad_client_secret,
            subscription_id=subscription_id,
            tenant_id=tenant_id,
            aad_client_cert_password=aad_client_cert_password,
            aad_client_cert_path=aad_client_cert_path,
            cloud=cloud,
            cloud_provider_backoff=cloud_provider_backoff,
            cloud_provider_backoff_duration=cloud_provider_backoff_duration,
            cloud_provider_backoff_exponent=cloud_provider_backoff_exponent,
            cloud_provider_backoff_jitter=cloud_provider_backoff_jitter,
            cloud_provider_backoff_retries=cloud_provider_backoff_retries,
            cloud_provider_rate_limit=cloud_provider_rate_limit,
            cloud_provider_rate_limit_bucket=cloud_provider_rate_limit_bucket,
            cloud_provider_rate_limit_qps=cloud_provider_rate_limit_qps,
            load_balancer_sku=load_balancer_sku,
            location=location,
            maximum_load_balancer_rule_count=maximum_load_balancer_rule_count,
            primary_availability_set_name=primary_availability_set_name,
            primary_scale_set_name=primary_scale_set_name,
            resource_group=resource_group,
            route_table_name=route_table_name,
            security_group_name=security_group_name,
            subnet_name=subnet_name,
            use_instance_metadata=use_instance_metadata,
            use_managed_identity_extension=use_managed_identity_extension,
            vm_type=vm_type,
            vnet_name=vnet_name,
            vnet_resource_group=vnet_resource_group,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aad_client_id: pulumi.Input[str],
             aad_client_secret: pulumi.Input[str],
             subscription_id: pulumi.Input[str],
             tenant_id: pulumi.Input[str],
             aad_client_cert_password: Optional[pulumi.Input[str]] = None,
             aad_client_cert_path: Optional[pulumi.Input[str]] = None,
             cloud: Optional[pulumi.Input[str]] = None,
             cloud_provider_backoff: Optional[pulumi.Input[bool]] = None,
             cloud_provider_backoff_duration: Optional[pulumi.Input[int]] = None,
             cloud_provider_backoff_exponent: Optional[pulumi.Input[int]] = None,
             cloud_provider_backoff_jitter: Optional[pulumi.Input[int]] = None,
             cloud_provider_backoff_retries: Optional[pulumi.Input[int]] = None,
             cloud_provider_rate_limit: Optional[pulumi.Input[bool]] = None,
             cloud_provider_rate_limit_bucket: Optional[pulumi.Input[int]] = None,
             cloud_provider_rate_limit_qps: Optional[pulumi.Input[int]] = None,
             load_balancer_sku: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             maximum_load_balancer_rule_count: Optional[pulumi.Input[int]] = None,
             primary_availability_set_name: Optional[pulumi.Input[str]] = None,
             primary_scale_set_name: Optional[pulumi.Input[str]] = None,
             resource_group: Optional[pulumi.Input[str]] = None,
             route_table_name: Optional[pulumi.Input[str]] = None,
             security_group_name: Optional[pulumi.Input[str]] = None,
             subnet_name: Optional[pulumi.Input[str]] = None,
             use_instance_metadata: Optional[pulumi.Input[bool]] = None,
             use_managed_identity_extension: Optional[pulumi.Input[bool]] = None,
             vm_type: Optional[pulumi.Input[str]] = None,
             vnet_name: Optional[pulumi.Input[str]] = None,
             vnet_resource_group: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aadClientId' in kwargs:
            aad_client_id = kwargs['aadClientId']
        if 'aadClientSecret' in kwargs:
            aad_client_secret = kwargs['aadClientSecret']
        if 'subscriptionId' in kwargs:
            subscription_id = kwargs['subscriptionId']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if 'aadClientCertPassword' in kwargs:
            aad_client_cert_password = kwargs['aadClientCertPassword']
        if 'aadClientCertPath' in kwargs:
            aad_client_cert_path = kwargs['aadClientCertPath']
        if 'cloudProviderBackoff' in kwargs:
            cloud_provider_backoff = kwargs['cloudProviderBackoff']
        if 'cloudProviderBackoffDuration' in kwargs:
            cloud_provider_backoff_duration = kwargs['cloudProviderBackoffDuration']
        if 'cloudProviderBackoffExponent' in kwargs:
            cloud_provider_backoff_exponent = kwargs['cloudProviderBackoffExponent']
        if 'cloudProviderBackoffJitter' in kwargs:
            cloud_provider_backoff_jitter = kwargs['cloudProviderBackoffJitter']
        if 'cloudProviderBackoffRetries' in kwargs:
            cloud_provider_backoff_retries = kwargs['cloudProviderBackoffRetries']
        if 'cloudProviderRateLimit' in kwargs:
            cloud_provider_rate_limit = kwargs['cloudProviderRateLimit']
        if 'cloudProviderRateLimitBucket' in kwargs:
            cloud_provider_rate_limit_bucket = kwargs['cloudProviderRateLimitBucket']
        if 'cloudProviderRateLimitQps' in kwargs:
            cloud_provider_rate_limit_qps = kwargs['cloudProviderRateLimitQps']
        if 'loadBalancerSku' in kwargs:
            load_balancer_sku = kwargs['loadBalancerSku']
        if 'maximumLoadBalancerRuleCount' in kwargs:
            maximum_load_balancer_rule_count = kwargs['maximumLoadBalancerRuleCount']
        if 'primaryAvailabilitySetName' in kwargs:
            primary_availability_set_name = kwargs['primaryAvailabilitySetName']
        if 'primaryScaleSetName' in kwargs:
            primary_scale_set_name = kwargs['primaryScaleSetName']
        if 'resourceGroup' in kwargs:
            resource_group = kwargs['resourceGroup']
        if 'routeTableName' in kwargs:
            route_table_name = kwargs['routeTableName']
        if 'securityGroupName' in kwargs:
            security_group_name = kwargs['securityGroupName']
        if 'subnetName' in kwargs:
            subnet_name = kwargs['subnetName']
        if 'useInstanceMetadata' in kwargs:
            use_instance_metadata = kwargs['useInstanceMetadata']
        if 'useManagedIdentityExtension' in kwargs:
            use_managed_identity_extension = kwargs['useManagedIdentityExtension']
        if 'vmType' in kwargs:
            vm_type = kwargs['vmType']
        if 'vnetName' in kwargs:
            vnet_name = kwargs['vnetName']
        if 'vnetResourceGroup' in kwargs:
            vnet_resource_group = kwargs['vnetResourceGroup']

        _setter("aad_client_id", aad_client_id)
        _setter("aad_client_secret", aad_client_secret)
        _setter("subscription_id", subscription_id)
        _setter("tenant_id", tenant_id)
        if aad_client_cert_password is not None:
            _setter("aad_client_cert_password", aad_client_cert_password)
        if aad_client_cert_path is not None:
            _setter("aad_client_cert_path", aad_client_cert_path)
        if cloud is not None:
            _setter("cloud", cloud)
        if cloud_provider_backoff is not None:
            _setter("cloud_provider_backoff", cloud_provider_backoff)
        if cloud_provider_backoff_duration is not None:
            _setter("cloud_provider_backoff_duration", cloud_provider_backoff_duration)
        if cloud_provider_backoff_exponent is not None:
            _setter("cloud_provider_backoff_exponent", cloud_provider_backoff_exponent)
        if cloud_provider_backoff_jitter is not None:
            _setter("cloud_provider_backoff_jitter", cloud_provider_backoff_jitter)
        if cloud_provider_backoff_retries is not None:
            _setter("cloud_provider_backoff_retries", cloud_provider_backoff_retries)
        if cloud_provider_rate_limit is not None:
            _setter("cloud_provider_rate_limit", cloud_provider_rate_limit)
        if cloud_provider_rate_limit_bucket is not None:
            _setter("cloud_provider_rate_limit_bucket", cloud_provider_rate_limit_bucket)
        if cloud_provider_rate_limit_qps is not None:
            _setter("cloud_provider_rate_limit_qps", cloud_provider_rate_limit_qps)
        if load_balancer_sku is not None:
            _setter("load_balancer_sku", load_balancer_sku)
        if location is not None:
            _setter("location", location)
        if maximum_load_balancer_rule_count is not None:
            _setter("maximum_load_balancer_rule_count", maximum_load_balancer_rule_count)
        if primary_availability_set_name is not None:
            _setter("primary_availability_set_name", primary_availability_set_name)
        if primary_scale_set_name is not None:
            _setter("primary_scale_set_name", primary_scale_set_name)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if route_table_name is not None:
            _setter("route_table_name", route_table_name)
        if security_group_name is not None:
            _setter("security_group_name", security_group_name)
        if subnet_name is not None:
            _setter("subnet_name", subnet_name)
        if use_instance_metadata is not None:
            _setter("use_instance_metadata", use_instance_metadata)
        if use_managed_identity_extension is not None:
            _setter("use_managed_identity_extension", use_managed_identity_extension)
        if vm_type is not None:
            _setter("vm_type", vm_type)
        if vnet_name is not None:
            _setter("vnet_name", vnet_name)
        if vnet_resource_group is not None:
            _setter("vnet_resource_group", vnet_resource_group)

    @property
    @pulumi.getter(name="aadClientId")
    def aad_client_id(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "aad_client_id")

    @aad_client_id.setter
    def aad_client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_client_id", value)

    @property
    @pulumi.getter(name="aadClientSecret")
    def aad_client_secret(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "aad_client_secret")

    @aad_client_secret.setter
    def aad_client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_client_secret", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        Azure tenant ID to use (string)
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="aadClientCertPassword")
    def aad_client_cert_password(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "aad_client_cert_password")

    @aad_client_cert_password.setter
    def aad_client_cert_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_cert_password", value)

    @property
    @pulumi.getter(name="aadClientCertPath")
    def aad_client_cert_path(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "aad_client_cert_path")

    @aad_client_cert_path.setter
    def aad_client_cert_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_cert_path", value)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter(name="cloudProviderBackoff")
    def cloud_provider_backoff(self) -> Optional[pulumi.Input[bool]]:
        """
        (bool)
        """
        return pulumi.get(self, "cloud_provider_backoff")

    @cloud_provider_backoff.setter
    def cloud_provider_backoff(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_provider_backoff", value)

    @property
    @pulumi.getter(name="cloudProviderBackoffDuration")
    def cloud_provider_backoff_duration(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "cloud_provider_backoff_duration")

    @cloud_provider_backoff_duration.setter
    def cloud_provider_backoff_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_backoff_duration", value)

    @property
    @pulumi.getter(name="cloudProviderBackoffExponent")
    def cloud_provider_backoff_exponent(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "cloud_provider_backoff_exponent")

    @cloud_provider_backoff_exponent.setter
    def cloud_provider_backoff_exponent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_backoff_exponent", value)

    @property
    @pulumi.getter(name="cloudProviderBackoffJitter")
    def cloud_provider_backoff_jitter(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "cloud_provider_backoff_jitter")

    @cloud_provider_backoff_jitter.setter
    def cloud_provider_backoff_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_backoff_jitter", value)

    @property
    @pulumi.getter(name="cloudProviderBackoffRetries")
    def cloud_provider_backoff_retries(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "cloud_provider_backoff_retries")

    @cloud_provider_backoff_retries.setter
    def cloud_provider_backoff_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_backoff_retries", value)

    @property
    @pulumi.getter(name="cloudProviderRateLimit")
    def cloud_provider_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        (bool)
        """
        return pulumi.get(self, "cloud_provider_rate_limit")

    @cloud_provider_rate_limit.setter
    def cloud_provider_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_provider_rate_limit", value)

    @property
    @pulumi.getter(name="cloudProviderRateLimitBucket")
    def cloud_provider_rate_limit_bucket(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "cloud_provider_rate_limit_bucket")

    @cloud_provider_rate_limit_bucket.setter
    def cloud_provider_rate_limit_bucket(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_rate_limit_bucket", value)

    @property
    @pulumi.getter(name="cloudProviderRateLimitQps")
    def cloud_provider_rate_limit_qps(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "cloud_provider_rate_limit_qps")

    @cloud_provider_rate_limit_qps.setter
    def cloud_provider_rate_limit_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_rate_limit_qps", value)

    @property
    @pulumi.getter(name="loadBalancerSku")
    def load_balancer_sku(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS load balancer sku (string)
        """
        return pulumi.get(self, "load_balancer_sku")

    @load_balancer_sku.setter
    def load_balancer_sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_sku", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Kubernetes cluster location. Default `eastus` (string)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maximumLoadBalancerRuleCount")
    def maximum_load_balancer_rule_count(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "maximum_load_balancer_rule_count")

    @maximum_load_balancer_rule_count.setter
    def maximum_load_balancer_rule_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_load_balancer_rule_count", value)

    @property
    @pulumi.getter(name="primaryAvailabilitySetName")
    def primary_availability_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "primary_availability_set_name")

    @primary_availability_set_name.setter
    def primary_availability_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_availability_set_name", value)

    @property
    @pulumi.getter(name="primaryScaleSetName")
    def primary_scale_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "primary_scale_set_name")

    @primary_scale_set_name.setter
    def primary_scale_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_scale_set_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        The AKS resource group (string)
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="routeTableName")
    def route_table_name(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "route_table_name")

    @route_table_name.setter
    def route_table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_name", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="useInstanceMetadata")
    def use_instance_metadata(self) -> Optional[pulumi.Input[bool]]:
        """
        (bool)
        """
        return pulumi.get(self, "use_instance_metadata")

    @use_instance_metadata.setter
    def use_instance_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_metadata", value)

    @property
    @pulumi.getter(name="useManagedIdentityExtension")
    def use_managed_identity_extension(self) -> Optional[pulumi.Input[bool]]:
        """
        (bool)
        """
        return pulumi.get(self, "use_managed_identity_extension")

    @use_managed_identity_extension.setter
    def use_managed_identity_extension(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_managed_identity_extension", value)

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "vm_type")

    @vm_type.setter
    def vm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_type", value)

    @property
    @pulumi.getter(name="vnetName")
    def vnet_name(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "vnet_name")

    @vnet_name.setter
    def vnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet_name", value)

    @property
    @pulumi.getter(name="vnetResourceGroup")
    def vnet_resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "vnet_resource_group")

    @vnet_resource_group.setter
    def vnet_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet_resource_group", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs:
    def __init__(__self__, *,
                 global_: pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs'],
                 block_storage: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs']] = None,
                 load_balancer: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs']] = None,
                 metadata: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs']] = None,
                 route: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs']] = None):
        """
        :param pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs'] global_: (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs'] block_storage: (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs'] load_balancer: (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs'] metadata: (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs'] route: (list maxitems:1)
        """
        ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            global_=global_,
            block_storage=block_storage,
            load_balancer=load_balancer,
            metadata=metadata,
            route=route,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             global_: pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs'],
             block_storage: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs']] = None,
             load_balancer: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs']] = None,
             metadata: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs']] = None,
             route: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'global' in kwargs:
            global_ = kwargs['global']
        if 'blockStorage' in kwargs:
            block_storage = kwargs['blockStorage']
        if 'loadBalancer' in kwargs:
            load_balancer = kwargs['loadBalancer']

        _setter("global_", global_)
        if block_storage is not None:
            _setter("block_storage", block_storage)
        if load_balancer is not None:
            _setter("load_balancer", load_balancer)
        if metadata is not None:
            _setter("metadata", metadata)
        if route is not None:
            _setter("route", route)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs']:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs']):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter(name="blockStorage")
    def block_storage(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs']]:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "block_storage")

    @block_storage.setter
    def block_storage(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs']]):
        pulumi.set(self, "block_storage", value)

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs']]:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs']]):
        pulumi.set(self, "load_balancer", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs']]:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs']]:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs']]):
        pulumi.set(self, "route", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs:
    def __init__(__self__, *,
                 bs_version: Optional[pulumi.Input[str]] = None,
                 ignore_volume_az: Optional[pulumi.Input[bool]] = None,
                 trust_device_path: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bs_version: (string)
        :param pulumi.Input[bool] ignore_volume_az: (string)
        :param pulumi.Input[bool] trust_device_path: (string)
        """
        ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bs_version=bs_version,
            ignore_volume_az=ignore_volume_az,
            trust_device_path=trust_device_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bs_version: Optional[pulumi.Input[str]] = None,
             ignore_volume_az: Optional[pulumi.Input[bool]] = None,
             trust_device_path: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bsVersion' in kwargs:
            bs_version = kwargs['bsVersion']
        if 'ignoreVolumeAz' in kwargs:
            ignore_volume_az = kwargs['ignoreVolumeAz']
        if 'trustDevicePath' in kwargs:
            trust_device_path = kwargs['trustDevicePath']

        if bs_version is not None:
            _setter("bs_version", bs_version)
        if ignore_volume_az is not None:
            _setter("ignore_volume_az", ignore_volume_az)
        if trust_device_path is not None:
            _setter("trust_device_path", trust_device_path)

    @property
    @pulumi.getter(name="bsVersion")
    def bs_version(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "bs_version")

    @bs_version.setter
    def bs_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bs_version", value)

    @property
    @pulumi.getter(name="ignoreVolumeAz")
    def ignore_volume_az(self) -> Optional[pulumi.Input[bool]]:
        """
        (string)
        """
        return pulumi.get(self, "ignore_volume_az")

    @ignore_volume_az.setter
    def ignore_volume_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_volume_az", value)

    @property
    @pulumi.getter(name="trustDevicePath")
    def trust_device_path(self) -> Optional[pulumi.Input[bool]]:
        """
        (string)
        """
        return pulumi.get(self, "trust_device_path")

    @trust_device_path.setter
    def trust_device_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_device_path", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs:
    def __init__(__self__, *,
                 auth_url: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 ca_file: Optional[pulumi.Input[str]] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 trust_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_url: (string)
        :param pulumi.Input[str] password: Registry password (string)
        :param pulumi.Input[str] username: (string)
        :param pulumi.Input[str] ca_file: (string)
        :param pulumi.Input[str] domain_id: Required if `domain_name` not provided. (string)
        :param pulumi.Input[str] domain_name: Required if `domain_id` not provided. (string)
        :param pulumi.Input[str] region: The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        :param pulumi.Input[str] tenant_id: Azure tenant ID to use (string)
        :param pulumi.Input[str] tenant_name: Required if `tenant_id` not provided. (string)
        :param pulumi.Input[str] trust_id: (string)
        """
        ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_url=auth_url,
            password=password,
            username=username,
            ca_file=ca_file,
            domain_id=domain_id,
            domain_name=domain_name,
            region=region,
            tenant_id=tenant_id,
            tenant_name=tenant_name,
            trust_id=trust_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_url: pulumi.Input[str],
             password: pulumi.Input[str],
             username: pulumi.Input[str],
             ca_file: Optional[pulumi.Input[str]] = None,
             domain_id: Optional[pulumi.Input[str]] = None,
             domain_name: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             tenant_name: Optional[pulumi.Input[str]] = None,
             trust_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authUrl' in kwargs:
            auth_url = kwargs['authUrl']
        if 'caFile' in kwargs:
            ca_file = kwargs['caFile']
        if 'domainId' in kwargs:
            domain_id = kwargs['domainId']
        if 'domainName' in kwargs:
            domain_name = kwargs['domainName']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if 'tenantName' in kwargs:
            tenant_name = kwargs['tenantName']
        if 'trustId' in kwargs:
            trust_id = kwargs['trustId']

        _setter("auth_url", auth_url)
        _setter("password", password)
        _setter("username", username)
        if ca_file is not None:
            _setter("ca_file", ca_file)
        if domain_id is not None:
            _setter("domain_id", domain_id)
        if domain_name is not None:
            _setter("domain_name", domain_name)
        if region is not None:
            _setter("region", region)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)
        if tenant_name is not None:
            _setter("tenant_name", tenant_name)
        if trust_id is not None:
            _setter("trust_id", trust_id)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Registry password (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="caFile")
    def ca_file(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "ca_file")

    @ca_file.setter
    def ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_file", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `domain_name` not provided. (string)
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `domain_id` not provided. (string)
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure tenant ID to use (string)
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required if `tenant_id` not provided. (string)
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter(name="trustId")
    def trust_id(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "trust_id")

    @trust_id.setter
    def trust_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_id", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs:
    def __init__(__self__, *,
                 create_monitor: Optional[pulumi.Input[bool]] = None,
                 floating_network_id: Optional[pulumi.Input[str]] = None,
                 lb_method: Optional[pulumi.Input[str]] = None,
                 lb_provider: Optional[pulumi.Input[str]] = None,
                 lb_version: Optional[pulumi.Input[str]] = None,
                 manage_security_groups: Optional[pulumi.Input[bool]] = None,
                 monitor_delay: Optional[pulumi.Input[str]] = None,
                 monitor_max_retries: Optional[pulumi.Input[int]] = None,
                 monitor_timeout: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 use_octavia: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] create_monitor: (bool)
        :param pulumi.Input[str] floating_network_id: (string)
        :param pulumi.Input[str] lb_method: (string)
        :param pulumi.Input[str] lb_provider: (string)
        :param pulumi.Input[str] lb_version: (string)
        :param pulumi.Input[bool] manage_security_groups: (bool)
        :param pulumi.Input[str] monitor_delay: Default `60s` (string)
        :param pulumi.Input[int] monitor_max_retries: Default 5 (int)
        :param pulumi.Input[str] monitor_timeout: Default `30s` (string)
        :param pulumi.Input[str] subnet_id: (string)
        :param pulumi.Input[bool] use_octavia: (bool)
        """
        ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_monitor=create_monitor,
            floating_network_id=floating_network_id,
            lb_method=lb_method,
            lb_provider=lb_provider,
            lb_version=lb_version,
            manage_security_groups=manage_security_groups,
            monitor_delay=monitor_delay,
            monitor_max_retries=monitor_max_retries,
            monitor_timeout=monitor_timeout,
            subnet_id=subnet_id,
            use_octavia=use_octavia,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_monitor: Optional[pulumi.Input[bool]] = None,
             floating_network_id: Optional[pulumi.Input[str]] = None,
             lb_method: Optional[pulumi.Input[str]] = None,
             lb_provider: Optional[pulumi.Input[str]] = None,
             lb_version: Optional[pulumi.Input[str]] = None,
             manage_security_groups: Optional[pulumi.Input[bool]] = None,
             monitor_delay: Optional[pulumi.Input[str]] = None,
             monitor_max_retries: Optional[pulumi.Input[int]] = None,
             monitor_timeout: Optional[pulumi.Input[str]] = None,
             subnet_id: Optional[pulumi.Input[str]] = None,
             use_octavia: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createMonitor' in kwargs:
            create_monitor = kwargs['createMonitor']
        if 'floatingNetworkId' in kwargs:
            floating_network_id = kwargs['floatingNetworkId']
        if 'lbMethod' in kwargs:
            lb_method = kwargs['lbMethod']
        if 'lbProvider' in kwargs:
            lb_provider = kwargs['lbProvider']
        if 'lbVersion' in kwargs:
            lb_version = kwargs['lbVersion']
        if 'manageSecurityGroups' in kwargs:
            manage_security_groups = kwargs['manageSecurityGroups']
        if 'monitorDelay' in kwargs:
            monitor_delay = kwargs['monitorDelay']
        if 'monitorMaxRetries' in kwargs:
            monitor_max_retries = kwargs['monitorMaxRetries']
        if 'monitorTimeout' in kwargs:
            monitor_timeout = kwargs['monitorTimeout']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if 'useOctavia' in kwargs:
            use_octavia = kwargs['useOctavia']

        if create_monitor is not None:
            _setter("create_monitor", create_monitor)
        if floating_network_id is not None:
            _setter("floating_network_id", floating_network_id)
        if lb_method is not None:
            _setter("lb_method", lb_method)
        if lb_provider is not None:
            _setter("lb_provider", lb_provider)
        if lb_version is not None:
            _setter("lb_version", lb_version)
        if manage_security_groups is not None:
            _setter("manage_security_groups", manage_security_groups)
        if monitor_delay is not None:
            _setter("monitor_delay", monitor_delay)
        if monitor_max_retries is not None:
            _setter("monitor_max_retries", monitor_max_retries)
        if monitor_timeout is not None:
            _setter("monitor_timeout", monitor_timeout)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)
        if use_octavia is not None:
            _setter("use_octavia", use_octavia)

    @property
    @pulumi.getter(name="createMonitor")
    def create_monitor(self) -> Optional[pulumi.Input[bool]]:
        """
        (bool)
        """
        return pulumi.get(self, "create_monitor")

    @create_monitor.setter
    def create_monitor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_monitor", value)

    @property
    @pulumi.getter(name="floatingNetworkId")
    def floating_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "floating_network_id")

    @floating_network_id.setter
    def floating_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floating_network_id", value)

    @property
    @pulumi.getter(name="lbMethod")
    def lb_method(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "lb_method")

    @lb_method.setter
    def lb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_method", value)

    @property
    @pulumi.getter(name="lbProvider")
    def lb_provider(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "lb_provider")

    @lb_provider.setter
    def lb_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_provider", value)

    @property
    @pulumi.getter(name="lbVersion")
    def lb_version(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "lb_version")

    @lb_version.setter
    def lb_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_version", value)

    @property
    @pulumi.getter(name="manageSecurityGroups")
    def manage_security_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        (bool)
        """
        return pulumi.get(self, "manage_security_groups")

    @manage_security_groups.setter
    def manage_security_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_security_groups", value)

    @property
    @pulumi.getter(name="monitorDelay")
    def monitor_delay(self) -> Optional[pulumi.Input[str]]:
        """
        Default `60s` (string)
        """
        return pulumi.get(self, "monitor_delay")

    @monitor_delay.setter
    def monitor_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_delay", value)

    @property
    @pulumi.getter(name="monitorMaxRetries")
    def monitor_max_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Default 5 (int)
        """
        return pulumi.get(self, "monitor_max_retries")

    @monitor_max_retries.setter
    def monitor_max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_max_retries", value)

    @property
    @pulumi.getter(name="monitorTimeout")
    def monitor_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Default `30s` (string)
        """
        return pulumi.get(self, "monitor_timeout")

    @monitor_timeout.setter
    def monitor_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_timeout", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="useOctavia")
    def use_octavia(self) -> Optional[pulumi.Input[bool]]:
        """
        (bool)
        """
        return pulumi.get(self, "use_octavia")

    @use_octavia.setter
    def use_octavia(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_octavia", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs:
    def __init__(__self__, *,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 search_order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] request_timeout: (int)
        :param pulumi.Input[str] search_order: (string)
        """
        ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            request_timeout=request_timeout,
            search_order=search_order,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             request_timeout: Optional[pulumi.Input[int]] = None,
             search_order: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'requestTimeout' in kwargs:
            request_timeout = kwargs['requestTimeout']
        if 'searchOrder' in kwargs:
            search_order = kwargs['searchOrder']

        if request_timeout is not None:
            _setter("request_timeout", request_timeout)
        if search_order is not None:
            _setter("search_order", search_order)

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "request_timeout")

    @request_timeout.setter
    def request_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_timeout", value)

    @property
    @pulumi.getter(name="searchOrder")
    def search_order(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "search_order")

    @search_order.setter
    def search_order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_order", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs:
    def __init__(__self__, *,
                 router_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] router_id: (string)
        """
        ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            router_id=router_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             router_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'routerId' in kwargs:
            router_id = kwargs['routerId']

        if router_id is not None:
            _setter("router_id", router_id)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderVsphereCloudProviderArgs:
    def __init__(__self__, *,
                 virtual_centers: pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs']]],
                 workspace: pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs'],
                 disk: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs']] = None,
                 global_: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs']] = None,
                 network: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs']]] virtual_centers: (List)
        :param pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs'] workspace: (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs'] disk: (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs'] global_: (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs'] network: The GKE cluster network. Required for create new cluster (string)
        """
        ClusterRkeConfigCloudProviderVsphereCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_centers=virtual_centers,
            workspace=workspace,
            disk=disk,
            global_=global_,
            network=network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_centers: pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs']]],
             workspace: pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs'],
             disk: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs']] = None,
             global_: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs']] = None,
             network: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'virtualCenters' in kwargs:
            virtual_centers = kwargs['virtualCenters']
        if 'global' in kwargs:
            global_ = kwargs['global']

        _setter("virtual_centers", virtual_centers)
        _setter("workspace", workspace)
        if disk is not None:
            _setter("disk", disk)
        if global_ is not None:
            _setter("global_", global_)
        if network is not None:
            _setter("network", network)

    @property
    @pulumi.getter(name="virtualCenters")
    def virtual_centers(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs']]]:
        """
        (List)
        """
        return pulumi.get(self, "virtual_centers")

    @virtual_centers.setter
    def virtual_centers(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs']]]):
        pulumi.set(self, "virtual_centers", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs']:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs']):
        pulumi.set(self, "workspace", value)

    @property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs']]:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs']]):
        pulumi.set(self, "disk", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs']]:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs']]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs']]:
        """
        The GKE cluster network. Required for create new cluster (string)
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs']]):
        pulumi.set(self, "network", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs:
    def __init__(__self__, *,
                 scsi_controller_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] scsi_controller_type: (string)
        """
        ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scsi_controller_type=scsi_controller_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scsi_controller_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'scsiControllerType' in kwargs:
            scsi_controller_type = kwargs['scsiControllerType']

        if scsi_controller_type is not None:
            _setter("scsi_controller_type", scsi_controller_type)

    @property
    @pulumi.getter(name="scsiControllerType")
    def scsi_controller_type(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "scsi_controller_type")

    @scsi_controller_type.setter
    def scsi_controller_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scsi_controller_type", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs:
    def __init__(__self__, *,
                 datacenters: Optional[pulumi.Input[str]] = None,
                 insecure_flag: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 soap_roundtrip_count: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] datacenters: (string)
        :param pulumi.Input[bool] insecure_flag: (bool)
        :param pulumi.Input[str] password: Registry password (string)
        :param pulumi.Input[str] port: Port for node. Default `22` (string)
        :param pulumi.Input[int] soap_roundtrip_count: (int)
        :param pulumi.Input[str] user: Registry user (string)
        """
        ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenters=datacenters,
            insecure_flag=insecure_flag,
            password=password,
            port=port,
            soap_roundtrip_count=soap_roundtrip_count,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenters: Optional[pulumi.Input[str]] = None,
             insecure_flag: Optional[pulumi.Input[bool]] = None,
             password: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[str]] = None,
             soap_roundtrip_count: Optional[pulumi.Input[int]] = None,
             user: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'insecureFlag' in kwargs:
            insecure_flag = kwargs['insecureFlag']
        if 'soapRoundtripCount' in kwargs:
            soap_roundtrip_count = kwargs['soapRoundtripCount']

        if datacenters is not None:
            _setter("datacenters", datacenters)
        if insecure_flag is not None:
            _setter("insecure_flag", insecure_flag)
        if password is not None:
            _setter("password", password)
        if port is not None:
            _setter("port", port)
        if soap_roundtrip_count is not None:
            _setter("soap_roundtrip_count", soap_roundtrip_count)
        if user is not None:
            _setter("user", user)

    @property
    @pulumi.getter
    def datacenters(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "datacenters")

    @datacenters.setter
    def datacenters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenters", value)

    @property
    @pulumi.getter(name="insecureFlag")
    def insecure_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        (bool)
        """
        return pulumi.get(self, "insecure_flag")

    @insecure_flag.setter
    def insecure_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_flag", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Registry password (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port for node. Default `22` (string)
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="soapRoundtripCount")
    def soap_roundtrip_count(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "soap_roundtrip_count")

    @soap_roundtrip_count.setter
    def soap_roundtrip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "soap_roundtrip_count", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Registry user (string)
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs:
    def __init__(__self__, *,
                 public_network: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] public_network: (string)
        """
        ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            public_network=public_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             public_network: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'publicNetwork' in kwargs:
            public_network = kwargs['publicNetwork']

        if public_network is not None:
            _setter("public_network", public_network)

    @property
    @pulumi.getter(name="publicNetwork")
    def public_network(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "public_network")

    @public_network.setter
    def public_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_network", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs:
    def __init__(__self__, *,
                 datacenters: pulumi.Input[str],
                 name: pulumi.Input[str],
                 password: pulumi.Input[str],
                 user: pulumi.Input[str],
                 port: Optional[pulumi.Input[str]] = None,
                 soap_roundtrip_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] datacenters: (string)
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[str] password: Registry password (string)
        :param pulumi.Input[str] user: Registry user (string)
        :param pulumi.Input[str] port: Port for node. Default `22` (string)
        :param pulumi.Input[int] soap_roundtrip_count: (int)
        """
        ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenters=datacenters,
            name=name,
            password=password,
            user=user,
            port=port,
            soap_roundtrip_count=soap_roundtrip_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenters: pulumi.Input[str],
             name: pulumi.Input[str],
             password: pulumi.Input[str],
             user: pulumi.Input[str],
             port: Optional[pulumi.Input[str]] = None,
             soap_roundtrip_count: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'soapRoundtripCount' in kwargs:
            soap_roundtrip_count = kwargs['soapRoundtripCount']

        _setter("datacenters", datacenters)
        _setter("name", name)
        _setter("password", password)
        _setter("user", user)
        if port is not None:
            _setter("port", port)
        if soap_roundtrip_count is not None:
            _setter("soap_roundtrip_count", soap_roundtrip_count)

    @property
    @pulumi.getter
    def datacenters(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "datacenters")

    @datacenters.setter
    def datacenters(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenters", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Registry password (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        Registry user (string)
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port for node. Default `22` (string)
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="soapRoundtripCount")
    def soap_roundtrip_count(self) -> Optional[pulumi.Input[int]]:
        """
        (int)
        """
        return pulumi.get(self, "soap_roundtrip_count")

    @soap_roundtrip_count.setter
    def soap_roundtrip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "soap_roundtrip_count", value)


@pulumi.input_type
class ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[str],
                 folder: pulumi.Input[str],
                 server: pulumi.Input[str],
                 default_datastore: Optional[pulumi.Input[str]] = None,
                 resourcepool_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] datacenter: (string)
        :param pulumi.Input[str] folder: Folder for S3 service. Available from Rancher v2.2.7 (string)
        :param pulumi.Input[str] server: (string)
        :param pulumi.Input[str] default_datastore: (string)
        :param pulumi.Input[str] resourcepool_path: (string)
        """
        ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter=datacenter,
            folder=folder,
            server=server,
            default_datastore=default_datastore,
            resourcepool_path=resourcepool_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter: pulumi.Input[str],
             folder: pulumi.Input[str],
             server: pulumi.Input[str],
             default_datastore: Optional[pulumi.Input[str]] = None,
             resourcepool_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultDatastore' in kwargs:
            default_datastore = kwargs['defaultDatastore']
        if 'resourcepoolPath' in kwargs:
            resourcepool_path = kwargs['resourcepoolPath']

        _setter("datacenter", datacenter)
        _setter("folder", folder)
        _setter("server", server)
        if default_datastore is not None:
            _setter("default_datastore", default_datastore)
        if resourcepool_path is not None:
            _setter("resourcepool_path", resourcepool_path)

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter
    def folder(self) -> pulumi.Input[str]:
        """
        Folder for S3 service. Available from Rancher v2.2.7 (string)
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: pulumi.Input[str]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="defaultDatastore")
    def default_datastore(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "default_datastore")

    @default_datastore.setter
    def default_datastore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_datastore", value)

    @property
    @pulumi.getter(name="resourcepoolPath")
    def resourcepool_path(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "resourcepool_path")

    @resourcepool_path.setter
    def resourcepool_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcepool_path", value)


@pulumi.input_type
class ClusterRkeConfigDnsArgs:
    def __init__(__self__, *,
                 linear_autoscaler_params: Optional[pulumi.Input['ClusterRkeConfigDnsLinearAutoscalerParamsArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 nodelocal: Optional[pulumi.Input['ClusterRkeConfigDnsNodelocalArgs']] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 reverse_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigDnsTolerationArgs']]]] = None,
                 update_strategy: Optional[pulumi.Input['ClusterRkeConfigDnsUpdateStrategyArgs']] = None,
                 upstream_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ClusterRkeConfigDnsLinearAutoscalerParamsArgs'] linear_autoscaler_params: LinearAutoScalerParams dns config (list Maxitem: 1)
        :param pulumi.Input[Mapping[str, Any]] node_selector: RKE monitoring node selector (map)
        :param pulumi.Input['ClusterRkeConfigDnsNodelocalArgs'] nodelocal: Nodelocal dns config  (list Maxitem: 1)
        :param pulumi.Input[Mapping[str, Any]] options: RKE options for network (map)
        :param pulumi.Input[str] provider: RKE monitoring provider (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reverse_cidrs: DNS add-on reverse cidr  (list)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigDnsTolerationArgs']]] tolerations: Network add-on tolerations (list)
        :param pulumi.Input['ClusterRkeConfigDnsUpdateStrategyArgs'] update_strategy: RKE monitoring update strategy (list Maxitems: 1)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] upstream_nameservers: DNS add-on upstream nameservers  (list)
        """
        ClusterRkeConfigDnsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linear_autoscaler_params=linear_autoscaler_params,
            node_selector=node_selector,
            nodelocal=nodelocal,
            options=options,
            provider=provider,
            reverse_cidrs=reverse_cidrs,
            tolerations=tolerations,
            update_strategy=update_strategy,
            upstream_nameservers=upstream_nameservers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linear_autoscaler_params: Optional[pulumi.Input['ClusterRkeConfigDnsLinearAutoscalerParamsArgs']] = None,
             node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             nodelocal: Optional[pulumi.Input['ClusterRkeConfigDnsNodelocalArgs']] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             provider: Optional[pulumi.Input[str]] = None,
             reverse_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigDnsTolerationArgs']]]] = None,
             update_strategy: Optional[pulumi.Input['ClusterRkeConfigDnsUpdateStrategyArgs']] = None,
             upstream_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'linearAutoscalerParams' in kwargs:
            linear_autoscaler_params = kwargs['linearAutoscalerParams']
        if 'nodeSelector' in kwargs:
            node_selector = kwargs['nodeSelector']
        if 'reverseCidrs' in kwargs:
            reverse_cidrs = kwargs['reverseCidrs']
        if 'updateStrategy' in kwargs:
            update_strategy = kwargs['updateStrategy']
        if 'upstreamNameservers' in kwargs:
            upstream_nameservers = kwargs['upstreamNameservers']

        if linear_autoscaler_params is not None:
            _setter("linear_autoscaler_params", linear_autoscaler_params)
        if node_selector is not None:
            _setter("node_selector", node_selector)
        if nodelocal is not None:
            _setter("nodelocal", nodelocal)
        if options is not None:
            _setter("options", options)
        if provider is not None:
            _setter("provider", provider)
        if reverse_cidrs is not None:
            _setter("reverse_cidrs", reverse_cidrs)
        if tolerations is not None:
            _setter("tolerations", tolerations)
        if update_strategy is not None:
            _setter("update_strategy", update_strategy)
        if upstream_nameservers is not None:
            _setter("upstream_nameservers", upstream_nameservers)

    @property
    @pulumi.getter(name="linearAutoscalerParams")
    def linear_autoscaler_params(self) -> Optional[pulumi.Input['ClusterRkeConfigDnsLinearAutoscalerParamsArgs']]:
        """
        LinearAutoScalerParams dns config (list Maxitem: 1)
        """
        return pulumi.get(self, "linear_autoscaler_params")

    @linear_autoscaler_params.setter
    def linear_autoscaler_params(self, value: Optional[pulumi.Input['ClusterRkeConfigDnsLinearAutoscalerParamsArgs']]):
        pulumi.set(self, "linear_autoscaler_params", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        RKE monitoring node selector (map)
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter
    def nodelocal(self) -> Optional[pulumi.Input['ClusterRkeConfigDnsNodelocalArgs']]:
        """
        Nodelocal dns config  (list Maxitem: 1)
        """
        return pulumi.get(self, "nodelocal")

    @nodelocal.setter
    def nodelocal(self, value: Optional[pulumi.Input['ClusterRkeConfigDnsNodelocalArgs']]):
        pulumi.set(self, "nodelocal", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        RKE options for network (map)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        RKE monitoring provider (string)
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="reverseCidrs")
    def reverse_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNS add-on reverse cidr  (list)
        """
        return pulumi.get(self, "reverse_cidrs")

    @reverse_cidrs.setter
    def reverse_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_cidrs", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigDnsTolerationArgs']]]]:
        """
        Network add-on tolerations (list)
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigDnsTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional[pulumi.Input['ClusterRkeConfigDnsUpdateStrategyArgs']]:
        """
        RKE monitoring update strategy (list Maxitems: 1)
        """
        return pulumi.get(self, "update_strategy")

    @update_strategy.setter
    def update_strategy(self, value: Optional[pulumi.Input['ClusterRkeConfigDnsUpdateStrategyArgs']]):
        pulumi.set(self, "update_strategy", value)

    @property
    @pulumi.getter(name="upstreamNameservers")
    def upstream_nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNS add-on upstream nameservers  (list)
        """
        return pulumi.get(self, "upstream_nameservers")

    @upstream_nameservers.setter
    def upstream_nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "upstream_nameservers", value)


@pulumi.input_type
class ClusterRkeConfigDnsLinearAutoscalerParamsArgs:
    def __init__(__self__, *,
                 cores_per_replica: Optional[pulumi.Input[float]] = None,
                 max: Optional[pulumi.Input[int]] = None,
                 min: Optional[pulumi.Input[int]] = None,
                 nodes_per_replica: Optional[pulumi.Input[float]] = None,
                 prevent_single_point_failure: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[float] cores_per_replica: number of replicas per cluster cores (float64)
        :param pulumi.Input[int] max: maximum number of replicas (int64)
        :param pulumi.Input[int] min: minimum number of replicas (int64)
        :param pulumi.Input[float] nodes_per_replica: number of replica per cluster nodes (float64)
        :param pulumi.Input[bool] prevent_single_point_failure: prevent single point of failure
        """
        ClusterRkeConfigDnsLinearAutoscalerParamsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cores_per_replica=cores_per_replica,
            max=max,
            min=min,
            nodes_per_replica=nodes_per_replica,
            prevent_single_point_failure=prevent_single_point_failure,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cores_per_replica: Optional[pulumi.Input[float]] = None,
             max: Optional[pulumi.Input[int]] = None,
             min: Optional[pulumi.Input[int]] = None,
             nodes_per_replica: Optional[pulumi.Input[float]] = None,
             prevent_single_point_failure: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'coresPerReplica' in kwargs:
            cores_per_replica = kwargs['coresPerReplica']
        if 'nodesPerReplica' in kwargs:
            nodes_per_replica = kwargs['nodesPerReplica']
        if 'preventSinglePointFailure' in kwargs:
            prevent_single_point_failure = kwargs['preventSinglePointFailure']

        if cores_per_replica is not None:
            _setter("cores_per_replica", cores_per_replica)
        if max is not None:
            _setter("max", max)
        if min is not None:
            _setter("min", min)
        if nodes_per_replica is not None:
            _setter("nodes_per_replica", nodes_per_replica)
        if prevent_single_point_failure is not None:
            _setter("prevent_single_point_failure", prevent_single_point_failure)

    @property
    @pulumi.getter(name="coresPerReplica")
    def cores_per_replica(self) -> Optional[pulumi.Input[float]]:
        """
        number of replicas per cluster cores (float64)
        """
        return pulumi.get(self, "cores_per_replica")

    @cores_per_replica.setter
    def cores_per_replica(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cores_per_replica", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        """
        maximum number of replicas (int64)
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[int]]:
        """
        minimum number of replicas (int64)
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter(name="nodesPerReplica")
    def nodes_per_replica(self) -> Optional[pulumi.Input[float]]:
        """
        number of replica per cluster nodes (float64)
        """
        return pulumi.get(self, "nodes_per_replica")

    @nodes_per_replica.setter
    def nodes_per_replica(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nodes_per_replica", value)

    @property
    @pulumi.getter(name="preventSinglePointFailure")
    def prevent_single_point_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        prevent single point of failure
        """
        return pulumi.get(self, "prevent_single_point_failure")

    @prevent_single_point_failure.setter
    def prevent_single_point_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_single_point_failure", value)


@pulumi.input_type
class ClusterRkeConfigDnsNodelocalArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] ip_address: Nodelocal dns ip address (string)
        :param pulumi.Input[Mapping[str, Any]] node_selector: RKE monitoring node selector (map)
        """
        ClusterRkeConfigDnsNodelocalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_address=ip_address,
            node_selector=node_selector,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_address: Optional[pulumi.Input[str]] = None,
             node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if 'nodeSelector' in kwargs:
            node_selector = kwargs['nodeSelector']

        if ip_address is not None:
            _setter("ip_address", ip_address)
        if node_selector is not None:
            _setter("node_selector", node_selector)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Nodelocal dns ip address (string)
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        RKE monitoring node selector (map)
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_selector", value)


@pulumi.input_type
class ClusterRkeConfigDnsTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The GKE taint key (string)
        :param pulumi.Input[str] effect: The GKE taint effect (string)
        :param pulumi.Input[str] operator: The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        :param pulumi.Input[int] seconds: The toleration seconds (int)
        :param pulumi.Input[str] value: The GKE taint value (string)
        """
        ClusterRkeConfigDnsTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The GKE taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint effect (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The toleration seconds (int)
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterRkeConfigDnsUpdateStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ClusterRkeConfigDnsUpdateStrategyRollingUpdateArgs']] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ClusterRkeConfigDnsUpdateStrategyRollingUpdateArgs'] rolling_update: Monitoring deployment rolling update (list Maxitems: 1)
        :param pulumi.Input[str] strategy: Monitoring deployment update strategy (string)
        """
        ClusterRkeConfigDnsUpdateStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rolling_update=rolling_update,
            strategy=strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rolling_update: Optional[pulumi.Input['ClusterRkeConfigDnsUpdateStrategyRollingUpdateArgs']] = None,
             strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rollingUpdate' in kwargs:
            rolling_update = kwargs['rollingUpdate']

        if rolling_update is not None:
            _setter("rolling_update", rolling_update)
        if strategy is not None:
            _setter("strategy", strategy)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ClusterRkeConfigDnsUpdateStrategyRollingUpdateArgs']]:
        """
        Monitoring deployment rolling update (list Maxitems: 1)
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ClusterRkeConfigDnsUpdateStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring deployment update strategy (string)
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ClusterRkeConfigDnsUpdateStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input[int]] = None,
                 max_unavailable: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_surge: The AKS node pool max surge (string), example value: `25%`
        :param pulumi.Input[int] max_unavailable: Monitoring deployment rolling update max unavailable. Default: `1` (int)
        """
        ClusterRkeConfigDnsUpdateStrategyRollingUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_surge=max_surge,
            max_unavailable=max_unavailable,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_surge: Optional[pulumi.Input[int]] = None,
             max_unavailable: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxSurge' in kwargs:
            max_surge = kwargs['maxSurge']
        if 'maxUnavailable' in kwargs:
            max_unavailable = kwargs['maxUnavailable']

        if max_surge is not None:
            _setter("max_surge", max_surge)
        if max_unavailable is not None:
            _setter("max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[int]]:
        """
        The AKS node pool max surge (string), example value: `25%`
        """
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[int]]:
        """
        Monitoring deployment rolling update max unavailable. Default: `1` (int)
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ClusterRkeConfigIngressArgs:
    def __init__(__self__, *,
                 default_backend: Optional[pulumi.Input[bool]] = None,
                 dns_policy: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None,
                 network_mode: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigIngressTolerationArgs']]]] = None,
                 update_strategy: Optional[pulumi.Input['ClusterRkeConfigIngressUpdateStrategyArgs']] = None):
        """
        :param pulumi.Input[bool] default_backend: Enable ingress default backend. Default: `true` (bool)
        :param pulumi.Input[str] dns_policy: Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)
        :param pulumi.Input[Mapping[str, Any]] extra_args: Extra arguments for scheduler service (map)
        :param pulumi.Input[int] http_port: HTTP port for RKE Ingress (int)
        :param pulumi.Input[int] https_port: HTTPS port for RKE Ingress (int)
        :param pulumi.Input[str] network_mode: Network mode for RKE Ingress (string)
        :param pulumi.Input[Mapping[str, Any]] node_selector: RKE monitoring node selector (map)
        :param pulumi.Input[Mapping[str, Any]] options: RKE options for network (map)
        :param pulumi.Input[str] provider: RKE monitoring provider (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigIngressTolerationArgs']]] tolerations: Network add-on tolerations (list)
        :param pulumi.Input['ClusterRkeConfigIngressUpdateStrategyArgs'] update_strategy: RKE monitoring update strategy (list Maxitems: 1)
        """
        ClusterRkeConfigIngressArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_backend=default_backend,
            dns_policy=dns_policy,
            extra_args=extra_args,
            http_port=http_port,
            https_port=https_port,
            network_mode=network_mode,
            node_selector=node_selector,
            options=options,
            provider=provider,
            tolerations=tolerations,
            update_strategy=update_strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_backend: Optional[pulumi.Input[bool]] = None,
             dns_policy: Optional[pulumi.Input[str]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             http_port: Optional[pulumi.Input[int]] = None,
             https_port: Optional[pulumi.Input[int]] = None,
             network_mode: Optional[pulumi.Input[str]] = None,
             node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             provider: Optional[pulumi.Input[str]] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigIngressTolerationArgs']]]] = None,
             update_strategy: Optional[pulumi.Input['ClusterRkeConfigIngressUpdateStrategyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultBackend' in kwargs:
            default_backend = kwargs['defaultBackend']
        if 'dnsPolicy' in kwargs:
            dns_policy = kwargs['dnsPolicy']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'httpPort' in kwargs:
            http_port = kwargs['httpPort']
        if 'httpsPort' in kwargs:
            https_port = kwargs['httpsPort']
        if 'networkMode' in kwargs:
            network_mode = kwargs['networkMode']
        if 'nodeSelector' in kwargs:
            node_selector = kwargs['nodeSelector']
        if 'updateStrategy' in kwargs:
            update_strategy = kwargs['updateStrategy']

        if default_backend is not None:
            _setter("default_backend", default_backend)
        if dns_policy is not None:
            _setter("dns_policy", dns_policy)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if http_port is not None:
            _setter("http_port", http_port)
        if https_port is not None:
            _setter("https_port", https_port)
        if network_mode is not None:
            _setter("network_mode", network_mode)
        if node_selector is not None:
            _setter("node_selector", node_selector)
        if options is not None:
            _setter("options", options)
        if provider is not None:
            _setter("provider", provider)
        if tolerations is not None:
            _setter("tolerations", tolerations)
        if update_strategy is not None:
            _setter("update_strategy", update_strategy)

    @property
    @pulumi.getter(name="defaultBackend")
    def default_backend(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable ingress default backend. Default: `true` (bool)
        """
        return pulumi.get(self, "default_backend")

    @default_backend.setter
    def default_backend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_backend", value)

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)
        """
        return pulumi.get(self, "dns_policy")

    @dns_policy.setter
    def dns_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_policy", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Extra arguments for scheduler service (map)
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP port for RKE Ingress (int)
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        """
        HTTPS port for RKE Ingress (int)
        """
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Network mode for RKE Ingress (string)
        """
        return pulumi.get(self, "network_mode")

    @network_mode.setter
    def network_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_mode", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        RKE monitoring node selector (map)
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        RKE options for network (map)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        RKE monitoring provider (string)
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigIngressTolerationArgs']]]]:
        """
        Network add-on tolerations (list)
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigIngressTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional[pulumi.Input['ClusterRkeConfigIngressUpdateStrategyArgs']]:
        """
        RKE monitoring update strategy (list Maxitems: 1)
        """
        return pulumi.get(self, "update_strategy")

    @update_strategy.setter
    def update_strategy(self, value: Optional[pulumi.Input['ClusterRkeConfigIngressUpdateStrategyArgs']]):
        pulumi.set(self, "update_strategy", value)


@pulumi.input_type
class ClusterRkeConfigIngressTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The GKE taint key (string)
        :param pulumi.Input[str] effect: The GKE taint effect (string)
        :param pulumi.Input[str] operator: The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        :param pulumi.Input[int] seconds: The toleration seconds (int)
        :param pulumi.Input[str] value: The GKE taint value (string)
        """
        ClusterRkeConfigIngressTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The GKE taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint effect (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The toleration seconds (int)
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterRkeConfigIngressUpdateStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ClusterRkeConfigIngressUpdateStrategyRollingUpdateArgs']] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ClusterRkeConfigIngressUpdateStrategyRollingUpdateArgs'] rolling_update: Monitoring deployment rolling update (list Maxitems: 1)
        :param pulumi.Input[str] strategy: Monitoring deployment update strategy (string)
        """
        ClusterRkeConfigIngressUpdateStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rolling_update=rolling_update,
            strategy=strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rolling_update: Optional[pulumi.Input['ClusterRkeConfigIngressUpdateStrategyRollingUpdateArgs']] = None,
             strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rollingUpdate' in kwargs:
            rolling_update = kwargs['rollingUpdate']

        if rolling_update is not None:
            _setter("rolling_update", rolling_update)
        if strategy is not None:
            _setter("strategy", strategy)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ClusterRkeConfigIngressUpdateStrategyRollingUpdateArgs']]:
        """
        Monitoring deployment rolling update (list Maxitems: 1)
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ClusterRkeConfigIngressUpdateStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring deployment update strategy (string)
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ClusterRkeConfigIngressUpdateStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_unavailable: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_unavailable: Monitoring deployment rolling update max unavailable. Default: `1` (int)
        """
        ClusterRkeConfigIngressUpdateStrategyRollingUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_unavailable=max_unavailable,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_unavailable: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxUnavailable' in kwargs:
            max_unavailable = kwargs['maxUnavailable']

        if max_unavailable is not None:
            _setter("max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[int]]:
        """
        Monitoring deployment rolling update max unavailable. Default: `1` (int)
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ClusterRkeConfigMonitoringArgs:
    def __init__(__self__, *,
                 node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigMonitoringTolerationArgs']]]] = None,
                 update_strategy: Optional[pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyArgs']] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] node_selector: RKE monitoring node selector (map)
        :param pulumi.Input[Mapping[str, Any]] options: RKE options for network (map)
        :param pulumi.Input[str] provider: RKE monitoring provider (string)
        :param pulumi.Input[int] replicas: RKE monitoring replicas (int)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigMonitoringTolerationArgs']]] tolerations: Network add-on tolerations (list)
        :param pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyArgs'] update_strategy: RKE monitoring update strategy (list Maxitems: 1)
        """
        ClusterRkeConfigMonitoringArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            node_selector=node_selector,
            options=options,
            provider=provider,
            replicas=replicas,
            tolerations=tolerations,
            update_strategy=update_strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             provider: Optional[pulumi.Input[str]] = None,
             replicas: Optional[pulumi.Input[int]] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigMonitoringTolerationArgs']]]] = None,
             update_strategy: Optional[pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nodeSelector' in kwargs:
            node_selector = kwargs['nodeSelector']
        if 'updateStrategy' in kwargs:
            update_strategy = kwargs['updateStrategy']

        if node_selector is not None:
            _setter("node_selector", node_selector)
        if options is not None:
            _setter("options", options)
        if provider is not None:
            _setter("provider", provider)
        if replicas is not None:
            _setter("replicas", replicas)
        if tolerations is not None:
            _setter("tolerations", tolerations)
        if update_strategy is not None:
            _setter("update_strategy", update_strategy)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        RKE monitoring node selector (map)
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        RKE options for network (map)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        RKE monitoring provider (string)
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        RKE monitoring replicas (int)
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigMonitoringTolerationArgs']]]]:
        """
        Network add-on tolerations (list)
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigMonitoringTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional[pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyArgs']]:
        """
        RKE monitoring update strategy (list Maxitems: 1)
        """
        return pulumi.get(self, "update_strategy")

    @update_strategy.setter
    def update_strategy(self, value: Optional[pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyArgs']]):
        pulumi.set(self, "update_strategy", value)


@pulumi.input_type
class ClusterRkeConfigMonitoringTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The GKE taint key (string)
        :param pulumi.Input[str] effect: The GKE taint effect (string)
        :param pulumi.Input[str] operator: The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        :param pulumi.Input[int] seconds: The toleration seconds (int)
        :param pulumi.Input[str] value: The GKE taint value (string)
        """
        ClusterRkeConfigMonitoringTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The GKE taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint effect (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The toleration seconds (int)
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterRkeConfigMonitoringUpdateStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyRollingUpdateArgs']] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyRollingUpdateArgs'] rolling_update: Monitoring deployment rolling update (list Maxitems: 1)
        :param pulumi.Input[str] strategy: Monitoring deployment update strategy (string)
        """
        ClusterRkeConfigMonitoringUpdateStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rolling_update=rolling_update,
            strategy=strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rolling_update: Optional[pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyRollingUpdateArgs']] = None,
             strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rollingUpdate' in kwargs:
            rolling_update = kwargs['rollingUpdate']

        if rolling_update is not None:
            _setter("rolling_update", rolling_update)
        if strategy is not None:
            _setter("strategy", strategy)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyRollingUpdateArgs']]:
        """
        Monitoring deployment rolling update (list Maxitems: 1)
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ClusterRkeConfigMonitoringUpdateStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Monitoring deployment update strategy (string)
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ClusterRkeConfigMonitoringUpdateStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input[int]] = None,
                 max_unavailable: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] max_surge: The AKS node pool max surge (string), example value: `25%`
        :param pulumi.Input[int] max_unavailable: Monitoring deployment rolling update max unavailable. Default: `1` (int)
        """
        ClusterRkeConfigMonitoringUpdateStrategyRollingUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_surge=max_surge,
            max_unavailable=max_unavailable,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_surge: Optional[pulumi.Input[int]] = None,
             max_unavailable: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxSurge' in kwargs:
            max_surge = kwargs['maxSurge']
        if 'maxUnavailable' in kwargs:
            max_unavailable = kwargs['maxUnavailable']

        if max_surge is not None:
            _setter("max_surge", max_surge)
        if max_unavailable is not None:
            _setter("max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[int]]:
        """
        The AKS node pool max surge (string), example value: `25%`
        """
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[int]]:
        """
        Monitoring deployment rolling update max unavailable. Default: `1` (int)
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ClusterRkeConfigNetworkArgs:
    def __init__(__self__, *,
                 aci_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkAciNetworkProviderArgs']] = None,
                 calico_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkCalicoNetworkProviderArgs']] = None,
                 canal_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkCanalNetworkProviderArgs']] = None,
                 flannel_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkFlannelNetworkProviderArgs']] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 plugin: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNetworkTolerationArgs']]]] = None,
                 weave_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkWeaveNetworkProviderArgs']] = None):
        """
        :param pulumi.Input['ClusterRkeConfigNetworkAciNetworkProviderArgs'] aci_network_provider: ACI provider config for RKE network (list maxitems:63)
        :param pulumi.Input['ClusterRkeConfigNetworkCalicoNetworkProviderArgs'] calico_network_provider: Calico provider config for RKE network (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigNetworkCanalNetworkProviderArgs'] canal_network_provider: Canal provider config for RKE network (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigNetworkFlannelNetworkProviderArgs'] flannel_network_provider: Flannel provider config for RKE network (list maxitems:1)
        :param pulumi.Input[int] mtu: Network provider MTU. Default `0` (int)
        :param pulumi.Input[Mapping[str, Any]] options: RKE options for network (map)
        :param pulumi.Input[str] plugin: Plugin for RKE network. `canal` (default), `flannel`, `calico`, `none` and `weave` are supported. (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNetworkTolerationArgs']]] tolerations: Network add-on tolerations (list)
        :param pulumi.Input['ClusterRkeConfigNetworkWeaveNetworkProviderArgs'] weave_network_provider: Weave provider config for RKE network (list maxitems:1)
        """
        ClusterRkeConfigNetworkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aci_network_provider=aci_network_provider,
            calico_network_provider=calico_network_provider,
            canal_network_provider=canal_network_provider,
            flannel_network_provider=flannel_network_provider,
            mtu=mtu,
            options=options,
            plugin=plugin,
            tolerations=tolerations,
            weave_network_provider=weave_network_provider,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aci_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkAciNetworkProviderArgs']] = None,
             calico_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkCalicoNetworkProviderArgs']] = None,
             canal_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkCanalNetworkProviderArgs']] = None,
             flannel_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkFlannelNetworkProviderArgs']] = None,
             mtu: Optional[pulumi.Input[int]] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             plugin: Optional[pulumi.Input[str]] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNetworkTolerationArgs']]]] = None,
             weave_network_provider: Optional[pulumi.Input['ClusterRkeConfigNetworkWeaveNetworkProviderArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aciNetworkProvider' in kwargs:
            aci_network_provider = kwargs['aciNetworkProvider']
        if 'calicoNetworkProvider' in kwargs:
            calico_network_provider = kwargs['calicoNetworkProvider']
        if 'canalNetworkProvider' in kwargs:
            canal_network_provider = kwargs['canalNetworkProvider']
        if 'flannelNetworkProvider' in kwargs:
            flannel_network_provider = kwargs['flannelNetworkProvider']
        if 'weaveNetworkProvider' in kwargs:
            weave_network_provider = kwargs['weaveNetworkProvider']

        if aci_network_provider is not None:
            _setter("aci_network_provider", aci_network_provider)
        if calico_network_provider is not None:
            _setter("calico_network_provider", calico_network_provider)
        if canal_network_provider is not None:
            _setter("canal_network_provider", canal_network_provider)
        if flannel_network_provider is not None:
            _setter("flannel_network_provider", flannel_network_provider)
        if mtu is not None:
            _setter("mtu", mtu)
        if options is not None:
            _setter("options", options)
        if plugin is not None:
            _setter("plugin", plugin)
        if tolerations is not None:
            _setter("tolerations", tolerations)
        if weave_network_provider is not None:
            _setter("weave_network_provider", weave_network_provider)

    @property
    @pulumi.getter(name="aciNetworkProvider")
    def aci_network_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigNetworkAciNetworkProviderArgs']]:
        """
        ACI provider config for RKE network (list maxitems:63)
        """
        return pulumi.get(self, "aci_network_provider")

    @aci_network_provider.setter
    def aci_network_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigNetworkAciNetworkProviderArgs']]):
        pulumi.set(self, "aci_network_provider", value)

    @property
    @pulumi.getter(name="calicoNetworkProvider")
    def calico_network_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigNetworkCalicoNetworkProviderArgs']]:
        """
        Calico provider config for RKE network (list maxitems:1)
        """
        return pulumi.get(self, "calico_network_provider")

    @calico_network_provider.setter
    def calico_network_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigNetworkCalicoNetworkProviderArgs']]):
        pulumi.set(self, "calico_network_provider", value)

    @property
    @pulumi.getter(name="canalNetworkProvider")
    def canal_network_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigNetworkCanalNetworkProviderArgs']]:
        """
        Canal provider config for RKE network (list maxitems:1)
        """
        return pulumi.get(self, "canal_network_provider")

    @canal_network_provider.setter
    def canal_network_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigNetworkCanalNetworkProviderArgs']]):
        pulumi.set(self, "canal_network_provider", value)

    @property
    @pulumi.getter(name="flannelNetworkProvider")
    def flannel_network_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigNetworkFlannelNetworkProviderArgs']]:
        """
        Flannel provider config for RKE network (list maxitems:1)
        """
        return pulumi.get(self, "flannel_network_provider")

    @flannel_network_provider.setter
    def flannel_network_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigNetworkFlannelNetworkProviderArgs']]):
        pulumi.set(self, "flannel_network_provider", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Network provider MTU. Default `0` (int)
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        RKE options for network (map)
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input[str]]:
        """
        Plugin for RKE network. `canal` (default), `flannel`, `calico`, `none` and `weave` are supported. (string)
        """
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNetworkTolerationArgs']]]]:
        """
        Network add-on tolerations (list)
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigNetworkTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="weaveNetworkProvider")
    def weave_network_provider(self) -> Optional[pulumi.Input['ClusterRkeConfigNetworkWeaveNetworkProviderArgs']]:
        """
        Weave provider config for RKE network (list maxitems:1)
        """
        return pulumi.get(self, "weave_network_provider")

    @weave_network_provider.setter
    def weave_network_provider(self, value: Optional[pulumi.Input['ClusterRkeConfigNetworkWeaveNetworkProviderArgs']]):
        pulumi.set(self, "weave_network_provider", value)


@pulumi.input_type
class ClusterRkeConfigNetworkAciNetworkProviderArgs:
    def __init__(__self__, *,
                 aep: pulumi.Input[str],
                 apic_hosts: pulumi.Input[Sequence[pulumi.Input[str]]],
                 apic_user_crt: pulumi.Input[str],
                 apic_user_key: pulumi.Input[str],
                 apic_user_name: pulumi.Input[str],
                 encap_type: pulumi.Input[str],
                 extern_dynamic: pulumi.Input[str],
                 extern_static: pulumi.Input[str],
                 kube_api_vlan: pulumi.Input[str],
                 l3out: pulumi.Input[str],
                 l3out_external_networks: pulumi.Input[Sequence[pulumi.Input[str]]],
                 mcast_range_end: pulumi.Input[str],
                 mcast_range_start: pulumi.Input[str],
                 node_subnet: pulumi.Input[str],
                 node_svc_subnet: pulumi.Input[str],
                 service_vlan: pulumi.Input[str],
                 system_id: pulumi.Input[str],
                 token: pulumi.Input[str],
                 vrf_name: pulumi.Input[str],
                 vrf_tenant: pulumi.Input[str],
                 apic_refresh_ticker_adjust: Optional[pulumi.Input[str]] = None,
                 apic_refresh_time: Optional[pulumi.Input[str]] = None,
                 apic_subscription_delay: Optional[pulumi.Input[str]] = None,
                 capic: Optional[pulumi.Input[str]] = None,
                 controller_log_level: Optional[pulumi.Input[str]] = None,
                 disable_periodic_snat_global_info_sync: Optional[pulumi.Input[str]] = None,
                 disable_wait_for_network: Optional[pulumi.Input[str]] = None,
                 drop_log_enable: Optional[pulumi.Input[str]] = None,
                 duration_wait_for_network: Optional[pulumi.Input[str]] = None,
                 enable_endpoint_slice: Optional[pulumi.Input[str]] = None,
                 ep_registry: Optional[pulumi.Input[str]] = None,
                 gbp_pod_subnet: Optional[pulumi.Input[str]] = None,
                 host_agent_log_level: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secret: Optional[pulumi.Input[str]] = None,
                 infra_vlan: Optional[pulumi.Input[str]] = None,
                 install_istio: Optional[pulumi.Input[str]] = None,
                 istio_profile: Optional[pulumi.Input[str]] = None,
                 kafka_brokers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kafka_client_crt: Optional[pulumi.Input[str]] = None,
                 kafka_client_key: Optional[pulumi.Input[str]] = None,
                 max_nodes_svc_graph: Optional[pulumi.Input[str]] = None,
                 mtu_head_room: Optional[pulumi.Input[str]] = None,
                 multus_disable: Optional[pulumi.Input[str]] = None,
                 no_priority_class: Optional[pulumi.Input[str]] = None,
                 node_pod_if_enable: Optional[pulumi.Input[str]] = None,
                 opflex_client_ssl: Optional[pulumi.Input[str]] = None,
                 opflex_device_delete_timeout: Optional[pulumi.Input[str]] = None,
                 opflex_log_level: Optional[pulumi.Input[str]] = None,
                 opflex_mode: Optional[pulumi.Input[str]] = None,
                 opflex_server_port: Optional[pulumi.Input[str]] = None,
                 overlay_vrf_name: Optional[pulumi.Input[str]] = None,
                 ovs_memory_limit: Optional[pulumi.Input[str]] = None,
                 pbr_tracking_non_snat: Optional[pulumi.Input[str]] = None,
                 pod_subnet_chunk_size: Optional[pulumi.Input[str]] = None,
                 run_gbp_container: Optional[pulumi.Input[str]] = None,
                 run_opflex_server_container: Optional[pulumi.Input[str]] = None,
                 service_monitor_interval: Optional[pulumi.Input[str]] = None,
                 snat_contract_scope: Optional[pulumi.Input[str]] = None,
                 snat_namespace: Optional[pulumi.Input[str]] = None,
                 snat_port_range_end: Optional[pulumi.Input[str]] = None,
                 snat_port_range_start: Optional[pulumi.Input[str]] = None,
                 snat_ports_per_node: Optional[pulumi.Input[str]] = None,
                 sriov_enable: Optional[pulumi.Input[str]] = None,
                 subnet_domain_name: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 use_aci_anywhere_crd: Optional[pulumi.Input[str]] = None,
                 use_aci_cni_priority_class: Optional[pulumi.Input[str]] = None,
                 use_cluster_role: Optional[pulumi.Input[str]] = None,
                 use_host_netns_volume: Optional[pulumi.Input[str]] = None,
                 use_opflex_server_volume: Optional[pulumi.Input[str]] = None,
                 use_privileged_container: Optional[pulumi.Input[str]] = None,
                 vmm_controller: Optional[pulumi.Input[str]] = None,
                 vmm_domain: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aep: Attachable entity profile (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] apic_hosts: List of APIC hosts to connect for APIC API (list)
        :param pulumi.Input[str] apic_user_crt: APIC user certificate (string)
        :param pulumi.Input[str] apic_user_key: APIC user key (string)
        :param pulumi.Input[str] apic_user_name: APIC user name (string)
        :param pulumi.Input[str] encap_type: Encap type: vxlan or vlan (string)
        :param pulumi.Input[str] extern_dynamic: Subnet to use for dynamic external IPs (string)
        :param pulumi.Input[str] extern_static: Subnet to use for static external IPs (string)
        :param pulumi.Input[str] kube_api_vlan: The VLAN used by the physdom for nodes (string)
        :param pulumi.Input[str] l3out: L3out (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] l3out_external_networks: L3out external networks (list)
        :param pulumi.Input[str] mcast_range_end: End of mcast range (string)
        :param pulumi.Input[str] mcast_range_start: Start of mcast range (string)
        :param pulumi.Input[str] node_subnet: Subnet to use for nodes (string)
        :param pulumi.Input[str] node_svc_subnet: Subnet to use for service graph (string)
        :param pulumi.Input[str] service_vlan: The VLAN used by LoadBalancer services (string)
        :param pulumi.Input[str] system_id: ACI system ID (string)
        :param pulumi.Input[str] token: ACI token (string)
        :param pulumi.Input[str] vrf_name: VRF name (string)
        :param pulumi.Input[str] vrf_tenant: VRF tenant (string)
        :param pulumi.Input[str] apic_refresh_ticker_adjust: APIC refresh ticker adjust amount (string)
        :param pulumi.Input[str] apic_refresh_time: APIC refresh time in seconds (string)
        :param pulumi.Input[str] apic_subscription_delay: APIC subscription delay amount (string)
        :param pulumi.Input[str] capic: cAPIC cloud (string)
        :param pulumi.Input[str] controller_log_level: Log level for ACI controller (string)
        :param pulumi.Input[str] disable_periodic_snat_global_info_sync: Whether to disable periodic SNAT global info sync (string)
        :param pulumi.Input[str] disable_wait_for_network: Whether to disable waiting for network (string)
        :param pulumi.Input[str] drop_log_enable: Whether to enable drop log (string)
        :param pulumi.Input[str] duration_wait_for_network: The duration to wait for network (string)
        :param pulumi.Input[str] enable_endpoint_slice: Whether to enable endpoint slices (string)
        :param pulumi.Input[str] ep_registry: EP registry (string)
        :param pulumi.Input[str] gbp_pod_subnet: GBH pod subnet (string)
        :param pulumi.Input[str] host_agent_log_level: Log level for ACI host agent (string)
        :param pulumi.Input[str] image_pull_policy: Image pull policy (string)
        :param pulumi.Input[str] image_pull_secret: Image pull policy (string)
        :param pulumi.Input[str] infra_vlan: The VLAN used by ACI infra (string)
        :param pulumi.Input[str] install_istio: Whether to install Istio (string)
        :param pulumi.Input[str] istio_profile: Istio profile name (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kafka_brokers: List of Kafka broker hosts (list)
        :param pulumi.Input[str] kafka_client_crt: Kafka client certificate (string)
        :param pulumi.Input[str] kafka_client_key: Kafka client key (string)
        :param pulumi.Input[str] max_nodes_svc_graph: Max nodes in service graph (string)
        :param pulumi.Input[str] mtu_head_room: MTU head room amount (string)
        :param pulumi.Input[str] multus_disable: Whether to disable Multus (string)
        :param pulumi.Input[str] no_priority_class: Whether to use priority class (string)
        :param pulumi.Input[str] node_pod_if_enable: Whether to enable node pod interface (string)
        :param pulumi.Input[str] opflex_client_ssl: Whether to use client SSL for Opflex (string)
        :param pulumi.Input[str] opflex_device_delete_timeout: Opflex device delete timeout (string)
        :param pulumi.Input[str] opflex_log_level: Log level for ACI opflex (string)
        :param pulumi.Input[str] opflex_mode: Opflex mode (string)
        :param pulumi.Input[str] opflex_server_port: Opflex server port (string)
        :param pulumi.Input[str] overlay_vrf_name: Overlay VRF name (string)
        :param pulumi.Input[str] ovs_memory_limit: OVS memory limit (string)
        :param pulumi.Input[str] pbr_tracking_non_snat: Policy-based routing tracking non snat (string)
        :param pulumi.Input[str] pod_subnet_chunk_size: Pod subnet chunk size (string)
        :param pulumi.Input[str] run_gbp_container: Whether to run GBP container (string)
        :param pulumi.Input[str] run_opflex_server_container: Whether to run Opflex server container (string)
        :param pulumi.Input[str] service_monitor_interval: Service monitor interval (string)
        :param pulumi.Input[str] snat_contract_scope: Snat contract scope (string)
        :param pulumi.Input[str] snat_namespace: Snat namespace (string)
        :param pulumi.Input[str] snat_port_range_end: End of snat port range (string)
        :param pulumi.Input[str] snat_port_range_start: End of snat port range (string)
        :param pulumi.Input[str] snat_ports_per_node: Snat ports per node (string)
        :param pulumi.Input[str] sriov_enable: Whether to enable SR-IOV (string)
        :param pulumi.Input[str] subnet_domain_name: Subnet domain name (string)
        :param pulumi.Input[str] tenant: ACI tenant (string)
        :param pulumi.Input[str] use_aci_anywhere_crd: Whether to use ACI anywhere CRD (string)
        :param pulumi.Input[str] use_aci_cni_priority_class: Whether to use ACI CNI priority class (string)
        :param pulumi.Input[str] use_cluster_role: Whether to use cluster role (string)
        :param pulumi.Input[str] use_host_netns_volume: Whether to use host netns volume (string)
        :param pulumi.Input[str] use_opflex_server_volume: Whether use Opflex server volume (string)
        :param pulumi.Input[str] use_privileged_container: Whether ACI containers should run as privileged (string)
        :param pulumi.Input[str] vmm_controller: VMM controller configuration (string)
        :param pulumi.Input[str] vmm_domain: VMM domain configuration (string)
        """
        ClusterRkeConfigNetworkAciNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aep=aep,
            apic_hosts=apic_hosts,
            apic_user_crt=apic_user_crt,
            apic_user_key=apic_user_key,
            apic_user_name=apic_user_name,
            encap_type=encap_type,
            extern_dynamic=extern_dynamic,
            extern_static=extern_static,
            kube_api_vlan=kube_api_vlan,
            l3out=l3out,
            l3out_external_networks=l3out_external_networks,
            mcast_range_end=mcast_range_end,
            mcast_range_start=mcast_range_start,
            node_subnet=node_subnet,
            node_svc_subnet=node_svc_subnet,
            service_vlan=service_vlan,
            system_id=system_id,
            token=token,
            vrf_name=vrf_name,
            vrf_tenant=vrf_tenant,
            apic_refresh_ticker_adjust=apic_refresh_ticker_adjust,
            apic_refresh_time=apic_refresh_time,
            apic_subscription_delay=apic_subscription_delay,
            capic=capic,
            controller_log_level=controller_log_level,
            disable_periodic_snat_global_info_sync=disable_periodic_snat_global_info_sync,
            disable_wait_for_network=disable_wait_for_network,
            drop_log_enable=drop_log_enable,
            duration_wait_for_network=duration_wait_for_network,
            enable_endpoint_slice=enable_endpoint_slice,
            ep_registry=ep_registry,
            gbp_pod_subnet=gbp_pod_subnet,
            host_agent_log_level=host_agent_log_level,
            image_pull_policy=image_pull_policy,
            image_pull_secret=image_pull_secret,
            infra_vlan=infra_vlan,
            install_istio=install_istio,
            istio_profile=istio_profile,
            kafka_brokers=kafka_brokers,
            kafka_client_crt=kafka_client_crt,
            kafka_client_key=kafka_client_key,
            max_nodes_svc_graph=max_nodes_svc_graph,
            mtu_head_room=mtu_head_room,
            multus_disable=multus_disable,
            no_priority_class=no_priority_class,
            node_pod_if_enable=node_pod_if_enable,
            opflex_client_ssl=opflex_client_ssl,
            opflex_device_delete_timeout=opflex_device_delete_timeout,
            opflex_log_level=opflex_log_level,
            opflex_mode=opflex_mode,
            opflex_server_port=opflex_server_port,
            overlay_vrf_name=overlay_vrf_name,
            ovs_memory_limit=ovs_memory_limit,
            pbr_tracking_non_snat=pbr_tracking_non_snat,
            pod_subnet_chunk_size=pod_subnet_chunk_size,
            run_gbp_container=run_gbp_container,
            run_opflex_server_container=run_opflex_server_container,
            service_monitor_interval=service_monitor_interval,
            snat_contract_scope=snat_contract_scope,
            snat_namespace=snat_namespace,
            snat_port_range_end=snat_port_range_end,
            snat_port_range_start=snat_port_range_start,
            snat_ports_per_node=snat_ports_per_node,
            sriov_enable=sriov_enable,
            subnet_domain_name=subnet_domain_name,
            tenant=tenant,
            use_aci_anywhere_crd=use_aci_anywhere_crd,
            use_aci_cni_priority_class=use_aci_cni_priority_class,
            use_cluster_role=use_cluster_role,
            use_host_netns_volume=use_host_netns_volume,
            use_opflex_server_volume=use_opflex_server_volume,
            use_privileged_container=use_privileged_container,
            vmm_controller=vmm_controller,
            vmm_domain=vmm_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aep: pulumi.Input[str],
             apic_hosts: pulumi.Input[Sequence[pulumi.Input[str]]],
             apic_user_crt: pulumi.Input[str],
             apic_user_key: pulumi.Input[str],
             apic_user_name: pulumi.Input[str],
             encap_type: pulumi.Input[str],
             extern_dynamic: pulumi.Input[str],
             extern_static: pulumi.Input[str],
             kube_api_vlan: pulumi.Input[str],
             l3out: pulumi.Input[str],
             l3out_external_networks: pulumi.Input[Sequence[pulumi.Input[str]]],
             mcast_range_end: pulumi.Input[str],
             mcast_range_start: pulumi.Input[str],
             node_subnet: pulumi.Input[str],
             node_svc_subnet: pulumi.Input[str],
             service_vlan: pulumi.Input[str],
             system_id: pulumi.Input[str],
             token: pulumi.Input[str],
             vrf_name: pulumi.Input[str],
             vrf_tenant: pulumi.Input[str],
             apic_refresh_ticker_adjust: Optional[pulumi.Input[str]] = None,
             apic_refresh_time: Optional[pulumi.Input[str]] = None,
             apic_subscription_delay: Optional[pulumi.Input[str]] = None,
             capic: Optional[pulumi.Input[str]] = None,
             controller_log_level: Optional[pulumi.Input[str]] = None,
             disable_periodic_snat_global_info_sync: Optional[pulumi.Input[str]] = None,
             disable_wait_for_network: Optional[pulumi.Input[str]] = None,
             drop_log_enable: Optional[pulumi.Input[str]] = None,
             duration_wait_for_network: Optional[pulumi.Input[str]] = None,
             enable_endpoint_slice: Optional[pulumi.Input[str]] = None,
             ep_registry: Optional[pulumi.Input[str]] = None,
             gbp_pod_subnet: Optional[pulumi.Input[str]] = None,
             host_agent_log_level: Optional[pulumi.Input[str]] = None,
             image_pull_policy: Optional[pulumi.Input[str]] = None,
             image_pull_secret: Optional[pulumi.Input[str]] = None,
             infra_vlan: Optional[pulumi.Input[str]] = None,
             install_istio: Optional[pulumi.Input[str]] = None,
             istio_profile: Optional[pulumi.Input[str]] = None,
             kafka_brokers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             kafka_client_crt: Optional[pulumi.Input[str]] = None,
             kafka_client_key: Optional[pulumi.Input[str]] = None,
             max_nodes_svc_graph: Optional[pulumi.Input[str]] = None,
             mtu_head_room: Optional[pulumi.Input[str]] = None,
             multus_disable: Optional[pulumi.Input[str]] = None,
             no_priority_class: Optional[pulumi.Input[str]] = None,
             node_pod_if_enable: Optional[pulumi.Input[str]] = None,
             opflex_client_ssl: Optional[pulumi.Input[str]] = None,
             opflex_device_delete_timeout: Optional[pulumi.Input[str]] = None,
             opflex_log_level: Optional[pulumi.Input[str]] = None,
             opflex_mode: Optional[pulumi.Input[str]] = None,
             opflex_server_port: Optional[pulumi.Input[str]] = None,
             overlay_vrf_name: Optional[pulumi.Input[str]] = None,
             ovs_memory_limit: Optional[pulumi.Input[str]] = None,
             pbr_tracking_non_snat: Optional[pulumi.Input[str]] = None,
             pod_subnet_chunk_size: Optional[pulumi.Input[str]] = None,
             run_gbp_container: Optional[pulumi.Input[str]] = None,
             run_opflex_server_container: Optional[pulumi.Input[str]] = None,
             service_monitor_interval: Optional[pulumi.Input[str]] = None,
             snat_contract_scope: Optional[pulumi.Input[str]] = None,
             snat_namespace: Optional[pulumi.Input[str]] = None,
             snat_port_range_end: Optional[pulumi.Input[str]] = None,
             snat_port_range_start: Optional[pulumi.Input[str]] = None,
             snat_ports_per_node: Optional[pulumi.Input[str]] = None,
             sriov_enable: Optional[pulumi.Input[str]] = None,
             subnet_domain_name: Optional[pulumi.Input[str]] = None,
             tenant: Optional[pulumi.Input[str]] = None,
             use_aci_anywhere_crd: Optional[pulumi.Input[str]] = None,
             use_aci_cni_priority_class: Optional[pulumi.Input[str]] = None,
             use_cluster_role: Optional[pulumi.Input[str]] = None,
             use_host_netns_volume: Optional[pulumi.Input[str]] = None,
             use_opflex_server_volume: Optional[pulumi.Input[str]] = None,
             use_privileged_container: Optional[pulumi.Input[str]] = None,
             vmm_controller: Optional[pulumi.Input[str]] = None,
             vmm_domain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apicHosts' in kwargs:
            apic_hosts = kwargs['apicHosts']
        if 'apicUserCrt' in kwargs:
            apic_user_crt = kwargs['apicUserCrt']
        if 'apicUserKey' in kwargs:
            apic_user_key = kwargs['apicUserKey']
        if 'apicUserName' in kwargs:
            apic_user_name = kwargs['apicUserName']
        if 'encapType' in kwargs:
            encap_type = kwargs['encapType']
        if 'externDynamic' in kwargs:
            extern_dynamic = kwargs['externDynamic']
        if 'externStatic' in kwargs:
            extern_static = kwargs['externStatic']
        if 'kubeApiVlan' in kwargs:
            kube_api_vlan = kwargs['kubeApiVlan']
        if 'l3outExternalNetworks' in kwargs:
            l3out_external_networks = kwargs['l3outExternalNetworks']
        if 'mcastRangeEnd' in kwargs:
            mcast_range_end = kwargs['mcastRangeEnd']
        if 'mcastRangeStart' in kwargs:
            mcast_range_start = kwargs['mcastRangeStart']
        if 'nodeSubnet' in kwargs:
            node_subnet = kwargs['nodeSubnet']
        if 'nodeSvcSubnet' in kwargs:
            node_svc_subnet = kwargs['nodeSvcSubnet']
        if 'serviceVlan' in kwargs:
            service_vlan = kwargs['serviceVlan']
        if 'systemId' in kwargs:
            system_id = kwargs['systemId']
        if 'vrfName' in kwargs:
            vrf_name = kwargs['vrfName']
        if 'vrfTenant' in kwargs:
            vrf_tenant = kwargs['vrfTenant']
        if 'apicRefreshTickerAdjust' in kwargs:
            apic_refresh_ticker_adjust = kwargs['apicRefreshTickerAdjust']
        if 'apicRefreshTime' in kwargs:
            apic_refresh_time = kwargs['apicRefreshTime']
        if 'apicSubscriptionDelay' in kwargs:
            apic_subscription_delay = kwargs['apicSubscriptionDelay']
        if 'controllerLogLevel' in kwargs:
            controller_log_level = kwargs['controllerLogLevel']
        if 'disablePeriodicSnatGlobalInfoSync' in kwargs:
            disable_periodic_snat_global_info_sync = kwargs['disablePeriodicSnatGlobalInfoSync']
        if 'disableWaitForNetwork' in kwargs:
            disable_wait_for_network = kwargs['disableWaitForNetwork']
        if 'dropLogEnable' in kwargs:
            drop_log_enable = kwargs['dropLogEnable']
        if 'durationWaitForNetwork' in kwargs:
            duration_wait_for_network = kwargs['durationWaitForNetwork']
        if 'enableEndpointSlice' in kwargs:
            enable_endpoint_slice = kwargs['enableEndpointSlice']
        if 'epRegistry' in kwargs:
            ep_registry = kwargs['epRegistry']
        if 'gbpPodSubnet' in kwargs:
            gbp_pod_subnet = kwargs['gbpPodSubnet']
        if 'hostAgentLogLevel' in kwargs:
            host_agent_log_level = kwargs['hostAgentLogLevel']
        if 'imagePullPolicy' in kwargs:
            image_pull_policy = kwargs['imagePullPolicy']
        if 'imagePullSecret' in kwargs:
            image_pull_secret = kwargs['imagePullSecret']
        if 'infraVlan' in kwargs:
            infra_vlan = kwargs['infraVlan']
        if 'installIstio' in kwargs:
            install_istio = kwargs['installIstio']
        if 'istioProfile' in kwargs:
            istio_profile = kwargs['istioProfile']
        if 'kafkaBrokers' in kwargs:
            kafka_brokers = kwargs['kafkaBrokers']
        if 'kafkaClientCrt' in kwargs:
            kafka_client_crt = kwargs['kafkaClientCrt']
        if 'kafkaClientKey' in kwargs:
            kafka_client_key = kwargs['kafkaClientKey']
        if 'maxNodesSvcGraph' in kwargs:
            max_nodes_svc_graph = kwargs['maxNodesSvcGraph']
        if 'mtuHeadRoom' in kwargs:
            mtu_head_room = kwargs['mtuHeadRoom']
        if 'multusDisable' in kwargs:
            multus_disable = kwargs['multusDisable']
        if 'noPriorityClass' in kwargs:
            no_priority_class = kwargs['noPriorityClass']
        if 'nodePodIfEnable' in kwargs:
            node_pod_if_enable = kwargs['nodePodIfEnable']
        if 'opflexClientSsl' in kwargs:
            opflex_client_ssl = kwargs['opflexClientSsl']
        if 'opflexDeviceDeleteTimeout' in kwargs:
            opflex_device_delete_timeout = kwargs['opflexDeviceDeleteTimeout']
        if 'opflexLogLevel' in kwargs:
            opflex_log_level = kwargs['opflexLogLevel']
        if 'opflexMode' in kwargs:
            opflex_mode = kwargs['opflexMode']
        if 'opflexServerPort' in kwargs:
            opflex_server_port = kwargs['opflexServerPort']
        if 'overlayVrfName' in kwargs:
            overlay_vrf_name = kwargs['overlayVrfName']
        if 'ovsMemoryLimit' in kwargs:
            ovs_memory_limit = kwargs['ovsMemoryLimit']
        if 'pbrTrackingNonSnat' in kwargs:
            pbr_tracking_non_snat = kwargs['pbrTrackingNonSnat']
        if 'podSubnetChunkSize' in kwargs:
            pod_subnet_chunk_size = kwargs['podSubnetChunkSize']
        if 'runGbpContainer' in kwargs:
            run_gbp_container = kwargs['runGbpContainer']
        if 'runOpflexServerContainer' in kwargs:
            run_opflex_server_container = kwargs['runOpflexServerContainer']
        if 'serviceMonitorInterval' in kwargs:
            service_monitor_interval = kwargs['serviceMonitorInterval']
        if 'snatContractScope' in kwargs:
            snat_contract_scope = kwargs['snatContractScope']
        if 'snatNamespace' in kwargs:
            snat_namespace = kwargs['snatNamespace']
        if 'snatPortRangeEnd' in kwargs:
            snat_port_range_end = kwargs['snatPortRangeEnd']
        if 'snatPortRangeStart' in kwargs:
            snat_port_range_start = kwargs['snatPortRangeStart']
        if 'snatPortsPerNode' in kwargs:
            snat_ports_per_node = kwargs['snatPortsPerNode']
        if 'sriovEnable' in kwargs:
            sriov_enable = kwargs['sriovEnable']
        if 'subnetDomainName' in kwargs:
            subnet_domain_name = kwargs['subnetDomainName']
        if 'useAciAnywhereCrd' in kwargs:
            use_aci_anywhere_crd = kwargs['useAciAnywhereCrd']
        if 'useAciCniPriorityClass' in kwargs:
            use_aci_cni_priority_class = kwargs['useAciCniPriorityClass']
        if 'useClusterRole' in kwargs:
            use_cluster_role = kwargs['useClusterRole']
        if 'useHostNetnsVolume' in kwargs:
            use_host_netns_volume = kwargs['useHostNetnsVolume']
        if 'useOpflexServerVolume' in kwargs:
            use_opflex_server_volume = kwargs['useOpflexServerVolume']
        if 'usePrivilegedContainer' in kwargs:
            use_privileged_container = kwargs['usePrivilegedContainer']
        if 'vmmController' in kwargs:
            vmm_controller = kwargs['vmmController']
        if 'vmmDomain' in kwargs:
            vmm_domain = kwargs['vmmDomain']

        _setter("aep", aep)
        _setter("apic_hosts", apic_hosts)
        _setter("apic_user_crt", apic_user_crt)
        _setter("apic_user_key", apic_user_key)
        _setter("apic_user_name", apic_user_name)
        _setter("encap_type", encap_type)
        _setter("extern_dynamic", extern_dynamic)
        _setter("extern_static", extern_static)
        _setter("kube_api_vlan", kube_api_vlan)
        _setter("l3out", l3out)
        _setter("l3out_external_networks", l3out_external_networks)
        _setter("mcast_range_end", mcast_range_end)
        _setter("mcast_range_start", mcast_range_start)
        _setter("node_subnet", node_subnet)
        _setter("node_svc_subnet", node_svc_subnet)
        _setter("service_vlan", service_vlan)
        _setter("system_id", system_id)
        _setter("token", token)
        _setter("vrf_name", vrf_name)
        _setter("vrf_tenant", vrf_tenant)
        if apic_refresh_ticker_adjust is not None:
            _setter("apic_refresh_ticker_adjust", apic_refresh_ticker_adjust)
        if apic_refresh_time is not None:
            _setter("apic_refresh_time", apic_refresh_time)
        if apic_subscription_delay is not None:
            _setter("apic_subscription_delay", apic_subscription_delay)
        if capic is not None:
            _setter("capic", capic)
        if controller_log_level is not None:
            _setter("controller_log_level", controller_log_level)
        if disable_periodic_snat_global_info_sync is not None:
            _setter("disable_periodic_snat_global_info_sync", disable_periodic_snat_global_info_sync)
        if disable_wait_for_network is not None:
            _setter("disable_wait_for_network", disable_wait_for_network)
        if drop_log_enable is not None:
            _setter("drop_log_enable", drop_log_enable)
        if duration_wait_for_network is not None:
            _setter("duration_wait_for_network", duration_wait_for_network)
        if enable_endpoint_slice is not None:
            _setter("enable_endpoint_slice", enable_endpoint_slice)
        if ep_registry is not None:
            _setter("ep_registry", ep_registry)
        if gbp_pod_subnet is not None:
            _setter("gbp_pod_subnet", gbp_pod_subnet)
        if host_agent_log_level is not None:
            _setter("host_agent_log_level", host_agent_log_level)
        if image_pull_policy is not None:
            _setter("image_pull_policy", image_pull_policy)
        if image_pull_secret is not None:
            _setter("image_pull_secret", image_pull_secret)
        if infra_vlan is not None:
            _setter("infra_vlan", infra_vlan)
        if install_istio is not None:
            _setter("install_istio", install_istio)
        if istio_profile is not None:
            _setter("istio_profile", istio_profile)
        if kafka_brokers is not None:
            _setter("kafka_brokers", kafka_brokers)
        if kafka_client_crt is not None:
            _setter("kafka_client_crt", kafka_client_crt)
        if kafka_client_key is not None:
            _setter("kafka_client_key", kafka_client_key)
        if max_nodes_svc_graph is not None:
            _setter("max_nodes_svc_graph", max_nodes_svc_graph)
        if mtu_head_room is not None:
            _setter("mtu_head_room", mtu_head_room)
        if multus_disable is not None:
            _setter("multus_disable", multus_disable)
        if no_priority_class is not None:
            _setter("no_priority_class", no_priority_class)
        if node_pod_if_enable is not None:
            _setter("node_pod_if_enable", node_pod_if_enable)
        if opflex_client_ssl is not None:
            _setter("opflex_client_ssl", opflex_client_ssl)
        if opflex_device_delete_timeout is not None:
            _setter("opflex_device_delete_timeout", opflex_device_delete_timeout)
        if opflex_log_level is not None:
            _setter("opflex_log_level", opflex_log_level)
        if opflex_mode is not None:
            _setter("opflex_mode", opflex_mode)
        if opflex_server_port is not None:
            _setter("opflex_server_port", opflex_server_port)
        if overlay_vrf_name is not None:
            _setter("overlay_vrf_name", overlay_vrf_name)
        if ovs_memory_limit is not None:
            _setter("ovs_memory_limit", ovs_memory_limit)
        if pbr_tracking_non_snat is not None:
            _setter("pbr_tracking_non_snat", pbr_tracking_non_snat)
        if pod_subnet_chunk_size is not None:
            _setter("pod_subnet_chunk_size", pod_subnet_chunk_size)
        if run_gbp_container is not None:
            _setter("run_gbp_container", run_gbp_container)
        if run_opflex_server_container is not None:
            _setter("run_opflex_server_container", run_opflex_server_container)
        if service_monitor_interval is not None:
            _setter("service_monitor_interval", service_monitor_interval)
        if snat_contract_scope is not None:
            _setter("snat_contract_scope", snat_contract_scope)
        if snat_namespace is not None:
            _setter("snat_namespace", snat_namespace)
        if snat_port_range_end is not None:
            _setter("snat_port_range_end", snat_port_range_end)
        if snat_port_range_start is not None:
            _setter("snat_port_range_start", snat_port_range_start)
        if snat_ports_per_node is not None:
            _setter("snat_ports_per_node", snat_ports_per_node)
        if sriov_enable is not None:
            _setter("sriov_enable", sriov_enable)
        if subnet_domain_name is not None:
            _setter("subnet_domain_name", subnet_domain_name)
        if tenant is not None:
            _setter("tenant", tenant)
        if use_aci_anywhere_crd is not None:
            _setter("use_aci_anywhere_crd", use_aci_anywhere_crd)
        if use_aci_cni_priority_class is not None:
            _setter("use_aci_cni_priority_class", use_aci_cni_priority_class)
        if use_cluster_role is not None:
            _setter("use_cluster_role", use_cluster_role)
        if use_host_netns_volume is not None:
            _setter("use_host_netns_volume", use_host_netns_volume)
        if use_opflex_server_volume is not None:
            _setter("use_opflex_server_volume", use_opflex_server_volume)
        if use_privileged_container is not None:
            _setter("use_privileged_container", use_privileged_container)
        if vmm_controller is not None:
            _setter("vmm_controller", vmm_controller)
        if vmm_domain is not None:
            _setter("vmm_domain", vmm_domain)

    @property
    @pulumi.getter
    def aep(self) -> pulumi.Input[str]:
        """
        Attachable entity profile (string)
        """
        return pulumi.get(self, "aep")

    @aep.setter
    def aep(self, value: pulumi.Input[str]):
        pulumi.set(self, "aep", value)

    @property
    @pulumi.getter(name="apicHosts")
    def apic_hosts(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of APIC hosts to connect for APIC API (list)
        """
        return pulumi.get(self, "apic_hosts")

    @apic_hosts.setter
    def apic_hosts(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "apic_hosts", value)

    @property
    @pulumi.getter(name="apicUserCrt")
    def apic_user_crt(self) -> pulumi.Input[str]:
        """
        APIC user certificate (string)
        """
        return pulumi.get(self, "apic_user_crt")

    @apic_user_crt.setter
    def apic_user_crt(self, value: pulumi.Input[str]):
        pulumi.set(self, "apic_user_crt", value)

    @property
    @pulumi.getter(name="apicUserKey")
    def apic_user_key(self) -> pulumi.Input[str]:
        """
        APIC user key (string)
        """
        return pulumi.get(self, "apic_user_key")

    @apic_user_key.setter
    def apic_user_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "apic_user_key", value)

    @property
    @pulumi.getter(name="apicUserName")
    def apic_user_name(self) -> pulumi.Input[str]:
        """
        APIC user name (string)
        """
        return pulumi.get(self, "apic_user_name")

    @apic_user_name.setter
    def apic_user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "apic_user_name", value)

    @property
    @pulumi.getter(name="encapType")
    def encap_type(self) -> pulumi.Input[str]:
        """
        Encap type: vxlan or vlan (string)
        """
        return pulumi.get(self, "encap_type")

    @encap_type.setter
    def encap_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "encap_type", value)

    @property
    @pulumi.getter(name="externDynamic")
    def extern_dynamic(self) -> pulumi.Input[str]:
        """
        Subnet to use for dynamic external IPs (string)
        """
        return pulumi.get(self, "extern_dynamic")

    @extern_dynamic.setter
    def extern_dynamic(self, value: pulumi.Input[str]):
        pulumi.set(self, "extern_dynamic", value)

    @property
    @pulumi.getter(name="externStatic")
    def extern_static(self) -> pulumi.Input[str]:
        """
        Subnet to use for static external IPs (string)
        """
        return pulumi.get(self, "extern_static")

    @extern_static.setter
    def extern_static(self, value: pulumi.Input[str]):
        pulumi.set(self, "extern_static", value)

    @property
    @pulumi.getter(name="kubeApiVlan")
    def kube_api_vlan(self) -> pulumi.Input[str]:
        """
        The VLAN used by the physdom for nodes (string)
        """
        return pulumi.get(self, "kube_api_vlan")

    @kube_api_vlan.setter
    def kube_api_vlan(self, value: pulumi.Input[str]):
        pulumi.set(self, "kube_api_vlan", value)

    @property
    @pulumi.getter
    def l3out(self) -> pulumi.Input[str]:
        """
        L3out (string)
        """
        return pulumi.get(self, "l3out")

    @l3out.setter
    def l3out(self, value: pulumi.Input[str]):
        pulumi.set(self, "l3out", value)

    @property
    @pulumi.getter(name="l3outExternalNetworks")
    def l3out_external_networks(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        L3out external networks (list)
        """
        return pulumi.get(self, "l3out_external_networks")

    @l3out_external_networks.setter
    def l3out_external_networks(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "l3out_external_networks", value)

    @property
    @pulumi.getter(name="mcastRangeEnd")
    def mcast_range_end(self) -> pulumi.Input[str]:
        """
        End of mcast range (string)
        """
        return pulumi.get(self, "mcast_range_end")

    @mcast_range_end.setter
    def mcast_range_end(self, value: pulumi.Input[str]):
        pulumi.set(self, "mcast_range_end", value)

    @property
    @pulumi.getter(name="mcastRangeStart")
    def mcast_range_start(self) -> pulumi.Input[str]:
        """
        Start of mcast range (string)
        """
        return pulumi.get(self, "mcast_range_start")

    @mcast_range_start.setter
    def mcast_range_start(self, value: pulumi.Input[str]):
        pulumi.set(self, "mcast_range_start", value)

    @property
    @pulumi.getter(name="nodeSubnet")
    def node_subnet(self) -> pulumi.Input[str]:
        """
        Subnet to use for nodes (string)
        """
        return pulumi.get(self, "node_subnet")

    @node_subnet.setter
    def node_subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_subnet", value)

    @property
    @pulumi.getter(name="nodeSvcSubnet")
    def node_svc_subnet(self) -> pulumi.Input[str]:
        """
        Subnet to use for service graph (string)
        """
        return pulumi.get(self, "node_svc_subnet")

    @node_svc_subnet.setter
    def node_svc_subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_svc_subnet", value)

    @property
    @pulumi.getter(name="serviceVlan")
    def service_vlan(self) -> pulumi.Input[str]:
        """
        The VLAN used by LoadBalancer services (string)
        """
        return pulumi.get(self, "service_vlan")

    @service_vlan.setter
    def service_vlan(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_vlan", value)

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> pulumi.Input[str]:
        """
        ACI system ID (string)
        """
        return pulumi.get(self, "system_id")

    @system_id.setter
    def system_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "system_id", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        ACI token (string)
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Input[str]:
        """
        VRF name (string)
        """
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_name", value)

    @property
    @pulumi.getter(name="vrfTenant")
    def vrf_tenant(self) -> pulumi.Input[str]:
        """
        VRF tenant (string)
        """
        return pulumi.get(self, "vrf_tenant")

    @vrf_tenant.setter
    def vrf_tenant(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_tenant", value)

    @property
    @pulumi.getter(name="apicRefreshTickerAdjust")
    def apic_refresh_ticker_adjust(self) -> Optional[pulumi.Input[str]]:
        """
        APIC refresh ticker adjust amount (string)
        """
        return pulumi.get(self, "apic_refresh_ticker_adjust")

    @apic_refresh_ticker_adjust.setter
    def apic_refresh_ticker_adjust(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apic_refresh_ticker_adjust", value)

    @property
    @pulumi.getter(name="apicRefreshTime")
    def apic_refresh_time(self) -> Optional[pulumi.Input[str]]:
        """
        APIC refresh time in seconds (string)
        """
        return pulumi.get(self, "apic_refresh_time")

    @apic_refresh_time.setter
    def apic_refresh_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apic_refresh_time", value)

    @property
    @pulumi.getter(name="apicSubscriptionDelay")
    def apic_subscription_delay(self) -> Optional[pulumi.Input[str]]:
        """
        APIC subscription delay amount (string)
        """
        return pulumi.get(self, "apic_subscription_delay")

    @apic_subscription_delay.setter
    def apic_subscription_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apic_subscription_delay", value)

    @property
    @pulumi.getter
    def capic(self) -> Optional[pulumi.Input[str]]:
        """
        cAPIC cloud (string)
        """
        return pulumi.get(self, "capic")

    @capic.setter
    def capic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capic", value)

    @property
    @pulumi.getter(name="controllerLogLevel")
    def controller_log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Log level for ACI controller (string)
        """
        return pulumi.get(self, "controller_log_level")

    @controller_log_level.setter
    def controller_log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_log_level", value)

    @property
    @pulumi.getter(name="disablePeriodicSnatGlobalInfoSync")
    def disable_periodic_snat_global_info_sync(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to disable periodic SNAT global info sync (string)
        """
        return pulumi.get(self, "disable_periodic_snat_global_info_sync")

    @disable_periodic_snat_global_info_sync.setter
    def disable_periodic_snat_global_info_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_periodic_snat_global_info_sync", value)

    @property
    @pulumi.getter(name="disableWaitForNetwork")
    def disable_wait_for_network(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to disable waiting for network (string)
        """
        return pulumi.get(self, "disable_wait_for_network")

    @disable_wait_for_network.setter
    def disable_wait_for_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_wait_for_network", value)

    @property
    @pulumi.getter(name="dropLogEnable")
    def drop_log_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable drop log (string)
        """
        return pulumi.get(self, "drop_log_enable")

    @drop_log_enable.setter
    def drop_log_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_log_enable", value)

    @property
    @pulumi.getter(name="durationWaitForNetwork")
    def duration_wait_for_network(self) -> Optional[pulumi.Input[str]]:
        """
        The duration to wait for network (string)
        """
        return pulumi.get(self, "duration_wait_for_network")

    @duration_wait_for_network.setter
    def duration_wait_for_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration_wait_for_network", value)

    @property
    @pulumi.getter(name="enableEndpointSlice")
    def enable_endpoint_slice(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable endpoint slices (string)
        """
        return pulumi.get(self, "enable_endpoint_slice")

    @enable_endpoint_slice.setter
    def enable_endpoint_slice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_endpoint_slice", value)

    @property
    @pulumi.getter(name="epRegistry")
    def ep_registry(self) -> Optional[pulumi.Input[str]]:
        """
        EP registry (string)
        """
        return pulumi.get(self, "ep_registry")

    @ep_registry.setter
    def ep_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ep_registry", value)

    @property
    @pulumi.getter(name="gbpPodSubnet")
    def gbp_pod_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        GBH pod subnet (string)
        """
        return pulumi.get(self, "gbp_pod_subnet")

    @gbp_pod_subnet.setter
    def gbp_pod_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gbp_pod_subnet", value)

    @property
    @pulumi.getter(name="hostAgentLogLevel")
    def host_agent_log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Log level for ACI host agent (string)
        """
        return pulumi.get(self, "host_agent_log_level")

    @host_agent_log_level.setter
    def host_agent_log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_agent_log_level", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Image pull policy (string)
        """
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Image pull policy (string)
        """
        return pulumi.get(self, "image_pull_secret")

    @image_pull_secret.setter
    def image_pull_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_secret", value)

    @property
    @pulumi.getter(name="infraVlan")
    def infra_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        The VLAN used by ACI infra (string)
        """
        return pulumi.get(self, "infra_vlan")

    @infra_vlan.setter
    def infra_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infra_vlan", value)

    @property
    @pulumi.getter(name="installIstio")
    def install_istio(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to install Istio (string)
        """
        return pulumi.get(self, "install_istio")

    @install_istio.setter
    def install_istio(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "install_istio", value)

    @property
    @pulumi.getter(name="istioProfile")
    def istio_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Istio profile name (string)
        """
        return pulumi.get(self, "istio_profile")

    @istio_profile.setter
    def istio_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_profile", value)

    @property
    @pulumi.getter(name="kafkaBrokers")
    def kafka_brokers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Kafka broker hosts (list)
        """
        return pulumi.get(self, "kafka_brokers")

    @kafka_brokers.setter
    def kafka_brokers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kafka_brokers", value)

    @property
    @pulumi.getter(name="kafkaClientCrt")
    def kafka_client_crt(self) -> Optional[pulumi.Input[str]]:
        """
        Kafka client certificate (string)
        """
        return pulumi.get(self, "kafka_client_crt")

    @kafka_client_crt.setter
    def kafka_client_crt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_client_crt", value)

    @property
    @pulumi.getter(name="kafkaClientKey")
    def kafka_client_key(self) -> Optional[pulumi.Input[str]]:
        """
        Kafka client key (string)
        """
        return pulumi.get(self, "kafka_client_key")

    @kafka_client_key.setter
    def kafka_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_client_key", value)

    @property
    @pulumi.getter(name="maxNodesSvcGraph")
    def max_nodes_svc_graph(self) -> Optional[pulumi.Input[str]]:
        """
        Max nodes in service graph (string)
        """
        return pulumi.get(self, "max_nodes_svc_graph")

    @max_nodes_svc_graph.setter
    def max_nodes_svc_graph(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_nodes_svc_graph", value)

    @property
    @pulumi.getter(name="mtuHeadRoom")
    def mtu_head_room(self) -> Optional[pulumi.Input[str]]:
        """
        MTU head room amount (string)
        """
        return pulumi.get(self, "mtu_head_room")

    @mtu_head_room.setter
    def mtu_head_room(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_head_room", value)

    @property
    @pulumi.getter(name="multusDisable")
    def multus_disable(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to disable Multus (string)
        """
        return pulumi.get(self, "multus_disable")

    @multus_disable.setter
    def multus_disable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multus_disable", value)

    @property
    @pulumi.getter(name="noPriorityClass")
    def no_priority_class(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to use priority class (string)
        """
        return pulumi.get(self, "no_priority_class")

    @no_priority_class.setter
    def no_priority_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_priority_class", value)

    @property
    @pulumi.getter(name="nodePodIfEnable")
    def node_pod_if_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable node pod interface (string)
        """
        return pulumi.get(self, "node_pod_if_enable")

    @node_pod_if_enable.setter
    def node_pod_if_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pod_if_enable", value)

    @property
    @pulumi.getter(name="opflexClientSsl")
    def opflex_client_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to use client SSL for Opflex (string)
        """
        return pulumi.get(self, "opflex_client_ssl")

    @opflex_client_ssl.setter
    def opflex_client_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_client_ssl", value)

    @property
    @pulumi.getter(name="opflexDeviceDeleteTimeout")
    def opflex_device_delete_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Opflex device delete timeout (string)
        """
        return pulumi.get(self, "opflex_device_delete_timeout")

    @opflex_device_delete_timeout.setter
    def opflex_device_delete_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_device_delete_timeout", value)

    @property
    @pulumi.getter(name="opflexLogLevel")
    def opflex_log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Log level for ACI opflex (string)
        """
        return pulumi.get(self, "opflex_log_level")

    @opflex_log_level.setter
    def opflex_log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_log_level", value)

    @property
    @pulumi.getter(name="opflexMode")
    def opflex_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Opflex mode (string)
        """
        return pulumi.get(self, "opflex_mode")

    @opflex_mode.setter
    def opflex_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_mode", value)

    @property
    @pulumi.getter(name="opflexServerPort")
    def opflex_server_port(self) -> Optional[pulumi.Input[str]]:
        """
        Opflex server port (string)
        """
        return pulumi.get(self, "opflex_server_port")

    @opflex_server_port.setter
    def opflex_server_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_server_port", value)

    @property
    @pulumi.getter(name="overlayVrfName")
    def overlay_vrf_name(self) -> Optional[pulumi.Input[str]]:
        """
        Overlay VRF name (string)
        """
        return pulumi.get(self, "overlay_vrf_name")

    @overlay_vrf_name.setter
    def overlay_vrf_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_vrf_name", value)

    @property
    @pulumi.getter(name="ovsMemoryLimit")
    def ovs_memory_limit(self) -> Optional[pulumi.Input[str]]:
        """
        OVS memory limit (string)
        """
        return pulumi.get(self, "ovs_memory_limit")

    @ovs_memory_limit.setter
    def ovs_memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovs_memory_limit", value)

    @property
    @pulumi.getter(name="pbrTrackingNonSnat")
    def pbr_tracking_non_snat(self) -> Optional[pulumi.Input[str]]:
        """
        Policy-based routing tracking non snat (string)
        """
        return pulumi.get(self, "pbr_tracking_non_snat")

    @pbr_tracking_non_snat.setter
    def pbr_tracking_non_snat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pbr_tracking_non_snat", value)

    @property
    @pulumi.getter(name="podSubnetChunkSize")
    def pod_subnet_chunk_size(self) -> Optional[pulumi.Input[str]]:
        """
        Pod subnet chunk size (string)
        """
        return pulumi.get(self, "pod_subnet_chunk_size")

    @pod_subnet_chunk_size.setter
    def pod_subnet_chunk_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_subnet_chunk_size", value)

    @property
    @pulumi.getter(name="runGbpContainer")
    def run_gbp_container(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run GBP container (string)
        """
        return pulumi.get(self, "run_gbp_container")

    @run_gbp_container.setter
    def run_gbp_container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_gbp_container", value)

    @property
    @pulumi.getter(name="runOpflexServerContainer")
    def run_opflex_server_container(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to run Opflex server container (string)
        """
        return pulumi.get(self, "run_opflex_server_container")

    @run_opflex_server_container.setter
    def run_opflex_server_container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_opflex_server_container", value)

    @property
    @pulumi.getter(name="serviceMonitorInterval")
    def service_monitor_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Service monitor interval (string)
        """
        return pulumi.get(self, "service_monitor_interval")

    @service_monitor_interval.setter
    def service_monitor_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_monitor_interval", value)

    @property
    @pulumi.getter(name="snatContractScope")
    def snat_contract_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Snat contract scope (string)
        """
        return pulumi.get(self, "snat_contract_scope")

    @snat_contract_scope.setter
    def snat_contract_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_contract_scope", value)

    @property
    @pulumi.getter(name="snatNamespace")
    def snat_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Snat namespace (string)
        """
        return pulumi.get(self, "snat_namespace")

    @snat_namespace.setter
    def snat_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_namespace", value)

    @property
    @pulumi.getter(name="snatPortRangeEnd")
    def snat_port_range_end(self) -> Optional[pulumi.Input[str]]:
        """
        End of snat port range (string)
        """
        return pulumi.get(self, "snat_port_range_end")

    @snat_port_range_end.setter
    def snat_port_range_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_port_range_end", value)

    @property
    @pulumi.getter(name="snatPortRangeStart")
    def snat_port_range_start(self) -> Optional[pulumi.Input[str]]:
        """
        End of snat port range (string)
        """
        return pulumi.get(self, "snat_port_range_start")

    @snat_port_range_start.setter
    def snat_port_range_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_port_range_start", value)

    @property
    @pulumi.getter(name="snatPortsPerNode")
    def snat_ports_per_node(self) -> Optional[pulumi.Input[str]]:
        """
        Snat ports per node (string)
        """
        return pulumi.get(self, "snat_ports_per_node")

    @snat_ports_per_node.setter
    def snat_ports_per_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_ports_per_node", value)

    @property
    @pulumi.getter(name="sriovEnable")
    def sriov_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable SR-IOV (string)
        """
        return pulumi.get(self, "sriov_enable")

    @sriov_enable.setter
    def sriov_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sriov_enable", value)

    @property
    @pulumi.getter(name="subnetDomainName")
    def subnet_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet domain name (string)
        """
        return pulumi.get(self, "subnet_domain_name")

    @subnet_domain_name.setter
    def subnet_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_domain_name", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        ACI tenant (string)
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter(name="useAciAnywhereCrd")
    def use_aci_anywhere_crd(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to use ACI anywhere CRD (string)
        """
        return pulumi.get(self, "use_aci_anywhere_crd")

    @use_aci_anywhere_crd.setter
    def use_aci_anywhere_crd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_aci_anywhere_crd", value)

    @property
    @pulumi.getter(name="useAciCniPriorityClass")
    def use_aci_cni_priority_class(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to use ACI CNI priority class (string)
        """
        return pulumi.get(self, "use_aci_cni_priority_class")

    @use_aci_cni_priority_class.setter
    def use_aci_cni_priority_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_aci_cni_priority_class", value)

    @property
    @pulumi.getter(name="useClusterRole")
    def use_cluster_role(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to use cluster role (string)
        """
        return pulumi.get(self, "use_cluster_role")

    @use_cluster_role.setter
    def use_cluster_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_cluster_role", value)

    @property
    @pulumi.getter(name="useHostNetnsVolume")
    def use_host_netns_volume(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to use host netns volume (string)
        """
        return pulumi.get(self, "use_host_netns_volume")

    @use_host_netns_volume.setter
    def use_host_netns_volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_host_netns_volume", value)

    @property
    @pulumi.getter(name="useOpflexServerVolume")
    def use_opflex_server_volume(self) -> Optional[pulumi.Input[str]]:
        """
        Whether use Opflex server volume (string)
        """
        return pulumi.get(self, "use_opflex_server_volume")

    @use_opflex_server_volume.setter
    def use_opflex_server_volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_opflex_server_volume", value)

    @property
    @pulumi.getter(name="usePrivilegedContainer")
    def use_privileged_container(self) -> Optional[pulumi.Input[str]]:
        """
        Whether ACI containers should run as privileged (string)
        """
        return pulumi.get(self, "use_privileged_container")

    @use_privileged_container.setter
    def use_privileged_container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_privileged_container", value)

    @property
    @pulumi.getter(name="vmmController")
    def vmm_controller(self) -> Optional[pulumi.Input[str]]:
        """
        VMM controller configuration (string)
        """
        return pulumi.get(self, "vmm_controller")

    @vmm_controller.setter
    def vmm_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmm_controller", value)

    @property
    @pulumi.getter(name="vmmDomain")
    def vmm_domain(self) -> Optional[pulumi.Input[str]]:
        """
        VMM domain configuration (string)
        """
        return pulumi.get(self, "vmm_domain")

    @vmm_domain.setter
    def vmm_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmm_domain", value)


@pulumi.input_type
class ClusterRkeConfigNetworkCalicoNetworkProviderArgs:
    def __init__(__self__, *,
                 cloud_provider: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cloud_provider: RKE options for Calico network provider (string)
        """
        ClusterRkeConfigNetworkCalicoNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_provider=cloud_provider,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_provider: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudProvider' in kwargs:
            cloud_provider = kwargs['cloudProvider']

        if cloud_provider is not None:
            _setter("cloud_provider", cloud_provider)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        RKE options for Calico network provider (string)
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)


@pulumi.input_type
class ClusterRkeConfigNetworkCanalNetworkProviderArgs:
    def __init__(__self__, *,
                 iface: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] iface: Iface config Flannel network provider (string)
        """
        ClusterRkeConfigNetworkCanalNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            iface=iface,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             iface: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if iface is not None:
            _setter("iface", iface)

    @property
    @pulumi.getter
    def iface(self) -> Optional[pulumi.Input[str]]:
        """
        Iface config Flannel network provider (string)
        """
        return pulumi.get(self, "iface")

    @iface.setter
    def iface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iface", value)


@pulumi.input_type
class ClusterRkeConfigNetworkFlannelNetworkProviderArgs:
    def __init__(__self__, *,
                 iface: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] iface: Iface config Flannel network provider (string)
        """
        ClusterRkeConfigNetworkFlannelNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            iface=iface,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             iface: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if iface is not None:
            _setter("iface", iface)

    @property
    @pulumi.getter
    def iface(self) -> Optional[pulumi.Input[str]]:
        """
        Iface config Flannel network provider (string)
        """
        return pulumi.get(self, "iface")

    @iface.setter
    def iface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iface", value)


@pulumi.input_type
class ClusterRkeConfigNetworkTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: The GKE taint key (string)
        :param pulumi.Input[str] effect: The GKE taint effect (string)
        :param pulumi.Input[str] operator: The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        :param pulumi.Input[int] seconds: The toleration seconds (int)
        :param pulumi.Input[str] value: The GKE taint value (string)
        """
        ClusterRkeConfigNetworkTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The GKE taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint effect (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        The toleration operator. `Equal`, and `Exists` are supported. Default: `Equal` (string)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The toleration seconds (int)
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterRkeConfigNetworkWeaveNetworkProviderArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: Registry password (string)
        """
        ClusterRkeConfigNetworkWeaveNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Registry password (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class ClusterRkeConfigNodeArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 user: pulumi.Input[str],
                 docker_socket: Optional[pulumi.Input[str]] = None,
                 hostname_override: Optional[pulumi.Input[str]] = None,
                 internal_address: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 node_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
                 ssh_key: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Address ip for node (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles for the node. `controlplane`, `etcd` and `worker` are supported. (list)
        :param pulumi.Input[str] user: Registry user (string)
        :param pulumi.Input[str] docker_socket: Docker socket for node (string)
        :param pulumi.Input[str] hostname_override: Hostname override for node (string)
        :param pulumi.Input[str] internal_address: Internal ip for node (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the Cluster (map)
        :param pulumi.Input[str] node_id: Id for the node (string)
        :param pulumi.Input[str] port: Port for node. Default `22` (string)
        :param pulumi.Input[bool] ssh_agent_auth: Use ssh agent auth. Default `false` (bool)
        :param pulumi.Input[str] ssh_key: Node SSH private key (string)
        :param pulumi.Input[str] ssh_key_path: Node SSH private key path (string)
        """
        ClusterRkeConfigNodeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            roles=roles,
            user=user,
            docker_socket=docker_socket,
            hostname_override=hostname_override,
            internal_address=internal_address,
            labels=labels,
            node_id=node_id,
            port=port,
            ssh_agent_auth=ssh_agent_auth,
            ssh_key=ssh_key,
            ssh_key_path=ssh_key_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: pulumi.Input[str],
             roles: pulumi.Input[Sequence[pulumi.Input[str]]],
             user: pulumi.Input[str],
             docker_socket: Optional[pulumi.Input[str]] = None,
             hostname_override: Optional[pulumi.Input[str]] = None,
             internal_address: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             node_id: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[str]] = None,
             ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
             ssh_key: Optional[pulumi.Input[str]] = None,
             ssh_key_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dockerSocket' in kwargs:
            docker_socket = kwargs['dockerSocket']
        if 'hostnameOverride' in kwargs:
            hostname_override = kwargs['hostnameOverride']
        if 'internalAddress' in kwargs:
            internal_address = kwargs['internalAddress']
        if 'nodeId' in kwargs:
            node_id = kwargs['nodeId']
        if 'sshAgentAuth' in kwargs:
            ssh_agent_auth = kwargs['sshAgentAuth']
        if 'sshKey' in kwargs:
            ssh_key = kwargs['sshKey']
        if 'sshKeyPath' in kwargs:
            ssh_key_path = kwargs['sshKeyPath']

        _setter("address", address)
        _setter("roles", roles)
        _setter("user", user)
        if docker_socket is not None:
            _setter("docker_socket", docker_socket)
        if hostname_override is not None:
            _setter("hostname_override", hostname_override)
        if internal_address is not None:
            _setter("internal_address", internal_address)
        if labels is not None:
            _setter("labels", labels)
        if node_id is not None:
            _setter("node_id", node_id)
        if port is not None:
            _setter("port", port)
        if ssh_agent_auth is not None:
            _setter("ssh_agent_auth", ssh_agent_auth)
        if ssh_key is not None:
            _setter("ssh_key", ssh_key)
        if ssh_key_path is not None:
            _setter("ssh_key_path", ssh_key_path)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        Address ip for node (string)
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Roles for the node. `controlplane`, `etcd` and `worker` are supported. (list)
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        Registry user (string)
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="dockerSocket")
    def docker_socket(self) -> Optional[pulumi.Input[str]]:
        """
        Docker socket for node (string)
        """
        return pulumi.get(self, "docker_socket")

    @docker_socket.setter
    def docker_socket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_socket", value)

    @property
    @pulumi.getter(name="hostnameOverride")
    def hostname_override(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname override for node (string)
        """
        return pulumi.get(self, "hostname_override")

    @hostname_override.setter
    def hostname_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname_override", value)

    @property
    @pulumi.getter(name="internalAddress")
    def internal_address(self) -> Optional[pulumi.Input[str]]:
        """
        Internal ip for node (string)
        """
        return pulumi.get(self, "internal_address")

    @internal_address.setter
    def internal_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_address", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the Cluster (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id for the node (string)
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port for node. Default `22` (string)
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshAgentAuth")
    def ssh_agent_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Use ssh agent auth. Default `false` (bool)
        """
        return pulumi.get(self, "ssh_agent_auth")

    @ssh_agent_auth.setter
    def ssh_agent_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssh_agent_auth", value)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional[pulumi.Input[str]]:
        """
        Node SSH private key (string)
        """
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> Optional[pulumi.Input[str]]:
        """
        Node SSH private key path (string)
        """
        return pulumi.get(self, "ssh_key_path")

    @ssh_key_path.setter
    def ssh_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_path", value)


@pulumi.input_type
class ClusterRkeConfigPrivateRegistryArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 ecr_credential_plugin: Optional[pulumi.Input['ClusterRkeConfigPrivateRegistryEcrCredentialPluginArgs']] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: Registry URL (string)
        :param pulumi.Input['ClusterRkeConfigPrivateRegistryEcrCredentialPluginArgs'] ecr_credential_plugin: ECR credential plugin config (list maxitems:1)
        :param pulumi.Input[bool] is_default: Set as default registry. Default `false` (bool)
        :param pulumi.Input[str] password: Registry password (string)
        :param pulumi.Input[str] user: Registry user (string)
        """
        ClusterRkeConfigPrivateRegistryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            ecr_credential_plugin=ecr_credential_plugin,
            is_default=is_default,
            password=password,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: pulumi.Input[str],
             ecr_credential_plugin: Optional[pulumi.Input['ClusterRkeConfigPrivateRegistryEcrCredentialPluginArgs']] = None,
             is_default: Optional[pulumi.Input[bool]] = None,
             password: Optional[pulumi.Input[str]] = None,
             user: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ecrCredentialPlugin' in kwargs:
            ecr_credential_plugin = kwargs['ecrCredentialPlugin']
        if 'isDefault' in kwargs:
            is_default = kwargs['isDefault']

        _setter("url", url)
        if ecr_credential_plugin is not None:
            _setter("ecr_credential_plugin", ecr_credential_plugin)
        if is_default is not None:
            _setter("is_default", is_default)
        if password is not None:
            _setter("password", password)
        if user is not None:
            _setter("user", user)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Registry URL (string)
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="ecrCredentialPlugin")
    def ecr_credential_plugin(self) -> Optional[pulumi.Input['ClusterRkeConfigPrivateRegistryEcrCredentialPluginArgs']]:
        """
        ECR credential plugin config (list maxitems:1)
        """
        return pulumi.get(self, "ecr_credential_plugin")

    @ecr_credential_plugin.setter
    def ecr_credential_plugin(self, value: Optional[pulumi.Input['ClusterRkeConfigPrivateRegistryEcrCredentialPluginArgs']]):
        pulumi.set(self, "ecr_credential_plugin", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Set as default registry. Default `false` (bool)
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Registry password (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Registry user (string)
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterRkeConfigPrivateRegistryEcrCredentialPluginArgs:
    def __init__(__self__, *,
                 aws_access_key_id: Optional[pulumi.Input[str]] = None,
                 aws_secret_access_key: Optional[pulumi.Input[str]] = None,
                 aws_session_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aws_access_key_id: AWS access key ID (string)
        :param pulumi.Input[str] aws_secret_access_key: AWS secret access key (string)
        :param pulumi.Input[str] aws_session_token: AWS session token (string)
        """
        ClusterRkeConfigPrivateRegistryEcrCredentialPluginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_access_key_id=aws_access_key_id,
            aws_secret_access_key=aws_secret_access_key,
            aws_session_token=aws_session_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_access_key_id: Optional[pulumi.Input[str]] = None,
             aws_secret_access_key: Optional[pulumi.Input[str]] = None,
             aws_session_token: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awsAccessKeyId' in kwargs:
            aws_access_key_id = kwargs['awsAccessKeyId']
        if 'awsSecretAccessKey' in kwargs:
            aws_secret_access_key = kwargs['awsSecretAccessKey']
        if 'awsSessionToken' in kwargs:
            aws_session_token = kwargs['awsSessionToken']

        if aws_access_key_id is not None:
            _setter("aws_access_key_id", aws_access_key_id)
        if aws_secret_access_key is not None:
            _setter("aws_secret_access_key", aws_secret_access_key)
        if aws_session_token is not None:
            _setter("aws_session_token", aws_session_token)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS access key ID (string)
        """
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[pulumi.Input[str]]:
        """
        AWS secret access key (string)
        """
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_secret_access_key", value)

    @property
    @pulumi.getter(name="awsSessionToken")
    def aws_session_token(self) -> Optional[pulumi.Input[str]]:
        """
        AWS session token (string)
        """
        return pulumi.get(self, "aws_session_token")

    @aws_session_token.setter
    def aws_session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_session_token", value)


@pulumi.input_type
class ClusterRkeConfigServicesArgs:
    def __init__(__self__, *,
                 etcd: Optional[pulumi.Input['ClusterRkeConfigServicesEtcdArgs']] = None,
                 kube_api: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiArgs']] = None,
                 kube_controller: Optional[pulumi.Input['ClusterRkeConfigServicesKubeControllerArgs']] = None,
                 kubelet: Optional[pulumi.Input['ClusterRkeConfigServicesKubeletArgs']] = None,
                 kubeproxy: Optional[pulumi.Input['ClusterRkeConfigServicesKubeproxyArgs']] = None,
                 scheduler: Optional[pulumi.Input['ClusterRkeConfigServicesSchedulerArgs']] = None):
        """
        :param pulumi.Input['ClusterRkeConfigServicesEtcdArgs'] etcd: Etcd options for RKE services (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigServicesKubeApiArgs'] kube_api: Kube API options for RKE services (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigServicesKubeControllerArgs'] kube_controller: Kube Controller options for RKE services (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigServicesKubeletArgs'] kubelet: Kubelet options for RKE services (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigServicesKubeproxyArgs'] kubeproxy: Kubeproxy options for RKE services (list maxitems:1)
        :param pulumi.Input['ClusterRkeConfigServicesSchedulerArgs'] scheduler: Scheduler options for RKE services (list maxitems:1)
        """
        ClusterRkeConfigServicesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            etcd=etcd,
            kube_api=kube_api,
            kube_controller=kube_controller,
            kubelet=kubelet,
            kubeproxy=kubeproxy,
            scheduler=scheduler,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             etcd: Optional[pulumi.Input['ClusterRkeConfigServicesEtcdArgs']] = None,
             kube_api: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiArgs']] = None,
             kube_controller: Optional[pulumi.Input['ClusterRkeConfigServicesKubeControllerArgs']] = None,
             kubelet: Optional[pulumi.Input['ClusterRkeConfigServicesKubeletArgs']] = None,
             kubeproxy: Optional[pulumi.Input['ClusterRkeConfigServicesKubeproxyArgs']] = None,
             scheduler: Optional[pulumi.Input['ClusterRkeConfigServicesSchedulerArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'kubeApi' in kwargs:
            kube_api = kwargs['kubeApi']
        if 'kubeController' in kwargs:
            kube_controller = kwargs['kubeController']

        if etcd is not None:
            _setter("etcd", etcd)
        if kube_api is not None:
            _setter("kube_api", kube_api)
        if kube_controller is not None:
            _setter("kube_controller", kube_controller)
        if kubelet is not None:
            _setter("kubelet", kubelet)
        if kubeproxy is not None:
            _setter("kubeproxy", kubeproxy)
        if scheduler is not None:
            _setter("scheduler", scheduler)

    @property
    @pulumi.getter
    def etcd(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesEtcdArgs']]:
        """
        Etcd options for RKE services (list maxitems:1)
        """
        return pulumi.get(self, "etcd")

    @etcd.setter
    def etcd(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesEtcdArgs']]):
        pulumi.set(self, "etcd", value)

    @property
    @pulumi.getter(name="kubeApi")
    def kube_api(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiArgs']]:
        """
        Kube API options for RKE services (list maxitems:1)
        """
        return pulumi.get(self, "kube_api")

    @kube_api.setter
    def kube_api(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiArgs']]):
        pulumi.set(self, "kube_api", value)

    @property
    @pulumi.getter(name="kubeController")
    def kube_controller(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesKubeControllerArgs']]:
        """
        Kube Controller options for RKE services (list maxitems:1)
        """
        return pulumi.get(self, "kube_controller")

    @kube_controller.setter
    def kube_controller(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesKubeControllerArgs']]):
        pulumi.set(self, "kube_controller", value)

    @property
    @pulumi.getter
    def kubelet(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesKubeletArgs']]:
        """
        Kubelet options for RKE services (list maxitems:1)
        """
        return pulumi.get(self, "kubelet")

    @kubelet.setter
    def kubelet(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesKubeletArgs']]):
        pulumi.set(self, "kubelet", value)

    @property
    @pulumi.getter
    def kubeproxy(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesKubeproxyArgs']]:
        """
        Kubeproxy options for RKE services (list maxitems:1)
        """
        return pulumi.get(self, "kubeproxy")

    @kubeproxy.setter
    def kubeproxy(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesKubeproxyArgs']]):
        pulumi.set(self, "kubeproxy", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesSchedulerArgs']]:
        """
        Scheduler options for RKE services (list maxitems:1)
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesSchedulerArgs']]):
        pulumi.set(self, "scheduler", value)


@pulumi.input_type
class ClusterRkeConfigServicesEtcdArgs:
    def __init__(__self__, *,
                 backup_config: Optional[pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigArgs']] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 creation: Optional[pulumi.Input[str]] = None,
                 external_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gid: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 retention: Optional[pulumi.Input[str]] = None,
                 snapshot: Optional[pulumi.Input[bool]] = None,
                 uid: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigArgs'] backup_config: Backup options for etcd service. For Rancher v2.2.x (list maxitems:1)
        :param pulumi.Input[str] ca_cert: TLS CA certificate for etcd service (string)
        :param pulumi.Input[str] cert: TLS certificate for etcd service (string)
        :param pulumi.Input[str] creation: Creation option for etcd service (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] external_urls: External urls for etcd service (list)
        :param pulumi.Input[Mapping[str, Any]] extra_args: Extra arguments for scheduler service (map)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_binds: Extra binds for scheduler service (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_envs: Extra environment for scheduler service (list)
        :param pulumi.Input[int] gid: Etcd service GID. Default: `0`. For Rancher v2.3.x and above (int)
        :param pulumi.Input[str] image: Docker image for scheduler service (string)
        :param pulumi.Input[str] key: The GKE taint key (string)
        :param pulumi.Input[str] path: (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        :param pulumi.Input[str] retention: Retention for etcd backup. Default `6` (int)
        :param pulumi.Input[bool] snapshot: Snapshot option for etcd service (bool)
        :param pulumi.Input[int] uid: Etcd service UID. Default: `0`. For Rancher v2.3.x and above (int)
        """
        ClusterRkeConfigServicesEtcdArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backup_config=backup_config,
            ca_cert=ca_cert,
            cert=cert,
            creation=creation,
            external_urls=external_urls,
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            gid=gid,
            image=image,
            key=key,
            path=path,
            retention=retention,
            snapshot=snapshot,
            uid=uid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backup_config: Optional[pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigArgs']] = None,
             ca_cert: Optional[pulumi.Input[str]] = None,
             cert: Optional[pulumi.Input[str]] = None,
             creation: Optional[pulumi.Input[str]] = None,
             external_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             gid: Optional[pulumi.Input[int]] = None,
             image: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             retention: Optional[pulumi.Input[str]] = None,
             snapshot: Optional[pulumi.Input[bool]] = None,
             uid: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'backupConfig' in kwargs:
            backup_config = kwargs['backupConfig']
        if 'caCert' in kwargs:
            ca_cert = kwargs['caCert']
        if 'externalUrls' in kwargs:
            external_urls = kwargs['externalUrls']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']

        if backup_config is not None:
            _setter("backup_config", backup_config)
        if ca_cert is not None:
            _setter("ca_cert", ca_cert)
        if cert is not None:
            _setter("cert", cert)
        if creation is not None:
            _setter("creation", creation)
        if external_urls is not None:
            _setter("external_urls", external_urls)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if gid is not None:
            _setter("gid", gid)
        if image is not None:
            _setter("image", image)
        if key is not None:
            _setter("key", key)
        if path is not None:
            _setter("path", path)
        if retention is not None:
            _setter("retention", retention)
        if snapshot is not None:
            _setter("snapshot", snapshot)
        if uid is not None:
            _setter("uid", uid)

    @property
    @pulumi.getter(name="backupConfig")
    def backup_config(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigArgs']]:
        """
        Backup options for etcd service. For Rancher v2.2.x (list maxitems:1)
        """
        return pulumi.get(self, "backup_config")

    @backup_config.setter
    def backup_config(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigArgs']]):
        pulumi.set(self, "backup_config", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        TLS CA certificate for etcd service (string)
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        TLS certificate for etcd service (string)
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def creation(self) -> Optional[pulumi.Input[str]]:
        """
        Creation option for etcd service (string)
        """
        return pulumi.get(self, "creation")

    @creation.setter
    def creation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation", value)

    @property
    @pulumi.getter(name="externalUrls")
    def external_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        External urls for etcd service (list)
        """
        return pulumi.get(self, "external_urls")

    @external_urls.setter
    def external_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_urls", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Extra arguments for scheduler service (map)
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra binds for scheduler service (list)
        """
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra environment for scheduler service (list)
        """
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def gid(self) -> Optional[pulumi.Input[int]]:
        """
        Etcd service GID. Default: `0`. For Rancher v2.3.x and above (int)
        """
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gid", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image for scheduler service (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The GKE taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input[str]]:
        """
        Retention for etcd backup. Default `6` (int)
        """
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter
    def snapshot(self) -> Optional[pulumi.Input[bool]]:
        """
        Snapshot option for etcd service (bool)
        """
        return pulumi.get(self, "snapshot")

    @snapshot.setter
    def snapshot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snapshot", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[int]]:
        """
        Etcd service UID. Default: `0`. For Rancher v2.3.x and above (int)
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ClusterRkeConfigServicesEtcdBackupConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 interval_hours: Optional[pulumi.Input[int]] = None,
                 retention: Optional[pulumi.Input[int]] = None,
                 s3_backup_config: Optional[pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs']] = None,
                 safe_timestamp: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable the authorized cluster endpoint. Default `true` (bool)
        :param pulumi.Input[int] interval_hours: Interval hours for etcd backup. Default `12` (int)
        :param pulumi.Input[int] retention: Retention for etcd backup. Default `6` (int)
        :param pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs'] s3_backup_config: S3 config options for etcd backup (list maxitems:1)
        :param pulumi.Input[bool] safe_timestamp: Safe timestamp for etcd backup. Default: `false` (bool)
        :param pulumi.Input[int] timeout: RKE node drain timeout. Default: `60` (int)
        """
        ClusterRkeConfigServicesEtcdBackupConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            interval_hours=interval_hours,
            retention=retention,
            s3_backup_config=s3_backup_config,
            safe_timestamp=safe_timestamp,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             interval_hours: Optional[pulumi.Input[int]] = None,
             retention: Optional[pulumi.Input[int]] = None,
             s3_backup_config: Optional[pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs']] = None,
             safe_timestamp: Optional[pulumi.Input[bool]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'intervalHours' in kwargs:
            interval_hours = kwargs['intervalHours']
        if 's3BackupConfig' in kwargs:
            s3_backup_config = kwargs['s3BackupConfig']
        if 'safeTimestamp' in kwargs:
            safe_timestamp = kwargs['safeTimestamp']

        if enabled is not None:
            _setter("enabled", enabled)
        if interval_hours is not None:
            _setter("interval_hours", interval_hours)
        if retention is not None:
            _setter("retention", retention)
        if s3_backup_config is not None:
            _setter("s3_backup_config", s3_backup_config)
        if safe_timestamp is not None:
            _setter("safe_timestamp", safe_timestamp)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the authorized cluster endpoint. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="intervalHours")
    def interval_hours(self) -> Optional[pulumi.Input[int]]:
        """
        Interval hours for etcd backup. Default `12` (int)
        """
        return pulumi.get(self, "interval_hours")

    @interval_hours.setter
    def interval_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval_hours", value)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input[int]]:
        """
        Retention for etcd backup. Default `6` (int)
        """
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter(name="s3BackupConfig")
    def s3_backup_config(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs']]:
        """
        S3 config options for etcd backup (list maxitems:1)
        """
        return pulumi.get(self, "s3_backup_config")

    @s3_backup_config.setter
    def s3_backup_config(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs']]):
        pulumi.set(self, "s3_backup_config", value)

    @property
    @pulumi.getter(name="safeTimestamp")
    def safe_timestamp(self) -> Optional[pulumi.Input[bool]]:
        """
        Safe timestamp for etcd backup. Default: `false` (bool)
        """
        return pulumi.get(self, "safe_timestamp")

    @safe_timestamp.setter
    def safe_timestamp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "safe_timestamp", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        RKE node drain timeout. Default: `60` (int)
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 custom_ca: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: Bucket name for S3 service (string)
        :param pulumi.Input[str] endpoint: Endpoint for S3 service (string)
        :param pulumi.Input[str] access_key: The AWS Client ID to use (string)
        :param pulumi.Input[str] custom_ca: Base64 encoded custom CA for S3 service. Use filebase64(<FILE>) for encoding file. Available from Rancher v2.2.5 (string)
        :param pulumi.Input[str] folder: Folder for S3 service. Available from Rancher v2.2.7 (string)
        :param pulumi.Input[str] region: The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        :param pulumi.Input[str] secret_key: The AWS Client Secret associated with the Client ID (string)
        """
        ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            endpoint=endpoint,
            access_key=access_key,
            custom_ca=custom_ca,
            folder=folder,
            region=region,
            secret_key=secret_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: pulumi.Input[str],
             endpoint: pulumi.Input[str],
             access_key: Optional[pulumi.Input[str]] = None,
             custom_ca: Optional[pulumi.Input[str]] = None,
             folder: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             secret_key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bucketName' in kwargs:
            bucket_name = kwargs['bucketName']
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'customCa' in kwargs:
            custom_ca = kwargs['customCa']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']

        _setter("bucket_name", bucket_name)
        _setter("endpoint", endpoint)
        if access_key is not None:
            _setter("access_key", access_key)
        if custom_ca is not None:
            _setter("custom_ca", custom_ca)
        if folder is not None:
            _setter("folder", folder)
        if region is not None:
            _setter("region", region)
        if secret_key is not None:
            _setter("secret_key", secret_key)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        Bucket name for S3 service (string)
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        Endpoint for S3 service (string)
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Client ID to use (string)
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="customCa")
    def custom_ca(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded custom CA for S3 service. Use filebase64(<FILE>) for encoding file. Available from Rancher v2.2.5 (string)
        """
        return pulumi.get(self, "custom_ca")

    @custom_ca.setter
    def custom_ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_ca", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Folder for S3 service. Available from Rancher v2.2.7 (string)
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Client Secret associated with the Client ID (string)
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeApiArgs:
    def __init__(__self__, *,
                 admission_configuration: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationArgs']] = None,
                 always_pull_images: Optional[pulumi.Input[bool]] = None,
                 audit_log: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogArgs']] = None,
                 event_rate_limit: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiEventRateLimitArgs']] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 pod_security_policy: Optional[pulumi.Input[bool]] = None,
                 secrets_encryption_config: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs']] = None,
                 service_cluster_ip_range: Optional[pulumi.Input[str]] = None,
                 service_node_port_range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationArgs'] admission_configuration: Admission configuration (map)
        :param pulumi.Input[bool] always_pull_images: Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) Default: `false` (bool)
        :param pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogArgs'] audit_log: K8s audit log configuration. (list maxitems: 1)
        :param pulumi.Input['ClusterRkeConfigServicesKubeApiEventRateLimitArgs'] event_rate_limit: K8s event rate limit configuration. (list maxitems: 1)
        :param pulumi.Input[Mapping[str, Any]] extra_args: Extra arguments for scheduler service (map)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_binds: Extra binds for scheduler service (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_envs: Extra environment for scheduler service (list)
        :param pulumi.Input[str] image: Docker image for scheduler service (string)
        :param pulumi.Input[bool] pod_security_policy: Pod Security Policy option for kube API service. Default `false` (bool)
        :param pulumi.Input['ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs'] secrets_encryption_config: [Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)
        :param pulumi.Input[str] service_cluster_ip_range: Service Cluster ip Range option for kube controller service (string)
        :param pulumi.Input[str] service_node_port_range: Service Node Port Range option for kube API service (string)
        """
        ClusterRkeConfigServicesKubeApiArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admission_configuration=admission_configuration,
            always_pull_images=always_pull_images,
            audit_log=audit_log,
            event_rate_limit=event_rate_limit,
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            image=image,
            pod_security_policy=pod_security_policy,
            secrets_encryption_config=secrets_encryption_config,
            service_cluster_ip_range=service_cluster_ip_range,
            service_node_port_range=service_node_port_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admission_configuration: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationArgs']] = None,
             always_pull_images: Optional[pulumi.Input[bool]] = None,
             audit_log: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogArgs']] = None,
             event_rate_limit: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiEventRateLimitArgs']] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             pod_security_policy: Optional[pulumi.Input[bool]] = None,
             secrets_encryption_config: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs']] = None,
             service_cluster_ip_range: Optional[pulumi.Input[str]] = None,
             service_node_port_range: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'admissionConfiguration' in kwargs:
            admission_configuration = kwargs['admissionConfiguration']
        if 'alwaysPullImages' in kwargs:
            always_pull_images = kwargs['alwaysPullImages']
        if 'auditLog' in kwargs:
            audit_log = kwargs['auditLog']
        if 'eventRateLimit' in kwargs:
            event_rate_limit = kwargs['eventRateLimit']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']
        if 'podSecurityPolicy' in kwargs:
            pod_security_policy = kwargs['podSecurityPolicy']
        if 'secretsEncryptionConfig' in kwargs:
            secrets_encryption_config = kwargs['secretsEncryptionConfig']
        if 'serviceClusterIpRange' in kwargs:
            service_cluster_ip_range = kwargs['serviceClusterIpRange']
        if 'serviceNodePortRange' in kwargs:
            service_node_port_range = kwargs['serviceNodePortRange']

        if admission_configuration is not None:
            _setter("admission_configuration", admission_configuration)
        if always_pull_images is not None:
            _setter("always_pull_images", always_pull_images)
        if audit_log is not None:
            _setter("audit_log", audit_log)
        if event_rate_limit is not None:
            _setter("event_rate_limit", event_rate_limit)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if image is not None:
            _setter("image", image)
        if pod_security_policy is not None:
            _setter("pod_security_policy", pod_security_policy)
        if secrets_encryption_config is not None:
            _setter("secrets_encryption_config", secrets_encryption_config)
        if service_cluster_ip_range is not None:
            _setter("service_cluster_ip_range", service_cluster_ip_range)
        if service_node_port_range is not None:
            _setter("service_node_port_range", service_node_port_range)

    @property
    @pulumi.getter(name="admissionConfiguration")
    def admission_configuration(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationArgs']]:
        """
        Admission configuration (map)
        """
        return pulumi.get(self, "admission_configuration")

    @admission_configuration.setter
    def admission_configuration(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationArgs']]):
        pulumi.set(self, "admission_configuration", value)

    @property
    @pulumi.getter(name="alwaysPullImages")
    def always_pull_images(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) Default: `false` (bool)
        """
        return pulumi.get(self, "always_pull_images")

    @always_pull_images.setter
    def always_pull_images(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_pull_images", value)

    @property
    @pulumi.getter(name="auditLog")
    def audit_log(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogArgs']]:
        """
        K8s audit log configuration. (list maxitems: 1)
        """
        return pulumi.get(self, "audit_log")

    @audit_log.setter
    def audit_log(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogArgs']]):
        pulumi.set(self, "audit_log", value)

    @property
    @pulumi.getter(name="eventRateLimit")
    def event_rate_limit(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiEventRateLimitArgs']]:
        """
        K8s event rate limit configuration. (list maxitems: 1)
        """
        return pulumi.get(self, "event_rate_limit")

    @event_rate_limit.setter
    def event_rate_limit(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiEventRateLimitArgs']]):
        pulumi.set(self, "event_rate_limit", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Extra arguments for scheduler service (map)
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra binds for scheduler service (list)
        """
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra environment for scheduler service (list)
        """
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image for scheduler service (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="podSecurityPolicy")
    def pod_security_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Pod Security Policy option for kube API service. Default `false` (bool)
        """
        return pulumi.get(self, "pod_security_policy")

    @pod_security_policy.setter
    def pod_security_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pod_security_policy", value)

    @property
    @pulumi.getter(name="secretsEncryptionConfig")
    def secrets_encryption_config(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs']]:
        """
        [Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)
        """
        return pulumi.get(self, "secrets_encryption_config")

    @secrets_encryption_config.setter
    def secrets_encryption_config(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs']]):
        pulumi.set(self, "secrets_encryption_config", value)

    @property
    @pulumi.getter(name="serviceClusterIpRange")
    def service_cluster_ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        Service Cluster ip Range option for kube controller service (string)
        """
        return pulumi.get(self, "service_cluster_ip_range")

    @service_cluster_ip_range.setter
    def service_cluster_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cluster_ip_range", value)

    @property
    @pulumi.getter(name="serviceNodePortRange")
    def service_node_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Service Node Port Range option for kube API service (string)
        """
        return pulumi.get(self, "service_node_port_range")

    @service_node_port_range.setter
    def service_node_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_node_port_range", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeApiAdmissionConfigurationArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs']]]] = None):
        """
        :param pulumi.Input[str] api_version: Admission configuration ApiVersion. Default: `apiserver.config.k8s.io/v1` (string)
        :param pulumi.Input[str] kind: Admission configuration Kind. Default: `AdmissionConfiguration` (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs']]] plugins: Admission configuration plugins. (list `plugin`)
        """
        ClusterRkeConfigServicesKubeApiAdmissionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_version=api_version,
            kind=kind,
            plugins=plugins,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_version: Optional[pulumi.Input[str]] = None,
             kind: Optional[pulumi.Input[str]] = None,
             plugins: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiVersion' in kwargs:
            api_version = kwargs['apiVersion']

        if api_version is not None:
            _setter("api_version", api_version)
        if kind is not None:
            _setter("kind", kind)
        if plugins is not None:
            _setter("plugins", plugins)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        Admission configuration ApiVersion. Default: `apiserver.config.k8s.io/v1` (string)
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Admission configuration Kind. Default: `AdmissionConfiguration` (string)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs']]]]:
        """
        Admission configuration plugins. (list `plugin`)
        """
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs']]]]):
        pulumi.set(self, "plugins", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] configuration: Event rate limit configuration yaml encoded definition. `apiVersion` and `kind: Configuration"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string) Ex:
        :param pulumi.Input[str] name: The name of the Cluster (string)
        :param pulumi.Input[str] path: (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        """
        ClusterRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
            name=name,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if configuration is not None:
            _setter("configuration", configuration)
        if name is not None:
            _setter("name", name)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Event rate limit configuration yaml encoded definition. `apiVersion` and `kind: Configuration"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string) Ex:
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Cluster (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeApiAuditLogArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs'] configuration: Event rate limit configuration yaml encoded definition. `apiVersion` and `kind: Configuration"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string) Ex:
        :param pulumi.Input[bool] enabled: Enable the authorized cluster endpoint. Default `true` (bool)
        """
        ClusterRkeConfigServicesKubeApiAuditLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs']] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if configuration is not None:
            _setter("configuration", configuration)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs']]:
        """
        Event rate limit configuration yaml encoded definition. `apiVersion` and `kind: Configuration"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string) Ex:
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the authorized cluster endpoint. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 max_backup: Optional[pulumi.Input[int]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format: Audit log format. Default: 'json' (string)
        :param pulumi.Input[int] max_age: Audit log max age. Default: `30` (int)
        :param pulumi.Input[int] max_backup: Audit log max backup. Default: `10` (int)
        :param pulumi.Input[int] max_size: The EKS node group maximum size. Default `2` (int)
        :param pulumi.Input[str] path: (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        :param pulumi.Input[str] policy: Audit policy yaml encoded definition. `apiVersion` and `kind: Policy\\nrules:"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string) Ex:
        """
        ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format=format,
            max_age=max_age,
            max_backup=max_backup,
            max_size=max_size,
            path=path,
            policy=policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format: Optional[pulumi.Input[str]] = None,
             max_age: Optional[pulumi.Input[int]] = None,
             max_backup: Optional[pulumi.Input[int]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             path: Optional[pulumi.Input[str]] = None,
             policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxAge' in kwargs:
            max_age = kwargs['maxAge']
        if 'maxBackup' in kwargs:
            max_backup = kwargs['maxBackup']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']

        if format is not None:
            _setter("format", format)
        if max_age is not None:
            _setter("max_age", max_age)
        if max_backup is not None:
            _setter("max_backup", max_backup)
        if max_size is not None:
            _setter("max_size", max_size)
        if path is not None:
            _setter("path", path)
        if policy is not None:
            _setter("policy", policy)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Audit log format. Default: 'json' (string)
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        Audit log max age. Default: `30` (int)
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="maxBackup")
    def max_backup(self) -> Optional[pulumi.Input[int]]:
        """
        Audit log max backup. Default: `10` (int)
        """
        return pulumi.get(self, "max_backup")

    @max_backup.setter
    def max_backup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_backup", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        The EKS node group maximum size. Default `2` (int)
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        Audit policy yaml encoded definition. `apiVersion` and `kind: Policy\\nrules:"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string) Ex:
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeApiEventRateLimitArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] configuration: Event rate limit configuration yaml encoded definition. `apiVersion` and `kind: Configuration"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string) Ex:
        :param pulumi.Input[bool] enabled: Enable the authorized cluster endpoint. Default `true` (bool)
        """
        ClusterRkeConfigServicesKubeApiEventRateLimitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if configuration is not None:
            _setter("configuration", configuration)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[str]]:
        """
        Event rate limit configuration yaml encoded definition. `apiVersion` and `kind: Configuration"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/rate-limiting/) (string) Ex:
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the authorized cluster endpoint. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs:
    def __init__(__self__, *,
                 custom_config: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] custom_config: Secrets encryption yaml encoded custom configuration. `"apiVersion"` and `"kind":"EncryptionConfiguration"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/) (string) Ex:
               
               ```python
               import pulumi
               ```
        :param pulumi.Input[bool] enabled: Enable the authorized cluster endpoint. Default `true` (bool)
        """
        ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_config=custom_config,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_config: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customConfig' in kwargs:
            custom_config = kwargs['customConfig']

        if custom_config is not None:
            _setter("custom_config", custom_config)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[pulumi.Input[str]]:
        """
        Secrets encryption yaml encoded custom configuration. `"apiVersion"` and `"kind":"EncryptionConfiguration"` fields are required in the yaml. [More info](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/) (string) Ex:

        ```python
        import pulumi
        ```
        """
        return pulumi.get(self, "custom_config")

    @custom_config.setter
    def custom_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_config", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable the authorized cluster endpoint. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeControllerArgs:
    def __init__(__self__, *,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 service_cluster_ip_range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_cidr: Cluster CIDR option for kube controller service (string)
        :param pulumi.Input[Mapping[str, Any]] extra_args: Extra arguments for scheduler service (map)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_binds: Extra binds for scheduler service (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_envs: Extra environment for scheduler service (list)
        :param pulumi.Input[str] image: Docker image for scheduler service (string)
        :param pulumi.Input[str] service_cluster_ip_range: Service Cluster ip Range option for kube controller service (string)
        """
        ClusterRkeConfigServicesKubeControllerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_cidr=cluster_cidr,
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            image=image,
            service_cluster_ip_range=service_cluster_ip_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_cidr: Optional[pulumi.Input[str]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             service_cluster_ip_range: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterCidr' in kwargs:
            cluster_cidr = kwargs['clusterCidr']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']
        if 'serviceClusterIpRange' in kwargs:
            service_cluster_ip_range = kwargs['serviceClusterIpRange']

        if cluster_cidr is not None:
            _setter("cluster_cidr", cluster_cidr)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if image is not None:
            _setter("image", image)
        if service_cluster_ip_range is not None:
            _setter("service_cluster_ip_range", service_cluster_ip_range)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster CIDR option for kube controller service (string)
        """
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Extra arguments for scheduler service (map)
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra binds for scheduler service (list)
        """
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra environment for scheduler service (list)
        """
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image for scheduler service (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="serviceClusterIpRange")
    def service_cluster_ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        Service Cluster ip Range option for kube controller service (string)
        """
        return pulumi.get(self, "service_cluster_ip_range")

    @service_cluster_ip_range.setter
    def service_cluster_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cluster_ip_range", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeletArgs:
    def __init__(__self__, *,
                 cluster_dns_server: Optional[pulumi.Input[str]] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_swap_on: Optional[pulumi.Input[bool]] = None,
                 generate_serving_certificate: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 infra_container_image: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cluster_dns_server: Cluster DNS Server option for kubelet service (string)
        :param pulumi.Input[str] cluster_domain: Cluster Domain option for kubelet service (string)
        :param pulumi.Input[Mapping[str, Any]] extra_args: Extra arguments for scheduler service (map)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_binds: Extra binds for scheduler service (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_envs: Extra environment for scheduler service (list)
        :param pulumi.Input[bool] fail_swap_on: Enable or disable failing when swap on is not supported (bool)
        :param pulumi.Input[bool] generate_serving_certificate: [Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)
        :param pulumi.Input[str] image: Docker image for scheduler service (string)
        :param pulumi.Input[str] infra_container_image: Infra container image for kubelet service (string)
        """
        ClusterRkeConfigServicesKubeletArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_dns_server=cluster_dns_server,
            cluster_domain=cluster_domain,
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            fail_swap_on=fail_swap_on,
            generate_serving_certificate=generate_serving_certificate,
            image=image,
            infra_container_image=infra_container_image,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_dns_server: Optional[pulumi.Input[str]] = None,
             cluster_domain: Optional[pulumi.Input[str]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fail_swap_on: Optional[pulumi.Input[bool]] = None,
             generate_serving_certificate: Optional[pulumi.Input[bool]] = None,
             image: Optional[pulumi.Input[str]] = None,
             infra_container_image: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterDnsServer' in kwargs:
            cluster_dns_server = kwargs['clusterDnsServer']
        if 'clusterDomain' in kwargs:
            cluster_domain = kwargs['clusterDomain']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']
        if 'failSwapOn' in kwargs:
            fail_swap_on = kwargs['failSwapOn']
        if 'generateServingCertificate' in kwargs:
            generate_serving_certificate = kwargs['generateServingCertificate']
        if 'infraContainerImage' in kwargs:
            infra_container_image = kwargs['infraContainerImage']

        if cluster_dns_server is not None:
            _setter("cluster_dns_server", cluster_dns_server)
        if cluster_domain is not None:
            _setter("cluster_domain", cluster_domain)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if fail_swap_on is not None:
            _setter("fail_swap_on", fail_swap_on)
        if generate_serving_certificate is not None:
            _setter("generate_serving_certificate", generate_serving_certificate)
        if image is not None:
            _setter("image", image)
        if infra_container_image is not None:
            _setter("infra_container_image", infra_container_image)

    @property
    @pulumi.getter(name="clusterDnsServer")
    def cluster_dns_server(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster DNS Server option for kubelet service (string)
        """
        return pulumi.get(self, "cluster_dns_server")

    @cluster_dns_server.setter
    def cluster_dns_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_dns_server", value)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster Domain option for kubelet service (string)
        """
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Extra arguments for scheduler service (map)
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra binds for scheduler service (list)
        """
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra environment for scheduler service (list)
        """
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter(name="failSwapOn")
    def fail_swap_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable failing when swap on is not supported (bool)
        """
        return pulumi.get(self, "fail_swap_on")

    @fail_swap_on.setter
    def fail_swap_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_swap_on", value)

    @property
    @pulumi.getter(name="generateServingCertificate")
    def generate_serving_certificate(self) -> Optional[pulumi.Input[bool]]:
        """
        [Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)
        """
        return pulumi.get(self, "generate_serving_certificate")

    @generate_serving_certificate.setter
    def generate_serving_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "generate_serving_certificate", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image for scheduler service (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="infraContainerImage")
    def infra_container_image(self) -> Optional[pulumi.Input[str]]:
        """
        Infra container image for kubelet service (string)
        """
        return pulumi.get(self, "infra_container_image")

    @infra_container_image.setter
    def infra_container_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infra_container_image", value)


@pulumi.input_type
class ClusterRkeConfigServicesKubeproxyArgs:
    def __init__(__self__, *,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] extra_args: Extra arguments for scheduler service (map)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_binds: Extra binds for scheduler service (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_envs: Extra environment for scheduler service (list)
        :param pulumi.Input[str] image: Docker image for scheduler service (string)
        """
        ClusterRkeConfigServicesKubeproxyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            image=image,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']

        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if image is not None:
            _setter("image", image)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Extra arguments for scheduler service (map)
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra binds for scheduler service (list)
        """
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra environment for scheduler service (list)
        """
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image for scheduler service (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class ClusterRkeConfigServicesSchedulerArgs:
    def __init__(__self__, *,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] extra_args: Extra arguments for scheduler service (map)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_binds: Extra binds for scheduler service (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_envs: Extra environment for scheduler service (list)
        :param pulumi.Input[str] image: Docker image for scheduler service (string)
        """
        ClusterRkeConfigServicesSchedulerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            image=image,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']

        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if image is not None:
            _setter("image", image)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Extra arguments for scheduler service (map)
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra binds for scheduler service (list)
        """
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra environment for scheduler service (list)
        """
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Docker image for scheduler service (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class ClusterRkeConfigUpgradeStrategyArgs:
    def __init__(__self__, *,
                 drain: Optional[pulumi.Input[bool]] = None,
                 drain_input: Optional[pulumi.Input['ClusterRkeConfigUpgradeStrategyDrainInputArgs']] = None,
                 max_unavailable_controlplane: Optional[pulumi.Input[str]] = None,
                 max_unavailable_worker: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] drain: RKE drain nodes. Default: `false` (bool)
        :param pulumi.Input['ClusterRkeConfigUpgradeStrategyDrainInputArgs'] drain_input: RKE drain node input (list Maxitems: 1)
        :param pulumi.Input[str] max_unavailable_controlplane: RKE max unavailable controlplane nodes. Default: `1` (string)
        :param pulumi.Input[str] max_unavailable_worker: RKE max unavailable worker nodes. Default: `10%` (string)
        """
        ClusterRkeConfigUpgradeStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            drain=drain,
            drain_input=drain_input,
            max_unavailable_controlplane=max_unavailable_controlplane,
            max_unavailable_worker=max_unavailable_worker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             drain: Optional[pulumi.Input[bool]] = None,
             drain_input: Optional[pulumi.Input['ClusterRkeConfigUpgradeStrategyDrainInputArgs']] = None,
             max_unavailable_controlplane: Optional[pulumi.Input[str]] = None,
             max_unavailable_worker: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'drainInput' in kwargs:
            drain_input = kwargs['drainInput']
        if 'maxUnavailableControlplane' in kwargs:
            max_unavailable_controlplane = kwargs['maxUnavailableControlplane']
        if 'maxUnavailableWorker' in kwargs:
            max_unavailable_worker = kwargs['maxUnavailableWorker']

        if drain is not None:
            _setter("drain", drain)
        if drain_input is not None:
            _setter("drain_input", drain_input)
        if max_unavailable_controlplane is not None:
            _setter("max_unavailable_controlplane", max_unavailable_controlplane)
        if max_unavailable_worker is not None:
            _setter("max_unavailable_worker", max_unavailable_worker)

    @property
    @pulumi.getter
    def drain(self) -> Optional[pulumi.Input[bool]]:
        """
        RKE drain nodes. Default: `false` (bool)
        """
        return pulumi.get(self, "drain")

    @drain.setter
    def drain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain", value)

    @property
    @pulumi.getter(name="drainInput")
    def drain_input(self) -> Optional[pulumi.Input['ClusterRkeConfigUpgradeStrategyDrainInputArgs']]:
        """
        RKE drain node input (list Maxitems: 1)
        """
        return pulumi.get(self, "drain_input")

    @drain_input.setter
    def drain_input(self, value: Optional[pulumi.Input['ClusterRkeConfigUpgradeStrategyDrainInputArgs']]):
        pulumi.set(self, "drain_input", value)

    @property
    @pulumi.getter(name="maxUnavailableControlplane")
    def max_unavailable_controlplane(self) -> Optional[pulumi.Input[str]]:
        """
        RKE max unavailable controlplane nodes. Default: `1` (string)
        """
        return pulumi.get(self, "max_unavailable_controlplane")

    @max_unavailable_controlplane.setter
    def max_unavailable_controlplane(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable_controlplane", value)

    @property
    @pulumi.getter(name="maxUnavailableWorker")
    def max_unavailable_worker(self) -> Optional[pulumi.Input[str]]:
        """
        RKE max unavailable worker nodes. Default: `10%` (string)
        """
        return pulumi.get(self, "max_unavailable_worker")

    @max_unavailable_worker.setter
    def max_unavailable_worker(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable_worker", value)


@pulumi.input_type
class ClusterRkeConfigUpgradeStrategyDrainInputArgs:
    def __init__(__self__, *,
                 delete_local_data: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 grace_period: Optional[pulumi.Input[int]] = None,
                 ignore_daemon_sets: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] delete_local_data: Delete RKE node local data. Default: `false` (bool)
        :param pulumi.Input[bool] force: Force RKE node drain. Default: `false` (bool)
        :param pulumi.Input[int] grace_period: RKE node drain grace period. Default: `-1` (int)
        :param pulumi.Input[bool] ignore_daemon_sets: Ignore RKE daemon sets. Default: `true` (bool)
        :param pulumi.Input[int] timeout: RKE node drain timeout. Default: `60` (int)
        """
        ClusterRkeConfigUpgradeStrategyDrainInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delete_local_data=delete_local_data,
            force=force,
            grace_period=grace_period,
            ignore_daemon_sets=ignore_daemon_sets,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delete_local_data: Optional[pulumi.Input[bool]] = None,
             force: Optional[pulumi.Input[bool]] = None,
             grace_period: Optional[pulumi.Input[int]] = None,
             ignore_daemon_sets: Optional[pulumi.Input[bool]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'deleteLocalData' in kwargs:
            delete_local_data = kwargs['deleteLocalData']
        if 'gracePeriod' in kwargs:
            grace_period = kwargs['gracePeriod']
        if 'ignoreDaemonSets' in kwargs:
            ignore_daemon_sets = kwargs['ignoreDaemonSets']

        if delete_local_data is not None:
            _setter("delete_local_data", delete_local_data)
        if force is not None:
            _setter("force", force)
        if grace_period is not None:
            _setter("grace_period", grace_period)
        if ignore_daemon_sets is not None:
            _setter("ignore_daemon_sets", ignore_daemon_sets)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter(name="deleteLocalData")
    def delete_local_data(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete RKE node local data. Default: `false` (bool)
        """
        return pulumi.get(self, "delete_local_data")

    @delete_local_data.setter
    def delete_local_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_local_data", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Force RKE node drain. Default: `false` (bool)
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[pulumi.Input[int]]:
        """
        RKE node drain grace period. Default: `-1` (int)
        """
        return pulumi.get(self, "grace_period")

    @grace_period.setter
    def grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grace_period", value)

    @property
    @pulumi.getter(name="ignoreDaemonSets")
    def ignore_daemon_sets(self) -> Optional[pulumi.Input[bool]]:
        """
        Ignore RKE daemon sets. Default: `true` (bool)
        """
        return pulumi.get(self, "ignore_daemon_sets")

    @ignore_daemon_sets.setter
    def ignore_daemon_sets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_daemon_sets", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        RKE node drain timeout. Default: `60` (int)
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ClusterSyncNodeArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 capacity: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 external_ip_address: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_pool_id: Optional[pulumi.Input[str]] = None,
                 node_template_id: Optional[pulumi.Input[str]] = None,
                 provider_id: Optional[pulumi.Input[str]] = None,
                 requested_hostname: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 system_info: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations of the node (map).
        :param pulumi.Input[Mapping[str, Any]] capacity: The total resources of a node (map).
        :param pulumi.Input[str] cluster_id: The cluster ID that is syncing (string)
        :param pulumi.Input[str] external_ip_address: The external IP address of the node (string).
        :param pulumi.Input[str] hostname: The hostname of the node (string).
        :param pulumi.Input[str] id: The ID of the node (string)
        :param pulumi.Input[str] ip_address: The private IP address of the node (string).
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of the node (map).
        :param pulumi.Input[str] name: The name of the node (string).
        :param pulumi.Input[str] node_pool_id: The Node Pool ID of the node (string).
        :param pulumi.Input[str] node_template_id: The Node Template ID of the node (string).
        :param pulumi.Input[str] provider_id: The Provider ID of the node (string).
        :param pulumi.Input[str] requested_hostname: The requested hostname (string).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles of the node. `controlplane`, `etcd` and `worker`. (list)
        :param pulumi.Input[str] ssh_user: The user to connect to the node (string).
        :param pulumi.Input[Mapping[str, Any]] system_info: General information about the node, such as kernel version, kubelet and kube-proxy version, Docker version (if used), and OS name.
        """
        ClusterSyncNodeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            capacity=capacity,
            cluster_id=cluster_id,
            external_ip_address=external_ip_address,
            hostname=hostname,
            id=id,
            ip_address=ip_address,
            labels=labels,
            name=name,
            node_pool_id=node_pool_id,
            node_template_id=node_template_id,
            provider_id=provider_id,
            requested_hostname=requested_hostname,
            roles=roles,
            ssh_user=ssh_user,
            system_info=system_info,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             capacity: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             cluster_id: Optional[pulumi.Input[str]] = None,
             external_ip_address: Optional[pulumi.Input[str]] = None,
             hostname: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             ip_address: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_pool_id: Optional[pulumi.Input[str]] = None,
             node_template_id: Optional[pulumi.Input[str]] = None,
             provider_id: Optional[pulumi.Input[str]] = None,
             requested_hostname: Optional[pulumi.Input[str]] = None,
             roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             system_info: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'externalIpAddress' in kwargs:
            external_ip_address = kwargs['externalIpAddress']
        if 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if 'nodePoolId' in kwargs:
            node_pool_id = kwargs['nodePoolId']
        if 'nodeTemplateId' in kwargs:
            node_template_id = kwargs['nodeTemplateId']
        if 'providerId' in kwargs:
            provider_id = kwargs['providerId']
        if 'requestedHostname' in kwargs:
            requested_hostname = kwargs['requestedHostname']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'systemInfo' in kwargs:
            system_info = kwargs['systemInfo']

        if annotations is not None:
            _setter("annotations", annotations)
        if capacity is not None:
            _setter("capacity", capacity)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if external_ip_address is not None:
            _setter("external_ip_address", external_ip_address)
        if hostname is not None:
            _setter("hostname", hostname)
        if id is not None:
            _setter("id", id)
        if ip_address is not None:
            _setter("ip_address", ip_address)
        if labels is not None:
            _setter("labels", labels)
        if name is not None:
            _setter("name", name)
        if node_pool_id is not None:
            _setter("node_pool_id", node_pool_id)
        if node_template_id is not None:
            _setter("node_template_id", node_template_id)
        if provider_id is not None:
            _setter("provider_id", provider_id)
        if requested_hostname is not None:
            _setter("requested_hostname", requested_hostname)
        if roles is not None:
            _setter("roles", roles)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if system_info is not None:
            _setter("system_info", system_info)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations of the node (map).
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The total resources of a node (map).
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster ID that is syncing (string)
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="externalIpAddress")
    def external_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The external IP address of the node (string).
        """
        return pulumi.get(self, "external_ip_address")

    @external_ip_address.setter
    def external_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip_address", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname of the node (string).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the node (string)
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The private IP address of the node (string).
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels of the node (map).
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the node (string).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodePoolId")
    def node_pool_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Node Pool ID of the node (string).
        """
        return pulumi.get(self, "node_pool_id")

    @node_pool_id.setter
    def node_pool_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pool_id", value)

    @property
    @pulumi.getter(name="nodeTemplateId")
    def node_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Node Template ID of the node (string).
        """
        return pulumi.get(self, "node_template_id")

    @node_template_id.setter
    def node_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_template_id", value)

    @property
    @pulumi.getter(name="providerId")
    def provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Provider ID of the node (string).
        """
        return pulumi.get(self, "provider_id")

    @provider_id.setter
    def provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_id", value)

    @property
    @pulumi.getter(name="requestedHostname")
    def requested_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The requested hostname (string).
        """
        return pulumi.get(self, "requested_hostname")

    @requested_hostname.setter
    def requested_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requested_hostname", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles of the node. `controlplane`, `etcd` and `worker`. (list)
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        The user to connect to the node (string).
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="systemInfo")
    def system_info(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        General information about the node, such as kernel version, kubelet and kube-proxy version, Docker version (if used), and OS name.
        """
        return pulumi.get(self, "system_info")

    @system_info.setter
    def system_info(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_info", value)


@pulumi.input_type
class ClusterTemplateMemberArgs:
    def __init__(__self__, *,
                 access_type: Optional[pulumi.Input[str]] = None,
                 group_principal_id: Optional[pulumi.Input[str]] = None,
                 user_principal_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_type: Member access type. Valid values: `["read-only" | "owner"]` (string)
        :param pulumi.Input[str] group_principal_id: Member group principal id (string)
        :param pulumi.Input[str] user_principal_id: Member user principal id (string)
        """
        ClusterTemplateMemberArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_type=access_type,
            group_principal_id=group_principal_id,
            user_principal_id=user_principal_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_type: Optional[pulumi.Input[str]] = None,
             group_principal_id: Optional[pulumi.Input[str]] = None,
             user_principal_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessType' in kwargs:
            access_type = kwargs['accessType']
        if 'groupPrincipalId' in kwargs:
            group_principal_id = kwargs['groupPrincipalId']
        if 'userPrincipalId' in kwargs:
            user_principal_id = kwargs['userPrincipalId']

        if access_type is not None:
            _setter("access_type", access_type)
        if group_principal_id is not None:
            _setter("group_principal_id", group_principal_id)
        if user_principal_id is not None:
            _setter("user_principal_id", user_principal_id)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[pulumi.Input[str]]:
        """
        Member access type. Valid values: `["read-only" | "owner"]` (string)
        """
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_type", value)

    @property
    @pulumi.getter(name="groupPrincipalId")
    def group_principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        Member group principal id (string)
        """
        return pulumi.get(self, "group_principal_id")

    @group_principal_id.setter
    def group_principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_principal_id", value)

    @property
    @pulumi.getter(name="userPrincipalId")
    def user_principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        Member user principal id (string)
        """
        return pulumi.get(self, "user_principal_id")

    @user_principal_id.setter
    def user_principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_principal_id", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionArgs:
    def __init__(__self__, *,
                 cluster_config: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigArgs'],
                 name: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cluster_template_id: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 questions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionQuestionArgs']]]] = None):
        """
        :param pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigArgs'] cluster_config: Cluster configuration (list maxitem: 1)
        :param pulumi.Input[str] name: The cluster template name (string)
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for the cluster template (map)
        :param pulumi.Input[str] cluster_template_id: Cluster template ID (string)
        :param pulumi.Input[bool] default: Default variable value (string)
        :param pulumi.Input[bool] enabled: Enable cluster template revision. Default `true` (bool)
        :param pulumi.Input[str] id: The cluster template revision ID (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the cluster template (map)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionQuestionArgs']]] questions: Cluster template questions (list)
        """
        ClusterTemplateTemplateRevisionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_config=cluster_config,
            name=name,
            annotations=annotations,
            cluster_template_id=cluster_template_id,
            default=default,
            enabled=enabled,
            id=id,
            labels=labels,
            questions=questions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_config: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigArgs'],
             name: pulumi.Input[str],
             annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             cluster_template_id: Optional[pulumi.Input[str]] = None,
             default: Optional[pulumi.Input[bool]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             id: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             questions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionQuestionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterConfig' in kwargs:
            cluster_config = kwargs['clusterConfig']
        if 'clusterTemplateId' in kwargs:
            cluster_template_id = kwargs['clusterTemplateId']

        _setter("cluster_config", cluster_config)
        _setter("name", name)
        if annotations is not None:
            _setter("annotations", annotations)
        if cluster_template_id is not None:
            _setter("cluster_template_id", cluster_template_id)
        if default is not None:
            _setter("default", default)
        if enabled is not None:
            _setter("enabled", enabled)
        if id is not None:
            _setter("id", id)
        if labels is not None:
            _setter("labels", labels)
        if questions is not None:
            _setter("questions", questions)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigArgs']:
        """
        Cluster configuration (list maxitem: 1)
        """
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigArgs']):
        pulumi.set(self, "cluster_config", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The cluster template name (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations for the cluster template (map)
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterTemplateId")
    def cluster_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster template ID (string)
        """
        return pulumi.get(self, "cluster_template_id")

    @cluster_template_id.setter
    def cluster_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_template_id", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        Default variable value (string)
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable cluster template revision. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster template revision ID (string)
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the cluster template (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def questions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionQuestionArgs']]]]:
        """
        Cluster template questions (list)
        """
        return pulumi.get(self, "questions")

    @questions.setter
    def questions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionQuestionArgs']]]]):
        pulumi.set(self, "questions", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigArgs:
    def __init__(__self__, *,
                 rke_config: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs'],
                 cluster_auth_endpoint: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpointArgs']] = None,
                 default_cluster_role_for_project_members: Optional[pulumi.Input[str]] = None,
                 default_pod_security_admission_configuration_template_name: Optional[pulumi.Input[str]] = None,
                 default_pod_security_policy_template_id: Optional[pulumi.Input[str]] = None,
                 desired_agent_image: Optional[pulumi.Input[str]] = None,
                 desired_auth_image: Optional[pulumi.Input[str]] = None,
                 docker_root_dir: Optional[pulumi.Input[str]] = None,
                 enable_cluster_alerting: Optional[pulumi.Input[bool]] = None,
                 enable_cluster_monitoring: Optional[pulumi.Input[bool]] = None,
                 enable_network_policy: Optional[pulumi.Input[bool]] = None,
                 windows_prefered_cluster: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs'] rke_config: Rancher Kubernetes Engine Config (list maxitems: 1)
        :param pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpointArgs'] cluster_auth_endpoint: Local cluster auth endpoint (list maxitems: 1)
        :param pulumi.Input[str] default_cluster_role_for_project_members: Default cluster role for project members (string)
        :param pulumi.Input[str] default_pod_security_policy_template_id: Default pod security policy template ID (string)
        :param pulumi.Input[str] desired_agent_image: Desired agent image (string)
        :param pulumi.Input[str] desired_auth_image: Desired auth image (string)
        :param pulumi.Input[str] docker_root_dir: Desired auth image (string)
        :param pulumi.Input[bool] enable_cluster_alerting: Enable built-in cluster alerting. Default: `false` (bool)
        :param pulumi.Input[bool] enable_cluster_monitoring: Enable built-in cluster monitoring. Default: `false` (bool)
        :param pulumi.Input[bool] enable_network_policy: Enable project network isolation. Default: `false` (bool)
        :param pulumi.Input[bool] windows_prefered_cluster: Windows prefered cluster. Default: `false` (bool)
        """
        ClusterTemplateTemplateRevisionClusterConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rke_config=rke_config,
            cluster_auth_endpoint=cluster_auth_endpoint,
            default_cluster_role_for_project_members=default_cluster_role_for_project_members,
            default_pod_security_admission_configuration_template_name=default_pod_security_admission_configuration_template_name,
            default_pod_security_policy_template_id=default_pod_security_policy_template_id,
            desired_agent_image=desired_agent_image,
            desired_auth_image=desired_auth_image,
            docker_root_dir=docker_root_dir,
            enable_cluster_alerting=enable_cluster_alerting,
            enable_cluster_monitoring=enable_cluster_monitoring,
            enable_network_policy=enable_network_policy,
            windows_prefered_cluster=windows_prefered_cluster,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rke_config: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs'],
             cluster_auth_endpoint: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpointArgs']] = None,
             default_cluster_role_for_project_members: Optional[pulumi.Input[str]] = None,
             default_pod_security_admission_configuration_template_name: Optional[pulumi.Input[str]] = None,
             default_pod_security_policy_template_id: Optional[pulumi.Input[str]] = None,
             desired_agent_image: Optional[pulumi.Input[str]] = None,
             desired_auth_image: Optional[pulumi.Input[str]] = None,
             docker_root_dir: Optional[pulumi.Input[str]] = None,
             enable_cluster_alerting: Optional[pulumi.Input[bool]] = None,
             enable_cluster_monitoring: Optional[pulumi.Input[bool]] = None,
             enable_network_policy: Optional[pulumi.Input[bool]] = None,
             windows_prefered_cluster: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rkeConfig' in kwargs:
            rke_config = kwargs['rkeConfig']
        if 'clusterAuthEndpoint' in kwargs:
            cluster_auth_endpoint = kwargs['clusterAuthEndpoint']
        if 'defaultClusterRoleForProjectMembers' in kwargs:
            default_cluster_role_for_project_members = kwargs['defaultClusterRoleForProjectMembers']
        if 'defaultPodSecurityAdmissionConfigurationTemplateName' in kwargs:
            default_pod_security_admission_configuration_template_name = kwargs['defaultPodSecurityAdmissionConfigurationTemplateName']
        if 'defaultPodSecurityPolicyTemplateId' in kwargs:
            default_pod_security_policy_template_id = kwargs['defaultPodSecurityPolicyTemplateId']
        if 'desiredAgentImage' in kwargs:
            desired_agent_image = kwargs['desiredAgentImage']
        if 'desiredAuthImage' in kwargs:
            desired_auth_image = kwargs['desiredAuthImage']
        if 'dockerRootDir' in kwargs:
            docker_root_dir = kwargs['dockerRootDir']
        if 'enableClusterAlerting' in kwargs:
            enable_cluster_alerting = kwargs['enableClusterAlerting']
        if 'enableClusterMonitoring' in kwargs:
            enable_cluster_monitoring = kwargs['enableClusterMonitoring']
        if 'enableNetworkPolicy' in kwargs:
            enable_network_policy = kwargs['enableNetworkPolicy']
        if 'windowsPreferedCluster' in kwargs:
            windows_prefered_cluster = kwargs['windowsPreferedCluster']

        _setter("rke_config", rke_config)
        if cluster_auth_endpoint is not None:
            _setter("cluster_auth_endpoint", cluster_auth_endpoint)
        if default_cluster_role_for_project_members is not None:
            _setter("default_cluster_role_for_project_members", default_cluster_role_for_project_members)
        if default_pod_security_admission_configuration_template_name is not None:
            _setter("default_pod_security_admission_configuration_template_name", default_pod_security_admission_configuration_template_name)
        if default_pod_security_policy_template_id is not None:
            _setter("default_pod_security_policy_template_id", default_pod_security_policy_template_id)
        if desired_agent_image is not None:
            _setter("desired_agent_image", desired_agent_image)
        if desired_auth_image is not None:
            _setter("desired_auth_image", desired_auth_image)
        if docker_root_dir is not None:
            _setter("docker_root_dir", docker_root_dir)
        if enable_cluster_alerting is not None:
            _setter("enable_cluster_alerting", enable_cluster_alerting)
        if enable_cluster_monitoring is not None:
            _setter("enable_cluster_monitoring", enable_cluster_monitoring)
        if enable_network_policy is not None:
            _setter("enable_network_policy", enable_network_policy)
        if windows_prefered_cluster is not None:
            _setter("windows_prefered_cluster", windows_prefered_cluster)

    @property
    @pulumi.getter(name="rkeConfig")
    def rke_config(self) -> pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs']:
        """
        Rancher Kubernetes Engine Config (list maxitems: 1)
        """
        return pulumi.get(self, "rke_config")

    @rke_config.setter
    def rke_config(self, value: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs']):
        pulumi.set(self, "rke_config", value)

    @property
    @pulumi.getter(name="clusterAuthEndpoint")
    def cluster_auth_endpoint(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpointArgs']]:
        """
        Local cluster auth endpoint (list maxitems: 1)
        """
        return pulumi.get(self, "cluster_auth_endpoint")

    @cluster_auth_endpoint.setter
    def cluster_auth_endpoint(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpointArgs']]):
        pulumi.set(self, "cluster_auth_endpoint", value)

    @property
    @pulumi.getter(name="defaultClusterRoleForProjectMembers")
    def default_cluster_role_for_project_members(self) -> Optional[pulumi.Input[str]]:
        """
        Default cluster role for project members (string)
        """
        return pulumi.get(self, "default_cluster_role_for_project_members")

    @default_cluster_role_for_project_members.setter
    def default_cluster_role_for_project_members(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_cluster_role_for_project_members", value)

    @property
    @pulumi.getter(name="defaultPodSecurityAdmissionConfigurationTemplateName")
    def default_pod_security_admission_configuration_template_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_pod_security_admission_configuration_template_name")

    @default_pod_security_admission_configuration_template_name.setter
    def default_pod_security_admission_configuration_template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_pod_security_admission_configuration_template_name", value)

    @property
    @pulumi.getter(name="defaultPodSecurityPolicyTemplateId")
    def default_pod_security_policy_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default pod security policy template ID (string)
        """
        return pulumi.get(self, "default_pod_security_policy_template_id")

    @default_pod_security_policy_template_id.setter
    def default_pod_security_policy_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_pod_security_policy_template_id", value)

    @property
    @pulumi.getter(name="desiredAgentImage")
    def desired_agent_image(self) -> Optional[pulumi.Input[str]]:
        """
        Desired agent image (string)
        """
        return pulumi.get(self, "desired_agent_image")

    @desired_agent_image.setter
    def desired_agent_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desired_agent_image", value)

    @property
    @pulumi.getter(name="desiredAuthImage")
    def desired_auth_image(self) -> Optional[pulumi.Input[str]]:
        """
        Desired auth image (string)
        """
        return pulumi.get(self, "desired_auth_image")

    @desired_auth_image.setter
    def desired_auth_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desired_auth_image", value)

    @property
    @pulumi.getter(name="dockerRootDir")
    def docker_root_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Desired auth image (string)
        """
        return pulumi.get(self, "docker_root_dir")

    @docker_root_dir.setter
    def docker_root_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_root_dir", value)

    @property
    @pulumi.getter(name="enableClusterAlerting")
    def enable_cluster_alerting(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable built-in cluster alerting. Default: `false` (bool)
        """
        return pulumi.get(self, "enable_cluster_alerting")

    @enable_cluster_alerting.setter
    def enable_cluster_alerting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cluster_alerting", value)

    @property
    @pulumi.getter(name="enableClusterMonitoring")
    def enable_cluster_monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable built-in cluster monitoring. Default: `false` (bool)
        """
        return pulumi.get(self, "enable_cluster_monitoring")

    @enable_cluster_monitoring.setter
    def enable_cluster_monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cluster_monitoring", value)

    @property
    @pulumi.getter(name="enableNetworkPolicy")
    def enable_network_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable project network isolation. Default: `false` (bool)
        """
        return pulumi.get(self, "enable_network_policy")

    @enable_network_policy.setter
    def enable_network_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_network_policy", value)

    @property
    @pulumi.getter(name="windowsPreferedCluster")
    def windows_prefered_cluster(self) -> Optional[pulumi.Input[bool]]:
        """
        Windows prefered cluster. Default: `false` (bool)
        """
        return pulumi.get(self, "windows_prefered_cluster")

    @windows_prefered_cluster.setter
    def windows_prefered_cluster(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "windows_prefered_cluster", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpointArgs:
    def __init__(__self__, *,
                 ca_certs: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable cluster template revision. Default `true` (bool)
        """
        ClusterTemplateTemplateRevisionClusterConfigClusterAuthEndpointArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ca_certs=ca_certs,
            enabled=enabled,
            fqdn=fqdn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ca_certs: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             fqdn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caCerts' in kwargs:
            ca_certs = kwargs['caCerts']

        if ca_certs is not None:
            _setter("ca_certs", ca_certs)
        if enabled is not None:
            _setter("enabled", enabled)
        if fqdn is not None:
            _setter("fqdn", fqdn)

    @property
    @pulumi.getter(name="caCerts")
    def ca_certs(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_certs")

    @ca_certs.setter
    def ca_certs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certs", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable cluster template revision. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs:
    def __init__(__self__, *,
                 addon_job_timeout: Optional[pulumi.Input[int]] = None,
                 addons: Optional[pulumi.Input[str]] = None,
                 addons_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authentication: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthenticationArgs']] = None,
                 authorization: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorizationArgs']] = None,
                 bastion_host: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHostArgs']] = None,
                 cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderArgs']] = None,
                 dns: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsArgs']] = None,
                 enable_cri_dockerd: Optional[pulumi.Input[bool]] = None,
                 ignore_docker_version: Optional[pulumi.Input[bool]] = None,
                 ingress: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressArgs']] = None,
                 kubernetes_version: Optional[pulumi.Input[str]] = None,
                 monitoring: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringArgs']] = None,
                 network: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs']] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNodeArgs']]]] = None,
                 prefix_path: Optional[pulumi.Input[str]] = None,
                 private_registries: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryArgs']]]] = None,
                 services: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs']] = None,
                 ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
                 ssh_cert_path: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None,
                 upgrade_strategy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs']] = None,
                 win_prefix_path: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            addon_job_timeout=addon_job_timeout,
            addons=addons,
            addons_includes=addons_includes,
            authentication=authentication,
            authorization=authorization,
            bastion_host=bastion_host,
            cloud_provider=cloud_provider,
            dns=dns,
            enable_cri_dockerd=enable_cri_dockerd,
            ignore_docker_version=ignore_docker_version,
            ingress=ingress,
            kubernetes_version=kubernetes_version,
            monitoring=monitoring,
            network=network,
            nodes=nodes,
            prefix_path=prefix_path,
            private_registries=private_registries,
            services=services,
            ssh_agent_auth=ssh_agent_auth,
            ssh_cert_path=ssh_cert_path,
            ssh_key_path=ssh_key_path,
            upgrade_strategy=upgrade_strategy,
            win_prefix_path=win_prefix_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             addon_job_timeout: Optional[pulumi.Input[int]] = None,
             addons: Optional[pulumi.Input[str]] = None,
             addons_includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             authentication: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthenticationArgs']] = None,
             authorization: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorizationArgs']] = None,
             bastion_host: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHostArgs']] = None,
             cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderArgs']] = None,
             dns: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsArgs']] = None,
             enable_cri_dockerd: Optional[pulumi.Input[bool]] = None,
             ignore_docker_version: Optional[pulumi.Input[bool]] = None,
             ingress: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressArgs']] = None,
             kubernetes_version: Optional[pulumi.Input[str]] = None,
             monitoring: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringArgs']] = None,
             network: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs']] = None,
             nodes: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNodeArgs']]]] = None,
             prefix_path: Optional[pulumi.Input[str]] = None,
             private_registries: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryArgs']]]] = None,
             services: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs']] = None,
             ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
             ssh_cert_path: Optional[pulumi.Input[str]] = None,
             ssh_key_path: Optional[pulumi.Input[str]] = None,
             upgrade_strategy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs']] = None,
             win_prefix_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'addonJobTimeout' in kwargs:
            addon_job_timeout = kwargs['addonJobTimeout']
        if 'addonsIncludes' in kwargs:
            addons_includes = kwargs['addonsIncludes']
        if 'bastionHost' in kwargs:
            bastion_host = kwargs['bastionHost']
        if 'cloudProvider' in kwargs:
            cloud_provider = kwargs['cloudProvider']
        if 'enableCriDockerd' in kwargs:
            enable_cri_dockerd = kwargs['enableCriDockerd']
        if 'ignoreDockerVersion' in kwargs:
            ignore_docker_version = kwargs['ignoreDockerVersion']
        if 'kubernetesVersion' in kwargs:
            kubernetes_version = kwargs['kubernetesVersion']
        if 'prefixPath' in kwargs:
            prefix_path = kwargs['prefixPath']
        if 'privateRegistries' in kwargs:
            private_registries = kwargs['privateRegistries']
        if 'sshAgentAuth' in kwargs:
            ssh_agent_auth = kwargs['sshAgentAuth']
        if 'sshCertPath' in kwargs:
            ssh_cert_path = kwargs['sshCertPath']
        if 'sshKeyPath' in kwargs:
            ssh_key_path = kwargs['sshKeyPath']
        if 'upgradeStrategy' in kwargs:
            upgrade_strategy = kwargs['upgradeStrategy']
        if 'winPrefixPath' in kwargs:
            win_prefix_path = kwargs['winPrefixPath']

        if addon_job_timeout is not None:
            _setter("addon_job_timeout", addon_job_timeout)
        if addons is not None:
            _setter("addons", addons)
        if addons_includes is not None:
            _setter("addons_includes", addons_includes)
        if authentication is not None:
            _setter("authentication", authentication)
        if authorization is not None:
            _setter("authorization", authorization)
        if bastion_host is not None:
            _setter("bastion_host", bastion_host)
        if cloud_provider is not None:
            _setter("cloud_provider", cloud_provider)
        if dns is not None:
            _setter("dns", dns)
        if enable_cri_dockerd is not None:
            _setter("enable_cri_dockerd", enable_cri_dockerd)
        if ignore_docker_version is not None:
            _setter("ignore_docker_version", ignore_docker_version)
        if ingress is not None:
            _setter("ingress", ingress)
        if kubernetes_version is not None:
            _setter("kubernetes_version", kubernetes_version)
        if monitoring is not None:
            _setter("monitoring", monitoring)
        if network is not None:
            _setter("network", network)
        if nodes is not None:
            _setter("nodes", nodes)
        if prefix_path is not None:
            _setter("prefix_path", prefix_path)
        if private_registries is not None:
            _setter("private_registries", private_registries)
        if services is not None:
            _setter("services", services)
        if ssh_agent_auth is not None:
            _setter("ssh_agent_auth", ssh_agent_auth)
        if ssh_cert_path is not None:
            _setter("ssh_cert_path", ssh_cert_path)
        if ssh_key_path is not None:
            _setter("ssh_key_path", ssh_key_path)
        if upgrade_strategy is not None:
            _setter("upgrade_strategy", upgrade_strategy)
        if win_prefix_path is not None:
            _setter("win_prefix_path", win_prefix_path)

    @property
    @pulumi.getter(name="addonJobTimeout")
    def addon_job_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "addon_job_timeout")

    @addon_job_timeout.setter
    def addon_job_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "addon_job_timeout", value)

    @property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addons", value)

    @property
    @pulumi.getter(name="addonsIncludes")
    def addons_includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "addons_includes")

    @addons_includes.setter
    def addons_includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "addons_includes", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorizationArgs']]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="bastionHost")
    def bastion_host(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHostArgs']]:
        return pulumi.get(self, "bastion_host")

    @bastion_host.setter
    def bastion_host(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHostArgs']]):
        pulumi.set(self, "bastion_host", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderArgs']]:
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderArgs']]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsArgs']]:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsArgs']]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="enableCriDockerd")
    def enable_cri_dockerd(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_cri_dockerd")

    @enable_cri_dockerd.setter
    def enable_cri_dockerd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cri_dockerd", value)

    @property
    @pulumi.getter(name="ignoreDockerVersion")
    def ignore_docker_version(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_docker_version")

    @ignore_docker_version.setter
    def ignore_docker_version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_docker_version", value)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressArgs']]:
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressArgs']]):
        pulumi.set(self, "ingress", value)

    @property
    @pulumi.getter(name="kubernetesVersion")
    def kubernetes_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubernetes_version")

    @kubernetes_version.setter
    def kubernetes_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_version", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringArgs']]:
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringArgs']]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs']]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs']]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNodeArgs']]]]:
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="prefixPath")
    def prefix_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix_path")

    @prefix_path.setter
    def prefix_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_path", value)

    @property
    @pulumi.getter(name="privateRegistries")
    def private_registries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryArgs']]]]:
        return pulumi.get(self, "private_registries")

    @private_registries.setter
    def private_registries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryArgs']]]]):
        pulumi.set(self, "private_registries", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs']]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs']]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="sshAgentAuth")
    def ssh_agent_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssh_agent_auth")

    @ssh_agent_auth.setter
    def ssh_agent_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssh_agent_auth", value)

    @property
    @pulumi.getter(name="sshCertPath")
    def ssh_cert_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_cert_path")

    @ssh_cert_path.setter
    def ssh_cert_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_cert_path", value)

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key_path")

    @ssh_key_path.setter
    def ssh_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_path", value)

    @property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs']]:
        return pulumi.get(self, "upgrade_strategy")

    @upgrade_strategy.setter
    def upgrade_strategy(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs']]):
        pulumi.set(self, "upgrade_strategy", value)

    @property
    @pulumi.getter(name="winPrefixPath")
    def win_prefix_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "win_prefix_path")

    @win_prefix_path.setter
    def win_prefix_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "win_prefix_path", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthenticationArgs:
    def __init__(__self__, *,
                 sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthenticationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sans=sans,
            strategy=strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if sans is not None:
            _setter("sans", sans)
        if strategy is not None:
            _setter("strategy", strategy)

    @property
    @pulumi.getter
    def sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sans")

    @sans.setter
    def sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sans", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorizationArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigAuthorizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
            options=options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: Optional[pulumi.Input[str]] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if mode is not None:
            _setter("mode", mode)
        if options is not None:
            _setter("options", options)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHostArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 user: pulumi.Input[str],
                 port: Optional[pulumi.Input[str]] = None,
                 ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
                 ssh_key: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigBastionHostArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            user=user,
            port=port,
            ssh_agent_auth=ssh_agent_auth,
            ssh_key=ssh_key,
            ssh_key_path=ssh_key_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: pulumi.Input[str],
             user: pulumi.Input[str],
             port: Optional[pulumi.Input[str]] = None,
             ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
             ssh_key: Optional[pulumi.Input[str]] = None,
             ssh_key_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sshAgentAuth' in kwargs:
            ssh_agent_auth = kwargs['sshAgentAuth']
        if 'sshKey' in kwargs:
            ssh_key = kwargs['sshKey']
        if 'sshKeyPath' in kwargs:
            ssh_key_path = kwargs['sshKeyPath']

        _setter("address", address)
        _setter("user", user)
        if port is not None:
            _setter("port", port)
        if ssh_agent_auth is not None:
            _setter("ssh_agent_auth", ssh_agent_auth)
        if ssh_key is not None:
            _setter("ssh_key", ssh_key)
        if ssh_key_path is not None:
            _setter("ssh_key_path", ssh_key_path)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshAgentAuth")
    def ssh_agent_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssh_agent_auth")

    @ssh_agent_auth.setter
    def ssh_agent_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssh_agent_auth", value)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key_path")

    @ssh_key_path.setter
    def ssh_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_path", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderArgs:
    def __init__(__self__, *,
                 aws_cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderArgs']] = None,
                 azure_cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProviderArgs']] = None,
                 custom_cloud_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 openstack_cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderArgs']] = None,
                 vsphere_cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderArgs']] = None):
        """
        :param pulumi.Input[str] name: The cluster template name (string)
        """
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_cloud_provider=aws_cloud_provider,
            azure_cloud_provider=azure_cloud_provider,
            custom_cloud_provider=custom_cloud_provider,
            name=name,
            openstack_cloud_provider=openstack_cloud_provider,
            vsphere_cloud_provider=vsphere_cloud_provider,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderArgs']] = None,
             azure_cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProviderArgs']] = None,
             custom_cloud_provider: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             openstack_cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderArgs']] = None,
             vsphere_cloud_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awsCloudProvider' in kwargs:
            aws_cloud_provider = kwargs['awsCloudProvider']
        if 'azureCloudProvider' in kwargs:
            azure_cloud_provider = kwargs['azureCloudProvider']
        if 'customCloudProvider' in kwargs:
            custom_cloud_provider = kwargs['customCloudProvider']
        if 'openstackCloudProvider' in kwargs:
            openstack_cloud_provider = kwargs['openstackCloudProvider']
        if 'vsphereCloudProvider' in kwargs:
            vsphere_cloud_provider = kwargs['vsphereCloudProvider']

        if aws_cloud_provider is not None:
            _setter("aws_cloud_provider", aws_cloud_provider)
        if azure_cloud_provider is not None:
            _setter("azure_cloud_provider", azure_cloud_provider)
        if custom_cloud_provider is not None:
            _setter("custom_cloud_provider", custom_cloud_provider)
        if name is not None:
            _setter("name", name)
        if openstack_cloud_provider is not None:
            _setter("openstack_cloud_provider", openstack_cloud_provider)
        if vsphere_cloud_provider is not None:
            _setter("vsphere_cloud_provider", vsphere_cloud_provider)

    @property
    @pulumi.getter(name="awsCloudProvider")
    def aws_cloud_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderArgs']]:
        return pulumi.get(self, "aws_cloud_provider")

    @aws_cloud_provider.setter
    def aws_cloud_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderArgs']]):
        pulumi.set(self, "aws_cloud_provider", value)

    @property
    @pulumi.getter(name="azureCloudProvider")
    def azure_cloud_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProviderArgs']]:
        return pulumi.get(self, "azure_cloud_provider")

    @azure_cloud_provider.setter
    def azure_cloud_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProviderArgs']]):
        pulumi.set(self, "azure_cloud_provider", value)

    @property
    @pulumi.getter(name="customCloudProvider")
    def custom_cloud_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_cloud_provider")

    @custom_cloud_provider.setter
    def custom_cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_cloud_provider", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster template name (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="openstackCloudProvider")
    def openstack_cloud_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderArgs']]:
        return pulumi.get(self, "openstack_cloud_provider")

    @openstack_cloud_provider.setter
    def openstack_cloud_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderArgs']]):
        pulumi.set(self, "openstack_cloud_provider", value)

    @property
    @pulumi.getter(name="vsphereCloudProvider")
    def vsphere_cloud_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderArgs']]:
        return pulumi.get(self, "vsphere_cloud_provider")

    @vsphere_cloud_provider.setter
    def vsphere_cloud_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderArgs']]):
        pulumi.set(self, "vsphere_cloud_provider", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderArgs:
    def __init__(__self__, *,
                 global_: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalArgs']] = None,
                 service_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs']]]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            global_=global_,
            service_overrides=service_overrides,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             global_: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalArgs']] = None,
             service_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'global' in kwargs:
            global_ = kwargs['global']
        if 'serviceOverrides' in kwargs:
            service_overrides = kwargs['serviceOverrides']

        if global_ is not None:
            _setter("global_", global_)
        if service_overrides is not None:
            _setter("service_overrides", service_overrides)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalArgs']]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalArgs']]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter(name="serviceOverrides")
    def service_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs']]]]:
        return pulumi.get(self, "service_overrides")

    @service_overrides.setter
    def service_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs']]]]):
        pulumi.set(self, "service_overrides", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalArgs:
    def __init__(__self__, *,
                 disable_security_group_ingress: Optional[pulumi.Input[bool]] = None,
                 disable_strict_zone_check: Optional[pulumi.Input[bool]] = None,
                 elb_security_group: Optional[pulumi.Input[str]] = None,
                 kubernetes_cluster_id: Optional[pulumi.Input[str]] = None,
                 kubernetes_cluster_tag: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disable_security_group_ingress=disable_security_group_ingress,
            disable_strict_zone_check=disable_strict_zone_check,
            elb_security_group=elb_security_group,
            kubernetes_cluster_id=kubernetes_cluster_id,
            kubernetes_cluster_tag=kubernetes_cluster_tag,
            role_arn=role_arn,
            route_table_id=route_table_id,
            subnet_id=subnet_id,
            vpc=vpc,
            zone=zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disable_security_group_ingress: Optional[pulumi.Input[bool]] = None,
             disable_strict_zone_check: Optional[pulumi.Input[bool]] = None,
             elb_security_group: Optional[pulumi.Input[str]] = None,
             kubernetes_cluster_id: Optional[pulumi.Input[str]] = None,
             kubernetes_cluster_tag: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             route_table_id: Optional[pulumi.Input[str]] = None,
             subnet_id: Optional[pulumi.Input[str]] = None,
             vpc: Optional[pulumi.Input[str]] = None,
             zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'disableSecurityGroupIngress' in kwargs:
            disable_security_group_ingress = kwargs['disableSecurityGroupIngress']
        if 'disableStrictZoneCheck' in kwargs:
            disable_strict_zone_check = kwargs['disableStrictZoneCheck']
        if 'elbSecurityGroup' in kwargs:
            elb_security_group = kwargs['elbSecurityGroup']
        if 'kubernetesClusterId' in kwargs:
            kubernetes_cluster_id = kwargs['kubernetesClusterId']
        if 'kubernetesClusterTag' in kwargs:
            kubernetes_cluster_tag = kwargs['kubernetesClusterTag']
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if 'routeTableId' in kwargs:
            route_table_id = kwargs['routeTableId']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']

        if disable_security_group_ingress is not None:
            _setter("disable_security_group_ingress", disable_security_group_ingress)
        if disable_strict_zone_check is not None:
            _setter("disable_strict_zone_check", disable_strict_zone_check)
        if elb_security_group is not None:
            _setter("elb_security_group", elb_security_group)
        if kubernetes_cluster_id is not None:
            _setter("kubernetes_cluster_id", kubernetes_cluster_id)
        if kubernetes_cluster_tag is not None:
            _setter("kubernetes_cluster_tag", kubernetes_cluster_tag)
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if route_table_id is not None:
            _setter("route_table_id", route_table_id)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)
        if vpc is not None:
            _setter("vpc", vpc)
        if zone is not None:
            _setter("zone", zone)

    @property
    @pulumi.getter(name="disableSecurityGroupIngress")
    def disable_security_group_ingress(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_security_group_ingress")

    @disable_security_group_ingress.setter
    def disable_security_group_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_security_group_ingress", value)

    @property
    @pulumi.getter(name="disableStrictZoneCheck")
    def disable_strict_zone_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_strict_zone_check")

    @disable_strict_zone_check.setter
    def disable_strict_zone_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_strict_zone_check", value)

    @property
    @pulumi.getter(name="elbSecurityGroup")
    def elb_security_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "elb_security_group")

    @elb_security_group.setter
    def elb_security_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elb_security_group", value)

    @property
    @pulumi.getter(name="kubernetesClusterId")
    def kubernetes_cluster_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubernetes_cluster_id")

    @kubernetes_cluster_id.setter
    def kubernetes_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_cluster_id", value)

    @property
    @pulumi.getter(name="kubernetesClusterTag")
    def kubernetes_cluster_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubernetes_cluster_tag")

    @kubernetes_cluster_tag.setter
    def kubernetes_cluster_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes_cluster_tag", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs:
    def __init__(__self__, *,
                 service: pulumi.Input[str],
                 region: Optional[pulumi.Input[str]] = None,
                 signing_method: Optional[pulumi.Input[str]] = None,
                 signing_name: Optional[pulumi.Input[str]] = None,
                 signing_region: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverrideArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            service=service,
            region=region,
            signing_method=signing_method,
            signing_name=signing_name,
            signing_region=signing_region,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             service: pulumi.Input[str],
             region: Optional[pulumi.Input[str]] = None,
             signing_method: Optional[pulumi.Input[str]] = None,
             signing_name: Optional[pulumi.Input[str]] = None,
             signing_region: Optional[pulumi.Input[str]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'signingMethod' in kwargs:
            signing_method = kwargs['signingMethod']
        if 'signingName' in kwargs:
            signing_name = kwargs['signingName']
        if 'signingRegion' in kwargs:
            signing_region = kwargs['signingRegion']

        _setter("service", service)
        if region is not None:
            _setter("region", region)
        if signing_method is not None:
            _setter("signing_method", signing_method)
        if signing_name is not None:
            _setter("signing_name", signing_name)
        if signing_region is not None:
            _setter("signing_region", signing_region)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="signingMethod")
    def signing_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signing_method")

    @signing_method.setter
    def signing_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signing_method", value)

    @property
    @pulumi.getter(name="signingName")
    def signing_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signing_name")

    @signing_name.setter
    def signing_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signing_name", value)

    @property
    @pulumi.getter(name="signingRegion")
    def signing_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signing_region")

    @signing_region.setter
    def signing_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signing_region", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProviderArgs:
    def __init__(__self__, *,
                 aad_client_id: pulumi.Input[str],
                 aad_client_secret: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 aad_client_cert_password: Optional[pulumi.Input[str]] = None,
                 aad_client_cert_path: Optional[pulumi.Input[str]] = None,
                 cloud: Optional[pulumi.Input[str]] = None,
                 cloud_provider_backoff: Optional[pulumi.Input[bool]] = None,
                 cloud_provider_backoff_duration: Optional[pulumi.Input[int]] = None,
                 cloud_provider_backoff_exponent: Optional[pulumi.Input[int]] = None,
                 cloud_provider_backoff_jitter: Optional[pulumi.Input[int]] = None,
                 cloud_provider_backoff_retries: Optional[pulumi.Input[int]] = None,
                 cloud_provider_rate_limit: Optional[pulumi.Input[bool]] = None,
                 cloud_provider_rate_limit_bucket: Optional[pulumi.Input[int]] = None,
                 cloud_provider_rate_limit_qps: Optional[pulumi.Input[int]] = None,
                 load_balancer_sku: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 maximum_load_balancer_rule_count: Optional[pulumi.Input[int]] = None,
                 primary_availability_set_name: Optional[pulumi.Input[str]] = None,
                 primary_scale_set_name: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 route_table_name: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None,
                 subnet_name: Optional[pulumi.Input[str]] = None,
                 use_instance_metadata: Optional[pulumi.Input[bool]] = None,
                 use_managed_identity_extension: Optional[pulumi.Input[bool]] = None,
                 vm_type: Optional[pulumi.Input[str]] = None,
                 vnet_name: Optional[pulumi.Input[str]] = None,
                 vnet_resource_group: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderAzureCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aad_client_id=aad_client_id,
            aad_client_secret=aad_client_secret,
            subscription_id=subscription_id,
            tenant_id=tenant_id,
            aad_client_cert_password=aad_client_cert_password,
            aad_client_cert_path=aad_client_cert_path,
            cloud=cloud,
            cloud_provider_backoff=cloud_provider_backoff,
            cloud_provider_backoff_duration=cloud_provider_backoff_duration,
            cloud_provider_backoff_exponent=cloud_provider_backoff_exponent,
            cloud_provider_backoff_jitter=cloud_provider_backoff_jitter,
            cloud_provider_backoff_retries=cloud_provider_backoff_retries,
            cloud_provider_rate_limit=cloud_provider_rate_limit,
            cloud_provider_rate_limit_bucket=cloud_provider_rate_limit_bucket,
            cloud_provider_rate_limit_qps=cloud_provider_rate_limit_qps,
            load_balancer_sku=load_balancer_sku,
            location=location,
            maximum_load_balancer_rule_count=maximum_load_balancer_rule_count,
            primary_availability_set_name=primary_availability_set_name,
            primary_scale_set_name=primary_scale_set_name,
            resource_group=resource_group,
            route_table_name=route_table_name,
            security_group_name=security_group_name,
            subnet_name=subnet_name,
            use_instance_metadata=use_instance_metadata,
            use_managed_identity_extension=use_managed_identity_extension,
            vm_type=vm_type,
            vnet_name=vnet_name,
            vnet_resource_group=vnet_resource_group,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aad_client_id: pulumi.Input[str],
             aad_client_secret: pulumi.Input[str],
             subscription_id: pulumi.Input[str],
             tenant_id: pulumi.Input[str],
             aad_client_cert_password: Optional[pulumi.Input[str]] = None,
             aad_client_cert_path: Optional[pulumi.Input[str]] = None,
             cloud: Optional[pulumi.Input[str]] = None,
             cloud_provider_backoff: Optional[pulumi.Input[bool]] = None,
             cloud_provider_backoff_duration: Optional[pulumi.Input[int]] = None,
             cloud_provider_backoff_exponent: Optional[pulumi.Input[int]] = None,
             cloud_provider_backoff_jitter: Optional[pulumi.Input[int]] = None,
             cloud_provider_backoff_retries: Optional[pulumi.Input[int]] = None,
             cloud_provider_rate_limit: Optional[pulumi.Input[bool]] = None,
             cloud_provider_rate_limit_bucket: Optional[pulumi.Input[int]] = None,
             cloud_provider_rate_limit_qps: Optional[pulumi.Input[int]] = None,
             load_balancer_sku: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             maximum_load_balancer_rule_count: Optional[pulumi.Input[int]] = None,
             primary_availability_set_name: Optional[pulumi.Input[str]] = None,
             primary_scale_set_name: Optional[pulumi.Input[str]] = None,
             resource_group: Optional[pulumi.Input[str]] = None,
             route_table_name: Optional[pulumi.Input[str]] = None,
             security_group_name: Optional[pulumi.Input[str]] = None,
             subnet_name: Optional[pulumi.Input[str]] = None,
             use_instance_metadata: Optional[pulumi.Input[bool]] = None,
             use_managed_identity_extension: Optional[pulumi.Input[bool]] = None,
             vm_type: Optional[pulumi.Input[str]] = None,
             vnet_name: Optional[pulumi.Input[str]] = None,
             vnet_resource_group: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aadClientId' in kwargs:
            aad_client_id = kwargs['aadClientId']
        if 'aadClientSecret' in kwargs:
            aad_client_secret = kwargs['aadClientSecret']
        if 'subscriptionId' in kwargs:
            subscription_id = kwargs['subscriptionId']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if 'aadClientCertPassword' in kwargs:
            aad_client_cert_password = kwargs['aadClientCertPassword']
        if 'aadClientCertPath' in kwargs:
            aad_client_cert_path = kwargs['aadClientCertPath']
        if 'cloudProviderBackoff' in kwargs:
            cloud_provider_backoff = kwargs['cloudProviderBackoff']
        if 'cloudProviderBackoffDuration' in kwargs:
            cloud_provider_backoff_duration = kwargs['cloudProviderBackoffDuration']
        if 'cloudProviderBackoffExponent' in kwargs:
            cloud_provider_backoff_exponent = kwargs['cloudProviderBackoffExponent']
        if 'cloudProviderBackoffJitter' in kwargs:
            cloud_provider_backoff_jitter = kwargs['cloudProviderBackoffJitter']
        if 'cloudProviderBackoffRetries' in kwargs:
            cloud_provider_backoff_retries = kwargs['cloudProviderBackoffRetries']
        if 'cloudProviderRateLimit' in kwargs:
            cloud_provider_rate_limit = kwargs['cloudProviderRateLimit']
        if 'cloudProviderRateLimitBucket' in kwargs:
            cloud_provider_rate_limit_bucket = kwargs['cloudProviderRateLimitBucket']
        if 'cloudProviderRateLimitQps' in kwargs:
            cloud_provider_rate_limit_qps = kwargs['cloudProviderRateLimitQps']
        if 'loadBalancerSku' in kwargs:
            load_balancer_sku = kwargs['loadBalancerSku']
        if 'maximumLoadBalancerRuleCount' in kwargs:
            maximum_load_balancer_rule_count = kwargs['maximumLoadBalancerRuleCount']
        if 'primaryAvailabilitySetName' in kwargs:
            primary_availability_set_name = kwargs['primaryAvailabilitySetName']
        if 'primaryScaleSetName' in kwargs:
            primary_scale_set_name = kwargs['primaryScaleSetName']
        if 'resourceGroup' in kwargs:
            resource_group = kwargs['resourceGroup']
        if 'routeTableName' in kwargs:
            route_table_name = kwargs['routeTableName']
        if 'securityGroupName' in kwargs:
            security_group_name = kwargs['securityGroupName']
        if 'subnetName' in kwargs:
            subnet_name = kwargs['subnetName']
        if 'useInstanceMetadata' in kwargs:
            use_instance_metadata = kwargs['useInstanceMetadata']
        if 'useManagedIdentityExtension' in kwargs:
            use_managed_identity_extension = kwargs['useManagedIdentityExtension']
        if 'vmType' in kwargs:
            vm_type = kwargs['vmType']
        if 'vnetName' in kwargs:
            vnet_name = kwargs['vnetName']
        if 'vnetResourceGroup' in kwargs:
            vnet_resource_group = kwargs['vnetResourceGroup']

        _setter("aad_client_id", aad_client_id)
        _setter("aad_client_secret", aad_client_secret)
        _setter("subscription_id", subscription_id)
        _setter("tenant_id", tenant_id)
        if aad_client_cert_password is not None:
            _setter("aad_client_cert_password", aad_client_cert_password)
        if aad_client_cert_path is not None:
            _setter("aad_client_cert_path", aad_client_cert_path)
        if cloud is not None:
            _setter("cloud", cloud)
        if cloud_provider_backoff is not None:
            _setter("cloud_provider_backoff", cloud_provider_backoff)
        if cloud_provider_backoff_duration is not None:
            _setter("cloud_provider_backoff_duration", cloud_provider_backoff_duration)
        if cloud_provider_backoff_exponent is not None:
            _setter("cloud_provider_backoff_exponent", cloud_provider_backoff_exponent)
        if cloud_provider_backoff_jitter is not None:
            _setter("cloud_provider_backoff_jitter", cloud_provider_backoff_jitter)
        if cloud_provider_backoff_retries is not None:
            _setter("cloud_provider_backoff_retries", cloud_provider_backoff_retries)
        if cloud_provider_rate_limit is not None:
            _setter("cloud_provider_rate_limit", cloud_provider_rate_limit)
        if cloud_provider_rate_limit_bucket is not None:
            _setter("cloud_provider_rate_limit_bucket", cloud_provider_rate_limit_bucket)
        if cloud_provider_rate_limit_qps is not None:
            _setter("cloud_provider_rate_limit_qps", cloud_provider_rate_limit_qps)
        if load_balancer_sku is not None:
            _setter("load_balancer_sku", load_balancer_sku)
        if location is not None:
            _setter("location", location)
        if maximum_load_balancer_rule_count is not None:
            _setter("maximum_load_balancer_rule_count", maximum_load_balancer_rule_count)
        if primary_availability_set_name is not None:
            _setter("primary_availability_set_name", primary_availability_set_name)
        if primary_scale_set_name is not None:
            _setter("primary_scale_set_name", primary_scale_set_name)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if route_table_name is not None:
            _setter("route_table_name", route_table_name)
        if security_group_name is not None:
            _setter("security_group_name", security_group_name)
        if subnet_name is not None:
            _setter("subnet_name", subnet_name)
        if use_instance_metadata is not None:
            _setter("use_instance_metadata", use_instance_metadata)
        if use_managed_identity_extension is not None:
            _setter("use_managed_identity_extension", use_managed_identity_extension)
        if vm_type is not None:
            _setter("vm_type", vm_type)
        if vnet_name is not None:
            _setter("vnet_name", vnet_name)
        if vnet_resource_group is not None:
            _setter("vnet_resource_group", vnet_resource_group)

    @property
    @pulumi.getter(name="aadClientId")
    def aad_client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aad_client_id")

    @aad_client_id.setter
    def aad_client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_client_id", value)

    @property
    @pulumi.getter(name="aadClientSecret")
    def aad_client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aad_client_secret")

    @aad_client_secret.setter
    def aad_client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "aad_client_secret", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="aadClientCertPassword")
    def aad_client_cert_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_cert_password")

    @aad_client_cert_password.setter
    def aad_client_cert_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_cert_password", value)

    @property
    @pulumi.getter(name="aadClientCertPath")
    def aad_client_cert_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aad_client_cert_path")

    @aad_client_cert_path.setter
    def aad_client_cert_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aad_client_cert_path", value)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter(name="cloudProviderBackoff")
    def cloud_provider_backoff(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cloud_provider_backoff")

    @cloud_provider_backoff.setter
    def cloud_provider_backoff(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_provider_backoff", value)

    @property
    @pulumi.getter(name="cloudProviderBackoffDuration")
    def cloud_provider_backoff_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cloud_provider_backoff_duration")

    @cloud_provider_backoff_duration.setter
    def cloud_provider_backoff_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_backoff_duration", value)

    @property
    @pulumi.getter(name="cloudProviderBackoffExponent")
    def cloud_provider_backoff_exponent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cloud_provider_backoff_exponent")

    @cloud_provider_backoff_exponent.setter
    def cloud_provider_backoff_exponent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_backoff_exponent", value)

    @property
    @pulumi.getter(name="cloudProviderBackoffJitter")
    def cloud_provider_backoff_jitter(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cloud_provider_backoff_jitter")

    @cloud_provider_backoff_jitter.setter
    def cloud_provider_backoff_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_backoff_jitter", value)

    @property
    @pulumi.getter(name="cloudProviderBackoffRetries")
    def cloud_provider_backoff_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cloud_provider_backoff_retries")

    @cloud_provider_backoff_retries.setter
    def cloud_provider_backoff_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_backoff_retries", value)

    @property
    @pulumi.getter(name="cloudProviderRateLimit")
    def cloud_provider_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cloud_provider_rate_limit")

    @cloud_provider_rate_limit.setter
    def cloud_provider_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_provider_rate_limit", value)

    @property
    @pulumi.getter(name="cloudProviderRateLimitBucket")
    def cloud_provider_rate_limit_bucket(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cloud_provider_rate_limit_bucket")

    @cloud_provider_rate_limit_bucket.setter
    def cloud_provider_rate_limit_bucket(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_rate_limit_bucket", value)

    @property
    @pulumi.getter(name="cloudProviderRateLimitQps")
    def cloud_provider_rate_limit_qps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cloud_provider_rate_limit_qps")

    @cloud_provider_rate_limit_qps.setter
    def cloud_provider_rate_limit_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloud_provider_rate_limit_qps", value)

    @property
    @pulumi.getter(name="loadBalancerSku")
    def load_balancer_sku(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_sku")

    @load_balancer_sku.setter
    def load_balancer_sku(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_sku", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="maximumLoadBalancerRuleCount")
    def maximum_load_balancer_rule_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_load_balancer_rule_count")

    @maximum_load_balancer_rule_count.setter
    def maximum_load_balancer_rule_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_load_balancer_rule_count", value)

    @property
    @pulumi.getter(name="primaryAvailabilitySetName")
    def primary_availability_set_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_availability_set_name")

    @primary_availability_set_name.setter
    def primary_availability_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_availability_set_name", value)

    @property
    @pulumi.getter(name="primaryScaleSetName")
    def primary_scale_set_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_scale_set_name")

    @primary_scale_set_name.setter
    def primary_scale_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_scale_set_name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter(name="routeTableName")
    def route_table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_table_name")

    @route_table_name.setter
    def route_table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_name", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)

    @property
    @pulumi.getter(name="subnetName")
    def subnet_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_name")

    @subnet_name.setter
    def subnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_name", value)

    @property
    @pulumi.getter(name="useInstanceMetadata")
    def use_instance_metadata(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_instance_metadata")

    @use_instance_metadata.setter
    def use_instance_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_instance_metadata", value)

    @property
    @pulumi.getter(name="useManagedIdentityExtension")
    def use_managed_identity_extension(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_managed_identity_extension")

    @use_managed_identity_extension.setter
    def use_managed_identity_extension(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_managed_identity_extension", value)

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_type")

    @vm_type.setter
    def vm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_type", value)

    @property
    @pulumi.getter(name="vnetName")
    def vnet_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vnet_name")

    @vnet_name.setter
    def vnet_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet_name", value)

    @property
    @pulumi.getter(name="vnetResourceGroup")
    def vnet_resource_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vnet_resource_group")

    @vnet_resource_group.setter
    def vnet_resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet_resource_group", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderArgs:
    def __init__(__self__, *,
                 global_: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs'],
                 block_storage: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs']] = None,
                 load_balancer: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs']] = None,
                 metadata: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs']] = None,
                 route: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteArgs']] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            global_=global_,
            block_storage=block_storage,
            load_balancer=load_balancer,
            metadata=metadata,
            route=route,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             global_: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs'],
             block_storage: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs']] = None,
             load_balancer: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs']] = None,
             metadata: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs']] = None,
             route: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'global' in kwargs:
            global_ = kwargs['global']
        if 'blockStorage' in kwargs:
            block_storage = kwargs['blockStorage']
        if 'loadBalancer' in kwargs:
            load_balancer = kwargs['loadBalancer']

        _setter("global_", global_)
        if block_storage is not None:
            _setter("block_storage", block_storage)
        if load_balancer is not None:
            _setter("load_balancer", load_balancer)
        if metadata is not None:
            _setter("metadata", metadata)
        if route is not None:
            _setter("route", route)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs']:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs']):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter(name="blockStorage")
    def block_storage(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs']]:
        return pulumi.get(self, "block_storage")

    @block_storage.setter
    def block_storage(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs']]):
        pulumi.set(self, "block_storage", value)

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs']]:
        return pulumi.get(self, "load_balancer")

    @load_balancer.setter
    def load_balancer(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs']]):
        pulumi.set(self, "load_balancer", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def route(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteArgs']]:
        return pulumi.get(self, "route")

    @route.setter
    def route(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteArgs']]):
        pulumi.set(self, "route", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs:
    def __init__(__self__, *,
                 bs_version: Optional[pulumi.Input[str]] = None,
                 ignore_volume_az: Optional[pulumi.Input[bool]] = None,
                 trust_device_path: Optional[pulumi.Input[bool]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bs_version=bs_version,
            ignore_volume_az=ignore_volume_az,
            trust_device_path=trust_device_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bs_version: Optional[pulumi.Input[str]] = None,
             ignore_volume_az: Optional[pulumi.Input[bool]] = None,
             trust_device_path: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bsVersion' in kwargs:
            bs_version = kwargs['bsVersion']
        if 'ignoreVolumeAz' in kwargs:
            ignore_volume_az = kwargs['ignoreVolumeAz']
        if 'trustDevicePath' in kwargs:
            trust_device_path = kwargs['trustDevicePath']

        if bs_version is not None:
            _setter("bs_version", bs_version)
        if ignore_volume_az is not None:
            _setter("ignore_volume_az", ignore_volume_az)
        if trust_device_path is not None:
            _setter("trust_device_path", trust_device_path)

    @property
    @pulumi.getter(name="bsVersion")
    def bs_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bs_version")

    @bs_version.setter
    def bs_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bs_version", value)

    @property
    @pulumi.getter(name="ignoreVolumeAz")
    def ignore_volume_az(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_volume_az")

    @ignore_volume_az.setter
    def ignore_volume_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_volume_az", value)

    @property
    @pulumi.getter(name="trustDevicePath")
    def trust_device_path(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trust_device_path")

    @trust_device_path.setter
    def trust_device_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_device_path", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs:
    def __init__(__self__, *,
                 auth_url: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 ca_file: Optional[pulumi.Input[str]] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 trust_id: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_url=auth_url,
            password=password,
            username=username,
            ca_file=ca_file,
            domain_id=domain_id,
            domain_name=domain_name,
            region=region,
            tenant_id=tenant_id,
            tenant_name=tenant_name,
            trust_id=trust_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_url: pulumi.Input[str],
             password: pulumi.Input[str],
             username: pulumi.Input[str],
             ca_file: Optional[pulumi.Input[str]] = None,
             domain_id: Optional[pulumi.Input[str]] = None,
             domain_name: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             tenant_name: Optional[pulumi.Input[str]] = None,
             trust_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authUrl' in kwargs:
            auth_url = kwargs['authUrl']
        if 'caFile' in kwargs:
            ca_file = kwargs['caFile']
        if 'domainId' in kwargs:
            domain_id = kwargs['domainId']
        if 'domainName' in kwargs:
            domain_name = kwargs['domainName']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if 'tenantName' in kwargs:
            tenant_name = kwargs['tenantName']
        if 'trustId' in kwargs:
            trust_id = kwargs['trustId']

        _setter("auth_url", auth_url)
        _setter("password", password)
        _setter("username", username)
        if ca_file is not None:
            _setter("ca_file", ca_file)
        if domain_id is not None:
            _setter("domain_id", domain_id)
        if domain_name is not None:
            _setter("domain_name", domain_name)
        if region is not None:
            _setter("region", region)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)
        if tenant_name is not None:
            _setter("tenant_name", tenant_name)
        if trust_id is not None:
            _setter("trust_id", trust_id)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="caFile")
    def ca_file(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_file")

    @ca_file.setter
    def ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_file", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter(name="trustId")
    def trust_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trust_id")

    @trust_id.setter
    def trust_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_id", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs:
    def __init__(__self__, *,
                 create_monitor: Optional[pulumi.Input[bool]] = None,
                 floating_network_id: Optional[pulumi.Input[str]] = None,
                 lb_method: Optional[pulumi.Input[str]] = None,
                 lb_provider: Optional[pulumi.Input[str]] = None,
                 lb_version: Optional[pulumi.Input[str]] = None,
                 manage_security_groups: Optional[pulumi.Input[bool]] = None,
                 monitor_delay: Optional[pulumi.Input[str]] = None,
                 monitor_max_retries: Optional[pulumi.Input[int]] = None,
                 monitor_timeout: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 use_octavia: Optional[pulumi.Input[bool]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_monitor=create_monitor,
            floating_network_id=floating_network_id,
            lb_method=lb_method,
            lb_provider=lb_provider,
            lb_version=lb_version,
            manage_security_groups=manage_security_groups,
            monitor_delay=monitor_delay,
            monitor_max_retries=monitor_max_retries,
            monitor_timeout=monitor_timeout,
            subnet_id=subnet_id,
            use_octavia=use_octavia,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_monitor: Optional[pulumi.Input[bool]] = None,
             floating_network_id: Optional[pulumi.Input[str]] = None,
             lb_method: Optional[pulumi.Input[str]] = None,
             lb_provider: Optional[pulumi.Input[str]] = None,
             lb_version: Optional[pulumi.Input[str]] = None,
             manage_security_groups: Optional[pulumi.Input[bool]] = None,
             monitor_delay: Optional[pulumi.Input[str]] = None,
             monitor_max_retries: Optional[pulumi.Input[int]] = None,
             monitor_timeout: Optional[pulumi.Input[str]] = None,
             subnet_id: Optional[pulumi.Input[str]] = None,
             use_octavia: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createMonitor' in kwargs:
            create_monitor = kwargs['createMonitor']
        if 'floatingNetworkId' in kwargs:
            floating_network_id = kwargs['floatingNetworkId']
        if 'lbMethod' in kwargs:
            lb_method = kwargs['lbMethod']
        if 'lbProvider' in kwargs:
            lb_provider = kwargs['lbProvider']
        if 'lbVersion' in kwargs:
            lb_version = kwargs['lbVersion']
        if 'manageSecurityGroups' in kwargs:
            manage_security_groups = kwargs['manageSecurityGroups']
        if 'monitorDelay' in kwargs:
            monitor_delay = kwargs['monitorDelay']
        if 'monitorMaxRetries' in kwargs:
            monitor_max_retries = kwargs['monitorMaxRetries']
        if 'monitorTimeout' in kwargs:
            monitor_timeout = kwargs['monitorTimeout']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if 'useOctavia' in kwargs:
            use_octavia = kwargs['useOctavia']

        if create_monitor is not None:
            _setter("create_monitor", create_monitor)
        if floating_network_id is not None:
            _setter("floating_network_id", floating_network_id)
        if lb_method is not None:
            _setter("lb_method", lb_method)
        if lb_provider is not None:
            _setter("lb_provider", lb_provider)
        if lb_version is not None:
            _setter("lb_version", lb_version)
        if manage_security_groups is not None:
            _setter("manage_security_groups", manage_security_groups)
        if monitor_delay is not None:
            _setter("monitor_delay", monitor_delay)
        if monitor_max_retries is not None:
            _setter("monitor_max_retries", monitor_max_retries)
        if monitor_timeout is not None:
            _setter("monitor_timeout", monitor_timeout)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)
        if use_octavia is not None:
            _setter("use_octavia", use_octavia)

    @property
    @pulumi.getter(name="createMonitor")
    def create_monitor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "create_monitor")

    @create_monitor.setter
    def create_monitor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_monitor", value)

    @property
    @pulumi.getter(name="floatingNetworkId")
    def floating_network_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "floating_network_id")

    @floating_network_id.setter
    def floating_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floating_network_id", value)

    @property
    @pulumi.getter(name="lbMethod")
    def lb_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lb_method")

    @lb_method.setter
    def lb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_method", value)

    @property
    @pulumi.getter(name="lbProvider")
    def lb_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lb_provider")

    @lb_provider.setter
    def lb_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_provider", value)

    @property
    @pulumi.getter(name="lbVersion")
    def lb_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lb_version")

    @lb_version.setter
    def lb_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_version", value)

    @property
    @pulumi.getter(name="manageSecurityGroups")
    def manage_security_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "manage_security_groups")

    @manage_security_groups.setter
    def manage_security_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_security_groups", value)

    @property
    @pulumi.getter(name="monitorDelay")
    def monitor_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor_delay")

    @monitor_delay.setter
    def monitor_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_delay", value)

    @property
    @pulumi.getter(name="monitorMaxRetries")
    def monitor_max_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monitor_max_retries")

    @monitor_max_retries.setter
    def monitor_max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_max_retries", value)

    @property
    @pulumi.getter(name="monitorTimeout")
    def monitor_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor_timeout")

    @monitor_timeout.setter
    def monitor_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_timeout", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="useOctavia")
    def use_octavia(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_octavia")

    @use_octavia.setter
    def use_octavia(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_octavia", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs:
    def __init__(__self__, *,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 search_order: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            request_timeout=request_timeout,
            search_order=search_order,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             request_timeout: Optional[pulumi.Input[int]] = None,
             search_order: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'requestTimeout' in kwargs:
            request_timeout = kwargs['requestTimeout']
        if 'searchOrder' in kwargs:
            search_order = kwargs['searchOrder']

        if request_timeout is not None:
            _setter("request_timeout", request_timeout)
        if search_order is not None:
            _setter("search_order", search_order)

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "request_timeout")

    @request_timeout.setter
    def request_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_timeout", value)

    @property
    @pulumi.getter(name="searchOrder")
    def search_order(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search_order")

    @search_order.setter
    def search_order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_order", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteArgs:
    def __init__(__self__, *,
                 router_id: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            router_id=router_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             router_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'routerId' in kwargs:
            router_id = kwargs['routerId']

        if router_id is not None:
            _setter("router_id", router_id)

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_id", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderArgs:
    def __init__(__self__, *,
                 virtual_centers: pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs']]],
                 workspace: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs'],
                 disk: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskArgs']] = None,
                 global_: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalArgs']] = None,
                 network: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkArgs']] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            virtual_centers=virtual_centers,
            workspace=workspace,
            disk=disk,
            global_=global_,
            network=network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             virtual_centers: pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs']]],
             workspace: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs'],
             disk: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskArgs']] = None,
             global_: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalArgs']] = None,
             network: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'virtualCenters' in kwargs:
            virtual_centers = kwargs['virtualCenters']
        if 'global' in kwargs:
            global_ = kwargs['global']

        _setter("virtual_centers", virtual_centers)
        _setter("workspace", workspace)
        if disk is not None:
            _setter("disk", disk)
        if global_ is not None:
            _setter("global_", global_)
        if network is not None:
            _setter("network", network)

    @property
    @pulumi.getter(name="virtualCenters")
    def virtual_centers(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs']]]:
        return pulumi.get(self, "virtual_centers")

    @virtual_centers.setter
    def virtual_centers(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs']]]):
        pulumi.set(self, "virtual_centers", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs']:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs']):
        pulumi.set(self, "workspace", value)

    @property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskArgs']]:
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskArgs']]):
        pulumi.set(self, "disk", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalArgs']]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalArgs']]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkArgs']]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkArgs']]):
        pulumi.set(self, "network", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskArgs:
    def __init__(__self__, *,
                 scsi_controller_type: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scsi_controller_type=scsi_controller_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scsi_controller_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'scsiControllerType' in kwargs:
            scsi_controller_type = kwargs['scsiControllerType']

        if scsi_controller_type is not None:
            _setter("scsi_controller_type", scsi_controller_type)

    @property
    @pulumi.getter(name="scsiControllerType")
    def scsi_controller_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scsi_controller_type")

    @scsi_controller_type.setter
    def scsi_controller_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scsi_controller_type", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalArgs:
    def __init__(__self__, *,
                 datacenters: Optional[pulumi.Input[str]] = None,
                 insecure_flag: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 soap_roundtrip_count: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenters=datacenters,
            insecure_flag=insecure_flag,
            password=password,
            port=port,
            soap_roundtrip_count=soap_roundtrip_count,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenters: Optional[pulumi.Input[str]] = None,
             insecure_flag: Optional[pulumi.Input[bool]] = None,
             password: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[str]] = None,
             soap_roundtrip_count: Optional[pulumi.Input[int]] = None,
             user: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'insecureFlag' in kwargs:
            insecure_flag = kwargs['insecureFlag']
        if 'soapRoundtripCount' in kwargs:
            soap_roundtrip_count = kwargs['soapRoundtripCount']

        if datacenters is not None:
            _setter("datacenters", datacenters)
        if insecure_flag is not None:
            _setter("insecure_flag", insecure_flag)
        if password is not None:
            _setter("password", password)
        if port is not None:
            _setter("port", port)
        if soap_roundtrip_count is not None:
            _setter("soap_roundtrip_count", soap_roundtrip_count)
        if user is not None:
            _setter("user", user)

    @property
    @pulumi.getter
    def datacenters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datacenters")

    @datacenters.setter
    def datacenters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenters", value)

    @property
    @pulumi.getter(name="insecureFlag")
    def insecure_flag(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "insecure_flag")

    @insecure_flag.setter
    def insecure_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_flag", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="soapRoundtripCount")
    def soap_roundtrip_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "soap_roundtrip_count")

    @soap_roundtrip_count.setter
    def soap_roundtrip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "soap_roundtrip_count", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkArgs:
    def __init__(__self__, *,
                 public_network: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            public_network=public_network,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             public_network: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'publicNetwork' in kwargs:
            public_network = kwargs['publicNetwork']

        if public_network is not None:
            _setter("public_network", public_network)

    @property
    @pulumi.getter(name="publicNetwork")
    def public_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_network")

    @public_network.setter
    def public_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_network", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs:
    def __init__(__self__, *,
                 datacenters: pulumi.Input[str],
                 name: pulumi.Input[str],
                 password: pulumi.Input[str],
                 user: pulumi.Input[str],
                 port: Optional[pulumi.Input[str]] = None,
                 soap_roundtrip_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The cluster template name (string)
        """
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCenterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenters=datacenters,
            name=name,
            password=password,
            user=user,
            port=port,
            soap_roundtrip_count=soap_roundtrip_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenters: pulumi.Input[str],
             name: pulumi.Input[str],
             password: pulumi.Input[str],
             user: pulumi.Input[str],
             port: Optional[pulumi.Input[str]] = None,
             soap_roundtrip_count: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'soapRoundtripCount' in kwargs:
            soap_roundtrip_count = kwargs['soapRoundtripCount']

        _setter("datacenters", datacenters)
        _setter("name", name)
        _setter("password", password)
        _setter("user", user)
        if port is not None:
            _setter("port", port)
        if soap_roundtrip_count is not None:
            _setter("soap_roundtrip_count", soap_roundtrip_count)

    @property
    @pulumi.getter
    def datacenters(self) -> pulumi.Input[str]:
        return pulumi.get(self, "datacenters")

    @datacenters.setter
    def datacenters(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenters", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The cluster template name (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="soapRoundtripCount")
    def soap_roundtrip_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "soap_roundtrip_count")

    @soap_roundtrip_count.setter
    def soap_roundtrip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "soap_roundtrip_count", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs:
    def __init__(__self__, *,
                 datacenter: pulumi.Input[str],
                 folder: pulumi.Input[str],
                 server: pulumi.Input[str],
                 default_datastore: Optional[pulumi.Input[str]] = None,
                 resourcepool_path: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            datacenter=datacenter,
            folder=folder,
            server=server,
            default_datastore=default_datastore,
            resourcepool_path=resourcepool_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             datacenter: pulumi.Input[str],
             folder: pulumi.Input[str],
             server: pulumi.Input[str],
             default_datastore: Optional[pulumi.Input[str]] = None,
             resourcepool_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultDatastore' in kwargs:
            default_datastore = kwargs['defaultDatastore']
        if 'resourcepoolPath' in kwargs:
            resourcepool_path = kwargs['resourcepoolPath']

        _setter("datacenter", datacenter)
        _setter("folder", folder)
        _setter("server", server)
        if default_datastore is not None:
            _setter("default_datastore", default_datastore)
        if resourcepool_path is not None:
            _setter("resourcepool_path", resourcepool_path)

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter
    def folder(self) -> pulumi.Input[str]:
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: pulumi.Input[str]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="defaultDatastore")
    def default_datastore(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_datastore")

    @default_datastore.setter
    def default_datastore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_datastore", value)

    @property
    @pulumi.getter(name="resourcepoolPath")
    def resourcepool_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resourcepool_path")

    @resourcepool_path.setter
    def resourcepool_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resourcepool_path", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsArgs:
    def __init__(__self__, *,
                 linear_autoscaler_params: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParamsArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 nodelocal: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocalArgs']] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 reverse_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsTolerationArgs']]]] = None,
                 update_strategy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyArgs']] = None,
                 upstream_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linear_autoscaler_params=linear_autoscaler_params,
            node_selector=node_selector,
            nodelocal=nodelocal,
            options=options,
            provider=provider,
            reverse_cidrs=reverse_cidrs,
            tolerations=tolerations,
            update_strategy=update_strategy,
            upstream_nameservers=upstream_nameservers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linear_autoscaler_params: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParamsArgs']] = None,
             node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             nodelocal: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocalArgs']] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             provider: Optional[pulumi.Input[str]] = None,
             reverse_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsTolerationArgs']]]] = None,
             update_strategy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyArgs']] = None,
             upstream_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'linearAutoscalerParams' in kwargs:
            linear_autoscaler_params = kwargs['linearAutoscalerParams']
        if 'nodeSelector' in kwargs:
            node_selector = kwargs['nodeSelector']
        if 'reverseCidrs' in kwargs:
            reverse_cidrs = kwargs['reverseCidrs']
        if 'updateStrategy' in kwargs:
            update_strategy = kwargs['updateStrategy']
        if 'upstreamNameservers' in kwargs:
            upstream_nameservers = kwargs['upstreamNameservers']

        if linear_autoscaler_params is not None:
            _setter("linear_autoscaler_params", linear_autoscaler_params)
        if node_selector is not None:
            _setter("node_selector", node_selector)
        if nodelocal is not None:
            _setter("nodelocal", nodelocal)
        if options is not None:
            _setter("options", options)
        if provider is not None:
            _setter("provider", provider)
        if reverse_cidrs is not None:
            _setter("reverse_cidrs", reverse_cidrs)
        if tolerations is not None:
            _setter("tolerations", tolerations)
        if update_strategy is not None:
            _setter("update_strategy", update_strategy)
        if upstream_nameservers is not None:
            _setter("upstream_nameservers", upstream_nameservers)

    @property
    @pulumi.getter(name="linearAutoscalerParams")
    def linear_autoscaler_params(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParamsArgs']]:
        return pulumi.get(self, "linear_autoscaler_params")

    @linear_autoscaler_params.setter
    def linear_autoscaler_params(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParamsArgs']]):
        pulumi.set(self, "linear_autoscaler_params", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter
    def nodelocal(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocalArgs']]:
        return pulumi.get(self, "nodelocal")

    @nodelocal.setter
    def nodelocal(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocalArgs']]):
        pulumi.set(self, "nodelocal", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="reverseCidrs")
    def reverse_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reverse_cidrs")

    @reverse_cidrs.setter
    def reverse_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reverse_cidrs", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsTolerationArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyArgs']]:
        return pulumi.get(self, "update_strategy")

    @update_strategy.setter
    def update_strategy(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyArgs']]):
        pulumi.set(self, "update_strategy", value)

    @property
    @pulumi.getter(name="upstreamNameservers")
    def upstream_nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "upstream_nameservers")

    @upstream_nameservers.setter
    def upstream_nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "upstream_nameservers", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParamsArgs:
    def __init__(__self__, *,
                 cores_per_replica: Optional[pulumi.Input[float]] = None,
                 max: Optional[pulumi.Input[int]] = None,
                 min: Optional[pulumi.Input[int]] = None,
                 nodes_per_replica: Optional[pulumi.Input[float]] = None,
                 prevent_single_point_failure: Optional[pulumi.Input[bool]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsLinearAutoscalerParamsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cores_per_replica=cores_per_replica,
            max=max,
            min=min,
            nodes_per_replica=nodes_per_replica,
            prevent_single_point_failure=prevent_single_point_failure,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cores_per_replica: Optional[pulumi.Input[float]] = None,
             max: Optional[pulumi.Input[int]] = None,
             min: Optional[pulumi.Input[int]] = None,
             nodes_per_replica: Optional[pulumi.Input[float]] = None,
             prevent_single_point_failure: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'coresPerReplica' in kwargs:
            cores_per_replica = kwargs['coresPerReplica']
        if 'nodesPerReplica' in kwargs:
            nodes_per_replica = kwargs['nodesPerReplica']
        if 'preventSinglePointFailure' in kwargs:
            prevent_single_point_failure = kwargs['preventSinglePointFailure']

        if cores_per_replica is not None:
            _setter("cores_per_replica", cores_per_replica)
        if max is not None:
            _setter("max", max)
        if min is not None:
            _setter("min", min)
        if nodes_per_replica is not None:
            _setter("nodes_per_replica", nodes_per_replica)
        if prevent_single_point_failure is not None:
            _setter("prevent_single_point_failure", prevent_single_point_failure)

    @property
    @pulumi.getter(name="coresPerReplica")
    def cores_per_replica(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "cores_per_replica")

    @cores_per_replica.setter
    def cores_per_replica(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cores_per_replica", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter(name="nodesPerReplica")
    def nodes_per_replica(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nodes_per_replica")

    @nodes_per_replica.setter
    def nodes_per_replica(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nodes_per_replica", value)

    @property
    @pulumi.getter(name="preventSinglePointFailure")
    def prevent_single_point_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prevent_single_point_failure")

    @prevent_single_point_failure.setter
    def prevent_single_point_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prevent_single_point_failure", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocalArgs:
    def __init__(__self__, *,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsNodelocalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_address=ip_address,
            node_selector=node_selector,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_address: Optional[pulumi.Input[str]] = None,
             node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ipAddress' in kwargs:
            ip_address = kwargs['ipAddress']
        if 'nodeSelector' in kwargs:
            node_selector = kwargs['nodeSelector']

        if ip_address is not None:
            _setter("ip_address", ip_address)
        if node_selector is not None:
            _setter("node_selector", node_selector)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_selector", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdateArgs']] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rolling_update=rolling_update,
            strategy=strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rolling_update: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdateArgs']] = None,
             strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rollingUpdate' in kwargs:
            rolling_update = kwargs['rollingUpdate']

        if rolling_update is not None:
            _setter("rolling_update", rolling_update)
        if strategy is not None:
            _setter("strategy", strategy)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input[int]] = None,
                 max_unavailable: Optional[pulumi.Input[int]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigDnsUpdateStrategyRollingUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_surge=max_surge,
            max_unavailable=max_unavailable,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_surge: Optional[pulumi.Input[int]] = None,
             max_unavailable: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxSurge' in kwargs:
            max_surge = kwargs['maxSurge']
        if 'maxUnavailable' in kwargs:
            max_unavailable = kwargs['maxUnavailable']

        if max_surge is not None:
            _setter("max_surge", max_surge)
        if max_unavailable is not None:
            _setter("max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressArgs:
    def __init__(__self__, *,
                 default_backend: Optional[pulumi.Input[bool]] = None,
                 dns_policy: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 http_port: Optional[pulumi.Input[int]] = None,
                 https_port: Optional[pulumi.Input[int]] = None,
                 network_mode: Optional[pulumi.Input[str]] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressTolerationArgs']]]] = None,
                 update_strategy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyArgs']] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_backend=default_backend,
            dns_policy=dns_policy,
            extra_args=extra_args,
            http_port=http_port,
            https_port=https_port,
            network_mode=network_mode,
            node_selector=node_selector,
            options=options,
            provider=provider,
            tolerations=tolerations,
            update_strategy=update_strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_backend: Optional[pulumi.Input[bool]] = None,
             dns_policy: Optional[pulumi.Input[str]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             http_port: Optional[pulumi.Input[int]] = None,
             https_port: Optional[pulumi.Input[int]] = None,
             network_mode: Optional[pulumi.Input[str]] = None,
             node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             provider: Optional[pulumi.Input[str]] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressTolerationArgs']]]] = None,
             update_strategy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultBackend' in kwargs:
            default_backend = kwargs['defaultBackend']
        if 'dnsPolicy' in kwargs:
            dns_policy = kwargs['dnsPolicy']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'httpPort' in kwargs:
            http_port = kwargs['httpPort']
        if 'httpsPort' in kwargs:
            https_port = kwargs['httpsPort']
        if 'networkMode' in kwargs:
            network_mode = kwargs['networkMode']
        if 'nodeSelector' in kwargs:
            node_selector = kwargs['nodeSelector']
        if 'updateStrategy' in kwargs:
            update_strategy = kwargs['updateStrategy']

        if default_backend is not None:
            _setter("default_backend", default_backend)
        if dns_policy is not None:
            _setter("dns_policy", dns_policy)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if http_port is not None:
            _setter("http_port", http_port)
        if https_port is not None:
            _setter("https_port", https_port)
        if network_mode is not None:
            _setter("network_mode", network_mode)
        if node_selector is not None:
            _setter("node_selector", node_selector)
        if options is not None:
            _setter("options", options)
        if provider is not None:
            _setter("provider", provider)
        if tolerations is not None:
            _setter("tolerations", tolerations)
        if update_strategy is not None:
            _setter("update_strategy", update_strategy)

    @property
    @pulumi.getter(name="defaultBackend")
    def default_backend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default_backend")

    @default_backend.setter
    def default_backend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_backend", value)

    @property
    @pulumi.getter(name="dnsPolicy")
    def dns_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_policy")

    @dns_policy.setter
    def dns_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_policy", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_mode")

    @network_mode.setter
    def network_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_mode", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressTolerationArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyArgs']]:
        return pulumi.get(self, "update_strategy")

    @update_strategy.setter
    def update_strategy(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyArgs']]):
        pulumi.set(self, "update_strategy", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdateArgs']] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rolling_update=rolling_update,
            strategy=strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rolling_update: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdateArgs']] = None,
             strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rollingUpdate' in kwargs:
            rolling_update = kwargs['rollingUpdate']

        if rolling_update is not None:
            _setter("rolling_update", rolling_update)
        if strategy is not None:
            _setter("strategy", strategy)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_unavailable: Optional[pulumi.Input[int]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigIngressUpdateStrategyRollingUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_unavailable=max_unavailable,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_unavailable: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxUnavailable' in kwargs:
            max_unavailable = kwargs['maxUnavailable']

        if max_unavailable is not None:
            _setter("max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringArgs:
    def __init__(__self__, *,
                 node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringTolerationArgs']]]] = None,
                 update_strategy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyArgs']] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            node_selector=node_selector,
            options=options,
            provider=provider,
            replicas=replicas,
            tolerations=tolerations,
            update_strategy=update_strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             node_selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             provider: Optional[pulumi.Input[str]] = None,
             replicas: Optional[pulumi.Input[int]] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringTolerationArgs']]]] = None,
             update_strategy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'nodeSelector' in kwargs:
            node_selector = kwargs['nodeSelector']
        if 'updateStrategy' in kwargs:
            update_strategy = kwargs['updateStrategy']

        if node_selector is not None:
            _setter("node_selector", node_selector)
        if options is not None:
            _setter("options", options)
        if provider is not None:
            _setter("provider", provider)
        if replicas is not None:
            _setter("replicas", replicas)
        if tolerations is not None:
            _setter("tolerations", tolerations)
        if update_strategy is not None:
            _setter("update_strategy", update_strategy)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringTolerationArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="updateStrategy")
    def update_strategy(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyArgs']]:
        return pulumi.get(self, "update_strategy")

    @update_strategy.setter
    def update_strategy(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyArgs']]):
        pulumi.set(self, "update_strategy", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdateArgs']] = None,
                 strategy: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rolling_update=rolling_update,
            strategy=strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rolling_update: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdateArgs']] = None,
             strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rollingUpdate' in kwargs:
            rolling_update = kwargs['rollingUpdate']

        if rolling_update is not None:
            _setter("rolling_update", rolling_update)
        if strategy is not None:
            _setter("strategy", strategy)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdateArgs']]:
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input[int]] = None,
                 max_unavailable: Optional[pulumi.Input[int]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigMonitoringUpdateStrategyRollingUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_surge=max_surge,
            max_unavailable=max_unavailable,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_surge: Optional[pulumi.Input[int]] = None,
             max_unavailable: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxSurge' in kwargs:
            max_surge = kwargs['maxSurge']
        if 'maxUnavailable' in kwargs:
            max_unavailable = kwargs['maxUnavailable']

        if max_surge is not None:
            _setter("max_surge", max_surge)
        if max_unavailable is not None:
            _setter("max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs:
    def __init__(__self__, *,
                 aci_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProviderArgs']] = None,
                 calico_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProviderArgs']] = None,
                 canal_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProviderArgs']] = None,
                 flannel_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProviderArgs']] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 plugin: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkTolerationArgs']]]] = None,
                 weave_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProviderArgs']] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aci_network_provider=aci_network_provider,
            calico_network_provider=calico_network_provider,
            canal_network_provider=canal_network_provider,
            flannel_network_provider=flannel_network_provider,
            mtu=mtu,
            options=options,
            plugin=plugin,
            tolerations=tolerations,
            weave_network_provider=weave_network_provider,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aci_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProviderArgs']] = None,
             calico_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProviderArgs']] = None,
             canal_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProviderArgs']] = None,
             flannel_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProviderArgs']] = None,
             mtu: Optional[pulumi.Input[int]] = None,
             options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             plugin: Optional[pulumi.Input[str]] = None,
             tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkTolerationArgs']]]] = None,
             weave_network_provider: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProviderArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aciNetworkProvider' in kwargs:
            aci_network_provider = kwargs['aciNetworkProvider']
        if 'calicoNetworkProvider' in kwargs:
            calico_network_provider = kwargs['calicoNetworkProvider']
        if 'canalNetworkProvider' in kwargs:
            canal_network_provider = kwargs['canalNetworkProvider']
        if 'flannelNetworkProvider' in kwargs:
            flannel_network_provider = kwargs['flannelNetworkProvider']
        if 'weaveNetworkProvider' in kwargs:
            weave_network_provider = kwargs['weaveNetworkProvider']

        if aci_network_provider is not None:
            _setter("aci_network_provider", aci_network_provider)
        if calico_network_provider is not None:
            _setter("calico_network_provider", calico_network_provider)
        if canal_network_provider is not None:
            _setter("canal_network_provider", canal_network_provider)
        if flannel_network_provider is not None:
            _setter("flannel_network_provider", flannel_network_provider)
        if mtu is not None:
            _setter("mtu", mtu)
        if options is not None:
            _setter("options", options)
        if plugin is not None:
            _setter("plugin", plugin)
        if tolerations is not None:
            _setter("tolerations", tolerations)
        if weave_network_provider is not None:
            _setter("weave_network_provider", weave_network_provider)

    @property
    @pulumi.getter(name="aciNetworkProvider")
    def aci_network_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProviderArgs']]:
        return pulumi.get(self, "aci_network_provider")

    @aci_network_provider.setter
    def aci_network_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProviderArgs']]):
        pulumi.set(self, "aci_network_provider", value)

    @property
    @pulumi.getter(name="calicoNetworkProvider")
    def calico_network_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProviderArgs']]:
        return pulumi.get(self, "calico_network_provider")

    @calico_network_provider.setter
    def calico_network_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProviderArgs']]):
        pulumi.set(self, "calico_network_provider", value)

    @property
    @pulumi.getter(name="canalNetworkProvider")
    def canal_network_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProviderArgs']]:
        return pulumi.get(self, "canal_network_provider")

    @canal_network_provider.setter
    def canal_network_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProviderArgs']]):
        pulumi.set(self, "canal_network_provider", value)

    @property
    @pulumi.getter(name="flannelNetworkProvider")
    def flannel_network_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProviderArgs']]:
        return pulumi.get(self, "flannel_network_provider")

    @flannel_network_provider.setter
    def flannel_network_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProviderArgs']]):
        pulumi.set(self, "flannel_network_provider", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkTolerationArgs']]]]:
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkTolerationArgs']]]]):
        pulumi.set(self, "tolerations", value)

    @property
    @pulumi.getter(name="weaveNetworkProvider")
    def weave_network_provider(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProviderArgs']]:
        return pulumi.get(self, "weave_network_provider")

    @weave_network_provider.setter
    def weave_network_provider(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProviderArgs']]):
        pulumi.set(self, "weave_network_provider", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProviderArgs:
    def __init__(__self__, *,
                 aep: pulumi.Input[str],
                 apic_hosts: pulumi.Input[Sequence[pulumi.Input[str]]],
                 apic_user_crt: pulumi.Input[str],
                 apic_user_key: pulumi.Input[str],
                 apic_user_name: pulumi.Input[str],
                 encap_type: pulumi.Input[str],
                 extern_dynamic: pulumi.Input[str],
                 extern_static: pulumi.Input[str],
                 kube_api_vlan: pulumi.Input[str],
                 l3out: pulumi.Input[str],
                 l3out_external_networks: pulumi.Input[Sequence[pulumi.Input[str]]],
                 mcast_range_end: pulumi.Input[str],
                 mcast_range_start: pulumi.Input[str],
                 node_subnet: pulumi.Input[str],
                 node_svc_subnet: pulumi.Input[str],
                 service_vlan: pulumi.Input[str],
                 system_id: pulumi.Input[str],
                 token: pulumi.Input[str],
                 vrf_name: pulumi.Input[str],
                 vrf_tenant: pulumi.Input[str],
                 apic_refresh_ticker_adjust: Optional[pulumi.Input[str]] = None,
                 apic_refresh_time: Optional[pulumi.Input[str]] = None,
                 apic_subscription_delay: Optional[pulumi.Input[str]] = None,
                 capic: Optional[pulumi.Input[str]] = None,
                 controller_log_level: Optional[pulumi.Input[str]] = None,
                 disable_periodic_snat_global_info_sync: Optional[pulumi.Input[str]] = None,
                 disable_wait_for_network: Optional[pulumi.Input[str]] = None,
                 drop_log_enable: Optional[pulumi.Input[str]] = None,
                 duration_wait_for_network: Optional[pulumi.Input[str]] = None,
                 enable_endpoint_slice: Optional[pulumi.Input[str]] = None,
                 ep_registry: Optional[pulumi.Input[str]] = None,
                 gbp_pod_subnet: Optional[pulumi.Input[str]] = None,
                 host_agent_log_level: Optional[pulumi.Input[str]] = None,
                 image_pull_policy: Optional[pulumi.Input[str]] = None,
                 image_pull_secret: Optional[pulumi.Input[str]] = None,
                 infra_vlan: Optional[pulumi.Input[str]] = None,
                 install_istio: Optional[pulumi.Input[str]] = None,
                 istio_profile: Optional[pulumi.Input[str]] = None,
                 kafka_brokers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kafka_client_crt: Optional[pulumi.Input[str]] = None,
                 kafka_client_key: Optional[pulumi.Input[str]] = None,
                 max_nodes_svc_graph: Optional[pulumi.Input[str]] = None,
                 mtu_head_room: Optional[pulumi.Input[str]] = None,
                 multus_disable: Optional[pulumi.Input[str]] = None,
                 no_priority_class: Optional[pulumi.Input[str]] = None,
                 node_pod_if_enable: Optional[pulumi.Input[str]] = None,
                 opflex_client_ssl: Optional[pulumi.Input[str]] = None,
                 opflex_device_delete_timeout: Optional[pulumi.Input[str]] = None,
                 opflex_log_level: Optional[pulumi.Input[str]] = None,
                 opflex_mode: Optional[pulumi.Input[str]] = None,
                 opflex_server_port: Optional[pulumi.Input[str]] = None,
                 overlay_vrf_name: Optional[pulumi.Input[str]] = None,
                 ovs_memory_limit: Optional[pulumi.Input[str]] = None,
                 pbr_tracking_non_snat: Optional[pulumi.Input[str]] = None,
                 pod_subnet_chunk_size: Optional[pulumi.Input[str]] = None,
                 run_gbp_container: Optional[pulumi.Input[str]] = None,
                 run_opflex_server_container: Optional[pulumi.Input[str]] = None,
                 service_monitor_interval: Optional[pulumi.Input[str]] = None,
                 snat_contract_scope: Optional[pulumi.Input[str]] = None,
                 snat_namespace: Optional[pulumi.Input[str]] = None,
                 snat_port_range_end: Optional[pulumi.Input[str]] = None,
                 snat_port_range_start: Optional[pulumi.Input[str]] = None,
                 snat_ports_per_node: Optional[pulumi.Input[str]] = None,
                 sriov_enable: Optional[pulumi.Input[str]] = None,
                 subnet_domain_name: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 use_aci_anywhere_crd: Optional[pulumi.Input[str]] = None,
                 use_aci_cni_priority_class: Optional[pulumi.Input[str]] = None,
                 use_cluster_role: Optional[pulumi.Input[str]] = None,
                 use_host_netns_volume: Optional[pulumi.Input[str]] = None,
                 use_opflex_server_volume: Optional[pulumi.Input[str]] = None,
                 use_privileged_container: Optional[pulumi.Input[str]] = None,
                 vmm_controller: Optional[pulumi.Input[str]] = None,
                 vmm_domain: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aep=aep,
            apic_hosts=apic_hosts,
            apic_user_crt=apic_user_crt,
            apic_user_key=apic_user_key,
            apic_user_name=apic_user_name,
            encap_type=encap_type,
            extern_dynamic=extern_dynamic,
            extern_static=extern_static,
            kube_api_vlan=kube_api_vlan,
            l3out=l3out,
            l3out_external_networks=l3out_external_networks,
            mcast_range_end=mcast_range_end,
            mcast_range_start=mcast_range_start,
            node_subnet=node_subnet,
            node_svc_subnet=node_svc_subnet,
            service_vlan=service_vlan,
            system_id=system_id,
            token=token,
            vrf_name=vrf_name,
            vrf_tenant=vrf_tenant,
            apic_refresh_ticker_adjust=apic_refresh_ticker_adjust,
            apic_refresh_time=apic_refresh_time,
            apic_subscription_delay=apic_subscription_delay,
            capic=capic,
            controller_log_level=controller_log_level,
            disable_periodic_snat_global_info_sync=disable_periodic_snat_global_info_sync,
            disable_wait_for_network=disable_wait_for_network,
            drop_log_enable=drop_log_enable,
            duration_wait_for_network=duration_wait_for_network,
            enable_endpoint_slice=enable_endpoint_slice,
            ep_registry=ep_registry,
            gbp_pod_subnet=gbp_pod_subnet,
            host_agent_log_level=host_agent_log_level,
            image_pull_policy=image_pull_policy,
            image_pull_secret=image_pull_secret,
            infra_vlan=infra_vlan,
            install_istio=install_istio,
            istio_profile=istio_profile,
            kafka_brokers=kafka_brokers,
            kafka_client_crt=kafka_client_crt,
            kafka_client_key=kafka_client_key,
            max_nodes_svc_graph=max_nodes_svc_graph,
            mtu_head_room=mtu_head_room,
            multus_disable=multus_disable,
            no_priority_class=no_priority_class,
            node_pod_if_enable=node_pod_if_enable,
            opflex_client_ssl=opflex_client_ssl,
            opflex_device_delete_timeout=opflex_device_delete_timeout,
            opflex_log_level=opflex_log_level,
            opflex_mode=opflex_mode,
            opflex_server_port=opflex_server_port,
            overlay_vrf_name=overlay_vrf_name,
            ovs_memory_limit=ovs_memory_limit,
            pbr_tracking_non_snat=pbr_tracking_non_snat,
            pod_subnet_chunk_size=pod_subnet_chunk_size,
            run_gbp_container=run_gbp_container,
            run_opflex_server_container=run_opflex_server_container,
            service_monitor_interval=service_monitor_interval,
            snat_contract_scope=snat_contract_scope,
            snat_namespace=snat_namespace,
            snat_port_range_end=snat_port_range_end,
            snat_port_range_start=snat_port_range_start,
            snat_ports_per_node=snat_ports_per_node,
            sriov_enable=sriov_enable,
            subnet_domain_name=subnet_domain_name,
            tenant=tenant,
            use_aci_anywhere_crd=use_aci_anywhere_crd,
            use_aci_cni_priority_class=use_aci_cni_priority_class,
            use_cluster_role=use_cluster_role,
            use_host_netns_volume=use_host_netns_volume,
            use_opflex_server_volume=use_opflex_server_volume,
            use_privileged_container=use_privileged_container,
            vmm_controller=vmm_controller,
            vmm_domain=vmm_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aep: pulumi.Input[str],
             apic_hosts: pulumi.Input[Sequence[pulumi.Input[str]]],
             apic_user_crt: pulumi.Input[str],
             apic_user_key: pulumi.Input[str],
             apic_user_name: pulumi.Input[str],
             encap_type: pulumi.Input[str],
             extern_dynamic: pulumi.Input[str],
             extern_static: pulumi.Input[str],
             kube_api_vlan: pulumi.Input[str],
             l3out: pulumi.Input[str],
             l3out_external_networks: pulumi.Input[Sequence[pulumi.Input[str]]],
             mcast_range_end: pulumi.Input[str],
             mcast_range_start: pulumi.Input[str],
             node_subnet: pulumi.Input[str],
             node_svc_subnet: pulumi.Input[str],
             service_vlan: pulumi.Input[str],
             system_id: pulumi.Input[str],
             token: pulumi.Input[str],
             vrf_name: pulumi.Input[str],
             vrf_tenant: pulumi.Input[str],
             apic_refresh_ticker_adjust: Optional[pulumi.Input[str]] = None,
             apic_refresh_time: Optional[pulumi.Input[str]] = None,
             apic_subscription_delay: Optional[pulumi.Input[str]] = None,
             capic: Optional[pulumi.Input[str]] = None,
             controller_log_level: Optional[pulumi.Input[str]] = None,
             disable_periodic_snat_global_info_sync: Optional[pulumi.Input[str]] = None,
             disable_wait_for_network: Optional[pulumi.Input[str]] = None,
             drop_log_enable: Optional[pulumi.Input[str]] = None,
             duration_wait_for_network: Optional[pulumi.Input[str]] = None,
             enable_endpoint_slice: Optional[pulumi.Input[str]] = None,
             ep_registry: Optional[pulumi.Input[str]] = None,
             gbp_pod_subnet: Optional[pulumi.Input[str]] = None,
             host_agent_log_level: Optional[pulumi.Input[str]] = None,
             image_pull_policy: Optional[pulumi.Input[str]] = None,
             image_pull_secret: Optional[pulumi.Input[str]] = None,
             infra_vlan: Optional[pulumi.Input[str]] = None,
             install_istio: Optional[pulumi.Input[str]] = None,
             istio_profile: Optional[pulumi.Input[str]] = None,
             kafka_brokers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             kafka_client_crt: Optional[pulumi.Input[str]] = None,
             kafka_client_key: Optional[pulumi.Input[str]] = None,
             max_nodes_svc_graph: Optional[pulumi.Input[str]] = None,
             mtu_head_room: Optional[pulumi.Input[str]] = None,
             multus_disable: Optional[pulumi.Input[str]] = None,
             no_priority_class: Optional[pulumi.Input[str]] = None,
             node_pod_if_enable: Optional[pulumi.Input[str]] = None,
             opflex_client_ssl: Optional[pulumi.Input[str]] = None,
             opflex_device_delete_timeout: Optional[pulumi.Input[str]] = None,
             opflex_log_level: Optional[pulumi.Input[str]] = None,
             opflex_mode: Optional[pulumi.Input[str]] = None,
             opflex_server_port: Optional[pulumi.Input[str]] = None,
             overlay_vrf_name: Optional[pulumi.Input[str]] = None,
             ovs_memory_limit: Optional[pulumi.Input[str]] = None,
             pbr_tracking_non_snat: Optional[pulumi.Input[str]] = None,
             pod_subnet_chunk_size: Optional[pulumi.Input[str]] = None,
             run_gbp_container: Optional[pulumi.Input[str]] = None,
             run_opflex_server_container: Optional[pulumi.Input[str]] = None,
             service_monitor_interval: Optional[pulumi.Input[str]] = None,
             snat_contract_scope: Optional[pulumi.Input[str]] = None,
             snat_namespace: Optional[pulumi.Input[str]] = None,
             snat_port_range_end: Optional[pulumi.Input[str]] = None,
             snat_port_range_start: Optional[pulumi.Input[str]] = None,
             snat_ports_per_node: Optional[pulumi.Input[str]] = None,
             sriov_enable: Optional[pulumi.Input[str]] = None,
             subnet_domain_name: Optional[pulumi.Input[str]] = None,
             tenant: Optional[pulumi.Input[str]] = None,
             use_aci_anywhere_crd: Optional[pulumi.Input[str]] = None,
             use_aci_cni_priority_class: Optional[pulumi.Input[str]] = None,
             use_cluster_role: Optional[pulumi.Input[str]] = None,
             use_host_netns_volume: Optional[pulumi.Input[str]] = None,
             use_opflex_server_volume: Optional[pulumi.Input[str]] = None,
             use_privileged_container: Optional[pulumi.Input[str]] = None,
             vmm_controller: Optional[pulumi.Input[str]] = None,
             vmm_domain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apicHosts' in kwargs:
            apic_hosts = kwargs['apicHosts']
        if 'apicUserCrt' in kwargs:
            apic_user_crt = kwargs['apicUserCrt']
        if 'apicUserKey' in kwargs:
            apic_user_key = kwargs['apicUserKey']
        if 'apicUserName' in kwargs:
            apic_user_name = kwargs['apicUserName']
        if 'encapType' in kwargs:
            encap_type = kwargs['encapType']
        if 'externDynamic' in kwargs:
            extern_dynamic = kwargs['externDynamic']
        if 'externStatic' in kwargs:
            extern_static = kwargs['externStatic']
        if 'kubeApiVlan' in kwargs:
            kube_api_vlan = kwargs['kubeApiVlan']
        if 'l3outExternalNetworks' in kwargs:
            l3out_external_networks = kwargs['l3outExternalNetworks']
        if 'mcastRangeEnd' in kwargs:
            mcast_range_end = kwargs['mcastRangeEnd']
        if 'mcastRangeStart' in kwargs:
            mcast_range_start = kwargs['mcastRangeStart']
        if 'nodeSubnet' in kwargs:
            node_subnet = kwargs['nodeSubnet']
        if 'nodeSvcSubnet' in kwargs:
            node_svc_subnet = kwargs['nodeSvcSubnet']
        if 'serviceVlan' in kwargs:
            service_vlan = kwargs['serviceVlan']
        if 'systemId' in kwargs:
            system_id = kwargs['systemId']
        if 'vrfName' in kwargs:
            vrf_name = kwargs['vrfName']
        if 'vrfTenant' in kwargs:
            vrf_tenant = kwargs['vrfTenant']
        if 'apicRefreshTickerAdjust' in kwargs:
            apic_refresh_ticker_adjust = kwargs['apicRefreshTickerAdjust']
        if 'apicRefreshTime' in kwargs:
            apic_refresh_time = kwargs['apicRefreshTime']
        if 'apicSubscriptionDelay' in kwargs:
            apic_subscription_delay = kwargs['apicSubscriptionDelay']
        if 'controllerLogLevel' in kwargs:
            controller_log_level = kwargs['controllerLogLevel']
        if 'disablePeriodicSnatGlobalInfoSync' in kwargs:
            disable_periodic_snat_global_info_sync = kwargs['disablePeriodicSnatGlobalInfoSync']
        if 'disableWaitForNetwork' in kwargs:
            disable_wait_for_network = kwargs['disableWaitForNetwork']
        if 'dropLogEnable' in kwargs:
            drop_log_enable = kwargs['dropLogEnable']
        if 'durationWaitForNetwork' in kwargs:
            duration_wait_for_network = kwargs['durationWaitForNetwork']
        if 'enableEndpointSlice' in kwargs:
            enable_endpoint_slice = kwargs['enableEndpointSlice']
        if 'epRegistry' in kwargs:
            ep_registry = kwargs['epRegistry']
        if 'gbpPodSubnet' in kwargs:
            gbp_pod_subnet = kwargs['gbpPodSubnet']
        if 'hostAgentLogLevel' in kwargs:
            host_agent_log_level = kwargs['hostAgentLogLevel']
        if 'imagePullPolicy' in kwargs:
            image_pull_policy = kwargs['imagePullPolicy']
        if 'imagePullSecret' in kwargs:
            image_pull_secret = kwargs['imagePullSecret']
        if 'infraVlan' in kwargs:
            infra_vlan = kwargs['infraVlan']
        if 'installIstio' in kwargs:
            install_istio = kwargs['installIstio']
        if 'istioProfile' in kwargs:
            istio_profile = kwargs['istioProfile']
        if 'kafkaBrokers' in kwargs:
            kafka_brokers = kwargs['kafkaBrokers']
        if 'kafkaClientCrt' in kwargs:
            kafka_client_crt = kwargs['kafkaClientCrt']
        if 'kafkaClientKey' in kwargs:
            kafka_client_key = kwargs['kafkaClientKey']
        if 'maxNodesSvcGraph' in kwargs:
            max_nodes_svc_graph = kwargs['maxNodesSvcGraph']
        if 'mtuHeadRoom' in kwargs:
            mtu_head_room = kwargs['mtuHeadRoom']
        if 'multusDisable' in kwargs:
            multus_disable = kwargs['multusDisable']
        if 'noPriorityClass' in kwargs:
            no_priority_class = kwargs['noPriorityClass']
        if 'nodePodIfEnable' in kwargs:
            node_pod_if_enable = kwargs['nodePodIfEnable']
        if 'opflexClientSsl' in kwargs:
            opflex_client_ssl = kwargs['opflexClientSsl']
        if 'opflexDeviceDeleteTimeout' in kwargs:
            opflex_device_delete_timeout = kwargs['opflexDeviceDeleteTimeout']
        if 'opflexLogLevel' in kwargs:
            opflex_log_level = kwargs['opflexLogLevel']
        if 'opflexMode' in kwargs:
            opflex_mode = kwargs['opflexMode']
        if 'opflexServerPort' in kwargs:
            opflex_server_port = kwargs['opflexServerPort']
        if 'overlayVrfName' in kwargs:
            overlay_vrf_name = kwargs['overlayVrfName']
        if 'ovsMemoryLimit' in kwargs:
            ovs_memory_limit = kwargs['ovsMemoryLimit']
        if 'pbrTrackingNonSnat' in kwargs:
            pbr_tracking_non_snat = kwargs['pbrTrackingNonSnat']
        if 'podSubnetChunkSize' in kwargs:
            pod_subnet_chunk_size = kwargs['podSubnetChunkSize']
        if 'runGbpContainer' in kwargs:
            run_gbp_container = kwargs['runGbpContainer']
        if 'runOpflexServerContainer' in kwargs:
            run_opflex_server_container = kwargs['runOpflexServerContainer']
        if 'serviceMonitorInterval' in kwargs:
            service_monitor_interval = kwargs['serviceMonitorInterval']
        if 'snatContractScope' in kwargs:
            snat_contract_scope = kwargs['snatContractScope']
        if 'snatNamespace' in kwargs:
            snat_namespace = kwargs['snatNamespace']
        if 'snatPortRangeEnd' in kwargs:
            snat_port_range_end = kwargs['snatPortRangeEnd']
        if 'snatPortRangeStart' in kwargs:
            snat_port_range_start = kwargs['snatPortRangeStart']
        if 'snatPortsPerNode' in kwargs:
            snat_ports_per_node = kwargs['snatPortsPerNode']
        if 'sriovEnable' in kwargs:
            sriov_enable = kwargs['sriovEnable']
        if 'subnetDomainName' in kwargs:
            subnet_domain_name = kwargs['subnetDomainName']
        if 'useAciAnywhereCrd' in kwargs:
            use_aci_anywhere_crd = kwargs['useAciAnywhereCrd']
        if 'useAciCniPriorityClass' in kwargs:
            use_aci_cni_priority_class = kwargs['useAciCniPriorityClass']
        if 'useClusterRole' in kwargs:
            use_cluster_role = kwargs['useClusterRole']
        if 'useHostNetnsVolume' in kwargs:
            use_host_netns_volume = kwargs['useHostNetnsVolume']
        if 'useOpflexServerVolume' in kwargs:
            use_opflex_server_volume = kwargs['useOpflexServerVolume']
        if 'usePrivilegedContainer' in kwargs:
            use_privileged_container = kwargs['usePrivilegedContainer']
        if 'vmmController' in kwargs:
            vmm_controller = kwargs['vmmController']
        if 'vmmDomain' in kwargs:
            vmm_domain = kwargs['vmmDomain']

        _setter("aep", aep)
        _setter("apic_hosts", apic_hosts)
        _setter("apic_user_crt", apic_user_crt)
        _setter("apic_user_key", apic_user_key)
        _setter("apic_user_name", apic_user_name)
        _setter("encap_type", encap_type)
        _setter("extern_dynamic", extern_dynamic)
        _setter("extern_static", extern_static)
        _setter("kube_api_vlan", kube_api_vlan)
        _setter("l3out", l3out)
        _setter("l3out_external_networks", l3out_external_networks)
        _setter("mcast_range_end", mcast_range_end)
        _setter("mcast_range_start", mcast_range_start)
        _setter("node_subnet", node_subnet)
        _setter("node_svc_subnet", node_svc_subnet)
        _setter("service_vlan", service_vlan)
        _setter("system_id", system_id)
        _setter("token", token)
        _setter("vrf_name", vrf_name)
        _setter("vrf_tenant", vrf_tenant)
        if apic_refresh_ticker_adjust is not None:
            _setter("apic_refresh_ticker_adjust", apic_refresh_ticker_adjust)
        if apic_refresh_time is not None:
            _setter("apic_refresh_time", apic_refresh_time)
        if apic_subscription_delay is not None:
            _setter("apic_subscription_delay", apic_subscription_delay)
        if capic is not None:
            _setter("capic", capic)
        if controller_log_level is not None:
            _setter("controller_log_level", controller_log_level)
        if disable_periodic_snat_global_info_sync is not None:
            _setter("disable_periodic_snat_global_info_sync", disable_periodic_snat_global_info_sync)
        if disable_wait_for_network is not None:
            _setter("disable_wait_for_network", disable_wait_for_network)
        if drop_log_enable is not None:
            _setter("drop_log_enable", drop_log_enable)
        if duration_wait_for_network is not None:
            _setter("duration_wait_for_network", duration_wait_for_network)
        if enable_endpoint_slice is not None:
            _setter("enable_endpoint_slice", enable_endpoint_slice)
        if ep_registry is not None:
            _setter("ep_registry", ep_registry)
        if gbp_pod_subnet is not None:
            _setter("gbp_pod_subnet", gbp_pod_subnet)
        if host_agent_log_level is not None:
            _setter("host_agent_log_level", host_agent_log_level)
        if image_pull_policy is not None:
            _setter("image_pull_policy", image_pull_policy)
        if image_pull_secret is not None:
            _setter("image_pull_secret", image_pull_secret)
        if infra_vlan is not None:
            _setter("infra_vlan", infra_vlan)
        if install_istio is not None:
            _setter("install_istio", install_istio)
        if istio_profile is not None:
            _setter("istio_profile", istio_profile)
        if kafka_brokers is not None:
            _setter("kafka_brokers", kafka_brokers)
        if kafka_client_crt is not None:
            _setter("kafka_client_crt", kafka_client_crt)
        if kafka_client_key is not None:
            _setter("kafka_client_key", kafka_client_key)
        if max_nodes_svc_graph is not None:
            _setter("max_nodes_svc_graph", max_nodes_svc_graph)
        if mtu_head_room is not None:
            _setter("mtu_head_room", mtu_head_room)
        if multus_disable is not None:
            _setter("multus_disable", multus_disable)
        if no_priority_class is not None:
            _setter("no_priority_class", no_priority_class)
        if node_pod_if_enable is not None:
            _setter("node_pod_if_enable", node_pod_if_enable)
        if opflex_client_ssl is not None:
            _setter("opflex_client_ssl", opflex_client_ssl)
        if opflex_device_delete_timeout is not None:
            _setter("opflex_device_delete_timeout", opflex_device_delete_timeout)
        if opflex_log_level is not None:
            _setter("opflex_log_level", opflex_log_level)
        if opflex_mode is not None:
            _setter("opflex_mode", opflex_mode)
        if opflex_server_port is not None:
            _setter("opflex_server_port", opflex_server_port)
        if overlay_vrf_name is not None:
            _setter("overlay_vrf_name", overlay_vrf_name)
        if ovs_memory_limit is not None:
            _setter("ovs_memory_limit", ovs_memory_limit)
        if pbr_tracking_non_snat is not None:
            _setter("pbr_tracking_non_snat", pbr_tracking_non_snat)
        if pod_subnet_chunk_size is not None:
            _setter("pod_subnet_chunk_size", pod_subnet_chunk_size)
        if run_gbp_container is not None:
            _setter("run_gbp_container", run_gbp_container)
        if run_opflex_server_container is not None:
            _setter("run_opflex_server_container", run_opflex_server_container)
        if service_monitor_interval is not None:
            _setter("service_monitor_interval", service_monitor_interval)
        if snat_contract_scope is not None:
            _setter("snat_contract_scope", snat_contract_scope)
        if snat_namespace is not None:
            _setter("snat_namespace", snat_namespace)
        if snat_port_range_end is not None:
            _setter("snat_port_range_end", snat_port_range_end)
        if snat_port_range_start is not None:
            _setter("snat_port_range_start", snat_port_range_start)
        if snat_ports_per_node is not None:
            _setter("snat_ports_per_node", snat_ports_per_node)
        if sriov_enable is not None:
            _setter("sriov_enable", sriov_enable)
        if subnet_domain_name is not None:
            _setter("subnet_domain_name", subnet_domain_name)
        if tenant is not None:
            _setter("tenant", tenant)
        if use_aci_anywhere_crd is not None:
            _setter("use_aci_anywhere_crd", use_aci_anywhere_crd)
        if use_aci_cni_priority_class is not None:
            _setter("use_aci_cni_priority_class", use_aci_cni_priority_class)
        if use_cluster_role is not None:
            _setter("use_cluster_role", use_cluster_role)
        if use_host_netns_volume is not None:
            _setter("use_host_netns_volume", use_host_netns_volume)
        if use_opflex_server_volume is not None:
            _setter("use_opflex_server_volume", use_opflex_server_volume)
        if use_privileged_container is not None:
            _setter("use_privileged_container", use_privileged_container)
        if vmm_controller is not None:
            _setter("vmm_controller", vmm_controller)
        if vmm_domain is not None:
            _setter("vmm_domain", vmm_domain)

    @property
    @pulumi.getter
    def aep(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aep")

    @aep.setter
    def aep(self, value: pulumi.Input[str]):
        pulumi.set(self, "aep", value)

    @property
    @pulumi.getter(name="apicHosts")
    def apic_hosts(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "apic_hosts")

    @apic_hosts.setter
    def apic_hosts(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "apic_hosts", value)

    @property
    @pulumi.getter(name="apicUserCrt")
    def apic_user_crt(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apic_user_crt")

    @apic_user_crt.setter
    def apic_user_crt(self, value: pulumi.Input[str]):
        pulumi.set(self, "apic_user_crt", value)

    @property
    @pulumi.getter(name="apicUserKey")
    def apic_user_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apic_user_key")

    @apic_user_key.setter
    def apic_user_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "apic_user_key", value)

    @property
    @pulumi.getter(name="apicUserName")
    def apic_user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apic_user_name")

    @apic_user_name.setter
    def apic_user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "apic_user_name", value)

    @property
    @pulumi.getter(name="encapType")
    def encap_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encap_type")

    @encap_type.setter
    def encap_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "encap_type", value)

    @property
    @pulumi.getter(name="externDynamic")
    def extern_dynamic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "extern_dynamic")

    @extern_dynamic.setter
    def extern_dynamic(self, value: pulumi.Input[str]):
        pulumi.set(self, "extern_dynamic", value)

    @property
    @pulumi.getter(name="externStatic")
    def extern_static(self) -> pulumi.Input[str]:
        return pulumi.get(self, "extern_static")

    @extern_static.setter
    def extern_static(self, value: pulumi.Input[str]):
        pulumi.set(self, "extern_static", value)

    @property
    @pulumi.getter(name="kubeApiVlan")
    def kube_api_vlan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kube_api_vlan")

    @kube_api_vlan.setter
    def kube_api_vlan(self, value: pulumi.Input[str]):
        pulumi.set(self, "kube_api_vlan", value)

    @property
    @pulumi.getter
    def l3out(self) -> pulumi.Input[str]:
        return pulumi.get(self, "l3out")

    @l3out.setter
    def l3out(self, value: pulumi.Input[str]):
        pulumi.set(self, "l3out", value)

    @property
    @pulumi.getter(name="l3outExternalNetworks")
    def l3out_external_networks(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "l3out_external_networks")

    @l3out_external_networks.setter
    def l3out_external_networks(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "l3out_external_networks", value)

    @property
    @pulumi.getter(name="mcastRangeEnd")
    def mcast_range_end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mcast_range_end")

    @mcast_range_end.setter
    def mcast_range_end(self, value: pulumi.Input[str]):
        pulumi.set(self, "mcast_range_end", value)

    @property
    @pulumi.getter(name="mcastRangeStart")
    def mcast_range_start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mcast_range_start")

    @mcast_range_start.setter
    def mcast_range_start(self, value: pulumi.Input[str]):
        pulumi.set(self, "mcast_range_start", value)

    @property
    @pulumi.getter(name="nodeSubnet")
    def node_subnet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "node_subnet")

    @node_subnet.setter
    def node_subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_subnet", value)

    @property
    @pulumi.getter(name="nodeSvcSubnet")
    def node_svc_subnet(self) -> pulumi.Input[str]:
        return pulumi.get(self, "node_svc_subnet")

    @node_svc_subnet.setter
    def node_svc_subnet(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_svc_subnet", value)

    @property
    @pulumi.getter(name="serviceVlan")
    def service_vlan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_vlan")

    @service_vlan.setter
    def service_vlan(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_vlan", value)

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "system_id")

    @system_id.setter
    def system_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "system_id", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vrf_name")

    @vrf_name.setter
    def vrf_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_name", value)

    @property
    @pulumi.getter(name="vrfTenant")
    def vrf_tenant(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vrf_tenant")

    @vrf_tenant.setter
    def vrf_tenant(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf_tenant", value)

    @property
    @pulumi.getter(name="apicRefreshTickerAdjust")
    def apic_refresh_ticker_adjust(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apic_refresh_ticker_adjust")

    @apic_refresh_ticker_adjust.setter
    def apic_refresh_ticker_adjust(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apic_refresh_ticker_adjust", value)

    @property
    @pulumi.getter(name="apicRefreshTime")
    def apic_refresh_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apic_refresh_time")

    @apic_refresh_time.setter
    def apic_refresh_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apic_refresh_time", value)

    @property
    @pulumi.getter(name="apicSubscriptionDelay")
    def apic_subscription_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apic_subscription_delay")

    @apic_subscription_delay.setter
    def apic_subscription_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apic_subscription_delay", value)

    @property
    @pulumi.getter
    def capic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "capic")

    @capic.setter
    def capic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capic", value)

    @property
    @pulumi.getter(name="controllerLogLevel")
    def controller_log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "controller_log_level")

    @controller_log_level.setter
    def controller_log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "controller_log_level", value)

    @property
    @pulumi.getter(name="disablePeriodicSnatGlobalInfoSync")
    def disable_periodic_snat_global_info_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_periodic_snat_global_info_sync")

    @disable_periodic_snat_global_info_sync.setter
    def disable_periodic_snat_global_info_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_periodic_snat_global_info_sync", value)

    @property
    @pulumi.getter(name="disableWaitForNetwork")
    def disable_wait_for_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disable_wait_for_network")

    @disable_wait_for_network.setter
    def disable_wait_for_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_wait_for_network", value)

    @property
    @pulumi.getter(name="dropLogEnable")
    def drop_log_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_log_enable")

    @drop_log_enable.setter
    def drop_log_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_log_enable", value)

    @property
    @pulumi.getter(name="durationWaitForNetwork")
    def duration_wait_for_network(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration_wait_for_network")

    @duration_wait_for_network.setter
    def duration_wait_for_network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration_wait_for_network", value)

    @property
    @pulumi.getter(name="enableEndpointSlice")
    def enable_endpoint_slice(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_endpoint_slice")

    @enable_endpoint_slice.setter
    def enable_endpoint_slice(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_endpoint_slice", value)

    @property
    @pulumi.getter(name="epRegistry")
    def ep_registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ep_registry")

    @ep_registry.setter
    def ep_registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ep_registry", value)

    @property
    @pulumi.getter(name="gbpPodSubnet")
    def gbp_pod_subnet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gbp_pod_subnet")

    @gbp_pod_subnet.setter
    def gbp_pod_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gbp_pod_subnet", value)

    @property
    @pulumi.getter(name="hostAgentLogLevel")
    def host_agent_log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_agent_log_level")

    @host_agent_log_level.setter
    def host_agent_log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_agent_log_level", value)

    @property
    @pulumi.getter(name="imagePullPolicy")
    def image_pull_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_policy")

    @image_pull_policy.setter
    def image_pull_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_policy", value)

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_pull_secret")

    @image_pull_secret.setter
    def image_pull_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_secret", value)

    @property
    @pulumi.getter(name="infraVlan")
    def infra_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "infra_vlan")

    @infra_vlan.setter
    def infra_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infra_vlan", value)

    @property
    @pulumi.getter(name="installIstio")
    def install_istio(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "install_istio")

    @install_istio.setter
    def install_istio(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "install_istio", value)

    @property
    @pulumi.getter(name="istioProfile")
    def istio_profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "istio_profile")

    @istio_profile.setter
    def istio_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_profile", value)

    @property
    @pulumi.getter(name="kafkaBrokers")
    def kafka_brokers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "kafka_brokers")

    @kafka_brokers.setter
    def kafka_brokers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kafka_brokers", value)

    @property
    @pulumi.getter(name="kafkaClientCrt")
    def kafka_client_crt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_client_crt")

    @kafka_client_crt.setter
    def kafka_client_crt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_client_crt", value)

    @property
    @pulumi.getter(name="kafkaClientKey")
    def kafka_client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kafka_client_key")

    @kafka_client_key.setter
    def kafka_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_client_key", value)

    @property
    @pulumi.getter(name="maxNodesSvcGraph")
    def max_nodes_svc_graph(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_nodes_svc_graph")

    @max_nodes_svc_graph.setter
    def max_nodes_svc_graph(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_nodes_svc_graph", value)

    @property
    @pulumi.getter(name="mtuHeadRoom")
    def mtu_head_room(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mtu_head_room")

    @mtu_head_room.setter
    def mtu_head_room(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_head_room", value)

    @property
    @pulumi.getter(name="multusDisable")
    def multus_disable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multus_disable")

    @multus_disable.setter
    def multus_disable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multus_disable", value)

    @property
    @pulumi.getter(name="noPriorityClass")
    def no_priority_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "no_priority_class")

    @no_priority_class.setter
    def no_priority_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_priority_class", value)

    @property
    @pulumi.getter(name="nodePodIfEnable")
    def node_pod_if_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_pod_if_enable")

    @node_pod_if_enable.setter
    def node_pod_if_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_pod_if_enable", value)

    @property
    @pulumi.getter(name="opflexClientSsl")
    def opflex_client_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opflex_client_ssl")

    @opflex_client_ssl.setter
    def opflex_client_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_client_ssl", value)

    @property
    @pulumi.getter(name="opflexDeviceDeleteTimeout")
    def opflex_device_delete_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opflex_device_delete_timeout")

    @opflex_device_delete_timeout.setter
    def opflex_device_delete_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_device_delete_timeout", value)

    @property
    @pulumi.getter(name="opflexLogLevel")
    def opflex_log_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opflex_log_level")

    @opflex_log_level.setter
    def opflex_log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_log_level", value)

    @property
    @pulumi.getter(name="opflexMode")
    def opflex_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opflex_mode")

    @opflex_mode.setter
    def opflex_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_mode", value)

    @property
    @pulumi.getter(name="opflexServerPort")
    def opflex_server_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opflex_server_port")

    @opflex_server_port.setter
    def opflex_server_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opflex_server_port", value)

    @property
    @pulumi.getter(name="overlayVrfName")
    def overlay_vrf_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "overlay_vrf_name")

    @overlay_vrf_name.setter
    def overlay_vrf_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_vrf_name", value)

    @property
    @pulumi.getter(name="ovsMemoryLimit")
    def ovs_memory_limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ovs_memory_limit")

    @ovs_memory_limit.setter
    def ovs_memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovs_memory_limit", value)

    @property
    @pulumi.getter(name="pbrTrackingNonSnat")
    def pbr_tracking_non_snat(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pbr_tracking_non_snat")

    @pbr_tracking_non_snat.setter
    def pbr_tracking_non_snat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pbr_tracking_non_snat", value)

    @property
    @pulumi.getter(name="podSubnetChunkSize")
    def pod_subnet_chunk_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pod_subnet_chunk_size")

    @pod_subnet_chunk_size.setter
    def pod_subnet_chunk_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pod_subnet_chunk_size", value)

    @property
    @pulumi.getter(name="runGbpContainer")
    def run_gbp_container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_gbp_container")

    @run_gbp_container.setter
    def run_gbp_container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_gbp_container", value)

    @property
    @pulumi.getter(name="runOpflexServerContainer")
    def run_opflex_server_container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_opflex_server_container")

    @run_opflex_server_container.setter
    def run_opflex_server_container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_opflex_server_container", value)

    @property
    @pulumi.getter(name="serviceMonitorInterval")
    def service_monitor_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_monitor_interval")

    @service_monitor_interval.setter
    def service_monitor_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_monitor_interval", value)

    @property
    @pulumi.getter(name="snatContractScope")
    def snat_contract_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_contract_scope")

    @snat_contract_scope.setter
    def snat_contract_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_contract_scope", value)

    @property
    @pulumi.getter(name="snatNamespace")
    def snat_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_namespace")

    @snat_namespace.setter
    def snat_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_namespace", value)

    @property
    @pulumi.getter(name="snatPortRangeEnd")
    def snat_port_range_end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_port_range_end")

    @snat_port_range_end.setter
    def snat_port_range_end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_port_range_end", value)

    @property
    @pulumi.getter(name="snatPortRangeStart")
    def snat_port_range_start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_port_range_start")

    @snat_port_range_start.setter
    def snat_port_range_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_port_range_start", value)

    @property
    @pulumi.getter(name="snatPortsPerNode")
    def snat_ports_per_node(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snat_ports_per_node")

    @snat_ports_per_node.setter
    def snat_ports_per_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snat_ports_per_node", value)

    @property
    @pulumi.getter(name="sriovEnable")
    def sriov_enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sriov_enable")

    @sriov_enable.setter
    def sriov_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sriov_enable", value)

    @property
    @pulumi.getter(name="subnetDomainName")
    def subnet_domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_domain_name")

    @subnet_domain_name.setter
    def subnet_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_domain_name", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter(name="useAciAnywhereCrd")
    def use_aci_anywhere_crd(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_aci_anywhere_crd")

    @use_aci_anywhere_crd.setter
    def use_aci_anywhere_crd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_aci_anywhere_crd", value)

    @property
    @pulumi.getter(name="useAciCniPriorityClass")
    def use_aci_cni_priority_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_aci_cni_priority_class")

    @use_aci_cni_priority_class.setter
    def use_aci_cni_priority_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_aci_cni_priority_class", value)

    @property
    @pulumi.getter(name="useClusterRole")
    def use_cluster_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_cluster_role")

    @use_cluster_role.setter
    def use_cluster_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_cluster_role", value)

    @property
    @pulumi.getter(name="useHostNetnsVolume")
    def use_host_netns_volume(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_host_netns_volume")

    @use_host_netns_volume.setter
    def use_host_netns_volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_host_netns_volume", value)

    @property
    @pulumi.getter(name="useOpflexServerVolume")
    def use_opflex_server_volume(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_opflex_server_volume")

    @use_opflex_server_volume.setter
    def use_opflex_server_volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_opflex_server_volume", value)

    @property
    @pulumi.getter(name="usePrivilegedContainer")
    def use_privileged_container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_privileged_container")

    @use_privileged_container.setter
    def use_privileged_container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_privileged_container", value)

    @property
    @pulumi.getter(name="vmmController")
    def vmm_controller(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vmm_controller")

    @vmm_controller.setter
    def vmm_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmm_controller", value)

    @property
    @pulumi.getter(name="vmmDomain")
    def vmm_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vmm_domain")

    @vmm_domain.setter
    def vmm_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vmm_domain", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProviderArgs:
    def __init__(__self__, *,
                 cloud_provider: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCalicoNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_provider=cloud_provider,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_provider: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudProvider' in kwargs:
            cloud_provider = kwargs['cloudProvider']

        if cloud_provider is not None:
            _setter("cloud_provider", cloud_provider)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProviderArgs:
    def __init__(__self__, *,
                 iface: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkCanalNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            iface=iface,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             iface: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if iface is not None:
            _setter("iface", iface)

    @property
    @pulumi.getter
    def iface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iface")

    @iface.setter
    def iface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iface", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProviderArgs:
    def __init__(__self__, *,
                 iface: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkFlannelNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            iface=iface,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             iface: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if iface is not None:
            _setter("iface", iface)

    @property
    @pulumi.getter
    def iface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iface")

    @iface.setter
    def iface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iface", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProviderArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str]):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkWeaveNetworkProviderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("password", password)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigNodeArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 user: pulumi.Input[str],
                 docker_socket: Optional[pulumi.Input[str]] = None,
                 hostname_override: Optional[pulumi.Input[str]] = None,
                 internal_address: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 node_id: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
                 ssh_key: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the cluster template (map)
        """
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigNodeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            roles=roles,
            user=user,
            docker_socket=docker_socket,
            hostname_override=hostname_override,
            internal_address=internal_address,
            labels=labels,
            node_id=node_id,
            port=port,
            ssh_agent_auth=ssh_agent_auth,
            ssh_key=ssh_key,
            ssh_key_path=ssh_key_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: pulumi.Input[str],
             roles: pulumi.Input[Sequence[pulumi.Input[str]]],
             user: pulumi.Input[str],
             docker_socket: Optional[pulumi.Input[str]] = None,
             hostname_override: Optional[pulumi.Input[str]] = None,
             internal_address: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             node_id: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[str]] = None,
             ssh_agent_auth: Optional[pulumi.Input[bool]] = None,
             ssh_key: Optional[pulumi.Input[str]] = None,
             ssh_key_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'dockerSocket' in kwargs:
            docker_socket = kwargs['dockerSocket']
        if 'hostnameOverride' in kwargs:
            hostname_override = kwargs['hostnameOverride']
        if 'internalAddress' in kwargs:
            internal_address = kwargs['internalAddress']
        if 'nodeId' in kwargs:
            node_id = kwargs['nodeId']
        if 'sshAgentAuth' in kwargs:
            ssh_agent_auth = kwargs['sshAgentAuth']
        if 'sshKey' in kwargs:
            ssh_key = kwargs['sshKey']
        if 'sshKeyPath' in kwargs:
            ssh_key_path = kwargs['sshKeyPath']

        _setter("address", address)
        _setter("roles", roles)
        _setter("user", user)
        if docker_socket is not None:
            _setter("docker_socket", docker_socket)
        if hostname_override is not None:
            _setter("hostname_override", hostname_override)
        if internal_address is not None:
            _setter("internal_address", internal_address)
        if labels is not None:
            _setter("labels", labels)
        if node_id is not None:
            _setter("node_id", node_id)
        if port is not None:
            _setter("port", port)
        if ssh_agent_auth is not None:
            _setter("ssh_agent_auth", ssh_agent_auth)
        if ssh_key is not None:
            _setter("ssh_key", ssh_key)
        if ssh_key_path is not None:
            _setter("ssh_key_path", ssh_key_path)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="dockerSocket")
    def docker_socket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "docker_socket")

    @docker_socket.setter
    def docker_socket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_socket", value)

    @property
    @pulumi.getter(name="hostnameOverride")
    def hostname_override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname_override")

    @hostname_override.setter
    def hostname_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname_override", value)

    @property
    @pulumi.getter(name="internalAddress")
    def internal_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internal_address")

    @internal_address.setter
    def internal_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_address", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the cluster template (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshAgentAuth")
    def ssh_agent_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssh_agent_auth")

    @ssh_agent_auth.setter
    def ssh_agent_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssh_agent_auth", value)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_key_path")

    @ssh_key_path.setter
    def ssh_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_path", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 ecr_credential_plugin: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPluginArgs']] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            ecr_credential_plugin=ecr_credential_plugin,
            is_default=is_default,
            password=password,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: pulumi.Input[str],
             ecr_credential_plugin: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPluginArgs']] = None,
             is_default: Optional[pulumi.Input[bool]] = None,
             password: Optional[pulumi.Input[str]] = None,
             user: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'ecrCredentialPlugin' in kwargs:
            ecr_credential_plugin = kwargs['ecrCredentialPlugin']
        if 'isDefault' in kwargs:
            is_default = kwargs['isDefault']

        _setter("url", url)
        if ecr_credential_plugin is not None:
            _setter("ecr_credential_plugin", ecr_credential_plugin)
        if is_default is not None:
            _setter("is_default", is_default)
        if password is not None:
            _setter("password", password)
        if user is not None:
            _setter("user", user)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="ecrCredentialPlugin")
    def ecr_credential_plugin(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPluginArgs']]:
        return pulumi.get(self, "ecr_credential_plugin")

    @ecr_credential_plugin.setter
    def ecr_credential_plugin(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPluginArgs']]):
        pulumi.set(self, "ecr_credential_plugin", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPluginArgs:
    def __init__(__self__, *,
                 aws_access_key_id: Optional[pulumi.Input[str]] = None,
                 aws_secret_access_key: Optional[pulumi.Input[str]] = None,
                 aws_session_token: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigPrivateRegistryEcrCredentialPluginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_access_key_id=aws_access_key_id,
            aws_secret_access_key=aws_secret_access_key,
            aws_session_token=aws_session_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_access_key_id: Optional[pulumi.Input[str]] = None,
             aws_secret_access_key: Optional[pulumi.Input[str]] = None,
             aws_session_token: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'awsAccessKeyId' in kwargs:
            aws_access_key_id = kwargs['awsAccessKeyId']
        if 'awsSecretAccessKey' in kwargs:
            aws_secret_access_key = kwargs['awsSecretAccessKey']
        if 'awsSessionToken' in kwargs:
            aws_session_token = kwargs['awsSessionToken']

        if aws_access_key_id is not None:
            _setter("aws_access_key_id", aws_access_key_id)
        if aws_secret_access_key is not None:
            _setter("aws_secret_access_key", aws_secret_access_key)
        if aws_session_token is not None:
            _setter("aws_session_token", aws_session_token)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_secret_access_key", value)

    @property
    @pulumi.getter(name="awsSessionToken")
    def aws_session_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_session_token")

    @aws_session_token.setter
    def aws_session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_session_token", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs:
    def __init__(__self__, *,
                 etcd: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs']] = None,
                 kube_api: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiArgs']] = None,
                 kube_controller: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeControllerArgs']] = None,
                 kubelet: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeletArgs']] = None,
                 kubeproxy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxyArgs']] = None,
                 scheduler: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesSchedulerArgs']] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            etcd=etcd,
            kube_api=kube_api,
            kube_controller=kube_controller,
            kubelet=kubelet,
            kubeproxy=kubeproxy,
            scheduler=scheduler,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             etcd: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs']] = None,
             kube_api: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiArgs']] = None,
             kube_controller: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeControllerArgs']] = None,
             kubelet: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeletArgs']] = None,
             kubeproxy: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxyArgs']] = None,
             scheduler: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesSchedulerArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'kubeApi' in kwargs:
            kube_api = kwargs['kubeApi']
        if 'kubeController' in kwargs:
            kube_controller = kwargs['kubeController']

        if etcd is not None:
            _setter("etcd", etcd)
        if kube_api is not None:
            _setter("kube_api", kube_api)
        if kube_controller is not None:
            _setter("kube_controller", kube_controller)
        if kubelet is not None:
            _setter("kubelet", kubelet)
        if kubeproxy is not None:
            _setter("kubeproxy", kubeproxy)
        if scheduler is not None:
            _setter("scheduler", scheduler)

    @property
    @pulumi.getter
    def etcd(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs']]:
        return pulumi.get(self, "etcd")

    @etcd.setter
    def etcd(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs']]):
        pulumi.set(self, "etcd", value)

    @property
    @pulumi.getter(name="kubeApi")
    def kube_api(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiArgs']]:
        return pulumi.get(self, "kube_api")

    @kube_api.setter
    def kube_api(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiArgs']]):
        pulumi.set(self, "kube_api", value)

    @property
    @pulumi.getter(name="kubeController")
    def kube_controller(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeControllerArgs']]:
        return pulumi.get(self, "kube_controller")

    @kube_controller.setter
    def kube_controller(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeControllerArgs']]):
        pulumi.set(self, "kube_controller", value)

    @property
    @pulumi.getter
    def kubelet(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeletArgs']]:
        return pulumi.get(self, "kubelet")

    @kubelet.setter
    def kubelet(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeletArgs']]):
        pulumi.set(self, "kubelet", value)

    @property
    @pulumi.getter
    def kubeproxy(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxyArgs']]:
        return pulumi.get(self, "kubeproxy")

    @kubeproxy.setter
    def kubeproxy(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxyArgs']]):
        pulumi.set(self, "kubeproxy", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesSchedulerArgs']]:
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesSchedulerArgs']]):
        pulumi.set(self, "scheduler", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs:
    def __init__(__self__, *,
                 backup_config: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigArgs']] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 creation: Optional[pulumi.Input[str]] = None,
                 external_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gid: Optional[pulumi.Input[int]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 retention: Optional[pulumi.Input[str]] = None,
                 snapshot: Optional[pulumi.Input[bool]] = None,
                 uid: Optional[pulumi.Input[int]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backup_config=backup_config,
            ca_cert=ca_cert,
            cert=cert,
            creation=creation,
            external_urls=external_urls,
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            gid=gid,
            image=image,
            key=key,
            path=path,
            retention=retention,
            snapshot=snapshot,
            uid=uid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backup_config: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigArgs']] = None,
             ca_cert: Optional[pulumi.Input[str]] = None,
             cert: Optional[pulumi.Input[str]] = None,
             creation: Optional[pulumi.Input[str]] = None,
             external_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             gid: Optional[pulumi.Input[int]] = None,
             image: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             retention: Optional[pulumi.Input[str]] = None,
             snapshot: Optional[pulumi.Input[bool]] = None,
             uid: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'backupConfig' in kwargs:
            backup_config = kwargs['backupConfig']
        if 'caCert' in kwargs:
            ca_cert = kwargs['caCert']
        if 'externalUrls' in kwargs:
            external_urls = kwargs['externalUrls']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']

        if backup_config is not None:
            _setter("backup_config", backup_config)
        if ca_cert is not None:
            _setter("ca_cert", ca_cert)
        if cert is not None:
            _setter("cert", cert)
        if creation is not None:
            _setter("creation", creation)
        if external_urls is not None:
            _setter("external_urls", external_urls)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if gid is not None:
            _setter("gid", gid)
        if image is not None:
            _setter("image", image)
        if key is not None:
            _setter("key", key)
        if path is not None:
            _setter("path", path)
        if retention is not None:
            _setter("retention", retention)
        if snapshot is not None:
            _setter("snapshot", snapshot)
        if uid is not None:
            _setter("uid", uid)

    @property
    @pulumi.getter(name="backupConfig")
    def backup_config(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigArgs']]:
        return pulumi.get(self, "backup_config")

    @backup_config.setter
    def backup_config(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigArgs']]):
        pulumi.set(self, "backup_config", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def creation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "creation")

    @creation.setter
    def creation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation", value)

    @property
    @pulumi.getter(name="externalUrls")
    def external_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "external_urls")

    @external_urls.setter
    def external_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "external_urls", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def gid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gid", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter
    def snapshot(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "snapshot")

    @snapshot.setter
    def snapshot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snapshot", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uid", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 interval_hours: Optional[pulumi.Input[int]] = None,
                 retention: Optional[pulumi.Input[int]] = None,
                 s3_backup_config: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs']] = None,
                 safe_timestamp: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable cluster template revision. Default `true` (bool)
        """
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            interval_hours=interval_hours,
            retention=retention,
            s3_backup_config=s3_backup_config,
            safe_timestamp=safe_timestamp,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             interval_hours: Optional[pulumi.Input[int]] = None,
             retention: Optional[pulumi.Input[int]] = None,
             s3_backup_config: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs']] = None,
             safe_timestamp: Optional[pulumi.Input[bool]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'intervalHours' in kwargs:
            interval_hours = kwargs['intervalHours']
        if 's3BackupConfig' in kwargs:
            s3_backup_config = kwargs['s3BackupConfig']
        if 'safeTimestamp' in kwargs:
            safe_timestamp = kwargs['safeTimestamp']

        if enabled is not None:
            _setter("enabled", enabled)
        if interval_hours is not None:
            _setter("interval_hours", interval_hours)
        if retention is not None:
            _setter("retention", retention)
        if s3_backup_config is not None:
            _setter("s3_backup_config", s3_backup_config)
        if safe_timestamp is not None:
            _setter("safe_timestamp", safe_timestamp)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable cluster template revision. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="intervalHours")
    def interval_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval_hours")

    @interval_hours.setter
    def interval_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval_hours", value)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter(name="s3BackupConfig")
    def s3_backup_config(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs']]:
        return pulumi.get(self, "s3_backup_config")

    @s3_backup_config.setter
    def s3_backup_config(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs']]):
        pulumi.set(self, "s3_backup_config", value)

    @property
    @pulumi.getter(name="safeTimestamp")
    def safe_timestamp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "safe_timestamp")

    @safe_timestamp.setter
    def safe_timestamp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "safe_timestamp", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 custom_ca: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            endpoint=endpoint,
            access_key=access_key,
            custom_ca=custom_ca,
            folder=folder,
            region=region,
            secret_key=secret_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: pulumi.Input[str],
             endpoint: pulumi.Input[str],
             access_key: Optional[pulumi.Input[str]] = None,
             custom_ca: Optional[pulumi.Input[str]] = None,
             folder: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             secret_key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bucketName' in kwargs:
            bucket_name = kwargs['bucketName']
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'customCa' in kwargs:
            custom_ca = kwargs['customCa']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']

        _setter("bucket_name", bucket_name)
        _setter("endpoint", endpoint)
        if access_key is not None:
            _setter("access_key", access_key)
        if custom_ca is not None:
            _setter("custom_ca", custom_ca)
        if folder is not None:
            _setter("folder", folder)
        if region is not None:
            _setter("region", region)
        if secret_key is not None:
            _setter("secret_key", secret_key)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="customCa")
    def custom_ca(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_ca")

    @custom_ca.setter
    def custom_ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_ca", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiArgs:
    def __init__(__self__, *,
                 admission_configuration: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationArgs']] = None,
                 always_pull_images: Optional[pulumi.Input[bool]] = None,
                 audit_log: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogArgs']] = None,
                 event_rate_limit: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimitArgs']] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 pod_security_policy: Optional[pulumi.Input[bool]] = None,
                 secrets_encryption_config: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigArgs']] = None,
                 service_cluster_ip_range: Optional[pulumi.Input[str]] = None,
                 service_node_port_range: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            admission_configuration=admission_configuration,
            always_pull_images=always_pull_images,
            audit_log=audit_log,
            event_rate_limit=event_rate_limit,
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            image=image,
            pod_security_policy=pod_security_policy,
            secrets_encryption_config=secrets_encryption_config,
            service_cluster_ip_range=service_cluster_ip_range,
            service_node_port_range=service_node_port_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             admission_configuration: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationArgs']] = None,
             always_pull_images: Optional[pulumi.Input[bool]] = None,
             audit_log: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogArgs']] = None,
             event_rate_limit: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimitArgs']] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             pod_security_policy: Optional[pulumi.Input[bool]] = None,
             secrets_encryption_config: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigArgs']] = None,
             service_cluster_ip_range: Optional[pulumi.Input[str]] = None,
             service_node_port_range: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'admissionConfiguration' in kwargs:
            admission_configuration = kwargs['admissionConfiguration']
        if 'alwaysPullImages' in kwargs:
            always_pull_images = kwargs['alwaysPullImages']
        if 'auditLog' in kwargs:
            audit_log = kwargs['auditLog']
        if 'eventRateLimit' in kwargs:
            event_rate_limit = kwargs['eventRateLimit']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']
        if 'podSecurityPolicy' in kwargs:
            pod_security_policy = kwargs['podSecurityPolicy']
        if 'secretsEncryptionConfig' in kwargs:
            secrets_encryption_config = kwargs['secretsEncryptionConfig']
        if 'serviceClusterIpRange' in kwargs:
            service_cluster_ip_range = kwargs['serviceClusterIpRange']
        if 'serviceNodePortRange' in kwargs:
            service_node_port_range = kwargs['serviceNodePortRange']

        if admission_configuration is not None:
            _setter("admission_configuration", admission_configuration)
        if always_pull_images is not None:
            _setter("always_pull_images", always_pull_images)
        if audit_log is not None:
            _setter("audit_log", audit_log)
        if event_rate_limit is not None:
            _setter("event_rate_limit", event_rate_limit)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if image is not None:
            _setter("image", image)
        if pod_security_policy is not None:
            _setter("pod_security_policy", pod_security_policy)
        if secrets_encryption_config is not None:
            _setter("secrets_encryption_config", secrets_encryption_config)
        if service_cluster_ip_range is not None:
            _setter("service_cluster_ip_range", service_cluster_ip_range)
        if service_node_port_range is not None:
            _setter("service_node_port_range", service_node_port_range)

    @property
    @pulumi.getter(name="admissionConfiguration")
    def admission_configuration(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationArgs']]:
        return pulumi.get(self, "admission_configuration")

    @admission_configuration.setter
    def admission_configuration(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationArgs']]):
        pulumi.set(self, "admission_configuration", value)

    @property
    @pulumi.getter(name="alwaysPullImages")
    def always_pull_images(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always_pull_images")

    @always_pull_images.setter
    def always_pull_images(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_pull_images", value)

    @property
    @pulumi.getter(name="auditLog")
    def audit_log(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogArgs']]:
        return pulumi.get(self, "audit_log")

    @audit_log.setter
    def audit_log(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogArgs']]):
        pulumi.set(self, "audit_log", value)

    @property
    @pulumi.getter(name="eventRateLimit")
    def event_rate_limit(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimitArgs']]:
        return pulumi.get(self, "event_rate_limit")

    @event_rate_limit.setter
    def event_rate_limit(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimitArgs']]):
        pulumi.set(self, "event_rate_limit", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="podSecurityPolicy")
    def pod_security_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pod_security_policy")

    @pod_security_policy.setter
    def pod_security_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pod_security_policy", value)

    @property
    @pulumi.getter(name="secretsEncryptionConfig")
    def secrets_encryption_config(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigArgs']]:
        return pulumi.get(self, "secrets_encryption_config")

    @secrets_encryption_config.setter
    def secrets_encryption_config(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigArgs']]):
        pulumi.set(self, "secrets_encryption_config", value)

    @property
    @pulumi.getter(name="serviceClusterIpRange")
    def service_cluster_ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_cluster_ip_range")

    @service_cluster_ip_range.setter
    def service_cluster_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cluster_ip_range", value)

    @property
    @pulumi.getter(name="serviceNodePortRange")
    def service_node_port_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_node_port_range")

    @service_node_port_range.setter
    def service_node_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_node_port_range", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs']]]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_version=api_version,
            kind=kind,
            plugins=plugins,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_version: Optional[pulumi.Input[str]] = None,
             kind: Optional[pulumi.Input[str]] = None,
             plugins: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiVersion' in kwargs:
            api_version = kwargs['apiVersion']

        if api_version is not None:
            _setter("api_version", api_version)
        if kind is not None:
            _setter("kind", kind)
        if plugins is not None:
            _setter("plugins", plugins)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs']]]]:
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs']]]]):
        pulumi.set(self, "plugins", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The cluster template name (string)
        """
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAdmissionConfigurationPluginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
            name=name,
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if configuration is not None:
            _setter("configuration", configuration)
        if name is not None:
            _setter("name", name)
        if path is not None:
            _setter("path", path)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The cluster template name (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable cluster template revision. Default `true` (bool)
        """
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationArgs']] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if configuration is not None:
            _setter("configuration", configuration)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationArgs']]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable cluster template revision. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 max_backup: Optional[pulumi.Input[int]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format=format,
            max_age=max_age,
            max_backup=max_backup,
            max_size=max_size,
            path=path,
            policy=policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format: Optional[pulumi.Input[str]] = None,
             max_age: Optional[pulumi.Input[int]] = None,
             max_backup: Optional[pulumi.Input[int]] = None,
             max_size: Optional[pulumi.Input[int]] = None,
             path: Optional[pulumi.Input[str]] = None,
             policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxAge' in kwargs:
            max_age = kwargs['maxAge']
        if 'maxBackup' in kwargs:
            max_backup = kwargs['maxBackup']
        if 'maxSize' in kwargs:
            max_size = kwargs['maxSize']

        if format is not None:
            _setter("format", format)
        if max_age is not None:
            _setter("max_age", max_age)
        if max_backup is not None:
            _setter("max_backup", max_backup)
        if max_size is not None:
            _setter("max_size", max_size)
        if path is not None:
            _setter("path", path)
        if policy is not None:
            _setter("policy", policy)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="maxBackup")
    def max_backup(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_backup")

    @max_backup.setter
    def max_backup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_backup", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimitArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable cluster template revision. Default `true` (bool)
        """
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiEventRateLimitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if configuration is not None:
            _setter("configuration", configuration)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable cluster template revision. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigArgs:
    def __init__(__self__, *,
                 custom_config: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable cluster template revision. Default `true` (bool)
        """
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_config=custom_config,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_config: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'customConfig' in kwargs:
            custom_config = kwargs['customConfig']

        if custom_config is not None:
            _setter("custom_config", custom_config)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_config")

    @custom_config.setter
    def custom_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_config", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable cluster template revision. Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeControllerArgs:
    def __init__(__self__, *,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 service_cluster_ip_range: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeControllerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_cidr=cluster_cidr,
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            image=image,
            service_cluster_ip_range=service_cluster_ip_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_cidr: Optional[pulumi.Input[str]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             service_cluster_ip_range: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterCidr' in kwargs:
            cluster_cidr = kwargs['clusterCidr']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']
        if 'serviceClusterIpRange' in kwargs:
            service_cluster_ip_range = kwargs['serviceClusterIpRange']

        if cluster_cidr is not None:
            _setter("cluster_cidr", cluster_cidr)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if image is not None:
            _setter("image", image)
        if service_cluster_ip_range is not None:
            _setter("service_cluster_ip_range", service_cluster_ip_range)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="serviceClusterIpRange")
    def service_cluster_ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_cluster_ip_range")

    @service_cluster_ip_range.setter
    def service_cluster_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_cluster_ip_range", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeletArgs:
    def __init__(__self__, *,
                 cluster_dns_server: Optional[pulumi.Input[str]] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fail_swap_on: Optional[pulumi.Input[bool]] = None,
                 generate_serving_certificate: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 infra_container_image: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeletArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_dns_server=cluster_dns_server,
            cluster_domain=cluster_domain,
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            fail_swap_on=fail_swap_on,
            generate_serving_certificate=generate_serving_certificate,
            image=image,
            infra_container_image=infra_container_image,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_dns_server: Optional[pulumi.Input[str]] = None,
             cluster_domain: Optional[pulumi.Input[str]] = None,
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             fail_swap_on: Optional[pulumi.Input[bool]] = None,
             generate_serving_certificate: Optional[pulumi.Input[bool]] = None,
             image: Optional[pulumi.Input[str]] = None,
             infra_container_image: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterDnsServer' in kwargs:
            cluster_dns_server = kwargs['clusterDnsServer']
        if 'clusterDomain' in kwargs:
            cluster_domain = kwargs['clusterDomain']
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']
        if 'failSwapOn' in kwargs:
            fail_swap_on = kwargs['failSwapOn']
        if 'generateServingCertificate' in kwargs:
            generate_serving_certificate = kwargs['generateServingCertificate']
        if 'infraContainerImage' in kwargs:
            infra_container_image = kwargs['infraContainerImage']

        if cluster_dns_server is not None:
            _setter("cluster_dns_server", cluster_dns_server)
        if cluster_domain is not None:
            _setter("cluster_domain", cluster_domain)
        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if fail_swap_on is not None:
            _setter("fail_swap_on", fail_swap_on)
        if generate_serving_certificate is not None:
            _setter("generate_serving_certificate", generate_serving_certificate)
        if image is not None:
            _setter("image", image)
        if infra_container_image is not None:
            _setter("infra_container_image", infra_container_image)

    @property
    @pulumi.getter(name="clusterDnsServer")
    def cluster_dns_server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_dns_server")

    @cluster_dns_server.setter
    def cluster_dns_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_dns_server", value)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter(name="failSwapOn")
    def fail_swap_on(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_swap_on")

    @fail_swap_on.setter
    def fail_swap_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_swap_on", value)

    @property
    @pulumi.getter(name="generateServingCertificate")
    def generate_serving_certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "generate_serving_certificate")

    @generate_serving_certificate.setter
    def generate_serving_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "generate_serving_certificate", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="infraContainerImage")
    def infra_container_image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "infra_container_image")

    @infra_container_image.setter
    def infra_container_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infra_container_image", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxyArgs:
    def __init__(__self__, *,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesKubeproxyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            image=image,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']

        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if image is not None:
            _setter("image", image)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesSchedulerArgs:
    def __init__(__self__, *,
                 extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesSchedulerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            extra_args=extra_args,
            extra_binds=extra_binds,
            extra_envs=extra_envs,
            image=image,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             extra_args: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             extra_binds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_envs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             image: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'extraArgs' in kwargs:
            extra_args = kwargs['extraArgs']
        if 'extraBinds' in kwargs:
            extra_binds = kwargs['extraBinds']
        if 'extraEnvs' in kwargs:
            extra_envs = kwargs['extraEnvs']

        if extra_args is not None:
            _setter("extra_args", extra_args)
        if extra_binds is not None:
            _setter("extra_binds", extra_binds)
        if extra_envs is not None:
            _setter("extra_envs", extra_envs)
        if image is not None:
            _setter("image", image)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter(name="extraBinds")
    def extra_binds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_binds")

    @extra_binds.setter
    def extra_binds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_binds", value)

    @property
    @pulumi.getter(name="extraEnvs")
    def extra_envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "extra_envs")

    @extra_envs.setter
    def extra_envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_envs", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs:
    def __init__(__self__, *,
                 drain: Optional[pulumi.Input[bool]] = None,
                 drain_input: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInputArgs']] = None,
                 max_unavailable_controlplane: Optional[pulumi.Input[str]] = None,
                 max_unavailable_worker: Optional[pulumi.Input[str]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            drain=drain,
            drain_input=drain_input,
            max_unavailable_controlplane=max_unavailable_controlplane,
            max_unavailable_worker=max_unavailable_worker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             drain: Optional[pulumi.Input[bool]] = None,
             drain_input: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInputArgs']] = None,
             max_unavailable_controlplane: Optional[pulumi.Input[str]] = None,
             max_unavailable_worker: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'drainInput' in kwargs:
            drain_input = kwargs['drainInput']
        if 'maxUnavailableControlplane' in kwargs:
            max_unavailable_controlplane = kwargs['maxUnavailableControlplane']
        if 'maxUnavailableWorker' in kwargs:
            max_unavailable_worker = kwargs['maxUnavailableWorker']

        if drain is not None:
            _setter("drain", drain)
        if drain_input is not None:
            _setter("drain_input", drain_input)
        if max_unavailable_controlplane is not None:
            _setter("max_unavailable_controlplane", max_unavailable_controlplane)
        if max_unavailable_worker is not None:
            _setter("max_unavailable_worker", max_unavailable_worker)

    @property
    @pulumi.getter
    def drain(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drain")

    @drain.setter
    def drain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain", value)

    @property
    @pulumi.getter(name="drainInput")
    def drain_input(self) -> Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInputArgs']]:
        return pulumi.get(self, "drain_input")

    @drain_input.setter
    def drain_input(self, value: Optional[pulumi.Input['ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInputArgs']]):
        pulumi.set(self, "drain_input", value)

    @property
    @pulumi.getter(name="maxUnavailableControlplane")
    def max_unavailable_controlplane(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_unavailable_controlplane")

    @max_unavailable_controlplane.setter
    def max_unavailable_controlplane(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable_controlplane", value)

    @property
    @pulumi.getter(name="maxUnavailableWorker")
    def max_unavailable_worker(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max_unavailable_worker")

    @max_unavailable_worker.setter
    def max_unavailable_worker(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable_worker", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInputArgs:
    def __init__(__self__, *,
                 delete_local_data: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 grace_period: Optional[pulumi.Input[int]] = None,
                 ignore_daemon_sets: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyDrainInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delete_local_data=delete_local_data,
            force=force,
            grace_period=grace_period,
            ignore_daemon_sets=ignore_daemon_sets,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delete_local_data: Optional[pulumi.Input[bool]] = None,
             force: Optional[pulumi.Input[bool]] = None,
             grace_period: Optional[pulumi.Input[int]] = None,
             ignore_daemon_sets: Optional[pulumi.Input[bool]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'deleteLocalData' in kwargs:
            delete_local_data = kwargs['deleteLocalData']
        if 'gracePeriod' in kwargs:
            grace_period = kwargs['gracePeriod']
        if 'ignoreDaemonSets' in kwargs:
            ignore_daemon_sets = kwargs['ignoreDaemonSets']

        if delete_local_data is not None:
            _setter("delete_local_data", delete_local_data)
        if force is not None:
            _setter("force", force)
        if grace_period is not None:
            _setter("grace_period", grace_period)
        if ignore_daemon_sets is not None:
            _setter("ignore_daemon_sets", ignore_daemon_sets)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter(name="deleteLocalData")
    def delete_local_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_local_data")

    @delete_local_data.setter
    def delete_local_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_local_data", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "grace_period")

    @grace_period.setter
    def grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grace_period", value)

    @property
    @pulumi.getter(name="ignoreDaemonSets")
    def ignore_daemon_sets(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_daemon_sets")

    @ignore_daemon_sets.setter
    def ignore_daemon_sets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_daemon_sets", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ClusterTemplateTemplateRevisionQuestionArgs:
    def __init__(__self__, *,
                 default: pulumi.Input[str],
                 variable: pulumi.Input[str],
                 required: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default: Default variable value (string)
        :param pulumi.Input[str] variable: Variable name (string)
        :param pulumi.Input[bool] required: Required variable. Default `false` (bool)
        :param pulumi.Input[str] type: Variable type. `boolean`, `int` and `string` are allowed. Default `string` (string)
        """
        ClusterTemplateTemplateRevisionQuestionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            variable=variable,
            required=required,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: pulumi.Input[str],
             variable: pulumi.Input[str],
             required: Optional[pulumi.Input[bool]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("default", default)
        _setter("variable", variable)
        if required is not None:
            _setter("required", required)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def default(self) -> pulumi.Input[str]:
        """
        Default variable value (string)
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: pulumi.Input[str]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def variable(self) -> pulumi.Input[str]:
        """
        Variable name (string)
        """
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: pulumi.Input[str]):
        pulumi.set(self, "variable", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Required variable. Default `false` (bool)
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Variable type. `boolean`, `int` and `string` are allowed. Default `string` (string)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ClusterV2AgentEnvVarArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the Cluster v2 (string)
        :param pulumi.Input[str] value: The taint value (string)
        """
        ClusterV2AgentEnvVarArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster v2 (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterV2ClusterAgentDeploymentCustomizationArgs:
    def __init__(__self__, *,
                 append_tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationAppendTolerationArgs']]]] = None,
                 override_affinity: Optional[pulumi.Input[str]] = None,
                 override_resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationAppendTolerationArgs']]] append_tolerations: User defined tolerations to append to agent (list)
        :param pulumi.Input[str] override_affinity: User defined affinity to override default agent affinity (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]] override_resource_requirements: User defined resource requirements to set on the agent (list)
        """
        ClusterV2ClusterAgentDeploymentCustomizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            append_tolerations=append_tolerations,
            override_affinity=override_affinity,
            override_resource_requirements=override_resource_requirements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             append_tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationAppendTolerationArgs']]]] = None,
             override_affinity: Optional[pulumi.Input[str]] = None,
             override_resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'appendTolerations' in kwargs:
            append_tolerations = kwargs['appendTolerations']
        if 'overrideAffinity' in kwargs:
            override_affinity = kwargs['overrideAffinity']
        if 'overrideResourceRequirements' in kwargs:
            override_resource_requirements = kwargs['overrideResourceRequirements']

        if append_tolerations is not None:
            _setter("append_tolerations", append_tolerations)
        if override_affinity is not None:
            _setter("override_affinity", override_affinity)
        if override_resource_requirements is not None:
            _setter("override_resource_requirements", override_resource_requirements)

    @property
    @pulumi.getter(name="appendTolerations")
    def append_tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationAppendTolerationArgs']]]]:
        """
        User defined tolerations to append to agent (list)
        """
        return pulumi.get(self, "append_tolerations")

    @append_tolerations.setter
    def append_tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationAppendTolerationArgs']]]]):
        pulumi.set(self, "append_tolerations", value)

    @property
    @pulumi.getter(name="overrideAffinity")
    def override_affinity(self) -> Optional[pulumi.Input[str]]:
        """
        User defined affinity to override default agent affinity (string)
        """
        return pulumi.get(self, "override_affinity")

    @override_affinity.setter
    def override_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_affinity", value)

    @property
    @pulumi.getter(name="overrideResourceRequirements")
    def override_resource_requirements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]]:
        """
        User defined resource requirements to set on the agent (list)
        """
        return pulumi.get(self, "override_resource_requirements")

    @override_resource_requirements.setter
    def override_resource_requirements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]]):
        pulumi.set(self, "override_resource_requirements", value)


@pulumi.input_type
class ClusterV2ClusterAgentDeploymentCustomizationAppendTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Machine selector label match expressions key (string)
        :param pulumi.Input[str] effect: The taint effect. Default: `\\"NoExecute\\"` (string)
        :param pulumi.Input[str] operator: Machine selector label match expressions operator (string)
        :param pulumi.Input[int] seconds: The number of seconds a pod will stay bound to a node with a matching taint (int)
        :param pulumi.Input[str] value: The taint value (string)
        """
        ClusterV2ClusterAgentDeploymentCustomizationAppendTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Machine selector label match expressions key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The taint effect. Default: `\\"NoExecute\\"` (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Machine selector label match expressions operator (string)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds a pod will stay bound to a node with a matching taint (int)
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs:
    def __init__(__self__, *,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpu_limit: The maximum CPU limit for agent (string)
        :param pulumi.Input[str] cpu_request: The minimum CPU required for agent (string)
        :param pulumi.Input[str] memory_limit: The maximum memory limit for agent (string)
        :param pulumi.Input[str] memory_request: The minimum memory required for agent (string)
        """
        ClusterV2ClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cpu_limit=cpu_limit,
            cpu_request=cpu_request,
            memory_limit=memory_limit,
            memory_request=memory_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cpu_limit: Optional[pulumi.Input[str]] = None,
             cpu_request: Optional[pulumi.Input[str]] = None,
             memory_limit: Optional[pulumi.Input[str]] = None,
             memory_request: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpuLimit' in kwargs:
            cpu_limit = kwargs['cpuLimit']
        if 'cpuRequest' in kwargs:
            cpu_request = kwargs['cpuRequest']
        if 'memoryLimit' in kwargs:
            memory_limit = kwargs['memoryLimit']
        if 'memoryRequest' in kwargs:
            memory_request = kwargs['memoryRequest']

        if cpu_limit is not None:
            _setter("cpu_limit", cpu_limit)
        if cpu_request is not None:
            _setter("cpu_request", cpu_request)
        if memory_limit is not None:
            _setter("memory_limit", memory_limit)
        if memory_request is not None:
            _setter("memory_request", memory_request)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum CPU limit for agent (string)
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum CPU required for agent (string)
        """
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory limit for agent (string)
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum memory required for agent (string)
        """
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)


@pulumi.input_type
class ClusterV2ClusterRegistrationTokenArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 insecure_command: Optional[pulumi.Input[str]] = None,
                 insecure_node_command: Optional[pulumi.Input[str]] = None,
                 insecure_windows_node_command: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 manifest_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_command: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 windows_node_command: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for the Cluster V2 (map)
        :param pulumi.Input[str] cluster_id: Cluster ID (string)
        :param pulumi.Input[str] command: Command to execute in a imported k8s cluster (string)
        :param pulumi.Input[str] id: (Computed) The ID of the resource (string)
        :param pulumi.Input[str] insecure_command: Insecure command to execute in a imported k8s cluster (string)
        :param pulumi.Input[str] insecure_node_command: Insecure node command to execute in a imported k8s cluster (string)
        :param pulumi.Input[str] insecure_windows_node_command: Insecure windows command to execute in a imported k8s cluster (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the Cluster V2 (map)
        :param pulumi.Input[str] manifest_url: K8s manifest url to execute with `kubectl` to import an existing k8s cluster (string)
        :param pulumi.Input[str] name: The name of the Cluster v2 (string)
        :param pulumi.Input[str] node_command: Node command to execute in linux nodes for custom k8s cluster (string)
        :param pulumi.Input[str] token: Token for cluster registration token object (string)
        :param pulumi.Input[str] windows_node_command: Node command to execute in windows nodes for custom k8s cluster (string)
        """
        ClusterV2ClusterRegistrationTokenArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            cluster_id=cluster_id,
            command=command,
            id=id,
            insecure_command=insecure_command,
            insecure_node_command=insecure_node_command,
            insecure_windows_node_command=insecure_windows_node_command,
            labels=labels,
            manifest_url=manifest_url,
            name=name,
            node_command=node_command,
            token=token,
            windows_node_command=windows_node_command,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             cluster_id: Optional[pulumi.Input[str]] = None,
             command: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             insecure_command: Optional[pulumi.Input[str]] = None,
             insecure_node_command: Optional[pulumi.Input[str]] = None,
             insecure_windows_node_command: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             manifest_url: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_command: Optional[pulumi.Input[str]] = None,
             token: Optional[pulumi.Input[str]] = None,
             windows_node_command: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'insecureCommand' in kwargs:
            insecure_command = kwargs['insecureCommand']
        if 'insecureNodeCommand' in kwargs:
            insecure_node_command = kwargs['insecureNodeCommand']
        if 'insecureWindowsNodeCommand' in kwargs:
            insecure_windows_node_command = kwargs['insecureWindowsNodeCommand']
        if 'manifestUrl' in kwargs:
            manifest_url = kwargs['manifestUrl']
        if 'nodeCommand' in kwargs:
            node_command = kwargs['nodeCommand']
        if 'windowsNodeCommand' in kwargs:
            windows_node_command = kwargs['windowsNodeCommand']

        if annotations is not None:
            _setter("annotations", annotations)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if command is not None:
            _setter("command", command)
        if id is not None:
            _setter("id", id)
        if insecure_command is not None:
            _setter("insecure_command", insecure_command)
        if insecure_node_command is not None:
            _setter("insecure_node_command", insecure_node_command)
        if insecure_windows_node_command is not None:
            _setter("insecure_windows_node_command", insecure_windows_node_command)
        if labels is not None:
            _setter("labels", labels)
        if manifest_url is not None:
            _setter("manifest_url", manifest_url)
        if name is not None:
            _setter("name", name)
        if node_command is not None:
            _setter("node_command", node_command)
        if token is not None:
            _setter("token", token)
        if windows_node_command is not None:
            _setter("windows_node_command", windows_node_command)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations for the Cluster V2 (map)
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID (string)
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        """
        Command to execute in a imported k8s cluster (string)
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) The ID of the resource (string)
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="insecureCommand")
    def insecure_command(self) -> Optional[pulumi.Input[str]]:
        """
        Insecure command to execute in a imported k8s cluster (string)
        """
        return pulumi.get(self, "insecure_command")

    @insecure_command.setter
    def insecure_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_command", value)

    @property
    @pulumi.getter(name="insecureNodeCommand")
    def insecure_node_command(self) -> Optional[pulumi.Input[str]]:
        """
        Insecure node command to execute in a imported k8s cluster (string)
        """
        return pulumi.get(self, "insecure_node_command")

    @insecure_node_command.setter
    def insecure_node_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_node_command", value)

    @property
    @pulumi.getter(name="insecureWindowsNodeCommand")
    def insecure_windows_node_command(self) -> Optional[pulumi.Input[str]]:
        """
        Insecure windows command to execute in a imported k8s cluster (string)
        """
        return pulumi.get(self, "insecure_windows_node_command")

    @insecure_windows_node_command.setter
    def insecure_windows_node_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insecure_windows_node_command", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the Cluster V2 (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="manifestUrl")
    def manifest_url(self) -> Optional[pulumi.Input[str]]:
        """
        K8s manifest url to execute with `kubectl` to import an existing k8s cluster (string)
        """
        return pulumi.get(self, "manifest_url")

    @manifest_url.setter
    def manifest_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manifest_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Cluster v2 (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeCommand")
    def node_command(self) -> Optional[pulumi.Input[str]]:
        """
        Node command to execute in linux nodes for custom k8s cluster (string)
        """
        return pulumi.get(self, "node_command")

    @node_command.setter
    def node_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_command", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Token for cluster registration token object (string)
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="windowsNodeCommand")
    def windows_node_command(self) -> Optional[pulumi.Input[str]]:
        """
        Node command to execute in windows nodes for custom k8s cluster (string)
        """
        return pulumi.get(self, "windows_node_command")

    @windows_node_command.setter
    def windows_node_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "windows_node_command", value)


@pulumi.input_type
class ClusterV2FleetAgentDeploymentCustomizationArgs:
    def __init__(__self__, *,
                 append_tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationAppendTolerationArgs']]]] = None,
                 override_affinity: Optional[pulumi.Input[str]] = None,
                 override_resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationAppendTolerationArgs']]] append_tolerations: User defined tolerations to append to agent (list)
        :param pulumi.Input[str] override_affinity: User defined affinity to override default agent affinity (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]] override_resource_requirements: User defined resource requirements to set on the agent (list)
        """
        ClusterV2FleetAgentDeploymentCustomizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            append_tolerations=append_tolerations,
            override_affinity=override_affinity,
            override_resource_requirements=override_resource_requirements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             append_tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationAppendTolerationArgs']]]] = None,
             override_affinity: Optional[pulumi.Input[str]] = None,
             override_resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'appendTolerations' in kwargs:
            append_tolerations = kwargs['appendTolerations']
        if 'overrideAffinity' in kwargs:
            override_affinity = kwargs['overrideAffinity']
        if 'overrideResourceRequirements' in kwargs:
            override_resource_requirements = kwargs['overrideResourceRequirements']

        if append_tolerations is not None:
            _setter("append_tolerations", append_tolerations)
        if override_affinity is not None:
            _setter("override_affinity", override_affinity)
        if override_resource_requirements is not None:
            _setter("override_resource_requirements", override_resource_requirements)

    @property
    @pulumi.getter(name="appendTolerations")
    def append_tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationAppendTolerationArgs']]]]:
        """
        User defined tolerations to append to agent (list)
        """
        return pulumi.get(self, "append_tolerations")

    @append_tolerations.setter
    def append_tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationAppendTolerationArgs']]]]):
        pulumi.set(self, "append_tolerations", value)

    @property
    @pulumi.getter(name="overrideAffinity")
    def override_affinity(self) -> Optional[pulumi.Input[str]]:
        """
        User defined affinity to override default agent affinity (string)
        """
        return pulumi.get(self, "override_affinity")

    @override_affinity.setter
    def override_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_affinity", value)

    @property
    @pulumi.getter(name="overrideResourceRequirements")
    def override_resource_requirements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]]:
        """
        User defined resource requirements to set on the agent (list)
        """
        return pulumi.get(self, "override_resource_requirements")

    @override_resource_requirements.setter
    def override_resource_requirements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirementArgs']]]]):
        pulumi.set(self, "override_resource_requirements", value)


@pulumi.input_type
class ClusterV2FleetAgentDeploymentCustomizationAppendTolerationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Machine selector label match expressions key (string)
        :param pulumi.Input[str] effect: The taint effect. Default: `\\"NoExecute\\"` (string)
        :param pulumi.Input[str] operator: Machine selector label match expressions operator (string)
        :param pulumi.Input[int] seconds: The number of seconds a pod will stay bound to a node with a matching taint (int)
        :param pulumi.Input[str] value: The taint value (string)
        """
        ClusterV2FleetAgentDeploymentCustomizationAppendTolerationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            effect=effect,
            operator=operator,
            seconds=seconds,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             seconds: Optional[pulumi.Input[int]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        if effect is not None:
            _setter("effect", effect)
        if operator is not None:
            _setter("operator", operator)
        if seconds is not None:
            _setter("seconds", seconds)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Machine selector label match expressions key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The taint effect. Default: `\\"NoExecute\\"` (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Machine selector label match expressions operator (string)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The number of seconds a pod will stay bound to a node with a matching taint (int)
        """
        return pulumi.get(self, "seconds")

    @seconds.setter
    def seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirementArgs:
    def __init__(__self__, *,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 memory_limit: Optional[pulumi.Input[str]] = None,
                 memory_request: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cpu_limit: The maximum CPU limit for agent (string)
        :param pulumi.Input[str] cpu_request: The minimum CPU required for agent (string)
        :param pulumi.Input[str] memory_limit: The maximum memory limit for agent (string)
        :param pulumi.Input[str] memory_request: The minimum memory required for agent (string)
        """
        ClusterV2FleetAgentDeploymentCustomizationOverrideResourceRequirementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cpu_limit=cpu_limit,
            cpu_request=cpu_request,
            memory_limit=memory_limit,
            memory_request=memory_request,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cpu_limit: Optional[pulumi.Input[str]] = None,
             cpu_request: Optional[pulumi.Input[str]] = None,
             memory_limit: Optional[pulumi.Input[str]] = None,
             memory_request: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cpuLimit' in kwargs:
            cpu_limit = kwargs['cpuLimit']
        if 'cpuRequest' in kwargs:
            cpu_request = kwargs['cpuRequest']
        if 'memoryLimit' in kwargs:
            memory_limit = kwargs['memoryLimit']
        if 'memoryRequest' in kwargs:
            memory_request = kwargs['memoryRequest']

        if cpu_limit is not None:
            _setter("cpu_limit", cpu_limit)
        if cpu_request is not None:
            _setter("cpu_request", cpu_request)
        if memory_limit is not None:
            _setter("memory_limit", memory_limit)
        if memory_request is not None:
            _setter("memory_request", memory_request)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum CPU limit for agent (string)
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum CPU required for agent (string)
        """
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="memoryLimit")
    def memory_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory limit for agent (string)
        """
        return pulumi.get(self, "memory_limit")

    @memory_limit.setter
    def memory_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_limit", value)

    @property
    @pulumi.getter(name="memoryRequest")
    def memory_request(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum memory required for agent (string)
        """
        return pulumi.get(self, "memory_request")

    @memory_request.setter
    def memory_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_request", value)


@pulumi.input_type
class ClusterV2LocalAuthEndpointArgs:
    def __init__(__self__, *,
                 ca_certs: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ca_certs: CA certs for the authorized cluster endpoint (string)
        :param pulumi.Input[bool] enabled: Drain options enabled? Default `true` (bool)
        :param pulumi.Input[str] fqdn: FQDN for the authorized cluster endpoint (string)
        """
        ClusterV2LocalAuthEndpointArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ca_certs=ca_certs,
            enabled=enabled,
            fqdn=fqdn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ca_certs: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             fqdn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caCerts' in kwargs:
            ca_certs = kwargs['caCerts']

        if ca_certs is not None:
            _setter("ca_certs", ca_certs)
        if enabled is not None:
            _setter("enabled", enabled)
        if fqdn is not None:
            _setter("fqdn", fqdn)

    @property
    @pulumi.getter(name="caCerts")
    def ca_certs(self) -> Optional[pulumi.Input[str]]:
        """
        CA certs for the authorized cluster endpoint (string)
        """
        return pulumi.get(self, "ca_certs")

    @ca_certs.setter
    def ca_certs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certs", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options enabled? Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN for the authorized cluster endpoint (string)
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)


@pulumi.input_type
class ClusterV2RkeConfigArgs:
    def __init__(__self__, *,
                 additional_manifest: Optional[pulumi.Input[str]] = None,
                 chart_values: Optional[pulumi.Input[str]] = None,
                 etcd: Optional[pulumi.Input['ClusterV2RkeConfigEtcdArgs']] = None,
                 etcd_snapshot_create: Optional[pulumi.Input['ClusterV2RkeConfigEtcdSnapshotCreateArgs']] = None,
                 etcd_snapshot_restore: Optional[pulumi.Input['ClusterV2RkeConfigEtcdSnapshotRestoreArgs']] = None,
                 local_auth_endpoint: Optional[pulumi.Input['ClusterV2RkeConfigLocalAuthEndpointArgs']] = None,
                 machine_global_config: Optional[pulumi.Input[str]] = None,
                 machine_pool_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolDefaultArgs']]]] = None,
                 machine_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolArgs']]]] = None,
                 machine_selector_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigArgs']]]] = None,
                 registries: Optional[pulumi.Input['ClusterV2RkeConfigRegistriesArgs']] = None,
                 rotate_certificates: Optional[pulumi.Input['ClusterV2RkeConfigRotateCertificatesArgs']] = None,
                 upgrade_strategy: Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyArgs']] = None):
        """
        :param pulumi.Input[str] additional_manifest: Cluster V2 additional manifest (string)
        :param pulumi.Input[str] chart_values: Cluster V2 chart values. Must be in YAML format (string)
        :param pulumi.Input['ClusterV2RkeConfigEtcdArgs'] etcd: Cluster V2 etcd (list maxitems:1)
        :param pulumi.Input['ClusterV2RkeConfigEtcdSnapshotCreateArgs'] etcd_snapshot_create: Cluster V2 etcd snapshot create (list maxitems:1)
        :param pulumi.Input['ClusterV2RkeConfigEtcdSnapshotRestoreArgs'] etcd_snapshot_restore: Cluster V2 etcd snapshot restore (list maxitems:1)
        :param pulumi.Input['ClusterV2RkeConfigLocalAuthEndpointArgs'] local_auth_endpoint: Cluster V2 local auth endpoint (list maxitems:1)
        :param pulumi.Input[str] machine_global_config: Cluster V2 machine global config. Must be in YAML format (string)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolArgs']]] machine_pools: Cluster V2 machine pools (list)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigArgs']]] machine_selector_configs: Cluster V2 machine selector config (list)
        :param pulumi.Input['ClusterV2RkeConfigRegistriesArgs'] registries: Cluster V2 docker registries (list maxitems:1)
        :param pulumi.Input['ClusterV2RkeConfigRotateCertificatesArgs'] rotate_certificates: Cluster V2 certificate rotation (list maxitems:1)
        :param pulumi.Input['ClusterV2RkeConfigUpgradeStrategyArgs'] upgrade_strategy: Cluster V2 upgrade strategy (list maxitems:1)
        """
        ClusterV2RkeConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            additional_manifest=additional_manifest,
            chart_values=chart_values,
            etcd=etcd,
            etcd_snapshot_create=etcd_snapshot_create,
            etcd_snapshot_restore=etcd_snapshot_restore,
            local_auth_endpoint=local_auth_endpoint,
            machine_global_config=machine_global_config,
            machine_pool_defaults=machine_pool_defaults,
            machine_pools=machine_pools,
            machine_selector_configs=machine_selector_configs,
            registries=registries,
            rotate_certificates=rotate_certificates,
            upgrade_strategy=upgrade_strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             additional_manifest: Optional[pulumi.Input[str]] = None,
             chart_values: Optional[pulumi.Input[str]] = None,
             etcd: Optional[pulumi.Input['ClusterV2RkeConfigEtcdArgs']] = None,
             etcd_snapshot_create: Optional[pulumi.Input['ClusterV2RkeConfigEtcdSnapshotCreateArgs']] = None,
             etcd_snapshot_restore: Optional[pulumi.Input['ClusterV2RkeConfigEtcdSnapshotRestoreArgs']] = None,
             local_auth_endpoint: Optional[pulumi.Input['ClusterV2RkeConfigLocalAuthEndpointArgs']] = None,
             machine_global_config: Optional[pulumi.Input[str]] = None,
             machine_pool_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolDefaultArgs']]]] = None,
             machine_pools: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolArgs']]]] = None,
             machine_selector_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigArgs']]]] = None,
             registries: Optional[pulumi.Input['ClusterV2RkeConfigRegistriesArgs']] = None,
             rotate_certificates: Optional[pulumi.Input['ClusterV2RkeConfigRotateCertificatesArgs']] = None,
             upgrade_strategy: Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'additionalManifest' in kwargs:
            additional_manifest = kwargs['additionalManifest']
        if 'chartValues' in kwargs:
            chart_values = kwargs['chartValues']
        if 'etcdSnapshotCreate' in kwargs:
            etcd_snapshot_create = kwargs['etcdSnapshotCreate']
        if 'etcdSnapshotRestore' in kwargs:
            etcd_snapshot_restore = kwargs['etcdSnapshotRestore']
        if 'localAuthEndpoint' in kwargs:
            local_auth_endpoint = kwargs['localAuthEndpoint']
        if 'machineGlobalConfig' in kwargs:
            machine_global_config = kwargs['machineGlobalConfig']
        if 'machinePoolDefaults' in kwargs:
            machine_pool_defaults = kwargs['machinePoolDefaults']
        if 'machinePools' in kwargs:
            machine_pools = kwargs['machinePools']
        if 'machineSelectorConfigs' in kwargs:
            machine_selector_configs = kwargs['machineSelectorConfigs']
        if 'rotateCertificates' in kwargs:
            rotate_certificates = kwargs['rotateCertificates']
        if 'upgradeStrategy' in kwargs:
            upgrade_strategy = kwargs['upgradeStrategy']

        if additional_manifest is not None:
            _setter("additional_manifest", additional_manifest)
        if chart_values is not None:
            _setter("chart_values", chart_values)
        if etcd is not None:
            _setter("etcd", etcd)
        if etcd_snapshot_create is not None:
            _setter("etcd_snapshot_create", etcd_snapshot_create)
        if etcd_snapshot_restore is not None:
            _setter("etcd_snapshot_restore", etcd_snapshot_restore)
        if local_auth_endpoint is not None:
            warnings.warn("""Use rancher2_cluster_v2.local_auth_endpoint instead""", DeprecationWarning)
            pulumi.log.warn("""local_auth_endpoint is deprecated: Use rancher2_cluster_v2.local_auth_endpoint instead""")
        if local_auth_endpoint is not None:
            _setter("local_auth_endpoint", local_auth_endpoint)
        if machine_global_config is not None:
            _setter("machine_global_config", machine_global_config)
        if machine_pool_defaults is not None:
            _setter("machine_pool_defaults", machine_pool_defaults)
        if machine_pools is not None:
            _setter("machine_pools", machine_pools)
        if machine_selector_configs is not None:
            _setter("machine_selector_configs", machine_selector_configs)
        if registries is not None:
            _setter("registries", registries)
        if rotate_certificates is not None:
            _setter("rotate_certificates", rotate_certificates)
        if upgrade_strategy is not None:
            _setter("upgrade_strategy", upgrade_strategy)

    @property
    @pulumi.getter(name="additionalManifest")
    def additional_manifest(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster V2 additional manifest (string)
        """
        return pulumi.get(self, "additional_manifest")

    @additional_manifest.setter
    def additional_manifest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_manifest", value)

    @property
    @pulumi.getter(name="chartValues")
    def chart_values(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster V2 chart values. Must be in YAML format (string)
        """
        return pulumi.get(self, "chart_values")

    @chart_values.setter
    def chart_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_values", value)

    @property
    @pulumi.getter
    def etcd(self) -> Optional[pulumi.Input['ClusterV2RkeConfigEtcdArgs']]:
        """
        Cluster V2 etcd (list maxitems:1)
        """
        return pulumi.get(self, "etcd")

    @etcd.setter
    def etcd(self, value: Optional[pulumi.Input['ClusterV2RkeConfigEtcdArgs']]):
        pulumi.set(self, "etcd", value)

    @property
    @pulumi.getter(name="etcdSnapshotCreate")
    def etcd_snapshot_create(self) -> Optional[pulumi.Input['ClusterV2RkeConfigEtcdSnapshotCreateArgs']]:
        """
        Cluster V2 etcd snapshot create (list maxitems:1)
        """
        return pulumi.get(self, "etcd_snapshot_create")

    @etcd_snapshot_create.setter
    def etcd_snapshot_create(self, value: Optional[pulumi.Input['ClusterV2RkeConfigEtcdSnapshotCreateArgs']]):
        pulumi.set(self, "etcd_snapshot_create", value)

    @property
    @pulumi.getter(name="etcdSnapshotRestore")
    def etcd_snapshot_restore(self) -> Optional[pulumi.Input['ClusterV2RkeConfigEtcdSnapshotRestoreArgs']]:
        """
        Cluster V2 etcd snapshot restore (list maxitems:1)
        """
        return pulumi.get(self, "etcd_snapshot_restore")

    @etcd_snapshot_restore.setter
    def etcd_snapshot_restore(self, value: Optional[pulumi.Input['ClusterV2RkeConfigEtcdSnapshotRestoreArgs']]):
        pulumi.set(self, "etcd_snapshot_restore", value)

    @property
    @pulumi.getter(name="localAuthEndpoint")
    def local_auth_endpoint(self) -> Optional[pulumi.Input['ClusterV2RkeConfigLocalAuthEndpointArgs']]:
        """
        Cluster V2 local auth endpoint (list maxitems:1)
        """
        warnings.warn("""Use rancher2_cluster_v2.local_auth_endpoint instead""", DeprecationWarning)
        pulumi.log.warn("""local_auth_endpoint is deprecated: Use rancher2_cluster_v2.local_auth_endpoint instead""")

        return pulumi.get(self, "local_auth_endpoint")

    @local_auth_endpoint.setter
    def local_auth_endpoint(self, value: Optional[pulumi.Input['ClusterV2RkeConfigLocalAuthEndpointArgs']]):
        pulumi.set(self, "local_auth_endpoint", value)

    @property
    @pulumi.getter(name="machineGlobalConfig")
    def machine_global_config(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster V2 machine global config. Must be in YAML format (string)
        """
        return pulumi.get(self, "machine_global_config")

    @machine_global_config.setter
    def machine_global_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_global_config", value)

    @property
    @pulumi.getter(name="machinePoolDefaults")
    def machine_pool_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolDefaultArgs']]]]:
        return pulumi.get(self, "machine_pool_defaults")

    @machine_pool_defaults.setter
    def machine_pool_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolDefaultArgs']]]]):
        pulumi.set(self, "machine_pool_defaults", value)

    @property
    @pulumi.getter(name="machinePools")
    def machine_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolArgs']]]]:
        """
        Cluster V2 machine pools (list)
        """
        return pulumi.get(self, "machine_pools")

    @machine_pools.setter
    def machine_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolArgs']]]]):
        pulumi.set(self, "machine_pools", value)

    @property
    @pulumi.getter(name="machineSelectorConfigs")
    def machine_selector_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigArgs']]]]:
        """
        Cluster V2 machine selector config (list)
        """
        return pulumi.get(self, "machine_selector_configs")

    @machine_selector_configs.setter
    def machine_selector_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigArgs']]]]):
        pulumi.set(self, "machine_selector_configs", value)

    @property
    @pulumi.getter
    def registries(self) -> Optional[pulumi.Input['ClusterV2RkeConfigRegistriesArgs']]:
        """
        Cluster V2 docker registries (list maxitems:1)
        """
        return pulumi.get(self, "registries")

    @registries.setter
    def registries(self, value: Optional[pulumi.Input['ClusterV2RkeConfigRegistriesArgs']]):
        pulumi.set(self, "registries", value)

    @property
    @pulumi.getter(name="rotateCertificates")
    def rotate_certificates(self) -> Optional[pulumi.Input['ClusterV2RkeConfigRotateCertificatesArgs']]:
        """
        Cluster V2 certificate rotation (list maxitems:1)
        """
        return pulumi.get(self, "rotate_certificates")

    @rotate_certificates.setter
    def rotate_certificates(self, value: Optional[pulumi.Input['ClusterV2RkeConfigRotateCertificatesArgs']]):
        pulumi.set(self, "rotate_certificates", value)

    @property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyArgs']]:
        """
        Cluster V2 upgrade strategy (list maxitems:1)
        """
        return pulumi.get(self, "upgrade_strategy")

    @upgrade_strategy.setter
    def upgrade_strategy(self, value: Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyArgs']]):
        pulumi.set(self, "upgrade_strategy", value)


@pulumi.input_type
class ClusterV2RkeConfigEtcdArgs:
    def __init__(__self__, *,
                 disable_snapshots: Optional[pulumi.Input[bool]] = None,
                 s3_config: Optional[pulumi.Input['ClusterV2RkeConfigEtcdS3ConfigArgs']] = None,
                 snapshot_retention: Optional[pulumi.Input[int]] = None,
                 snapshot_schedule_cron: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] disable_snapshots: Disable ETCD snapshots. Default: `false` (bool)
        :param pulumi.Input['ClusterV2RkeConfigEtcdS3ConfigArgs'] s3_config: Creation option for etcd service (list maxitems:1)
        :param pulumi.Input[int] snapshot_retention: ETCD snapshot retention (int)
        :param pulumi.Input[str] snapshot_schedule_cron: ETCD snapshot schedule cron (e.g `\\"0 */5 * * *\\"`) (string)
        """
        ClusterV2RkeConfigEtcdArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disable_snapshots=disable_snapshots,
            s3_config=s3_config,
            snapshot_retention=snapshot_retention,
            snapshot_schedule_cron=snapshot_schedule_cron,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disable_snapshots: Optional[pulumi.Input[bool]] = None,
             s3_config: Optional[pulumi.Input['ClusterV2RkeConfigEtcdS3ConfigArgs']] = None,
             snapshot_retention: Optional[pulumi.Input[int]] = None,
             snapshot_schedule_cron: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'disableSnapshots' in kwargs:
            disable_snapshots = kwargs['disableSnapshots']
        if 's3Config' in kwargs:
            s3_config = kwargs['s3Config']
        if 'snapshotRetention' in kwargs:
            snapshot_retention = kwargs['snapshotRetention']
        if 'snapshotScheduleCron' in kwargs:
            snapshot_schedule_cron = kwargs['snapshotScheduleCron']

        if disable_snapshots is not None:
            _setter("disable_snapshots", disable_snapshots)
        if s3_config is not None:
            _setter("s3_config", s3_config)
        if snapshot_retention is not None:
            _setter("snapshot_retention", snapshot_retention)
        if snapshot_schedule_cron is not None:
            _setter("snapshot_schedule_cron", snapshot_schedule_cron)

    @property
    @pulumi.getter(name="disableSnapshots")
    def disable_snapshots(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable ETCD snapshots. Default: `false` (bool)
        """
        return pulumi.get(self, "disable_snapshots")

    @disable_snapshots.setter
    def disable_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_snapshots", value)

    @property
    @pulumi.getter(name="s3Config")
    def s3_config(self) -> Optional[pulumi.Input['ClusterV2RkeConfigEtcdS3ConfigArgs']]:
        """
        Creation option for etcd service (list maxitems:1)
        """
        return pulumi.get(self, "s3_config")

    @s3_config.setter
    def s3_config(self, value: Optional[pulumi.Input['ClusterV2RkeConfigEtcdS3ConfigArgs']]):
        pulumi.set(self, "s3_config", value)

    @property
    @pulumi.getter(name="snapshotRetention")
    def snapshot_retention(self) -> Optional[pulumi.Input[int]]:
        """
        ETCD snapshot retention (int)
        """
        return pulumi.get(self, "snapshot_retention")

    @snapshot_retention.setter
    def snapshot_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snapshot_retention", value)

    @property
    @pulumi.getter(name="snapshotScheduleCron")
    def snapshot_schedule_cron(self) -> Optional[pulumi.Input[str]]:
        """
        ETCD snapshot schedule cron (e.g `\\"0 */5 * * *\\"`) (string)
        """
        return pulumi.get(self, "snapshot_schedule_cron")

    @snapshot_schedule_cron.setter
    def snapshot_schedule_cron(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_schedule_cron", value)


@pulumi.input_type
class ClusterV2RkeConfigEtcdS3ConfigArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 cloud_credential_name: Optional[pulumi.Input[str]] = None,
                 endpoint_ca: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 skip_ssl_verify: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket: Bucket name for S3 service (string)
        :param pulumi.Input[str] endpoint: ETCD snapshot S3 endpoint (string)
        :param pulumi.Input[str] cloud_credential_name: ETCD snapshot S3 cloud credential name (string)
        :param pulumi.Input[str] endpoint_ca: ETCD snapshot S3 endpoint CA (string)
        :param pulumi.Input[str] folder: ETCD snapshot S3 folder (string)
        :param pulumi.Input[str] region: ETCD snapshot S3 region (string)
        :param pulumi.Input[bool] skip_ssl_verify: Disable ETCD skip ssl verify. Default: `false` (bool)
        """
        ClusterV2RkeConfigEtcdS3ConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            endpoint=endpoint,
            cloud_credential_name=cloud_credential_name,
            endpoint_ca=endpoint_ca,
            folder=folder,
            region=region,
            skip_ssl_verify=skip_ssl_verify,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             endpoint: pulumi.Input[str],
             cloud_credential_name: Optional[pulumi.Input[str]] = None,
             endpoint_ca: Optional[pulumi.Input[str]] = None,
             folder: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             skip_ssl_verify: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'cloudCredentialName' in kwargs:
            cloud_credential_name = kwargs['cloudCredentialName']
        if 'endpointCa' in kwargs:
            endpoint_ca = kwargs['endpointCa']
        if 'skipSslVerify' in kwargs:
            skip_ssl_verify = kwargs['skipSslVerify']

        _setter("bucket", bucket)
        _setter("endpoint", endpoint)
        if cloud_credential_name is not None:
            _setter("cloud_credential_name", cloud_credential_name)
        if endpoint_ca is not None:
            _setter("endpoint_ca", endpoint_ca)
        if folder is not None:
            _setter("folder", folder)
        if region is not None:
            _setter("region", region)
        if skip_ssl_verify is not None:
            _setter("skip_ssl_verify", skip_ssl_verify)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Bucket name for S3 service (string)
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        ETCD snapshot S3 endpoint (string)
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="cloudCredentialName")
    def cloud_credential_name(self) -> Optional[pulumi.Input[str]]:
        """
        ETCD snapshot S3 cloud credential name (string)
        """
        return pulumi.get(self, "cloud_credential_name")

    @cloud_credential_name.setter
    def cloud_credential_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_credential_name", value)

    @property
    @pulumi.getter(name="endpointCa")
    def endpoint_ca(self) -> Optional[pulumi.Input[str]]:
        """
        ETCD snapshot S3 endpoint CA (string)
        """
        return pulumi.get(self, "endpoint_ca")

    @endpoint_ca.setter
    def endpoint_ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_ca", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        ETCD snapshot S3 folder (string)
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        ETCD snapshot S3 region (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="skipSslVerify")
    def skip_ssl_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable ETCD skip ssl verify. Default: `false` (bool)
        """
        return pulumi.get(self, "skip_ssl_verify")

    @skip_ssl_verify.setter
    def skip_ssl_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_ssl_verify", value)


@pulumi.input_type
class ClusterV2RkeConfigEtcdSnapshotCreateArgs:
    def __init__(__self__, *,
                 generation: pulumi.Input[int]):
        """
        :param pulumi.Input[int] generation: ETCD snapshot desired generation (int)
        """
        ClusterV2RkeConfigEtcdSnapshotCreateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            generation=generation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             generation: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("generation", generation)

    @property
    @pulumi.getter
    def generation(self) -> pulumi.Input[int]:
        """
        ETCD snapshot desired generation (int)
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: pulumi.Input[int]):
        pulumi.set(self, "generation", value)


@pulumi.input_type
class ClusterV2RkeConfigEtcdSnapshotRestoreArgs:
    def __init__(__self__, *,
                 generation: pulumi.Input[int],
                 name: pulumi.Input[str],
                 restore_rke_config: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] generation: ETCD snapshot desired generation (int)
        :param pulumi.Input[str] name: The name of the Cluster v2 (string)
        :param pulumi.Input[str] restore_rke_config: ETCD restore RKE config (set to none, all, or kubernetesVersion) (string)
        """
        ClusterV2RkeConfigEtcdSnapshotRestoreArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            generation=generation,
            name=name,
            restore_rke_config=restore_rke_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             generation: pulumi.Input[int],
             name: pulumi.Input[str],
             restore_rke_config: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'restoreRkeConfig' in kwargs:
            restore_rke_config = kwargs['restoreRkeConfig']

        _setter("generation", generation)
        _setter("name", name)
        if restore_rke_config is not None:
            _setter("restore_rke_config", restore_rke_config)

    @property
    @pulumi.getter
    def generation(self) -> pulumi.Input[int]:
        """
        ETCD snapshot desired generation (int)
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: pulumi.Input[int]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster v2 (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="restoreRkeConfig")
    def restore_rke_config(self) -> Optional[pulumi.Input[str]]:
        """
        ETCD restore RKE config (set to none, all, or kubernetesVersion) (string)
        """
        return pulumi.get(self, "restore_rke_config")

    @restore_rke_config.setter
    def restore_rke_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restore_rke_config", value)


@pulumi.input_type
class ClusterV2RkeConfigLocalAuthEndpointArgs:
    def __init__(__self__, *,
                 ca_certs: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ca_certs: CA certs for the authorized cluster endpoint (string)
        :param pulumi.Input[bool] enabled: Drain options enabled? Default `true` (bool)
        :param pulumi.Input[str] fqdn: FQDN for the authorized cluster endpoint (string)
        """
        ClusterV2RkeConfigLocalAuthEndpointArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ca_certs=ca_certs,
            enabled=enabled,
            fqdn=fqdn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ca_certs: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             fqdn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'caCerts' in kwargs:
            ca_certs = kwargs['caCerts']

        if ca_certs is not None:
            _setter("ca_certs", ca_certs)
        if enabled is not None:
            _setter("enabled", enabled)
        if fqdn is not None:
            _setter("fqdn", fqdn)

    @property
    @pulumi.getter(name="caCerts")
    def ca_certs(self) -> Optional[pulumi.Input[str]]:
        """
        CA certs for the authorized cluster endpoint (string)
        """
        return pulumi.get(self, "ca_certs")

    @ca_certs.setter
    def ca_certs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certs", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options enabled? Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN for the authorized cluster endpoint (string)
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)


@pulumi.input_type
class ClusterV2RkeConfigMachinePoolArgs:
    def __init__(__self__, *,
                 machine_config: pulumi.Input['ClusterV2RkeConfigMachinePoolMachineConfigArgs'],
                 name: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cloud_credential_secret_name: Optional[pulumi.Input[str]] = None,
                 control_plane_role: Optional[pulumi.Input[bool]] = None,
                 drain_before_delete: Optional[pulumi.Input[bool]] = None,
                 etcd_role: Optional[pulumi.Input[bool]] = None,
                 hostname_length_limit: Optional[pulumi.Input[int]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 machine_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 max_unhealthy: Optional[pulumi.Input[str]] = None,
                 node_drain_timeout: Optional[pulumi.Input[int]] = None,
                 node_startup_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 quantity: Optional[pulumi.Input[int]] = None,
                 rolling_update: Optional[pulumi.Input['ClusterV2RkeConfigMachinePoolRollingUpdateArgs']] = None,
                 taints: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolTaintArgs']]]] = None,
                 unhealthy_node_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 unhealthy_range: Optional[pulumi.Input[str]] = None,
                 worker_role: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['ClusterV2RkeConfigMachinePoolMachineConfigArgs'] machine_config: Machine pool node config (list)
        :param pulumi.Input[str] name: The name of the Cluster v2 (string)
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for the Cluster V2 (map)
        :param pulumi.Input[str] cloud_credential_secret_name: Cluster V2 cloud credential secret name (string)
        :param pulumi.Input[bool] control_plane_role: Machine pool control plane role? (bool)
        :param pulumi.Input[bool] drain_before_delete: Machine Pool Drain Before Delete? (bool)
        :param pulumi.Input[bool] etcd_role: Machine pool etcd role? (bool)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for the Cluster V2 (map)
        :param pulumi.Input[Mapping[str, Any]] machine_labels: Labels for Machine pool nodes (map)
        :param pulumi.Input[str] max_unhealthy: Max unhealthy nodes for automated replacement to be allowed (string)
        :param pulumi.Input[int] node_drain_timeout: Seconds a machine has to drain before deletion (int)
        :param pulumi.Input[int] node_startup_timeout_seconds: Seconds a new node has to become active before it is replaced (int)
        :param pulumi.Input[bool] paused: Machine pool paused? (bool)
        :param pulumi.Input[int] quantity: Machine pool quantity (int)
        :param pulumi.Input['ClusterV2RkeConfigMachinePoolRollingUpdateArgs'] rolling_update: Machine pool rolling update (List maxitems:1)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolTaintArgs']]] taints: Machine pool taints (list)
        :param pulumi.Input[int] unhealthy_node_timeout_seconds: Seconds an unhealthy node has to become active before it is replaced (int)
        :param pulumi.Input[str] unhealthy_range: Range of unhealthy nodes for automated replacement to be allowed (string)
        :param pulumi.Input[bool] worker_role: Machine pool worker role? (bool)
        """
        ClusterV2RkeConfigMachinePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            machine_config=machine_config,
            name=name,
            annotations=annotations,
            cloud_credential_secret_name=cloud_credential_secret_name,
            control_plane_role=control_plane_role,
            drain_before_delete=drain_before_delete,
            etcd_role=etcd_role,
            hostname_length_limit=hostname_length_limit,
            labels=labels,
            machine_labels=machine_labels,
            max_unhealthy=max_unhealthy,
            node_drain_timeout=node_drain_timeout,
            node_startup_timeout_seconds=node_startup_timeout_seconds,
            paused=paused,
            quantity=quantity,
            rolling_update=rolling_update,
            taints=taints,
            unhealthy_node_timeout_seconds=unhealthy_node_timeout_seconds,
            unhealthy_range=unhealthy_range,
            worker_role=worker_role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             machine_config: pulumi.Input['ClusterV2RkeConfigMachinePoolMachineConfigArgs'],
             name: pulumi.Input[str],
             annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             cloud_credential_secret_name: Optional[pulumi.Input[str]] = None,
             control_plane_role: Optional[pulumi.Input[bool]] = None,
             drain_before_delete: Optional[pulumi.Input[bool]] = None,
             etcd_role: Optional[pulumi.Input[bool]] = None,
             hostname_length_limit: Optional[pulumi.Input[int]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             machine_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             max_unhealthy: Optional[pulumi.Input[str]] = None,
             node_drain_timeout: Optional[pulumi.Input[int]] = None,
             node_startup_timeout_seconds: Optional[pulumi.Input[int]] = None,
             paused: Optional[pulumi.Input[bool]] = None,
             quantity: Optional[pulumi.Input[int]] = None,
             rolling_update: Optional[pulumi.Input['ClusterV2RkeConfigMachinePoolRollingUpdateArgs']] = None,
             taints: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolTaintArgs']]]] = None,
             unhealthy_node_timeout_seconds: Optional[pulumi.Input[int]] = None,
             unhealthy_range: Optional[pulumi.Input[str]] = None,
             worker_role: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'machineConfig' in kwargs:
            machine_config = kwargs['machineConfig']
        if 'cloudCredentialSecretName' in kwargs:
            cloud_credential_secret_name = kwargs['cloudCredentialSecretName']
        if 'controlPlaneRole' in kwargs:
            control_plane_role = kwargs['controlPlaneRole']
        if 'drainBeforeDelete' in kwargs:
            drain_before_delete = kwargs['drainBeforeDelete']
        if 'etcdRole' in kwargs:
            etcd_role = kwargs['etcdRole']
        if 'hostnameLengthLimit' in kwargs:
            hostname_length_limit = kwargs['hostnameLengthLimit']
        if 'machineLabels' in kwargs:
            machine_labels = kwargs['machineLabels']
        if 'maxUnhealthy' in kwargs:
            max_unhealthy = kwargs['maxUnhealthy']
        if 'nodeDrainTimeout' in kwargs:
            node_drain_timeout = kwargs['nodeDrainTimeout']
        if 'nodeStartupTimeoutSeconds' in kwargs:
            node_startup_timeout_seconds = kwargs['nodeStartupTimeoutSeconds']
        if 'rollingUpdate' in kwargs:
            rolling_update = kwargs['rollingUpdate']
        if 'unhealthyNodeTimeoutSeconds' in kwargs:
            unhealthy_node_timeout_seconds = kwargs['unhealthyNodeTimeoutSeconds']
        if 'unhealthyRange' in kwargs:
            unhealthy_range = kwargs['unhealthyRange']
        if 'workerRole' in kwargs:
            worker_role = kwargs['workerRole']

        _setter("machine_config", machine_config)
        _setter("name", name)
        if annotations is not None:
            _setter("annotations", annotations)
        if cloud_credential_secret_name is not None:
            _setter("cloud_credential_secret_name", cloud_credential_secret_name)
        if control_plane_role is not None:
            _setter("control_plane_role", control_plane_role)
        if drain_before_delete is not None:
            _setter("drain_before_delete", drain_before_delete)
        if etcd_role is not None:
            _setter("etcd_role", etcd_role)
        if hostname_length_limit is not None:
            _setter("hostname_length_limit", hostname_length_limit)
        if labels is not None:
            _setter("labels", labels)
        if machine_labels is not None:
            _setter("machine_labels", machine_labels)
        if max_unhealthy is not None:
            _setter("max_unhealthy", max_unhealthy)
        if node_drain_timeout is not None:
            _setter("node_drain_timeout", node_drain_timeout)
        if node_startup_timeout_seconds is not None:
            _setter("node_startup_timeout_seconds", node_startup_timeout_seconds)
        if paused is not None:
            _setter("paused", paused)
        if quantity is not None:
            _setter("quantity", quantity)
        if rolling_update is not None:
            _setter("rolling_update", rolling_update)
        if taints is not None:
            _setter("taints", taints)
        if unhealthy_node_timeout_seconds is not None:
            _setter("unhealthy_node_timeout_seconds", unhealthy_node_timeout_seconds)
        if unhealthy_range is not None:
            _setter("unhealthy_range", unhealthy_range)
        if worker_role is not None:
            _setter("worker_role", worker_role)

    @property
    @pulumi.getter(name="machineConfig")
    def machine_config(self) -> pulumi.Input['ClusterV2RkeConfigMachinePoolMachineConfigArgs']:
        """
        Machine pool node config (list)
        """
        return pulumi.get(self, "machine_config")

    @machine_config.setter
    def machine_config(self, value: pulumi.Input['ClusterV2RkeConfigMachinePoolMachineConfigArgs']):
        pulumi.set(self, "machine_config", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster v2 (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations for the Cluster V2 (map)
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="cloudCredentialSecretName")
    def cloud_credential_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster V2 cloud credential secret name (string)
        """
        return pulumi.get(self, "cloud_credential_secret_name")

    @cloud_credential_secret_name.setter
    def cloud_credential_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_credential_secret_name", value)

    @property
    @pulumi.getter(name="controlPlaneRole")
    def control_plane_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Machine pool control plane role? (bool)
        """
        return pulumi.get(self, "control_plane_role")

    @control_plane_role.setter
    def control_plane_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "control_plane_role", value)

    @property
    @pulumi.getter(name="drainBeforeDelete")
    def drain_before_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Machine Pool Drain Before Delete? (bool)
        """
        return pulumi.get(self, "drain_before_delete")

    @drain_before_delete.setter
    def drain_before_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain_before_delete", value)

    @property
    @pulumi.getter(name="etcdRole")
    def etcd_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Machine pool etcd role? (bool)
        """
        return pulumi.get(self, "etcd_role")

    @etcd_role.setter
    def etcd_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "etcd_role", value)

    @property
    @pulumi.getter(name="hostnameLengthLimit")
    def hostname_length_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hostname_length_limit")

    @hostname_length_limit.setter
    def hostname_length_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_length_limit", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for the Cluster V2 (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="machineLabels")
    def machine_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for Machine pool nodes (map)
        """
        return pulumi.get(self, "machine_labels")

    @machine_labels.setter
    def machine_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "machine_labels", value)

    @property
    @pulumi.getter(name="maxUnhealthy")
    def max_unhealthy(self) -> Optional[pulumi.Input[str]]:
        """
        Max unhealthy nodes for automated replacement to be allowed (string)
        """
        return pulumi.get(self, "max_unhealthy")

    @max_unhealthy.setter
    def max_unhealthy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unhealthy", value)

    @property
    @pulumi.getter(name="nodeDrainTimeout")
    def node_drain_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Seconds a machine has to drain before deletion (int)
        """
        return pulumi.get(self, "node_drain_timeout")

    @node_drain_timeout.setter
    def node_drain_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_drain_timeout", value)

    @property
    @pulumi.getter(name="nodeStartupTimeoutSeconds")
    def node_startup_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Seconds a new node has to become active before it is replaced (int)
        """
        return pulumi.get(self, "node_startup_timeout_seconds")

    @node_startup_timeout_seconds.setter
    def node_startup_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_startup_timeout_seconds", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        """
        Machine pool paused? (bool)
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[pulumi.Input[int]]:
        """
        Machine pool quantity (int)
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity", value)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['ClusterV2RkeConfigMachinePoolRollingUpdateArgs']]:
        """
        Machine pool rolling update (List maxitems:1)
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['ClusterV2RkeConfigMachinePoolRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)

    @property
    @pulumi.getter
    def taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolTaintArgs']]]]:
        """
        Machine pool taints (list)
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachinePoolTaintArgs']]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter(name="unhealthyNodeTimeoutSeconds")
    def unhealthy_node_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Seconds an unhealthy node has to become active before it is replaced (int)
        """
        return pulumi.get(self, "unhealthy_node_timeout_seconds")

    @unhealthy_node_timeout_seconds.setter
    def unhealthy_node_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unhealthy_node_timeout_seconds", value)

    @property
    @pulumi.getter(name="unhealthyRange")
    def unhealthy_range(self) -> Optional[pulumi.Input[str]]:
        """
        Range of unhealthy nodes for automated replacement to be allowed (string)
        """
        return pulumi.get(self, "unhealthy_range")

    @unhealthy_range.setter
    def unhealthy_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unhealthy_range", value)

    @property
    @pulumi.getter(name="workerRole")
    def worker_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Machine pool worker role? (bool)
        """
        return pulumi.get(self, "worker_role")

    @worker_role.setter
    def worker_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "worker_role", value)


@pulumi.input_type
class ClusterV2RkeConfigMachinePoolDefaultArgs:
    def __init__(__self__, *,
                 hostname_length_limit: Optional[pulumi.Input[int]] = None):
        ClusterV2RkeConfigMachinePoolDefaultArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname_length_limit=hostname_length_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname_length_limit: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'hostnameLengthLimit' in kwargs:
            hostname_length_limit = kwargs['hostnameLengthLimit']

        if hostname_length_limit is not None:
            _setter("hostname_length_limit", hostname_length_limit)

    @property
    @pulumi.getter(name="hostnameLengthLimit")
    def hostname_length_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "hostname_length_limit")

    @hostname_length_limit.setter
    def hostname_length_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hostname_length_limit", value)


@pulumi.input_type
class ClusterV2RkeConfigMachinePoolMachineConfigArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] kind: Machine config kind (string)
        :param pulumi.Input[str] name: The name of the Cluster v2 (string)
        """
        ClusterV2RkeConfigMachinePoolMachineConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kind=kind,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kind: pulumi.Input[str],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("kind", kind)
        _setter("name", name)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Machine config kind (string)
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Cluster v2 (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterV2RkeConfigMachinePoolRollingUpdateArgs:
    def __init__(__self__, *,
                 max_surge: Optional[pulumi.Input[str]] = None,
                 max_unavailable: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] max_surge: Rolling update max surge (string)
        :param pulumi.Input[str] max_unavailable: Rolling update max unavailable (string)
        """
        ClusterV2RkeConfigMachinePoolRollingUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_surge=max_surge,
            max_unavailable=max_unavailable,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_surge: Optional[pulumi.Input[str]] = None,
             max_unavailable: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxSurge' in kwargs:
            max_surge = kwargs['maxSurge']
        if 'maxUnavailable' in kwargs:
            max_unavailable = kwargs['maxUnavailable']

        if max_surge is not None:
            _setter("max_surge", max_surge)
        if max_unavailable is not None:
            _setter("max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[str]]:
        """
        Rolling update max surge (string)
        """
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[str]]:
        """
        Rolling update max unavailable (string)
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable", value)


@pulumi.input_type
class ClusterV2RkeConfigMachinePoolTaintArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Machine selector label match expressions key (string)
        :param pulumi.Input[str] value: The taint value (string)
        :param pulumi.Input[str] effect: The taint effect. Default: `\\"NoExecute\\"` (string)
        """
        ClusterV2RkeConfigMachinePoolTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
            effect=effect,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("key", key)
        _setter("value", value)
        if effect is not None:
            _setter("effect", effect)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Machine selector label match expressions key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        The taint effect. Default: `\\"NoExecute\\"` (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)


@pulumi.input_type
class ClusterV2RkeConfigMachineSelectorConfigArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None,
                 machine_label_selector: Optional[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorArgs']] = None):
        """
        :param pulumi.Input[str] config: Machine selector config. Must be in YAML format (string)
        :param pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorArgs'] machine_label_selector: Machine selector label (list maxitems:1)
        """
        ClusterV2RkeConfigMachineSelectorConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config=config,
            machine_label_selector=machine_label_selector,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config: Optional[pulumi.Input[str]] = None,
             machine_label_selector: Optional[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'machineLabelSelector' in kwargs:
            machine_label_selector = kwargs['machineLabelSelector']

        if config is not None:
            _setter("config", config)
        if machine_label_selector is not None:
            _setter("machine_label_selector", machine_label_selector)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Machine selector config. Must be in YAML format (string)
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="machineLabelSelector")
    def machine_label_selector(self) -> Optional[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorArgs']]:
        """
        Machine selector label (list maxitems:1)
        """
        return pulumi.get(self, "machine_label_selector")

    @machine_label_selector.setter
    def machine_label_selector(self, value: Optional[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorArgs']]):
        pulumi.set(self, "machine_label_selector", value)


@pulumi.input_type
class ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionArgs']]] match_expressions: Machine selector label match expressions (list)
        :param pulumi.Input[Mapping[str, Any]] match_labels: Machine selector label match labels (map)
        """
        ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_expressions=match_expressions,
            match_labels=match_labels,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionArgs']]]] = None,
             match_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'matchExpressions' in kwargs:
            match_expressions = kwargs['matchExpressions']
        if 'matchLabels' in kwargs:
            match_labels = kwargs['matchLabels']

        if match_expressions is not None:
            _setter("match_expressions", match_expressions)
        if match_labels is not None:
            _setter("match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionArgs']]]]:
        """
        Machine selector label match expressions (list)
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Machine selector label match labels (map)
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: Machine selector label match expressions key (string)
        :param pulumi.Input[str] operator: Machine selector label match expressions operator (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: Machine selector label match expressions values (List string)
        """
        ClusterV2RkeConfigMachineSelectorConfigMachineLabelSelectorMatchExpressionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            operator=operator,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             operator: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if key is not None:
            _setter("key", key)
        if operator is not None:
            _setter("operator", operator)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Machine selector label match expressions key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Machine selector label match expressions operator (string)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Machine selector label match expressions values (List string)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterV2RkeConfigRegistriesArgs:
    def __init__(__self__, *,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesConfigArgs']]]] = None,
                 mirrors: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesMirrorArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesConfigArgs']]] configs: Cluster V2 docker registries config (list)
        :param pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesMirrorArgs']]] mirrors: Cluster V2 docker registries mirror (list)
        """
        ClusterV2RkeConfigRegistriesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configs=configs,
            mirrors=mirrors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configs: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesConfigArgs']]]] = None,
             mirrors: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesMirrorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if configs is not None:
            _setter("configs", configs)
        if mirrors is not None:
            _setter("mirrors", mirrors)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesConfigArgs']]]]:
        """
        Cluster V2 docker registries config (list)
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter
    def mirrors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesMirrorArgs']]]]:
        """
        Cluster V2 docker registries mirror (list)
        """
        return pulumi.get(self, "mirrors")

    @mirrors.setter
    def mirrors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterV2RkeConfigRegistriesMirrorArgs']]]]):
        pulumi.set(self, "mirrors", value)


@pulumi.input_type
class ClusterV2RkeConfigRegistriesConfigArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 auth_config_secret_name: Optional[pulumi.Input[str]] = None,
                 ca_bundle: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 tls_secret_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hostname: Registry hostname (string)
        :param pulumi.Input[str] auth_config_secret_name: Registry auth config secret name (string)
        :param pulumi.Input[str] ca_bundle: Registry CA bundle (string)
        :param pulumi.Input[bool] insecure: Registry insecure connectivity (bool)
        :param pulumi.Input[str] tls_secret_name: Registry TLS secret name. TLS is a pair of Cert/Key (string)
        """
        ClusterV2RkeConfigRegistriesConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            auth_config_secret_name=auth_config_secret_name,
            ca_bundle=ca_bundle,
            insecure=insecure,
            tls_secret_name=tls_secret_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: pulumi.Input[str],
             auth_config_secret_name: Optional[pulumi.Input[str]] = None,
             ca_bundle: Optional[pulumi.Input[str]] = None,
             insecure: Optional[pulumi.Input[bool]] = None,
             tls_secret_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authConfigSecretName' in kwargs:
            auth_config_secret_name = kwargs['authConfigSecretName']
        if 'caBundle' in kwargs:
            ca_bundle = kwargs['caBundle']
        if 'tlsSecretName' in kwargs:
            tls_secret_name = kwargs['tlsSecretName']

        _setter("hostname", hostname)
        if auth_config_secret_name is not None:
            _setter("auth_config_secret_name", auth_config_secret_name)
        if ca_bundle is not None:
            _setter("ca_bundle", ca_bundle)
        if insecure is not None:
            _setter("insecure", insecure)
        if tls_secret_name is not None:
            _setter("tls_secret_name", tls_secret_name)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        Registry hostname (string)
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="authConfigSecretName")
    def auth_config_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Registry auth config secret name (string)
        """
        return pulumi.get(self, "auth_config_secret_name")

    @auth_config_secret_name.setter
    def auth_config_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_config_secret_name", value)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Registry CA bundle (string)
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Registry insecure connectivity (bool)
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="tlsSecretName")
    def tls_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Registry TLS secret name. TLS is a pair of Cert/Key (string)
        """
        return pulumi.get(self, "tls_secret_name")

    @tls_secret_name.setter
    def tls_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_secret_name", value)


@pulumi.input_type
class ClusterV2RkeConfigRegistriesMirrorArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rewrites: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] hostname: Registry hostname (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] endpoints: Registry mirror endpoints (List)
        :param pulumi.Input[Mapping[str, Any]] rewrites: Registry mirror rewrites (map)
        """
        ClusterV2RkeConfigRegistriesMirrorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hostname=hostname,
            endpoints=endpoints,
            rewrites=rewrites,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hostname: pulumi.Input[str],
             endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             rewrites: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("hostname", hostname)
        if endpoints is not None:
            _setter("endpoints", endpoints)
        if rewrites is not None:
            _setter("rewrites", rewrites)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        Registry hostname (string)
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Registry mirror endpoints (List)
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def rewrites(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Registry mirror rewrites (map)
        """
        return pulumi.get(self, "rewrites")

    @rewrites.setter
    def rewrites(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "rewrites", value)


@pulumi.input_type
class ClusterV2RkeConfigRotateCertificatesArgs:
    def __init__(__self__, *,
                 generation: pulumi.Input[int],
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] generation: ETCD snapshot desired generation (int)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] services: Service certificates to rotate with this generation (string)
        """
        ClusterV2RkeConfigRotateCertificatesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            generation=generation,
            services=services,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             generation: pulumi.Input[int],
             services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("generation", generation)
        if services is not None:
            _setter("services", services)

    @property
    @pulumi.getter
    def generation(self) -> pulumi.Input[int]:
        """
        ETCD snapshot desired generation (int)
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: pulumi.Input[int]):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Service certificates to rotate with this generation (string)
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "services", value)


@pulumi.input_type
class ClusterV2RkeConfigUpgradeStrategyArgs:
    def __init__(__self__, *,
                 control_plane_concurrency: Optional[pulumi.Input[str]] = None,
                 control_plane_drain_options: Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs']] = None,
                 worker_concurrency: Optional[pulumi.Input[str]] = None,
                 worker_drain_options: Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs']] = None):
        """
        :param pulumi.Input[str] control_plane_concurrency: How many controlplane nodes should be upgrade at time, 0 is infinite. Percentages are also accepted (string)
        :param pulumi.Input['ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs'] control_plane_drain_options: Controlplane nodes drain options (list maxitems:1)
        :param pulumi.Input[str] worker_concurrency: How many worker nodes should be upgrade at time. Percentages are also accepted (string)
        :param pulumi.Input['ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs'] worker_drain_options: Worker nodes drain options (list maxitems:1)
        """
        ClusterV2RkeConfigUpgradeStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            control_plane_concurrency=control_plane_concurrency,
            control_plane_drain_options=control_plane_drain_options,
            worker_concurrency=worker_concurrency,
            worker_drain_options=worker_drain_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             control_plane_concurrency: Optional[pulumi.Input[str]] = None,
             control_plane_drain_options: Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs']] = None,
             worker_concurrency: Optional[pulumi.Input[str]] = None,
             worker_drain_options: Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'controlPlaneConcurrency' in kwargs:
            control_plane_concurrency = kwargs['controlPlaneConcurrency']
        if 'controlPlaneDrainOptions' in kwargs:
            control_plane_drain_options = kwargs['controlPlaneDrainOptions']
        if 'workerConcurrency' in kwargs:
            worker_concurrency = kwargs['workerConcurrency']
        if 'workerDrainOptions' in kwargs:
            worker_drain_options = kwargs['workerDrainOptions']

        if control_plane_concurrency is not None:
            _setter("control_plane_concurrency", control_plane_concurrency)
        if control_plane_drain_options is not None:
            _setter("control_plane_drain_options", control_plane_drain_options)
        if worker_concurrency is not None:
            _setter("worker_concurrency", worker_concurrency)
        if worker_drain_options is not None:
            _setter("worker_drain_options", worker_drain_options)

    @property
    @pulumi.getter(name="controlPlaneConcurrency")
    def control_plane_concurrency(self) -> Optional[pulumi.Input[str]]:
        """
        How many controlplane nodes should be upgrade at time, 0 is infinite. Percentages are also accepted (string)
        """
        return pulumi.get(self, "control_plane_concurrency")

    @control_plane_concurrency.setter
    def control_plane_concurrency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_concurrency", value)

    @property
    @pulumi.getter(name="controlPlaneDrainOptions")
    def control_plane_drain_options(self) -> Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs']]:
        """
        Controlplane nodes drain options (list maxitems:1)
        """
        return pulumi.get(self, "control_plane_drain_options")

    @control_plane_drain_options.setter
    def control_plane_drain_options(self, value: Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs']]):
        pulumi.set(self, "control_plane_drain_options", value)

    @property
    @pulumi.getter(name="workerConcurrency")
    def worker_concurrency(self) -> Optional[pulumi.Input[str]]:
        """
        How many worker nodes should be upgrade at time. Percentages are also accepted (string)
        """
        return pulumi.get(self, "worker_concurrency")

    @worker_concurrency.setter
    def worker_concurrency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_concurrency", value)

    @property
    @pulumi.getter(name="workerDrainOptions")
    def worker_drain_options(self) -> Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs']]:
        """
        Worker nodes drain options (list maxitems:1)
        """
        return pulumi.get(self, "worker_drain_options")

    @worker_drain_options.setter
    def worker_drain_options(self, value: Optional[pulumi.Input['ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs']]):
        pulumi.set(self, "worker_drain_options", value)


@pulumi.input_type
class ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs:
    def __init__(__self__, *,
                 delete_empty_dir_data: Optional[pulumi.Input[bool]] = None,
                 disable_eviction: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 grace_period: Optional[pulumi.Input[int]] = None,
                 ignore_daemon_sets: Optional[pulumi.Input[bool]] = None,
                 ignore_errors: Optional[pulumi.Input[bool]] = None,
                 skip_wait_for_delete_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] delete_empty_dir_data: Drain options delete empty dir data. Default `false` (bool)
        :param pulumi.Input[bool] disable_eviction: Drain options disable eviction. Default `false` (bool)
        :param pulumi.Input[bool] enabled: Drain options enabled? Default `true` (bool)
        :param pulumi.Input[bool] force: Drain options force. Default `false` (bool)
        :param pulumi.Input[int] grace_period: Drain options grace period (int)
        :param pulumi.Input[bool] ignore_daemon_sets: Drain options ignore daemon sets. Default `true` (bool)
        :param pulumi.Input[bool] ignore_errors: Drain options ignore errors. Default `false` (bool)
        :param pulumi.Input[int] skip_wait_for_delete_timeout_seconds: Drain options skip wait for delete timeout seconds (int)
        :param pulumi.Input[int] timeout: Drain options timeout (int)
        """
        ClusterV2RkeConfigUpgradeStrategyControlPlaneDrainOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delete_empty_dir_data=delete_empty_dir_data,
            disable_eviction=disable_eviction,
            enabled=enabled,
            force=force,
            grace_period=grace_period,
            ignore_daemon_sets=ignore_daemon_sets,
            ignore_errors=ignore_errors,
            skip_wait_for_delete_timeout_seconds=skip_wait_for_delete_timeout_seconds,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delete_empty_dir_data: Optional[pulumi.Input[bool]] = None,
             disable_eviction: Optional[pulumi.Input[bool]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             force: Optional[pulumi.Input[bool]] = None,
             grace_period: Optional[pulumi.Input[int]] = None,
             ignore_daemon_sets: Optional[pulumi.Input[bool]] = None,
             ignore_errors: Optional[pulumi.Input[bool]] = None,
             skip_wait_for_delete_timeout_seconds: Optional[pulumi.Input[int]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'deleteEmptyDirData' in kwargs:
            delete_empty_dir_data = kwargs['deleteEmptyDirData']
        if 'disableEviction' in kwargs:
            disable_eviction = kwargs['disableEviction']
        if 'gracePeriod' in kwargs:
            grace_period = kwargs['gracePeriod']
        if 'ignoreDaemonSets' in kwargs:
            ignore_daemon_sets = kwargs['ignoreDaemonSets']
        if 'ignoreErrors' in kwargs:
            ignore_errors = kwargs['ignoreErrors']
        if 'skipWaitForDeleteTimeoutSeconds' in kwargs:
            skip_wait_for_delete_timeout_seconds = kwargs['skipWaitForDeleteTimeoutSeconds']

        if delete_empty_dir_data is not None:
            _setter("delete_empty_dir_data", delete_empty_dir_data)
        if disable_eviction is not None:
            _setter("disable_eviction", disable_eviction)
        if enabled is not None:
            _setter("enabled", enabled)
        if force is not None:
            _setter("force", force)
        if grace_period is not None:
            _setter("grace_period", grace_period)
        if ignore_daemon_sets is not None:
            _setter("ignore_daemon_sets", ignore_daemon_sets)
        if ignore_errors is not None:
            _setter("ignore_errors", ignore_errors)
        if skip_wait_for_delete_timeout_seconds is not None:
            _setter("skip_wait_for_delete_timeout_seconds", skip_wait_for_delete_timeout_seconds)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter(name="deleteEmptyDirData")
    def delete_empty_dir_data(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options delete empty dir data. Default `false` (bool)
        """
        return pulumi.get(self, "delete_empty_dir_data")

    @delete_empty_dir_data.setter
    def delete_empty_dir_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_empty_dir_data", value)

    @property
    @pulumi.getter(name="disableEviction")
    def disable_eviction(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options disable eviction. Default `false` (bool)
        """
        return pulumi.get(self, "disable_eviction")

    @disable_eviction.setter
    def disable_eviction(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eviction", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options enabled? Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options force. Default `false` (bool)
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[pulumi.Input[int]]:
        """
        Drain options grace period (int)
        """
        return pulumi.get(self, "grace_period")

    @grace_period.setter
    def grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grace_period", value)

    @property
    @pulumi.getter(name="ignoreDaemonSets")
    def ignore_daemon_sets(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options ignore daemon sets. Default `true` (bool)
        """
        return pulumi.get(self, "ignore_daemon_sets")

    @ignore_daemon_sets.setter
    def ignore_daemon_sets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_daemon_sets", value)

    @property
    @pulumi.getter(name="ignoreErrors")
    def ignore_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options ignore errors. Default `false` (bool)
        """
        return pulumi.get(self, "ignore_errors")

    @ignore_errors.setter
    def ignore_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_errors", value)

    @property
    @pulumi.getter(name="skipWaitForDeleteTimeoutSeconds")
    def skip_wait_for_delete_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Drain options skip wait for delete timeout seconds (int)
        """
        return pulumi.get(self, "skip_wait_for_delete_timeout_seconds")

    @skip_wait_for_delete_timeout_seconds.setter
    def skip_wait_for_delete_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "skip_wait_for_delete_timeout_seconds", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Drain options timeout (int)
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs:
    def __init__(__self__, *,
                 delete_empty_dir_data: Optional[pulumi.Input[bool]] = None,
                 disable_eviction: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 grace_period: Optional[pulumi.Input[int]] = None,
                 ignore_daemon_sets: Optional[pulumi.Input[bool]] = None,
                 ignore_errors: Optional[pulumi.Input[bool]] = None,
                 skip_wait_for_delete_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] delete_empty_dir_data: Drain options delete empty dir data. Default `false` (bool)
        :param pulumi.Input[bool] disable_eviction: Drain options disable eviction. Default `false` (bool)
        :param pulumi.Input[bool] enabled: Drain options enabled? Default `true` (bool)
        :param pulumi.Input[bool] force: Drain options force. Default `false` (bool)
        :param pulumi.Input[int] grace_period: Drain options grace period (int)
        :param pulumi.Input[bool] ignore_daemon_sets: Drain options ignore daemon sets. Default `true` (bool)
        :param pulumi.Input[bool] ignore_errors: Drain options ignore errors. Default `false` (bool)
        :param pulumi.Input[int] skip_wait_for_delete_timeout_seconds: Drain options skip wait for delete timeout seconds (int)
        :param pulumi.Input[int] timeout: Drain options timeout (int)
        """
        ClusterV2RkeConfigUpgradeStrategyWorkerDrainOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delete_empty_dir_data=delete_empty_dir_data,
            disable_eviction=disable_eviction,
            enabled=enabled,
            force=force,
            grace_period=grace_period,
            ignore_daemon_sets=ignore_daemon_sets,
            ignore_errors=ignore_errors,
            skip_wait_for_delete_timeout_seconds=skip_wait_for_delete_timeout_seconds,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delete_empty_dir_data: Optional[pulumi.Input[bool]] = None,
             disable_eviction: Optional[pulumi.Input[bool]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             force: Optional[pulumi.Input[bool]] = None,
             grace_period: Optional[pulumi.Input[int]] = None,
             ignore_daemon_sets: Optional[pulumi.Input[bool]] = None,
             ignore_errors: Optional[pulumi.Input[bool]] = None,
             skip_wait_for_delete_timeout_seconds: Optional[pulumi.Input[int]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'deleteEmptyDirData' in kwargs:
            delete_empty_dir_data = kwargs['deleteEmptyDirData']
        if 'disableEviction' in kwargs:
            disable_eviction = kwargs['disableEviction']
        if 'gracePeriod' in kwargs:
            grace_period = kwargs['gracePeriod']
        if 'ignoreDaemonSets' in kwargs:
            ignore_daemon_sets = kwargs['ignoreDaemonSets']
        if 'ignoreErrors' in kwargs:
            ignore_errors = kwargs['ignoreErrors']
        if 'skipWaitForDeleteTimeoutSeconds' in kwargs:
            skip_wait_for_delete_timeout_seconds = kwargs['skipWaitForDeleteTimeoutSeconds']

        if delete_empty_dir_data is not None:
            _setter("delete_empty_dir_data", delete_empty_dir_data)
        if disable_eviction is not None:
            _setter("disable_eviction", disable_eviction)
        if enabled is not None:
            _setter("enabled", enabled)
        if force is not None:
            _setter("force", force)
        if grace_period is not None:
            _setter("grace_period", grace_period)
        if ignore_daemon_sets is not None:
            _setter("ignore_daemon_sets", ignore_daemon_sets)
        if ignore_errors is not None:
            _setter("ignore_errors", ignore_errors)
        if skip_wait_for_delete_timeout_seconds is not None:
            _setter("skip_wait_for_delete_timeout_seconds", skip_wait_for_delete_timeout_seconds)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter(name="deleteEmptyDirData")
    def delete_empty_dir_data(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options delete empty dir data. Default `false` (bool)
        """
        return pulumi.get(self, "delete_empty_dir_data")

    @delete_empty_dir_data.setter
    def delete_empty_dir_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_empty_dir_data", value)

    @property
    @pulumi.getter(name="disableEviction")
    def disable_eviction(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options disable eviction. Default `false` (bool)
        """
        return pulumi.get(self, "disable_eviction")

    @disable_eviction.setter
    def disable_eviction(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eviction", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options enabled? Default `true` (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options force. Default `false` (bool)
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="gracePeriod")
    def grace_period(self) -> Optional[pulumi.Input[int]]:
        """
        Drain options grace period (int)
        """
        return pulumi.get(self, "grace_period")

    @grace_period.setter
    def grace_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "grace_period", value)

    @property
    @pulumi.getter(name="ignoreDaemonSets")
    def ignore_daemon_sets(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options ignore daemon sets. Default `true` (bool)
        """
        return pulumi.get(self, "ignore_daemon_sets")

    @ignore_daemon_sets.setter
    def ignore_daemon_sets(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_daemon_sets", value)

    @property
    @pulumi.getter(name="ignoreErrors")
    def ignore_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain options ignore errors. Default `false` (bool)
        """
        return pulumi.get(self, "ignore_errors")

    @ignore_errors.setter
    def ignore_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_errors", value)

    @property
    @pulumi.getter(name="skipWaitForDeleteTimeoutSeconds")
    def skip_wait_for_delete_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Drain options skip wait for delete timeout seconds (int)
        """
        return pulumi.get(self, "skip_wait_for_delete_timeout_seconds")

    @skip_wait_for_delete_timeout_seconds.setter
    def skip_wait_for_delete_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "skip_wait_for_delete_timeout_seconds", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Drain options timeout (int)
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class EtcdBackupBackupConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 interval_hours: Optional[pulumi.Input[int]] = None,
                 retention: Optional[pulumi.Input[int]] = None,
                 s3_backup_config: Optional[pulumi.Input['EtcdBackupBackupConfigS3BackupConfigArgs']] = None,
                 safe_timestamp: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Enable etcd backup (bool)
        :param pulumi.Input[int] interval_hours: Interval hours for etcd backup. Default `12` (int)
        :param pulumi.Input[int] retention: Retention for etcd backup. Default `6` (int)
        :param pulumi.Input['EtcdBackupBackupConfigS3BackupConfigArgs'] s3_backup_config: S3 config options for etcd backup. Valid for `imported` and `rke` clusters. (list maxitems:1)
        """
        EtcdBackupBackupConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            interval_hours=interval_hours,
            retention=retention,
            s3_backup_config=s3_backup_config,
            safe_timestamp=safe_timestamp,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             interval_hours: Optional[pulumi.Input[int]] = None,
             retention: Optional[pulumi.Input[int]] = None,
             s3_backup_config: Optional[pulumi.Input['EtcdBackupBackupConfigS3BackupConfigArgs']] = None,
             safe_timestamp: Optional[pulumi.Input[bool]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'intervalHours' in kwargs:
            interval_hours = kwargs['intervalHours']
        if 's3BackupConfig' in kwargs:
            s3_backup_config = kwargs['s3BackupConfig']
        if 'safeTimestamp' in kwargs:
            safe_timestamp = kwargs['safeTimestamp']

        if enabled is not None:
            _setter("enabled", enabled)
        if interval_hours is not None:
            _setter("interval_hours", interval_hours)
        if retention is not None:
            _setter("retention", retention)
        if s3_backup_config is not None:
            _setter("s3_backup_config", s3_backup_config)
        if safe_timestamp is not None:
            _setter("safe_timestamp", safe_timestamp)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable etcd backup (bool)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="intervalHours")
    def interval_hours(self) -> Optional[pulumi.Input[int]]:
        """
        Interval hours for etcd backup. Default `12` (int)
        """
        return pulumi.get(self, "interval_hours")

    @interval_hours.setter
    def interval_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval_hours", value)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input[int]]:
        """
        Retention for etcd backup. Default `6` (int)
        """
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter(name="s3BackupConfig")
    def s3_backup_config(self) -> Optional[pulumi.Input['EtcdBackupBackupConfigS3BackupConfigArgs']]:
        """
        S3 config options for etcd backup. Valid for `imported` and `rke` clusters. (list maxitems:1)
        """
        return pulumi.get(self, "s3_backup_config")

    @s3_backup_config.setter
    def s3_backup_config(self, value: Optional[pulumi.Input['EtcdBackupBackupConfigS3BackupConfigArgs']]):
        pulumi.set(self, "s3_backup_config", value)

    @property
    @pulumi.getter(name="safeTimestamp")
    def safe_timestamp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "safe_timestamp")

    @safe_timestamp.setter
    def safe_timestamp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "safe_timestamp", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class EtcdBackupBackupConfigS3BackupConfigArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 custom_ca: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: Bucket name for S3 service (string)
        :param pulumi.Input[str] endpoint: Endpoint for S3 service (string)
        :param pulumi.Input[str] access_key: Access key for S3 service (string)
        :param pulumi.Input[str] custom_ca: Base64 encoded custom CA for S3 service. Use filebase64(<FILE>) for encoding file. Available from Rancher v2.2.5 (string)
        :param pulumi.Input[str] folder: Folder for S3 service. Available from Rancher v2.2.7 (string)
        :param pulumi.Input[str] region: Region for S3 service (string)
        :param pulumi.Input[str] secret_key: Secret key for S3 service (string)
        """
        EtcdBackupBackupConfigS3BackupConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            endpoint=endpoint,
            access_key=access_key,
            custom_ca=custom_ca,
            folder=folder,
            region=region,
            secret_key=secret_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: pulumi.Input[str],
             endpoint: pulumi.Input[str],
             access_key: Optional[pulumi.Input[str]] = None,
             custom_ca: Optional[pulumi.Input[str]] = None,
             folder: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             secret_key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'bucketName' in kwargs:
            bucket_name = kwargs['bucketName']
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'customCa' in kwargs:
            custom_ca = kwargs['customCa']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']

        _setter("bucket_name", bucket_name)
        _setter("endpoint", endpoint)
        if access_key is not None:
            _setter("access_key", access_key)
        if custom_ca is not None:
            _setter("custom_ca", custom_ca)
        if folder is not None:
            _setter("folder", folder)
        if region is not None:
            _setter("region", region)
        if secret_key is not None:
            _setter("secret_key", secret_key)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        Bucket name for S3 service (string)
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        """
        Endpoint for S3 service (string)
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access key for S3 service (string)
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="customCa")
    def custom_ca(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded custom CA for S3 service. Use filebase64(<FILE>) for encoding file. Available from Rancher v2.2.5 (string)
        """
        return pulumi.get(self, "custom_ca")

    @custom_ca.setter
    def custom_ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_ca", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Folder for S3 service. Available from Rancher v2.2.7 (string)
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region for S3 service (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Secret key for S3 service (string)
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class GlobalDnsProviderAlidnsConfigArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 secret_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_key: The AWS Access key (string)
        :param pulumi.Input[str] secret_key: The AWS Secret key (string)
        """
        GlobalDnsProviderAlidnsConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            secret_key=secret_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: pulumi.Input[str],
             secret_key: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']

        _setter("access_key", access_key)
        _setter("secret_key", secret_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        The AWS Access key (string)
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The AWS Secret key (string)
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class GlobalDnsProviderCloudflareConfigArgs:
    def __init__(__self__, *,
                 api_email: pulumi.Input[str],
                 api_key: pulumi.Input[str],
                 proxy_setting: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] api_email: The CloudFlare API Email (string)
        :param pulumi.Input[str] api_key: The CloudFlare API Key (string)
        :param pulumi.Input[bool] proxy_setting: CloudFlare Proxy Setting. Default: `false` (bool)
        """
        GlobalDnsProviderCloudflareConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_email=api_email,
            api_key=api_key,
            proxy_setting=proxy_setting,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_email: pulumi.Input[str],
             api_key: pulumi.Input[str],
             proxy_setting: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiEmail' in kwargs:
            api_email = kwargs['apiEmail']
        if 'apiKey' in kwargs:
            api_key = kwargs['apiKey']
        if 'proxySetting' in kwargs:
            proxy_setting = kwargs['proxySetting']

        _setter("api_email", api_email)
        _setter("api_key", api_key)
        if proxy_setting is not None:
            _setter("proxy_setting", proxy_setting)

    @property
    @pulumi.getter(name="apiEmail")
    def api_email(self) -> pulumi.Input[str]:
        """
        The CloudFlare API Email (string)
        """
        return pulumi.get(self, "api_email")

    @api_email.setter
    def api_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_email", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        The CloudFlare API Key (string)
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="proxySetting")
    def proxy_setting(self) -> Optional[pulumi.Input[bool]]:
        """
        CloudFlare Proxy Setting. Default: `false` (bool)
        """
        return pulumi.get(self, "proxy_setting")

    @proxy_setting.setter
    def proxy_setting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "proxy_setting", value)


@pulumi.input_type
class GlobalDnsProviderRoute53ConfigArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 credentials_path: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 zone_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_key: The AWS Access key (string)
        :param pulumi.Input[str] secret_key: The AWS Secret key (string)
        :param pulumi.Input[str] credentials_path: The AWS credentials path. Default: `"/.aws"` (string)
        :param pulumi.Input[str] region: The AWS Region. Default: `"us-west-2"` (string)
        :param pulumi.Input[str] role_arn: The AWS Role ARN (string)
        :param pulumi.Input[str] zone_type: The Route53 zone type `public, private`. Default: `"public"` (string)
        """
        GlobalDnsProviderRoute53ConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            secret_key=secret_key,
            credentials_path=credentials_path,
            region=region,
            role_arn=role_arn,
            zone_type=zone_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: pulumi.Input[str],
             secret_key: pulumi.Input[str],
             credentials_path: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             zone_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'credentialsPath' in kwargs:
            credentials_path = kwargs['credentialsPath']
        if 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if 'zoneType' in kwargs:
            zone_type = kwargs['zoneType']

        _setter("access_key", access_key)
        _setter("secret_key", secret_key)
        if credentials_path is not None:
            _setter("credentials_path", credentials_path)
        if region is not None:
            _setter("region", region)
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if zone_type is not None:
            _setter("zone_type", zone_type)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        The AWS Access key (string)
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The AWS Secret key (string)
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="credentialsPath")
    def credentials_path(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS credentials path. Default: `"/.aws"` (string)
        """
        return pulumi.get(self, "credentials_path")

    @credentials_path.setter
    def credentials_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_path", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Region. Default: `"us-west-2"` (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Role ARN (string)
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Route53 zone type `public, private`. Default: `"public"` (string)
        """
        return pulumi.get(self, "zone_type")

    @zone_type.setter
    def zone_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_type", value)


@pulumi.input_type
class GlobalRoleRuleArgs:
    def __init__(__self__, *,
                 api_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 non_resource_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 verbs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] api_groups: Policy rule api groups (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] non_resource_urls: Policy rule non resource urls (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_names: Policy rule resource names (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources: Policy rule resources (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] verbs: Policy rule verbs. `bind`, `create`, `delete`, `deletecollection`, `escalate`, `get`, `impersonate`, `list`, `patch`, `update`, `use`, `view`, `watch`, `own` and `*` values are supported (list)
        """
        GlobalRoleRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_groups=api_groups,
            non_resource_urls=non_resource_urls,
            resource_names=resource_names,
            resources=resources,
            verbs=verbs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             non_resource_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resource_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             verbs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiGroups' in kwargs:
            api_groups = kwargs['apiGroups']
        if 'nonResourceUrls' in kwargs:
            non_resource_urls = kwargs['nonResourceUrls']
        if 'resourceNames' in kwargs:
            resource_names = kwargs['resourceNames']

        if api_groups is not None:
            _setter("api_groups", api_groups)
        if non_resource_urls is not None:
            _setter("non_resource_urls", non_resource_urls)
        if resource_names is not None:
            _setter("resource_names", resource_names)
        if resources is not None:
            _setter("resources", resources)
        if verbs is not None:
            _setter("verbs", verbs)

    @property
    @pulumi.getter(name="apiGroups")
    def api_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule api groups (list)
        """
        return pulumi.get(self, "api_groups")

    @api_groups.setter
    def api_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "api_groups", value)

    @property
    @pulumi.getter(name="nonResourceUrls")
    def non_resource_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule non resource urls (list)
        """
        return pulumi.get(self, "non_resource_urls")

    @non_resource_urls.setter
    def non_resource_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "non_resource_urls", value)

    @property
    @pulumi.getter(name="resourceNames")
    def resource_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule resource names (list)
        """
        return pulumi.get(self, "resource_names")

    @resource_names.setter
    def resource_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_names", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule resources (list)
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def verbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule verbs. `bind`, `create`, `delete`, `deletecollection`, `escalate`, `get`, `impersonate`, `list`, `patch`, `update`, `use`, `view`, `watch`, `own` and `*` values are supported (list)
        """
        return pulumi.get(self, "verbs")

    @verbs.setter
    def verbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "verbs", value)


@pulumi.input_type
class MachineConfigV2Amazonec2ConfigArgs:
    def __init__(__self__, *,
                 ami: pulumi.Input[str],
                 region: pulumi.Input[str],
                 security_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 block_duration_minutes: Optional[pulumi.Input[str]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 encrypt_ebs_volume: Optional[pulumi.Input[bool]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 http_tokens: Optional[pulumi.Input[str]] = None,
                 iam_instance_profile: Optional[pulumi.Input[str]] = None,
                 insecure_transport: Optional[pulumi.Input[bool]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kms_key: Optional[pulumi.Input[str]] = None,
                 monitoring: Optional[pulumi.Input[bool]] = None,
                 open_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_address_only: Optional[pulumi.Input[bool]] = None,
                 request_spot_instance: Optional[pulumi.Input[bool]] = None,
                 retries: Optional[pulumi.Input[str]] = None,
                 root_size: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 security_group_readonly: Optional[pulumi.Input[bool]] = None,
                 session_token: Optional[pulumi.Input[str]] = None,
                 spot_price: Optional[pulumi.Input[str]] = None,
                 ssh_key_contents: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 use_ebs_optimized_instance: Optional[pulumi.Input[bool]] = None,
                 use_private_address: Optional[pulumi.Input[bool]] = None,
                 userdata: Optional[pulumi.Input[str]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ami: AWS machine image (string)
        :param pulumi.Input[str] region: OpenStack region name (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: AWS VPC security group. (list)
        :param pulumi.Input[str] subnet_id: AWS VPC subnet id (string)
        :param pulumi.Input[str] vpc_id: AWS VPC id. (string)
        :param pulumi.Input[str] zone: AWS zone for instance (i.e. a,b,c,d,e) (string)
        :param pulumi.Input[str] block_duration_minutes: AWS spot instance duration in minutes (60, 120, 180, 240, 300, or 360). Default `0` (string)
        :param pulumi.Input[str] device_name: AWS root device name. Default `/dev/sda1` (string)
        :param pulumi.Input[bool] encrypt_ebs_volume: Encrypt EBS volume. Default `false` (bool)
        :param pulumi.Input[str] endpoint: Optional endpoint URL (hostname only or fully qualified URI) (string)
        :param pulumi.Input[str] http_endpoint: Enables or disables the HTTP metadata endpoint on your instances (string)
        :param pulumi.Input[str] http_tokens: The state of token usage for your instance metadata requests (string)
        :param pulumi.Input[str] iam_instance_profile: AWS IAM Instance Profile (string)
        :param pulumi.Input[bool] insecure_transport: Disable SSL when sending requests (bool)
        :param pulumi.Input[str] instance_type: Specifies the Linode Instance type which determines CPU, memory, disk size, etc. Default `g6-standard-4` (string)
        :param pulumi.Input[str] kms_key: Custom KMS key ID using the AWS Managed CMK (string)
        :param pulumi.Input[bool] monitoring: Enable monitoring for droplet. Default `false` (bool)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] open_ports: Make the specified port number accessible from the Internet. (list)
        :param pulumi.Input[bool] private_address_only: Only use a private IP address. Default `false` (bool)
        :param pulumi.Input[bool] request_spot_instance: Set this flag to request spot instance. Default `false` (bool)
        :param pulumi.Input[str] retries: Set retry count for recoverable failures (use -1 to disable). Default `5` (string)
        :param pulumi.Input[str] root_size: AWS root disk size (in GB). Default `16` (string)
        :param pulumi.Input[bool] security_group_readonly: Skip adding default rules to security groups (bool)
        :param pulumi.Input[str] session_token: AWS Session Token (string)
        :param pulumi.Input[str] spot_price: AWS spot instance bid price (in dollar). Default `0.50` (string)
        :param pulumi.Input[str] ssh_key_contents: SSH private key contents (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        :param pulumi.Input[str] tags: vSphere tags id e.g. `urn:xxx` (list)
        :param pulumi.Input[bool] use_ebs_optimized_instance: Create an EBS optimized instance. Default `false` (bool)
        :param pulumi.Input[bool] use_private_address: Force the usage of private IP address. Default `false` (bool)
        :param pulumi.Input[str] userdata: Path to file with cloud-init user-data (string)
        :param pulumi.Input[str] volume_type: OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
        """
        MachineConfigV2Amazonec2ConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ami=ami,
            region=region,
            security_groups=security_groups,
            subnet_id=subnet_id,
            vpc_id=vpc_id,
            zone=zone,
            access_key=access_key,
            block_duration_minutes=block_duration_minutes,
            device_name=device_name,
            encrypt_ebs_volume=encrypt_ebs_volume,
            endpoint=endpoint,
            http_endpoint=http_endpoint,
            http_tokens=http_tokens,
            iam_instance_profile=iam_instance_profile,
            insecure_transport=insecure_transport,
            instance_type=instance_type,
            kms_key=kms_key,
            monitoring=monitoring,
            open_ports=open_ports,
            private_address_only=private_address_only,
            request_spot_instance=request_spot_instance,
            retries=retries,
            root_size=root_size,
            secret_key=secret_key,
            security_group_readonly=security_group_readonly,
            session_token=session_token,
            spot_price=spot_price,
            ssh_key_contents=ssh_key_contents,
            ssh_user=ssh_user,
            tags=tags,
            use_ebs_optimized_instance=use_ebs_optimized_instance,
            use_private_address=use_private_address,
            userdata=userdata,
            volume_type=volume_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ami: pulumi.Input[str],
             region: pulumi.Input[str],
             security_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
             subnet_id: pulumi.Input[str],
             vpc_id: pulumi.Input[str],
             zone: pulumi.Input[str],
             access_key: Optional[pulumi.Input[str]] = None,
             block_duration_minutes: Optional[pulumi.Input[str]] = None,
             device_name: Optional[pulumi.Input[str]] = None,
             encrypt_ebs_volume: Optional[pulumi.Input[bool]] = None,
             endpoint: Optional[pulumi.Input[str]] = None,
             http_endpoint: Optional[pulumi.Input[str]] = None,
             http_tokens: Optional[pulumi.Input[str]] = None,
             iam_instance_profile: Optional[pulumi.Input[str]] = None,
             insecure_transport: Optional[pulumi.Input[bool]] = None,
             instance_type: Optional[pulumi.Input[str]] = None,
             kms_key: Optional[pulumi.Input[str]] = None,
             monitoring: Optional[pulumi.Input[bool]] = None,
             open_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             private_address_only: Optional[pulumi.Input[bool]] = None,
             request_spot_instance: Optional[pulumi.Input[bool]] = None,
             retries: Optional[pulumi.Input[str]] = None,
             root_size: Optional[pulumi.Input[str]] = None,
             secret_key: Optional[pulumi.Input[str]] = None,
             security_group_readonly: Optional[pulumi.Input[bool]] = None,
             session_token: Optional[pulumi.Input[str]] = None,
             spot_price: Optional[pulumi.Input[str]] = None,
             ssh_key_contents: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[str]] = None,
             use_ebs_optimized_instance: Optional[pulumi.Input[bool]] = None,
             use_private_address: Optional[pulumi.Input[bool]] = None,
             userdata: Optional[pulumi.Input[str]] = None,
             volume_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'securityGroups' in kwargs:
            security_groups = kwargs['securityGroups']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'blockDurationMinutes' in kwargs:
            block_duration_minutes = kwargs['blockDurationMinutes']
        if 'deviceName' in kwargs:
            device_name = kwargs['deviceName']
        if 'encryptEbsVolume' in kwargs:
            encrypt_ebs_volume = kwargs['encryptEbsVolume']
        if 'httpEndpoint' in kwargs:
            http_endpoint = kwargs['httpEndpoint']
        if 'httpTokens' in kwargs:
            http_tokens = kwargs['httpTokens']
        if 'iamInstanceProfile' in kwargs:
            iam_instance_profile = kwargs['iamInstanceProfile']
        if 'insecureTransport' in kwargs:
            insecure_transport = kwargs['insecureTransport']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']
        if 'openPorts' in kwargs:
            open_ports = kwargs['openPorts']
        if 'privateAddressOnly' in kwargs:
            private_address_only = kwargs['privateAddressOnly']
        if 'requestSpotInstance' in kwargs:
            request_spot_instance = kwargs['requestSpotInstance']
        if 'rootSize' in kwargs:
            root_size = kwargs['rootSize']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'securityGroupReadonly' in kwargs:
            security_group_readonly = kwargs['securityGroupReadonly']
        if 'sessionToken' in kwargs:
            session_token = kwargs['sessionToken']
        if 'spotPrice' in kwargs:
            spot_price = kwargs['spotPrice']
        if 'sshKeyContents' in kwargs:
            ssh_key_contents = kwargs['sshKeyContents']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'useEbsOptimizedInstance' in kwargs:
            use_ebs_optimized_instance = kwargs['useEbsOptimizedInstance']
        if 'usePrivateAddress' in kwargs:
            use_private_address = kwargs['usePrivateAddress']
        if 'volumeType' in kwargs:
            volume_type = kwargs['volumeType']

        _setter("ami", ami)
        _setter("region", region)
        _setter("security_groups", security_groups)
        _setter("subnet_id", subnet_id)
        _setter("vpc_id", vpc_id)
        _setter("zone", zone)
        if access_key is not None:
            _setter("access_key", access_key)
        if block_duration_minutes is not None:
            _setter("block_duration_minutes", block_duration_minutes)
        if device_name is not None:
            _setter("device_name", device_name)
        if encrypt_ebs_volume is not None:
            _setter("encrypt_ebs_volume", encrypt_ebs_volume)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if http_endpoint is not None:
            _setter("http_endpoint", http_endpoint)
        if http_tokens is not None:
            _setter("http_tokens", http_tokens)
        if iam_instance_profile is not None:
            _setter("iam_instance_profile", iam_instance_profile)
        if insecure_transport is not None:
            _setter("insecure_transport", insecure_transport)
        if instance_type is not None:
            _setter("instance_type", instance_type)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if monitoring is not None:
            _setter("monitoring", monitoring)
        if open_ports is not None:
            _setter("open_ports", open_ports)
        if private_address_only is not None:
            _setter("private_address_only", private_address_only)
        if request_spot_instance is not None:
            _setter("request_spot_instance", request_spot_instance)
        if retries is not None:
            _setter("retries", retries)
        if root_size is not None:
            _setter("root_size", root_size)
        if secret_key is not None:
            _setter("secret_key", secret_key)
        if security_group_readonly is not None:
            _setter("security_group_readonly", security_group_readonly)
        if session_token is not None:
            _setter("session_token", session_token)
        if spot_price is not None:
            _setter("spot_price", spot_price)
        if ssh_key_contents is not None:
            _setter("ssh_key_contents", ssh_key_contents)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if tags is not None:
            _setter("tags", tags)
        if use_ebs_optimized_instance is not None:
            _setter("use_ebs_optimized_instance", use_ebs_optimized_instance)
        if use_private_address is not None:
            _setter("use_private_address", use_private_address)
        if userdata is not None:
            _setter("userdata", userdata)
        if volume_type is not None:
            _setter("volume_type", volume_type)

    @property
    @pulumi.getter
    def ami(self) -> pulumi.Input[str]:
        """
        AWS machine image (string)
        """
        return pulumi.get(self, "ami")

    @ami.setter
    def ami(self, value: pulumi.Input[str]):
        pulumi.set(self, "ami", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        OpenStack region name (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        AWS VPC security group. (list)
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        AWS VPC subnet id (string)
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        AWS VPC id. (string)
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        AWS zone for instance (i.e. a,b,c,d,e) (string)
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="blockDurationMinutes")
    def block_duration_minutes(self) -> Optional[pulumi.Input[str]]:
        """
        AWS spot instance duration in minutes (60, 120, 180, 240, 300, or 360). Default `0` (string)
        """
        return pulumi.get(self, "block_duration_minutes")

    @block_duration_minutes.setter
    def block_duration_minutes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_duration_minutes", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        """
        AWS root device name. Default `/dev/sda1` (string)
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="encryptEbsVolume")
    def encrypt_ebs_volume(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypt EBS volume. Default `false` (bool)
        """
        return pulumi.get(self, "encrypt_ebs_volume")

    @encrypt_ebs_volume.setter
    def encrypt_ebs_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt_ebs_volume", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Optional endpoint URL (hostname only or fully qualified URI) (string)
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Enables or disables the HTTP metadata endpoint on your instances (string)
        """
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> Optional[pulumi.Input[str]]:
        """
        The state of token usage for your instance metadata requests (string)
        """
        return pulumi.get(self, "http_tokens")

    @http_tokens.setter
    def http_tokens(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_tokens", value)

    @property
    @pulumi.getter(name="iamInstanceProfile")
    def iam_instance_profile(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM Instance Profile (string)
        """
        return pulumi.get(self, "iam_instance_profile")

    @iam_instance_profile.setter
    def iam_instance_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_instance_profile", value)

    @property
    @pulumi.getter(name="insecureTransport")
    def insecure_transport(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable SSL when sending requests (bool)
        """
        return pulumi.get(self, "insecure_transport")

    @insecure_transport.setter
    def insecure_transport(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_transport", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode Instance type which determines CPU, memory, disk size, etc. Default `g6-standard-4` (string)
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[pulumi.Input[str]]:
        """
        Custom KMS key ID using the AWS Managed CMK (string)
        """
        return pulumi.get(self, "kms_key")

    @kms_key.setter
    def kms_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable monitoring for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter(name="openPorts")
    def open_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Make the specified port number accessible from the Internet. (list)
        """
        return pulumi.get(self, "open_ports")

    @open_ports.setter
    def open_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "open_ports", value)

    @property
    @pulumi.getter(name="privateAddressOnly")
    def private_address_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Only use a private IP address. Default `false` (bool)
        """
        return pulumi.get(self, "private_address_only")

    @private_address_only.setter
    def private_address_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_address_only", value)

    @property
    @pulumi.getter(name="requestSpotInstance")
    def request_spot_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Set this flag to request spot instance. Default `false` (bool)
        """
        return pulumi.get(self, "request_spot_instance")

    @request_spot_instance.setter
    def request_spot_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "request_spot_instance", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[str]]:
        """
        Set retry count for recoverable failures (use -1 to disable). Default `5` (string)
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[str]]:
        """
        AWS root disk size (in GB). Default `16` (string)
        """
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="securityGroupReadonly")
    def security_group_readonly(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip adding default rules to security groups (bool)
        """
        return pulumi.get(self, "security_group_readonly")

    @security_group_readonly.setter
    def security_group_readonly(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "security_group_readonly", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input[str]]:
        """
        AWS Session Token (string)
        """
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_token", value)

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[pulumi.Input[str]]:
        """
        AWS spot instance bid price (in dollar). Default `0.50` (string)
        """
        return pulumi.get(self, "spot_price")

    @spot_price.setter
    def spot_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_price", value)

    @property
    @pulumi.getter(name="sshKeyContents")
    def ssh_key_contents(self) -> Optional[pulumi.Input[str]]:
        """
        SSH private key contents (string)
        """
        return pulumi.get(self, "ssh_key_contents")

    @ssh_key_contents.setter
    def ssh_key_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_contents", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere tags id e.g. `urn:xxx` (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="useEbsOptimizedInstance")
    def use_ebs_optimized_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Create an EBS optimized instance. Default `false` (bool)
        """
        return pulumi.get(self, "use_ebs_optimized_instance")

    @use_ebs_optimized_instance.setter
    def use_ebs_optimized_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ebs_optimized_instance", value)

    @property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[pulumi.Input[bool]]:
        """
        Force the usage of private IP address. Default `false` (bool)
        """
        return pulumi.get(self, "use_private_address")

    @use_private_address.setter
    def use_private_address(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_private_address", value)

    @property
    @pulumi.getter
    def userdata(self) -> Optional[pulumi.Input[str]]:
        """
        Path to file with cloud-init user-data (string)
        """
        return pulumi.get(self, "userdata")

    @userdata.setter
    def userdata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userdata", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class MachineConfigV2AzureConfigArgs:
    def __init__(__self__, *,
                 accelerated_networking: Optional[pulumi.Input[bool]] = None,
                 availability_set: Optional[pulumi.Input[str]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[str]] = None,
                 docker_port: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 fault_domain_count: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_disks: Optional[pulumi.Input[bool]] = None,
                 no_public_ip: Optional[pulumi.Input[bool]] = None,
                 nsg: Optional[pulumi.Input[str]] = None,
                 open_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_address_only: Optional[pulumi.Input[bool]] = None,
                 private_ip_address: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 static_public_ip: Optional[pulumi.Input[bool]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 subnet_prefix: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 update_domain_count: Optional[pulumi.Input[str]] = None,
                 use_private_ip: Optional[pulumi.Input[bool]] = None,
                 use_public_ip_standard_sku: Optional[pulumi.Input[bool]] = None,
                 vnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_set: Azure Availability Set to place the virtual machine into. Default `docker-machine` (string)
        :param pulumi.Input[str] availability_zone: OpenStack availability zone (string)
        :param pulumi.Input[str] client_id: Azure Service Principal Account ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] client_secret: Azure Service Principal Account password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] custom_data: Path to file with custom-data (string)
        :param pulumi.Input[str] disk_size: vSphere size of disk for docker VM (in MB). Default `20480` (string)
        :param pulumi.Input[str] dns: A unique DNS label for the public IP adddress (string)
        :param pulumi.Input[str] docker_port: Docker Port. Default `2376` (string)
        :param pulumi.Input[str] environment: Azure environment (e.g. AzurePublicCloud, AzureChinaCloud). Default `AzurePublicCloud` (string)
        :param pulumi.Input[str] fault_domain_count: Fault domain count to use for availability set. Default `3` (string)
        :param pulumi.Input[str] image: Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        :param pulumi.Input[str] location: Azure region to create the virtual machine. Default `westus` (string)
        :param pulumi.Input[bool] managed_disks: Configures VM and availability set for managed disks. For Rancher v2.3.x and above. Default `false` (bool)
        :param pulumi.Input[bool] no_public_ip: Do not create a public IP address for the machine. Default `false` (bool)
        :param pulumi.Input[str] nsg: Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine). Default `docker-machine-nsg` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] open_ports: Make the specified port number accessible from the Internet. (list)
        :param pulumi.Input[bool] private_address_only: Only use a private IP address. Default `false` (bool)
        :param pulumi.Input[str] private_ip_address: Specify a static private IP address for the machine. (string)
        :param pulumi.Input[str] resource_group: Azure Resource Group name (will be created if missing). Default `docker-machine` (string)
        :param pulumi.Input[str] size: Digital Ocean size. Default `s-1vcpu-1gb` (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        :param pulumi.Input[bool] static_public_ip: Assign a static public IP address to the machine. Default `false` (bool)
        :param pulumi.Input[str] storage_type: Type of Storage Account to host the OS Disk for the machine. Default `Standard_LRS` (string)
        :param pulumi.Input[str] subnet: Azure Subnet Name to be used within the Virtual Network. Default `docker-machine` (string)
        :param pulumi.Input[str] subnet_prefix: Private CIDR block to be used for the new subnet, should comply RFC 1918. Default `192.168.0.0/16` (string)
        :param pulumi.Input[str] subscription_id: Azure Subscription ID (string)
        :param pulumi.Input[str] tags: vSphere tags id e.g. `urn:xxx` (list)
        :param pulumi.Input[str] tenant_id: OpenStack tenant id. Conflicts with `tenant_name` (string)
        :param pulumi.Input[str] update_domain_count: Update domain count to use for availability set. Default `5` (string)
        :param pulumi.Input[bool] use_private_ip: Use private IP address of the machine to connect. Default `false` (bool)
        :param pulumi.Input[str] vnet: Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format). Default `docker-machine-vnet` (string)
        """
        MachineConfigV2AzureConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accelerated_networking=accelerated_networking,
            availability_set=availability_set,
            availability_zone=availability_zone,
            client_id=client_id,
            client_secret=client_secret,
            custom_data=custom_data,
            disk_size=disk_size,
            dns=dns,
            docker_port=docker_port,
            environment=environment,
            fault_domain_count=fault_domain_count,
            image=image,
            location=location,
            managed_disks=managed_disks,
            no_public_ip=no_public_ip,
            nsg=nsg,
            open_ports=open_ports,
            private_address_only=private_address_only,
            private_ip_address=private_ip_address,
            resource_group=resource_group,
            size=size,
            ssh_user=ssh_user,
            static_public_ip=static_public_ip,
            storage_type=storage_type,
            subnet=subnet,
            subnet_prefix=subnet_prefix,
            subscription_id=subscription_id,
            tags=tags,
            tenant_id=tenant_id,
            update_domain_count=update_domain_count,
            use_private_ip=use_private_ip,
            use_public_ip_standard_sku=use_public_ip_standard_sku,
            vnet=vnet,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accelerated_networking: Optional[pulumi.Input[bool]] = None,
             availability_set: Optional[pulumi.Input[str]] = None,
             availability_zone: Optional[pulumi.Input[str]] = None,
             client_id: Optional[pulumi.Input[str]] = None,
             client_secret: Optional[pulumi.Input[str]] = None,
             custom_data: Optional[pulumi.Input[str]] = None,
             disk_size: Optional[pulumi.Input[str]] = None,
             dns: Optional[pulumi.Input[str]] = None,
             docker_port: Optional[pulumi.Input[str]] = None,
             environment: Optional[pulumi.Input[str]] = None,
             fault_domain_count: Optional[pulumi.Input[str]] = None,
             image: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             managed_disks: Optional[pulumi.Input[bool]] = None,
             no_public_ip: Optional[pulumi.Input[bool]] = None,
             nsg: Optional[pulumi.Input[str]] = None,
             open_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             private_address_only: Optional[pulumi.Input[bool]] = None,
             private_ip_address: Optional[pulumi.Input[str]] = None,
             resource_group: Optional[pulumi.Input[str]] = None,
             size: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             static_public_ip: Optional[pulumi.Input[bool]] = None,
             storage_type: Optional[pulumi.Input[str]] = None,
             subnet: Optional[pulumi.Input[str]] = None,
             subnet_prefix: Optional[pulumi.Input[str]] = None,
             subscription_id: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             update_domain_count: Optional[pulumi.Input[str]] = None,
             use_private_ip: Optional[pulumi.Input[bool]] = None,
             use_public_ip_standard_sku: Optional[pulumi.Input[bool]] = None,
             vnet: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'acceleratedNetworking' in kwargs:
            accelerated_networking = kwargs['acceleratedNetworking']
        if 'availabilitySet' in kwargs:
            availability_set = kwargs['availabilitySet']
        if 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']
        if 'customData' in kwargs:
            custom_data = kwargs['customData']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'dockerPort' in kwargs:
            docker_port = kwargs['dockerPort']
        if 'faultDomainCount' in kwargs:
            fault_domain_count = kwargs['faultDomainCount']
        if 'managedDisks' in kwargs:
            managed_disks = kwargs['managedDisks']
        if 'noPublicIp' in kwargs:
            no_public_ip = kwargs['noPublicIp']
        if 'openPorts' in kwargs:
            open_ports = kwargs['openPorts']
        if 'privateAddressOnly' in kwargs:
            private_address_only = kwargs['privateAddressOnly']
        if 'privateIpAddress' in kwargs:
            private_ip_address = kwargs['privateIpAddress']
        if 'resourceGroup' in kwargs:
            resource_group = kwargs['resourceGroup']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'staticPublicIp' in kwargs:
            static_public_ip = kwargs['staticPublicIp']
        if 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if 'subnetPrefix' in kwargs:
            subnet_prefix = kwargs['subnetPrefix']
        if 'subscriptionId' in kwargs:
            subscription_id = kwargs['subscriptionId']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if 'updateDomainCount' in kwargs:
            update_domain_count = kwargs['updateDomainCount']
        if 'usePrivateIp' in kwargs:
            use_private_ip = kwargs['usePrivateIp']
        if 'usePublicIpStandardSku' in kwargs:
            use_public_ip_standard_sku = kwargs['usePublicIpStandardSku']

        if accelerated_networking is not None:
            _setter("accelerated_networking", accelerated_networking)
        if availability_set is not None:
            _setter("availability_set", availability_set)
        if availability_zone is not None:
            _setter("availability_zone", availability_zone)
        if client_id is not None:
            _setter("client_id", client_id)
        if client_secret is not None:
            _setter("client_secret", client_secret)
        if custom_data is not None:
            _setter("custom_data", custom_data)
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if dns is not None:
            _setter("dns", dns)
        if docker_port is not None:
            _setter("docker_port", docker_port)
        if environment is not None:
            _setter("environment", environment)
        if fault_domain_count is not None:
            _setter("fault_domain_count", fault_domain_count)
        if image is not None:
            _setter("image", image)
        if location is not None:
            _setter("location", location)
        if managed_disks is not None:
            _setter("managed_disks", managed_disks)
        if no_public_ip is not None:
            _setter("no_public_ip", no_public_ip)
        if nsg is not None:
            _setter("nsg", nsg)
        if open_ports is not None:
            _setter("open_ports", open_ports)
        if private_address_only is not None:
            _setter("private_address_only", private_address_only)
        if private_ip_address is not None:
            _setter("private_ip_address", private_ip_address)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if size is not None:
            _setter("size", size)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if static_public_ip is not None:
            _setter("static_public_ip", static_public_ip)
        if storage_type is not None:
            _setter("storage_type", storage_type)
        if subnet is not None:
            _setter("subnet", subnet)
        if subnet_prefix is not None:
            _setter("subnet_prefix", subnet_prefix)
        if subscription_id is not None:
            _setter("subscription_id", subscription_id)
        if tags is not None:
            _setter("tags", tags)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)
        if update_domain_count is not None:
            _setter("update_domain_count", update_domain_count)
        if use_private_ip is not None:
            _setter("use_private_ip", use_private_ip)
        if use_public_ip_standard_sku is not None:
            _setter("use_public_ip_standard_sku", use_public_ip_standard_sku)
        if vnet is not None:
            _setter("vnet", vnet)

    @property
    @pulumi.getter(name="acceleratedNetworking")
    def accelerated_networking(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "accelerated_networking")

    @accelerated_networking.setter
    def accelerated_networking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accelerated_networking", value)

    @property
    @pulumi.getter(name="availabilitySet")
    def availability_set(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Availability Set to place the virtual machine into. Default `docker-machine` (string)
        """
        return pulumi.get(self, "availability_set")

    @availability_set.setter
    def availability_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_set", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack availability zone (string)
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Service Principal Account ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Service Principal Account password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[pulumi.Input[str]]:
        """
        Path to file with custom-data (string)
        """
        return pulumi.get(self, "custom_data")

    @custom_data.setter
    def custom_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_data", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of disk for docker VM (in MB). Default `20480` (string)
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[str]]:
        """
        A unique DNS label for the public IP adddress (string)
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="dockerPort")
    def docker_port(self) -> Optional[pulumi.Input[str]]:
        """
        Docker Port. Default `2376` (string)
        """
        return pulumi.get(self, "docker_port")

    @docker_port.setter
    def docker_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_port", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Azure environment (e.g. AzurePublicCloud, AzureChinaCloud). Default `AzurePublicCloud` (string)
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="faultDomainCount")
    def fault_domain_count(self) -> Optional[pulumi.Input[str]]:
        """
        Fault domain count to use for availability set. Default `3` (string)
        """
        return pulumi.get(self, "fault_domain_count")

    @fault_domain_count.setter
    def fault_domain_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_domain_count", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Azure region to create the virtual machine. Default `westus` (string)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="managedDisks")
    def managed_disks(self) -> Optional[pulumi.Input[bool]]:
        """
        Configures VM and availability set for managed disks. For Rancher v2.3.x and above. Default `false` (bool)
        """
        return pulumi.get(self, "managed_disks")

    @managed_disks.setter
    def managed_disks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed_disks", value)

    @property
    @pulumi.getter(name="noPublicIp")
    def no_public_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not create a public IP address for the machine. Default `false` (bool)
        """
        return pulumi.get(self, "no_public_ip")

    @no_public_ip.setter
    def no_public_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_public_ip", value)

    @property
    @pulumi.getter
    def nsg(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine). Default `docker-machine-nsg` (string)
        """
        return pulumi.get(self, "nsg")

    @nsg.setter
    def nsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsg", value)

    @property
    @pulumi.getter(name="openPorts")
    def open_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Make the specified port number accessible from the Internet. (list)
        """
        return pulumi.get(self, "open_ports")

    @open_ports.setter
    def open_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "open_ports", value)

    @property
    @pulumi.getter(name="privateAddressOnly")
    def private_address_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Only use a private IP address. Default `false` (bool)
        """
        return pulumi.get(self, "private_address_only")

    @private_address_only.setter
    def private_address_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_address_only", value)

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a static private IP address for the machine. (string)
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip_address", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Resource Group name (will be created if missing). Default `docker-machine` (string)
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Ocean size. Default `s-1vcpu-1gb` (string)
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="staticPublicIp")
    def static_public_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Assign a static public IP address to the machine. Default `false` (bool)
        """
        return pulumi.get(self, "static_public_ip")

    @static_public_ip.setter
    def static_public_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "static_public_ip", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Storage Account to host the OS Disk for the machine. Default `Standard_LRS` (string)
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Subnet Name to be used within the Virtual Network. Default `docker-machine` (string)
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="subnetPrefix")
    def subnet_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Private CIDR block to be used for the new subnet, should comply RFC 1918. Default `192.168.0.0/16` (string)
        """
        return pulumi.get(self, "subnet_prefix")

    @subnet_prefix.setter
    def subnet_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_prefix", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Subscription ID (string)
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere tags id e.g. `urn:xxx` (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack tenant id. Conflicts with `tenant_name` (string)
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="updateDomainCount")
    def update_domain_count(self) -> Optional[pulumi.Input[str]]:
        """
        Update domain count to use for availability set. Default `5` (string)
        """
        return pulumi.get(self, "update_domain_count")

    @update_domain_count.setter
    def update_domain_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_domain_count", value)

    @property
    @pulumi.getter(name="usePrivateIp")
    def use_private_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Use private IP address of the machine to connect. Default `false` (bool)
        """
        return pulumi.get(self, "use_private_ip")

    @use_private_ip.setter
    def use_private_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_private_ip", value)

    @property
    @pulumi.getter(name="usePublicIpStandardSku")
    def use_public_ip_standard_sku(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_public_ip_standard_sku")

    @use_public_ip_standard_sku.setter
    def use_public_ip_standard_sku(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_public_ip_standard_sku", value)

    @property
    @pulumi.getter
    def vnet(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format). Default `docker-machine-vnet` (string)
        """
        return pulumi.get(self, "vnet")

    @vnet.setter
    def vnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet", value)


@pulumi.input_type
class MachineConfigV2DigitaloceanConfigArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 backups: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[bool]] = None,
                 monitoring: Optional[pulumi.Input[bool]] = None,
                 private_networking: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 ssh_key_contents: Optional[pulumi.Input[str]] = None,
                 ssh_key_fingerprint: Optional[pulumi.Input[str]] = None,
                 ssh_port: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 userdata: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[bool] backups: Enable backups for droplet. Default `false` (bool)
        :param pulumi.Input[str] image: Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        :param pulumi.Input[bool] ipv6: Enable ipv6 for droplet. Default `false` (bool)
        :param pulumi.Input[bool] monitoring: Enable monitoring for droplet. Default `false` (bool)
        :param pulumi.Input[bool] private_networking: Enable private networking for droplet. Default `false` (bool)
        :param pulumi.Input[str] region: OpenStack region name (string)
        :param pulumi.Input[str] size: Digital Ocean size. Default `s-1vcpu-1gb` (string)
        :param pulumi.Input[str] ssh_key_contents: SSH private key contents (string)
        :param pulumi.Input[str] ssh_key_fingerprint: SSH key fingerprint (string)
        :param pulumi.Input[str] ssh_port: If using a non-B2D image you can specify the ssh port. Default `22` (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        :param pulumi.Input[str] tags: vSphere tags id e.g. `urn:xxx` (list)
        :param pulumi.Input[str] userdata: Path to file with cloud-init user-data (string)
        """
        MachineConfigV2DigitaloceanConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token=access_token,
            backups=backups,
            image=image,
            ipv6=ipv6,
            monitoring=monitoring,
            private_networking=private_networking,
            region=region,
            size=size,
            ssh_key_contents=ssh_key_contents,
            ssh_key_fingerprint=ssh_key_fingerprint,
            ssh_port=ssh_port,
            ssh_user=ssh_user,
            tags=tags,
            userdata=userdata,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token: Optional[pulumi.Input[str]] = None,
             backups: Optional[pulumi.Input[bool]] = None,
             image: Optional[pulumi.Input[str]] = None,
             ipv6: Optional[pulumi.Input[bool]] = None,
             monitoring: Optional[pulumi.Input[bool]] = None,
             private_networking: Optional[pulumi.Input[bool]] = None,
             region: Optional[pulumi.Input[str]] = None,
             size: Optional[pulumi.Input[str]] = None,
             ssh_key_contents: Optional[pulumi.Input[str]] = None,
             ssh_key_fingerprint: Optional[pulumi.Input[str]] = None,
             ssh_port: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[str]] = None,
             userdata: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessToken' in kwargs:
            access_token = kwargs['accessToken']
        if 'privateNetworking' in kwargs:
            private_networking = kwargs['privateNetworking']
        if 'sshKeyContents' in kwargs:
            ssh_key_contents = kwargs['sshKeyContents']
        if 'sshKeyFingerprint' in kwargs:
            ssh_key_fingerprint = kwargs['sshKeyFingerprint']
        if 'sshPort' in kwargs:
            ssh_port = kwargs['sshPort']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']

        if access_token is not None:
            _setter("access_token", access_token)
        if backups is not None:
            _setter("backups", backups)
        if image is not None:
            _setter("image", image)
        if ipv6 is not None:
            _setter("ipv6", ipv6)
        if monitoring is not None:
            _setter("monitoring", monitoring)
        if private_networking is not None:
            _setter("private_networking", private_networking)
        if region is not None:
            _setter("region", region)
        if size is not None:
            _setter("size", size)
        if ssh_key_contents is not None:
            _setter("ssh_key_contents", ssh_key_contents)
        if ssh_key_fingerprint is not None:
            _setter("ssh_key_fingerprint", ssh_key_fingerprint)
        if ssh_port is not None:
            _setter("ssh_port", ssh_port)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if tags is not None:
            _setter("tags", tags)
        if userdata is not None:
            _setter("userdata", userdata)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter
    def backups(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable backups for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "backups")

    @backups.setter
    def backups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backups", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable ipv6 for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable monitoring for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter(name="privateNetworking")
    def private_networking(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable private networking for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "private_networking")

    @private_networking.setter
    def private_networking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_networking", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack region name (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Ocean size. Default `s-1vcpu-1gb` (string)
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sshKeyContents")
    def ssh_key_contents(self) -> Optional[pulumi.Input[str]]:
        """
        SSH private key contents (string)
        """
        return pulumi.get(self, "ssh_key_contents")

    @ssh_key_contents.setter
    def ssh_key_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_contents", value)

    @property
    @pulumi.getter(name="sshKeyFingerprint")
    def ssh_key_fingerprint(self) -> Optional[pulumi.Input[str]]:
        """
        SSH key fingerprint (string)
        """
        return pulumi.get(self, "ssh_key_fingerprint")

    @ssh_key_fingerprint.setter
    def ssh_key_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_fingerprint", value)

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh port. Default `22` (string)
        """
        return pulumi.get(self, "ssh_port")

    @ssh_port.setter
    def ssh_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_port", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere tags id e.g. `urn:xxx` (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def userdata(self) -> Optional[pulumi.Input[str]]:
        """
        Path to file with cloud-init user-data (string)
        """
        return pulumi.get(self, "userdata")

    @userdata.setter
    def userdata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userdata", value)


@pulumi.input_type
class MachineConfigV2HarvesterConfigArgs:
    def __init__(__self__, *,
                 ssh_user: pulumi.Input[str],
                 vm_namespace: pulumi.Input[str],
                 cpu_count: Optional[pulumi.Input[str]] = None,
                 disk_bus: Optional[pulumi.Input[str]] = None,
                 disk_info: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 memory_size: Optional[pulumi.Input[str]] = None,
                 network_data: Optional[pulumi.Input[str]] = None,
                 network_info: Optional[pulumi.Input[str]] = None,
                 network_model: Optional[pulumi.Input[str]] = None,
                 network_name: Optional[pulumi.Input[str]] = None,
                 ssh_password: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_affinity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        :param pulumi.Input[str] vm_namespace: Virtual machine namespace e.g. `default` (string)
        :param pulumi.Input[str] cpu_count: vSphere CPU number for docker VM. Default `2` (string)
        :param pulumi.Input[str] disk_bus: Use `disk_info` instead
        :param pulumi.Input[str] disk_info: A JSON string specifying info for the disks e.g. `{\\"disks\\":[{\\"imageName\\":\\"harvester-public/image-57hzg\\",\\"bootOrder\\":1,\\"size\\":40},{\\"storageClassName\\":\\"node-driver-test\\",\\"bootOrder\\":2,\\"size\\":1}]}` (string)
        :param pulumi.Input[str] disk_size: vSphere size of disk for docker VM (in MB). Default `20480` (string)
        :param pulumi.Input[str] image_name: OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        :param pulumi.Input[str] memory_size: vSphere size of memory for docker VM (in MB). Default `2048` (string)
        :param pulumi.Input[str] network_data: NetworkData content of cloud-init, base64 is supported (string)
        :param pulumi.Input[str] network_info: A JSON string specifying info for the networks e.g. `{\\"interfaces\\":[{\\"networkName\\":\\"harvester-public/vlan1\\"},{\\"networkName\\":\\"harvester-public/vlan2\\"}]}` (string)
        :param pulumi.Input[str] network_model: Use `network_info` instead
        :param pulumi.Input[str] network_name: Use `network_info` instead
        :param pulumi.Input[str] ssh_password: If using a non-B2D image you can specify the ssh password. Default `tcuser` (string)
        :param pulumi.Input[str] user_data: UserData content of cloud-init, base64 is supported. If the image does not contain the qemu-guest-agent package, you must install and start qemu-guest-agent using userdata (string)
        :param pulumi.Input[str] vm_affinity: Virtual machine affinity, only base64 format is supported. For Rancher v2.6.7 and above (string)
        """
        MachineConfigV2HarvesterConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ssh_user=ssh_user,
            vm_namespace=vm_namespace,
            cpu_count=cpu_count,
            disk_bus=disk_bus,
            disk_info=disk_info,
            disk_size=disk_size,
            image_name=image_name,
            memory_size=memory_size,
            network_data=network_data,
            network_info=network_info,
            network_model=network_model,
            network_name=network_name,
            ssh_password=ssh_password,
            user_data=user_data,
            vm_affinity=vm_affinity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ssh_user: pulumi.Input[str],
             vm_namespace: pulumi.Input[str],
             cpu_count: Optional[pulumi.Input[str]] = None,
             disk_bus: Optional[pulumi.Input[str]] = None,
             disk_info: Optional[pulumi.Input[str]] = None,
             disk_size: Optional[pulumi.Input[str]] = None,
             image_name: Optional[pulumi.Input[str]] = None,
             memory_size: Optional[pulumi.Input[str]] = None,
             network_data: Optional[pulumi.Input[str]] = None,
             network_info: Optional[pulumi.Input[str]] = None,
             network_model: Optional[pulumi.Input[str]] = None,
             network_name: Optional[pulumi.Input[str]] = None,
             ssh_password: Optional[pulumi.Input[str]] = None,
             user_data: Optional[pulumi.Input[str]] = None,
             vm_affinity: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'vmNamespace' in kwargs:
            vm_namespace = kwargs['vmNamespace']
        if 'cpuCount' in kwargs:
            cpu_count = kwargs['cpuCount']
        if 'diskBus' in kwargs:
            disk_bus = kwargs['diskBus']
        if 'diskInfo' in kwargs:
            disk_info = kwargs['diskInfo']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'imageName' in kwargs:
            image_name = kwargs['imageName']
        if 'memorySize' in kwargs:
            memory_size = kwargs['memorySize']
        if 'networkData' in kwargs:
            network_data = kwargs['networkData']
        if 'networkInfo' in kwargs:
            network_info = kwargs['networkInfo']
        if 'networkModel' in kwargs:
            network_model = kwargs['networkModel']
        if 'networkName' in kwargs:
            network_name = kwargs['networkName']
        if 'sshPassword' in kwargs:
            ssh_password = kwargs['sshPassword']
        if 'userData' in kwargs:
            user_data = kwargs['userData']
        if 'vmAffinity' in kwargs:
            vm_affinity = kwargs['vmAffinity']

        _setter("ssh_user", ssh_user)
        _setter("vm_namespace", vm_namespace)
        if cpu_count is not None:
            _setter("cpu_count", cpu_count)
        if disk_bus is not None:
            warnings.warn("""Use disk_info instead""", DeprecationWarning)
            pulumi.log.warn("""disk_bus is deprecated: Use disk_info instead""")
        if disk_bus is not None:
            _setter("disk_bus", disk_bus)
        if disk_info is not None:
            _setter("disk_info", disk_info)
        if disk_size is not None:
            warnings.warn("""Use disk_info instead""", DeprecationWarning)
            pulumi.log.warn("""disk_size is deprecated: Use disk_info instead""")
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if image_name is not None:
            warnings.warn("""Use disk_info instead""", DeprecationWarning)
            pulumi.log.warn("""image_name is deprecated: Use disk_info instead""")
        if image_name is not None:
            _setter("image_name", image_name)
        if memory_size is not None:
            _setter("memory_size", memory_size)
        if network_data is not None:
            _setter("network_data", network_data)
        if network_info is not None:
            _setter("network_info", network_info)
        if network_model is not None:
            warnings.warn("""Use network_info instead""", DeprecationWarning)
            pulumi.log.warn("""network_model is deprecated: Use network_info instead""")
        if network_model is not None:
            _setter("network_model", network_model)
        if network_name is not None:
            warnings.warn("""Use network_info instead""", DeprecationWarning)
            pulumi.log.warn("""network_name is deprecated: Use network_info instead""")
        if network_name is not None:
            _setter("network_name", network_name)
        if ssh_password is not None:
            _setter("ssh_password", ssh_password)
        if user_data is not None:
            _setter("user_data", user_data)
        if vm_affinity is not None:
            _setter("vm_affinity", vm_affinity)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> pulumi.Input[str]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="vmNamespace")
    def vm_namespace(self) -> pulumi.Input[str]:
        """
        Virtual machine namespace e.g. `default` (string)
        """
        return pulumi.get(self, "vm_namespace")

    @vm_namespace.setter
    def vm_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_namespace", value)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere CPU number for docker VM. Default `2` (string)
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="diskBus")
    def disk_bus(self) -> Optional[pulumi.Input[str]]:
        """
        Use `disk_info` instead
        """
        warnings.warn("""Use disk_info instead""", DeprecationWarning)
        pulumi.log.warn("""disk_bus is deprecated: Use disk_info instead""")

        return pulumi.get(self, "disk_bus")

    @disk_bus.setter
    def disk_bus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_bus", value)

    @property
    @pulumi.getter(name="diskInfo")
    def disk_info(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string specifying info for the disks e.g. `{\\"disks\\":[{\\"imageName\\":\\"harvester-public/image-57hzg\\",\\"bootOrder\\":1,\\"size\\":40},{\\"storageClassName\\":\\"node-driver-test\\",\\"bootOrder\\":2,\\"size\\":1}]}` (string)
        """
        return pulumi.get(self, "disk_info")

    @disk_info.setter
    def disk_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_info", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of disk for docker VM (in MB). Default `20480` (string)
        """
        warnings.warn("""Use disk_info instead""", DeprecationWarning)
        pulumi.log.warn("""disk_size is deprecated: Use disk_info instead""")

        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        """
        warnings.warn("""Use disk_info instead""", DeprecationWarning)
        pulumi.log.warn("""image_name is deprecated: Use disk_info instead""")

        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of memory for docker VM (in MB). Default `2048` (string)
        """
        return pulumi.get(self, "memory_size")

    @memory_size.setter
    def memory_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_size", value)

    @property
    @pulumi.getter(name="networkData")
    def network_data(self) -> Optional[pulumi.Input[str]]:
        """
        NetworkData content of cloud-init, base64 is supported (string)
        """
        return pulumi.get(self, "network_data")

    @network_data.setter
    def network_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_data", value)

    @property
    @pulumi.getter(name="networkInfo")
    def network_info(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string specifying info for the networks e.g. `{\\"interfaces\\":[{\\"networkName\\":\\"harvester-public/vlan1\\"},{\\"networkName\\":\\"harvester-public/vlan2\\"}]}` (string)
        """
        return pulumi.get(self, "network_info")

    @network_info.setter
    def network_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_info", value)

    @property
    @pulumi.getter(name="networkModel")
    def network_model(self) -> Optional[pulumi.Input[str]]:
        """
        Use `network_info` instead
        """
        warnings.warn("""Use network_info instead""", DeprecationWarning)
        pulumi.log.warn("""network_model is deprecated: Use network_info instead""")

        return pulumi.get(self, "network_model")

    @network_model.setter
    def network_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_model", value)

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> Optional[pulumi.Input[str]]:
        """
        Use `network_info` instead
        """
        warnings.warn("""Use network_info instead""", DeprecationWarning)
        pulumi.log.warn("""network_name is deprecated: Use network_info instead""")

        return pulumi.get(self, "network_name")

    @network_name.setter
    def network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_name", value)

    @property
    @pulumi.getter(name="sshPassword")
    def ssh_password(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh password. Default `tcuser` (string)
        """
        return pulumi.get(self, "ssh_password")

    @ssh_password.setter
    def ssh_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_password", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        UserData content of cloud-init, base64 is supported. If the image does not contain the qemu-guest-agent package, you must install and start qemu-guest-agent using userdata (string)
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="vmAffinity")
    def vm_affinity(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual machine affinity, only base64 format is supported. For Rancher v2.6.7 and above (string)
        """
        return pulumi.get(self, "vm_affinity")

    @vm_affinity.setter
    def vm_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_affinity", value)


@pulumi.input_type
class MachineConfigV2LinodeConfigArgs:
    def __init__(__self__, *,
                 authorized_users: Optional[pulumi.Input[str]] = None,
                 create_private_ip: Optional[pulumi.Input[bool]] = None,
                 docker_port: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 root_pass: Optional[pulumi.Input[str]] = None,
                 ssh_port: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 stackscript: Optional[pulumi.Input[str]] = None,
                 stackscript_data: Optional[pulumi.Input[str]] = None,
                 swap_size: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 ua_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authorized_users: Linode user accounts (seperated by commas) whose Linode SSH keys will be permitted root access to the created node. (string)
        :param pulumi.Input[bool] create_private_ip: Create private IP for the instance. Default `false` (bool)
        :param pulumi.Input[str] docker_port: Docker Port. Default `2376` (string)
        :param pulumi.Input[str] image: Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        :param pulumi.Input[str] instance_type: Specifies the Linode Instance type which determines CPU, memory, disk size, etc. Default `g6-standard-4` (string)
        :param pulumi.Input[str] label: Linode Instance Label. (string)
        :param pulumi.Input[str] region: OpenStack region name (string)
        :param pulumi.Input[str] root_pass: Root Password (string)
        :param pulumi.Input[str] ssh_port: If using a non-B2D image you can specify the ssh port. Default `22` (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        :param pulumi.Input[str] stackscript: Specifies the Linode StackScript to use to create the instance. (string)
        :param pulumi.Input[str] stackscript_data: A JSON string specifying data for the selected StackScript. (string)
        :param pulumi.Input[str] swap_size: Linode Instance Swap Size (MB). Default `512` (string)
        :param pulumi.Input[str] tags: vSphere tags id e.g. `urn:xxx` (list)
        :param pulumi.Input[str] token: Linode API token. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] ua_prefix: Prefix the User-Agent in Linode API calls with some 'product/version' (string)
        """
        MachineConfigV2LinodeConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorized_users=authorized_users,
            create_private_ip=create_private_ip,
            docker_port=docker_port,
            image=image,
            instance_type=instance_type,
            label=label,
            region=region,
            root_pass=root_pass,
            ssh_port=ssh_port,
            ssh_user=ssh_user,
            stackscript=stackscript,
            stackscript_data=stackscript_data,
            swap_size=swap_size,
            tags=tags,
            token=token,
            ua_prefix=ua_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorized_users: Optional[pulumi.Input[str]] = None,
             create_private_ip: Optional[pulumi.Input[bool]] = None,
             docker_port: Optional[pulumi.Input[str]] = None,
             image: Optional[pulumi.Input[str]] = None,
             instance_type: Optional[pulumi.Input[str]] = None,
             label: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             root_pass: Optional[pulumi.Input[str]] = None,
             ssh_port: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             stackscript: Optional[pulumi.Input[str]] = None,
             stackscript_data: Optional[pulumi.Input[str]] = None,
             swap_size: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[str]] = None,
             token: Optional[pulumi.Input[str]] = None,
             ua_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authorizedUsers' in kwargs:
            authorized_users = kwargs['authorizedUsers']
        if 'createPrivateIp' in kwargs:
            create_private_ip = kwargs['createPrivateIp']
        if 'dockerPort' in kwargs:
            docker_port = kwargs['dockerPort']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'rootPass' in kwargs:
            root_pass = kwargs['rootPass']
        if 'sshPort' in kwargs:
            ssh_port = kwargs['sshPort']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'stackscriptData' in kwargs:
            stackscript_data = kwargs['stackscriptData']
        if 'swapSize' in kwargs:
            swap_size = kwargs['swapSize']
        if 'uaPrefix' in kwargs:
            ua_prefix = kwargs['uaPrefix']

        if authorized_users is not None:
            _setter("authorized_users", authorized_users)
        if create_private_ip is not None:
            _setter("create_private_ip", create_private_ip)
        if docker_port is not None:
            _setter("docker_port", docker_port)
        if image is not None:
            _setter("image", image)
        if instance_type is not None:
            _setter("instance_type", instance_type)
        if label is not None:
            _setter("label", label)
        if region is not None:
            _setter("region", region)
        if root_pass is not None:
            _setter("root_pass", root_pass)
        if ssh_port is not None:
            _setter("ssh_port", ssh_port)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if stackscript is not None:
            _setter("stackscript", stackscript)
        if stackscript_data is not None:
            _setter("stackscript_data", stackscript_data)
        if swap_size is not None:
            _setter("swap_size", swap_size)
        if tags is not None:
            _setter("tags", tags)
        if token is not None:
            _setter("token", token)
        if ua_prefix is not None:
            _setter("ua_prefix", ua_prefix)

    @property
    @pulumi.getter(name="authorizedUsers")
    def authorized_users(self) -> Optional[pulumi.Input[str]]:
        """
        Linode user accounts (seperated by commas) whose Linode SSH keys will be permitted root access to the created node. (string)
        """
        return pulumi.get(self, "authorized_users")

    @authorized_users.setter
    def authorized_users(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorized_users", value)

    @property
    @pulumi.getter(name="createPrivateIp")
    def create_private_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Create private IP for the instance. Default `false` (bool)
        """
        return pulumi.get(self, "create_private_ip")

    @create_private_ip.setter
    def create_private_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_private_ip", value)

    @property
    @pulumi.getter(name="dockerPort")
    def docker_port(self) -> Optional[pulumi.Input[str]]:
        """
        Docker Port. Default `2376` (string)
        """
        return pulumi.get(self, "docker_port")

    @docker_port.setter
    def docker_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_port", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode Instance type which determines CPU, memory, disk size, etc. Default `g6-standard-4` (string)
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Linode Instance Label. (string)
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack region name (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rootPass")
    def root_pass(self) -> Optional[pulumi.Input[str]]:
        """
        Root Password (string)
        """
        return pulumi.get(self, "root_pass")

    @root_pass.setter
    def root_pass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_pass", value)

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh port. Default `22` (string)
        """
        return pulumi.get(self, "ssh_port")

    @ssh_port.setter
    def ssh_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_port", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter
    def stackscript(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode StackScript to use to create the instance. (string)
        """
        return pulumi.get(self, "stackscript")

    @stackscript.setter
    def stackscript(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stackscript", value)

    @property
    @pulumi.getter(name="stackscriptData")
    def stackscript_data(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string specifying data for the selected StackScript. (string)
        """
        return pulumi.get(self, "stackscript_data")

    @stackscript_data.setter
    def stackscript_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stackscript_data", value)

    @property
    @pulumi.getter(name="swapSize")
    def swap_size(self) -> Optional[pulumi.Input[str]]:
        """
        Linode Instance Swap Size (MB). Default `512` (string)
        """
        return pulumi.get(self, "swap_size")

    @swap_size.setter
    def swap_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "swap_size", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere tags id e.g. `urn:xxx` (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Linode API token. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="uaPrefix")
    def ua_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix the User-Agent in Linode API calls with some 'product/version' (string)
        """
        return pulumi.get(self, "ua_prefix")

    @ua_prefix.setter
    def ua_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ua_prefix", value)


@pulumi.input_type
class MachineConfigV2OpenstackConfigArgs:
    def __init__(__self__, *,
                 auth_url: pulumi.Input[str],
                 availability_zone: pulumi.Input[str],
                 region: pulumi.Input[str],
                 active_timeout: Optional[pulumi.Input[str]] = None,
                 application_credential_id: Optional[pulumi.Input[str]] = None,
                 application_credential_name: Optional[pulumi.Input[str]] = None,
                 application_credential_secret: Optional[pulumi.Input[str]] = None,
                 boot_from_volume: Optional[pulumi.Input[bool]] = None,
                 cacert: Optional[pulumi.Input[str]] = None,
                 config_drive: Optional[pulumi.Input[bool]] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 flavor_id: Optional[pulumi.Input[str]] = None,
                 flavor_name: Optional[pulumi.Input[str]] = None,
                 floating_ip_pool: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keypair_name: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 net_name: Optional[pulumi.Input[str]] = None,
                 nova_network: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key_file: Optional[pulumi.Input[str]] = None,
                 sec_groups: Optional[pulumi.Input[str]] = None,
                 ssh_port: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 tenant_domain_id: Optional[pulumi.Input[str]] = None,
                 tenant_domain_name: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 user_data_file: Optional[pulumi.Input[str]] = None,
                 user_domain_id: Optional[pulumi.Input[str]] = None,
                 user_domain_name: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 volume_device_path: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None,
                 volume_size: Optional[pulumi.Input[str]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_url: OpenStack authentication URL (string)
        :param pulumi.Input[str] availability_zone: OpenStack availability zone (string)
        :param pulumi.Input[str] region: OpenStack region name (string)
        :param pulumi.Input[str] active_timeout: OpenStack active timeout Default `200` (string)
        :param pulumi.Input[str] application_credential_id: OpenStack application credential id. Conflicts with `application_credential_name` (string)
        :param pulumi.Input[str] application_credential_name: OpenStack application credential name. Conflicts with `application_credential_id` (string)
        :param pulumi.Input[str] application_credential_secret: OpenStack application credential secret (string)
        :param pulumi.Input[bool] boot_from_volume: Enable booting from volume. Default is `false` (bool)
        :param pulumi.Input[str] cacert: CA certificate bundle to verify against (string)
        :param pulumi.Input[bool] config_drive: Enables the OpenStack config drive for the instance. Default `false` (bool)
        :param pulumi.Input[str] domain_id: OpenStack domain ID. Identity v3 only. Conflicts with `domain_name` (string)
        :param pulumi.Input[str] domain_name: OpenStack domain name. Identity v3 only. Conflicts with `domain_id` (string)
        :param pulumi.Input[str] endpoint_type: OpenStack endpoint type. adminURL, internalURL or publicURL (string)
        :param pulumi.Input[str] flavor_id: OpenStack flavor id to use for the instance. Conflicts with `flavor_name` (string)
        :param pulumi.Input[str] flavor_name: OpenStack flavor name to use for the instance. Conflicts with `flavor_id` (string)
        :param pulumi.Input[str] floating_ip_pool: OpenStack floating IP pool to get an IP from to assign to the instance (string)
        :param pulumi.Input[str] image_id: OpenStack image id to use for the instance. Conflicts with `image_name` (string)
        :param pulumi.Input[str] image_name: OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        :param pulumi.Input[bool] insecure: Disable TLS credential checking. Default `false` (bool)
        :param pulumi.Input[str] ip_version: OpenStack version of IP address assigned for the machine Default `4` (string)
        :param pulumi.Input[str] keypair_name: OpenStack keypair to use to SSH to the instance (string)
        :param pulumi.Input[str] net_id: OpenStack network id the machine will be connected on. Conflicts with `net_name` (string)
        :param pulumi.Input[str] net_name: OpenStack network name the machine will be connected on. Conflicts with `net_id` (string)
        :param pulumi.Input[bool] nova_network: Use the nova networking services instead of neutron (string)
        :param pulumi.Input[str] password: OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] private_key_file: Private key content to use for SSH (string)
        :param pulumi.Input[str] sec_groups: OpenStack comma separated security groups for the machine (string)
        :param pulumi.Input[str] ssh_port: If using a non-B2D image you can specify the ssh port. Default `22` (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        :param pulumi.Input[str] tenant_domain_id: OpenStack tenant domain id. Conflicts with `tenant_domain_name` (string)
        :param pulumi.Input[str] tenant_domain_name: OpenStack tenant domain name. Conflicts with `tenant_domain_id` (string)
        :param pulumi.Input[str] tenant_id: OpenStack tenant id. Conflicts with `tenant_name` (string)
        :param pulumi.Input[str] tenant_name: OpenStack tenant name. Conflicts with `tenant_id` (string)
        :param pulumi.Input[str] user_data_file: File containing an openstack userdata script (string)
        :param pulumi.Input[str] user_domain_id: OpenStack user domain id. Conflicts with `user_domain_name` (string)
        :param pulumi.Input[str] user_domain_name: OpenStack user domain name. Conflicts with `user_domain_id` (string)
        :param pulumi.Input[str] username: OpenStack username (string)
        :param pulumi.Input[str] volume_device_path: OpenStack volume device path (attaching). Applicable only when `boot_from_volume` is `true`. Omit for auto `/dev/vdb`. (string)
               > **Note:**: `Required+` denotes that either the _name or _id is required but you cannot use both.
               > **Note:**: `Required++` denotes that either the _name or _id is required unless `application_credential_id` is defined.
               > **Note for OpenStack users:**: `keypair_name` is required to be in the schema even if there are no references in rancher itself
        :param pulumi.Input[str] volume_id: OpenStack volume id of existing volume. Applicable only when `boot_from_volume` is `true` (string)
        :param pulumi.Input[str] volume_name: OpenStack volume name of existing volume. Applicable only when `boot_from_volume` is `true` (string)
        :param pulumi.Input[str] volume_size: OpenStack volume size (GiB). Required when `boot_from_volume` is `true` (string)
        :param pulumi.Input[str] volume_type: OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
        """
        MachineConfigV2OpenstackConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_url=auth_url,
            availability_zone=availability_zone,
            region=region,
            active_timeout=active_timeout,
            application_credential_id=application_credential_id,
            application_credential_name=application_credential_name,
            application_credential_secret=application_credential_secret,
            boot_from_volume=boot_from_volume,
            cacert=cacert,
            config_drive=config_drive,
            domain_id=domain_id,
            domain_name=domain_name,
            endpoint_type=endpoint_type,
            flavor_id=flavor_id,
            flavor_name=flavor_name,
            floating_ip_pool=floating_ip_pool,
            image_id=image_id,
            image_name=image_name,
            insecure=insecure,
            ip_version=ip_version,
            keypair_name=keypair_name,
            net_id=net_id,
            net_name=net_name,
            nova_network=nova_network,
            password=password,
            private_key_file=private_key_file,
            sec_groups=sec_groups,
            ssh_port=ssh_port,
            ssh_user=ssh_user,
            tenant_domain_id=tenant_domain_id,
            tenant_domain_name=tenant_domain_name,
            tenant_id=tenant_id,
            tenant_name=tenant_name,
            user_data_file=user_data_file,
            user_domain_id=user_domain_id,
            user_domain_name=user_domain_name,
            username=username,
            volume_device_path=volume_device_path,
            volume_id=volume_id,
            volume_name=volume_name,
            volume_size=volume_size,
            volume_type=volume_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_url: pulumi.Input[str],
             availability_zone: pulumi.Input[str],
             region: pulumi.Input[str],
             active_timeout: Optional[pulumi.Input[str]] = None,
             application_credential_id: Optional[pulumi.Input[str]] = None,
             application_credential_name: Optional[pulumi.Input[str]] = None,
             application_credential_secret: Optional[pulumi.Input[str]] = None,
             boot_from_volume: Optional[pulumi.Input[bool]] = None,
             cacert: Optional[pulumi.Input[str]] = None,
             config_drive: Optional[pulumi.Input[bool]] = None,
             domain_id: Optional[pulumi.Input[str]] = None,
             domain_name: Optional[pulumi.Input[str]] = None,
             endpoint_type: Optional[pulumi.Input[str]] = None,
             flavor_id: Optional[pulumi.Input[str]] = None,
             flavor_name: Optional[pulumi.Input[str]] = None,
             floating_ip_pool: Optional[pulumi.Input[str]] = None,
             image_id: Optional[pulumi.Input[str]] = None,
             image_name: Optional[pulumi.Input[str]] = None,
             insecure: Optional[pulumi.Input[bool]] = None,
             ip_version: Optional[pulumi.Input[str]] = None,
             keypair_name: Optional[pulumi.Input[str]] = None,
             net_id: Optional[pulumi.Input[str]] = None,
             net_name: Optional[pulumi.Input[str]] = None,
             nova_network: Optional[pulumi.Input[bool]] = None,
             password: Optional[pulumi.Input[str]] = None,
             private_key_file: Optional[pulumi.Input[str]] = None,
             sec_groups: Optional[pulumi.Input[str]] = None,
             ssh_port: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             tenant_domain_id: Optional[pulumi.Input[str]] = None,
             tenant_domain_name: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             tenant_name: Optional[pulumi.Input[str]] = None,
             user_data_file: Optional[pulumi.Input[str]] = None,
             user_domain_id: Optional[pulumi.Input[str]] = None,
             user_domain_name: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             volume_device_path: Optional[pulumi.Input[str]] = None,
             volume_id: Optional[pulumi.Input[str]] = None,
             volume_name: Optional[pulumi.Input[str]] = None,
             volume_size: Optional[pulumi.Input[str]] = None,
             volume_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authUrl' in kwargs:
            auth_url = kwargs['authUrl']
        if 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if 'activeTimeout' in kwargs:
            active_timeout = kwargs['activeTimeout']
        if 'applicationCredentialId' in kwargs:
            application_credential_id = kwargs['applicationCredentialId']
        if 'applicationCredentialName' in kwargs:
            application_credential_name = kwargs['applicationCredentialName']
        if 'applicationCredentialSecret' in kwargs:
            application_credential_secret = kwargs['applicationCredentialSecret']
        if 'bootFromVolume' in kwargs:
            boot_from_volume = kwargs['bootFromVolume']
        if 'configDrive' in kwargs:
            config_drive = kwargs['configDrive']
        if 'domainId' in kwargs:
            domain_id = kwargs['domainId']
        if 'domainName' in kwargs:
            domain_name = kwargs['domainName']
        if 'endpointType' in kwargs:
            endpoint_type = kwargs['endpointType']
        if 'flavorId' in kwargs:
            flavor_id = kwargs['flavorId']
        if 'flavorName' in kwargs:
            flavor_name = kwargs['flavorName']
        if 'floatingIpPool' in kwargs:
            floating_ip_pool = kwargs['floatingIpPool']
        if 'imageId' in kwargs:
            image_id = kwargs['imageId']
        if 'imageName' in kwargs:
            image_name = kwargs['imageName']
        if 'ipVersion' in kwargs:
            ip_version = kwargs['ipVersion']
        if 'keypairName' in kwargs:
            keypair_name = kwargs['keypairName']
        if 'netId' in kwargs:
            net_id = kwargs['netId']
        if 'netName' in kwargs:
            net_name = kwargs['netName']
        if 'novaNetwork' in kwargs:
            nova_network = kwargs['novaNetwork']
        if 'privateKeyFile' in kwargs:
            private_key_file = kwargs['privateKeyFile']
        if 'secGroups' in kwargs:
            sec_groups = kwargs['secGroups']
        if 'sshPort' in kwargs:
            ssh_port = kwargs['sshPort']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'tenantDomainId' in kwargs:
            tenant_domain_id = kwargs['tenantDomainId']
        if 'tenantDomainName' in kwargs:
            tenant_domain_name = kwargs['tenantDomainName']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if 'tenantName' in kwargs:
            tenant_name = kwargs['tenantName']
        if 'userDataFile' in kwargs:
            user_data_file = kwargs['userDataFile']
        if 'userDomainId' in kwargs:
            user_domain_id = kwargs['userDomainId']
        if 'userDomainName' in kwargs:
            user_domain_name = kwargs['userDomainName']
        if 'volumeDevicePath' in kwargs:
            volume_device_path = kwargs['volumeDevicePath']
        if 'volumeId' in kwargs:
            volume_id = kwargs['volumeId']
        if 'volumeName' in kwargs:
            volume_name = kwargs['volumeName']
        if 'volumeSize' in kwargs:
            volume_size = kwargs['volumeSize']
        if 'volumeType' in kwargs:
            volume_type = kwargs['volumeType']

        _setter("auth_url", auth_url)
        _setter("availability_zone", availability_zone)
        _setter("region", region)
        if active_timeout is not None:
            _setter("active_timeout", active_timeout)
        if application_credential_id is not None:
            _setter("application_credential_id", application_credential_id)
        if application_credential_name is not None:
            _setter("application_credential_name", application_credential_name)
        if application_credential_secret is not None:
            _setter("application_credential_secret", application_credential_secret)
        if boot_from_volume is not None:
            _setter("boot_from_volume", boot_from_volume)
        if cacert is not None:
            _setter("cacert", cacert)
        if config_drive is not None:
            _setter("config_drive", config_drive)
        if domain_id is not None:
            _setter("domain_id", domain_id)
        if domain_name is not None:
            _setter("domain_name", domain_name)
        if endpoint_type is not None:
            _setter("endpoint_type", endpoint_type)
        if flavor_id is not None:
            _setter("flavor_id", flavor_id)
        if flavor_name is not None:
            _setter("flavor_name", flavor_name)
        if floating_ip_pool is not None:
            _setter("floating_ip_pool", floating_ip_pool)
        if image_id is not None:
            _setter("image_id", image_id)
        if image_name is not None:
            _setter("image_name", image_name)
        if insecure is not None:
            _setter("insecure", insecure)
        if ip_version is not None:
            _setter("ip_version", ip_version)
        if keypair_name is not None:
            _setter("keypair_name", keypair_name)
        if net_id is not None:
            _setter("net_id", net_id)
        if net_name is not None:
            _setter("net_name", net_name)
        if nova_network is not None:
            _setter("nova_network", nova_network)
        if password is not None:
            _setter("password", password)
        if private_key_file is not None:
            _setter("private_key_file", private_key_file)
        if sec_groups is not None:
            _setter("sec_groups", sec_groups)
        if ssh_port is not None:
            _setter("ssh_port", ssh_port)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if tenant_domain_id is not None:
            _setter("tenant_domain_id", tenant_domain_id)
        if tenant_domain_name is not None:
            _setter("tenant_domain_name", tenant_domain_name)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)
        if tenant_name is not None:
            _setter("tenant_name", tenant_name)
        if user_data_file is not None:
            _setter("user_data_file", user_data_file)
        if user_domain_id is not None:
            _setter("user_domain_id", user_domain_id)
        if user_domain_name is not None:
            _setter("user_domain_name", user_domain_name)
        if username is not None:
            _setter("username", username)
        if volume_device_path is not None:
            _setter("volume_device_path", volume_device_path)
        if volume_id is not None:
            _setter("volume_id", volume_id)
        if volume_name is not None:
            _setter("volume_name", volume_name)
        if volume_size is not None:
            _setter("volume_size", volume_size)
        if volume_type is not None:
            _setter("volume_type", volume_type)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> pulumi.Input[str]:
        """
        OpenStack authentication URL (string)
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[str]:
        """
        OpenStack availability zone (string)
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        OpenStack region name (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="activeTimeout")
    def active_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack active timeout Default `200` (string)
        """
        return pulumi.get(self, "active_timeout")

    @active_timeout.setter
    def active_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_timeout", value)

    @property
    @pulumi.getter(name="applicationCredentialId")
    def application_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack application credential id. Conflicts with `application_credential_name` (string)
        """
        return pulumi.get(self, "application_credential_id")

    @application_credential_id.setter
    def application_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_credential_id", value)

    @property
    @pulumi.getter(name="applicationCredentialName")
    def application_credential_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack application credential name. Conflicts with `application_credential_id` (string)
        """
        return pulumi.get(self, "application_credential_name")

    @application_credential_name.setter
    def application_credential_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_credential_name", value)

    @property
    @pulumi.getter(name="applicationCredentialSecret")
    def application_credential_secret(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack application credential secret (string)
        """
        return pulumi.get(self, "application_credential_secret")

    @application_credential_secret.setter
    def application_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_credential_secret", value)

    @property
    @pulumi.getter(name="bootFromVolume")
    def boot_from_volume(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable booting from volume. Default is `false` (bool)
        """
        return pulumi.get(self, "boot_from_volume")

    @boot_from_volume.setter
    def boot_from_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boot_from_volume", value)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate bundle to verify against (string)
        """
        return pulumi.get(self, "cacert")

    @cacert.setter
    def cacert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cacert", value)

    @property
    @pulumi.getter(name="configDrive")
    def config_drive(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the OpenStack config drive for the instance. Default `false` (bool)
        """
        return pulumi.get(self, "config_drive")

    @config_drive.setter
    def config_drive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "config_drive", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack domain ID. Identity v3 only. Conflicts with `domain_name` (string)
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack domain name. Identity v3 only. Conflicts with `domain_id` (string)
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack endpoint type. adminURL, internalURL or publicURL (string)
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack flavor id to use for the instance. Conflicts with `flavor_name` (string)
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flavor_id", value)

    @property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack flavor name to use for the instance. Conflicts with `flavor_id` (string)
        """
        return pulumi.get(self, "flavor_name")

    @flavor_name.setter
    def flavor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flavor_name", value)

    @property
    @pulumi.getter(name="floatingIpPool")
    def floating_ip_pool(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack floating IP pool to get an IP from to assign to the instance (string)
        """
        return pulumi.get(self, "floating_ip_pool")

    @floating_ip_pool.setter
    def floating_ip_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floating_ip_pool", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack image id to use for the instance. Conflicts with `image_name` (string)
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable TLS credential checking. Default `false` (bool)
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack version of IP address assigned for the machine Default `4` (string)
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack keypair to use to SSH to the instance (string)
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_name", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack network id the machine will be connected on. Conflicts with `net_name` (string)
        """
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter(name="netName")
    def net_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack network name the machine will be connected on. Conflicts with `net_id` (string)
        """
        return pulumi.get(self, "net_name")

    @net_name.setter
    def net_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_name", value)

    @property
    @pulumi.getter(name="novaNetwork")
    def nova_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the nova networking services instead of neutron (string)
        """
        return pulumi.get(self, "nova_network")

    @nova_network.setter
    def nova_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nova_network", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKeyFile")
    def private_key_file(self) -> Optional[pulumi.Input[str]]:
        """
        Private key content to use for SSH (string)
        """
        return pulumi.get(self, "private_key_file")

    @private_key_file.setter
    def private_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_file", value)

    @property
    @pulumi.getter(name="secGroups")
    def sec_groups(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack comma separated security groups for the machine (string)
        """
        return pulumi.get(self, "sec_groups")

    @sec_groups.setter
    def sec_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_groups", value)

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh port. Default `22` (string)
        """
        return pulumi.get(self, "ssh_port")

    @ssh_port.setter
    def ssh_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_port", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="tenantDomainId")
    def tenant_domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack tenant domain id. Conflicts with `tenant_domain_name` (string)
        """
        return pulumi.get(self, "tenant_domain_id")

    @tenant_domain_id.setter
    def tenant_domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_domain_id", value)

    @property
    @pulumi.getter(name="tenantDomainName")
    def tenant_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack tenant domain name. Conflicts with `tenant_domain_id` (string)
        """
        return pulumi.get(self, "tenant_domain_name")

    @tenant_domain_name.setter
    def tenant_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_domain_name", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack tenant id. Conflicts with `tenant_name` (string)
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack tenant name. Conflicts with `tenant_id` (string)
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter(name="userDataFile")
    def user_data_file(self) -> Optional[pulumi.Input[str]]:
        """
        File containing an openstack userdata script (string)
        """
        return pulumi.get(self, "user_data_file")

    @user_data_file.setter
    def user_data_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data_file", value)

    @property
    @pulumi.getter(name="userDomainId")
    def user_domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack user domain id. Conflicts with `user_domain_name` (string)
        """
        return pulumi.get(self, "user_domain_id")

    @user_domain_id.setter
    def user_domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_domain_id", value)

    @property
    @pulumi.getter(name="userDomainName")
    def user_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack user domain name. Conflicts with `user_domain_id` (string)
        """
        return pulumi.get(self, "user_domain_name")

    @user_domain_name.setter
    def user_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_domain_name", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack username (string)
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="volumeDevicePath")
    def volume_device_path(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume device path (attaching). Applicable only when `boot_from_volume` is `true`. Omit for auto `/dev/vdb`. (string)
        > **Note:**: `Required+` denotes that either the _name or _id is required but you cannot use both.
        > **Note:**: `Required++` denotes that either the _name or _id is required unless `application_credential_id` is defined.
        > **Note for OpenStack users:**: `keypair_name` is required to be in the schema even if there are no references in rancher itself
        """
        return pulumi.get(self, "volume_device_path")

    @volume_device_path.setter
    def volume_device_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_device_path", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume id of existing volume. Applicable only when `boot_from_volume` is `true` (string)
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume name of existing volume. Applicable only when `boot_from_volume` is `true` (string)
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume size (GiB). Required when `boot_from_volume` is `true` (string)
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class MachineConfigV2VsphereConfigArgs:
    def __init__(__self__, *,
                 boot2docker_url: Optional[pulumi.Input[str]] = None,
                 cfgparams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 clone_from: Optional[pulumi.Input[str]] = None,
                 cloud_config: Optional[pulumi.Input[str]] = None,
                 cloudinit: Optional[pulumi.Input[str]] = None,
                 content_library: Optional[pulumi.Input[str]] = None,
                 cpu_count: Optional[pulumi.Input[str]] = None,
                 creation_type: Optional[pulumi.Input[str]] = None,
                 custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 datastore: Optional[pulumi.Input[str]] = None,
                 datastore_cluster: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 hostsystem: Optional[pulumi.Input[str]] = None,
                 memory_size: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 ssh_password: Optional[pulumi.Input[str]] = None,
                 ssh_port: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 ssh_user_group: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vapp_ip_allocation_policy: Optional[pulumi.Input[str]] = None,
                 vapp_ip_protocol: Optional[pulumi.Input[str]] = None,
                 vapp_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vapp_transport: Optional[pulumi.Input[str]] = None,
                 vcenter: Optional[pulumi.Input[str]] = None,
                 vcenter_port: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] boot2docker_url: vSphere URL for boot2docker iso image. Default `https://releases.rancher.com/os/latest/rancheros-vmware.iso` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cfgparams: vSphere vm configuration parameters (used for guestinfo) (list)
        :param pulumi.Input[str] clone_from: If you choose creation type vm (clone vm) a name of what vm you want to clone is required (string)
        :param pulumi.Input[str] cloud_config: Filepath to a cloud-config yaml file to put into the ISO user-data (string)
        :param pulumi.Input[str] cloudinit: vSphere cloud-init file or url to set in the guestinfo (string)
        :param pulumi.Input[str] content_library: If you choose to clone from a content library template specify the name of the library (string)
        :param pulumi.Input[str] cpu_count: vSphere CPU number for docker VM. Default `2` (string)
        :param pulumi.Input[str] creation_type: Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy. Default `legacy` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] custom_attributes: vSphere custom attributes, format key/value e.g. `200=my custom value` (List)
        :param pulumi.Input[str] datacenter: vSphere datacenter for docker VM (string)
        :param pulumi.Input[str] datastore: vSphere datastore for docker VM (string)
        :param pulumi.Input[str] datastore_cluster: vSphere datastore cluster for virtual machine (string)
        :param pulumi.Input[str] disk_size: vSphere size of disk for docker VM (in MB). Default `20480` (string)
        :param pulumi.Input[str] folder: vSphere folder for the docker VM. This folder must already exist in the datacenter (string)
        :param pulumi.Input[str] hostsystem: vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS (string)
        :param pulumi.Input[str] memory_size: vSphere size of memory for docker VM (in MB). Default `2048` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: vSphere network where the docker VM will be attached (list)
        :param pulumi.Input[str] password: OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] pool: vSphere resource pool for docker VM (string)
        :param pulumi.Input[str] ssh_password: If using a non-B2D image you can specify the ssh password. Default `tcuser` (string)
        :param pulumi.Input[str] ssh_port: If using a non-B2D image you can specify the ssh port. Default `22` (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        :param pulumi.Input[str] ssh_user_group: If using a non-B2D image the uploaded keys will need chown'ed. Default `staff` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: vSphere tags id e.g. `urn:xxx` (list)
        :param pulumi.Input[str] username: OpenStack username (string)
        :param pulumi.Input[str] vapp_ip_allocation_policy: vSphere vApp IP allocation policy. Supported values are: `dhcp`, `fixed`, `transient` and `fixedAllocated` (string)
        :param pulumi.Input[str] vapp_ip_protocol: vSphere vApp IP protocol for this deployment. Supported values are: `IPv4` and `IPv6` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_properties: vSphere vApp properties (list)
        :param pulumi.Input[str] vapp_transport: vSphere OVF environment transports to use for properties. Supported values are: `iso` and `com.vmware.guestInfo` (string)
        :param pulumi.Input[str] vcenter: vSphere IP/hostname for vCenter (string)
        :param pulumi.Input[str] vcenter_port: vSphere Port for vCenter Default `443` (string)
        """
        MachineConfigV2VsphereConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boot2docker_url=boot2docker_url,
            cfgparams=cfgparams,
            clone_from=clone_from,
            cloud_config=cloud_config,
            cloudinit=cloudinit,
            content_library=content_library,
            cpu_count=cpu_count,
            creation_type=creation_type,
            custom_attributes=custom_attributes,
            datacenter=datacenter,
            datastore=datastore,
            datastore_cluster=datastore_cluster,
            disk_size=disk_size,
            folder=folder,
            hostsystem=hostsystem,
            memory_size=memory_size,
            networks=networks,
            password=password,
            pool=pool,
            ssh_password=ssh_password,
            ssh_port=ssh_port,
            ssh_user=ssh_user,
            ssh_user_group=ssh_user_group,
            tags=tags,
            username=username,
            vapp_ip_allocation_policy=vapp_ip_allocation_policy,
            vapp_ip_protocol=vapp_ip_protocol,
            vapp_properties=vapp_properties,
            vapp_transport=vapp_transport,
            vcenter=vcenter,
            vcenter_port=vcenter_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boot2docker_url: Optional[pulumi.Input[str]] = None,
             cfgparams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             clone_from: Optional[pulumi.Input[str]] = None,
             cloud_config: Optional[pulumi.Input[str]] = None,
             cloudinit: Optional[pulumi.Input[str]] = None,
             content_library: Optional[pulumi.Input[str]] = None,
             cpu_count: Optional[pulumi.Input[str]] = None,
             creation_type: Optional[pulumi.Input[str]] = None,
             custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             datacenter: Optional[pulumi.Input[str]] = None,
             datastore: Optional[pulumi.Input[str]] = None,
             datastore_cluster: Optional[pulumi.Input[str]] = None,
             disk_size: Optional[pulumi.Input[str]] = None,
             folder: Optional[pulumi.Input[str]] = None,
             hostsystem: Optional[pulumi.Input[str]] = None,
             memory_size: Optional[pulumi.Input[str]] = None,
             networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             password: Optional[pulumi.Input[str]] = None,
             pool: Optional[pulumi.Input[str]] = None,
             ssh_password: Optional[pulumi.Input[str]] = None,
             ssh_port: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             ssh_user_group: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             username: Optional[pulumi.Input[str]] = None,
             vapp_ip_allocation_policy: Optional[pulumi.Input[str]] = None,
             vapp_ip_protocol: Optional[pulumi.Input[str]] = None,
             vapp_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             vapp_transport: Optional[pulumi.Input[str]] = None,
             vcenter: Optional[pulumi.Input[str]] = None,
             vcenter_port: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'boot2dockerUrl' in kwargs:
            boot2docker_url = kwargs['boot2dockerUrl']
        if 'cloneFrom' in kwargs:
            clone_from = kwargs['cloneFrom']
        if 'cloudConfig' in kwargs:
            cloud_config = kwargs['cloudConfig']
        if 'contentLibrary' in kwargs:
            content_library = kwargs['contentLibrary']
        if 'cpuCount' in kwargs:
            cpu_count = kwargs['cpuCount']
        if 'creationType' in kwargs:
            creation_type = kwargs['creationType']
        if 'customAttributes' in kwargs:
            custom_attributes = kwargs['customAttributes']
        if 'datastoreCluster' in kwargs:
            datastore_cluster = kwargs['datastoreCluster']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'memorySize' in kwargs:
            memory_size = kwargs['memorySize']
        if 'sshPassword' in kwargs:
            ssh_password = kwargs['sshPassword']
        if 'sshPort' in kwargs:
            ssh_port = kwargs['sshPort']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'sshUserGroup' in kwargs:
            ssh_user_group = kwargs['sshUserGroup']
        if 'vappIpAllocationPolicy' in kwargs:
            vapp_ip_allocation_policy = kwargs['vappIpAllocationPolicy']
        if 'vappIpProtocol' in kwargs:
            vapp_ip_protocol = kwargs['vappIpProtocol']
        if 'vappProperties' in kwargs:
            vapp_properties = kwargs['vappProperties']
        if 'vappTransport' in kwargs:
            vapp_transport = kwargs['vappTransport']
        if 'vcenterPort' in kwargs:
            vcenter_port = kwargs['vcenterPort']

        if boot2docker_url is not None:
            _setter("boot2docker_url", boot2docker_url)
        if cfgparams is not None:
            _setter("cfgparams", cfgparams)
        if clone_from is not None:
            _setter("clone_from", clone_from)
        if cloud_config is not None:
            _setter("cloud_config", cloud_config)
        if cloudinit is not None:
            _setter("cloudinit", cloudinit)
        if content_library is not None:
            _setter("content_library", content_library)
        if cpu_count is not None:
            _setter("cpu_count", cpu_count)
        if creation_type is not None:
            _setter("creation_type", creation_type)
        if custom_attributes is not None:
            _setter("custom_attributes", custom_attributes)
        if datacenter is not None:
            _setter("datacenter", datacenter)
        if datastore is not None:
            _setter("datastore", datastore)
        if datastore_cluster is not None:
            _setter("datastore_cluster", datastore_cluster)
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if folder is not None:
            _setter("folder", folder)
        if hostsystem is not None:
            _setter("hostsystem", hostsystem)
        if memory_size is not None:
            _setter("memory_size", memory_size)
        if networks is not None:
            _setter("networks", networks)
        if password is not None:
            _setter("password", password)
        if pool is not None:
            _setter("pool", pool)
        if ssh_password is not None:
            _setter("ssh_password", ssh_password)
        if ssh_port is not None:
            _setter("ssh_port", ssh_port)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if ssh_user_group is not None:
            _setter("ssh_user_group", ssh_user_group)
        if tags is not None:
            _setter("tags", tags)
        if username is not None:
            _setter("username", username)
        if vapp_ip_allocation_policy is not None:
            _setter("vapp_ip_allocation_policy", vapp_ip_allocation_policy)
        if vapp_ip_protocol is not None:
            _setter("vapp_ip_protocol", vapp_ip_protocol)
        if vapp_properties is not None:
            _setter("vapp_properties", vapp_properties)
        if vapp_transport is not None:
            _setter("vapp_transport", vapp_transport)
        if vcenter is not None:
            _setter("vcenter", vcenter)
        if vcenter_port is not None:
            _setter("vcenter_port", vcenter_port)

    @property
    @pulumi.getter(name="boot2dockerUrl")
    def boot2docker_url(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere URL for boot2docker iso image. Default `https://releases.rancher.com/os/latest/rancheros-vmware.iso` (string)
        """
        return pulumi.get(self, "boot2docker_url")

    @boot2docker_url.setter
    def boot2docker_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot2docker_url", value)

    @property
    @pulumi.getter
    def cfgparams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere vm configuration parameters (used for guestinfo) (list)
        """
        return pulumi.get(self, "cfgparams")

    @cfgparams.setter
    def cfgparams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cfgparams", value)

    @property
    @pulumi.getter(name="cloneFrom")
    def clone_from(self) -> Optional[pulumi.Input[str]]:
        """
        If you choose creation type vm (clone vm) a name of what vm you want to clone is required (string)
        """
        return pulumi.get(self, "clone_from")

    @clone_from.setter
    def clone_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clone_from", value)

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Optional[pulumi.Input[str]]:
        """
        Filepath to a cloud-config yaml file to put into the ISO user-data (string)
        """
        return pulumi.get(self, "cloud_config")

    @cloud_config.setter
    def cloud_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_config", value)

    @property
    @pulumi.getter
    def cloudinit(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere cloud-init file or url to set in the guestinfo (string)
        """
        return pulumi.get(self, "cloudinit")

    @cloudinit.setter
    def cloudinit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudinit", value)

    @property
    @pulumi.getter(name="contentLibrary")
    def content_library(self) -> Optional[pulumi.Input[str]]:
        """
        If you choose to clone from a content library template specify the name of the library (string)
        """
        return pulumi.get(self, "content_library")

    @content_library.setter
    def content_library(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_library", value)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere CPU number for docker VM. Default `2` (string)
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="creationType")
    def creation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy. Default `legacy` (string)
        """
        return pulumi.get(self, "creation_type")

    @creation_type.setter
    def creation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_type", value)

    @property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere custom attributes, format key/value e.g. `200=my custom value` (List)
        """
        return pulumi.get(self, "custom_attributes")

    @custom_attributes.setter
    def custom_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_attributes", value)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere datacenter for docker VM (string)
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter
    def datastore(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere datastore for docker VM (string)
        """
        return pulumi.get(self, "datastore")

    @datastore.setter
    def datastore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datastore", value)

    @property
    @pulumi.getter(name="datastoreCluster")
    def datastore_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere datastore cluster for virtual machine (string)
        """
        return pulumi.get(self, "datastore_cluster")

    @datastore_cluster.setter
    def datastore_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datastore_cluster", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of disk for docker VM (in MB). Default `20480` (string)
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere folder for the docker VM. This folder must already exist in the datacenter (string)
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def hostsystem(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS (string)
        """
        return pulumi.get(self, "hostsystem")

    @hostsystem.setter
    def hostsystem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostsystem", value)

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of memory for docker VM (in MB). Default `2048` (string)
        """
        return pulumi.get(self, "memory_size")

    @memory_size.setter
    def memory_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_size", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere network where the docker VM will be attached (list)
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere resource pool for docker VM (string)
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="sshPassword")
    def ssh_password(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh password. Default `tcuser` (string)
        """
        return pulumi.get(self, "ssh_password")

    @ssh_password.setter
    def ssh_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_password", value)

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh port. Default `22` (string)
        """
        return pulumi.get(self, "ssh_port")

    @ssh_port.setter
    def ssh_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_port", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="sshUserGroup")
    def ssh_user_group(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image the uploaded keys will need chown'ed. Default `staff` (string)
        """
        return pulumi.get(self, "ssh_user_group")

    @ssh_user_group.setter
    def ssh_user_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user_group", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere tags id e.g. `urn:xxx` (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack username (string)
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="vappIpAllocationPolicy")
    def vapp_ip_allocation_policy(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere vApp IP allocation policy. Supported values are: `dhcp`, `fixed`, `transient` and `fixedAllocated` (string)
        """
        return pulumi.get(self, "vapp_ip_allocation_policy")

    @vapp_ip_allocation_policy.setter
    def vapp_ip_allocation_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_ip_allocation_policy", value)

    @property
    @pulumi.getter(name="vappIpProtocol")
    def vapp_ip_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere vApp IP protocol for this deployment. Supported values are: `IPv4` and `IPv6` (string)
        """
        return pulumi.get(self, "vapp_ip_protocol")

    @vapp_ip_protocol.setter
    def vapp_ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_ip_protocol", value)

    @property
    @pulumi.getter(name="vappProperties")
    def vapp_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere vApp properties (list)
        """
        return pulumi.get(self, "vapp_properties")

    @vapp_properties.setter
    def vapp_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vapp_properties", value)

    @property
    @pulumi.getter(name="vappTransport")
    def vapp_transport(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere OVF environment transports to use for properties. Supported values are: `iso` and `com.vmware.guestInfo` (string)
        """
        return pulumi.get(self, "vapp_transport")

    @vapp_transport.setter
    def vapp_transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_transport", value)

    @property
    @pulumi.getter
    def vcenter(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere IP/hostname for vCenter (string)
        """
        return pulumi.get(self, "vcenter")

    @vcenter.setter
    def vcenter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter", value)

    @property
    @pulumi.getter(name="vcenterPort")
    def vcenter_port(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere Port for vCenter Default `443` (string)
        """
        return pulumi.get(self, "vcenter_port")

    @vcenter_port.setter
    def vcenter_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_port", value)


@pulumi.input_type
class MultiClusterAppAnswerArgs:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] cluster_id: Cluster ID for answer (string)
        :param pulumi.Input[str] project_id: Project ID for target (string)
        :param pulumi.Input[Mapping[str, Any]] values: Key/values for answer (map)
        """
        MultiClusterAppAnswerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_id=cluster_id,
            project_id=project_id,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_id: Optional[pulumi.Input[str]] = None,
             project_id: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']

        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if project_id is not None:
            _setter("project_id", project_id)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID for answer (string)
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID for target (string)
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key/values for answer (map)
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class MultiClusterAppMemberArgs:
    def __init__(__self__, *,
                 access_type: Optional[pulumi.Input[str]] = None,
                 group_principal_id: Optional[pulumi.Input[str]] = None,
                 user_principal_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_type: Member access type. Valid values: `["member" | "owner" | "read-only"]` (string)
        :param pulumi.Input[str] group_principal_id: Member group principal id (string)
        :param pulumi.Input[str] user_principal_id: Member user principal id (string)
        """
        MultiClusterAppMemberArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_type=access_type,
            group_principal_id=group_principal_id,
            user_principal_id=user_principal_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_type: Optional[pulumi.Input[str]] = None,
             group_principal_id: Optional[pulumi.Input[str]] = None,
             user_principal_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessType' in kwargs:
            access_type = kwargs['accessType']
        if 'groupPrincipalId' in kwargs:
            group_principal_id = kwargs['groupPrincipalId']
        if 'userPrincipalId' in kwargs:
            user_principal_id = kwargs['userPrincipalId']

        if access_type is not None:
            _setter("access_type", access_type)
        if group_principal_id is not None:
            _setter("group_principal_id", group_principal_id)
        if user_principal_id is not None:
            _setter("user_principal_id", user_principal_id)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[pulumi.Input[str]]:
        """
        Member access type. Valid values: `["member" | "owner" | "read-only"]` (string)
        """
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_type", value)

    @property
    @pulumi.getter(name="groupPrincipalId")
    def group_principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        Member group principal id (string)
        """
        return pulumi.get(self, "group_principal_id")

    @group_principal_id.setter
    def group_principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_principal_id", value)

    @property
    @pulumi.getter(name="userPrincipalId")
    def user_principal_id(self) -> Optional[pulumi.Input[str]]:
        """
        Member user principal id (string)
        """
        return pulumi.get(self, "user_principal_id")

    @user_principal_id.setter
    def user_principal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_principal_id", value)


@pulumi.input_type
class MultiClusterAppTargetArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 app_id: Optional[pulumi.Input[str]] = None,
                 health_state: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] project_id: Project ID for target (string)
        :param pulumi.Input[str] app_id: App ID for target (string)
        :param pulumi.Input[str] health_state: App health state for target (string)
        :param pulumi.Input[str] state: App state for target (string)
        """
        MultiClusterAppTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            project_id=project_id,
            app_id=app_id,
            health_state=health_state,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             project_id: pulumi.Input[str],
             app_id: Optional[pulumi.Input[str]] = None,
             health_state: Optional[pulumi.Input[str]] = None,
             state: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if 'appId' in kwargs:
            app_id = kwargs['appId']
        if 'healthState' in kwargs:
            health_state = kwargs['healthState']

        _setter("project_id", project_id)
        if app_id is not None:
            _setter("app_id", app_id)
        if health_state is not None:
            _setter("health_state", health_state)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID for target (string)
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        App ID for target (string)
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="healthState")
    def health_state(self) -> Optional[pulumi.Input[str]]:
        """
        App health state for target (string)
        """
        return pulumi.get(self, "health_state")

    @health_state.setter
    def health_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_state", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        App state for target (string)
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class MultiClusterAppUpgradeStrategyArgs:
    def __init__(__self__, *,
                 rolling_update: Optional[pulumi.Input['MultiClusterAppUpgradeStrategyRollingUpdateArgs']] = None):
        """
        :param pulumi.Input['MultiClusterAppUpgradeStrategyRollingUpdateArgs'] rolling_update: Upgrade strategy rolling update (list MaxItems:1)
        """
        MultiClusterAppUpgradeStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rolling_update=rolling_update,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rolling_update: Optional[pulumi.Input['MultiClusterAppUpgradeStrategyRollingUpdateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rollingUpdate' in kwargs:
            rolling_update = kwargs['rollingUpdate']

        if rolling_update is not None:
            _setter("rolling_update", rolling_update)

    @property
    @pulumi.getter(name="rollingUpdate")
    def rolling_update(self) -> Optional[pulumi.Input['MultiClusterAppUpgradeStrategyRollingUpdateArgs']]:
        """
        Upgrade strategy rolling update (list MaxItems:1)
        """
        return pulumi.get(self, "rolling_update")

    @rolling_update.setter
    def rolling_update(self, value: Optional[pulumi.Input['MultiClusterAppUpgradeStrategyRollingUpdateArgs']]):
        pulumi.set(self, "rolling_update", value)


@pulumi.input_type
class MultiClusterAppUpgradeStrategyRollingUpdateArgs:
    def __init__(__self__, *,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] batch_size: Rolling update batch size. Default `1` (int)
        :param pulumi.Input[int] interval: Rolling update interval. Default `1` (int)
        """
        MultiClusterAppUpgradeStrategyRollingUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            batch_size=batch_size,
            interval=interval,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             batch_size: Optional[pulumi.Input[int]] = None,
             interval: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'batchSize' in kwargs:
            batch_size = kwargs['batchSize']

        if batch_size is not None:
            _setter("batch_size", batch_size)
        if interval is not None:
            _setter("interval", interval)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        """
        Rolling update batch size. Default `1` (int)
        """
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Rolling update interval. Default `1` (int)
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class NamespaceContainerResourceLimitArgs:
    def __init__(__self__, *,
                 limits_cpu: Optional[pulumi.Input[str]] = None,
                 limits_memory: Optional[pulumi.Input[str]] = None,
                 requests_cpu: Optional[pulumi.Input[str]] = None,
                 requests_memory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] limits_cpu: Limit for limits cpu in namespace (string)
        :param pulumi.Input[str] limits_memory: Limit for limits memory in namespace (string)
        :param pulumi.Input[str] requests_cpu: Limit for requests cpu in namespace (string)
        :param pulumi.Input[str] requests_memory: Limit for requests memory in namespace (string)
        """
        NamespaceContainerResourceLimitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            limits_cpu=limits_cpu,
            limits_memory=limits_memory,
            requests_cpu=requests_cpu,
            requests_memory=requests_memory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             limits_cpu: Optional[pulumi.Input[str]] = None,
             limits_memory: Optional[pulumi.Input[str]] = None,
             requests_cpu: Optional[pulumi.Input[str]] = None,
             requests_memory: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'limitsCpu' in kwargs:
            limits_cpu = kwargs['limitsCpu']
        if 'limitsMemory' in kwargs:
            limits_memory = kwargs['limitsMemory']
        if 'requestsCpu' in kwargs:
            requests_cpu = kwargs['requestsCpu']
        if 'requestsMemory' in kwargs:
            requests_memory = kwargs['requestsMemory']

        if limits_cpu is not None:
            _setter("limits_cpu", limits_cpu)
        if limits_memory is not None:
            _setter("limits_memory", limits_memory)
        if requests_cpu is not None:
            _setter("requests_cpu", requests_cpu)
        if requests_memory is not None:
            _setter("requests_memory", requests_memory)

    @property
    @pulumi.getter(name="limitsCpu")
    def limits_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits cpu in namespace (string)
        """
        return pulumi.get(self, "limits_cpu")

    @limits_cpu.setter
    def limits_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_cpu", value)

    @property
    @pulumi.getter(name="limitsMemory")
    def limits_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits memory in namespace (string)
        """
        return pulumi.get(self, "limits_memory")

    @limits_memory.setter
    def limits_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_memory", value)

    @property
    @pulumi.getter(name="requestsCpu")
    def requests_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests cpu in namespace (string)
        """
        return pulumi.get(self, "requests_cpu")

    @requests_cpu.setter
    def requests_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_cpu", value)

    @property
    @pulumi.getter(name="requestsMemory")
    def requests_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests memory in namespace (string)
        """
        return pulumi.get(self, "requests_memory")

    @requests_memory.setter
    def requests_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_memory", value)


@pulumi.input_type
class NamespaceResourceQuotaArgs:
    def __init__(__self__, *,
                 limit: pulumi.Input['NamespaceResourceQuotaLimitArgs']):
        """
        :param pulumi.Input['NamespaceResourceQuotaLimitArgs'] limit: Resource quota limit for namespace (list maxitems:1)
        """
        NamespaceResourceQuotaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            limit=limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             limit: pulumi.Input['NamespaceResourceQuotaLimitArgs'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("limit", limit)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input['NamespaceResourceQuotaLimitArgs']:
        """
        Resource quota limit for namespace (list maxitems:1)
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input['NamespaceResourceQuotaLimitArgs']):
        pulumi.set(self, "limit", value)


@pulumi.input_type
class NamespaceResourceQuotaLimitArgs:
    def __init__(__self__, *,
                 config_maps: Optional[pulumi.Input[str]] = None,
                 limits_cpu: Optional[pulumi.Input[str]] = None,
                 limits_memory: Optional[pulumi.Input[str]] = None,
                 persistent_volume_claims: Optional[pulumi.Input[str]] = None,
                 pods: Optional[pulumi.Input[str]] = None,
                 replication_controllers: Optional[pulumi.Input[str]] = None,
                 requests_cpu: Optional[pulumi.Input[str]] = None,
                 requests_memory: Optional[pulumi.Input[str]] = None,
                 requests_storage: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[str]] = None,
                 services_load_balancers: Optional[pulumi.Input[str]] = None,
                 services_node_ports: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] config_maps: Limit for config maps in namespace (string)
        :param pulumi.Input[str] limits_cpu: Limit for limits cpu in namespace (string)
        :param pulumi.Input[str] limits_memory: Limit for limits memory in namespace (string)
        :param pulumi.Input[str] persistent_volume_claims: Limit for persistent volume claims in namespace (string)
        :param pulumi.Input[str] pods: Limit for pods in namespace (string)
        :param pulumi.Input[str] replication_controllers: Limit for replication controllers in namespace (string)
        :param pulumi.Input[str] requests_cpu: Limit for requests cpu in namespace (string)
        :param pulumi.Input[str] requests_memory: Limit for requests memory in namespace (string)
        :param pulumi.Input[str] requests_storage: Limit for requests storage in namespace (string)
        :param pulumi.Input[str] secrets: Limit for secrets in namespace (string)
        :param pulumi.Input[str] services_load_balancers: Limit for services load balancers in namespace (string)
        :param pulumi.Input[str] services_node_ports: Limit for services node ports in namespace (string)
               
               More info at [resource-quotas](https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/projects-and-namespaces/resource-quotas/)
        """
        NamespaceResourceQuotaLimitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_maps=config_maps,
            limits_cpu=limits_cpu,
            limits_memory=limits_memory,
            persistent_volume_claims=persistent_volume_claims,
            pods=pods,
            replication_controllers=replication_controllers,
            requests_cpu=requests_cpu,
            requests_memory=requests_memory,
            requests_storage=requests_storage,
            secrets=secrets,
            services=services,
            services_load_balancers=services_load_balancers,
            services_node_ports=services_node_ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_maps: Optional[pulumi.Input[str]] = None,
             limits_cpu: Optional[pulumi.Input[str]] = None,
             limits_memory: Optional[pulumi.Input[str]] = None,
             persistent_volume_claims: Optional[pulumi.Input[str]] = None,
             pods: Optional[pulumi.Input[str]] = None,
             replication_controllers: Optional[pulumi.Input[str]] = None,
             requests_cpu: Optional[pulumi.Input[str]] = None,
             requests_memory: Optional[pulumi.Input[str]] = None,
             requests_storage: Optional[pulumi.Input[str]] = None,
             secrets: Optional[pulumi.Input[str]] = None,
             services: Optional[pulumi.Input[str]] = None,
             services_load_balancers: Optional[pulumi.Input[str]] = None,
             services_node_ports: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configMaps' in kwargs:
            config_maps = kwargs['configMaps']
        if 'limitsCpu' in kwargs:
            limits_cpu = kwargs['limitsCpu']
        if 'limitsMemory' in kwargs:
            limits_memory = kwargs['limitsMemory']
        if 'persistentVolumeClaims' in kwargs:
            persistent_volume_claims = kwargs['persistentVolumeClaims']
        if 'replicationControllers' in kwargs:
            replication_controllers = kwargs['replicationControllers']
        if 'requestsCpu' in kwargs:
            requests_cpu = kwargs['requestsCpu']
        if 'requestsMemory' in kwargs:
            requests_memory = kwargs['requestsMemory']
        if 'requestsStorage' in kwargs:
            requests_storage = kwargs['requestsStorage']
        if 'servicesLoadBalancers' in kwargs:
            services_load_balancers = kwargs['servicesLoadBalancers']
        if 'servicesNodePorts' in kwargs:
            services_node_ports = kwargs['servicesNodePorts']

        if config_maps is not None:
            _setter("config_maps", config_maps)
        if limits_cpu is not None:
            _setter("limits_cpu", limits_cpu)
        if limits_memory is not None:
            _setter("limits_memory", limits_memory)
        if persistent_volume_claims is not None:
            _setter("persistent_volume_claims", persistent_volume_claims)
        if pods is not None:
            _setter("pods", pods)
        if replication_controllers is not None:
            _setter("replication_controllers", replication_controllers)
        if requests_cpu is not None:
            _setter("requests_cpu", requests_cpu)
        if requests_memory is not None:
            _setter("requests_memory", requests_memory)
        if requests_storage is not None:
            _setter("requests_storage", requests_storage)
        if secrets is not None:
            _setter("secrets", secrets)
        if services is not None:
            _setter("services", services)
        if services_load_balancers is not None:
            _setter("services_load_balancers", services_load_balancers)
        if services_node_ports is not None:
            _setter("services_node_ports", services_node_ports)

    @property
    @pulumi.getter(name="configMaps")
    def config_maps(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for config maps in namespace (string)
        """
        return pulumi.get(self, "config_maps")

    @config_maps.setter
    def config_maps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_maps", value)

    @property
    @pulumi.getter(name="limitsCpu")
    def limits_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits cpu in namespace (string)
        """
        return pulumi.get(self, "limits_cpu")

    @limits_cpu.setter
    def limits_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_cpu", value)

    @property
    @pulumi.getter(name="limitsMemory")
    def limits_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits memory in namespace (string)
        """
        return pulumi.get(self, "limits_memory")

    @limits_memory.setter
    def limits_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_memory", value)

    @property
    @pulumi.getter(name="persistentVolumeClaims")
    def persistent_volume_claims(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for persistent volume claims in namespace (string)
        """
        return pulumi.get(self, "persistent_volume_claims")

    @persistent_volume_claims.setter
    def persistent_volume_claims(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_volume_claims", value)

    @property
    @pulumi.getter
    def pods(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for pods in namespace (string)
        """
        return pulumi.get(self, "pods")

    @pods.setter
    def pods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pods", value)

    @property
    @pulumi.getter(name="replicationControllers")
    def replication_controllers(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for replication controllers in namespace (string)
        """
        return pulumi.get(self, "replication_controllers")

    @replication_controllers.setter
    def replication_controllers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_controllers", value)

    @property
    @pulumi.getter(name="requestsCpu")
    def requests_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests cpu in namespace (string)
        """
        return pulumi.get(self, "requests_cpu")

    @requests_cpu.setter
    def requests_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_cpu", value)

    @property
    @pulumi.getter(name="requestsMemory")
    def requests_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests memory in namespace (string)
        """
        return pulumi.get(self, "requests_memory")

    @requests_memory.setter
    def requests_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_memory", value)

    @property
    @pulumi.getter(name="requestsStorage")
    def requests_storage(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests storage in namespace (string)
        """
        return pulumi.get(self, "requests_storage")

    @requests_storage.setter
    def requests_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_storage", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for secrets in namespace (string)
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="servicesLoadBalancers")
    def services_load_balancers(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for services load balancers in namespace (string)
        """
        return pulumi.get(self, "services_load_balancers")

    @services_load_balancers.setter
    def services_load_balancers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_load_balancers", value)

    @property
    @pulumi.getter(name="servicesNodePorts")
    def services_node_ports(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for services node ports in namespace (string)

        More info at [resource-quotas](https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/projects-and-namespaces/resource-quotas/)
        """
        return pulumi.get(self, "services_node_ports")

    @services_node_ports.setter
    def services_node_ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_node_ports", value)


@pulumi.input_type
class NodePoolNodeTaintArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 time_added: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Taint key (string)
        :param pulumi.Input[str] value: Taint value (string)
        :param pulumi.Input[str] effect: Taint effect. Supported values : `"NoExecute" | "NoSchedule" | "PreferNoSchedule"` (string)
        :param pulumi.Input[str] time_added: Taint time added (string)
        """
        NodePoolNodeTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
            effect=effect,
            time_added=time_added,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             time_added: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'timeAdded' in kwargs:
            time_added = kwargs['timeAdded']

        _setter("key", key)
        _setter("value", value)
        if effect is not None:
            _setter("effect", effect)
        if time_added is not None:
            _setter("time_added", time_added)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Taint effect. Supported values : `"NoExecute" | "NoSchedule" | "PreferNoSchedule"` (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> Optional[pulumi.Input[str]]:
        """
        Taint time added (string)
        """
        return pulumi.get(self, "time_added")

    @time_added.setter
    def time_added(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_added", value)


@pulumi.input_type
class NodeTemplateAmazonec2ConfigArgs:
    def __init__(__self__, *,
                 ami: pulumi.Input[str],
                 region: pulumi.Input[str],
                 security_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 block_duration_minutes: Optional[pulumi.Input[str]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 encrypt_ebs_volume: Optional[pulumi.Input[bool]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 http_endpoint: Optional[pulumi.Input[str]] = None,
                 http_tokens: Optional[pulumi.Input[str]] = None,
                 iam_instance_profile: Optional[pulumi.Input[str]] = None,
                 insecure_transport: Optional[pulumi.Input[bool]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kms_key: Optional[pulumi.Input[str]] = None,
                 monitoring: Optional[pulumi.Input[bool]] = None,
                 open_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_address_only: Optional[pulumi.Input[bool]] = None,
                 request_spot_instance: Optional[pulumi.Input[bool]] = None,
                 retries: Optional[pulumi.Input[str]] = None,
                 root_size: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 security_group_readonly: Optional[pulumi.Input[bool]] = None,
                 session_token: Optional[pulumi.Input[str]] = None,
                 spot_price: Optional[pulumi.Input[str]] = None,
                 ssh_keypath: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 use_ebs_optimized_instance: Optional[pulumi.Input[bool]] = None,
                 use_private_address: Optional[pulumi.Input[bool]] = None,
                 userdata: Optional[pulumi.Input[str]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ami: AWS machine image (string)
        :param pulumi.Input[str] region: AWS region. Default `eu-west-2` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: AWS VPC security group. (list)
        :param pulumi.Input[str] subnet_id: AWS VPC subnet id (string)
        :param pulumi.Input[str] vpc_id: AWS VPC id. (string)
        :param pulumi.Input[str] zone: AWS zone for instance (i.e. a,b,c,d,e) (string)
        :param pulumi.Input[str] access_key: Outscale Access Key (string)
        :param pulumi.Input[str] block_duration_minutes: AWS spot instance duration in minutes (60, 120, 180, 240, 300, or 360). Default `0` (string)
        :param pulumi.Input[str] device_name: AWS root device name. Default `/dev/sda1` (string)
        :param pulumi.Input[bool] encrypt_ebs_volume: Encrypt EBS volume. Default `false` (bool)
        :param pulumi.Input[str] endpoint: Optional endpoint URL (hostname only or fully qualified URI) (string)
        :param pulumi.Input[str] http_endpoint: Enables or disables the HTTP metadata endpoint on your instances (string)
        :param pulumi.Input[str] http_tokens: The state of token usage for your instance metadata requests (string)
        :param pulumi.Input[str] iam_instance_profile: AWS IAM Instance Profile (string)
        :param pulumi.Input[bool] insecure_transport: Disable SSL when sending requests (bool)
        :param pulumi.Input[str] instance_type: Outscale VM type. Default `tinav2.c1r2p3` (string)
        :param pulumi.Input[str] kms_key: Custom KMS key ID using the AWS Managed CMK (string)
        :param pulumi.Input[bool] monitoring: Enable monitoring for droplet. Default `false` (bool)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] open_ports: Make the specified port number accessible from the Internet. (list)
        :param pulumi.Input[bool] private_address_only: Only use a private IP address. Default `false` (bool)
        :param pulumi.Input[bool] request_spot_instance: Set this flag to request spot instance. Default `false` (bool)
        :param pulumi.Input[str] retries: Set retry count for recoverable failures (use -1 to disable). Default `5` (string)
        :param pulumi.Input[str] root_size: AWS root disk size (in GB). Default `16` (string)
        :param pulumi.Input[str] secret_key: Outscale Secret Key (string)
        :param pulumi.Input[bool] security_group_readonly: Skip adding default rules to security groups (bool)
        :param pulumi.Input[str] session_token: AWS Session Token (string)
        :param pulumi.Input[str] spot_price: AWS spot instance bid price (in dollar). Default `0.50` (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] tags: vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        :param pulumi.Input[bool] use_ebs_optimized_instance: Create an EBS optimized instance. Default `false` (bool)
        :param pulumi.Input[bool] use_private_address: Force the usage of private IP address. Default `false` (bool)
        :param pulumi.Input[str] userdata: Path to file with cloud-init user-data (string)
               
               > **Note:**: You need to install the Hetzner Docker Machine Driver first as shown as in the examples section.
        :param pulumi.Input[str] volume_type: OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
        """
        NodeTemplateAmazonec2ConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ami=ami,
            region=region,
            security_groups=security_groups,
            subnet_id=subnet_id,
            vpc_id=vpc_id,
            zone=zone,
            access_key=access_key,
            block_duration_minutes=block_duration_minutes,
            device_name=device_name,
            encrypt_ebs_volume=encrypt_ebs_volume,
            endpoint=endpoint,
            http_endpoint=http_endpoint,
            http_tokens=http_tokens,
            iam_instance_profile=iam_instance_profile,
            insecure_transport=insecure_transport,
            instance_type=instance_type,
            kms_key=kms_key,
            monitoring=monitoring,
            open_ports=open_ports,
            private_address_only=private_address_only,
            request_spot_instance=request_spot_instance,
            retries=retries,
            root_size=root_size,
            secret_key=secret_key,
            security_group_readonly=security_group_readonly,
            session_token=session_token,
            spot_price=spot_price,
            ssh_keypath=ssh_keypath,
            ssh_user=ssh_user,
            tags=tags,
            use_ebs_optimized_instance=use_ebs_optimized_instance,
            use_private_address=use_private_address,
            userdata=userdata,
            volume_type=volume_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ami: pulumi.Input[str],
             region: pulumi.Input[str],
             security_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
             subnet_id: pulumi.Input[str],
             vpc_id: pulumi.Input[str],
             zone: pulumi.Input[str],
             access_key: Optional[pulumi.Input[str]] = None,
             block_duration_minutes: Optional[pulumi.Input[str]] = None,
             device_name: Optional[pulumi.Input[str]] = None,
             encrypt_ebs_volume: Optional[pulumi.Input[bool]] = None,
             endpoint: Optional[pulumi.Input[str]] = None,
             http_endpoint: Optional[pulumi.Input[str]] = None,
             http_tokens: Optional[pulumi.Input[str]] = None,
             iam_instance_profile: Optional[pulumi.Input[str]] = None,
             insecure_transport: Optional[pulumi.Input[bool]] = None,
             instance_type: Optional[pulumi.Input[str]] = None,
             kms_key: Optional[pulumi.Input[str]] = None,
             monitoring: Optional[pulumi.Input[bool]] = None,
             open_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             private_address_only: Optional[pulumi.Input[bool]] = None,
             request_spot_instance: Optional[pulumi.Input[bool]] = None,
             retries: Optional[pulumi.Input[str]] = None,
             root_size: Optional[pulumi.Input[str]] = None,
             secret_key: Optional[pulumi.Input[str]] = None,
             security_group_readonly: Optional[pulumi.Input[bool]] = None,
             session_token: Optional[pulumi.Input[str]] = None,
             spot_price: Optional[pulumi.Input[str]] = None,
             ssh_keypath: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[str]] = None,
             use_ebs_optimized_instance: Optional[pulumi.Input[bool]] = None,
             use_private_address: Optional[pulumi.Input[bool]] = None,
             userdata: Optional[pulumi.Input[str]] = None,
             volume_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'securityGroups' in kwargs:
            security_groups = kwargs['securityGroups']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if 'vpcId' in kwargs:
            vpc_id = kwargs['vpcId']
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'blockDurationMinutes' in kwargs:
            block_duration_minutes = kwargs['blockDurationMinutes']
        if 'deviceName' in kwargs:
            device_name = kwargs['deviceName']
        if 'encryptEbsVolume' in kwargs:
            encrypt_ebs_volume = kwargs['encryptEbsVolume']
        if 'httpEndpoint' in kwargs:
            http_endpoint = kwargs['httpEndpoint']
        if 'httpTokens' in kwargs:
            http_tokens = kwargs['httpTokens']
        if 'iamInstanceProfile' in kwargs:
            iam_instance_profile = kwargs['iamInstanceProfile']
        if 'insecureTransport' in kwargs:
            insecure_transport = kwargs['insecureTransport']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'kmsKey' in kwargs:
            kms_key = kwargs['kmsKey']
        if 'openPorts' in kwargs:
            open_ports = kwargs['openPorts']
        if 'privateAddressOnly' in kwargs:
            private_address_only = kwargs['privateAddressOnly']
        if 'requestSpotInstance' in kwargs:
            request_spot_instance = kwargs['requestSpotInstance']
        if 'rootSize' in kwargs:
            root_size = kwargs['rootSize']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'securityGroupReadonly' in kwargs:
            security_group_readonly = kwargs['securityGroupReadonly']
        if 'sessionToken' in kwargs:
            session_token = kwargs['sessionToken']
        if 'spotPrice' in kwargs:
            spot_price = kwargs['spotPrice']
        if 'sshKeypath' in kwargs:
            ssh_keypath = kwargs['sshKeypath']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'useEbsOptimizedInstance' in kwargs:
            use_ebs_optimized_instance = kwargs['useEbsOptimizedInstance']
        if 'usePrivateAddress' in kwargs:
            use_private_address = kwargs['usePrivateAddress']
        if 'volumeType' in kwargs:
            volume_type = kwargs['volumeType']

        _setter("ami", ami)
        _setter("region", region)
        _setter("security_groups", security_groups)
        _setter("subnet_id", subnet_id)
        _setter("vpc_id", vpc_id)
        _setter("zone", zone)
        if access_key is not None:
            _setter("access_key", access_key)
        if block_duration_minutes is not None:
            _setter("block_duration_minutes", block_duration_minutes)
        if device_name is not None:
            _setter("device_name", device_name)
        if encrypt_ebs_volume is not None:
            _setter("encrypt_ebs_volume", encrypt_ebs_volume)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if http_endpoint is not None:
            _setter("http_endpoint", http_endpoint)
        if http_tokens is not None:
            _setter("http_tokens", http_tokens)
        if iam_instance_profile is not None:
            _setter("iam_instance_profile", iam_instance_profile)
        if insecure_transport is not None:
            _setter("insecure_transport", insecure_transport)
        if instance_type is not None:
            _setter("instance_type", instance_type)
        if kms_key is not None:
            _setter("kms_key", kms_key)
        if monitoring is not None:
            _setter("monitoring", monitoring)
        if open_ports is not None:
            _setter("open_ports", open_ports)
        if private_address_only is not None:
            _setter("private_address_only", private_address_only)
        if request_spot_instance is not None:
            _setter("request_spot_instance", request_spot_instance)
        if retries is not None:
            _setter("retries", retries)
        if root_size is not None:
            _setter("root_size", root_size)
        if secret_key is not None:
            _setter("secret_key", secret_key)
        if security_group_readonly is not None:
            _setter("security_group_readonly", security_group_readonly)
        if session_token is not None:
            _setter("session_token", session_token)
        if spot_price is not None:
            _setter("spot_price", spot_price)
        if ssh_keypath is not None:
            _setter("ssh_keypath", ssh_keypath)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if tags is not None:
            _setter("tags", tags)
        if use_ebs_optimized_instance is not None:
            _setter("use_ebs_optimized_instance", use_ebs_optimized_instance)
        if use_private_address is not None:
            _setter("use_private_address", use_private_address)
        if userdata is not None:
            _setter("userdata", userdata)
        if volume_type is not None:
            _setter("volume_type", volume_type)

    @property
    @pulumi.getter
    def ami(self) -> pulumi.Input[str]:
        """
        AWS machine image (string)
        """
        return pulumi.get(self, "ami")

    @ami.setter
    def ami(self, value: pulumi.Input[str]):
        pulumi.set(self, "ami", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        AWS region. Default `eu-west-2` (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        AWS VPC security group. (list)
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        AWS VPC subnet id (string)
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        AWS VPC id. (string)
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        AWS zone for instance (i.e. a,b,c,d,e) (string)
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Outscale Access Key (string)
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="blockDurationMinutes")
    def block_duration_minutes(self) -> Optional[pulumi.Input[str]]:
        """
        AWS spot instance duration in minutes (60, 120, 180, 240, 300, or 360). Default `0` (string)
        """
        return pulumi.get(self, "block_duration_minutes")

    @block_duration_minutes.setter
    def block_duration_minutes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_duration_minutes", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        """
        AWS root device name. Default `/dev/sda1` (string)
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="encryptEbsVolume")
    def encrypt_ebs_volume(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypt EBS volume. Default `false` (bool)
        """
        return pulumi.get(self, "encrypt_ebs_volume")

    @encrypt_ebs_volume.setter
    def encrypt_ebs_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt_ebs_volume", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Optional endpoint URL (hostname only or fully qualified URI) (string)
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="httpEndpoint")
    def http_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Enables or disables the HTTP metadata endpoint on your instances (string)
        """
        return pulumi.get(self, "http_endpoint")

    @http_endpoint.setter
    def http_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_endpoint", value)

    @property
    @pulumi.getter(name="httpTokens")
    def http_tokens(self) -> Optional[pulumi.Input[str]]:
        """
        The state of token usage for your instance metadata requests (string)
        """
        return pulumi.get(self, "http_tokens")

    @http_tokens.setter
    def http_tokens(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_tokens", value)

    @property
    @pulumi.getter(name="iamInstanceProfile")
    def iam_instance_profile(self) -> Optional[pulumi.Input[str]]:
        """
        AWS IAM Instance Profile (string)
        """
        return pulumi.get(self, "iam_instance_profile")

    @iam_instance_profile.setter
    def iam_instance_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_instance_profile", value)

    @property
    @pulumi.getter(name="insecureTransport")
    def insecure_transport(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable SSL when sending requests (bool)
        """
        return pulumi.get(self, "insecure_transport")

    @insecure_transport.setter
    def insecure_transport(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure_transport", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Outscale VM type. Default `tinav2.c1r2p3` (string)
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="kmsKey")
    def kms_key(self) -> Optional[pulumi.Input[str]]:
        """
        Custom KMS key ID using the AWS Managed CMK (string)
        """
        return pulumi.get(self, "kms_key")

    @kms_key.setter
    def kms_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable monitoring for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter(name="openPorts")
    def open_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Make the specified port number accessible from the Internet. (list)
        """
        return pulumi.get(self, "open_ports")

    @open_ports.setter
    def open_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "open_ports", value)

    @property
    @pulumi.getter(name="privateAddressOnly")
    def private_address_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Only use a private IP address. Default `false` (bool)
        """
        return pulumi.get(self, "private_address_only")

    @private_address_only.setter
    def private_address_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_address_only", value)

    @property
    @pulumi.getter(name="requestSpotInstance")
    def request_spot_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Set this flag to request spot instance. Default `false` (bool)
        """
        return pulumi.get(self, "request_spot_instance")

    @request_spot_instance.setter
    def request_spot_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "request_spot_instance", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[str]]:
        """
        Set retry count for recoverable failures (use -1 to disable). Default `5` (string)
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[str]]:
        """
        AWS root disk size (in GB). Default `16` (string)
        """
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Outscale Secret Key (string)
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="securityGroupReadonly")
    def security_group_readonly(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip adding default rules to security groups (bool)
        """
        return pulumi.get(self, "security_group_readonly")

    @security_group_readonly.setter
    def security_group_readonly(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "security_group_readonly", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input[str]]:
        """
        AWS Session Token (string)
        """
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_token", value)

    @property
    @pulumi.getter(name="spotPrice")
    def spot_price(self) -> Optional[pulumi.Input[str]]:
        """
        AWS spot instance bid price (in dollar). Default `0.50` (string)
        """
        return pulumi.get(self, "spot_price")

    @spot_price.setter
    def spot_price(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_price", value)

    @property
    @pulumi.getter(name="sshKeypath")
    def ssh_keypath(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssh_keypath")

    @ssh_keypath.setter
    def ssh_keypath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_keypath", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="useEbsOptimizedInstance")
    def use_ebs_optimized_instance(self) -> Optional[pulumi.Input[bool]]:
        """
        Create an EBS optimized instance. Default `false` (bool)
        """
        return pulumi.get(self, "use_ebs_optimized_instance")

    @use_ebs_optimized_instance.setter
    def use_ebs_optimized_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_ebs_optimized_instance", value)

    @property
    @pulumi.getter(name="usePrivateAddress")
    def use_private_address(self) -> Optional[pulumi.Input[bool]]:
        """
        Force the usage of private IP address. Default `false` (bool)
        """
        return pulumi.get(self, "use_private_address")

    @use_private_address.setter
    def use_private_address(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_private_address", value)

    @property
    @pulumi.getter
    def userdata(self) -> Optional[pulumi.Input[str]]:
        """
        Path to file with cloud-init user-data (string)

        > **Note:**: You need to install the Hetzner Docker Machine Driver first as shown as in the examples section.
        """
        return pulumi.get(self, "userdata")

    @userdata.setter
    def userdata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userdata", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class NodeTemplateAzureConfigArgs:
    def __init__(__self__, *,
                 accelerated_networking: Optional[pulumi.Input[bool]] = None,
                 availability_set: Optional[pulumi.Input[str]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 custom_data: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[str]] = None,
                 dns: Optional[pulumi.Input[str]] = None,
                 docker_port: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 fault_domain_count: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 managed_disks: Optional[pulumi.Input[bool]] = None,
                 no_public_ip: Optional[pulumi.Input[bool]] = None,
                 nsg: Optional[pulumi.Input[str]] = None,
                 open_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 private_ip_address: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 static_public_ip: Optional[pulumi.Input[bool]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 subnet_prefix: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 update_domain_count: Optional[pulumi.Input[str]] = None,
                 use_private_ip: Optional[pulumi.Input[bool]] = None,
                 use_public_ip_standard_sku: Optional[pulumi.Input[bool]] = None,
                 vnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] availability_set: Azure Availability Set to place the virtual machine into. Default `docker-machine` (string)
        :param pulumi.Input[str] availability_zone: OpenStack availability zone (string)
        :param pulumi.Input[str] client_id: Azure Service Principal Account ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] client_secret: Azure Service Principal Account password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] custom_data: Path to file with custom-data (string)
        :param pulumi.Input[str] disk_size: vSphere size of disk for docker VM (in MB). Default `20480` (string)
        :param pulumi.Input[str] dns: A unique DNS label for the public IP adddress (string)
        :param pulumi.Input[str] docker_port: Docker Port. Default `2376` (string)
        :param pulumi.Input[str] environment: Azure environment (e.g. AzurePublicCloud, AzureChinaCloud). Default `AzurePublicCloud` (string)
        :param pulumi.Input[str] fault_domain_count: Fault domain count to use for availability set. Default `3` (string)
        :param pulumi.Input[str] image: Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        :param pulumi.Input[str] location: Azure region to create the virtual machine. Default `westus` (string)
        :param pulumi.Input[bool] managed_disks: Configures VM and availability set for managed disks. For Rancher v2.3.x and above. Default `false` (bool)
        :param pulumi.Input[bool] no_public_ip: Do not create a public IP address for the machine. Default `false` (bool)
        :param pulumi.Input[str] nsg: Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine). Default `docker-machine-nsg` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] open_ports: Make the specified port number accessible from the Internet. (list)
        :param pulumi.Input[str] plan: Azure marketplace purchase plan for Azure Virtual Machine. Format is `<publisher>:<product>:<plan>`. For Rancher v2.6.3 and above. (string)
        :param pulumi.Input[str] private_ip_address: Specify a static private IP address for the machine. (string)
        :param pulumi.Input[str] resource_group: Azure Resource Group name (will be created if missing). Default `docker-machine` (string)
        :param pulumi.Input[str] size: Digital Ocean size. Default `s-1vcpu-1gb` (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        :param pulumi.Input[bool] static_public_ip: Assign a static public IP address to the machine. Default `false` (bool)
        :param pulumi.Input[str] storage_type: Type of Storage Account to host the OS Disk for the machine. Default `Standard_LRS` (string)
        :param pulumi.Input[str] subnet: Azure Subnet Name to be used within the Virtual Network. Default `docker-machine` (string)
        :param pulumi.Input[str] subnet_prefix: Private CIDR block to be used for the new subnet, should comply RFC 1918. Default `192.168.0.0/16` (string)
        :param pulumi.Input[str] subscription_id: Azure Subscription ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] tags: vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        :param pulumi.Input[str] update_domain_count: Update domain count to use for availability set. Default `5` (string)
        :param pulumi.Input[bool] use_private_ip: Use private IP address of the machine to connect. Default `false` (bool)
        :param pulumi.Input[str] vnet: Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format). Default `docker-machine-vnet` (string)
        """
        NodeTemplateAzureConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accelerated_networking=accelerated_networking,
            availability_set=availability_set,
            availability_zone=availability_zone,
            client_id=client_id,
            client_secret=client_secret,
            custom_data=custom_data,
            disk_size=disk_size,
            dns=dns,
            docker_port=docker_port,
            environment=environment,
            fault_domain_count=fault_domain_count,
            image=image,
            location=location,
            managed_disks=managed_disks,
            no_public_ip=no_public_ip,
            nsg=nsg,
            open_ports=open_ports,
            plan=plan,
            private_ip_address=private_ip_address,
            resource_group=resource_group,
            size=size,
            ssh_user=ssh_user,
            static_public_ip=static_public_ip,
            storage_type=storage_type,
            subnet=subnet,
            subnet_prefix=subnet_prefix,
            subscription_id=subscription_id,
            tags=tags,
            update_domain_count=update_domain_count,
            use_private_ip=use_private_ip,
            use_public_ip_standard_sku=use_public_ip_standard_sku,
            vnet=vnet,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accelerated_networking: Optional[pulumi.Input[bool]] = None,
             availability_set: Optional[pulumi.Input[str]] = None,
             availability_zone: Optional[pulumi.Input[str]] = None,
             client_id: Optional[pulumi.Input[str]] = None,
             client_secret: Optional[pulumi.Input[str]] = None,
             custom_data: Optional[pulumi.Input[str]] = None,
             disk_size: Optional[pulumi.Input[str]] = None,
             dns: Optional[pulumi.Input[str]] = None,
             docker_port: Optional[pulumi.Input[str]] = None,
             environment: Optional[pulumi.Input[str]] = None,
             fault_domain_count: Optional[pulumi.Input[str]] = None,
             image: Optional[pulumi.Input[str]] = None,
             location: Optional[pulumi.Input[str]] = None,
             managed_disks: Optional[pulumi.Input[bool]] = None,
             no_public_ip: Optional[pulumi.Input[bool]] = None,
             nsg: Optional[pulumi.Input[str]] = None,
             open_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             plan: Optional[pulumi.Input[str]] = None,
             private_ip_address: Optional[pulumi.Input[str]] = None,
             resource_group: Optional[pulumi.Input[str]] = None,
             size: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             static_public_ip: Optional[pulumi.Input[bool]] = None,
             storage_type: Optional[pulumi.Input[str]] = None,
             subnet: Optional[pulumi.Input[str]] = None,
             subnet_prefix: Optional[pulumi.Input[str]] = None,
             subscription_id: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[str]] = None,
             update_domain_count: Optional[pulumi.Input[str]] = None,
             use_private_ip: Optional[pulumi.Input[bool]] = None,
             use_public_ip_standard_sku: Optional[pulumi.Input[bool]] = None,
             vnet: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'acceleratedNetworking' in kwargs:
            accelerated_networking = kwargs['acceleratedNetworking']
        if 'availabilitySet' in kwargs:
            availability_set = kwargs['availabilitySet']
        if 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'clientSecret' in kwargs:
            client_secret = kwargs['clientSecret']
        if 'customData' in kwargs:
            custom_data = kwargs['customData']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'dockerPort' in kwargs:
            docker_port = kwargs['dockerPort']
        if 'faultDomainCount' in kwargs:
            fault_domain_count = kwargs['faultDomainCount']
        if 'managedDisks' in kwargs:
            managed_disks = kwargs['managedDisks']
        if 'noPublicIp' in kwargs:
            no_public_ip = kwargs['noPublicIp']
        if 'openPorts' in kwargs:
            open_ports = kwargs['openPorts']
        if 'privateIpAddress' in kwargs:
            private_ip_address = kwargs['privateIpAddress']
        if 'resourceGroup' in kwargs:
            resource_group = kwargs['resourceGroup']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'staticPublicIp' in kwargs:
            static_public_ip = kwargs['staticPublicIp']
        if 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if 'subnetPrefix' in kwargs:
            subnet_prefix = kwargs['subnetPrefix']
        if 'subscriptionId' in kwargs:
            subscription_id = kwargs['subscriptionId']
        if 'updateDomainCount' in kwargs:
            update_domain_count = kwargs['updateDomainCount']
        if 'usePrivateIp' in kwargs:
            use_private_ip = kwargs['usePrivateIp']
        if 'usePublicIpStandardSku' in kwargs:
            use_public_ip_standard_sku = kwargs['usePublicIpStandardSku']

        if accelerated_networking is not None:
            _setter("accelerated_networking", accelerated_networking)
        if availability_set is not None:
            _setter("availability_set", availability_set)
        if availability_zone is not None:
            _setter("availability_zone", availability_zone)
        if client_id is not None:
            _setter("client_id", client_id)
        if client_secret is not None:
            _setter("client_secret", client_secret)
        if custom_data is not None:
            _setter("custom_data", custom_data)
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if dns is not None:
            _setter("dns", dns)
        if docker_port is not None:
            _setter("docker_port", docker_port)
        if environment is not None:
            _setter("environment", environment)
        if fault_domain_count is not None:
            _setter("fault_domain_count", fault_domain_count)
        if image is not None:
            _setter("image", image)
        if location is not None:
            _setter("location", location)
        if managed_disks is not None:
            _setter("managed_disks", managed_disks)
        if no_public_ip is not None:
            _setter("no_public_ip", no_public_ip)
        if nsg is not None:
            _setter("nsg", nsg)
        if open_ports is not None:
            _setter("open_ports", open_ports)
        if plan is not None:
            _setter("plan", plan)
        if private_ip_address is not None:
            _setter("private_ip_address", private_ip_address)
        if resource_group is not None:
            _setter("resource_group", resource_group)
        if size is not None:
            _setter("size", size)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if static_public_ip is not None:
            _setter("static_public_ip", static_public_ip)
        if storage_type is not None:
            _setter("storage_type", storage_type)
        if subnet is not None:
            _setter("subnet", subnet)
        if subnet_prefix is not None:
            _setter("subnet_prefix", subnet_prefix)
        if subscription_id is not None:
            _setter("subscription_id", subscription_id)
        if tags is not None:
            _setter("tags", tags)
        if update_domain_count is not None:
            _setter("update_domain_count", update_domain_count)
        if use_private_ip is not None:
            _setter("use_private_ip", use_private_ip)
        if use_public_ip_standard_sku is not None:
            _setter("use_public_ip_standard_sku", use_public_ip_standard_sku)
        if vnet is not None:
            _setter("vnet", vnet)

    @property
    @pulumi.getter(name="acceleratedNetworking")
    def accelerated_networking(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "accelerated_networking")

    @accelerated_networking.setter
    def accelerated_networking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accelerated_networking", value)

    @property
    @pulumi.getter(name="availabilitySet")
    def availability_set(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Availability Set to place the virtual machine into. Default `docker-machine` (string)
        """
        return pulumi.get(self, "availability_set")

    @availability_set.setter
    def availability_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_set", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack availability zone (string)
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Service Principal Account ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Service Principal Account password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="customData")
    def custom_data(self) -> Optional[pulumi.Input[str]]:
        """
        Path to file with custom-data (string)
        """
        return pulumi.get(self, "custom_data")

    @custom_data.setter
    def custom_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_data", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of disk for docker VM (in MB). Default `20480` (string)
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def dns(self) -> Optional[pulumi.Input[str]]:
        """
        A unique DNS label for the public IP adddress (string)
        """
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter(name="dockerPort")
    def docker_port(self) -> Optional[pulumi.Input[str]]:
        """
        Docker Port. Default `2376` (string)
        """
        return pulumi.get(self, "docker_port")

    @docker_port.setter
    def docker_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_port", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Azure environment (e.g. AzurePublicCloud, AzureChinaCloud). Default `AzurePublicCloud` (string)
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="faultDomainCount")
    def fault_domain_count(self) -> Optional[pulumi.Input[str]]:
        """
        Fault domain count to use for availability set. Default `3` (string)
        """
        return pulumi.get(self, "fault_domain_count")

    @fault_domain_count.setter
    def fault_domain_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_domain_count", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Azure region to create the virtual machine. Default `westus` (string)
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="managedDisks")
    def managed_disks(self) -> Optional[pulumi.Input[bool]]:
        """
        Configures VM and availability set for managed disks. For Rancher v2.3.x and above. Default `false` (bool)
        """
        return pulumi.get(self, "managed_disks")

    @managed_disks.setter
    def managed_disks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "managed_disks", value)

    @property
    @pulumi.getter(name="noPublicIp")
    def no_public_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not create a public IP address for the machine. Default `false` (bool)
        """
        return pulumi.get(self, "no_public_ip")

    @no_public_ip.setter
    def no_public_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_public_ip", value)

    @property
    @pulumi.getter
    def nsg(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Network Security Group to assign this node to (accepts either a name or resource ID, default is to create a new NSG for each machine). Default `docker-machine-nsg` (string)
        """
        return pulumi.get(self, "nsg")

    @nsg.setter
    def nsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsg", value)

    @property
    @pulumi.getter(name="openPorts")
    def open_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Make the specified port number accessible from the Internet. (list)
        """
        return pulumi.get(self, "open_ports")

    @open_ports.setter
    def open_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "open_ports", value)

    @property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[str]]:
        """
        Azure marketplace purchase plan for Azure Virtual Machine. Format is `<publisher>:<product>:<plan>`. For Rancher v2.6.3 and above. (string)
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="privateIpAddress")
    def private_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a static private IP address for the machine. (string)
        """
        return pulumi.get(self, "private_ip_address")

    @private_ip_address.setter
    def private_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip_address", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Resource Group name (will be created if missing). Default `docker-machine` (string)
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Ocean size. Default `s-1vcpu-1gb` (string)
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="staticPublicIp")
    def static_public_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Assign a static public IP address to the machine. Default `false` (bool)
        """
        return pulumi.get(self, "static_public_ip")

    @static_public_ip.setter
    def static_public_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "static_public_ip", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of Storage Account to host the OS Disk for the machine. Default `Standard_LRS` (string)
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Subnet Name to be used within the Virtual Network. Default `docker-machine` (string)
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="subnetPrefix")
    def subnet_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Private CIDR block to be used for the new subnet, should comply RFC 1918. Default `192.168.0.0/16` (string)
        """
        return pulumi.get(self, "subnet_prefix")

    @subnet_prefix.setter
    def subnet_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_prefix", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Subscription ID. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateDomainCount")
    def update_domain_count(self) -> Optional[pulumi.Input[str]]:
        """
        Update domain count to use for availability set. Default `5` (string)
        """
        return pulumi.get(self, "update_domain_count")

    @update_domain_count.setter
    def update_domain_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_domain_count", value)

    @property
    @pulumi.getter(name="usePrivateIp")
    def use_private_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Use private IP address of the machine to connect. Default `false` (bool)
        """
        return pulumi.get(self, "use_private_ip")

    @use_private_ip.setter
    def use_private_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_private_ip", value)

    @property
    @pulumi.getter(name="usePublicIpStandardSku")
    def use_public_ip_standard_sku(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_public_ip_standard_sku")

    @use_public_ip_standard_sku.setter
    def use_public_ip_standard_sku(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_public_ip_standard_sku", value)

    @property
    @pulumi.getter
    def vnet(self) -> Optional[pulumi.Input[str]]:
        """
        Azure Virtual Network name to connect the virtual machine (in [resourcegroup:]name format). Default `docker-machine-vnet` (string)
        """
        return pulumi.get(self, "vnet")

    @vnet.setter
    def vnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnet", value)


@pulumi.input_type
class NodeTemplateDigitaloceanConfigArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 backups: Optional[pulumi.Input[bool]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[bool]] = None,
                 monitoring: Optional[pulumi.Input[bool]] = None,
                 private_networking: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 ssh_key_fingerprint: Optional[pulumi.Input[str]] = None,
                 ssh_key_path: Optional[pulumi.Input[str]] = None,
                 ssh_port: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 userdata: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[bool] backups: Enable backups for droplet. Default `false` (bool)
        :param pulumi.Input[str] image: Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        :param pulumi.Input[bool] ipv6: Enable ipv6 for droplet. Default `false` (bool)
        :param pulumi.Input[bool] monitoring: Enable monitoring for droplet. Default `false` (bool)
        :param pulumi.Input[bool] private_networking: Enable private networking for droplet. Default `false` (bool)
        :param pulumi.Input[str] region: AWS region. Default `eu-west-2` (string)
        :param pulumi.Input[str] size: Digital Ocean size. Default `s-1vcpu-1gb` (string)
        :param pulumi.Input[str] ssh_key_fingerprint: SSH key fingerprint (string)
        :param pulumi.Input[str] ssh_key_path: SSH private key path (string)
        :param pulumi.Input[str] ssh_port: If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] tags: vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        :param pulumi.Input[str] userdata: Path to file with cloud-init user-data (string)
               
               > **Note:**: You need to install the Hetzner Docker Machine Driver first as shown as in the examples section.
        """
        NodeTemplateDigitaloceanConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token=access_token,
            backups=backups,
            image=image,
            ipv6=ipv6,
            monitoring=monitoring,
            private_networking=private_networking,
            region=region,
            size=size,
            ssh_key_fingerprint=ssh_key_fingerprint,
            ssh_key_path=ssh_key_path,
            ssh_port=ssh_port,
            ssh_user=ssh_user,
            tags=tags,
            userdata=userdata,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token: Optional[pulumi.Input[str]] = None,
             backups: Optional[pulumi.Input[bool]] = None,
             image: Optional[pulumi.Input[str]] = None,
             ipv6: Optional[pulumi.Input[bool]] = None,
             monitoring: Optional[pulumi.Input[bool]] = None,
             private_networking: Optional[pulumi.Input[bool]] = None,
             region: Optional[pulumi.Input[str]] = None,
             size: Optional[pulumi.Input[str]] = None,
             ssh_key_fingerprint: Optional[pulumi.Input[str]] = None,
             ssh_key_path: Optional[pulumi.Input[str]] = None,
             ssh_port: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[str]] = None,
             userdata: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessToken' in kwargs:
            access_token = kwargs['accessToken']
        if 'privateNetworking' in kwargs:
            private_networking = kwargs['privateNetworking']
        if 'sshKeyFingerprint' in kwargs:
            ssh_key_fingerprint = kwargs['sshKeyFingerprint']
        if 'sshKeyPath' in kwargs:
            ssh_key_path = kwargs['sshKeyPath']
        if 'sshPort' in kwargs:
            ssh_port = kwargs['sshPort']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']

        if access_token is not None:
            _setter("access_token", access_token)
        if backups is not None:
            _setter("backups", backups)
        if image is not None:
            _setter("image", image)
        if ipv6 is not None:
            _setter("ipv6", ipv6)
        if monitoring is not None:
            _setter("monitoring", monitoring)
        if private_networking is not None:
            _setter("private_networking", private_networking)
        if region is not None:
            _setter("region", region)
        if size is not None:
            _setter("size", size)
        if ssh_key_fingerprint is not None:
            _setter("ssh_key_fingerprint", ssh_key_fingerprint)
        if ssh_key_path is not None:
            _setter("ssh_key_path", ssh_key_path)
        if ssh_port is not None:
            _setter("ssh_port", ssh_port)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if tags is not None:
            _setter("tags", tags)
        if userdata is not None:
            _setter("userdata", userdata)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Ocean access token. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter
    def backups(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable backups for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "backups")

    @backups.setter
    def backups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backups", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable ipv6 for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable monitoring for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter(name="privateNetworking")
    def private_networking(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable private networking for droplet. Default `false` (bool)
        """
        return pulumi.get(self, "private_networking")

    @private_networking.setter
    def private_networking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_networking", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS region. Default `eu-west-2` (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        """
        Digital Ocean size. Default `s-1vcpu-1gb` (string)
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sshKeyFingerprint")
    def ssh_key_fingerprint(self) -> Optional[pulumi.Input[str]]:
        """
        SSH key fingerprint (string)
        """
        return pulumi.get(self, "ssh_key_fingerprint")

    @ssh_key_fingerprint.setter
    def ssh_key_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_fingerprint", value)

    @property
    @pulumi.getter(name="sshKeyPath")
    def ssh_key_path(self) -> Optional[pulumi.Input[str]]:
        """
        SSH private key path (string)
        """
        return pulumi.get(self, "ssh_key_path")

    @ssh_key_path.setter
    def ssh_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_key_path", value)

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_port")

    @ssh_port.setter
    def ssh_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_port", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def userdata(self) -> Optional[pulumi.Input[str]]:
        """
        Path to file with cloud-init user-data (string)

        > **Note:**: You need to install the Hetzner Docker Machine Driver first as shown as in the examples section.
        """
        return pulumi.get(self, "userdata")

    @userdata.setter
    def userdata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userdata", value)


@pulumi.input_type
class NodeTemplateHarvesterConfigArgs:
    def __init__(__self__, *,
                 ssh_user: pulumi.Input[str],
                 vm_namespace: pulumi.Input[str],
                 cpu_count: Optional[pulumi.Input[str]] = None,
                 disk_bus: Optional[pulumi.Input[str]] = None,
                 disk_info: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 memory_size: Optional[pulumi.Input[str]] = None,
                 network_data: Optional[pulumi.Input[str]] = None,
                 network_info: Optional[pulumi.Input[str]] = None,
                 network_model: Optional[pulumi.Input[str]] = None,
                 network_name: Optional[pulumi.Input[str]] = None,
                 ssh_password: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_affinity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] vm_namespace: Virtual machine namespace e.g. `default` (string)
        :param pulumi.Input[str] cpu_count: vSphere CPU number for docker VM. Default `2` (string)
        :param pulumi.Input[str] disk_bus: Use `disk_info` instead
        :param pulumi.Input[str] disk_info: A JSON string specifying info for the disks e.g. `{\\"disks\\":[{\\"imageName\\":\\"harvester-public/image-57hzg\\",\\"bootOrder\\":1,\\"size\\":40},{\\"storageClassName\\":\\"node-driver-test\\",\\"bootOrder\\":2,\\"size\\":1}]}` (string)
        :param pulumi.Input[str] disk_size: vSphere size of disk for docker VM (in MB). Default `20480` (string)
        :param pulumi.Input[str] image_name: OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        :param pulumi.Input[str] memory_size: vSphere size of memory for docker VM (in MB). Default `2048` (string)
        :param pulumi.Input[str] network_data: NetworkData content of cloud-init, base64 is supported (string)
        :param pulumi.Input[str] network_info: A JSON string specifying info for the networks e.g. `{\\"interfaces\\":[{\\"networkName\\":\\"harvester-public/vlan1\\"},{\\"networkName\\":\\"harvester-public/vlan2\\"}]}` (string)
        :param pulumi.Input[str] network_model: Use `network_info` instead
        :param pulumi.Input[str] network_name: Opennebula network to connect the machine to. Conflicts with `network_id` (string)
        :param pulumi.Input[str] ssh_password: If using a non-B2D image you can specify the ssh password. Default `tcuser`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] user_data: UserData content of cloud-init, base64 is supported. If the image does not contain the qemu-guest-agent package, you must install and start qemu-guest-agent using userdata (string)
        :param pulumi.Input[str] vm_affinity: Virtual machine affinity, only base64 format is supported. For Rancher v2.6.7 and above (string)
        """
        NodeTemplateHarvesterConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ssh_user=ssh_user,
            vm_namespace=vm_namespace,
            cpu_count=cpu_count,
            disk_bus=disk_bus,
            disk_info=disk_info,
            disk_size=disk_size,
            image_name=image_name,
            memory_size=memory_size,
            network_data=network_data,
            network_info=network_info,
            network_model=network_model,
            network_name=network_name,
            ssh_password=ssh_password,
            user_data=user_data,
            vm_affinity=vm_affinity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ssh_user: pulumi.Input[str],
             vm_namespace: pulumi.Input[str],
             cpu_count: Optional[pulumi.Input[str]] = None,
             disk_bus: Optional[pulumi.Input[str]] = None,
             disk_info: Optional[pulumi.Input[str]] = None,
             disk_size: Optional[pulumi.Input[str]] = None,
             image_name: Optional[pulumi.Input[str]] = None,
             memory_size: Optional[pulumi.Input[str]] = None,
             network_data: Optional[pulumi.Input[str]] = None,
             network_info: Optional[pulumi.Input[str]] = None,
             network_model: Optional[pulumi.Input[str]] = None,
             network_name: Optional[pulumi.Input[str]] = None,
             ssh_password: Optional[pulumi.Input[str]] = None,
             user_data: Optional[pulumi.Input[str]] = None,
             vm_affinity: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'vmNamespace' in kwargs:
            vm_namespace = kwargs['vmNamespace']
        if 'cpuCount' in kwargs:
            cpu_count = kwargs['cpuCount']
        if 'diskBus' in kwargs:
            disk_bus = kwargs['diskBus']
        if 'diskInfo' in kwargs:
            disk_info = kwargs['diskInfo']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'imageName' in kwargs:
            image_name = kwargs['imageName']
        if 'memorySize' in kwargs:
            memory_size = kwargs['memorySize']
        if 'networkData' in kwargs:
            network_data = kwargs['networkData']
        if 'networkInfo' in kwargs:
            network_info = kwargs['networkInfo']
        if 'networkModel' in kwargs:
            network_model = kwargs['networkModel']
        if 'networkName' in kwargs:
            network_name = kwargs['networkName']
        if 'sshPassword' in kwargs:
            ssh_password = kwargs['sshPassword']
        if 'userData' in kwargs:
            user_data = kwargs['userData']
        if 'vmAffinity' in kwargs:
            vm_affinity = kwargs['vmAffinity']

        _setter("ssh_user", ssh_user)
        _setter("vm_namespace", vm_namespace)
        if cpu_count is not None:
            _setter("cpu_count", cpu_count)
        if disk_bus is not None:
            warnings.warn("""Use disk_info instead""", DeprecationWarning)
            pulumi.log.warn("""disk_bus is deprecated: Use disk_info instead""")
        if disk_bus is not None:
            _setter("disk_bus", disk_bus)
        if disk_info is not None:
            _setter("disk_info", disk_info)
        if disk_size is not None:
            warnings.warn("""Use disk_info instead""", DeprecationWarning)
            pulumi.log.warn("""disk_size is deprecated: Use disk_info instead""")
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if image_name is not None:
            warnings.warn("""Use disk_info instead""", DeprecationWarning)
            pulumi.log.warn("""image_name is deprecated: Use disk_info instead""")
        if image_name is not None:
            _setter("image_name", image_name)
        if memory_size is not None:
            _setter("memory_size", memory_size)
        if network_data is not None:
            _setter("network_data", network_data)
        if network_info is not None:
            _setter("network_info", network_info)
        if network_model is not None:
            warnings.warn("""Use network_info instead""", DeprecationWarning)
            pulumi.log.warn("""network_model is deprecated: Use network_info instead""")
        if network_model is not None:
            _setter("network_model", network_model)
        if network_name is not None:
            warnings.warn("""Use network_info instead""", DeprecationWarning)
            pulumi.log.warn("""network_name is deprecated: Use network_info instead""")
        if network_name is not None:
            _setter("network_name", network_name)
        if ssh_password is not None:
            _setter("ssh_password", ssh_password)
        if user_data is not None:
            _setter("user_data", user_data)
        if vm_affinity is not None:
            _setter("vm_affinity", vm_affinity)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> pulumi.Input[str]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="vmNamespace")
    def vm_namespace(self) -> pulumi.Input[str]:
        """
        Virtual machine namespace e.g. `default` (string)
        """
        return pulumi.get(self, "vm_namespace")

    @vm_namespace.setter
    def vm_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_namespace", value)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere CPU number for docker VM. Default `2` (string)
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="diskBus")
    def disk_bus(self) -> Optional[pulumi.Input[str]]:
        """
        Use `disk_info` instead
        """
        warnings.warn("""Use disk_info instead""", DeprecationWarning)
        pulumi.log.warn("""disk_bus is deprecated: Use disk_info instead""")

        return pulumi.get(self, "disk_bus")

    @disk_bus.setter
    def disk_bus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_bus", value)

    @property
    @pulumi.getter(name="diskInfo")
    def disk_info(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string specifying info for the disks e.g. `{\\"disks\\":[{\\"imageName\\":\\"harvester-public/image-57hzg\\",\\"bootOrder\\":1,\\"size\\":40},{\\"storageClassName\\":\\"node-driver-test\\",\\"bootOrder\\":2,\\"size\\":1}]}` (string)
        """
        return pulumi.get(self, "disk_info")

    @disk_info.setter
    def disk_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_info", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of disk for docker VM (in MB). Default `20480` (string)
        """
        warnings.warn("""Use disk_info instead""", DeprecationWarning)
        pulumi.log.warn("""disk_size is deprecated: Use disk_info instead""")

        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        """
        warnings.warn("""Use disk_info instead""", DeprecationWarning)
        pulumi.log.warn("""image_name is deprecated: Use disk_info instead""")

        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of memory for docker VM (in MB). Default `2048` (string)
        """
        return pulumi.get(self, "memory_size")

    @memory_size.setter
    def memory_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_size", value)

    @property
    @pulumi.getter(name="networkData")
    def network_data(self) -> Optional[pulumi.Input[str]]:
        """
        NetworkData content of cloud-init, base64 is supported (string)
        """
        return pulumi.get(self, "network_data")

    @network_data.setter
    def network_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_data", value)

    @property
    @pulumi.getter(name="networkInfo")
    def network_info(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string specifying info for the networks e.g. `{\\"interfaces\\":[{\\"networkName\\":\\"harvester-public/vlan1\\"},{\\"networkName\\":\\"harvester-public/vlan2\\"}]}` (string)
        """
        return pulumi.get(self, "network_info")

    @network_info.setter
    def network_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_info", value)

    @property
    @pulumi.getter(name="networkModel")
    def network_model(self) -> Optional[pulumi.Input[str]]:
        """
        Use `network_info` instead
        """
        warnings.warn("""Use network_info instead""", DeprecationWarning)
        pulumi.log.warn("""network_model is deprecated: Use network_info instead""")

        return pulumi.get(self, "network_model")

    @network_model.setter
    def network_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_model", value)

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> Optional[pulumi.Input[str]]:
        """
        Opennebula network to connect the machine to. Conflicts with `network_id` (string)
        """
        warnings.warn("""Use network_info instead""", DeprecationWarning)
        pulumi.log.warn("""network_name is deprecated: Use network_info instead""")

        return pulumi.get(self, "network_name")

    @network_name.setter
    def network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_name", value)

    @property
    @pulumi.getter(name="sshPassword")
    def ssh_password(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh password. Default `tcuser`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_password")

    @ssh_password.setter
    def ssh_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_password", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        UserData content of cloud-init, base64 is supported. If the image does not contain the qemu-guest-agent package, you must install and start qemu-guest-agent using userdata (string)
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="vmAffinity")
    def vm_affinity(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual machine affinity, only base64 format is supported. For Rancher v2.6.7 and above (string)
        """
        return pulumi.get(self, "vm_affinity")

    @vm_affinity.setter
    def vm_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_affinity", value)


@pulumi.input_type
class NodeTemplateHetznerConfigArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 image: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[str]] = None,
                 server_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 server_location: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None,
                 use_private_network: Optional[pulumi.Input[bool]] = None,
                 userdata: Optional[pulumi.Input[str]] = None,
                 volumes: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_token: Hetzner Cloud project API token (string)
        :param pulumi.Input[str] image: Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        :param pulumi.Input[str] networks: Comma-separated list of network IDs or names which should be attached to the server private network interface (string)
        :param pulumi.Input[Mapping[str, Any]] server_labels: Map of the labels which will be assigned to the server. This argument is only available on [Hetzner Docker Node Driver:v3.6.0](https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/tag/3.6.0) and above (map)
        :param pulumi.Input[str] server_location: Hetzner Cloud datacenter. Default `nbg1` (string)
        :param pulumi.Input[str] server_type: Hetzner Cloud server type. Default `cx11` (string)
        :param pulumi.Input[bool] use_private_network: Use private network. Default `false` (bool)
        :param pulumi.Input[str] userdata: Path to file with cloud-init user-data (string)
               
               > **Note:**: You need to install the Hetzner Docker Machine Driver first as shown as in the examples section.
        :param pulumi.Input[str] volumes: Comma-separated list of volume IDs or names which should be attached to the server (string)
        """
        NodeTemplateHetznerConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_token=api_token,
            image=image,
            networks=networks,
            server_labels=server_labels,
            server_location=server_location,
            server_type=server_type,
            use_private_network=use_private_network,
            userdata=userdata,
            volumes=volumes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_token: pulumi.Input[str],
             image: Optional[pulumi.Input[str]] = None,
             networks: Optional[pulumi.Input[str]] = None,
             server_labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             server_location: Optional[pulumi.Input[str]] = None,
             server_type: Optional[pulumi.Input[str]] = None,
             use_private_network: Optional[pulumi.Input[bool]] = None,
             userdata: Optional[pulumi.Input[str]] = None,
             volumes: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiToken' in kwargs:
            api_token = kwargs['apiToken']
        if 'serverLabels' in kwargs:
            server_labels = kwargs['serverLabels']
        if 'serverLocation' in kwargs:
            server_location = kwargs['serverLocation']
        if 'serverType' in kwargs:
            server_type = kwargs['serverType']
        if 'usePrivateNetwork' in kwargs:
            use_private_network = kwargs['usePrivateNetwork']

        _setter("api_token", api_token)
        if image is not None:
            _setter("image", image)
        if networks is not None:
            _setter("networks", networks)
        if server_labels is not None:
            _setter("server_labels", server_labels)
        if server_location is not None:
            _setter("server_location", server_location)
        if server_type is not None:
            _setter("server_type", server_type)
        if use_private_network is not None:
            _setter("use_private_network", use_private_network)
        if userdata is not None:
            _setter("userdata", userdata)
        if volumes is not None:
            _setter("volumes", volumes)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        """
        Hetzner Cloud project API token (string)
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[str]]:
        """
        Comma-separated list of network IDs or names which should be attached to the server private network interface (string)
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter(name="serverLabels")
    def server_labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Map of the labels which will be assigned to the server. This argument is only available on [Hetzner Docker Node Driver:v3.6.0](https://github.com/JonasProgrammer/docker-machine-driver-hetzner/releases/tag/3.6.0) and above (map)
        """
        return pulumi.get(self, "server_labels")

    @server_labels.setter
    def server_labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "server_labels", value)

    @property
    @pulumi.getter(name="serverLocation")
    def server_location(self) -> Optional[pulumi.Input[str]]:
        """
        Hetzner Cloud datacenter. Default `nbg1` (string)
        """
        return pulumi.get(self, "server_location")

    @server_location.setter
    def server_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_location", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Hetzner Cloud server type. Default `cx11` (string)
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter(name="usePrivateNetwork")
    def use_private_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Use private network. Default `false` (bool)
        """
        return pulumi.get(self, "use_private_network")

    @use_private_network.setter
    def use_private_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_private_network", value)

    @property
    @pulumi.getter
    def userdata(self) -> Optional[pulumi.Input[str]]:
        """
        Path to file with cloud-init user-data (string)

        > **Note:**: You need to install the Hetzner Docker Machine Driver first as shown as in the examples section.
        """
        return pulumi.get(self, "userdata")

    @userdata.setter
    def userdata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userdata", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[str]]:
        """
        Comma-separated list of volume IDs or names which should be attached to the server (string)
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class NodeTemplateLinodeConfigArgs:
    def __init__(__self__, *,
                 authorized_users: Optional[pulumi.Input[str]] = None,
                 create_private_ip: Optional[pulumi.Input[bool]] = None,
                 docker_port: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 root_pass: Optional[pulumi.Input[str]] = None,
                 ssh_port: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 stackscript: Optional[pulumi.Input[str]] = None,
                 stackscript_data: Optional[pulumi.Input[str]] = None,
                 swap_size: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 ua_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authorized_users: Linode user accounts (seperated by commas) whose Linode SSH keys will be permitted root access to the created node. (string)
        :param pulumi.Input[bool] create_private_ip: Create private IP for the instance. Default `false` (bool)
        :param pulumi.Input[str] docker_port: Docker Port. Default `2376` (string)
        :param pulumi.Input[str] image: Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        :param pulumi.Input[str] instance_type: Outscale VM type. Default `tinav2.c1r2p3` (string)
        :param pulumi.Input[str] label: Linode Instance Label. (string)
        :param pulumi.Input[str] region: AWS region. Default `eu-west-2` (string)
        :param pulumi.Input[str] root_pass: Root Password (string)
        :param pulumi.Input[str] ssh_port: If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] stackscript: Specifies the Linode StackScript to use to create the instance. (string)
        :param pulumi.Input[str] stackscript_data: A JSON string specifying data for the selected StackScript. (string)
        :param pulumi.Input[str] swap_size: Linode Instance Swap Size (MB). Default `512` (string)
        :param pulumi.Input[str] tags: vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        :param pulumi.Input[str] token: Linode API token. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] ua_prefix: Prefix the User-Agent in Linode API calls with some 'product/version' (string)
        """
        NodeTemplateLinodeConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorized_users=authorized_users,
            create_private_ip=create_private_ip,
            docker_port=docker_port,
            image=image,
            instance_type=instance_type,
            label=label,
            region=region,
            root_pass=root_pass,
            ssh_port=ssh_port,
            ssh_user=ssh_user,
            stackscript=stackscript,
            stackscript_data=stackscript_data,
            swap_size=swap_size,
            tags=tags,
            token=token,
            ua_prefix=ua_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorized_users: Optional[pulumi.Input[str]] = None,
             create_private_ip: Optional[pulumi.Input[bool]] = None,
             docker_port: Optional[pulumi.Input[str]] = None,
             image: Optional[pulumi.Input[str]] = None,
             instance_type: Optional[pulumi.Input[str]] = None,
             label: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             root_pass: Optional[pulumi.Input[str]] = None,
             ssh_port: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             stackscript: Optional[pulumi.Input[str]] = None,
             stackscript_data: Optional[pulumi.Input[str]] = None,
             swap_size: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[str]] = None,
             token: Optional[pulumi.Input[str]] = None,
             ua_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authorizedUsers' in kwargs:
            authorized_users = kwargs['authorizedUsers']
        if 'createPrivateIp' in kwargs:
            create_private_ip = kwargs['createPrivateIp']
        if 'dockerPort' in kwargs:
            docker_port = kwargs['dockerPort']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'rootPass' in kwargs:
            root_pass = kwargs['rootPass']
        if 'sshPort' in kwargs:
            ssh_port = kwargs['sshPort']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'stackscriptData' in kwargs:
            stackscript_data = kwargs['stackscriptData']
        if 'swapSize' in kwargs:
            swap_size = kwargs['swapSize']
        if 'uaPrefix' in kwargs:
            ua_prefix = kwargs['uaPrefix']

        if authorized_users is not None:
            _setter("authorized_users", authorized_users)
        if create_private_ip is not None:
            _setter("create_private_ip", create_private_ip)
        if docker_port is not None:
            _setter("docker_port", docker_port)
        if image is not None:
            _setter("image", image)
        if instance_type is not None:
            _setter("instance_type", instance_type)
        if label is not None:
            _setter("label", label)
        if region is not None:
            _setter("region", region)
        if root_pass is not None:
            _setter("root_pass", root_pass)
        if ssh_port is not None:
            _setter("ssh_port", ssh_port)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if stackscript is not None:
            _setter("stackscript", stackscript)
        if stackscript_data is not None:
            _setter("stackscript_data", stackscript_data)
        if swap_size is not None:
            _setter("swap_size", swap_size)
        if tags is not None:
            _setter("tags", tags)
        if token is not None:
            _setter("token", token)
        if ua_prefix is not None:
            _setter("ua_prefix", ua_prefix)

    @property
    @pulumi.getter(name="authorizedUsers")
    def authorized_users(self) -> Optional[pulumi.Input[str]]:
        """
        Linode user accounts (seperated by commas) whose Linode SSH keys will be permitted root access to the created node. (string)
        """
        return pulumi.get(self, "authorized_users")

    @authorized_users.setter
    def authorized_users(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorized_users", value)

    @property
    @pulumi.getter(name="createPrivateIp")
    def create_private_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Create private IP for the instance. Default `false` (bool)
        """
        return pulumi.get(self, "create_private_ip")

    @create_private_ip.setter
    def create_private_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_private_ip", value)

    @property
    @pulumi.getter(name="dockerPort")
    def docker_port(self) -> Optional[pulumi.Input[str]]:
        """
        Docker Port. Default `2376` (string)
        """
        return pulumi.get(self, "docker_port")

    @docker_port.setter
    def docker_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_port", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode Instance image which determines the OS distribution and base files. Default `linode/ubuntu18.04` (string)
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Outscale VM type. Default `tinav2.c1r2p3` (string)
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        Linode Instance Label. (string)
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS region. Default `eu-west-2` (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rootPass")
    def root_pass(self) -> Optional[pulumi.Input[str]]:
        """
        Root Password (string)
        """
        return pulumi.get(self, "root_pass")

    @root_pass.setter
    def root_pass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_pass", value)

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_port")

    @ssh_port.setter
    def ssh_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_port", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter
    def stackscript(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Linode StackScript to use to create the instance. (string)
        """
        return pulumi.get(self, "stackscript")

    @stackscript.setter
    def stackscript(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stackscript", value)

    @property
    @pulumi.getter(name="stackscriptData")
    def stackscript_data(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string specifying data for the selected StackScript. (string)
        """
        return pulumi.get(self, "stackscript_data")

    @stackscript_data.setter
    def stackscript_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stackscript_data", value)

    @property
    @pulumi.getter(name="swapSize")
    def swap_size(self) -> Optional[pulumi.Input[str]]:
        """
        Linode Instance Swap Size (MB). Default `512` (string)
        """
        return pulumi.get(self, "swap_size")

    @swap_size.setter
    def swap_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "swap_size", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Linode API token. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="uaPrefix")
    def ua_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix the User-Agent in Linode API calls with some 'product/version' (string)
        """
        return pulumi.get(self, "ua_prefix")

    @ua_prefix.setter
    def ua_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ua_prefix", value)


@pulumi.input_type
class NodeTemplateNodeTaintArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 effect: Optional[pulumi.Input[str]] = None,
                 time_added: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Taint key (string)
        :param pulumi.Input[str] value: Taint value (string)
        :param pulumi.Input[str] effect: Taint effect. Supported values : `"NoExecute" | "NoSchedule" | "PreferNoSchedule"` (string)
        :param pulumi.Input[str] time_added: Taint time added (string)
        """
        NodeTemplateNodeTaintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
            effect=effect,
            time_added=time_added,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             effect: Optional[pulumi.Input[str]] = None,
             time_added: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'timeAdded' in kwargs:
            time_added = kwargs['timeAdded']

        _setter("key", key)
        _setter("value", value)
        if effect is not None:
            _setter("effect", effect)
        if time_added is not None:
            _setter("time_added", time_added)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Taint key (string)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Taint value (string)
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Taint effect. Supported values : `"NoExecute" | "NoSchedule" | "PreferNoSchedule"` (string)
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> Optional[pulumi.Input[str]]:
        """
        Taint time added (string)
        """
        return pulumi.get(self, "time_added")

    @time_added.setter
    def time_added(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_added", value)


@pulumi.input_type
class NodeTemplateOpennebulaConfigArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 user: pulumi.Input[str],
                 xml_rpc_url: pulumi.Input[str],
                 b2d_size: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[str]] = None,
                 dev_prefix: Optional[pulumi.Input[str]] = None,
                 disable_vnc: Optional[pulumi.Input[bool]] = None,
                 disk_resize: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_owner: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 network_name: Optional[pulumi.Input[str]] = None,
                 network_owner: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vcpu: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] user: Set the user for the XML-RPC API authentication (string)
        :param pulumi.Input[str] xml_rpc_url: Set the url for the Opennebula XML-RPC API (string)
        :param pulumi.Input[str] b2d_size: Size of the Volatile disk in MB - only for b2d (string)
        :param pulumi.Input[str] cpu: CPU value for the VM (string)
        :param pulumi.Input[str] dev_prefix: Dev prefix to use for the images. E.g.: 'vd', 'sd', 'hd' (string)
        :param pulumi.Input[bool] disable_vnc: VNC is enabled by default. Disable it with this flag (bool)
        :param pulumi.Input[str] disk_resize: Size of the disk for the VM in MB (string)
        :param pulumi.Input[str] image_id: OpenStack image id to use for the instance. Conflicts with `image_name` (string)
        :param pulumi.Input[str] image_name: OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        :param pulumi.Input[str] image_owner: Owner of the image to use as the VM OS (string)
        :param pulumi.Input[str] memory: Size of the memory for the VM in MB (string)
        :param pulumi.Input[str] network_id: Opennebula network ID to connect the machine to. Conflicts with `network_name` (string)
        :param pulumi.Input[str] network_name: Opennebula network to connect the machine to. Conflicts with `network_id` (string)
        :param pulumi.Input[str] network_owner: Opennebula user ID of the Network to connect the machine to (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] template_id: Opennebula template ID to use. Conflicts with `template_name` (string)
        :param pulumi.Input[str] template_name: Name of the Opennbula template to use. Conflicts with `template_id` (string)
        :param pulumi.Input[str] vcpu: VCPUs for the VM (string)
               
               > **Note:**: `Required*` denotes that one of image_name / image_id or template_name / template_id is required but you cannot combine them.
        """
        NodeTemplateOpennebulaConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            user=user,
            xml_rpc_url=xml_rpc_url,
            b2d_size=b2d_size,
            cpu=cpu,
            dev_prefix=dev_prefix,
            disable_vnc=disable_vnc,
            disk_resize=disk_resize,
            image_id=image_id,
            image_name=image_name,
            image_owner=image_owner,
            memory=memory,
            network_id=network_id,
            network_name=network_name,
            network_owner=network_owner,
            ssh_user=ssh_user,
            template_id=template_id,
            template_name=template_name,
            vcpu=vcpu,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: pulumi.Input[str],
             user: pulumi.Input[str],
             xml_rpc_url: pulumi.Input[str],
             b2d_size: Optional[pulumi.Input[str]] = None,
             cpu: Optional[pulumi.Input[str]] = None,
             dev_prefix: Optional[pulumi.Input[str]] = None,
             disable_vnc: Optional[pulumi.Input[bool]] = None,
             disk_resize: Optional[pulumi.Input[str]] = None,
             image_id: Optional[pulumi.Input[str]] = None,
             image_name: Optional[pulumi.Input[str]] = None,
             image_owner: Optional[pulumi.Input[str]] = None,
             memory: Optional[pulumi.Input[str]] = None,
             network_id: Optional[pulumi.Input[str]] = None,
             network_name: Optional[pulumi.Input[str]] = None,
             network_owner: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             template_id: Optional[pulumi.Input[str]] = None,
             template_name: Optional[pulumi.Input[str]] = None,
             vcpu: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'xmlRpcUrl' in kwargs:
            xml_rpc_url = kwargs['xmlRpcUrl']
        if 'b2dSize' in kwargs:
            b2d_size = kwargs['b2dSize']
        if 'devPrefix' in kwargs:
            dev_prefix = kwargs['devPrefix']
        if 'disableVnc' in kwargs:
            disable_vnc = kwargs['disableVnc']
        if 'diskResize' in kwargs:
            disk_resize = kwargs['diskResize']
        if 'imageId' in kwargs:
            image_id = kwargs['imageId']
        if 'imageName' in kwargs:
            image_name = kwargs['imageName']
        if 'imageOwner' in kwargs:
            image_owner = kwargs['imageOwner']
        if 'networkId' in kwargs:
            network_id = kwargs['networkId']
        if 'networkName' in kwargs:
            network_name = kwargs['networkName']
        if 'networkOwner' in kwargs:
            network_owner = kwargs['networkOwner']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'templateId' in kwargs:
            template_id = kwargs['templateId']
        if 'templateName' in kwargs:
            template_name = kwargs['templateName']

        _setter("password", password)
        _setter("user", user)
        _setter("xml_rpc_url", xml_rpc_url)
        if b2d_size is not None:
            _setter("b2d_size", b2d_size)
        if cpu is not None:
            _setter("cpu", cpu)
        if dev_prefix is not None:
            _setter("dev_prefix", dev_prefix)
        if disable_vnc is not None:
            _setter("disable_vnc", disable_vnc)
        if disk_resize is not None:
            _setter("disk_resize", disk_resize)
        if image_id is not None:
            _setter("image_id", image_id)
        if image_name is not None:
            _setter("image_name", image_name)
        if image_owner is not None:
            _setter("image_owner", image_owner)
        if memory is not None:
            _setter("memory", memory)
        if network_id is not None:
            _setter("network_id", network_id)
        if network_name is not None:
            _setter("network_name", network_name)
        if network_owner is not None:
            _setter("network_owner", network_owner)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if template_id is not None:
            _setter("template_id", template_id)
        if template_name is not None:
            _setter("template_name", template_name)
        if vcpu is not None:
            _setter("vcpu", vcpu)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        Set the user for the XML-RPC API authentication (string)
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="xmlRpcUrl")
    def xml_rpc_url(self) -> pulumi.Input[str]:
        """
        Set the url for the Opennebula XML-RPC API (string)
        """
        return pulumi.get(self, "xml_rpc_url")

    @xml_rpc_url.setter
    def xml_rpc_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "xml_rpc_url", value)

    @property
    @pulumi.getter(name="b2dSize")
    def b2d_size(self) -> Optional[pulumi.Input[str]]:
        """
        Size of the Volatile disk in MB - only for b2d (string)
        """
        return pulumi.get(self, "b2d_size")

    @b2d_size.setter
    def b2d_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "b2d_size", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        """
        CPU value for the VM (string)
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="devPrefix")
    def dev_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Dev prefix to use for the images. E.g.: 'vd', 'sd', 'hd' (string)
        """
        return pulumi.get(self, "dev_prefix")

    @dev_prefix.setter
    def dev_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dev_prefix", value)

    @property
    @pulumi.getter(name="disableVnc")
    def disable_vnc(self) -> Optional[pulumi.Input[bool]]:
        """
        VNC is enabled by default. Disable it with this flag (bool)
        """
        return pulumi.get(self, "disable_vnc")

    @disable_vnc.setter
    def disable_vnc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_vnc", value)

    @property
    @pulumi.getter(name="diskResize")
    def disk_resize(self) -> Optional[pulumi.Input[str]]:
        """
        Size of the disk for the VM in MB (string)
        """
        return pulumi.get(self, "disk_resize")

    @disk_resize.setter
    def disk_resize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_resize", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack image id to use for the instance. Conflicts with `image_name` (string)
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageOwner")
    def image_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Owner of the image to use as the VM OS (string)
        """
        return pulumi.get(self, "image_owner")

    @image_owner.setter
    def image_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_owner", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        """
        Size of the memory for the VM in MB (string)
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Opennebula network ID to connect the machine to. Conflicts with `network_name` (string)
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="networkName")
    def network_name(self) -> Optional[pulumi.Input[str]]:
        """
        Opennebula network to connect the machine to. Conflicts with `network_id` (string)
        """
        return pulumi.get(self, "network_name")

    @network_name.setter
    def network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_name", value)

    @property
    @pulumi.getter(name="networkOwner")
    def network_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Opennebula user ID of the Network to connect the machine to (string)
        """
        return pulumi.get(self, "network_owner")

    @network_owner.setter
    def network_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_owner", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Opennebula template ID to use. Conflicts with `template_name` (string)
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Opennbula template to use. Conflicts with `template_id` (string)
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter
    def vcpu(self) -> Optional[pulumi.Input[str]]:
        """
        VCPUs for the VM (string)

        > **Note:**: `Required*` denotes that one of image_name / image_id or template_name / template_id is required but you cannot combine them.
        """
        return pulumi.get(self, "vcpu")

    @vcpu.setter
    def vcpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcpu", value)


@pulumi.input_type
class NodeTemplateOpenstackConfigArgs:
    def __init__(__self__, *,
                 auth_url: pulumi.Input[str],
                 availability_zone: pulumi.Input[str],
                 region: pulumi.Input[str],
                 active_timeout: Optional[pulumi.Input[str]] = None,
                 application_credential_id: Optional[pulumi.Input[str]] = None,
                 application_credential_name: Optional[pulumi.Input[str]] = None,
                 application_credential_secret: Optional[pulumi.Input[str]] = None,
                 boot_from_volume: Optional[pulumi.Input[bool]] = None,
                 cacert: Optional[pulumi.Input[str]] = None,
                 config_drive: Optional[pulumi.Input[bool]] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 endpoint_type: Optional[pulumi.Input[str]] = None,
                 flavor_id: Optional[pulumi.Input[str]] = None,
                 flavor_name: Optional[pulumi.Input[str]] = None,
                 floating_ip_pool: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 keypair_name: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 net_name: Optional[pulumi.Input[str]] = None,
                 nova_network: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key_file: Optional[pulumi.Input[str]] = None,
                 sec_groups: Optional[pulumi.Input[str]] = None,
                 ssh_port: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 user_data_file: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 volume_device_path: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 volume_name: Optional[pulumi.Input[str]] = None,
                 volume_size: Optional[pulumi.Input[str]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_url: OpenStack authentication URL (string)
        :param pulumi.Input[str] availability_zone: OpenStack availability zone (string)
        :param pulumi.Input[str] region: AWS region. Default `eu-west-2` (string)
        :param pulumi.Input[str] active_timeout: OpenStack active timeout Default `200` (string)
        :param pulumi.Input[str] application_credential_id: OpenStack application credential id. Conflicts with `application_credential_name` (string)
        :param pulumi.Input[str] application_credential_name: OpenStack application credential name. Conflicts with `application_credential_id` (string)
        :param pulumi.Input[str] application_credential_secret: OpenStack application credential secret (string)
        :param pulumi.Input[bool] boot_from_volume: Enable booting from volume. Default is `false` (bool)
        :param pulumi.Input[str] cacert: CA certificate bundle to verify against (string)
        :param pulumi.Input[bool] config_drive: Enables the OpenStack config drive for the instance. Default `false` (bool)
        :param pulumi.Input[str] domain_id: OpenStack domain ID. Identity v3 only. Conflicts with `domain_name` (string)
        :param pulumi.Input[str] domain_name: OpenStack domain name. Identity v3 only. Conflicts with `domain_id` (string)
        :param pulumi.Input[str] endpoint_type: OpenStack endpoint type. adminURL, internalURL or publicURL (string)
        :param pulumi.Input[str] flavor_id: OpenStack flavor id to use for the instance. Conflicts with `flavor_name` (string)
        :param pulumi.Input[str] flavor_name: OpenStack flavor name to use for the instance. Conflicts with `flavor_id` (string)
        :param pulumi.Input[str] floating_ip_pool: OpenStack floating IP pool to get an IP from to assign to the instance (string)
        :param pulumi.Input[str] image_id: OpenStack image id to use for the instance. Conflicts with `image_name` (string)
        :param pulumi.Input[str] image_name: OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        :param pulumi.Input[bool] insecure: Disable TLS credential checking. Default `false` (bool)
        :param pulumi.Input[str] ip_version: OpenStack version of IP address assigned for the machine Default `4` (string)
        :param pulumi.Input[str] keypair_name: OpenStack keypair to use to SSH to the instance (string)
        :param pulumi.Input[str] net_id: OpenStack network id the machine will be connected on. Conflicts with `net_name` (string)
        :param pulumi.Input[str] net_name: OpenStack network name the machine will be connected on. Conflicts with `net_id` (string)
        :param pulumi.Input[bool] nova_network: Use the nova networking services instead of neutron (string)
        :param pulumi.Input[str] password: vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] private_key_file: Private key content to use for SSH (string)
        :param pulumi.Input[str] sec_groups: OpenStack comma separated security groups for the machine (string)
        :param pulumi.Input[str] ssh_port: If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] tenant_id: OpenStack tenant id. Conflicts with `tenant_name` (string)
        :param pulumi.Input[str] tenant_name: OpenStack tenant name. Conflicts with `tenant_id` (string)
        :param pulumi.Input[str] user_data_file: File containing an openstack userdata script (string)
        :param pulumi.Input[str] username: vSphere username. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] volume_device_path: OpenStack volume device path (attaching). Applicable only when `boot_from_volume` is `true`. Omit for auto `/dev/vdb`. (string)
               
               > **Note:**: `Required*` denotes that either the _name or _id is required but you cannot use both.
               
               > **Note:**: `Required**` denotes that either the _name or _id is required unless `application_credential_id` is defined.
               
               > **Note for OpenStack users:**: `keypair_name` is required to be in the schema even if there are no references in rancher itself
        :param pulumi.Input[str] volume_id: OpenStack volume id of existing volume. Applicable only when `boot_from_volume` is `true` (string)
        :param pulumi.Input[str] volume_name: OpenStack volume name of existing volume. Applicable only when `boot_from_volume` is `true` (string)
        :param pulumi.Input[str] volume_size: OpenStack volume size (GiB). Required when `boot_from_volume` is `true` (string)
        :param pulumi.Input[str] volume_type: OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
        """
        NodeTemplateOpenstackConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_url=auth_url,
            availability_zone=availability_zone,
            region=region,
            active_timeout=active_timeout,
            application_credential_id=application_credential_id,
            application_credential_name=application_credential_name,
            application_credential_secret=application_credential_secret,
            boot_from_volume=boot_from_volume,
            cacert=cacert,
            config_drive=config_drive,
            domain_id=domain_id,
            domain_name=domain_name,
            endpoint_type=endpoint_type,
            flavor_id=flavor_id,
            flavor_name=flavor_name,
            floating_ip_pool=floating_ip_pool,
            image_id=image_id,
            image_name=image_name,
            insecure=insecure,
            ip_version=ip_version,
            keypair_name=keypair_name,
            net_id=net_id,
            net_name=net_name,
            nova_network=nova_network,
            password=password,
            private_key_file=private_key_file,
            sec_groups=sec_groups,
            ssh_port=ssh_port,
            ssh_user=ssh_user,
            tenant_id=tenant_id,
            tenant_name=tenant_name,
            user_data_file=user_data_file,
            username=username,
            volume_device_path=volume_device_path,
            volume_id=volume_id,
            volume_name=volume_name,
            volume_size=volume_size,
            volume_type=volume_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_url: pulumi.Input[str],
             availability_zone: pulumi.Input[str],
             region: pulumi.Input[str],
             active_timeout: Optional[pulumi.Input[str]] = None,
             application_credential_id: Optional[pulumi.Input[str]] = None,
             application_credential_name: Optional[pulumi.Input[str]] = None,
             application_credential_secret: Optional[pulumi.Input[str]] = None,
             boot_from_volume: Optional[pulumi.Input[bool]] = None,
             cacert: Optional[pulumi.Input[str]] = None,
             config_drive: Optional[pulumi.Input[bool]] = None,
             domain_id: Optional[pulumi.Input[str]] = None,
             domain_name: Optional[pulumi.Input[str]] = None,
             endpoint_type: Optional[pulumi.Input[str]] = None,
             flavor_id: Optional[pulumi.Input[str]] = None,
             flavor_name: Optional[pulumi.Input[str]] = None,
             floating_ip_pool: Optional[pulumi.Input[str]] = None,
             image_id: Optional[pulumi.Input[str]] = None,
             image_name: Optional[pulumi.Input[str]] = None,
             insecure: Optional[pulumi.Input[bool]] = None,
             ip_version: Optional[pulumi.Input[str]] = None,
             keypair_name: Optional[pulumi.Input[str]] = None,
             net_id: Optional[pulumi.Input[str]] = None,
             net_name: Optional[pulumi.Input[str]] = None,
             nova_network: Optional[pulumi.Input[bool]] = None,
             password: Optional[pulumi.Input[str]] = None,
             private_key_file: Optional[pulumi.Input[str]] = None,
             sec_groups: Optional[pulumi.Input[str]] = None,
             ssh_port: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             tenant_id: Optional[pulumi.Input[str]] = None,
             tenant_name: Optional[pulumi.Input[str]] = None,
             user_data_file: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             volume_device_path: Optional[pulumi.Input[str]] = None,
             volume_id: Optional[pulumi.Input[str]] = None,
             volume_name: Optional[pulumi.Input[str]] = None,
             volume_size: Optional[pulumi.Input[str]] = None,
             volume_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authUrl' in kwargs:
            auth_url = kwargs['authUrl']
        if 'availabilityZone' in kwargs:
            availability_zone = kwargs['availabilityZone']
        if 'activeTimeout' in kwargs:
            active_timeout = kwargs['activeTimeout']
        if 'applicationCredentialId' in kwargs:
            application_credential_id = kwargs['applicationCredentialId']
        if 'applicationCredentialName' in kwargs:
            application_credential_name = kwargs['applicationCredentialName']
        if 'applicationCredentialSecret' in kwargs:
            application_credential_secret = kwargs['applicationCredentialSecret']
        if 'bootFromVolume' in kwargs:
            boot_from_volume = kwargs['bootFromVolume']
        if 'configDrive' in kwargs:
            config_drive = kwargs['configDrive']
        if 'domainId' in kwargs:
            domain_id = kwargs['domainId']
        if 'domainName' in kwargs:
            domain_name = kwargs['domainName']
        if 'endpointType' in kwargs:
            endpoint_type = kwargs['endpointType']
        if 'flavorId' in kwargs:
            flavor_id = kwargs['flavorId']
        if 'flavorName' in kwargs:
            flavor_name = kwargs['flavorName']
        if 'floatingIpPool' in kwargs:
            floating_ip_pool = kwargs['floatingIpPool']
        if 'imageId' in kwargs:
            image_id = kwargs['imageId']
        if 'imageName' in kwargs:
            image_name = kwargs['imageName']
        if 'ipVersion' in kwargs:
            ip_version = kwargs['ipVersion']
        if 'keypairName' in kwargs:
            keypair_name = kwargs['keypairName']
        if 'netId' in kwargs:
            net_id = kwargs['netId']
        if 'netName' in kwargs:
            net_name = kwargs['netName']
        if 'novaNetwork' in kwargs:
            nova_network = kwargs['novaNetwork']
        if 'privateKeyFile' in kwargs:
            private_key_file = kwargs['privateKeyFile']
        if 'secGroups' in kwargs:
            sec_groups = kwargs['secGroups']
        if 'sshPort' in kwargs:
            ssh_port = kwargs['sshPort']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'tenantId' in kwargs:
            tenant_id = kwargs['tenantId']
        if 'tenantName' in kwargs:
            tenant_name = kwargs['tenantName']
        if 'userDataFile' in kwargs:
            user_data_file = kwargs['userDataFile']
        if 'volumeDevicePath' in kwargs:
            volume_device_path = kwargs['volumeDevicePath']
        if 'volumeId' in kwargs:
            volume_id = kwargs['volumeId']
        if 'volumeName' in kwargs:
            volume_name = kwargs['volumeName']
        if 'volumeSize' in kwargs:
            volume_size = kwargs['volumeSize']
        if 'volumeType' in kwargs:
            volume_type = kwargs['volumeType']

        _setter("auth_url", auth_url)
        _setter("availability_zone", availability_zone)
        _setter("region", region)
        if active_timeout is not None:
            _setter("active_timeout", active_timeout)
        if application_credential_id is not None:
            _setter("application_credential_id", application_credential_id)
        if application_credential_name is not None:
            _setter("application_credential_name", application_credential_name)
        if application_credential_secret is not None:
            _setter("application_credential_secret", application_credential_secret)
        if boot_from_volume is not None:
            _setter("boot_from_volume", boot_from_volume)
        if cacert is not None:
            _setter("cacert", cacert)
        if config_drive is not None:
            _setter("config_drive", config_drive)
        if domain_id is not None:
            _setter("domain_id", domain_id)
        if domain_name is not None:
            _setter("domain_name", domain_name)
        if endpoint_type is not None:
            _setter("endpoint_type", endpoint_type)
        if flavor_id is not None:
            _setter("flavor_id", flavor_id)
        if flavor_name is not None:
            _setter("flavor_name", flavor_name)
        if floating_ip_pool is not None:
            _setter("floating_ip_pool", floating_ip_pool)
        if image_id is not None:
            _setter("image_id", image_id)
        if image_name is not None:
            _setter("image_name", image_name)
        if insecure is not None:
            _setter("insecure", insecure)
        if ip_version is not None:
            _setter("ip_version", ip_version)
        if keypair_name is not None:
            _setter("keypair_name", keypair_name)
        if net_id is not None:
            _setter("net_id", net_id)
        if net_name is not None:
            _setter("net_name", net_name)
        if nova_network is not None:
            _setter("nova_network", nova_network)
        if password is not None:
            _setter("password", password)
        if private_key_file is not None:
            _setter("private_key_file", private_key_file)
        if sec_groups is not None:
            _setter("sec_groups", sec_groups)
        if ssh_port is not None:
            _setter("ssh_port", ssh_port)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if tenant_id is not None:
            _setter("tenant_id", tenant_id)
        if tenant_name is not None:
            _setter("tenant_name", tenant_name)
        if user_data_file is not None:
            _setter("user_data_file", user_data_file)
        if username is not None:
            _setter("username", username)
        if volume_device_path is not None:
            _setter("volume_device_path", volume_device_path)
        if volume_id is not None:
            _setter("volume_id", volume_id)
        if volume_name is not None:
            _setter("volume_name", volume_name)
        if volume_size is not None:
            _setter("volume_size", volume_size)
        if volume_type is not None:
            _setter("volume_type", volume_type)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> pulumi.Input[str]:
        """
        OpenStack authentication URL (string)
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[str]:
        """
        OpenStack availability zone (string)
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        AWS region. Default `eu-west-2` (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="activeTimeout")
    def active_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack active timeout Default `200` (string)
        """
        return pulumi.get(self, "active_timeout")

    @active_timeout.setter
    def active_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "active_timeout", value)

    @property
    @pulumi.getter(name="applicationCredentialId")
    def application_credential_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack application credential id. Conflicts with `application_credential_name` (string)
        """
        return pulumi.get(self, "application_credential_id")

    @application_credential_id.setter
    def application_credential_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_credential_id", value)

    @property
    @pulumi.getter(name="applicationCredentialName")
    def application_credential_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack application credential name. Conflicts with `application_credential_id` (string)
        """
        return pulumi.get(self, "application_credential_name")

    @application_credential_name.setter
    def application_credential_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_credential_name", value)

    @property
    @pulumi.getter(name="applicationCredentialSecret")
    def application_credential_secret(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack application credential secret (string)
        """
        return pulumi.get(self, "application_credential_secret")

    @application_credential_secret.setter
    def application_credential_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_credential_secret", value)

    @property
    @pulumi.getter(name="bootFromVolume")
    def boot_from_volume(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable booting from volume. Default is `false` (bool)
        """
        return pulumi.get(self, "boot_from_volume")

    @boot_from_volume.setter
    def boot_from_volume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boot_from_volume", value)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[pulumi.Input[str]]:
        """
        CA certificate bundle to verify against (string)
        """
        return pulumi.get(self, "cacert")

    @cacert.setter
    def cacert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cacert", value)

    @property
    @pulumi.getter(name="configDrive")
    def config_drive(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the OpenStack config drive for the instance. Default `false` (bool)
        """
        return pulumi.get(self, "config_drive")

    @config_drive.setter
    def config_drive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "config_drive", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack domain ID. Identity v3 only. Conflicts with `domain_name` (string)
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack domain name. Identity v3 only. Conflicts with `domain_id` (string)
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack endpoint type. adminURL, internalURL or publicURL (string)
        """
        return pulumi.get(self, "endpoint_type")

    @endpoint_type.setter
    def endpoint_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_type", value)

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack flavor id to use for the instance. Conflicts with `flavor_name` (string)
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flavor_id", value)

    @property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack flavor name to use for the instance. Conflicts with `flavor_id` (string)
        """
        return pulumi.get(self, "flavor_name")

    @flavor_name.setter
    def flavor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flavor_name", value)

    @property
    @pulumi.getter(name="floatingIpPool")
    def floating_ip_pool(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack floating IP pool to get an IP from to assign to the instance (string)
        """
        return pulumi.get(self, "floating_ip_pool")

    @floating_ip_pool.setter
    def floating_ip_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floating_ip_pool", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack image id to use for the instance. Conflicts with `image_name` (string)
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack image name to use for the instance. Conflicts with `image_id` (string)
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable TLS credential checking. Default `false` (bool)
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack version of IP address assigned for the machine Default `4` (string)
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack keypair to use to SSH to the instance (string)
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_name", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack network id the machine will be connected on. Conflicts with `net_name` (string)
        """
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter(name="netName")
    def net_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack network name the machine will be connected on. Conflicts with `net_id` (string)
        """
        return pulumi.get(self, "net_name")

    @net_name.setter
    def net_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_name", value)

    @property
    @pulumi.getter(name="novaNetwork")
    def nova_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the nova networking services instead of neutron (string)
        """
        return pulumi.get(self, "nova_network")

    @nova_network.setter
    def nova_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nova_network", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKeyFile")
    def private_key_file(self) -> Optional[pulumi.Input[str]]:
        """
        Private key content to use for SSH (string)
        """
        return pulumi.get(self, "private_key_file")

    @private_key_file.setter
    def private_key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_file", value)

    @property
    @pulumi.getter(name="secGroups")
    def sec_groups(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack comma separated security groups for the machine (string)
        """
        return pulumi.get(self, "sec_groups")

    @sec_groups.setter
    def sec_groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_groups", value)

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_port")

    @ssh_port.setter
    def ssh_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_port", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack tenant id. Conflicts with `tenant_name` (string)
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack tenant name. Conflicts with `tenant_id` (string)
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter(name="userDataFile")
    def user_data_file(self) -> Optional[pulumi.Input[str]]:
        """
        File containing an openstack userdata script (string)
        """
        return pulumi.get(self, "user_data_file")

    @user_data_file.setter
    def user_data_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data_file", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere username. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="volumeDevicePath")
    def volume_device_path(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume device path (attaching). Applicable only when `boot_from_volume` is `true`. Omit for auto `/dev/vdb`. (string)

        > **Note:**: `Required*` denotes that either the _name or _id is required but you cannot use both.

        > **Note:**: `Required**` denotes that either the _name or _id is required unless `application_credential_id` is defined.

        > **Note for OpenStack users:**: `keypair_name` is required to be in the schema even if there are no references in rancher itself
        """
        return pulumi.get(self, "volume_device_path")

    @volume_device_path.setter
    def volume_device_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_device_path", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume id of existing volume. Applicable only when `boot_from_volume` is `true` (string)
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume name of existing volume. Applicable only when `boot_from_volume` is `true` (string)
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_name", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume size (GiB). Required when `boot_from_volume` is `true` (string)
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        """
        OpenStack volume type. Required when `boot_from_volume` is `true` and openstack cloud does not have a default volume type (string)
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class NodeTemplateOutscaleConfigArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 extra_tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_tags_instances: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 root_disk_iops: Optional[pulumi.Input[int]] = None,
                 root_disk_size: Optional[pulumi.Input[int]] = None,
                 root_disk_type: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_omi: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_key: Outscale Access Key (string)
        :param pulumi.Input[str] secret_key: Outscale Secret Key (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_tags_alls: Extra tags for all created resources (e.g. key1=value1,key2=value2) (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_tags_instances: Extra tags only for instances (e.g. key1=value1,key2=value2) (list)
        :param pulumi.Input[str] instance_type: Outscale VM type. Default `tinav2.c1r2p3` (string)
        :param pulumi.Input[str] region: AWS region. Default `eu-west-2` (string)
        :param pulumi.Input[int] root_disk_iops: Iops for io1 Root Disk. From 1 to 13000.
        :param pulumi.Input[int] root_disk_size: Size of the Root Disk (in GB). From 1 to 14901.
        :param pulumi.Input[str] root_disk_type: Type of the Root Disk. Possible values are :'standard', 'gp2' or 'io1'.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Ids of user defined Security Groups to add to the machine. (list)
        :param pulumi.Input[str] source_omi: Outscale Machine Image to use as bootstrap for the VM. Default `ami-2cf1fa3e` (string)
        """
        NodeTemplateOutscaleConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_key=access_key,
            secret_key=secret_key,
            extra_tags_alls=extra_tags_alls,
            extra_tags_instances=extra_tags_instances,
            instance_type=instance_type,
            region=region,
            root_disk_iops=root_disk_iops,
            root_disk_size=root_disk_size,
            root_disk_type=root_disk_type,
            security_group_ids=security_group_ids,
            source_omi=source_omi,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_key: pulumi.Input[str],
             secret_key: pulumi.Input[str],
             extra_tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             extra_tags_instances: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             instance_type: Optional[pulumi.Input[str]] = None,
             region: Optional[pulumi.Input[str]] = None,
             root_disk_iops: Optional[pulumi.Input[int]] = None,
             root_disk_size: Optional[pulumi.Input[int]] = None,
             root_disk_type: Optional[pulumi.Input[str]] = None,
             security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             source_omi: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'accessKey' in kwargs:
            access_key = kwargs['accessKey']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'extraTagsAlls' in kwargs:
            extra_tags_alls = kwargs['extraTagsAlls']
        if 'extraTagsInstances' in kwargs:
            extra_tags_instances = kwargs['extraTagsInstances']
        if 'instanceType' in kwargs:
            instance_type = kwargs['instanceType']
        if 'rootDiskIops' in kwargs:
            root_disk_iops = kwargs['rootDiskIops']
        if 'rootDiskSize' in kwargs:
            root_disk_size = kwargs['rootDiskSize']
        if 'rootDiskType' in kwargs:
            root_disk_type = kwargs['rootDiskType']
        if 'securityGroupIds' in kwargs:
            security_group_ids = kwargs['securityGroupIds']
        if 'sourceOmi' in kwargs:
            source_omi = kwargs['sourceOmi']

        _setter("access_key", access_key)
        _setter("secret_key", secret_key)
        if extra_tags_alls is not None:
            _setter("extra_tags_alls", extra_tags_alls)
        if extra_tags_instances is not None:
            _setter("extra_tags_instances", extra_tags_instances)
        if instance_type is not None:
            _setter("instance_type", instance_type)
        if region is not None:
            _setter("region", region)
        if root_disk_iops is not None:
            _setter("root_disk_iops", root_disk_iops)
        if root_disk_size is not None:
            _setter("root_disk_size", root_disk_size)
        if root_disk_type is not None:
            _setter("root_disk_type", root_disk_type)
        if security_group_ids is not None:
            _setter("security_group_ids", security_group_ids)
        if source_omi is not None:
            _setter("source_omi", source_omi)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        Outscale Access Key (string)
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        Outscale Secret Key (string)
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="extraTagsAlls")
    def extra_tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra tags for all created resources (e.g. key1=value1,key2=value2) (list)
        """
        return pulumi.get(self, "extra_tags_alls")

    @extra_tags_alls.setter
    def extra_tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_tags_alls", value)

    @property
    @pulumi.getter(name="extraTagsInstances")
    def extra_tags_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra tags only for instances (e.g. key1=value1,key2=value2) (list)
        """
        return pulumi.get(self, "extra_tags_instances")

    @extra_tags_instances.setter
    def extra_tags_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_tags_instances", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Outscale VM type. Default `tinav2.c1r2p3` (string)
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS region. Default `eu-west-2` (string)
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rootDiskIops")
    def root_disk_iops(self) -> Optional[pulumi.Input[int]]:
        """
        Iops for io1 Root Disk. From 1 to 13000.
        """
        return pulumi.get(self, "root_disk_iops")

    @root_disk_iops.setter
    def root_disk_iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_disk_iops", value)

    @property
    @pulumi.getter(name="rootDiskSize")
    def root_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the Root Disk (in GB). From 1 to 14901.
        """
        return pulumi.get(self, "root_disk_size")

    @root_disk_size.setter
    def root_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_disk_size", value)

    @property
    @pulumi.getter(name="rootDiskType")
    def root_disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the Root Disk. Possible values are :'standard', 'gp2' or 'io1'.
        """
        return pulumi.get(self, "root_disk_type")

    @root_disk_type.setter
    def root_disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_disk_type", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ids of user defined Security Groups to add to the machine. (list)
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="sourceOmi")
    def source_omi(self) -> Optional[pulumi.Input[str]]:
        """
        Outscale Machine Image to use as bootstrap for the VM. Default `ami-2cf1fa3e` (string)
        """
        return pulumi.get(self, "source_omi")

    @source_omi.setter
    def source_omi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_omi", value)


@pulumi.input_type
class NodeTemplateVsphereConfigArgs:
    def __init__(__self__, *,
                 boot2docker_url: Optional[pulumi.Input[str]] = None,
                 cfgparams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 clone_from: Optional[pulumi.Input[str]] = None,
                 cloud_config: Optional[pulumi.Input[str]] = None,
                 cloudinit: Optional[pulumi.Input[str]] = None,
                 content_library: Optional[pulumi.Input[str]] = None,
                 cpu_count: Optional[pulumi.Input[str]] = None,
                 creation_type: Optional[pulumi.Input[str]] = None,
                 custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 datastore: Optional[pulumi.Input[str]] = None,
                 datastore_cluster: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 hostsystem: Optional[pulumi.Input[str]] = None,
                 memory_size: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 ssh_password: Optional[pulumi.Input[str]] = None,
                 ssh_port: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 ssh_user_group: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vapp_ip_allocation_policy: Optional[pulumi.Input[str]] = None,
                 vapp_ip_protocol: Optional[pulumi.Input[str]] = None,
                 vapp_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vapp_transport: Optional[pulumi.Input[str]] = None,
                 vcenter: Optional[pulumi.Input[str]] = None,
                 vcenter_port: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] boot2docker_url: vSphere URL for boot2docker iso image. Default `https://releases.rancher.com/os/latest/rancheros-vmware.iso` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cfgparams: vSphere vm configuration parameters (used for guestinfo) (list)
        :param pulumi.Input[str] clone_from: If you choose creation type vm (clone vm) a name of what vm you want to clone is required. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] cloud_config: Cloud Config YAML content to inject as user-data. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] cloudinit: vSphere cloud-init file or url to set in the guestinfo (string)
        :param pulumi.Input[str] content_library: If you choose to clone from a content library template specify the name of the library. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] cpu_count: vSphere CPU number for docker VM. Default `2` (string)
        :param pulumi.Input[str] creation_type: Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy. Default `legacy`. From Rancher v2.3.3 (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] custom_attributes: vSphere custom attributes, format key/value e.g. `200=my custom value`. From Rancher v2.3.3 (List)
        :param pulumi.Input[str] datacenter: vSphere datacenter for docker VM (string)
        :param pulumi.Input[str] datastore: vSphere datastore for docker VM (string)
        :param pulumi.Input[str] datastore_cluster: vSphere datastore cluster for virtual machine. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] disk_size: vSphere size of disk for docker VM (in MB). Default `20480` (string)
        :param pulumi.Input[str] folder: vSphere folder for the docker VM. This folder must already exist in the datacenter (string)
        :param pulumi.Input[str] hostsystem: vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS (string)
        :param pulumi.Input[str] memory_size: vSphere size of memory for docker VM (in MB). Default `2048` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] networks: vSphere network where the docker VM will be attached (list)
        :param pulumi.Input[str] password: vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] pool: vSphere resource pool for docker VM (string)
        :param pulumi.Input[str] ssh_password: If using a non-B2D image you can specify the ssh password. Default `tcuser`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] ssh_port: If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] ssh_user: If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        :param pulumi.Input[str] ssh_user_group: If using a non-B2D image the uploaded keys will need chown'ed. Default `staff`. From Rancher v2.3.3 (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        :param pulumi.Input[str] username: vSphere username. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] vapp_ip_allocation_policy: vSphere vApp IP allocation policy. Supported values are: `dhcp`, `fixed`, `transient` and `fixedAllocated` (string)
        :param pulumi.Input[str] vapp_ip_protocol: vSphere vApp IP protocol for this deployment. Supported values are: `IPv4` and `IPv6` (string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vapp_properties: vSphere vApp properties (list)
        :param pulumi.Input[str] vapp_transport: vSphere OVF environment transports to use for properties. Supported values are: `iso` and `com.vmware.guestInfo` (string)
        :param pulumi.Input[str] vcenter: vSphere IP/hostname for vCenter. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        :param pulumi.Input[str] vcenter_port: vSphere Port for vCenter. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x. Default `443` (string)
        """
        NodeTemplateVsphereConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boot2docker_url=boot2docker_url,
            cfgparams=cfgparams,
            clone_from=clone_from,
            cloud_config=cloud_config,
            cloudinit=cloudinit,
            content_library=content_library,
            cpu_count=cpu_count,
            creation_type=creation_type,
            custom_attributes=custom_attributes,
            datacenter=datacenter,
            datastore=datastore,
            datastore_cluster=datastore_cluster,
            disk_size=disk_size,
            folder=folder,
            hostsystem=hostsystem,
            memory_size=memory_size,
            networks=networks,
            password=password,
            pool=pool,
            ssh_password=ssh_password,
            ssh_port=ssh_port,
            ssh_user=ssh_user,
            ssh_user_group=ssh_user_group,
            tags=tags,
            username=username,
            vapp_ip_allocation_policy=vapp_ip_allocation_policy,
            vapp_ip_protocol=vapp_ip_protocol,
            vapp_properties=vapp_properties,
            vapp_transport=vapp_transport,
            vcenter=vcenter,
            vcenter_port=vcenter_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boot2docker_url: Optional[pulumi.Input[str]] = None,
             cfgparams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             clone_from: Optional[pulumi.Input[str]] = None,
             cloud_config: Optional[pulumi.Input[str]] = None,
             cloudinit: Optional[pulumi.Input[str]] = None,
             content_library: Optional[pulumi.Input[str]] = None,
             cpu_count: Optional[pulumi.Input[str]] = None,
             creation_type: Optional[pulumi.Input[str]] = None,
             custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             datacenter: Optional[pulumi.Input[str]] = None,
             datastore: Optional[pulumi.Input[str]] = None,
             datastore_cluster: Optional[pulumi.Input[str]] = None,
             disk_size: Optional[pulumi.Input[str]] = None,
             folder: Optional[pulumi.Input[str]] = None,
             hostsystem: Optional[pulumi.Input[str]] = None,
             memory_size: Optional[pulumi.Input[str]] = None,
             networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             password: Optional[pulumi.Input[str]] = None,
             pool: Optional[pulumi.Input[str]] = None,
             ssh_password: Optional[pulumi.Input[str]] = None,
             ssh_port: Optional[pulumi.Input[str]] = None,
             ssh_user: Optional[pulumi.Input[str]] = None,
             ssh_user_group: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             username: Optional[pulumi.Input[str]] = None,
             vapp_ip_allocation_policy: Optional[pulumi.Input[str]] = None,
             vapp_ip_protocol: Optional[pulumi.Input[str]] = None,
             vapp_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             vapp_transport: Optional[pulumi.Input[str]] = None,
             vcenter: Optional[pulumi.Input[str]] = None,
             vcenter_port: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'boot2dockerUrl' in kwargs:
            boot2docker_url = kwargs['boot2dockerUrl']
        if 'cloneFrom' in kwargs:
            clone_from = kwargs['cloneFrom']
        if 'cloudConfig' in kwargs:
            cloud_config = kwargs['cloudConfig']
        if 'contentLibrary' in kwargs:
            content_library = kwargs['contentLibrary']
        if 'cpuCount' in kwargs:
            cpu_count = kwargs['cpuCount']
        if 'creationType' in kwargs:
            creation_type = kwargs['creationType']
        if 'customAttributes' in kwargs:
            custom_attributes = kwargs['customAttributes']
        if 'datastoreCluster' in kwargs:
            datastore_cluster = kwargs['datastoreCluster']
        if 'diskSize' in kwargs:
            disk_size = kwargs['diskSize']
        if 'memorySize' in kwargs:
            memory_size = kwargs['memorySize']
        if 'sshPassword' in kwargs:
            ssh_password = kwargs['sshPassword']
        if 'sshPort' in kwargs:
            ssh_port = kwargs['sshPort']
        if 'sshUser' in kwargs:
            ssh_user = kwargs['sshUser']
        if 'sshUserGroup' in kwargs:
            ssh_user_group = kwargs['sshUserGroup']
        if 'vappIpAllocationPolicy' in kwargs:
            vapp_ip_allocation_policy = kwargs['vappIpAllocationPolicy']
        if 'vappIpProtocol' in kwargs:
            vapp_ip_protocol = kwargs['vappIpProtocol']
        if 'vappProperties' in kwargs:
            vapp_properties = kwargs['vappProperties']
        if 'vappTransport' in kwargs:
            vapp_transport = kwargs['vappTransport']
        if 'vcenterPort' in kwargs:
            vcenter_port = kwargs['vcenterPort']

        if boot2docker_url is not None:
            _setter("boot2docker_url", boot2docker_url)
        if cfgparams is not None:
            _setter("cfgparams", cfgparams)
        if clone_from is not None:
            _setter("clone_from", clone_from)
        if cloud_config is not None:
            _setter("cloud_config", cloud_config)
        if cloudinit is not None:
            _setter("cloudinit", cloudinit)
        if content_library is not None:
            _setter("content_library", content_library)
        if cpu_count is not None:
            _setter("cpu_count", cpu_count)
        if creation_type is not None:
            _setter("creation_type", creation_type)
        if custom_attributes is not None:
            _setter("custom_attributes", custom_attributes)
        if datacenter is not None:
            _setter("datacenter", datacenter)
        if datastore is not None:
            _setter("datastore", datastore)
        if datastore_cluster is not None:
            _setter("datastore_cluster", datastore_cluster)
        if disk_size is not None:
            _setter("disk_size", disk_size)
        if folder is not None:
            _setter("folder", folder)
        if hostsystem is not None:
            _setter("hostsystem", hostsystem)
        if memory_size is not None:
            _setter("memory_size", memory_size)
        if networks is not None:
            _setter("networks", networks)
        if password is not None:
            _setter("password", password)
        if pool is not None:
            _setter("pool", pool)
        if ssh_password is not None:
            _setter("ssh_password", ssh_password)
        if ssh_port is not None:
            _setter("ssh_port", ssh_port)
        if ssh_user is not None:
            _setter("ssh_user", ssh_user)
        if ssh_user_group is not None:
            _setter("ssh_user_group", ssh_user_group)
        if tags is not None:
            _setter("tags", tags)
        if username is not None:
            _setter("username", username)
        if vapp_ip_allocation_policy is not None:
            _setter("vapp_ip_allocation_policy", vapp_ip_allocation_policy)
        if vapp_ip_protocol is not None:
            _setter("vapp_ip_protocol", vapp_ip_protocol)
        if vapp_properties is not None:
            _setter("vapp_properties", vapp_properties)
        if vapp_transport is not None:
            _setter("vapp_transport", vapp_transport)
        if vcenter is not None:
            _setter("vcenter", vcenter)
        if vcenter_port is not None:
            _setter("vcenter_port", vcenter_port)

    @property
    @pulumi.getter(name="boot2dockerUrl")
    def boot2docker_url(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere URL for boot2docker iso image. Default `https://releases.rancher.com/os/latest/rancheros-vmware.iso` (string)
        """
        return pulumi.get(self, "boot2docker_url")

    @boot2docker_url.setter
    def boot2docker_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot2docker_url", value)

    @property
    @pulumi.getter
    def cfgparams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere vm configuration parameters (used for guestinfo) (list)
        """
        return pulumi.get(self, "cfgparams")

    @cfgparams.setter
    def cfgparams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cfgparams", value)

    @property
    @pulumi.getter(name="cloneFrom")
    def clone_from(self) -> Optional[pulumi.Input[str]]:
        """
        If you choose creation type vm (clone vm) a name of what vm you want to clone is required. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "clone_from")

    @clone_from.setter
    def clone_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clone_from", value)

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud Config YAML content to inject as user-data. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "cloud_config")

    @cloud_config.setter
    def cloud_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_config", value)

    @property
    @pulumi.getter
    def cloudinit(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere cloud-init file or url to set in the guestinfo (string)
        """
        return pulumi.get(self, "cloudinit")

    @cloudinit.setter
    def cloudinit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudinit", value)

    @property
    @pulumi.getter(name="contentLibrary")
    def content_library(self) -> Optional[pulumi.Input[str]]:
        """
        If you choose to clone from a content library template specify the name of the library. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "content_library")

    @content_library.setter
    def content_library(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_library", value)

    @property
    @pulumi.getter(name="cpuCount")
    def cpu_count(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere CPU number for docker VM. Default `2` (string)
        """
        return pulumi.get(self, "cpu_count")

    @cpu_count.setter
    def cpu_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_count", value)

    @property
    @pulumi.getter(name="creationType")
    def creation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Creation type when creating a new virtual machine. Supported values: vm, template, library, legacy. Default `legacy`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "creation_type")

    @creation_type.setter
    def creation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_type", value)

    @property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere custom attributes, format key/value e.g. `200=my custom value`. From Rancher v2.3.3 (List)
        """
        return pulumi.get(self, "custom_attributes")

    @custom_attributes.setter
    def custom_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_attributes", value)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere datacenter for docker VM (string)
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter
    def datastore(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere datastore for docker VM (string)
        """
        return pulumi.get(self, "datastore")

    @datastore.setter
    def datastore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datastore", value)

    @property
    @pulumi.getter(name="datastoreCluster")
    def datastore_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere datastore cluster for virtual machine. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "datastore_cluster")

    @datastore_cluster.setter
    def datastore_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datastore_cluster", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of disk for docker VM (in MB). Default `20480` (string)
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere folder for the docker VM. This folder must already exist in the datacenter (string)
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def hostsystem(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS (string)
        """
        return pulumi.get(self, "hostsystem")

    @hostsystem.setter
    def hostsystem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostsystem", value)

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere size of memory for docker VM (in MB). Default `2048` (string)
        """
        return pulumi.get(self, "memory_size")

    @memory_size.setter
    def memory_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_size", value)

    @property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere network where the docker VM will be attached (list)
        """
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "networks", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere password. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere resource pool for docker VM (string)
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="sshPassword")
    def ssh_password(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh password. Default `tcuser`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_password")

    @ssh_password.setter
    def ssh_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_password", value)

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh port. Default `22`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_port")

    @ssh_port.setter
    def ssh_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_port", value)

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image you can specify the ssh user. Default `docker`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_user")

    @ssh_user.setter
    def ssh_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user", value)

    @property
    @pulumi.getter(name="sshUserGroup")
    def ssh_user_group(self) -> Optional[pulumi.Input[str]]:
        """
        If using a non-B2D image the uploaded keys will need chown'ed. Default `staff`. From Rancher v2.3.3 (string)
        """
        return pulumi.get(self, "ssh_user_group")

    @ssh_user_group.setter
    def ssh_user_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_user_group", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere tags id e.g. `urn:xxx`. From Rancher v2.3.3 (list)
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere username. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="vappIpAllocationPolicy")
    def vapp_ip_allocation_policy(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere vApp IP allocation policy. Supported values are: `dhcp`, `fixed`, `transient` and `fixedAllocated` (string)
        """
        return pulumi.get(self, "vapp_ip_allocation_policy")

    @vapp_ip_allocation_policy.setter
    def vapp_ip_allocation_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_ip_allocation_policy", value)

    @property
    @pulumi.getter(name="vappIpProtocol")
    def vapp_ip_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere vApp IP protocol for this deployment. Supported values are: `IPv4` and `IPv6` (string)
        """
        return pulumi.get(self, "vapp_ip_protocol")

    @vapp_ip_protocol.setter
    def vapp_ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_ip_protocol", value)

    @property
    @pulumi.getter(name="vappProperties")
    def vapp_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        vSphere vApp properties (list)
        """
        return pulumi.get(self, "vapp_properties")

    @vapp_properties.setter
    def vapp_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vapp_properties", value)

    @property
    @pulumi.getter(name="vappTransport")
    def vapp_transport(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere OVF environment transports to use for properties. Supported values are: `iso` and `com.vmware.guestInfo` (string)
        """
        return pulumi.get(self, "vapp_transport")

    @vapp_transport.setter
    def vapp_transport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vapp_transport", value)

    @property
    @pulumi.getter
    def vcenter(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere IP/hostname for vCenter. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x (string)
        """
        return pulumi.get(self, "vcenter")

    @vcenter.setter
    def vcenter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter", value)

    @property
    @pulumi.getter(name="vcenterPort")
    def vcenter_port(self) -> Optional[pulumi.Input[str]]:
        """
        vSphere Port for vCenter. Mandatory on Rancher v2.0.x and v2.1.x. Use `CloudCredential` from Rancher v2.2.x. Default `443` (string)
        """
        return pulumi.get(self, "vcenter_port")

    @vcenter_port.setter
    def vcenter_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_port", value)


@pulumi.input_type
class NotifierDingtalkConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: Slack url (string)
        :param pulumi.Input[str] proxy_url: Wechat proxy url (string)
        :param pulumi.Input[str] secret: Wechat agent ID (string)
        """
        NotifierDingtalkConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            proxy_url=proxy_url,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: pulumi.Input[str],
             proxy_url: Optional[pulumi.Input[str]] = None,
             secret: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'proxyUrl' in kwargs:
            proxy_url = kwargs['proxyUrl']

        _setter("url", url)
        if proxy_url is not None:
            _setter("proxy_url", proxy_url)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Slack url (string)
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Wechat proxy url (string)
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Wechat agent ID (string)
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class NotifierMsteamsConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 proxy_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: Slack url (string)
        :param pulumi.Input[str] proxy_url: Wechat proxy url (string)
        """
        NotifierMsteamsConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            proxy_url=proxy_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: pulumi.Input[str],
             proxy_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'proxyUrl' in kwargs:
            proxy_url = kwargs['proxyUrl']

        _setter("url", url)
        if proxy_url is not None:
            _setter("proxy_url", proxy_url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Slack url (string)
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Wechat proxy url (string)
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)


@pulumi.input_type
class NotifierPagerdutyConfigArgs:
    def __init__(__self__, *,
                 service_key: pulumi.Input[str],
                 proxy_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] service_key: Pagerduty service key (string)
        :param pulumi.Input[str] proxy_url: Wechat proxy url (string)
        """
        NotifierPagerdutyConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            service_key=service_key,
            proxy_url=proxy_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             service_key: pulumi.Input[str],
             proxy_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serviceKey' in kwargs:
            service_key = kwargs['serviceKey']
        if 'proxyUrl' in kwargs:
            proxy_url = kwargs['proxyUrl']

        _setter("service_key", service_key)
        if proxy_url is not None:
            _setter("proxy_url", proxy_url)

    @property
    @pulumi.getter(name="serviceKey")
    def service_key(self) -> pulumi.Input[str]:
        """
        Pagerduty service key (string)
        """
        return pulumi.get(self, "service_key")

    @service_key.setter
    def service_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_key", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Wechat proxy url (string)
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)


@pulumi.input_type
class NotifierSlackConfigArgs:
    def __init__(__self__, *,
                 default_recipient: pulumi.Input[str],
                 url: pulumi.Input[str],
                 proxy_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_recipient: Wechat default recipient (string)
        :param pulumi.Input[str] url: Slack url (string)
        :param pulumi.Input[str] proxy_url: Wechat proxy url (string)
        """
        NotifierSlackConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_recipient=default_recipient,
            url=url,
            proxy_url=proxy_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_recipient: pulumi.Input[str],
             url: pulumi.Input[str],
             proxy_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultRecipient' in kwargs:
            default_recipient = kwargs['defaultRecipient']
        if 'proxyUrl' in kwargs:
            proxy_url = kwargs['proxyUrl']

        _setter("default_recipient", default_recipient)
        _setter("url", url)
        if proxy_url is not None:
            _setter("proxy_url", proxy_url)

    @property
    @pulumi.getter(name="defaultRecipient")
    def default_recipient(self) -> pulumi.Input[str]:
        """
        Wechat default recipient (string)
        """
        return pulumi.get(self, "default_recipient")

    @default_recipient.setter
    def default_recipient(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_recipient", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Slack url (string)
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Wechat proxy url (string)
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)


@pulumi.input_type
class NotifierSmtpConfigArgs:
    def __init__(__self__, *,
                 default_recipient: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 sender: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[bool]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_recipient: SMTP default recipient (string)
        :param pulumi.Input[str] host: SMTP host (string)
        :param pulumi.Input[int] port: SMTP port (int)
        :param pulumi.Input[str] sender: SMTP sender (string)
        :param pulumi.Input[str] password: SMTP password (string)
        :param pulumi.Input[bool] tls: SMTP tls. Default `true` (bool)
        :param pulumi.Input[str] username: SMTP username (string)
        """
        NotifierSmtpConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_recipient=default_recipient,
            host=host,
            port=port,
            sender=sender,
            password=password,
            tls=tls,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_recipient: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[int],
             sender: pulumi.Input[str],
             password: Optional[pulumi.Input[str]] = None,
             tls: Optional[pulumi.Input[bool]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultRecipient' in kwargs:
            default_recipient = kwargs['defaultRecipient']

        _setter("default_recipient", default_recipient)
        _setter("host", host)
        _setter("port", port)
        _setter("sender", sender)
        if password is not None:
            _setter("password", password)
        if tls is not None:
            _setter("tls", tls)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter(name="defaultRecipient")
    def default_recipient(self) -> pulumi.Input[str]:
        """
        SMTP default recipient (string)
        """
        return pulumi.get(self, "default_recipient")

    @default_recipient.setter
    def default_recipient(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_recipient", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        SMTP host (string)
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        SMTP port (int)
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sender(self) -> pulumi.Input[str]:
        """
        SMTP sender (string)
        """
        return pulumi.get(self, "sender")

    @sender.setter
    def sender(self, value: pulumi.Input[str]):
        pulumi.set(self, "sender", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        SMTP password (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[bool]]:
        """
        SMTP tls. Default `true` (bool)
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        SMTP username (string)
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class NotifierWebhookConfigArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 proxy_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: Webhook url (string)
        :param pulumi.Input[str] proxy_url: Webhook proxy url (string)
        """
        NotifierWebhookConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            proxy_url=proxy_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: pulumi.Input[str],
             proxy_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'proxyUrl' in kwargs:
            proxy_url = kwargs['proxyUrl']

        _setter("url", url)
        if proxy_url is not None:
            _setter("proxy_url", proxy_url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Webhook url (string)
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Webhook proxy url (string)
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)


@pulumi.input_type
class NotifierWechatConfigArgs:
    def __init__(__self__, *,
                 agent: pulumi.Input[str],
                 corp: pulumi.Input[str],
                 default_recipient: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 recipient_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] agent: Wechat agent ID (string)
        :param pulumi.Input[str] corp: Wechat corporation ID (string)
        :param pulumi.Input[str] default_recipient: Wechat default recipient (string)
        :param pulumi.Input[str] secret: Wechat agent ID (string)
        :param pulumi.Input[str] proxy_url: Wechat proxy url (string)
        :param pulumi.Input[str] recipient_type: Wechat recipient type. Allowed values: `party` | `tag` | `user` (string)
        """
        NotifierWechatConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            agent=agent,
            corp=corp,
            default_recipient=default_recipient,
            secret=secret,
            proxy_url=proxy_url,
            recipient_type=recipient_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             agent: pulumi.Input[str],
             corp: pulumi.Input[str],
             default_recipient: pulumi.Input[str],
             secret: pulumi.Input[str],
             proxy_url: Optional[pulumi.Input[str]] = None,
             recipient_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultRecipient' in kwargs:
            default_recipient = kwargs['defaultRecipient']
        if 'proxyUrl' in kwargs:
            proxy_url = kwargs['proxyUrl']
        if 'recipientType' in kwargs:
            recipient_type = kwargs['recipientType']

        _setter("agent", agent)
        _setter("corp", corp)
        _setter("default_recipient", default_recipient)
        _setter("secret", secret)
        if proxy_url is not None:
            _setter("proxy_url", proxy_url)
        if recipient_type is not None:
            _setter("recipient_type", recipient_type)

    @property
    @pulumi.getter
    def agent(self) -> pulumi.Input[str]:
        """
        Wechat agent ID (string)
        """
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent", value)

    @property
    @pulumi.getter
    def corp(self) -> pulumi.Input[str]:
        """
        Wechat corporation ID (string)
        """
        return pulumi.get(self, "corp")

    @corp.setter
    def corp(self, value: pulumi.Input[str]):
        pulumi.set(self, "corp", value)

    @property
    @pulumi.getter(name="defaultRecipient")
    def default_recipient(self) -> pulumi.Input[str]:
        """
        Wechat default recipient (string)
        """
        return pulumi.get(self, "default_recipient")

    @default_recipient.setter
    def default_recipient(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_recipient", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        Wechat agent ID (string)
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Wechat proxy url (string)
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter(name="recipientType")
    def recipient_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wechat recipient type. Allowed values: `party` | `tag` | `user` (string)
        """
        return pulumi.get(self, "recipient_type")

    @recipient_type.setter
    def recipient_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recipient_type", value)


@pulumi.input_type
class PodSecurityPolicyTemplateAllowedCsiDriverArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the PodSecurityPolicyTemplate (string)
        """
        PodSecurityPolicyTemplateAllowedCsiDriverArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the PodSecurityPolicyTemplate (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PodSecurityPolicyTemplateAllowedFlexVolumeArgs:
    def __init__(__self__, *,
                 driver: pulumi.Input[str]):
        PodSecurityPolicyTemplateAllowedFlexVolumeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            driver=driver,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             driver: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("driver", driver)

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Input[str]:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: pulumi.Input[str]):
        pulumi.set(self, "driver", value)


@pulumi.input_type
class PodSecurityPolicyTemplateAllowedHostPathArgs:
    def __init__(__self__, *,
                 path_prefix: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] path_prefix: (string)
        :param pulumi.Input[bool] read_only: (string)
        """
        PodSecurityPolicyTemplateAllowedHostPathArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path_prefix=path_prefix,
            read_only=read_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path_prefix: pulumi.Input[str],
             read_only: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pathPrefix' in kwargs:
            path_prefix = kwargs['pathPrefix']
        if 'readOnly' in kwargs:
            read_only = kwargs['readOnly']

        _setter("path_prefix", path_prefix)
        if read_only is not None:
            _setter("read_only", read_only)

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "path_prefix")

    @path_prefix.setter
    def path_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "path_prefix", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        (string)
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class PodSecurityPolicyTemplateFsGroupArgs:
    def __init__(__self__, *,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateFsGroupRangeArgs']]]] = None,
                 rule: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateFsGroupRangeArgs']]] ranges: (list)
        :param pulumi.Input[str] rule: (string)
        """
        PodSecurityPolicyTemplateFsGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ranges=ranges,
            rule=rule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateFsGroupRangeArgs']]]] = None,
             rule: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if ranges is not None:
            _setter("ranges", ranges)
        if rule is not None:
            _setter("rule", rule)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateFsGroupRangeArgs']]]]:
        """
        (list)
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateFsGroupRangeArgs']]]]):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class PodSecurityPolicyTemplateFsGroupRangeArgs:
    def __init__(__self__, *,
                 max: pulumi.Input[int],
                 min: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max: (int)
        :param pulumi.Input[int] min: (int)
        """
        PodSecurityPolicyTemplateFsGroupRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: pulumi.Input[int],
             min: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class PodSecurityPolicyTemplateHostPortArgs:
    def __init__(__self__, *,
                 max: pulumi.Input[int],
                 min: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max: (int)
        :param pulumi.Input[int] min: (int)
        """
        PodSecurityPolicyTemplateHostPortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: pulumi.Input[int],
             min: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class PodSecurityPolicyTemplateRunAsGroupArgs:
    def __init__(__self__, *,
                 rule: pulumi.Input[str],
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsGroupRangeArgs']]]] = None):
        """
        :param pulumi.Input[str] rule: (string)
        :param pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsGroupRangeArgs']]] ranges: (list)
        """
        PodSecurityPolicyTemplateRunAsGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule=rule,
            ranges=ranges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule: pulumi.Input[str],
             ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsGroupRangeArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("rule", rule)
        if ranges is not None:
            _setter("ranges", ranges)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsGroupRangeArgs']]]]:
        """
        (list)
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsGroupRangeArgs']]]]):
        pulumi.set(self, "ranges", value)


@pulumi.input_type
class PodSecurityPolicyTemplateRunAsGroupRangeArgs:
    def __init__(__self__, *,
                 max: pulumi.Input[int],
                 min: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max: (int)
        :param pulumi.Input[int] min: (int)
        """
        PodSecurityPolicyTemplateRunAsGroupRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: pulumi.Input[int],
             min: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class PodSecurityPolicyTemplateRunAsUserArgs:
    def __init__(__self__, *,
                 rule: pulumi.Input[str],
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsUserRangeArgs']]]] = None):
        """
        :param pulumi.Input[str] rule: (string)
        :param pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsUserRangeArgs']]] ranges: (list)
        """
        PodSecurityPolicyTemplateRunAsUserArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule=rule,
            ranges=ranges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule: pulumi.Input[str],
             ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsUserRangeArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("rule", rule)
        if ranges is not None:
            _setter("ranges", ranges)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsUserRangeArgs']]]]:
        """
        (list)
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateRunAsUserRangeArgs']]]]):
        pulumi.set(self, "ranges", value)


@pulumi.input_type
class PodSecurityPolicyTemplateRunAsUserRangeArgs:
    def __init__(__self__, *,
                 max: pulumi.Input[int],
                 min: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max: (int)
        :param pulumi.Input[int] min: (int)
        """
        PodSecurityPolicyTemplateRunAsUserRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: pulumi.Input[int],
             min: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class PodSecurityPolicyTemplateRuntimeClassArgs:
    def __init__(__self__, *,
                 allowed_runtime_class_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 default_runtime_class_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_runtime_class_names: (list)
        :param pulumi.Input[str] default_runtime_class_name: (string)
        """
        PodSecurityPolicyTemplateRuntimeClassArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_runtime_class_names=allowed_runtime_class_names,
            default_runtime_class_name=default_runtime_class_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_runtime_class_names: pulumi.Input[Sequence[pulumi.Input[str]]],
             default_runtime_class_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedRuntimeClassNames' in kwargs:
            allowed_runtime_class_names = kwargs['allowedRuntimeClassNames']
        if 'defaultRuntimeClassName' in kwargs:
            default_runtime_class_name = kwargs['defaultRuntimeClassName']

        _setter("allowed_runtime_class_names", allowed_runtime_class_names)
        if default_runtime_class_name is not None:
            _setter("default_runtime_class_name", default_runtime_class_name)

    @property
    @pulumi.getter(name="allowedRuntimeClassNames")
    def allowed_runtime_class_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        (list)
        """
        return pulumi.get(self, "allowed_runtime_class_names")

    @allowed_runtime_class_names.setter
    def allowed_runtime_class_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_runtime_class_names", value)

    @property
    @pulumi.getter(name="defaultRuntimeClassName")
    def default_runtime_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "default_runtime_class_name")

    @default_runtime_class_name.setter
    def default_runtime_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_runtime_class_name", value)


@pulumi.input_type
class PodSecurityPolicyTemplateSeLinuxArgs:
    def __init__(__self__, *,
                 rule: pulumi.Input[str],
                 se_linux_option: Optional[pulumi.Input['PodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs']] = None):
        """
        :param pulumi.Input[str] rule: (string)
        :param pulumi.Input['PodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs'] se_linux_option: (list maxitems:1)
        """
        PodSecurityPolicyTemplateSeLinuxArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule=rule,
            se_linux_option=se_linux_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule: pulumi.Input[str],
             se_linux_option: Optional[pulumi.Input['PodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'seLinuxOption' in kwargs:
            se_linux_option = kwargs['seLinuxOption']

        _setter("rule", rule)
        if se_linux_option is not None:
            _setter("se_linux_option", se_linux_option)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        """
        (string)
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="seLinuxOption")
    def se_linux_option(self) -> Optional[pulumi.Input['PodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs']]:
        """
        (list maxitems:1)
        """
        return pulumi.get(self, "se_linux_option")

    @se_linux_option.setter
    def se_linux_option(self, value: Optional[pulumi.Input['PodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs']]):
        pulumi.set(self, "se_linux_option", value)


@pulumi.input_type
class PodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] level: (string)
        :param pulumi.Input[str] role: (string)
        :param pulumi.Input[str] type: (string)
        :param pulumi.Input[str] user: (string)
        """
        PodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            level=level,
            role=role,
            type=type,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             level: Optional[pulumi.Input[str]] = None,
             role: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             user: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if level is not None:
            _setter("level", level)
        if role is not None:
            _setter("role", role)
        if type is not None:
            _setter("type", type)
        if user is not None:
            _setter("user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class PodSecurityPolicyTemplateSupplementalGroupArgs:
    def __init__(__self__, *,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateSupplementalGroupRangeArgs']]]] = None,
                 rule: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateSupplementalGroupRangeArgs']]] ranges: (list)
        :param pulumi.Input[str] rule: (string)
        """
        PodSecurityPolicyTemplateSupplementalGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ranges=ranges,
            rule=rule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ranges: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateSupplementalGroupRangeArgs']]]] = None,
             rule: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if ranges is not None:
            _setter("ranges", ranges)
        if rule is not None:
            _setter("rule", rule)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateSupplementalGroupRangeArgs']]]]:
        """
        (list)
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PodSecurityPolicyTemplateSupplementalGroupRangeArgs']]]]):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input[str]]:
        """
        (string)
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class PodSecurityPolicyTemplateSupplementalGroupRangeArgs:
    def __init__(__self__, *,
                 max: pulumi.Input[int],
                 min: pulumi.Input[int]):
        """
        :param pulumi.Input[int] max: (int)
        :param pulumi.Input[int] min: (int)
        """
        PodSecurityPolicyTemplateSupplementalGroupRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: pulumi.Input[int],
             min: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        """
        (int)
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class ProjectAlertGroupRecipientArgs:
    def __init__(__self__, *,
                 notifier_id: pulumi.Input[str],
                 default_recipient: Optional[pulumi.Input[bool]] = None,
                 notifier_type: Optional[pulumi.Input[str]] = None,
                 recipient: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] notifier_id: Recipient notifier ID (string)
        :param pulumi.Input[str] notifier_type: Recipient notifier ID. Supported values : `"pagerduty" | "slack" | "email" | "webhook" | "wechat"` (string)
        :param pulumi.Input[str] recipient: Recipient (string)
        """
        ProjectAlertGroupRecipientArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notifier_id=notifier_id,
            default_recipient=default_recipient,
            notifier_type=notifier_type,
            recipient=recipient,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notifier_id: pulumi.Input[str],
             default_recipient: Optional[pulumi.Input[bool]] = None,
             notifier_type: Optional[pulumi.Input[str]] = None,
             recipient: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'notifierId' in kwargs:
            notifier_id = kwargs['notifierId']
        if 'defaultRecipient' in kwargs:
            default_recipient = kwargs['defaultRecipient']
        if 'notifierType' in kwargs:
            notifier_type = kwargs['notifierType']

        _setter("notifier_id", notifier_id)
        if default_recipient is not None:
            _setter("default_recipient", default_recipient)
        if notifier_type is not None:
            _setter("notifier_type", notifier_type)
        if recipient is not None:
            _setter("recipient", recipient)

    @property
    @pulumi.getter(name="notifierId")
    def notifier_id(self) -> pulumi.Input[str]:
        """
        Recipient notifier ID (string)
        """
        return pulumi.get(self, "notifier_id")

    @notifier_id.setter
    def notifier_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "notifier_id", value)

    @property
    @pulumi.getter(name="defaultRecipient")
    def default_recipient(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default_recipient")

    @default_recipient.setter
    def default_recipient(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_recipient", value)

    @property
    @pulumi.getter(name="notifierType")
    def notifier_type(self) -> Optional[pulumi.Input[str]]:
        """
        Recipient notifier ID. Supported values : `"pagerduty" | "slack" | "email" | "webhook" | "wechat"` (string)
        """
        return pulumi.get(self, "notifier_type")

    @notifier_type.setter
    def notifier_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notifier_type", value)

    @property
    @pulumi.getter
    def recipient(self) -> Optional[pulumi.Input[str]]:
        """
        Recipient (string)
        """
        return pulumi.get(self, "recipient")

    @recipient.setter
    def recipient(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recipient", value)


@pulumi.input_type
class ProjectAlertRuleMetricRuleArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 threshold_value: pulumi.Input[float],
                 comparison: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] duration: Metric rule duration (string)
        :param pulumi.Input[str] expression: Metric rule expression (string)
        :param pulumi.Input[float] threshold_value: Metric rule threshold value (float64)
        :param pulumi.Input[str] comparison: Metric rule comparison. Supported values : `"equal" | "greater-or-equal" | "greater-than" | "less-or-equal" | "less-than" | "not-equal" | "has-value"`. Default: `equal`  (string)
        :param pulumi.Input[str] description: Metric rule description (string)
        """
        ProjectAlertRuleMetricRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            expression=expression,
            threshold_value=threshold_value,
            comparison=comparison,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: pulumi.Input[str],
             expression: pulumi.Input[str],
             threshold_value: pulumi.Input[float],
             comparison: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'thresholdValue' in kwargs:
            threshold_value = kwargs['thresholdValue']

        _setter("duration", duration)
        _setter("expression", expression)
        _setter("threshold_value", threshold_value)
        if comparison is not None:
            _setter("comparison", comparison)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        Metric rule duration (string)
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Metric rule expression (string)
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="thresholdValue")
    def threshold_value(self) -> pulumi.Input[float]:
        """
        Metric rule threshold value (float64)
        """
        return pulumi.get(self, "threshold_value")

    @threshold_value.setter
    def threshold_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_value", value)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input[str]]:
        """
        Metric rule comparison. Supported values : `"equal" | "greater-or-equal" | "greater-than" | "less-or-equal" | "less-than" | "not-equal" | "has-value"`. Default: `equal`  (string)
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Metric rule description (string)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class ProjectAlertRulePodRuleArgs:
    def __init__(__self__, *,
                 pod_id: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None,
                 restart_interval_seconds: Optional[pulumi.Input[int]] = None,
                 restart_times: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] pod_id: Pod ID (string)
        :param pulumi.Input[str] condition: Pod rule condition. Supported values : `"notrunning" | "notscheduled" | "restarts"`. Default: `notrunning` (string)
        :param pulumi.Input[int] restart_interval_seconds: Pod rule restart interval seconds. Default: `300` (int)
        :param pulumi.Input[int] restart_times: Pod rule restart times. Default: `3`  (int)
        """
        ProjectAlertRulePodRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pod_id=pod_id,
            condition=condition,
            restart_interval_seconds=restart_interval_seconds,
            restart_times=restart_times,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pod_id: pulumi.Input[str],
             condition: Optional[pulumi.Input[str]] = None,
             restart_interval_seconds: Optional[pulumi.Input[int]] = None,
             restart_times: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'podId' in kwargs:
            pod_id = kwargs['podId']
        if 'restartIntervalSeconds' in kwargs:
            restart_interval_seconds = kwargs['restartIntervalSeconds']
        if 'restartTimes' in kwargs:
            restart_times = kwargs['restartTimes']

        _setter("pod_id", pod_id)
        if condition is not None:
            _setter("condition", condition)
        if restart_interval_seconds is not None:
            _setter("restart_interval_seconds", restart_interval_seconds)
        if restart_times is not None:
            _setter("restart_times", restart_times)

    @property
    @pulumi.getter(name="podId")
    def pod_id(self) -> pulumi.Input[str]:
        """
        Pod ID (string)
        """
        return pulumi.get(self, "pod_id")

    @pod_id.setter
    def pod_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pod_id", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        Pod rule condition. Supported values : `"notrunning" | "notscheduled" | "restarts"`. Default: `notrunning` (string)
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="restartIntervalSeconds")
    def restart_interval_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Pod rule restart interval seconds. Default: `300` (int)
        """
        return pulumi.get(self, "restart_interval_seconds")

    @restart_interval_seconds.setter
    def restart_interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_interval_seconds", value)

    @property
    @pulumi.getter(name="restartTimes")
    def restart_times(self) -> Optional[pulumi.Input[int]]:
        """
        Pod rule restart times. Default: `3`  (int)
        """
        return pulumi.get(self, "restart_times")

    @restart_times.setter
    def restart_times(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_times", value)


@pulumi.input_type
class ProjectAlertRuleWorkloadRuleArgs:
    def __init__(__self__, *,
                 available_percentage: Optional[pulumi.Input[int]] = None,
                 selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 workload_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] available_percentage: Workload rule available percentage. Default: `70` (int)
        :param pulumi.Input[Mapping[str, Any]] selector: Workload rule selector (map)
        :param pulumi.Input[str] workload_id: Workload ID (string)
        """
        ProjectAlertRuleWorkloadRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            available_percentage=available_percentage,
            selector=selector,
            workload_id=workload_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             available_percentage: Optional[pulumi.Input[int]] = None,
             selector: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             workload_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'availablePercentage' in kwargs:
            available_percentage = kwargs['availablePercentage']
        if 'workloadId' in kwargs:
            workload_id = kwargs['workloadId']

        if available_percentage is not None:
            _setter("available_percentage", available_percentage)
        if selector is not None:
            _setter("selector", selector)
        if workload_id is not None:
            _setter("workload_id", workload_id)

    @property
    @pulumi.getter(name="availablePercentage")
    def available_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Workload rule available percentage. Default: `70` (int)
        """
        return pulumi.get(self, "available_percentage")

    @available_percentage.setter
    def available_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "available_percentage", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Workload rule selector (map)
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="workloadId")
    def workload_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workload ID (string)
        """
        return pulumi.get(self, "workload_id")

    @workload_id.setter
    def workload_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workload_id", value)


@pulumi.input_type
class ProjectContainerResourceLimitArgs:
    def __init__(__self__, *,
                 limits_cpu: Optional[pulumi.Input[str]] = None,
                 limits_memory: Optional[pulumi.Input[str]] = None,
                 requests_cpu: Optional[pulumi.Input[str]] = None,
                 requests_memory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] limits_cpu: Limit for limits cpu in project (string)
        :param pulumi.Input[str] limits_memory: Limit for limits memory in project (string)
        :param pulumi.Input[str] requests_cpu: Limit for requests cpu in project (string)
        :param pulumi.Input[str] requests_memory: Limit for requests memory in project (string)
        """
        ProjectContainerResourceLimitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            limits_cpu=limits_cpu,
            limits_memory=limits_memory,
            requests_cpu=requests_cpu,
            requests_memory=requests_memory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             limits_cpu: Optional[pulumi.Input[str]] = None,
             limits_memory: Optional[pulumi.Input[str]] = None,
             requests_cpu: Optional[pulumi.Input[str]] = None,
             requests_memory: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'limitsCpu' in kwargs:
            limits_cpu = kwargs['limitsCpu']
        if 'limitsMemory' in kwargs:
            limits_memory = kwargs['limitsMemory']
        if 'requestsCpu' in kwargs:
            requests_cpu = kwargs['requestsCpu']
        if 'requestsMemory' in kwargs:
            requests_memory = kwargs['requestsMemory']

        if limits_cpu is not None:
            _setter("limits_cpu", limits_cpu)
        if limits_memory is not None:
            _setter("limits_memory", limits_memory)
        if requests_cpu is not None:
            _setter("requests_cpu", requests_cpu)
        if requests_memory is not None:
            _setter("requests_memory", requests_memory)

    @property
    @pulumi.getter(name="limitsCpu")
    def limits_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits cpu in project (string)
        """
        return pulumi.get(self, "limits_cpu")

    @limits_cpu.setter
    def limits_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_cpu", value)

    @property
    @pulumi.getter(name="limitsMemory")
    def limits_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits memory in project (string)
        """
        return pulumi.get(self, "limits_memory")

    @limits_memory.setter
    def limits_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_memory", value)

    @property
    @pulumi.getter(name="requestsCpu")
    def requests_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests cpu in project (string)
        """
        return pulumi.get(self, "requests_cpu")

    @requests_cpu.setter
    def requests_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_cpu", value)

    @property
    @pulumi.getter(name="requestsMemory")
    def requests_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests memory in project (string)
        """
        return pulumi.get(self, "requests_memory")

    @requests_memory.setter
    def requests_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_memory", value)


@pulumi.input_type
class ProjectProjectMonitoringInputArgs:
    def __init__(__self__, *,
                 answers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] answers: Key/value answers for monitor input (map)
        :param pulumi.Input[str] version: rancher-monitoring chart version (string)
        """
        ProjectProjectMonitoringInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            answers=answers,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             answers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if answers is not None:
            _setter("answers", answers)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def answers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Key/value answers for monitor input (map)
        """
        return pulumi.get(self, "answers")

    @answers.setter
    def answers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "answers", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        rancher-monitoring chart version (string)
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ProjectResourceQuotaArgs:
    def __init__(__self__, *,
                 namespace_default_limit: pulumi.Input['ProjectResourceQuotaNamespaceDefaultLimitArgs'],
                 project_limit: pulumi.Input['ProjectResourceQuotaProjectLimitArgs']):
        """
        :param pulumi.Input['ProjectResourceQuotaNamespaceDefaultLimitArgs'] namespace_default_limit: Default resource quota limit for  namespaces in project (list maxitems:1)
        :param pulumi.Input['ProjectResourceQuotaProjectLimitArgs'] project_limit: Resource quota limit for project (list maxitems:1)
        """
        ProjectResourceQuotaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            namespace_default_limit=namespace_default_limit,
            project_limit=project_limit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             namespace_default_limit: pulumi.Input['ProjectResourceQuotaNamespaceDefaultLimitArgs'],
             project_limit: pulumi.Input['ProjectResourceQuotaProjectLimitArgs'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'namespaceDefaultLimit' in kwargs:
            namespace_default_limit = kwargs['namespaceDefaultLimit']
        if 'projectLimit' in kwargs:
            project_limit = kwargs['projectLimit']

        _setter("namespace_default_limit", namespace_default_limit)
        _setter("project_limit", project_limit)

    @property
    @pulumi.getter(name="namespaceDefaultLimit")
    def namespace_default_limit(self) -> pulumi.Input['ProjectResourceQuotaNamespaceDefaultLimitArgs']:
        """
        Default resource quota limit for  namespaces in project (list maxitems:1)
        """
        return pulumi.get(self, "namespace_default_limit")

    @namespace_default_limit.setter
    def namespace_default_limit(self, value: pulumi.Input['ProjectResourceQuotaNamespaceDefaultLimitArgs']):
        pulumi.set(self, "namespace_default_limit", value)

    @property
    @pulumi.getter(name="projectLimit")
    def project_limit(self) -> pulumi.Input['ProjectResourceQuotaProjectLimitArgs']:
        """
        Resource quota limit for project (list maxitems:1)
        """
        return pulumi.get(self, "project_limit")

    @project_limit.setter
    def project_limit(self, value: pulumi.Input['ProjectResourceQuotaProjectLimitArgs']):
        pulumi.set(self, "project_limit", value)


@pulumi.input_type
class ProjectResourceQuotaNamespaceDefaultLimitArgs:
    def __init__(__self__, *,
                 config_maps: Optional[pulumi.Input[str]] = None,
                 limits_cpu: Optional[pulumi.Input[str]] = None,
                 limits_memory: Optional[pulumi.Input[str]] = None,
                 persistent_volume_claims: Optional[pulumi.Input[str]] = None,
                 pods: Optional[pulumi.Input[str]] = None,
                 replication_controllers: Optional[pulumi.Input[str]] = None,
                 requests_cpu: Optional[pulumi.Input[str]] = None,
                 requests_memory: Optional[pulumi.Input[str]] = None,
                 requests_storage: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[str]] = None,
                 services_load_balancers: Optional[pulumi.Input[str]] = None,
                 services_node_ports: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] config_maps: Limit for config maps in project (string)
        :param pulumi.Input[str] limits_cpu: Limit for limits cpu in project (string)
        :param pulumi.Input[str] limits_memory: Limit for limits memory in project (string)
        :param pulumi.Input[str] persistent_volume_claims: Limit for persistent volume claims in project (string)
        :param pulumi.Input[str] pods: Limit for pods in project (string)
        :param pulumi.Input[str] replication_controllers: Limit for replication controllers in project (string)
        :param pulumi.Input[str] requests_cpu: Limit for requests cpu in project (string)
        :param pulumi.Input[str] requests_memory: Limit for requests memory in project (string)
        :param pulumi.Input[str] requests_storage: Limit for requests storage in project (string)
        :param pulumi.Input[str] secrets: Limit for secrets in project (string)
        :param pulumi.Input[str] services_load_balancers: Limit for services load balancers in project (string)
        :param pulumi.Input[str] services_node_ports: Limit for services node ports in project (string)
               
               More info at [resource-quotas](https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/projects-and-namespaces/resource-quotas/)
        """
        ProjectResourceQuotaNamespaceDefaultLimitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_maps=config_maps,
            limits_cpu=limits_cpu,
            limits_memory=limits_memory,
            persistent_volume_claims=persistent_volume_claims,
            pods=pods,
            replication_controllers=replication_controllers,
            requests_cpu=requests_cpu,
            requests_memory=requests_memory,
            requests_storage=requests_storage,
            secrets=secrets,
            services=services,
            services_load_balancers=services_load_balancers,
            services_node_ports=services_node_ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_maps: Optional[pulumi.Input[str]] = None,
             limits_cpu: Optional[pulumi.Input[str]] = None,
             limits_memory: Optional[pulumi.Input[str]] = None,
             persistent_volume_claims: Optional[pulumi.Input[str]] = None,
             pods: Optional[pulumi.Input[str]] = None,
             replication_controllers: Optional[pulumi.Input[str]] = None,
             requests_cpu: Optional[pulumi.Input[str]] = None,
             requests_memory: Optional[pulumi.Input[str]] = None,
             requests_storage: Optional[pulumi.Input[str]] = None,
             secrets: Optional[pulumi.Input[str]] = None,
             services: Optional[pulumi.Input[str]] = None,
             services_load_balancers: Optional[pulumi.Input[str]] = None,
             services_node_ports: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configMaps' in kwargs:
            config_maps = kwargs['configMaps']
        if 'limitsCpu' in kwargs:
            limits_cpu = kwargs['limitsCpu']
        if 'limitsMemory' in kwargs:
            limits_memory = kwargs['limitsMemory']
        if 'persistentVolumeClaims' in kwargs:
            persistent_volume_claims = kwargs['persistentVolumeClaims']
        if 'replicationControllers' in kwargs:
            replication_controllers = kwargs['replicationControllers']
        if 'requestsCpu' in kwargs:
            requests_cpu = kwargs['requestsCpu']
        if 'requestsMemory' in kwargs:
            requests_memory = kwargs['requestsMemory']
        if 'requestsStorage' in kwargs:
            requests_storage = kwargs['requestsStorage']
        if 'servicesLoadBalancers' in kwargs:
            services_load_balancers = kwargs['servicesLoadBalancers']
        if 'servicesNodePorts' in kwargs:
            services_node_ports = kwargs['servicesNodePorts']

        if config_maps is not None:
            _setter("config_maps", config_maps)
        if limits_cpu is not None:
            _setter("limits_cpu", limits_cpu)
        if limits_memory is not None:
            _setter("limits_memory", limits_memory)
        if persistent_volume_claims is not None:
            _setter("persistent_volume_claims", persistent_volume_claims)
        if pods is not None:
            _setter("pods", pods)
        if replication_controllers is not None:
            _setter("replication_controllers", replication_controllers)
        if requests_cpu is not None:
            _setter("requests_cpu", requests_cpu)
        if requests_memory is not None:
            _setter("requests_memory", requests_memory)
        if requests_storage is not None:
            _setter("requests_storage", requests_storage)
        if secrets is not None:
            _setter("secrets", secrets)
        if services is not None:
            _setter("services", services)
        if services_load_balancers is not None:
            _setter("services_load_balancers", services_load_balancers)
        if services_node_ports is not None:
            _setter("services_node_ports", services_node_ports)

    @property
    @pulumi.getter(name="configMaps")
    def config_maps(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for config maps in project (string)
        """
        return pulumi.get(self, "config_maps")

    @config_maps.setter
    def config_maps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_maps", value)

    @property
    @pulumi.getter(name="limitsCpu")
    def limits_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits cpu in project (string)
        """
        return pulumi.get(self, "limits_cpu")

    @limits_cpu.setter
    def limits_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_cpu", value)

    @property
    @pulumi.getter(name="limitsMemory")
    def limits_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits memory in project (string)
        """
        return pulumi.get(self, "limits_memory")

    @limits_memory.setter
    def limits_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_memory", value)

    @property
    @pulumi.getter(name="persistentVolumeClaims")
    def persistent_volume_claims(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for persistent volume claims in project (string)
        """
        return pulumi.get(self, "persistent_volume_claims")

    @persistent_volume_claims.setter
    def persistent_volume_claims(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_volume_claims", value)

    @property
    @pulumi.getter
    def pods(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for pods in project (string)
        """
        return pulumi.get(self, "pods")

    @pods.setter
    def pods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pods", value)

    @property
    @pulumi.getter(name="replicationControllers")
    def replication_controllers(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for replication controllers in project (string)
        """
        return pulumi.get(self, "replication_controllers")

    @replication_controllers.setter
    def replication_controllers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_controllers", value)

    @property
    @pulumi.getter(name="requestsCpu")
    def requests_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests cpu in project (string)
        """
        return pulumi.get(self, "requests_cpu")

    @requests_cpu.setter
    def requests_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_cpu", value)

    @property
    @pulumi.getter(name="requestsMemory")
    def requests_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests memory in project (string)
        """
        return pulumi.get(self, "requests_memory")

    @requests_memory.setter
    def requests_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_memory", value)

    @property
    @pulumi.getter(name="requestsStorage")
    def requests_storage(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests storage in project (string)
        """
        return pulumi.get(self, "requests_storage")

    @requests_storage.setter
    def requests_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_storage", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for secrets in project (string)
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="servicesLoadBalancers")
    def services_load_balancers(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for services load balancers in project (string)
        """
        return pulumi.get(self, "services_load_balancers")

    @services_load_balancers.setter
    def services_load_balancers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_load_balancers", value)

    @property
    @pulumi.getter(name="servicesNodePorts")
    def services_node_ports(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for services node ports in project (string)

        More info at [resource-quotas](https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/projects-and-namespaces/resource-quotas/)
        """
        return pulumi.get(self, "services_node_ports")

    @services_node_ports.setter
    def services_node_ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_node_ports", value)


@pulumi.input_type
class ProjectResourceQuotaProjectLimitArgs:
    def __init__(__self__, *,
                 config_maps: Optional[pulumi.Input[str]] = None,
                 limits_cpu: Optional[pulumi.Input[str]] = None,
                 limits_memory: Optional[pulumi.Input[str]] = None,
                 persistent_volume_claims: Optional[pulumi.Input[str]] = None,
                 pods: Optional[pulumi.Input[str]] = None,
                 replication_controllers: Optional[pulumi.Input[str]] = None,
                 requests_cpu: Optional[pulumi.Input[str]] = None,
                 requests_memory: Optional[pulumi.Input[str]] = None,
                 requests_storage: Optional[pulumi.Input[str]] = None,
                 secrets: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[str]] = None,
                 services_load_balancers: Optional[pulumi.Input[str]] = None,
                 services_node_ports: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] config_maps: Limit for config maps in project (string)
        :param pulumi.Input[str] limits_cpu: Limit for limits cpu in project (string)
        :param pulumi.Input[str] limits_memory: Limit for limits memory in project (string)
        :param pulumi.Input[str] persistent_volume_claims: Limit for persistent volume claims in project (string)
        :param pulumi.Input[str] pods: Limit for pods in project (string)
        :param pulumi.Input[str] replication_controllers: Limit for replication controllers in project (string)
        :param pulumi.Input[str] requests_cpu: Limit for requests cpu in project (string)
        :param pulumi.Input[str] requests_memory: Limit for requests memory in project (string)
        :param pulumi.Input[str] requests_storage: Limit for requests storage in project (string)
        :param pulumi.Input[str] secrets: Limit for secrets in project (string)
        :param pulumi.Input[str] services_load_balancers: Limit for services load balancers in project (string)
        :param pulumi.Input[str] services_node_ports: Limit for services node ports in project (string)
               
               More info at [resource-quotas](https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/projects-and-namespaces/resource-quotas/)
        """
        ProjectResourceQuotaProjectLimitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            config_maps=config_maps,
            limits_cpu=limits_cpu,
            limits_memory=limits_memory,
            persistent_volume_claims=persistent_volume_claims,
            pods=pods,
            replication_controllers=replication_controllers,
            requests_cpu=requests_cpu,
            requests_memory=requests_memory,
            requests_storage=requests_storage,
            secrets=secrets,
            services=services,
            services_load_balancers=services_load_balancers,
            services_node_ports=services_node_ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             config_maps: Optional[pulumi.Input[str]] = None,
             limits_cpu: Optional[pulumi.Input[str]] = None,
             limits_memory: Optional[pulumi.Input[str]] = None,
             persistent_volume_claims: Optional[pulumi.Input[str]] = None,
             pods: Optional[pulumi.Input[str]] = None,
             replication_controllers: Optional[pulumi.Input[str]] = None,
             requests_cpu: Optional[pulumi.Input[str]] = None,
             requests_memory: Optional[pulumi.Input[str]] = None,
             requests_storage: Optional[pulumi.Input[str]] = None,
             secrets: Optional[pulumi.Input[str]] = None,
             services: Optional[pulumi.Input[str]] = None,
             services_load_balancers: Optional[pulumi.Input[str]] = None,
             services_node_ports: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'configMaps' in kwargs:
            config_maps = kwargs['configMaps']
        if 'limitsCpu' in kwargs:
            limits_cpu = kwargs['limitsCpu']
        if 'limitsMemory' in kwargs:
            limits_memory = kwargs['limitsMemory']
        if 'persistentVolumeClaims' in kwargs:
            persistent_volume_claims = kwargs['persistentVolumeClaims']
        if 'replicationControllers' in kwargs:
            replication_controllers = kwargs['replicationControllers']
        if 'requestsCpu' in kwargs:
            requests_cpu = kwargs['requestsCpu']
        if 'requestsMemory' in kwargs:
            requests_memory = kwargs['requestsMemory']
        if 'requestsStorage' in kwargs:
            requests_storage = kwargs['requestsStorage']
        if 'servicesLoadBalancers' in kwargs:
            services_load_balancers = kwargs['servicesLoadBalancers']
        if 'servicesNodePorts' in kwargs:
            services_node_ports = kwargs['servicesNodePorts']

        if config_maps is not None:
            _setter("config_maps", config_maps)
        if limits_cpu is not None:
            _setter("limits_cpu", limits_cpu)
        if limits_memory is not None:
            _setter("limits_memory", limits_memory)
        if persistent_volume_claims is not None:
            _setter("persistent_volume_claims", persistent_volume_claims)
        if pods is not None:
            _setter("pods", pods)
        if replication_controllers is not None:
            _setter("replication_controllers", replication_controllers)
        if requests_cpu is not None:
            _setter("requests_cpu", requests_cpu)
        if requests_memory is not None:
            _setter("requests_memory", requests_memory)
        if requests_storage is not None:
            _setter("requests_storage", requests_storage)
        if secrets is not None:
            _setter("secrets", secrets)
        if services is not None:
            _setter("services", services)
        if services_load_balancers is not None:
            _setter("services_load_balancers", services_load_balancers)
        if services_node_ports is not None:
            _setter("services_node_ports", services_node_ports)

    @property
    @pulumi.getter(name="configMaps")
    def config_maps(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for config maps in project (string)
        """
        return pulumi.get(self, "config_maps")

    @config_maps.setter
    def config_maps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_maps", value)

    @property
    @pulumi.getter(name="limitsCpu")
    def limits_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits cpu in project (string)
        """
        return pulumi.get(self, "limits_cpu")

    @limits_cpu.setter
    def limits_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_cpu", value)

    @property
    @pulumi.getter(name="limitsMemory")
    def limits_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for limits memory in project (string)
        """
        return pulumi.get(self, "limits_memory")

    @limits_memory.setter
    def limits_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limits_memory", value)

    @property
    @pulumi.getter(name="persistentVolumeClaims")
    def persistent_volume_claims(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for persistent volume claims in project (string)
        """
        return pulumi.get(self, "persistent_volume_claims")

    @persistent_volume_claims.setter
    def persistent_volume_claims(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistent_volume_claims", value)

    @property
    @pulumi.getter
    def pods(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for pods in project (string)
        """
        return pulumi.get(self, "pods")

    @pods.setter
    def pods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pods", value)

    @property
    @pulumi.getter(name="replicationControllers")
    def replication_controllers(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for replication controllers in project (string)
        """
        return pulumi.get(self, "replication_controllers")

    @replication_controllers.setter
    def replication_controllers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_controllers", value)

    @property
    @pulumi.getter(name="requestsCpu")
    def requests_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests cpu in project (string)
        """
        return pulumi.get(self, "requests_cpu")

    @requests_cpu.setter
    def requests_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_cpu", value)

    @property
    @pulumi.getter(name="requestsMemory")
    def requests_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests memory in project (string)
        """
        return pulumi.get(self, "requests_memory")

    @requests_memory.setter
    def requests_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_memory", value)

    @property
    @pulumi.getter(name="requestsStorage")
    def requests_storage(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for requests storage in project (string)
        """
        return pulumi.get(self, "requests_storage")

    @requests_storage.setter
    def requests_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "requests_storage", value)

    @property
    @pulumi.getter
    def secrets(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for secrets in project (string)
        """
        return pulumi.get(self, "secrets")

    @secrets.setter
    def secrets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secrets", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="servicesLoadBalancers")
    def services_load_balancers(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for services load balancers in project (string)
        """
        return pulumi.get(self, "services_load_balancers")

    @services_load_balancers.setter
    def services_load_balancers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_load_balancers", value)

    @property
    @pulumi.getter(name="servicesNodePorts")
    def services_node_ports(self) -> Optional[pulumi.Input[str]]:
        """
        Limit for services node ports in project (string)

        More info at [resource-quotas](https://rancher.com/docs/rancher/v2.x/en/k8s-in-rancher/projects-and-namespaces/resource-quotas/)
        """
        return pulumi.get(self, "services_node_ports")

    @services_node_ports.setter
    def services_node_ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services_node_ports", value)


@pulumi.input_type
class RegistryRegistryArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Address for registry.
        :param pulumi.Input[str] password: Password for the registry (string)
        :param pulumi.Input[str] username: Username for the registry (string)
        """
        RegistryRegistryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address=address,
            password=password,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address: pulumi.Input[str],
             password: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("address", address)
        if password is not None:
            _setter("password", password)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        Address for registry.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the registry (string)
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for the registry (string)
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class RoleTempalteRuleArgs:
    def __init__(__self__, *,
                 api_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 non_resource_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 verbs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] api_groups: Policy rule api groups (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] non_resource_urls: Policy rule non resource urls (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_names: Policy rule resource names (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources: Policy rule resources (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] verbs: Policy rule verbs. `bind`, `create`, `delete`, `deletecollection`, `escalate`, `get`, `impersonate`, `list`, `patch`, `update`, `use`, `view`, `watch`, `own` and `*` values are supported (list)
        """
        RoleTempalteRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_groups=api_groups,
            non_resource_urls=non_resource_urls,
            resource_names=resource_names,
            resources=resources,
            verbs=verbs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             non_resource_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resource_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             verbs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiGroups' in kwargs:
            api_groups = kwargs['apiGroups']
        if 'nonResourceUrls' in kwargs:
            non_resource_urls = kwargs['nonResourceUrls']
        if 'resourceNames' in kwargs:
            resource_names = kwargs['resourceNames']

        if api_groups is not None:
            _setter("api_groups", api_groups)
        if non_resource_urls is not None:
            _setter("non_resource_urls", non_resource_urls)
        if resource_names is not None:
            _setter("resource_names", resource_names)
        if resources is not None:
            _setter("resources", resources)
        if verbs is not None:
            _setter("verbs", verbs)

    @property
    @pulumi.getter(name="apiGroups")
    def api_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule api groups (list)
        """
        return pulumi.get(self, "api_groups")

    @api_groups.setter
    def api_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "api_groups", value)

    @property
    @pulumi.getter(name="nonResourceUrls")
    def non_resource_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule non resource urls (list)
        """
        return pulumi.get(self, "non_resource_urls")

    @non_resource_urls.setter
    def non_resource_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "non_resource_urls", value)

    @property
    @pulumi.getter(name="resourceNames")
    def resource_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule resource names (list)
        """
        return pulumi.get(self, "resource_names")

    @resource_names.setter
    def resource_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_names", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule resources (list)
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def verbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule verbs. `bind`, `create`, `delete`, `deletecollection`, `escalate`, `get`, `impersonate`, `list`, `patch`, `update`, `use`, `view`, `watch`, `own` and `*` values are supported (list)
        """
        return pulumi.get(self, "verbs")

    @verbs.setter
    def verbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "verbs", value)


@pulumi.input_type
class RoleTemplateRuleArgs:
    def __init__(__self__, *,
                 api_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 non_resource_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 verbs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] api_groups: Policy rule api groups (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] non_resource_urls: Policy rule non resource urls (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_names: Policy rule resource names (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources: Policy rule resources (list)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] verbs: Policy rule verbs. `bind`, `create`, `delete`, `deletecollection`, `escalate`, `get`, `impersonate`, `list`, `patch`, `update`, `use`, `view`, `watch`, `own` and `*` values are supported (list)
        """
        RoleTemplateRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_groups=api_groups,
            non_resource_urls=non_resource_urls,
            resource_names=resource_names,
            resources=resources,
            verbs=verbs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             non_resource_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resource_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             verbs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'apiGroups' in kwargs:
            api_groups = kwargs['apiGroups']
        if 'nonResourceUrls' in kwargs:
            non_resource_urls = kwargs['nonResourceUrls']
        if 'resourceNames' in kwargs:
            resource_names = kwargs['resourceNames']

        if api_groups is not None:
            _setter("api_groups", api_groups)
        if non_resource_urls is not None:
            _setter("non_resource_urls", non_resource_urls)
        if resource_names is not None:
            _setter("resource_names", resource_names)
        if resources is not None:
            _setter("resources", resources)
        if verbs is not None:
            _setter("verbs", verbs)

    @property
    @pulumi.getter(name="apiGroups")
    def api_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule api groups (list)
        """
        return pulumi.get(self, "api_groups")

    @api_groups.setter
    def api_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "api_groups", value)

    @property
    @pulumi.getter(name="nonResourceUrls")
    def non_resource_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule non resource urls (list)
        """
        return pulumi.get(self, "non_resource_urls")

    @non_resource_urls.setter
    def non_resource_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "non_resource_urls", value)

    @property
    @pulumi.getter(name="resourceNames")
    def resource_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule resource names (list)
        """
        return pulumi.get(self, "resource_names")

    @resource_names.setter
    def resource_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_names", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule resources (list)
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def verbs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Policy rule verbs. `bind`, `create`, `delete`, `deletecollection`, `escalate`, `get`, `impersonate`, `list`, `patch`, `update`, `use`, `view`, `watch`, `own` and `*` values are supported (list)
        """
        return pulumi.get(self, "verbs")

    @verbs.setter
    def verbs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "verbs", value)


@pulumi.input_type
class GetNotifierDingtalkConfigArgs:
    def __init__(__self__, *,
                 url: str,
                 proxy_url: Optional[str] = None,
                 secret: Optional[str] = None):
        GetNotifierDingtalkConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            proxy_url=proxy_url,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             proxy_url: Optional[str] = None,
             secret: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'proxyUrl' in kwargs:
            proxy_url = kwargs['proxyUrl']

        _setter("url", url)
        if proxy_url is not None:
            _setter("proxy_url", proxy_url)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: str):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[str]:
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[str]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[str]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class GetNotifierMsteamsConfigArgs:
    def __init__(__self__, *,
                 url: str,
                 proxy_url: Optional[str] = None):
        GetNotifierMsteamsConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            proxy_url=proxy_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             proxy_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'proxyUrl' in kwargs:
            proxy_url = kwargs['proxyUrl']

        _setter("url", url)
        if proxy_url is not None:
            _setter("proxy_url", proxy_url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: str):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[str]:
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[str]):
        pulumi.set(self, "proxy_url", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateAllowedCsiDriverArgs:
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name of the PodSecurityPolicyTemplate (string)
        """
        GetPodSecurityPolicyTemplateAllowedCsiDriverArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the PodSecurityPolicyTemplate (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateAllowedFlexVolumeArgs:
    def __init__(__self__, *,
                 driver: str):
        GetPodSecurityPolicyTemplateAllowedFlexVolumeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            driver=driver,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             driver: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("driver", driver)

    @property
    @pulumi.getter
    def driver(self) -> str:
        return pulumi.get(self, "driver")

    @driver.setter
    def driver(self, value: str):
        pulumi.set(self, "driver", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateAllowedHostPathArgs:
    def __init__(__self__, *,
                 path_prefix: str,
                 read_only: Optional[bool] = None):
        GetPodSecurityPolicyTemplateAllowedHostPathArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path_prefix=path_prefix,
            read_only=read_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path_prefix: str,
             read_only: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'pathPrefix' in kwargs:
            path_prefix = kwargs['pathPrefix']
        if 'readOnly' in kwargs:
            read_only = kwargs['readOnly']

        _setter("path_prefix", path_prefix)
        if read_only is not None:
            _setter("read_only", read_only)

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> str:
        return pulumi.get(self, "path_prefix")

    @path_prefix.setter
    def path_prefix(self, value: str):
        pulumi.set(self, "path_prefix", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[bool]):
        pulumi.set(self, "read_only", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateFsGroupArgs:
    def __init__(__self__, *,
                 ranges: Sequence['GetPodSecurityPolicyTemplateFsGroupRangeArgs'],
                 rule: Optional[str] = None):
        GetPodSecurityPolicyTemplateFsGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ranges=ranges,
            rule=rule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ranges: Sequence['GetPodSecurityPolicyTemplateFsGroupRangeArgs'],
             rule: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("ranges", ranges)
        if rule is not None:
            _setter("rule", rule)

    @property
    @pulumi.getter
    def ranges(self) -> Sequence['GetPodSecurityPolicyTemplateFsGroupRangeArgs']:
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Sequence['GetPodSecurityPolicyTemplateFsGroupRangeArgs']):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[str]):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateFsGroupRangeArgs:
    def __init__(__self__, *,
                 max: int,
                 min: int):
        GetPodSecurityPolicyTemplateFsGroupRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: int,
             min: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: int):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: int):
        pulumi.set(self, "min", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateHostPortArgs:
    def __init__(__self__, *,
                 max: int,
                 min: int):
        GetPodSecurityPolicyTemplateHostPortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: int,
             min: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: int):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: int):
        pulumi.set(self, "min", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateRunAsGroupArgs:
    def __init__(__self__, *,
                 rule: str,
                 ranges: Optional[Sequence['GetPodSecurityPolicyTemplateRunAsGroupRangeArgs']] = None):
        GetPodSecurityPolicyTemplateRunAsGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule=rule,
            ranges=ranges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule: str,
             ranges: Optional[Sequence['GetPodSecurityPolicyTemplateRunAsGroupRangeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("rule", rule)
        if ranges is not None:
            _setter("ranges", ranges)

    @property
    @pulumi.getter
    def rule(self) -> str:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: str):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['GetPodSecurityPolicyTemplateRunAsGroupRangeArgs']]:
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[Sequence['GetPodSecurityPolicyTemplateRunAsGroupRangeArgs']]):
        pulumi.set(self, "ranges", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateRunAsGroupRangeArgs:
    def __init__(__self__, *,
                 max: int,
                 min: int):
        GetPodSecurityPolicyTemplateRunAsGroupRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: int,
             min: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: int):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: int):
        pulumi.set(self, "min", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateRunAsUserArgs:
    def __init__(__self__, *,
                 rule: str,
                 ranges: Optional[Sequence['GetPodSecurityPolicyTemplateRunAsUserRangeArgs']] = None):
        GetPodSecurityPolicyTemplateRunAsUserArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule=rule,
            ranges=ranges,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule: str,
             ranges: Optional[Sequence['GetPodSecurityPolicyTemplateRunAsUserRangeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("rule", rule)
        if ranges is not None:
            _setter("ranges", ranges)

    @property
    @pulumi.getter
    def rule(self) -> str:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: str):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence['GetPodSecurityPolicyTemplateRunAsUserRangeArgs']]:
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[Sequence['GetPodSecurityPolicyTemplateRunAsUserRangeArgs']]):
        pulumi.set(self, "ranges", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateRunAsUserRangeArgs:
    def __init__(__self__, *,
                 max: int,
                 min: int):
        GetPodSecurityPolicyTemplateRunAsUserRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: int,
             min: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: int):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: int):
        pulumi.set(self, "min", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateRuntimeClassArgs:
    def __init__(__self__, *,
                 allowed_runtime_class_names: Sequence[str],
                 default_runtime_class_name: Optional[str] = None):
        GetPodSecurityPolicyTemplateRuntimeClassArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_runtime_class_names=allowed_runtime_class_names,
            default_runtime_class_name=default_runtime_class_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_runtime_class_names: Sequence[str],
             default_runtime_class_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedRuntimeClassNames' in kwargs:
            allowed_runtime_class_names = kwargs['allowedRuntimeClassNames']
        if 'defaultRuntimeClassName' in kwargs:
            default_runtime_class_name = kwargs['defaultRuntimeClassName']

        _setter("allowed_runtime_class_names", allowed_runtime_class_names)
        if default_runtime_class_name is not None:
            _setter("default_runtime_class_name", default_runtime_class_name)

    @property
    @pulumi.getter(name="allowedRuntimeClassNames")
    def allowed_runtime_class_names(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_runtime_class_names")

    @allowed_runtime_class_names.setter
    def allowed_runtime_class_names(self, value: Sequence[str]):
        pulumi.set(self, "allowed_runtime_class_names", value)

    @property
    @pulumi.getter(name="defaultRuntimeClassName")
    def default_runtime_class_name(self) -> Optional[str]:
        return pulumi.get(self, "default_runtime_class_name")

    @default_runtime_class_name.setter
    def default_runtime_class_name(self, value: Optional[str]):
        pulumi.set(self, "default_runtime_class_name", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateSeLinuxArgs:
    def __init__(__self__, *,
                 rule: str,
                 se_linux_option: Optional['GetPodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs'] = None):
        GetPodSecurityPolicyTemplateSeLinuxArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule=rule,
            se_linux_option=se_linux_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule: str,
             se_linux_option: Optional['GetPodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'seLinuxOption' in kwargs:
            se_linux_option = kwargs['seLinuxOption']

        _setter("rule", rule)
        if se_linux_option is not None:
            _setter("se_linux_option", se_linux_option)

    @property
    @pulumi.getter
    def rule(self) -> str:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: str):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="seLinuxOption")
    def se_linux_option(self) -> Optional['GetPodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs']:
        return pulumi.get(self, "se_linux_option")

    @se_linux_option.setter
    def se_linux_option(self, value: Optional['GetPodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs']):
        pulumi.set(self, "se_linux_option", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs:
    def __init__(__self__, *,
                 level: Optional[str] = None,
                 role: Optional[str] = None,
                 type: Optional[str] = None,
                 user: Optional[str] = None):
        GetPodSecurityPolicyTemplateSeLinuxSeLinuxOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            level=level,
            role=role,
            type=type,
            user=user,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             level: Optional[str] = None,
             role: Optional[str] = None,
             type: Optional[str] = None,
             user: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if level is not None:
            _setter("level", level)
        if role is not None:
            _setter("role", role)
        if type is not None:
            _setter("type", type)
        if user is not None:
            _setter("user", user)

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[str]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateSupplementalGroupArgs:
    def __init__(__self__, *,
                 ranges: Sequence['GetPodSecurityPolicyTemplateSupplementalGroupRangeArgs'],
                 rule: Optional[str] = None):
        GetPodSecurityPolicyTemplateSupplementalGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ranges=ranges,
            rule=rule,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ranges: Sequence['GetPodSecurityPolicyTemplateSupplementalGroupRangeArgs'],
             rule: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("ranges", ranges)
        if rule is not None:
            _setter("rule", rule)

    @property
    @pulumi.getter
    def ranges(self) -> Sequence['GetPodSecurityPolicyTemplateSupplementalGroupRangeArgs']:
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Sequence['GetPodSecurityPolicyTemplateSupplementalGroupRangeArgs']):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[str]):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class GetPodSecurityPolicyTemplateSupplementalGroupRangeArgs:
    def __init__(__self__, *,
                 max: int,
                 min: int):
        GetPodSecurityPolicyTemplateSupplementalGroupRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: int,
             min: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("max", max)
        _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: int):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: int):
        pulumi.set(self, "min", value)


