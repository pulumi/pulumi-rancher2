# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetClusterScanResult:
    """
    A collection of values returned by getClusterScan.
    """
    def __init__(__self__, annotations=None, cluster_id=None, id=None, labels=None, name=None, run_type=None, scan_config=None, scan_type=None, status=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        __self__.annotations = annotations
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        __self__.cluster_id = cluster_id
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        __self__.labels = labels
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if run_type and not isinstance(run_type, str):
            raise TypeError("Expected argument 'run_type' to be a str")
        __self__.run_type = run_type
        if scan_config and not isinstance(scan_config, dict):
            raise TypeError("Expected argument 'scan_config' to be a dict")
        __self__.scan_config = scan_config
        if scan_type and not isinstance(scan_type, str):
            raise TypeError("Expected argument 'scan_type' to be a str")
        __self__.scan_type = scan_type
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
class AwaitableGetClusterScanResult(GetClusterScanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterScanResult(
            annotations=self.annotations,
            cluster_id=self.cluster_id,
            id=self.id,
            labels=self.labels,
            name=self.name,
            run_type=self.run_type,
            scan_config=self.scan_config,
            scan_type=self.scan_type,
            status=self.status)

def get_cluster_scan(cluster_id=None,name=None,opts=None):
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()


    __args__['clusterId'] = cluster_id
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('rancher2:index/getClusterScan:getClusterScan', __args__, opts=opts).value

    return AwaitableGetClusterScanResult(
        annotations=__ret__.get('annotations'),
        cluster_id=__ret__.get('clusterId'),
        id=__ret__.get('id'),
        labels=__ret__.get('labels'),
        name=__ret__.get('name'),
        run_type=__ret__.get('runType'),
        scan_config=__ret__.get('scanConfig'),
        scan_type=__ret__.get('scanType'),
        status=__ret__.get('status'))
