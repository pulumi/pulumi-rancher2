# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetCatalogResult:
    """
    A collection of values returned by getCatalog.
    """
    def __init__(__self__, annotations=None, branch=None, cluster_id=None, description=None, id=None, kind=None, labels=None, name=None, password=None, project_id=None, scope=None, url=None, username=None, version=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        __self__.annotations = annotations
        """
        (Computed) Annotations for the catalog (map)
        """
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        __self__.branch = branch
        """
        (Computed) The branch of the catalog repo to use (string)
        """
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        __self__.cluster_id = cluster_id
        """
        (Computed) The cluster id of the catalog (string)
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        (Computed) A catalog description (string)
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        __self__.kind = kind
        """
        (Computed) The kind of the catalog. Just helm by the moment (string)
        """
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        __self__.labels = labels
        """
        (Computed) Labels for the catalog (map)
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        __self__.password = password
        """
        (Computed/Sensitive) The password to access the catalog if needed (string)
        """
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        """
        (Computed) The project id of the catalog (string)
        """
        if scope and not isinstance(scope, str):
            raise TypeError("Expected argument 'scope' to be a str")
        __self__.scope = scope
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        __self__.url = url
        """
        (Computed) The url of the catalog repo (string)
        """
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        __self__.username = username
        """
        (Computed/Sensitive) The username to access the catalog if needed (string)
        """
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        __self__.version = version
        """
        (Computed) Helm version for the catalog (string)
        """
class AwaitableGetCatalogResult(GetCatalogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCatalogResult(
            annotations=self.annotations,
            branch=self.branch,
            cluster_id=self.cluster_id,
            description=self.description,
            id=self.id,
            kind=self.kind,
            labels=self.labels,
            name=self.name,
            password=self.password,
            project_id=self.project_id,
            scope=self.scope,
            url=self.url,
            username=self.username,
            version=self.version)

def get_catalog(name=None,scope=None,opts=None):
    """
    Use this data source to retrieve information about a Rancher v2 catalog.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_rancher2 as rancher2

    library = rancher2.get_catalog(name="catalog")
    ```



    :param str name: The catalog name.
    :param str scope: The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
    """
    __args__ = dict()


    __args__['name'] = name
    __args__['scope'] = scope
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('rancher2:index/getCatalog:getCatalog', __args__, opts=opts).value

    return AwaitableGetCatalogResult(
        annotations=__ret__.get('annotations'),
        branch=__ret__.get('branch'),
        cluster_id=__ret__.get('clusterId'),
        description=__ret__.get('description'),
        id=__ret__.get('id'),
        kind=__ret__.get('kind'),
        labels=__ret__.get('labels'),
        name=__ret__.get('name'),
        password=__ret__.get('password'),
        project_id=__ret__.get('projectId'),
        scope=__ret__.get('scope'),
        url=__ret__.get('url'),
        username=__ret__.get('username'),
        version=__ret__.get('version'))
