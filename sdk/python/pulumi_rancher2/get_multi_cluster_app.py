# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetMultiClusterAppResult:
    """
    A collection of values returned by getMultiClusterApp.
    """
    def __init__(__self__, annotations=None, answers=None, catalog_name=None, id=None, labels=None, members=None, name=None, revision_history_limit=None, revision_id=None, roles=None, targets=None, template_name=None, template_version=None, template_version_id=None, upgrade_strategies=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        __self__.annotations = annotations
        """
        (Computed) Annotations for multi cluster app object (map)
        """
        if answers and not isinstance(answers, list):
            raise TypeError("Expected argument 'answers' to be a list")
        __self__.answers = answers
        """
        (Computed) The multi cluster app answers (list)
        """
        if catalog_name and not isinstance(catalog_name, str):
            raise TypeError("Expected argument 'catalog_name' to be a str")
        __self__.catalog_name = catalog_name
        """
        (Computed) The multi cluster app catalog name (string)
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        __self__.labels = labels
        """
        (Computed) Labels for multi cluster app object (map)
        """
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        __self__.members = members
        """
        (Computed) The multi cluster app members (list)
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if revision_history_limit and not isinstance(revision_history_limit, float):
            raise TypeError("Expected argument 'revision_history_limit' to be a float")
        __self__.revision_history_limit = revision_history_limit
        """
        (Computed) The multi cluster app revision history limit (int)
        """
        if revision_id and not isinstance(revision_id, str):
            raise TypeError("Expected argument 'revision_id' to be a str")
        __self__.revision_id = revision_id
        """
        (Computed) Current revision id for the multi cluster app (string)
        """
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        __self__.roles = roles
        """
        (Computed) The multi cluster app roles (list)
        """
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        __self__.targets = targets
        """
        (Computed) The multi cluster app target projects (list)
        """
        if template_name and not isinstance(template_name, str):
            raise TypeError("Expected argument 'template_name' to be a str")
        __self__.template_name = template_name
        """
        (Computed) The multi cluster app template name (string)
        """
        if template_version and not isinstance(template_version, str):
            raise TypeError("Expected argument 'template_version' to be a str")
        __self__.template_version = template_version
        """
        (Computed) The multi cluster app template version (string)
        """
        if template_version_id and not isinstance(template_version_id, str):
            raise TypeError("Expected argument 'template_version_id' to be a str")
        __self__.template_version_id = template_version_id
        """
        (Computed) The multi cluster app template version ID (string)
        """
        if upgrade_strategies and not isinstance(upgrade_strategies, list):
            raise TypeError("Expected argument 'upgrade_strategies' to be a list")
        __self__.upgrade_strategies = upgrade_strategies
        """
        (Computed) The multi cluster app upgrade strategy (list)
        """
class AwaitableGetMultiClusterAppResult(GetMultiClusterAppResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMultiClusterAppResult(
            annotations=self.annotations,
            answers=self.answers,
            catalog_name=self.catalog_name,
            id=self.id,
            labels=self.labels,
            members=self.members,
            name=self.name,
            revision_history_limit=self.revision_history_limit,
            revision_id=self.revision_id,
            roles=self.roles,
            targets=self.targets,
            template_name=self.template_name,
            template_version=self.template_version,
            template_version_id=self.template_version_id,
            upgrade_strategies=self.upgrade_strategies)

def get_multi_cluster_app(name=None,opts=None):
    """
    Use this data source to retrieve information about a Rancher v2 multi cluster app.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_rancher2 as rancher2

    foo = rancher2.get_multi_cluster_app(name="foo")
    ```



    :param str name: The multi cluster app name (string)
    """
    __args__ = dict()


    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('rancher2:index/getMultiClusterApp:getMultiClusterApp', __args__, opts=opts).value

    return AwaitableGetMultiClusterAppResult(
        annotations=__ret__.get('annotations'),
        answers=__ret__.get('answers'),
        catalog_name=__ret__.get('catalogName'),
        id=__ret__.get('id'),
        labels=__ret__.get('labels'),
        members=__ret__.get('members'),
        name=__ret__.get('name'),
        revision_history_limit=__ret__.get('revisionHistoryLimit'),
        revision_id=__ret__.get('revisionId'),
        roles=__ret__.get('roles'),
        targets=__ret__.get('targets'),
        template_name=__ret__.get('templateName'),
        template_version=__ret__.get('templateVersion'),
        template_version_id=__ret__.get('templateVersionId'),
        upgrade_strategies=__ret__.get('upgradeStrategies'))
