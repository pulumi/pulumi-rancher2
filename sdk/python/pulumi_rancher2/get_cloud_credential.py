# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetCloudCredentialResult:
    """
    A collection of values returned by getCloudCredential.
    """
    def __init__(__self__, annotations=None, id=None, labels=None, name=None):
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        __self__.annotations = annotations
        """
        (Computed) Annotations for the Cloud Credential (map)
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        __self__.labels = labels
        """
        (Computed) Labels for the Cloud Credential (map)
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
class AwaitableGetCloudCredentialResult(GetCloudCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudCredentialResult(
            annotations=self.annotations,
            id=self.id,
            labels=self.labels,
            name=self.name)

def get_cloud_credential(name=None,opts=None):
    """
    Use this data source to retrieve information about a Rancher v2 Cloud Credential.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_rancher2 as rancher2

    test = rancher2.get_cloud_credential(name="test")
    ```



    :param str name: The Cloud Credential name.
    """
    __args__ = dict()


    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('rancher2:index/getCloudCredential:getCloudCredential', __args__, opts=opts).value

    return AwaitableGetCloudCredentialResult(
        annotations=__ret__.get('annotations'),
        id=__ret__.get('id'),
        labels=__ret__.get('labels'),
        name=__ret__.get('name'))
