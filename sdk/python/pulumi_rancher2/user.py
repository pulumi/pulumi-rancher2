# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class User(pulumi.CustomResource):
    annotations: pulumi.Output[dict]
    """
    Annotations for global role binding (map)
    """
    enabled: pulumi.Output[bool]
    labels: pulumi.Output[dict]
    """
    Labels for global role binding (map)
    """
    name: pulumi.Output[str]
    """
    The user full name (string)
    """
    password: pulumi.Output[str]
    """
    The user password (string)
    """
    principal_ids: pulumi.Output[list]
    """
    (Computed) The user principal IDs (list)
    """
    username: pulumi.Output[str]
    """
    The user username (string)
    """
    def __init__(__self__, resource_name, opts=None, annotations=None, enabled=None, labels=None, name=None, password=None, username=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Rancher v2 User resource. This can be used to create Users for Rancher v2 environments and retrieve their information.

        When a Rancher User is created, it doesn't have a global role binding. At least, `user-base` global role binding in needed in order to enable user login.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        # Create a new rancher2 User
        foo_user = rancher2.User("fooUser",
            enabled=True,
            password="changeme",
            username="foo")
        # Create a new rancher2 global_role_binding for User
        foo_global_role_binding = rancher2.GlobalRoleBinding("fooGlobalRoleBinding",
            global_role_id="user-base",
            user_id=foo_user.id)
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] annotations: Annotations for global role binding (map)
        :param pulumi.Input[dict] labels: Labels for global role binding (map)
        :param pulumi.Input[str] name: The user full name (string)
        :param pulumi.Input[str] password: The user password (string)
        :param pulumi.Input[str] username: The user username (string)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['annotations'] = annotations
            __props__['enabled'] = enabled
            __props__['labels'] = labels
            __props__['name'] = name
            if password is None:
                raise TypeError("Missing required property 'password'")
            __props__['password'] = password
            if username is None:
                raise TypeError("Missing required property 'username'")
            __props__['username'] = username
            __props__['principal_ids'] = None
        super(User, __self__).__init__(
            'rancher2:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, annotations=None, enabled=None, labels=None, name=None, password=None, principal_ids=None, username=None):
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] annotations: Annotations for global role binding (map)
        :param pulumi.Input[dict] labels: Labels for global role binding (map)
        :param pulumi.Input[str] name: The user full name (string)
        :param pulumi.Input[str] password: The user password (string)
        :param pulumi.Input[list] principal_ids: (Computed) The user principal IDs (list)
        :param pulumi.Input[str] username: The user username (string)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["annotations"] = annotations
        __props__["enabled"] = enabled
        __props__["labels"] = labels
        __props__["name"] = name
        __props__["password"] = password
        __props__["principal_ids"] = principal_ids
        __props__["username"] = username
        return User(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

