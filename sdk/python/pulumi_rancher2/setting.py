# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Setting(pulumi.CustomResource):
    annotations: pulumi.Output[dict]
    """
    Annotations for setting object (map)
    """
    labels: pulumi.Output[dict]
    """
    Labels for setting object (map)
    """
    name: pulumi.Output[str]
    """
    The name of the setting (string)
    """
    value: pulumi.Output[str]
    """
    The value of the setting (string)
    """
    def __init__(__self__, resource_name, opts=None, annotations=None, labels=None, name=None, value=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Rancher v2 Setting resource. This can be used to create settings for Rancher v2 environments and retrieve their information.

        On create, if setting already exists, provider will import it and update its value.

        On destroy, if setting is a system setting like `server-url`, provider'll not delete it from Rancher, it'll just update setting value to default and remove it from tfstate. 

        ## Example Usage



        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        # Create a new rancher2 Setting
        foo = rancher2.Setting("foo", value="<VALUE>")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] annotations: Annotations for setting object (map)
        :param pulumi.Input[dict] labels: Labels for setting object (map)
        :param pulumi.Input[str] name: The name of the setting (string)
        :param pulumi.Input[str] value: The value of the setting (string)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['annotations'] = annotations
            __props__['labels'] = labels
            __props__['name'] = name
            if value is None:
                raise TypeError("Missing required property 'value'")
            __props__['value'] = value
        super(Setting, __self__).__init__(
            'rancher2:index/setting:Setting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, annotations=None, labels=None, name=None, value=None):
        """
        Get an existing Setting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] annotations: Annotations for setting object (map)
        :param pulumi.Input[dict] labels: Labels for setting object (map)
        :param pulumi.Input[str] name: The name of the setting (string)
        :param pulumi.Input[str] value: The value of the setting (string)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["annotations"] = annotations
        __props__["labels"] = labels
        __props__["name"] = name
        __props__["value"] = value
        return Setting(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

