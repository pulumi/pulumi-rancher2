# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NodePoolArgs', 'NodePool']

@pulumi.input_type
class NodePoolArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 hostname_prefix: pulumi.Input[str],
                 node_template_id: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 control_plane: Optional[pulumi.Input[bool]] = None,
                 delete_not_ready_after_secs: Optional[pulumi.Input[int]] = None,
                 drain_before_delete: Optional[pulumi.Input[bool]] = None,
                 etcd: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]]] = None,
                 quantity: Optional[pulumi.Input[int]] = None,
                 worker: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a NodePool resource.
        :param pulumi.Input[str] cluster_id: The RKE cluster id to use Node Pool (string)
        :param pulumi.Input[str] hostname_prefix: The prefix for created nodes of the Node Pool (string)
        :param pulumi.Input[str] node_template_id: The Node Template ID to use for node creation (string)
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for Node Pool object (map)
        :param pulumi.Input[bool] control_plane: RKE control plane role for created nodes (bool)
        :param pulumi.Input[int] delete_not_ready_after_secs: Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
        :param pulumi.Input[bool] drain_before_delete: Drain nodes before delete. Default: `false` (bool)
        :param pulumi.Input[bool] etcd: RKE etcd role for created nodes (bool)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for Node Pool object (map)
        :param pulumi.Input[str] name: The name of the Node Pool (string)
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]] node_taints: Node taints. For Rancher v2.3.3 and above (List)
        :param pulumi.Input[int] quantity: The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
        :param pulumi.Input[bool] worker: RKE role role for created nodes (bool)
        """
        NodePoolArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_id=cluster_id,
            hostname_prefix=hostname_prefix,
            node_template_id=node_template_id,
            annotations=annotations,
            control_plane=control_plane,
            delete_not_ready_after_secs=delete_not_ready_after_secs,
            drain_before_delete=drain_before_delete,
            etcd=etcd,
            labels=labels,
            name=name,
            node_taints=node_taints,
            quantity=quantity,
            worker=worker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_id: pulumi.Input[str],
             hostname_prefix: pulumi.Input[str],
             node_template_id: pulumi.Input[str],
             annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             control_plane: Optional[pulumi.Input[bool]] = None,
             delete_not_ready_after_secs: Optional[pulumi.Input[int]] = None,
             drain_before_delete: Optional[pulumi.Input[bool]] = None,
             etcd: Optional[pulumi.Input[bool]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]]] = None,
             quantity: Optional[pulumi.Input[int]] = None,
             worker: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'hostnamePrefix' in kwargs:
            hostname_prefix = kwargs['hostnamePrefix']
        if 'nodeTemplateId' in kwargs:
            node_template_id = kwargs['nodeTemplateId']
        if 'controlPlane' in kwargs:
            control_plane = kwargs['controlPlane']
        if 'deleteNotReadyAfterSecs' in kwargs:
            delete_not_ready_after_secs = kwargs['deleteNotReadyAfterSecs']
        if 'drainBeforeDelete' in kwargs:
            drain_before_delete = kwargs['drainBeforeDelete']
        if 'nodeTaints' in kwargs:
            node_taints = kwargs['nodeTaints']

        _setter("cluster_id", cluster_id)
        _setter("hostname_prefix", hostname_prefix)
        _setter("node_template_id", node_template_id)
        if annotations is not None:
            _setter("annotations", annotations)
        if control_plane is not None:
            _setter("control_plane", control_plane)
        if delete_not_ready_after_secs is not None:
            _setter("delete_not_ready_after_secs", delete_not_ready_after_secs)
        if drain_before_delete is not None:
            _setter("drain_before_delete", drain_before_delete)
        if etcd is not None:
            _setter("etcd", etcd)
        if labels is not None:
            _setter("labels", labels)
        if name is not None:
            _setter("name", name)
        if node_taints is not None:
            _setter("node_taints", node_taints)
        if quantity is not None:
            _setter("quantity", quantity)
        if worker is not None:
            _setter("worker", worker)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The RKE cluster id to use Node Pool (string)
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="hostnamePrefix")
    def hostname_prefix(self) -> pulumi.Input[str]:
        """
        The prefix for created nodes of the Node Pool (string)
        """
        return pulumi.get(self, "hostname_prefix")

    @hostname_prefix.setter
    def hostname_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname_prefix", value)

    @property
    @pulumi.getter(name="nodeTemplateId")
    def node_template_id(self) -> pulumi.Input[str]:
        """
        The Node Template ID to use for node creation (string)
        """
        return pulumi.get(self, "node_template_id")

    @node_template_id.setter
    def node_template_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_template_id", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations for Node Pool object (map)
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[pulumi.Input[bool]]:
        """
        RKE control plane role for created nodes (bool)
        """
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter(name="deleteNotReadyAfterSecs")
    def delete_not_ready_after_secs(self) -> Optional[pulumi.Input[int]]:
        """
        Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
        """
        return pulumi.get(self, "delete_not_ready_after_secs")

    @delete_not_ready_after_secs.setter
    def delete_not_ready_after_secs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delete_not_ready_after_secs", value)

    @property
    @pulumi.getter(name="drainBeforeDelete")
    def drain_before_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain nodes before delete. Default: `false` (bool)
        """
        return pulumi.get(self, "drain_before_delete")

    @drain_before_delete.setter
    def drain_before_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain_before_delete", value)

    @property
    @pulumi.getter
    def etcd(self) -> Optional[pulumi.Input[bool]]:
        """
        RKE etcd role for created nodes (bool)
        """
        return pulumi.get(self, "etcd")

    @etcd.setter
    def etcd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "etcd", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for Node Pool object (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Node Pool (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeTaints")
    def node_taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]]]:
        """
        Node taints. For Rancher v2.3.3 and above (List)
        """
        return pulumi.get(self, "node_taints")

    @node_taints.setter
    def node_taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]]]):
        pulumi.set(self, "node_taints", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity", value)

    @property
    @pulumi.getter
    def worker(self) -> Optional[pulumi.Input[bool]]:
        """
        RKE role role for created nodes (bool)
        """
        return pulumi.get(self, "worker")

    @worker.setter
    def worker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "worker", value)


@pulumi.input_type
class _NodePoolState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 control_plane: Optional[pulumi.Input[bool]] = None,
                 delete_not_ready_after_secs: Optional[pulumi.Input[int]] = None,
                 drain_before_delete: Optional[pulumi.Input[bool]] = None,
                 etcd: Optional[pulumi.Input[bool]] = None,
                 hostname_prefix: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]]] = None,
                 node_template_id: Optional[pulumi.Input[str]] = None,
                 quantity: Optional[pulumi.Input[int]] = None,
                 worker: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering NodePool resources.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for Node Pool object (map)
        :param pulumi.Input[str] cluster_id: The RKE cluster id to use Node Pool (string)
        :param pulumi.Input[bool] control_plane: RKE control plane role for created nodes (bool)
        :param pulumi.Input[int] delete_not_ready_after_secs: Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
        :param pulumi.Input[bool] drain_before_delete: Drain nodes before delete. Default: `false` (bool)
        :param pulumi.Input[bool] etcd: RKE etcd role for created nodes (bool)
        :param pulumi.Input[str] hostname_prefix: The prefix for created nodes of the Node Pool (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for Node Pool object (map)
        :param pulumi.Input[str] name: The name of the Node Pool (string)
        :param pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]] node_taints: Node taints. For Rancher v2.3.3 and above (List)
        :param pulumi.Input[str] node_template_id: The Node Template ID to use for node creation (string)
        :param pulumi.Input[int] quantity: The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
        :param pulumi.Input[bool] worker: RKE role role for created nodes (bool)
        """
        _NodePoolState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            annotations=annotations,
            cluster_id=cluster_id,
            control_plane=control_plane,
            delete_not_ready_after_secs=delete_not_ready_after_secs,
            drain_before_delete=drain_before_delete,
            etcd=etcd,
            hostname_prefix=hostname_prefix,
            labels=labels,
            name=name,
            node_taints=node_taints,
            node_template_id=node_template_id,
            quantity=quantity,
            worker=worker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             cluster_id: Optional[pulumi.Input[str]] = None,
             control_plane: Optional[pulumi.Input[bool]] = None,
             delete_not_ready_after_secs: Optional[pulumi.Input[int]] = None,
             drain_before_delete: Optional[pulumi.Input[bool]] = None,
             etcd: Optional[pulumi.Input[bool]] = None,
             hostname_prefix: Optional[pulumi.Input[str]] = None,
             labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             node_taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]]] = None,
             node_template_id: Optional[pulumi.Input[str]] = None,
             quantity: Optional[pulumi.Input[int]] = None,
             worker: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'clusterId' in kwargs:
            cluster_id = kwargs['clusterId']
        if 'controlPlane' in kwargs:
            control_plane = kwargs['controlPlane']
        if 'deleteNotReadyAfterSecs' in kwargs:
            delete_not_ready_after_secs = kwargs['deleteNotReadyAfterSecs']
        if 'drainBeforeDelete' in kwargs:
            drain_before_delete = kwargs['drainBeforeDelete']
        if 'hostnamePrefix' in kwargs:
            hostname_prefix = kwargs['hostnamePrefix']
        if 'nodeTaints' in kwargs:
            node_taints = kwargs['nodeTaints']
        if 'nodeTemplateId' in kwargs:
            node_template_id = kwargs['nodeTemplateId']

        if annotations is not None:
            _setter("annotations", annotations)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if control_plane is not None:
            _setter("control_plane", control_plane)
        if delete_not_ready_after_secs is not None:
            _setter("delete_not_ready_after_secs", delete_not_ready_after_secs)
        if drain_before_delete is not None:
            _setter("drain_before_delete", drain_before_delete)
        if etcd is not None:
            _setter("etcd", etcd)
        if hostname_prefix is not None:
            _setter("hostname_prefix", hostname_prefix)
        if labels is not None:
            _setter("labels", labels)
        if name is not None:
            _setter("name", name)
        if node_taints is not None:
            _setter("node_taints", node_taints)
        if node_template_id is not None:
            _setter("node_template_id", node_template_id)
        if quantity is not None:
            _setter("quantity", quantity)
        if worker is not None:
            _setter("worker", worker)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Annotations for Node Pool object (map)
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The RKE cluster id to use Node Pool (string)
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> Optional[pulumi.Input[bool]]:
        """
        RKE control plane role for created nodes (bool)
        """
        return pulumi.get(self, "control_plane")

    @control_plane.setter
    def control_plane(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "control_plane", value)

    @property
    @pulumi.getter(name="deleteNotReadyAfterSecs")
    def delete_not_ready_after_secs(self) -> Optional[pulumi.Input[int]]:
        """
        Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
        """
        return pulumi.get(self, "delete_not_ready_after_secs")

    @delete_not_ready_after_secs.setter
    def delete_not_ready_after_secs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delete_not_ready_after_secs", value)

    @property
    @pulumi.getter(name="drainBeforeDelete")
    def drain_before_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Drain nodes before delete. Default: `false` (bool)
        """
        return pulumi.get(self, "drain_before_delete")

    @drain_before_delete.setter
    def drain_before_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drain_before_delete", value)

    @property
    @pulumi.getter
    def etcd(self) -> Optional[pulumi.Input[bool]]:
        """
        RKE etcd role for created nodes (bool)
        """
        return pulumi.get(self, "etcd")

    @etcd.setter
    def etcd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "etcd", value)

    @property
    @pulumi.getter(name="hostnamePrefix")
    def hostname_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix for created nodes of the Node Pool (string)
        """
        return pulumi.get(self, "hostname_prefix")

    @hostname_prefix.setter
    def hostname_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname_prefix", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels for Node Pool object (map)
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Node Pool (string)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeTaints")
    def node_taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]]]:
        """
        Node taints. For Rancher v2.3.3 and above (List)
        """
        return pulumi.get(self, "node_taints")

    @node_taints.setter
    def node_taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodePoolNodeTaintArgs']]]]):
        pulumi.set(self, "node_taints", value)

    @property
    @pulumi.getter(name="nodeTemplateId")
    def node_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Node Template ID to use for node creation (string)
        """
        return pulumi.get(self, "node_template_id")

    @node_template_id.setter
    def node_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_template_id", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[pulumi.Input[int]]:
        """
        The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity", value)

    @property
    @pulumi.getter
    def worker(self) -> Optional[pulumi.Input[bool]]:
        """
        RKE role role for created nodes (bool)
        """
        return pulumi.get(self, "worker")

    @worker.setter
    def worker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "worker", value)


class NodePool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 control_plane: Optional[pulumi.Input[bool]] = None,
                 delete_not_ready_after_secs: Optional[pulumi.Input[int]] = None,
                 drain_before_delete: Optional[pulumi.Input[bool]] = None,
                 etcd: Optional[pulumi.Input[bool]] = None,
                 hostname_prefix: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_taints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodeTaintArgs']]]]] = None,
                 node_template_id: Optional[pulumi.Input[str]] = None,
                 quantity: Optional[pulumi.Input[int]] = None,
                 worker: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a Rancher v2 Node Pool resource. This can be used to create Node Pool, using Node template for Rancher v2 RKE clusters and retrieve their information.

        ## Import

        Node Pool can be imported using the Rancher Node Pool ID

        ```sh
         $ pulumi import rancher2:index/nodePool:NodePool foo &lt;node_pool_id&gt;
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for Node Pool object (map)
        :param pulumi.Input[str] cluster_id: The RKE cluster id to use Node Pool (string)
        :param pulumi.Input[bool] control_plane: RKE control plane role for created nodes (bool)
        :param pulumi.Input[int] delete_not_ready_after_secs: Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
        :param pulumi.Input[bool] drain_before_delete: Drain nodes before delete. Default: `false` (bool)
        :param pulumi.Input[bool] etcd: RKE etcd role for created nodes (bool)
        :param pulumi.Input[str] hostname_prefix: The prefix for created nodes of the Node Pool (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for Node Pool object (map)
        :param pulumi.Input[str] name: The name of the Node Pool (string)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodeTaintArgs']]]] node_taints: Node taints. For Rancher v2.3.3 and above (List)
        :param pulumi.Input[str] node_template_id: The Node Template ID to use for node creation (string)
        :param pulumi.Input[int] quantity: The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
        :param pulumi.Input[bool] worker: RKE role role for created nodes (bool)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NodePoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Rancher v2 Node Pool resource. This can be used to create Node Pool, using Node template for Rancher v2 RKE clusters and retrieve their information.

        ## Import

        Node Pool can be imported using the Rancher Node Pool ID

        ```sh
         $ pulumi import rancher2:index/nodePool:NodePool foo &lt;node_pool_id&gt;
        ```

        :param str resource_name: The name of the resource.
        :param NodePoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodePoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            NodePoolArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 control_plane: Optional[pulumi.Input[bool]] = None,
                 delete_not_ready_after_secs: Optional[pulumi.Input[int]] = None,
                 drain_before_delete: Optional[pulumi.Input[bool]] = None,
                 etcd: Optional[pulumi.Input[bool]] = None,
                 hostname_prefix: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_taints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodeTaintArgs']]]]] = None,
                 node_template_id: Optional[pulumi.Input[str]] = None,
                 quantity: Optional[pulumi.Input[int]] = None,
                 worker: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodePoolArgs.__new__(NodePoolArgs)

            __props__.__dict__["annotations"] = annotations
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["control_plane"] = control_plane
            __props__.__dict__["delete_not_ready_after_secs"] = delete_not_ready_after_secs
            __props__.__dict__["drain_before_delete"] = drain_before_delete
            __props__.__dict__["etcd"] = etcd
            if hostname_prefix is None and not opts.urn:
                raise TypeError("Missing required property 'hostname_prefix'")
            __props__.__dict__["hostname_prefix"] = hostname_prefix
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["node_taints"] = node_taints
            if node_template_id is None and not opts.urn:
                raise TypeError("Missing required property 'node_template_id'")
            __props__.__dict__["node_template_id"] = node_template_id
            __props__.__dict__["quantity"] = quantity
            __props__.__dict__["worker"] = worker
        super(NodePool, __self__).__init__(
            'rancher2:index/nodePool:NodePool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            control_plane: Optional[pulumi.Input[bool]] = None,
            delete_not_ready_after_secs: Optional[pulumi.Input[int]] = None,
            drain_before_delete: Optional[pulumi.Input[bool]] = None,
            etcd: Optional[pulumi.Input[bool]] = None,
            hostname_prefix: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_taints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodeTaintArgs']]]]] = None,
            node_template_id: Optional[pulumi.Input[str]] = None,
            quantity: Optional[pulumi.Input[int]] = None,
            worker: Optional[pulumi.Input[bool]] = None) -> 'NodePool':
        """
        Get an existing NodePool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for Node Pool object (map)
        :param pulumi.Input[str] cluster_id: The RKE cluster id to use Node Pool (string)
        :param pulumi.Input[bool] control_plane: RKE control plane role for created nodes (bool)
        :param pulumi.Input[int] delete_not_ready_after_secs: Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
        :param pulumi.Input[bool] drain_before_delete: Drain nodes before delete. Default: `false` (bool)
        :param pulumi.Input[bool] etcd: RKE etcd role for created nodes (bool)
        :param pulumi.Input[str] hostname_prefix: The prefix for created nodes of the Node Pool (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for Node Pool object (map)
        :param pulumi.Input[str] name: The name of the Node Pool (string)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NodePoolNodeTaintArgs']]]] node_taints: Node taints. For Rancher v2.3.3 and above (List)
        :param pulumi.Input[str] node_template_id: The Node Template ID to use for node creation (string)
        :param pulumi.Input[int] quantity: The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
        :param pulumi.Input[bool] worker: RKE role role for created nodes (bool)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodePoolState.__new__(_NodePoolState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["control_plane"] = control_plane
        __props__.__dict__["delete_not_ready_after_secs"] = delete_not_ready_after_secs
        __props__.__dict__["drain_before_delete"] = drain_before_delete
        __props__.__dict__["etcd"] = etcd
        __props__.__dict__["hostname_prefix"] = hostname_prefix
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["node_taints"] = node_taints
        __props__.__dict__["node_template_id"] = node_template_id
        __props__.__dict__["quantity"] = quantity
        __props__.__dict__["worker"] = worker
        return NodePool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Annotations for Node Pool object (map)
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The RKE cluster id to use Node Pool (string)
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> pulumi.Output[Optional[bool]]:
        """
        RKE control plane role for created nodes (bool)
        """
        return pulumi.get(self, "control_plane")

    @property
    @pulumi.getter(name="deleteNotReadyAfterSecs")
    def delete_not_ready_after_secs(self) -> pulumi.Output[Optional[int]]:
        """
        Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
        """
        return pulumi.get(self, "delete_not_ready_after_secs")

    @property
    @pulumi.getter(name="drainBeforeDelete")
    def drain_before_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        Drain nodes before delete. Default: `false` (bool)
        """
        return pulumi.get(self, "drain_before_delete")

    @property
    @pulumi.getter
    def etcd(self) -> pulumi.Output[Optional[bool]]:
        """
        RKE etcd role for created nodes (bool)
        """
        return pulumi.get(self, "etcd")

    @property
    @pulumi.getter(name="hostnamePrefix")
    def hostname_prefix(self) -> pulumi.Output[str]:
        """
        The prefix for created nodes of the Node Pool (string)
        """
        return pulumi.get(self, "hostname_prefix")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Labels for Node Pool object (map)
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Node Pool (string)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeTaints")
    def node_taints(self) -> pulumi.Output[Optional[Sequence['outputs.NodePoolNodeTaint']]]:
        """
        Node taints. For Rancher v2.3.3 and above (List)
        """
        return pulumi.get(self, "node_taints")

    @property
    @pulumi.getter(name="nodeTemplateId")
    def node_template_id(self) -> pulumi.Output[str]:
        """
        The Node Template ID to use for node creation (string)
        """
        return pulumi.get(self, "node_template_id")

    @property
    @pulumi.getter
    def quantity(self) -> pulumi.Output[Optional[int]]:
        """
        The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
        """
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def worker(self) -> pulumi.Output[Optional[bool]]:
        """
        RKE role role for created nodes (bool)
        """
        return pulumi.get(self, "worker")

