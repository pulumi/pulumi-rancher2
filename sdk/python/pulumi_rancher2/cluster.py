# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Cluster']


class Cluster(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aks_config: Optional[pulumi.Input[pulumi.InputType['ClusterAksConfigArgs']]] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 cluster_auth_endpoint: Optional[pulumi.Input[pulumi.InputType['ClusterClusterAuthEndpointArgs']]] = None,
                 cluster_monitoring_input: Optional[pulumi.Input[pulumi.InputType['ClusterClusterMonitoringInputArgs']]] = None,
                 cluster_template_answers: Optional[pulumi.Input[pulumi.InputType['ClusterClusterTemplateAnswersArgs']]] = None,
                 cluster_template_id: Optional[pulumi.Input[str]] = None,
                 cluster_template_questions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterClusterTemplateQuestionArgs']]]]] = None,
                 cluster_template_revision_id: Optional[pulumi.Input[str]] = None,
                 default_pod_security_policy_template_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 desired_agent_image: Optional[pulumi.Input[str]] = None,
                 desired_auth_image: Optional[pulumi.Input[str]] = None,
                 docker_root_dir: Optional[pulumi.Input[str]] = None,
                 driver: Optional[pulumi.Input[str]] = None,
                 eks_config: Optional[pulumi.Input[pulumi.InputType['ClusterEksConfigArgs']]] = None,
                 eks_config_v2: Optional[pulumi.Input[pulumi.InputType['ClusterEksConfigV2Args']]] = None,
                 enable_cluster_alerting: Optional[pulumi.Input[bool]] = None,
                 enable_cluster_monitoring: Optional[pulumi.Input[bool]] = None,
                 enable_network_policy: Optional[pulumi.Input[bool]] = None,
                 gke_config: Optional[pulumi.Input[pulumi.InputType['ClusterGkeConfigArgs']]] = None,
                 k3s_config: Optional[pulumi.Input[pulumi.InputType['ClusterK3sConfigArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oke_config: Optional[pulumi.Input[pulumi.InputType['ClusterOkeConfigArgs']]] = None,
                 rke_config: Optional[pulumi.Input[pulumi.InputType['ClusterRkeConfigArgs']]] = None,
                 scheduled_cluster_scan: Optional[pulumi.Input[pulumi.InputType['ClusterScheduledClusterScanArgs']]] = None,
                 windows_prefered_cluster: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.

        ## Example Usage
        ### Creating Rancher v2 RKE cluster enabling and customizing monitoring

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        # Create a new rancher2 RKE Cluster
        foo_custom = rancher2.Cluster("foo-custom",
            cluster_monitoring_input=rancher2.ClusterClusterMonitoringInputArgs(
                answers={
                    "exporter-kubelets.https": True,
                    "exporter-node.enabled": True,
                    "exporter-node.ports.metrics.port": 9796,
                    "exporter-node.resources.limits.cpu": "200m",
                    "exporter-node.resources.limits.memory": "200Mi",
                    "grafana.persistence.enabled": False,
                    "grafana.persistence.size": "10Gi",
                    "grafana.persistence.storageClass": "default",
                    "operator.resources.limits.memory": "500Mi",
                    "prometheus.persistence.enabled": "false",
                    "prometheus.persistence.size": "50Gi",
                    "prometheus.persistence.storageClass": "default",
                    "prometheus.persistent.useReleaseName": "true",
                    "prometheus.resources.core.limits.cpu": "1000m",
                    "prometheus.resources.core.limits.memory": "1500Mi",
                    "prometheus.resources.core.requests.cpu": "750m",
                    "prometheus.resources.core.requests.memory": "750Mi",
                    "prometheus.retention": "12h",
                },
                version="0.1.0",
            ),
            description="Foo rancher2 custom cluster",
            enable_cluster_monitoring=True,
            rke_config=rancher2.ClusterRkeConfigArgs(
                network=rancher2.ClusterRkeConfigNetworkArgs(
                    plugin="canal",
                ),
            ))
        ```
        ### Creating Rancher v2 RKE cluster enabling/customizing monitoring and istio

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        # Create a new rancher2 RKE Cluster
        foo_custom_cluster = rancher2.Cluster("foo-customCluster",
            description="Foo rancher2 custom cluster",
            rke_config=rancher2.ClusterRkeConfigArgs(
                network=rancher2.ClusterRkeConfigNetworkArgs(
                    plugin="canal",
                ),
            ),
            enable_cluster_monitoring=True,
            cluster_monitoring_input=rancher2.ClusterClusterMonitoringInputArgs(
                answers={
                    "exporter-kubelets.https": True,
                    "exporter-node.enabled": True,
                    "exporter-node.ports.metrics.port": 9796,
                    "exporter-node.resources.limits.cpu": "200m",
                    "exporter-node.resources.limits.memory": "200Mi",
                    "grafana.persistence.enabled": False,
                    "grafana.persistence.size": "10Gi",
                    "grafana.persistence.storageClass": "default",
                    "operator.resources.limits.memory": "500Mi",
                    "prometheus.persistence.enabled": "false",
                    "prometheus.persistence.size": "50Gi",
                    "prometheus.persistence.storageClass": "default",
                    "prometheus.persistent.useReleaseName": "true",
                    "prometheus.resources.core.limits.cpu": "1000m",
                    "prometheus.resources.core.limits.memory": "1500Mi",
                    "prometheus.resources.core.requests.cpu": "750m",
                    "prometheus.resources.core.requests.memory": "750Mi",
                    "prometheus.retention": "12h",
                },
                version="0.1.0",
            ))
        # Create a new rancher2 Cluster Sync for foo-custom cluster
        foo_custom_cluster_sync = rancher2.ClusterSync("foo-customClusterSync",
            cluster_id=foo_custom_cluster.id,
            wait_monitoring=foo_custom_cluster.enable_cluster_monitoring)
        # Create a new rancher2 Namespace
        foo_istio = rancher2.Namespace("foo-istio",
            project_id=foo_custom_cluster_sync.system_project_id,
            description="istio namespace")
        # Create a new rancher2 App deploying istio (should wait until monitoring is up and running)
        istio = rancher2.App("istio",
            catalog_name="system-library",
            description="Terraform app acceptance test",
            project_id=foo_istio.project_id,
            template_name="rancher-istio",
            template_version="0.1.1",
            target_namespace=foo_istio.id,
            answers={
                "certmanager.enabled": False,
                "enableCRDs": True,
                "galley.enabled": True,
                "gateways.enabled": False,
                "gateways.istio-ingressgateway.resources.limits.cpu": "2000m",
                "gateways.istio-ingressgateway.resources.limits.memory": "1024Mi",
                "gateways.istio-ingressgateway.resources.requests.cpu": "100m",
                "gateways.istio-ingressgateway.resources.requests.memory": "128Mi",
                "gateways.istio-ingressgateway.type": "NodePort",
                "global.monitoring.type": "cluster-monitoring",
                "global.rancher.clusterId": foo_custom_cluster_sync.cluster_id,
                "istio_cni.enabled": "false",
                "istiocoredns.enabled": "false",
                "kiali.enabled": "true",
                "mixer.enabled": "true",
                "mixer.policy.enabled": "true",
                "mixer.policy.resources.limits.cpu": "4800m",
                "mixer.policy.resources.limits.memory": "4096Mi",
                "mixer.policy.resources.requests.cpu": "1000m",
                "mixer.policy.resources.requests.memory": "1024Mi",
                "mixer.telemetry.resources.limits.cpu": "4800m",
                "mixer.telemetry.resources.limits.memory": "4096Mi",
                "mixer.telemetry.resources.requests.cpu": "1000m",
                "mixer.telemetry.resources.requests.memory": "1024Mi",
                "mtls.enabled": False,
                "nodeagent.enabled": False,
                "pilot.enabled": True,
                "pilot.resources.limits.cpu": "1000m",
                "pilot.resources.limits.memory": "4096Mi",
                "pilot.resources.requests.cpu": "500m",
                "pilot.resources.requests.memory": "2048Mi",
                "pilot.traceSampling": "1",
                "security.enabled": True,
                "sidecarInjectorWebhook.enabled": True,
                "tracing.enabled": True,
                "tracing.jaeger.resources.limits.cpu": "500m",
                "tracing.jaeger.resources.limits.memory": "1024Mi",
                "tracing.jaeger.resources.requests.cpu": "100m",
                "tracing.jaeger.resources.requests.memory": "100Mi",
            })
        ```
        ### Creating Rancher v2 RKE cluster assigning a node pool (overlapped planes)

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        # Create a new rancher2 RKE Cluster
        foo_custom = rancher2.Cluster("foo-custom",
            description="Foo rancher2 custom cluster",
            rke_config=rancher2.ClusterRkeConfigArgs(
                network=rancher2.ClusterRkeConfigNetworkArgs(
                    plugin="canal",
                ),
            ))
        # Create a new rancher2 Node Template
        foo_node_template = rancher2.NodeTemplate("fooNodeTemplate",
            description="foo test",
            amazonec2_config=rancher2.NodeTemplateAmazonec2ConfigArgs(
                access_key="<AWS_ACCESS_KEY>",
                secret_key="<AWS_SECRET_KEY>",
                ami="<AMI_ID>",
                region="<REGION>",
                security_groups=["<AWS_SECURITY_GROUP>"],
                subnet_id="<SUBNET_ID>",
                vpc_id="<VPC_ID>",
                zone="<ZONE>",
            ))
        # Create a new rancher2 Node Pool
        foo_node_pool = rancher2.NodePool("fooNodePool",
            cluster_id=foo_custom.id,
            hostname_prefix="foo-cluster-0",
            node_template_id=foo_node_template.id,
            quantity=3,
            control_plane=True,
            etcd=True,
            worker=True)
        ```
        ### Creating Rancher v2 RKE cluster from template. For Rancher v2.3.x or above.

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        # Create a new rancher2 cluster template
        foo_cluster_template = rancher2.ClusterTemplate("fooClusterTemplate",
            members=[rancher2.ClusterTemplateMemberArgs(
                access_type="owner",
                user_principal_id="local://user-XXXXX",
            )],
            template_revisions=[rancher2.ClusterTemplateTemplateRevisionArgs(
                name="V1",
                cluster_config=rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs(
                    rke_config={
                        "network": {
                            "plugin": "canal",
                        },
                        "services": {
                            "etcd": {
                                "creation": "6h",
                                "retention": "24h",
                            },
                        },
                    },
                ),
                default=True,
            )],
            description="Test cluster template v2")
        # Create a new rancher2 RKE Cluster from template
        foo_cluster = rancher2.Cluster("fooCluster",
            cluster_template_id=foo_cluster_template.id,
            cluster_template_revision_id=foo_cluster_template.template_revisions[0].id)
        ```
        ### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x or above.

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        foo = rancher2.Cluster("foo",
            description="Terraform custom cluster",
            rke_config=rancher2.ClusterRkeConfigArgs(
                network=rancher2.ClusterRkeConfigNetworkArgs(
                    plugin="canal",
                ),
                services=rancher2.ClusterRkeConfigServicesArgs(
                    etcd=rancher2.ClusterRkeConfigServicesEtcdArgs(
                        creation="6h",
                        retention="24h",
                    ),
                    kube_api=rancher2.ClusterRkeConfigServicesKubeApiArgs(
                        audit_log=rancher2.ClusterRkeConfigServicesKubeApiAuditLogArgs(
                            configuration=rancher2.ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs(
                                format="json",
                                max_age=5,
                                max_backup=5,
                                max_size=100,
                                path="-",
                                policy=\"\"\"apiVersion: audit.k8s.io/v1
        kind: Policy
        metadata:
          creationTimestamp: null
        omitStages:
        - RequestReceived
        rules:
        - level: RequestResponse
          resources:
          - resources:
            - pods

        \"\"\",
                            ),
                            enabled=True,
                        ),
                    ),
                ),
                upgrade_strategy={
                    "drain": True,
                    "maxUnavailableWorker": "20%",
                },
            ))
        ```
        ### Creating Rancher v2 RKE cluster with scheduled cluster scan. For Rancher v2.4.x or above.

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        foo = rancher2.Cluster("foo",
            description="Terraform custom cluster",
            rke_config=rancher2.ClusterRkeConfigArgs(
                network=rancher2.ClusterRkeConfigNetworkArgs(
                    plugin="canal",
                ),
                services=rancher2.ClusterRkeConfigServicesArgs(
                    etcd=rancher2.ClusterRkeConfigServicesEtcdArgs(
                        creation="6h",
                        retention="24h",
                    ),
                ),
            ),
            scheduled_cluster_scan=rancher2.ClusterScheduledClusterScanArgs(
                enabled=True,
                scan_config=rancher2.ClusterScheduledClusterScanScanConfigArgs(
                    cis_scan_config=rancher2.ClusterScheduledClusterScanScanConfigCisScanConfigArgs(
                        debug_master=True,
                        debug_worker=True,
                    ),
                ),
                schedule_config=rancher2.ClusterScheduledClusterScanScheduleConfigArgs(
                    cron_schedule="30 * * * *",
                    retention=5,
                ),
            ))
        ```
        ### Importing EKS cluster to Rancher v2, using `eks_config_v2`. For Rancher v2.5.x or above.

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        foo_cloud_credential = rancher2.CloudCredential("fooCloudCredential",
            description="foo test",
            amazonec2_credential_config=rancher2.CloudCredentialAmazonec2CredentialConfigArgs(
                access_key="<AWS_ACCESS_KEY>",
                secret_key="<AWS_SECRET_KEY>",
            ))
        foo_cluster = rancher2.Cluster("fooCluster",
            description="Terraform EKS cluster",
            eks_config_v2=rancher2.ClusterEksConfigV2Args(
                cloud_credential_id=foo_cloud_credential.id,
                name="<CLUSTER_NAME>",
                region="<EKS_REGION>",
                imported=True,
            ))
        ```
        ### Creating EKS cluster from Rancher v2, using `eks_config_v2`. For Rancher v2.5.x or above.

        ```python
        import pulumi
        import pulumi_rancher2 as rancher2

        foo_cloud_credential = rancher2.CloudCredential("fooCloudCredential",
            description="foo test",
            amazonec2_credential_config=rancher2.CloudCredentialAmazonec2CredentialConfigArgs(
                access_key="<AWS_ACCESS_KEY>",
                secret_key="<AWS_SECRET_KEY>",
            ))
        foo_cluster = rancher2.Cluster("fooCluster",
            description="Terraform EKS cluster",
            eks_config_v2=rancher2.ClusterEksConfigV2Args(
                cloud_credential_id=foo_cloud_credential.id,
                region="<EKS_REGION>",
                kubernetes_version="1.17",
                logging_types=[
                    "audit",
                    "api",
                ],
                node_groups=[
                    rancher2.ClusterEksConfigV2NodeGroupArgs(
                        name="node_group1",
                        instance_type="t3.medium",
                        desired_size=3,
                        max_size=5,
                    ),
                    rancher2.ClusterEksConfigV2NodeGroupArgs(
                        name="node_group2",
                        instance_type="m5.xlarge",
                        desired_size=2,
                        max_size=3,
                    ),
                ],
            ))
        ```

        ## Import

        Clusters can be imported using the Rancher Cluster ID

        ```sh
         $ pulumi import rancher2:index/cluster:Cluster foo &lt;CLUSTER_ID&gt;
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ClusterAksConfigArgs']] aks_config: The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for cluster registration token object (map)
        :param pulumi.Input[pulumi.InputType['ClusterClusterAuthEndpointArgs']] cluster_auth_endpoint: Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterClusterMonitoringInputArgs']] cluster_monitoring_input: Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterClusterTemplateAnswersArgs']] cluster_template_answers: Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
        :param pulumi.Input[str] cluster_template_id: Cluster template ID. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterClusterTemplateQuestionArgs']]]] cluster_template_questions: Cluster template questions. Just for Rancher v2.3.x and above (list)
        :param pulumi.Input[str] cluster_template_revision_id: Cluster template revision ID. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[str] default_pod_security_policy_template_id: [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        :param pulumi.Input[str] description: An optional description of this cluster (string)
        :param pulumi.Input[str] desired_agent_image: Desired agent image. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[str] desired_auth_image: Desired auth image. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[str] docker_root_dir: Desired auth image. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[str] driver: (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        :param pulumi.Input[pulumi.InputType['ClusterEksConfigArgs']] eks_config: The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterEksConfigV2Args']] eks_config_v2: The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x or above (list maxitems:1)
        :param pulumi.Input[bool] enable_cluster_alerting: Enable built-in cluster alerting (bool)
        :param pulumi.Input[bool] enable_cluster_monitoring: Enable built-in cluster monitoring (bool)
        :param pulumi.Input[bool] enable_network_policy: Enable project network isolation (bool)
        :param pulumi.Input[pulumi.InputType['ClusterGkeConfigArgs']] gke_config: The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterK3sConfigArgs']] k3s_config: The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for cluster registration token object (map)
        :param pulumi.Input[str] name: Name of cluster registration token (string)
        :param pulumi.Input[pulumi.InputType['ClusterOkeConfigArgs']] oke_config: The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `gke_config` `k3s_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterRkeConfigArgs']] rke_config: The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `k3s_config` (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterScheduledClusterScanArgs']] scheduled_cluster_scan: Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
        :param pulumi.Input[bool] windows_prefered_cluster: Windows preferred cluster. Default: `false` (bool)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['aks_config'] = aks_config
            __props__['annotations'] = annotations
            __props__['cluster_auth_endpoint'] = cluster_auth_endpoint
            __props__['cluster_monitoring_input'] = cluster_monitoring_input
            __props__['cluster_template_answers'] = cluster_template_answers
            __props__['cluster_template_id'] = cluster_template_id
            __props__['cluster_template_questions'] = cluster_template_questions
            __props__['cluster_template_revision_id'] = cluster_template_revision_id
            __props__['default_pod_security_policy_template_id'] = default_pod_security_policy_template_id
            __props__['description'] = description
            __props__['desired_agent_image'] = desired_agent_image
            __props__['desired_auth_image'] = desired_auth_image
            __props__['docker_root_dir'] = docker_root_dir
            __props__['driver'] = driver
            __props__['eks_config'] = eks_config
            __props__['eks_config_v2'] = eks_config_v2
            __props__['enable_cluster_alerting'] = enable_cluster_alerting
            __props__['enable_cluster_monitoring'] = enable_cluster_monitoring
            __props__['enable_network_policy'] = enable_network_policy
            __props__['gke_config'] = gke_config
            __props__['k3s_config'] = k3s_config
            __props__['labels'] = labels
            __props__['name'] = name
            __props__['oke_config'] = oke_config
            __props__['rke_config'] = rke_config
            __props__['scheduled_cluster_scan'] = scheduled_cluster_scan
            __props__['windows_prefered_cluster'] = windows_prefered_cluster
            __props__['ca_cert'] = None
            __props__['cluster_registration_token'] = None
            __props__['default_project_id'] = None
            __props__['enable_cluster_istio'] = None
            __props__['istio_enabled'] = None
            __props__['kube_config'] = None
            __props__['system_project_id'] = None
        super(Cluster, __self__).__init__(
            'rancher2:index/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aks_config: Optional[pulumi.Input[pulumi.InputType['ClusterAksConfigArgs']]] = None,
            annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            ca_cert: Optional[pulumi.Input[str]] = None,
            cluster_auth_endpoint: Optional[pulumi.Input[pulumi.InputType['ClusterClusterAuthEndpointArgs']]] = None,
            cluster_monitoring_input: Optional[pulumi.Input[pulumi.InputType['ClusterClusterMonitoringInputArgs']]] = None,
            cluster_registration_token: Optional[pulumi.Input[pulumi.InputType['ClusterClusterRegistrationTokenArgs']]] = None,
            cluster_template_answers: Optional[pulumi.Input[pulumi.InputType['ClusterClusterTemplateAnswersArgs']]] = None,
            cluster_template_id: Optional[pulumi.Input[str]] = None,
            cluster_template_questions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterClusterTemplateQuestionArgs']]]]] = None,
            cluster_template_revision_id: Optional[pulumi.Input[str]] = None,
            default_pod_security_policy_template_id: Optional[pulumi.Input[str]] = None,
            default_project_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            desired_agent_image: Optional[pulumi.Input[str]] = None,
            desired_auth_image: Optional[pulumi.Input[str]] = None,
            docker_root_dir: Optional[pulumi.Input[str]] = None,
            driver: Optional[pulumi.Input[str]] = None,
            eks_config: Optional[pulumi.Input[pulumi.InputType['ClusterEksConfigArgs']]] = None,
            eks_config_v2: Optional[pulumi.Input[pulumi.InputType['ClusterEksConfigV2Args']]] = None,
            enable_cluster_alerting: Optional[pulumi.Input[bool]] = None,
            enable_cluster_istio: Optional[pulumi.Input[bool]] = None,
            enable_cluster_monitoring: Optional[pulumi.Input[bool]] = None,
            enable_network_policy: Optional[pulumi.Input[bool]] = None,
            gke_config: Optional[pulumi.Input[pulumi.InputType['ClusterGkeConfigArgs']]] = None,
            istio_enabled: Optional[pulumi.Input[bool]] = None,
            k3s_config: Optional[pulumi.Input[pulumi.InputType['ClusterK3sConfigArgs']]] = None,
            kube_config: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            oke_config: Optional[pulumi.Input[pulumi.InputType['ClusterOkeConfigArgs']]] = None,
            rke_config: Optional[pulumi.Input[pulumi.InputType['ClusterRkeConfigArgs']]] = None,
            scheduled_cluster_scan: Optional[pulumi.Input[pulumi.InputType['ClusterScheduledClusterScanArgs']]] = None,
            system_project_id: Optional[pulumi.Input[str]] = None,
            windows_prefered_cluster: Optional[pulumi.Input[bool]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ClusterAksConfigArgs']] aks_config: The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[Mapping[str, Any]] annotations: Annotations for cluster registration token object (map)
        :param pulumi.Input[str] ca_cert: TLS CA certificate for etcd service (string)
        :param pulumi.Input[pulumi.InputType['ClusterClusterAuthEndpointArgs']] cluster_auth_endpoint: Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterClusterMonitoringInputArgs']] cluster_monitoring_input: Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterClusterRegistrationTokenArgs']] cluster_registration_token: (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterClusterTemplateAnswersArgs']] cluster_template_answers: Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
        :param pulumi.Input[str] cluster_template_id: Cluster template ID. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterClusterTemplateQuestionArgs']]]] cluster_template_questions: Cluster template questions. Just for Rancher v2.3.x and above (list)
        :param pulumi.Input[str] cluster_template_revision_id: Cluster template revision ID. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[str] default_pod_security_policy_template_id: [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        :param pulumi.Input[str] default_project_id: (Computed) Default project ID for the cluster (string)
        :param pulumi.Input[str] description: An optional description of this cluster (string)
        :param pulumi.Input[str] desired_agent_image: Desired agent image. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[str] desired_auth_image: Desired auth image. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[str] docker_root_dir: Desired auth image. Just for Rancher v2.3.x and above (string)
        :param pulumi.Input[str] driver: (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        :param pulumi.Input[pulumi.InputType['ClusterEksConfigArgs']] eks_config: The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterEksConfigV2Args']] eks_config_v2: The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x or above (list maxitems:1)
        :param pulumi.Input[bool] enable_cluster_alerting: Enable built-in cluster alerting (bool)
        :param pulumi.Input[bool] enable_cluster_istio: Deploy istio on `system` project and `istio-system` namespace, using App resource instead. See above example.
        :param pulumi.Input[bool] enable_cluster_monitoring: Enable built-in cluster monitoring (bool)
        :param pulumi.Input[bool] enable_network_policy: Enable project network isolation (bool)
        :param pulumi.Input[pulumi.InputType['ClusterGkeConfigArgs']] gke_config: The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[bool] istio_enabled: (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
        :param pulumi.Input[pulumi.InputType['ClusterK3sConfigArgs']] k3s_config: The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[str] kube_config: (Computed/Sensitive) Kube Config generated for the cluster (string)
        :param pulumi.Input[Mapping[str, Any]] labels: Labels for cluster registration token object (map)
        :param pulumi.Input[str] name: Name of cluster registration token (string)
        :param pulumi.Input[pulumi.InputType['ClusterOkeConfigArgs']] oke_config: The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `gke_config` `k3s_config` and `rke_config` (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterRkeConfigArgs']] rke_config: The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `k3s_config` (list maxitems:1)
        :param pulumi.Input[pulumi.InputType['ClusterScheduledClusterScanArgs']] scheduled_cluster_scan: Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
        :param pulumi.Input[str] system_project_id: (Computed) System project ID for the cluster (string)
        :param pulumi.Input[bool] windows_prefered_cluster: Windows preferred cluster. Default: `false` (bool)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["aks_config"] = aks_config
        __props__["annotations"] = annotations
        __props__["ca_cert"] = ca_cert
        __props__["cluster_auth_endpoint"] = cluster_auth_endpoint
        __props__["cluster_monitoring_input"] = cluster_monitoring_input
        __props__["cluster_registration_token"] = cluster_registration_token
        __props__["cluster_template_answers"] = cluster_template_answers
        __props__["cluster_template_id"] = cluster_template_id
        __props__["cluster_template_questions"] = cluster_template_questions
        __props__["cluster_template_revision_id"] = cluster_template_revision_id
        __props__["default_pod_security_policy_template_id"] = default_pod_security_policy_template_id
        __props__["default_project_id"] = default_project_id
        __props__["description"] = description
        __props__["desired_agent_image"] = desired_agent_image
        __props__["desired_auth_image"] = desired_auth_image
        __props__["docker_root_dir"] = docker_root_dir
        __props__["driver"] = driver
        __props__["eks_config"] = eks_config
        __props__["eks_config_v2"] = eks_config_v2
        __props__["enable_cluster_alerting"] = enable_cluster_alerting
        __props__["enable_cluster_istio"] = enable_cluster_istio
        __props__["enable_cluster_monitoring"] = enable_cluster_monitoring
        __props__["enable_network_policy"] = enable_network_policy
        __props__["gke_config"] = gke_config
        __props__["istio_enabled"] = istio_enabled
        __props__["k3s_config"] = k3s_config
        __props__["kube_config"] = kube_config
        __props__["labels"] = labels
        __props__["name"] = name
        __props__["oke_config"] = oke_config
        __props__["rke_config"] = rke_config
        __props__["scheduled_cluster_scan"] = scheduled_cluster_scan
        __props__["system_project_id"] = system_project_id
        __props__["windows_prefered_cluster"] = windows_prefered_cluster
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aksConfig")
    def aks_config(self) -> pulumi.Output[Optional['outputs.ClusterAksConfig']]:
        """
        The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        """
        return pulumi.get(self, "aks_config")

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Annotations for cluster registration token object (map)
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> pulumi.Output[str]:
        """
        TLS CA certificate for etcd service (string)
        """
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clusterAuthEndpoint")
    def cluster_auth_endpoint(self) -> pulumi.Output['outputs.ClusterClusterAuthEndpoint']:
        """
        Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        """
        return pulumi.get(self, "cluster_auth_endpoint")

    @property
    @pulumi.getter(name="clusterMonitoringInput")
    def cluster_monitoring_input(self) -> pulumi.Output[Optional['outputs.ClusterClusterMonitoringInput']]:
        """
        Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        """
        return pulumi.get(self, "cluster_monitoring_input")

    @property
    @pulumi.getter(name="clusterRegistrationToken")
    def cluster_registration_token(self) -> pulumi.Output['outputs.ClusterClusterRegistrationToken']:
        """
        (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        """
        return pulumi.get(self, "cluster_registration_token")

    @property
    @pulumi.getter(name="clusterTemplateAnswers")
    def cluster_template_answers(self) -> pulumi.Output['outputs.ClusterClusterTemplateAnswers']:
        """
        Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
        """
        return pulumi.get(self, "cluster_template_answers")

    @property
    @pulumi.getter(name="clusterTemplateId")
    def cluster_template_id(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster template ID. Just for Rancher v2.3.x and above (string)
        """
        return pulumi.get(self, "cluster_template_id")

    @property
    @pulumi.getter(name="clusterTemplateQuestions")
    def cluster_template_questions(self) -> pulumi.Output[Sequence['outputs.ClusterClusterTemplateQuestion']]:
        """
        Cluster template questions. Just for Rancher v2.3.x and above (list)
        """
        return pulumi.get(self, "cluster_template_questions")

    @property
    @pulumi.getter(name="clusterTemplateRevisionId")
    def cluster_template_revision_id(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster template revision ID. Just for Rancher v2.3.x and above (string)
        """
        return pulumi.get(self, "cluster_template_revision_id")

    @property
    @pulumi.getter(name="defaultPodSecurityPolicyTemplateId")
    def default_pod_security_policy_template_id(self) -> pulumi.Output[str]:
        """
        [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        """
        return pulumi.get(self, "default_pod_security_policy_template_id")

    @property
    @pulumi.getter(name="defaultProjectId")
    def default_project_id(self) -> pulumi.Output[str]:
        """
        (Computed) Default project ID for the cluster (string)
        """
        return pulumi.get(self, "default_project_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of this cluster (string)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="desiredAgentImage")
    def desired_agent_image(self) -> pulumi.Output[str]:
        """
        Desired agent image. Just for Rancher v2.3.x and above (string)
        """
        return pulumi.get(self, "desired_agent_image")

    @property
    @pulumi.getter(name="desiredAuthImage")
    def desired_auth_image(self) -> pulumi.Output[str]:
        """
        Desired auth image. Just for Rancher v2.3.x and above (string)
        """
        return pulumi.get(self, "desired_auth_image")

    @property
    @pulumi.getter(name="dockerRootDir")
    def docker_root_dir(self) -> pulumi.Output[str]:
        """
        Desired auth image. Just for Rancher v2.3.x and above (string)
        """
        return pulumi.get(self, "docker_root_dir")

    @property
    @pulumi.getter
    def driver(self) -> pulumi.Output[str]:
        """
        (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        """
        return pulumi.get(self, "driver")

    @property
    @pulumi.getter(name="eksConfig")
    def eks_config(self) -> pulumi.Output[Optional['outputs.ClusterEksConfig']]:
        """
        The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        """
        return pulumi.get(self, "eks_config")

    @property
    @pulumi.getter(name="eksConfigV2")
    def eks_config_v2(self) -> pulumi.Output[Optional['outputs.ClusterEksConfigV2']]:
        """
        The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x or above (list maxitems:1)
        """
        return pulumi.get(self, "eks_config_v2")

    @property
    @pulumi.getter(name="enableClusterAlerting")
    def enable_cluster_alerting(self) -> pulumi.Output[bool]:
        """
        Enable built-in cluster alerting (bool)
        """
        return pulumi.get(self, "enable_cluster_alerting")

    @property
    @pulumi.getter(name="enableClusterIstio")
    def enable_cluster_istio(self) -> pulumi.Output[bool]:
        """
        Deploy istio on `system` project and `istio-system` namespace, using App resource instead. See above example.
        """
        return pulumi.get(self, "enable_cluster_istio")

    @property
    @pulumi.getter(name="enableClusterMonitoring")
    def enable_cluster_monitoring(self) -> pulumi.Output[bool]:
        """
        Enable built-in cluster monitoring (bool)
        """
        return pulumi.get(self, "enable_cluster_monitoring")

    @property
    @pulumi.getter(name="enableNetworkPolicy")
    def enable_network_policy(self) -> pulumi.Output[bool]:
        """
        Enable project network isolation (bool)
        """
        return pulumi.get(self, "enable_network_policy")

    @property
    @pulumi.getter(name="gkeConfig")
    def gke_config(self) -> pulumi.Output[Optional['outputs.ClusterGkeConfig']]:
        """
        The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        """
        return pulumi.get(self, "gke_config")

    @property
    @pulumi.getter(name="istioEnabled")
    def istio_enabled(self) -> pulumi.Output[bool]:
        """
        (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
        """
        return pulumi.get(self, "istio_enabled")

    @property
    @pulumi.getter(name="k3sConfig")
    def k3s_config(self) -> pulumi.Output['outputs.ClusterK3sConfig']:
        """
        The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `rke_config` (list maxitems:1)
        """
        return pulumi.get(self, "k3s_config")

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> pulumi.Output[str]:
        """
        (Computed/Sensitive) Kube Config generated for the cluster (string)
        """
        return pulumi.get(self, "kube_config")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Labels for cluster registration token object (map)
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of cluster registration token (string)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="okeConfig")
    def oke_config(self) -> pulumi.Output[Optional['outputs.ClusterOkeConfig']]:
        """
        The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `gke_config` `k3s_config` and `rke_config` (list maxitems:1)
        """
        return pulumi.get(self, "oke_config")

    @property
    @pulumi.getter(name="rkeConfig")
    def rke_config(self) -> pulumi.Output['outputs.ClusterRkeConfig']:
        """
        The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `k3s_config` (list maxitems:1)
        """
        return pulumi.get(self, "rke_config")

    @property
    @pulumi.getter(name="scheduledClusterScan")
    def scheduled_cluster_scan(self) -> pulumi.Output['outputs.ClusterScheduledClusterScan']:
        """
        Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
        """
        return pulumi.get(self, "scheduled_cluster_scan")

    @property
    @pulumi.getter(name="systemProjectId")
    def system_project_id(self) -> pulumi.Output[str]:
        """
        (Computed) System project ID for the cluster (string)
        """
        return pulumi.get(self, "system_project_id")

    @property
    @pulumi.getter(name="windowsPreferedCluster")
    def windows_prefered_cluster(self) -> pulumi.Output[Optional[bool]]:
        """
        Windows preferred cluster. Default: `false` (bool)
        """
        return pulumi.get(self, "windows_prefered_cluster")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

