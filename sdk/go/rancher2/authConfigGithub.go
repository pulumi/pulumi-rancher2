// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Rancher v2 Auth Config Github resource. This can be used to configure and enable Auth Config Github for Rancher v2 RKE clusters and retrieve their information.
//
// In addition to the built-in local auth, only one external auth config provider can be enabled at a time.
type AuthConfigGithub struct {
	pulumi.CustomResourceState

	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode pulumi.StringPtrOutput `pulumi:"accessMode"`
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `github_user://<USER_ID>`  `github_team://<GROUP_ID>` `github_org://<ORG_ID>` (list)
	AllowedPrincipalIds pulumi.StringArrayOutput `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// Github auth Client ID (string)
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Github auth Client secret (string)
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// Enable auth config provider. Default `true` (bool)
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Github hostname to connect. Default `github.com` (string)
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// Labels of the resource (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// (Computed) The name of the resource (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable TLS connection. Default `true` (bool)
	Tls pulumi.BoolPtrOutput `pulumi:"tls"`
	// (Computed) The type of the resource (string)
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAuthConfigGithub registers a new resource with the given unique name, arguments, and options.
func NewAuthConfigGithub(ctx *pulumi.Context,
	name string, args *AuthConfigGithubArgs, opts ...pulumi.ResourceOption) (*AuthConfigGithub, error) {
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.ClientSecret == nil {
		return nil, errors.New("missing required argument 'ClientSecret'")
	}
	if args == nil {
		args = &AuthConfigGithubArgs{}
	}
	var resource AuthConfigGithub
	err := ctx.RegisterResource("rancher2:index/authConfigGithub:AuthConfigGithub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthConfigGithub gets an existing AuthConfigGithub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthConfigGithub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthConfigGithubState, opts ...pulumi.ResourceOption) (*AuthConfigGithub, error) {
	var resource AuthConfigGithub
	err := ctx.ReadResource("rancher2:index/authConfigGithub:AuthConfigGithub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthConfigGithub resources.
type authConfigGithubState struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode *string `pulumi:"accessMode"`
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `github_user://<USER_ID>`  `github_team://<GROUP_ID>` `github_org://<ORG_ID>` (list)
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Github auth Client ID (string)
	ClientId *string `pulumi:"clientId"`
	// Github auth Client secret (string)
	ClientSecret *string `pulumi:"clientSecret"`
	// Enable auth config provider. Default `true` (bool)
	Enabled *bool `pulumi:"enabled"`
	// Github hostname to connect. Default `github.com` (string)
	Hostname *string `pulumi:"hostname"`
	// Labels of the resource (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// (Computed) The name of the resource (string)
	Name *string `pulumi:"name"`
	// Enable TLS connection. Default `true` (bool)
	Tls *bool `pulumi:"tls"`
	// (Computed) The type of the resource (string)
	Type *string `pulumi:"type"`
}

type AuthConfigGithubState struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode pulumi.StringPtrInput
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `github_user://<USER_ID>`  `github_team://<GROUP_ID>` `github_org://<ORG_ID>` (list)
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource (map)
	Annotations pulumi.MapInput
	// Github auth Client ID (string)
	ClientId pulumi.StringPtrInput
	// Github auth Client secret (string)
	ClientSecret pulumi.StringPtrInput
	// Enable auth config provider. Default `true` (bool)
	Enabled pulumi.BoolPtrInput
	// Github hostname to connect. Default `github.com` (string)
	Hostname pulumi.StringPtrInput
	// Labels of the resource (map)
	Labels pulumi.MapInput
	// (Computed) The name of the resource (string)
	Name pulumi.StringPtrInput
	// Enable TLS connection. Default `true` (bool)
	Tls pulumi.BoolPtrInput
	// (Computed) The type of the resource (string)
	Type pulumi.StringPtrInput
}

func (AuthConfigGithubState) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigGithubState)(nil)).Elem()
}

type authConfigGithubArgs struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode *string `pulumi:"accessMode"`
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `github_user://<USER_ID>`  `github_team://<GROUP_ID>` `github_org://<ORG_ID>` (list)
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Github auth Client ID (string)
	ClientId string `pulumi:"clientId"`
	// Github auth Client secret (string)
	ClientSecret string `pulumi:"clientSecret"`
	// Enable auth config provider. Default `true` (bool)
	Enabled *bool `pulumi:"enabled"`
	// Github hostname to connect. Default `github.com` (string)
	Hostname *string `pulumi:"hostname"`
	// Labels of the resource (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// Enable TLS connection. Default `true` (bool)
	Tls *bool `pulumi:"tls"`
}

// The set of arguments for constructing a AuthConfigGithub resource.
type AuthConfigGithubArgs struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode pulumi.StringPtrInput
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `github_user://<USER_ID>`  `github_team://<GROUP_ID>` `github_org://<ORG_ID>` (list)
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource (map)
	Annotations pulumi.MapInput
	// Github auth Client ID (string)
	ClientId pulumi.StringInput
	// Github auth Client secret (string)
	ClientSecret pulumi.StringInput
	// Enable auth config provider. Default `true` (bool)
	Enabled pulumi.BoolPtrInput
	// Github hostname to connect. Default `github.com` (string)
	Hostname pulumi.StringPtrInput
	// Labels of the resource (map)
	Labels pulumi.MapInput
	// Enable TLS connection. Default `true` (bool)
	Tls pulumi.BoolPtrInput
}

func (AuthConfigGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigGithubArgs)(nil)).Elem()
}
