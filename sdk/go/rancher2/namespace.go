// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Rancher v2 Namespace resource. This can be used to create namespaces for Rancher v2 environments and retrieve their information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewNamespace(ctx, "foo", &rancher2.NamespaceArgs{
// 			ContainerResourceLimit: &rancher2.NamespaceContainerResourceLimitArgs{
// 				LimitsCpu:      pulumi.String("20m"),
// 				LimitsMemory:   pulumi.String("20Mi"),
// 				RequestsCpu:    pulumi.String("1m"),
// 				RequestsMemory: pulumi.String("1Mi"),
// 			},
// 			Description: pulumi.String("foo namespace"),
// 			ProjectId:   pulumi.String("<PROJECT_ID>"),
// 			ResourceQuota: &rancher2.NamespaceResourceQuotaArgs{
// 				Limit: &rancher2.NamespaceResourceQuotaLimitArgs{
// 					LimitsCpu:       pulumi.String("100m"),
// 					LimitsMemory:    pulumi.String("100Mi"),
// 					RequestsStorage: pulumi.String("1Gi"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewCluster(ctx, "foo_custom", &rancher2.ClusterArgs{
// 			Description: pulumi.String("Foo rancher2 custom cluster"),
// 			RkeConfig: &rancher2.ClusterRkeConfigArgs{
// 				Network: &rancher2.ClusterRkeConfigNetworkArgs{
// 					Plugin: pulumi.String("canal"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewNamespace(ctx, "foo", &rancher2.NamespaceArgs{
// 			ContainerResourceLimit: &rancher2.NamespaceContainerResourceLimitArgs{
// 				LimitsCpu:      pulumi.String("20m"),
// 				LimitsMemory:   pulumi.String("20Mi"),
// 				RequestsCpu:    pulumi.String("1m"),
// 				RequestsMemory: pulumi.String("1Mi"),
// 			},
// 			Description: pulumi.String("foo namespace"),
// 			ProjectId:   foo_custom.DefaultProjectId,
// 			ResourceQuota: &rancher2.NamespaceResourceQuotaArgs{
// 				Limit: &rancher2.NamespaceResourceQuotaLimitArgs{
// 					LimitsCpu:       pulumi.String("100m"),
// 					LimitsMemory:    pulumi.String("100Mi"),
// 					RequestsStorage: pulumi.String("1Gi"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Namespace struct {
	pulumi.CustomResourceState

	// Annotations for Node Pool object (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// Default containers resource limits on namespace (List maxitem:1)
	ContainerResourceLimit NamespaceContainerResourceLimitPtrOutput `pulumi:"containerResourceLimit"`
	// A namespace description (string)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Labels for Node Pool object (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The name of the namespace (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The project id where assign namespace. It's on the form `project_id=<cluster_id>:<id>`. Updating `<id>` part on same `<cluster_id>` namespace will be moved between projects (string)
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)
	ResourceQuota NamespaceResourceQuotaPtrOutput `pulumi:"resourceQuota"`
	// Wait for cluster becomes active. Default `false` (bool)
	WaitForCluster pulumi.BoolPtrOutput `pulumi:"waitForCluster"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil {
		args = &NamespaceArgs{}
	}
	var resource Namespace
	err := ctx.RegisterResource("rancher2:index/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("rancher2:index/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// Annotations for Node Pool object (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Default containers resource limits on namespace (List maxitem:1)
	ContainerResourceLimit *NamespaceContainerResourceLimit `pulumi:"containerResourceLimit"`
	// A namespace description (string)
	Description *string `pulumi:"description"`
	// Labels for Node Pool object (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the namespace (string)
	Name *string `pulumi:"name"`
	// The project id where assign namespace. It's on the form `project_id=<cluster_id>:<id>`. Updating `<id>` part on same `<cluster_id>` namespace will be moved between projects (string)
	ProjectId *string `pulumi:"projectId"`
	// Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)
	ResourceQuota *NamespaceResourceQuota `pulumi:"resourceQuota"`
	// Wait for cluster becomes active. Default `false` (bool)
	WaitForCluster *bool `pulumi:"waitForCluster"`
}

type NamespaceState struct {
	// Annotations for Node Pool object (map)
	Annotations pulumi.MapInput
	// Default containers resource limits on namespace (List maxitem:1)
	ContainerResourceLimit NamespaceContainerResourceLimitPtrInput
	// A namespace description (string)
	Description pulumi.StringPtrInput
	// Labels for Node Pool object (map)
	Labels pulumi.MapInput
	// The name of the namespace (string)
	Name pulumi.StringPtrInput
	// The project id where assign namespace. It's on the form `project_id=<cluster_id>:<id>`. Updating `<id>` part on same `<cluster_id>` namespace will be moved between projects (string)
	ProjectId pulumi.StringPtrInput
	// Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)
	ResourceQuota NamespaceResourceQuotaPtrInput
	// Wait for cluster becomes active. Default `false` (bool)
	WaitForCluster pulumi.BoolPtrInput
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// Annotations for Node Pool object (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Default containers resource limits on namespace (List maxitem:1)
	ContainerResourceLimit *NamespaceContainerResourceLimit `pulumi:"containerResourceLimit"`
	// A namespace description (string)
	Description *string `pulumi:"description"`
	// Labels for Node Pool object (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the namespace (string)
	Name *string `pulumi:"name"`
	// The project id where assign namespace. It's on the form `project_id=<cluster_id>:<id>`. Updating `<id>` part on same `<cluster_id>` namespace will be moved between projects (string)
	ProjectId string `pulumi:"projectId"`
	// Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)
	ResourceQuota *NamespaceResourceQuota `pulumi:"resourceQuota"`
	// Wait for cluster becomes active. Default `false` (bool)
	WaitForCluster *bool `pulumi:"waitForCluster"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// Annotations for Node Pool object (map)
	Annotations pulumi.MapInput
	// Default containers resource limits on namespace (List maxitem:1)
	ContainerResourceLimit NamespaceContainerResourceLimitPtrInput
	// A namespace description (string)
	Description pulumi.StringPtrInput
	// Labels for Node Pool object (map)
	Labels pulumi.MapInput
	// The name of the namespace (string)
	Name pulumi.StringPtrInput
	// The project id where assign namespace. It's on the form `project_id=<cluster_id>:<id>`. Updating `<id>` part on same `<cluster_id>` namespace will be moved between projects (string)
	ProjectId pulumi.StringInput
	// Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)
	ResourceQuota NamespaceResourceQuotaPtrInput
	// Wait for cluster becomes active. Default `false` (bool)
	WaitForCluster pulumi.BoolPtrInput
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}
