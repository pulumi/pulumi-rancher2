// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Rancher v2 app resource. This can be used to deploy apps within Rancher v2 projects.
//
// This resource can also modify Rancher v2 apps in 3 ways:
// - `Update`: If `description`, `annotations` or `labels` arguments are modified the app will be updated. No new `revisionId` will be generated in Rancher.
// - `Upgrade`: If `answers`, `catalogName`, `templateName`, `templateVersion` or `valuesYaml` arguments are modified, the app will be upgraded. A new `revisionId` will be generated in Rancher.
// - `Rollback`: If `revisionId` argument is provided or modified the app will be rolled back accordingly. A new `revisionId` will be generated in Rancher. It will also generate a non-empty pulumi preview that will require manual .tf file intervention. Use carefully.
//
// Note: In case of multiple resource modifications in a row, `rollback` has preference over `upgrade`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rancher2.NewApp(ctx, "foo", &rancher2.AppArgs{
//				Answers: pulumi.AnyMap{
//					"foo": pulumi.Any("bar"),
//					"ingress.annotations.nginx.ingress.kubernetes.io/force-ssl-redirect": pulumi.Any(true),
//					"ingress_host": pulumi.Any("test.xip.io"),
//				},
//				CatalogName:     pulumi.String("<catalog_name>"),
//				Description:     pulumi.String("Foo app"),
//				ProjectId:       pulumi.String("<project_id>"),
//				TargetNamespace: pulumi.String("<namespace_name>"),
//				TemplateName:    pulumi.String("<template_name>"),
//				TemplateVersion: pulumi.String("<template_version>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooNamespace, err := rancher2.NewNamespace(ctx, "fooNamespace", &rancher2.NamespaceArgs{
//				Description: pulumi.String("Foo namespace"),
//				ProjectId:   pulumi.String("<project_id>"),
//				ResourceQuota: &rancher2.NamespaceResourceQuotaArgs{
//					Limit: &rancher2.NamespaceResourceQuotaLimitArgs{
//						LimitsCpu:       pulumi.String("100m"),
//						LimitsMemory:    pulumi.String("100Mi"),
//						RequestsStorage: pulumi.String("1Gi"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewApp(ctx, "fooApp", &rancher2.AppArgs{
//				CatalogName:     pulumi.String("<catalog_name>"),
//				Description:     pulumi.String("Foo app"),
//				ProjectId:       pulumi.String("<project_id>"),
//				TemplateName:    pulumi.String("<template_name>"),
//				TemplateVersion: pulumi.String("<template_version>"),
//				TargetNamespace: fooNamespace.ID(),
//				Answers: pulumi.AnyMap{
//					"ingress_host": pulumi.Any("test.xip.io"),
//					"foo":          pulumi.Any("bar"),
//					"ingress.annotations.nginx.ingress.kubernetes.io/force-ssl-redirect": pulumi.Any(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Apps can be imported using the app ID in the format `<project_id>:<app_name>`
//
// ```sh
//
//	$ pulumi import rancher2:index/app:App foo &lt;PROJECT_ID_ID&gt;:&lt;APP_NAME&gt;
//
// ```
type App struct {
	pulumi.CustomResourceState

	// Annotations for App object (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// Answers for the app template. If modified, app will be upgraded (map)
	Answers pulumi.MapOutput `pulumi:"answers"`
	// Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
	// * add cluster ID before name, `local:<name>` or `c-XXXXX:<name>`
	// * add project ID before name, `p-XXXXX:<name>`
	CatalogName pulumi.StringOutput `pulumi:"catalogName"`
	// Description for the app (string)
	Description pulumi.StringOutput `pulumi:"description"`
	// (Computed) The url of the app template on a catalog (string)
	ExternalId pulumi.StringOutput `pulumi:"externalId"`
	// Force app upgrade (string)
	ForceUpgrade pulumi.BoolPtrOutput `pulumi:"forceUpgrade"`
	// Labels for App object (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The name of the app (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The project id where the app will be installed (string)
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revisionId` (string)
	RevisionId pulumi.StringOutput `pulumi:"revisionId"`
	// The namespace id where the app will be installed (string)
	TargetNamespace pulumi.StringOutput `pulumi:"targetNamespace"`
	// Template name of the app. If modified, app will be upgraded (string)
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
	// Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
	TemplateVersion pulumi.StringOutput `pulumi:"templateVersion"`
	// values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
	ValuesYaml pulumi.StringPtrOutput `pulumi:"valuesYaml"`
	// Wait until app is deployed and active. Default: `true` (bool)
	Wait pulumi.BoolPtrOutput `pulumi:"wait"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogName == nil {
		return nil, errors.New("invalid value for required argument 'CatalogName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TargetNamespace == nil {
		return nil, errors.New("invalid value for required argument 'TargetNamespace'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource App
	err := ctx.RegisterResource("rancher2:index/app:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("rancher2:index/app:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
	// Annotations for App object (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Answers for the app template. If modified, app will be upgraded (map)
	Answers map[string]interface{} `pulumi:"answers"`
	// Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
	// * add cluster ID before name, `local:<name>` or `c-XXXXX:<name>`
	// * add project ID before name, `p-XXXXX:<name>`
	CatalogName *string `pulumi:"catalogName"`
	// Description for the app (string)
	Description *string `pulumi:"description"`
	// (Computed) The url of the app template on a catalog (string)
	ExternalId *string `pulumi:"externalId"`
	// Force app upgrade (string)
	ForceUpgrade *bool `pulumi:"forceUpgrade"`
	// Labels for App object (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the app (string)
	Name *string `pulumi:"name"`
	// The project id where the app will be installed (string)
	ProjectId *string `pulumi:"projectId"`
	// Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revisionId` (string)
	RevisionId *string `pulumi:"revisionId"`
	// The namespace id where the app will be installed (string)
	TargetNamespace *string `pulumi:"targetNamespace"`
	// Template name of the app. If modified, app will be upgraded (string)
	TemplateName *string `pulumi:"templateName"`
	// Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
	TemplateVersion *string `pulumi:"templateVersion"`
	// values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
	ValuesYaml *string `pulumi:"valuesYaml"`
	// Wait until app is deployed and active. Default: `true` (bool)
	Wait *bool `pulumi:"wait"`
}

type AppState struct {
	// Annotations for App object (map)
	Annotations pulumi.MapInput
	// Answers for the app template. If modified, app will be upgraded (map)
	Answers pulumi.MapInput
	// Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
	// * add cluster ID before name, `local:<name>` or `c-XXXXX:<name>`
	// * add project ID before name, `p-XXXXX:<name>`
	CatalogName pulumi.StringPtrInput
	// Description for the app (string)
	Description pulumi.StringPtrInput
	// (Computed) The url of the app template on a catalog (string)
	ExternalId pulumi.StringPtrInput
	// Force app upgrade (string)
	ForceUpgrade pulumi.BoolPtrInput
	// Labels for App object (map)
	Labels pulumi.MapInput
	// The name of the app (string)
	Name pulumi.StringPtrInput
	// The project id where the app will be installed (string)
	ProjectId pulumi.StringPtrInput
	// Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revisionId` (string)
	RevisionId pulumi.StringPtrInput
	// The namespace id where the app will be installed (string)
	TargetNamespace pulumi.StringPtrInput
	// Template name of the app. If modified, app will be upgraded (string)
	TemplateName pulumi.StringPtrInput
	// Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
	TemplateVersion pulumi.StringPtrInput
	// values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
	ValuesYaml pulumi.StringPtrInput
	// Wait until app is deployed and active. Default: `true` (bool)
	Wait pulumi.BoolPtrInput
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	// Annotations for App object (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Answers for the app template. If modified, app will be upgraded (map)
	Answers map[string]interface{} `pulumi:"answers"`
	// Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
	// * add cluster ID before name, `local:<name>` or `c-XXXXX:<name>`
	// * add project ID before name, `p-XXXXX:<name>`
	CatalogName string `pulumi:"catalogName"`
	// Description for the app (string)
	Description *string `pulumi:"description"`
	// Force app upgrade (string)
	ForceUpgrade *bool `pulumi:"forceUpgrade"`
	// Labels for App object (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the app (string)
	Name *string `pulumi:"name"`
	// The project id where the app will be installed (string)
	ProjectId string `pulumi:"projectId"`
	// Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revisionId` (string)
	RevisionId *string `pulumi:"revisionId"`
	// The namespace id where the app will be installed (string)
	TargetNamespace string `pulumi:"targetNamespace"`
	// Template name of the app. If modified, app will be upgraded (string)
	TemplateName string `pulumi:"templateName"`
	// Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
	TemplateVersion *string `pulumi:"templateVersion"`
	// values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
	ValuesYaml *string `pulumi:"valuesYaml"`
	// Wait until app is deployed and active. Default: `true` (bool)
	Wait *bool `pulumi:"wait"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	// Annotations for App object (map)
	Annotations pulumi.MapInput
	// Answers for the app template. If modified, app will be upgraded (map)
	Answers pulumi.MapInput
	// Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
	// * add cluster ID before name, `local:<name>` or `c-XXXXX:<name>`
	// * add project ID before name, `p-XXXXX:<name>`
	CatalogName pulumi.StringInput
	// Description for the app (string)
	Description pulumi.StringPtrInput
	// Force app upgrade (string)
	ForceUpgrade pulumi.BoolPtrInput
	// Labels for App object (map)
	Labels pulumi.MapInput
	// The name of the app (string)
	Name pulumi.StringPtrInput
	// The project id where the app will be installed (string)
	ProjectId pulumi.StringInput
	// Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revisionId` (string)
	RevisionId pulumi.StringPtrInput
	// The namespace id where the app will be installed (string)
	TargetNamespace pulumi.StringInput
	// Template name of the app. If modified, app will be upgraded (string)
	TemplateName pulumi.StringInput
	// Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
	TemplateVersion pulumi.StringPtrInput
	// values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
	ValuesYaml pulumi.StringPtrInput
	// Wait until app is deployed and active. Default: `true` (bool)
	Wait pulumi.BoolPtrInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

// AppArrayInput is an input type that accepts AppArray and AppArrayOutput values.
// You can construct a concrete instance of `AppArrayInput` via:
//
//	AppArray{ AppArgs{...} }
type AppArrayInput interface {
	pulumi.Input

	ToAppArrayOutput() AppArrayOutput
	ToAppArrayOutputWithContext(context.Context) AppArrayOutput
}

type AppArray []AppInput

func (AppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (i AppArray) ToAppArrayOutput() AppArrayOutput {
	return i.ToAppArrayOutputWithContext(context.Background())
}

func (i AppArray) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppArrayOutput)
}

// AppMapInput is an input type that accepts AppMap and AppMapOutput values.
// You can construct a concrete instance of `AppMapInput` via:
//
//	AppMap{ "key": AppArgs{...} }
type AppMapInput interface {
	pulumi.Input

	ToAppMapOutput() AppMapOutput
	ToAppMapOutputWithContext(context.Context) AppMapOutput
}

type AppMap map[string]AppInput

func (AppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (i AppMap) ToAppMapOutput() AppMapOutput {
	return i.ToAppMapOutputWithContext(context.Background())
}

func (i AppMap) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMapOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

// Annotations for App object (map)
func (o AppOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v *App) pulumi.MapOutput { return v.Annotations }).(pulumi.MapOutput)
}

// Answers for the app template. If modified, app will be upgraded (map)
func (o AppOutput) Answers() pulumi.MapOutput {
	return o.ApplyT(func(v *App) pulumi.MapOutput { return v.Answers }).(pulumi.MapOutput)
}

// Catalog name of the app. If modified, app will be upgraded. For use scoped catalogs:
// * add cluster ID before name, `local:<name>` or `c-XXXXX:<name>`
// * add project ID before name, `p-XXXXX:<name>`
func (o AppOutput) CatalogName() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.CatalogName }).(pulumi.StringOutput)
}

// Description for the app (string)
func (o AppOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Computed) The url of the app template on a catalog (string)
func (o AppOutput) ExternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.ExternalId }).(pulumi.StringOutput)
}

// Force app upgrade (string)
func (o AppOutput) ForceUpgrade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *App) pulumi.BoolPtrOutput { return v.ForceUpgrade }).(pulumi.BoolPtrOutput)
}

// Labels for App object (map)
func (o AppOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v *App) pulumi.MapOutput { return v.Labels }).(pulumi.MapOutput)
}

// The name of the app (string)
func (o AppOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project id where the app will be installed (string)
func (o AppOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Current revision id for the app. If modified, If this argument is provided or modified, app will be rollbacked to `revisionId` (string)
func (o AppOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.RevisionId }).(pulumi.StringOutput)
}

// The namespace id where the app will be installed (string)
func (o AppOutput) TargetNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.TargetNamespace }).(pulumi.StringOutput)
}

// Template name of the app. If modified, app will be upgraded (string)
func (o AppOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

// Template version of the app. If modified, app will be upgraded. Default: `latest` (string)
func (o AppOutput) TemplateVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.TemplateVersion }).(pulumi.StringOutput)
}

// values.yaml base64 encoded file content for the app template. If modified, app will be upgraded (string)
func (o AppOutput) ValuesYaml() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *App) pulumi.StringPtrOutput { return v.ValuesYaml }).(pulumi.StringPtrOutput)
}

// Wait until app is deployed and active. Default: `true` (bool)
func (o AppOutput) Wait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *App) pulumi.BoolPtrOutput { return v.Wait }).(pulumi.BoolPtrOutput)
}

type AppArrayOutput struct{ *pulumi.OutputState }

func (AppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (o AppArrayOutput) ToAppArrayOutput() AppArrayOutput {
	return o
}

func (o AppArrayOutput) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return o
}

func (o AppArrayOutput) Index(i pulumi.IntInput) AppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *App {
		return vs[0].([]*App)[vs[1].(int)]
	}).(AppOutput)
}

type AppMapOutput struct{ *pulumi.OutputState }

func (AppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (o AppMapOutput) ToAppMapOutput() AppMapOutput {
	return o
}

func (o AppMapOutput) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return o
}

func (o AppMapOutput) MapIndex(k pulumi.StringInput) AppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *App {
		return vs[0].(map[string]*App)[vs[1].(string)]
	}).(AppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppArrayInput)(nil)).Elem(), AppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMapInput)(nil)).Elem(), AppMap{})
	pulumi.RegisterOutputType(AppOutput{})
	pulumi.RegisterOutputType(AppArrayOutput{})
	pulumi.RegisterOutputType(AppMapOutput{})
}
