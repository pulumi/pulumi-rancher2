// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-rancher2/sdk/v6/go/rancher2/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Rancher v2 Node Pool resource. This can be used to create Node Pool, using Node template for Rancher v2 RKE clusters and retrieve their information.
//
// ## Import
//
// # Node Pool can be imported using the Rancher Node Pool ID
//
// ```sh
// $ pulumi import rancher2:index/nodePool:NodePool foo &lt;node_pool_id&gt;
// ```
type NodePool struct {
	pulumi.CustomResourceState

	// Annotations for Node Pool object (map)
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The RKE cluster id to use Node Pool (string)
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// RKE control plane role for created nodes (bool)
	ControlPlane pulumi.BoolPtrOutput `pulumi:"controlPlane"`
	// Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
	DeleteNotReadyAfterSecs pulumi.IntPtrOutput `pulumi:"deleteNotReadyAfterSecs"`
	// Drain nodes before delete. Default: `false` (bool)
	DrainBeforeDelete pulumi.BoolPtrOutput `pulumi:"drainBeforeDelete"`
	// RKE etcd role for created nodes (bool)
	Etcd pulumi.BoolPtrOutput `pulumi:"etcd"`
	// The prefix for created nodes of the Node Pool (string)
	HostnamePrefix pulumi.StringOutput `pulumi:"hostnamePrefix"`
	// Labels for Node Pool object (map)
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the Node Pool (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// Node taints. For Rancher v2.3.3 and above (List)
	NodeTaints NodePoolNodeTaintArrayOutput `pulumi:"nodeTaints"`
	// The Node Template ID to use for node creation (string)
	NodeTemplateId pulumi.StringOutput `pulumi:"nodeTemplateId"`
	// The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
	Quantity pulumi.IntPtrOutput `pulumi:"quantity"`
	// RKE role role for created nodes (bool)
	Worker pulumi.BoolPtrOutput `pulumi:"worker"`
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOption) (*NodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.HostnamePrefix == nil {
		return nil, errors.New("invalid value for required argument 'HostnamePrefix'")
	}
	if args.NodeTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'NodeTemplateId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodePool
	err := ctx.RegisterResource("rancher2:index/nodePool:NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolState, opts ...pulumi.ResourceOption) (*NodePool, error) {
	var resource NodePool
	err := ctx.ReadResource("rancher2:index/nodePool:NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePool resources.
type nodePoolState struct {
	// Annotations for Node Pool object (map)
	Annotations map[string]string `pulumi:"annotations"`
	// The RKE cluster id to use Node Pool (string)
	ClusterId *string `pulumi:"clusterId"`
	// RKE control plane role for created nodes (bool)
	ControlPlane *bool `pulumi:"controlPlane"`
	// Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
	DeleteNotReadyAfterSecs *int `pulumi:"deleteNotReadyAfterSecs"`
	// Drain nodes before delete. Default: `false` (bool)
	DrainBeforeDelete *bool `pulumi:"drainBeforeDelete"`
	// RKE etcd role for created nodes (bool)
	Etcd *bool `pulumi:"etcd"`
	// The prefix for created nodes of the Node Pool (string)
	HostnamePrefix *string `pulumi:"hostnamePrefix"`
	// Labels for Node Pool object (map)
	Labels map[string]string `pulumi:"labels"`
	// The name of the Node Pool (string)
	Name *string `pulumi:"name"`
	// Node taints. For Rancher v2.3.3 and above (List)
	NodeTaints []NodePoolNodeTaint `pulumi:"nodeTaints"`
	// The Node Template ID to use for node creation (string)
	NodeTemplateId *string `pulumi:"nodeTemplateId"`
	// The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
	Quantity *int `pulumi:"quantity"`
	// RKE role role for created nodes (bool)
	Worker *bool `pulumi:"worker"`
}

type NodePoolState struct {
	// Annotations for Node Pool object (map)
	Annotations pulumi.StringMapInput
	// The RKE cluster id to use Node Pool (string)
	ClusterId pulumi.StringPtrInput
	// RKE control plane role for created nodes (bool)
	ControlPlane pulumi.BoolPtrInput
	// Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
	DeleteNotReadyAfterSecs pulumi.IntPtrInput
	// Drain nodes before delete. Default: `false` (bool)
	DrainBeforeDelete pulumi.BoolPtrInput
	// RKE etcd role for created nodes (bool)
	Etcd pulumi.BoolPtrInput
	// The prefix for created nodes of the Node Pool (string)
	HostnamePrefix pulumi.StringPtrInput
	// Labels for Node Pool object (map)
	Labels pulumi.StringMapInput
	// The name of the Node Pool (string)
	Name pulumi.StringPtrInput
	// Node taints. For Rancher v2.3.3 and above (List)
	NodeTaints NodePoolNodeTaintArrayInput
	// The Node Template ID to use for node creation (string)
	NodeTemplateId pulumi.StringPtrInput
	// The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
	Quantity pulumi.IntPtrInput
	// RKE role role for created nodes (bool)
	Worker pulumi.BoolPtrInput
}

func (NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolState)(nil)).Elem()
}

type nodePoolArgs struct {
	// Annotations for Node Pool object (map)
	Annotations map[string]string `pulumi:"annotations"`
	// The RKE cluster id to use Node Pool (string)
	ClusterId string `pulumi:"clusterId"`
	// RKE control plane role for created nodes (bool)
	ControlPlane *bool `pulumi:"controlPlane"`
	// Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
	DeleteNotReadyAfterSecs *int `pulumi:"deleteNotReadyAfterSecs"`
	// Drain nodes before delete. Default: `false` (bool)
	DrainBeforeDelete *bool `pulumi:"drainBeforeDelete"`
	// RKE etcd role for created nodes (bool)
	Etcd *bool `pulumi:"etcd"`
	// The prefix for created nodes of the Node Pool (string)
	HostnamePrefix string `pulumi:"hostnamePrefix"`
	// Labels for Node Pool object (map)
	Labels map[string]string `pulumi:"labels"`
	// The name of the Node Pool (string)
	Name *string `pulumi:"name"`
	// Node taints. For Rancher v2.3.3 and above (List)
	NodeTaints []NodePoolNodeTaint `pulumi:"nodeTaints"`
	// The Node Template ID to use for node creation (string)
	NodeTemplateId string `pulumi:"nodeTemplateId"`
	// The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
	Quantity *int `pulumi:"quantity"`
	// RKE role role for created nodes (bool)
	Worker *bool `pulumi:"worker"`
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// Annotations for Node Pool object (map)
	Annotations pulumi.StringMapInput
	// The RKE cluster id to use Node Pool (string)
	ClusterId pulumi.StringInput
	// RKE control plane role for created nodes (bool)
	ControlPlane pulumi.BoolPtrInput
	// Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
	DeleteNotReadyAfterSecs pulumi.IntPtrInput
	// Drain nodes before delete. Default: `false` (bool)
	DrainBeforeDelete pulumi.BoolPtrInput
	// RKE etcd role for created nodes (bool)
	Etcd pulumi.BoolPtrInput
	// The prefix for created nodes of the Node Pool (string)
	HostnamePrefix pulumi.StringInput
	// Labels for Node Pool object (map)
	Labels pulumi.StringMapInput
	// The name of the Node Pool (string)
	Name pulumi.StringPtrInput
	// Node taints. For Rancher v2.3.3 and above (List)
	NodeTaints NodePoolNodeTaintArrayInput
	// The Node Template ID to use for node creation (string)
	NodeTemplateId pulumi.StringInput
	// The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
	Quantity pulumi.IntPtrInput
	// RKE role role for created nodes (bool)
	Worker pulumi.BoolPtrInput
}

func (NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolArgs)(nil)).Elem()
}

type NodePoolInput interface {
	pulumi.Input

	ToNodePoolOutput() NodePoolOutput
	ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput
}

func (*NodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (i *NodePool) ToNodePoolOutput() NodePoolOutput {
	return i.ToNodePoolOutputWithContext(context.Background())
}

func (i *NodePool) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolOutput)
}

// NodePoolArrayInput is an input type that accepts NodePoolArray and NodePoolArrayOutput values.
// You can construct a concrete instance of `NodePoolArrayInput` via:
//
//	NodePoolArray{ NodePoolArgs{...} }
type NodePoolArrayInput interface {
	pulumi.Input

	ToNodePoolArrayOutput() NodePoolArrayOutput
	ToNodePoolArrayOutputWithContext(context.Context) NodePoolArrayOutput
}

type NodePoolArray []NodePoolInput

func (NodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (i NodePoolArray) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return i.ToNodePoolArrayOutputWithContext(context.Background())
}

func (i NodePoolArray) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolArrayOutput)
}

// NodePoolMapInput is an input type that accepts NodePoolMap and NodePoolMapOutput values.
// You can construct a concrete instance of `NodePoolMapInput` via:
//
//	NodePoolMap{ "key": NodePoolArgs{...} }
type NodePoolMapInput interface {
	pulumi.Input

	ToNodePoolMapOutput() NodePoolMapOutput
	ToNodePoolMapOutputWithContext(context.Context) NodePoolMapOutput
}

type NodePoolMap map[string]NodePoolInput

func (NodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (i NodePoolMap) ToNodePoolMapOutput() NodePoolMapOutput {
	return i.ToNodePoolMapOutputWithContext(context.Background())
}

func (i NodePoolMap) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMapOutput)
}

type NodePoolOutput struct{ *pulumi.OutputState }

func (NodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (o NodePoolOutput) ToNodePoolOutput() NodePoolOutput {
	return o
}

func (o NodePoolOutput) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return o
}

// Annotations for Node Pool object (map)
func (o NodePoolOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The RKE cluster id to use Node Pool (string)
func (o NodePoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// RKE control plane role for created nodes (bool)
func (o NodePoolOutput) ControlPlane() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.BoolPtrOutput { return v.ControlPlane }).(pulumi.BoolPtrOutput)
}

// Delete not ready node after secs. For Rancher v2.3.3 and above. Default `0` (int)
func (o NodePoolOutput) DeleteNotReadyAfterSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.DeleteNotReadyAfterSecs }).(pulumi.IntPtrOutput)
}

// Drain nodes before delete. Default: `false` (bool)
func (o NodePoolOutput) DrainBeforeDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.BoolPtrOutput { return v.DrainBeforeDelete }).(pulumi.BoolPtrOutput)
}

// RKE etcd role for created nodes (bool)
func (o NodePoolOutput) Etcd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.BoolPtrOutput { return v.Etcd }).(pulumi.BoolPtrOutput)
}

// The prefix for created nodes of the Node Pool (string)
func (o NodePoolOutput) HostnamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.HostnamePrefix }).(pulumi.StringOutput)
}

// Labels for Node Pool object (map)
func (o NodePoolOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the Node Pool (string)
func (o NodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Node taints. For Rancher v2.3.3 and above (List)
func (o NodePoolOutput) NodeTaints() NodePoolNodeTaintArrayOutput {
	return o.ApplyT(func(v *NodePool) NodePoolNodeTaintArrayOutput { return v.NodeTaints }).(NodePoolNodeTaintArrayOutput)
}

// The Node Template ID to use for node creation (string)
func (o NodePoolOutput) NodeTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.NodeTemplateId }).(pulumi.StringOutput)
}

// The number of nodes to create on Node Pool. Default `1`. Only values >= 1 allowed (int)
func (o NodePoolOutput) Quantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.IntPtrOutput { return v.Quantity }).(pulumi.IntPtrOutput)
}

// RKE role role for created nodes (bool)
func (o NodePoolOutput) Worker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.BoolPtrOutput { return v.Worker }).(pulumi.BoolPtrOutput)
}

type NodePoolArrayOutput struct{ *pulumi.OutputState }

func (NodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) Index(i pulumi.IntInput) NodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].([]*NodePool)[vs[1].(int)]
	}).(NodePoolOutput)
}

type NodePoolMapOutput struct{ *pulumi.OutputState }

func (NodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (o NodePoolMapOutput) ToNodePoolMapOutput() NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) MapIndex(k pulumi.StringInput) NodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].(map[string]*NodePool)[vs[1].(string)]
	}).(NodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolInput)(nil)).Elem(), &NodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolArrayInput)(nil)).Elem(), NodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMapInput)(nil)).Elem(), NodePoolMap{})
	pulumi.RegisterOutputType(NodePoolOutput{})
	pulumi.RegisterOutputType(NodePoolArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMapOutput{})
}
