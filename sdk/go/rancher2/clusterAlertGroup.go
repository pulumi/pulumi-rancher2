// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Rancher v2 Cluster Alert Group resource. This can be used to create Cluster Alert Group for Rancher v2 environments and retrieve their information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewClusterAlertGroup(ctx, "foo", &rancher2.ClusterAlertGroupArgs{
// 			ClusterId:             pulumi.String("<cluster_id>"),
// 			Description:           pulumi.String("Terraform cluster alert group"),
// 			GroupIntervalSeconds:  pulumi.Int(300),
// 			RepeatIntervalSeconds: pulumi.Int(3600),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ClusterAlertGroup struct {
	pulumi.CustomResourceState

	// The cluster alert group annotations (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// The cluster id where create cluster alert group (string)
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The cluster alert group description (string)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrOutput `pulumi:"groupIntervalSeconds"`
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrOutput `pulumi:"groupWaitSeconds"`
	// The cluster alert group labels (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The cluster alert group name (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The cluster alert group recipients (list)
	Recipients ClusterAlertGroupRecipientArrayOutput `pulumi:"recipients"`
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrOutput `pulumi:"repeatIntervalSeconds"`
}

// NewClusterAlertGroup registers a new resource with the given unique name, arguments, and options.
func NewClusterAlertGroup(ctx *pulumi.Context,
	name string, args *ClusterAlertGroupArgs, opts ...pulumi.ResourceOption) (*ClusterAlertGroup, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil {
		args = &ClusterAlertGroupArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("rancher2:index/clusterAlterGroup:ClusterAlterGroup"),
		},
	})
	opts = append(opts, aliases)
	var resource ClusterAlertGroup
	err := ctx.RegisterResource("rancher2:index/clusterAlertGroup:ClusterAlertGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterAlertGroup gets an existing ClusterAlertGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterAlertGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterAlertGroupState, opts ...pulumi.ResourceOption) (*ClusterAlertGroup, error) {
	var resource ClusterAlertGroup
	err := ctx.ReadResource("rancher2:index/clusterAlertGroup:ClusterAlertGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterAlertGroup resources.
type clusterAlertGroupState struct {
	// The cluster alert group annotations (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The cluster id where create cluster alert group (string)
	ClusterId *string `pulumi:"clusterId"`
	// The cluster alert group description (string)
	Description *string `pulumi:"description"`
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds *int `pulumi:"groupIntervalSeconds"`
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds *int `pulumi:"groupWaitSeconds"`
	// The cluster alert group labels (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The cluster alert group name (string)
	Name *string `pulumi:"name"`
	// The cluster alert group recipients (list)
	Recipients []ClusterAlertGroupRecipient `pulumi:"recipients"`
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds *int `pulumi:"repeatIntervalSeconds"`
}

type ClusterAlertGroupState struct {
	// The cluster alert group annotations (map)
	Annotations pulumi.MapInput
	// The cluster id where create cluster alert group (string)
	ClusterId pulumi.StringPtrInput
	// The cluster alert group description (string)
	Description pulumi.StringPtrInput
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrInput
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrInput
	// The cluster alert group labels (map)
	Labels pulumi.MapInput
	// The cluster alert group name (string)
	Name pulumi.StringPtrInput
	// The cluster alert group recipients (list)
	Recipients ClusterAlertGroupRecipientArrayInput
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrInput
}

func (ClusterAlertGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAlertGroupState)(nil)).Elem()
}

type clusterAlertGroupArgs struct {
	// The cluster alert group annotations (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The cluster id where create cluster alert group (string)
	ClusterId string `pulumi:"clusterId"`
	// The cluster alert group description (string)
	Description *string `pulumi:"description"`
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds *int `pulumi:"groupIntervalSeconds"`
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds *int `pulumi:"groupWaitSeconds"`
	// The cluster alert group labels (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The cluster alert group name (string)
	Name *string `pulumi:"name"`
	// The cluster alert group recipients (list)
	Recipients []ClusterAlertGroupRecipient `pulumi:"recipients"`
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds *int `pulumi:"repeatIntervalSeconds"`
}

// The set of arguments for constructing a ClusterAlertGroup resource.
type ClusterAlertGroupArgs struct {
	// The cluster alert group annotations (map)
	Annotations pulumi.MapInput
	// The cluster id where create cluster alert group (string)
	ClusterId pulumi.StringInput
	// The cluster alert group description (string)
	Description pulumi.StringPtrInput
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrInput
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrInput
	// The cluster alert group labels (map)
	Labels pulumi.MapInput
	// The cluster alert group name (string)
	Name pulumi.StringPtrInput
	// The cluster alert group recipients (list)
	Recipients ClusterAlertGroupRecipientArrayInput
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrInput
}

func (ClusterAlertGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAlertGroupArgs)(nil)).Elem()
}
