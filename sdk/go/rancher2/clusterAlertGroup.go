// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Rancher v2 Cluster Alert Group resource. This can be used to create Cluster Alert Group for Rancher v2 environments and retrieve their information.
//
// ## Import
//
// # Cluster Alert Group can be imported using the Rancher cluster alert group ID
//
// ```sh
//
//	$ pulumi import rancher2:index/clusterAlertGroup:ClusterAlertGroup foo &lt;CLUSTER_ALERT_GROUP_ID&gt;
//
// ```
type ClusterAlertGroup struct {
	pulumi.CustomResourceState

	// The cluster alert group annotations (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// The cluster id where create cluster alert group (string)
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The cluster alert group description (string)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrOutput `pulumi:"groupIntervalSeconds"`
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrOutput `pulumi:"groupWaitSeconds"`
	// The cluster alert group labels (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The cluster alert group name (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The cluster alert group recipients (list)
	Recipients ClusterAlertGroupRecipientArrayOutput `pulumi:"recipients"`
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrOutput `pulumi:"repeatIntervalSeconds"`
}

// NewClusterAlertGroup registers a new resource with the given unique name, arguments, and options.
func NewClusterAlertGroup(ctx *pulumi.Context,
	name string, args *ClusterAlertGroupArgs, opts ...pulumi.ResourceOption) (*ClusterAlertGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("rancher2:index/clusterAlterGroup:ClusterAlterGroup"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterAlertGroup
	err := ctx.RegisterResource("rancher2:index/clusterAlertGroup:ClusterAlertGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterAlertGroup gets an existing ClusterAlertGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterAlertGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterAlertGroupState, opts ...pulumi.ResourceOption) (*ClusterAlertGroup, error) {
	var resource ClusterAlertGroup
	err := ctx.ReadResource("rancher2:index/clusterAlertGroup:ClusterAlertGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterAlertGroup resources.
type clusterAlertGroupState struct {
	// The cluster alert group annotations (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The cluster id where create cluster alert group (string)
	ClusterId *string `pulumi:"clusterId"`
	// The cluster alert group description (string)
	Description *string `pulumi:"description"`
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds *int `pulumi:"groupIntervalSeconds"`
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds *int `pulumi:"groupWaitSeconds"`
	// The cluster alert group labels (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The cluster alert group name (string)
	Name *string `pulumi:"name"`
	// The cluster alert group recipients (list)
	Recipients []ClusterAlertGroupRecipient `pulumi:"recipients"`
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds *int `pulumi:"repeatIntervalSeconds"`
}

type ClusterAlertGroupState struct {
	// The cluster alert group annotations (map)
	Annotations pulumi.MapInput
	// The cluster id where create cluster alert group (string)
	ClusterId pulumi.StringPtrInput
	// The cluster alert group description (string)
	Description pulumi.StringPtrInput
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrInput
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrInput
	// The cluster alert group labels (map)
	Labels pulumi.MapInput
	// The cluster alert group name (string)
	Name pulumi.StringPtrInput
	// The cluster alert group recipients (list)
	Recipients ClusterAlertGroupRecipientArrayInput
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrInput
}

func (ClusterAlertGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAlertGroupState)(nil)).Elem()
}

type clusterAlertGroupArgs struct {
	// The cluster alert group annotations (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The cluster id where create cluster alert group (string)
	ClusterId string `pulumi:"clusterId"`
	// The cluster alert group description (string)
	Description *string `pulumi:"description"`
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds *int `pulumi:"groupIntervalSeconds"`
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds *int `pulumi:"groupWaitSeconds"`
	// The cluster alert group labels (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The cluster alert group name (string)
	Name *string `pulumi:"name"`
	// The cluster alert group recipients (list)
	Recipients []ClusterAlertGroupRecipient `pulumi:"recipients"`
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds *int `pulumi:"repeatIntervalSeconds"`
}

// The set of arguments for constructing a ClusterAlertGroup resource.
type ClusterAlertGroupArgs struct {
	// The cluster alert group annotations (map)
	Annotations pulumi.MapInput
	// The cluster id where create cluster alert group (string)
	ClusterId pulumi.StringInput
	// The cluster alert group description (string)
	Description pulumi.StringPtrInput
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrInput
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrInput
	// The cluster alert group labels (map)
	Labels pulumi.MapInput
	// The cluster alert group name (string)
	Name pulumi.StringPtrInput
	// The cluster alert group recipients (list)
	Recipients ClusterAlertGroupRecipientArrayInput
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrInput
}

func (ClusterAlertGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAlertGroupArgs)(nil)).Elem()
}

type ClusterAlertGroupInput interface {
	pulumi.Input

	ToClusterAlertGroupOutput() ClusterAlertGroupOutput
	ToClusterAlertGroupOutputWithContext(ctx context.Context) ClusterAlertGroupOutput
}

func (*ClusterAlertGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAlertGroup)(nil)).Elem()
}

func (i *ClusterAlertGroup) ToClusterAlertGroupOutput() ClusterAlertGroupOutput {
	return i.ToClusterAlertGroupOutputWithContext(context.Background())
}

func (i *ClusterAlertGroup) ToClusterAlertGroupOutputWithContext(ctx context.Context) ClusterAlertGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAlertGroupOutput)
}

func (i *ClusterAlertGroup) ToOutput(ctx context.Context) pulumix.Output[*ClusterAlertGroup] {
	return pulumix.Output[*ClusterAlertGroup]{
		OutputState: i.ToClusterAlertGroupOutputWithContext(ctx).OutputState,
	}
}

// ClusterAlertGroupArrayInput is an input type that accepts ClusterAlertGroupArray and ClusterAlertGroupArrayOutput values.
// You can construct a concrete instance of `ClusterAlertGroupArrayInput` via:
//
//	ClusterAlertGroupArray{ ClusterAlertGroupArgs{...} }
type ClusterAlertGroupArrayInput interface {
	pulumi.Input

	ToClusterAlertGroupArrayOutput() ClusterAlertGroupArrayOutput
	ToClusterAlertGroupArrayOutputWithContext(context.Context) ClusterAlertGroupArrayOutput
}

type ClusterAlertGroupArray []ClusterAlertGroupInput

func (ClusterAlertGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAlertGroup)(nil)).Elem()
}

func (i ClusterAlertGroupArray) ToClusterAlertGroupArrayOutput() ClusterAlertGroupArrayOutput {
	return i.ToClusterAlertGroupArrayOutputWithContext(context.Background())
}

func (i ClusterAlertGroupArray) ToClusterAlertGroupArrayOutputWithContext(ctx context.Context) ClusterAlertGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAlertGroupArrayOutput)
}

func (i ClusterAlertGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*ClusterAlertGroup] {
	return pulumix.Output[[]*ClusterAlertGroup]{
		OutputState: i.ToClusterAlertGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// ClusterAlertGroupMapInput is an input type that accepts ClusterAlertGroupMap and ClusterAlertGroupMapOutput values.
// You can construct a concrete instance of `ClusterAlertGroupMapInput` via:
//
//	ClusterAlertGroupMap{ "key": ClusterAlertGroupArgs{...} }
type ClusterAlertGroupMapInput interface {
	pulumi.Input

	ToClusterAlertGroupMapOutput() ClusterAlertGroupMapOutput
	ToClusterAlertGroupMapOutputWithContext(context.Context) ClusterAlertGroupMapOutput
}

type ClusterAlertGroupMap map[string]ClusterAlertGroupInput

func (ClusterAlertGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAlertGroup)(nil)).Elem()
}

func (i ClusterAlertGroupMap) ToClusterAlertGroupMapOutput() ClusterAlertGroupMapOutput {
	return i.ToClusterAlertGroupMapOutputWithContext(context.Background())
}

func (i ClusterAlertGroupMap) ToClusterAlertGroupMapOutputWithContext(ctx context.Context) ClusterAlertGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAlertGroupMapOutput)
}

func (i ClusterAlertGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ClusterAlertGroup] {
	return pulumix.Output[map[string]*ClusterAlertGroup]{
		OutputState: i.ToClusterAlertGroupMapOutputWithContext(ctx).OutputState,
	}
}

type ClusterAlertGroupOutput struct{ *pulumi.OutputState }

func (ClusterAlertGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAlertGroup)(nil)).Elem()
}

func (o ClusterAlertGroupOutput) ToClusterAlertGroupOutput() ClusterAlertGroupOutput {
	return o
}

func (o ClusterAlertGroupOutput) ToClusterAlertGroupOutputWithContext(ctx context.Context) ClusterAlertGroupOutput {
	return o
}

func (o ClusterAlertGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*ClusterAlertGroup] {
	return pulumix.Output[*ClusterAlertGroup]{
		OutputState: o.OutputState,
	}
}

// The cluster alert group annotations (map)
func (o ClusterAlertGroupOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v *ClusterAlertGroup) pulumi.MapOutput { return v.Annotations }).(pulumi.MapOutput)
}

// The cluster id where create cluster alert group (string)
func (o ClusterAlertGroupOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAlertGroup) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The cluster alert group description (string)
func (o ClusterAlertGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAlertGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The cluster alert group interval seconds. Default: `180` (int)
func (o ClusterAlertGroupOutput) GroupIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterAlertGroup) pulumi.IntPtrOutput { return v.GroupIntervalSeconds }).(pulumi.IntPtrOutput)
}

// The cluster alert group wait seconds. Default: `180` (int)
func (o ClusterAlertGroupOutput) GroupWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterAlertGroup) pulumi.IntPtrOutput { return v.GroupWaitSeconds }).(pulumi.IntPtrOutput)
}

// The cluster alert group labels (map)
func (o ClusterAlertGroupOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v *ClusterAlertGroup) pulumi.MapOutput { return v.Labels }).(pulumi.MapOutput)
}

// The cluster alert group name (string)
func (o ClusterAlertGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAlertGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The cluster alert group recipients (list)
func (o ClusterAlertGroupOutput) Recipients() ClusterAlertGroupRecipientArrayOutput {
	return o.ApplyT(func(v *ClusterAlertGroup) ClusterAlertGroupRecipientArrayOutput { return v.Recipients }).(ClusterAlertGroupRecipientArrayOutput)
}

// The cluster alert group wait seconds. Default: `3600` (int)
func (o ClusterAlertGroupOutput) RepeatIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterAlertGroup) pulumi.IntPtrOutput { return v.RepeatIntervalSeconds }).(pulumi.IntPtrOutput)
}

type ClusterAlertGroupArrayOutput struct{ *pulumi.OutputState }

func (ClusterAlertGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAlertGroup)(nil)).Elem()
}

func (o ClusterAlertGroupArrayOutput) ToClusterAlertGroupArrayOutput() ClusterAlertGroupArrayOutput {
	return o
}

func (o ClusterAlertGroupArrayOutput) ToClusterAlertGroupArrayOutputWithContext(ctx context.Context) ClusterAlertGroupArrayOutput {
	return o
}

func (o ClusterAlertGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ClusterAlertGroup] {
	return pulumix.Output[[]*ClusterAlertGroup]{
		OutputState: o.OutputState,
	}
}

func (o ClusterAlertGroupArrayOutput) Index(i pulumi.IntInput) ClusterAlertGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterAlertGroup {
		return vs[0].([]*ClusterAlertGroup)[vs[1].(int)]
	}).(ClusterAlertGroupOutput)
}

type ClusterAlertGroupMapOutput struct{ *pulumi.OutputState }

func (ClusterAlertGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAlertGroup)(nil)).Elem()
}

func (o ClusterAlertGroupMapOutput) ToClusterAlertGroupMapOutput() ClusterAlertGroupMapOutput {
	return o
}

func (o ClusterAlertGroupMapOutput) ToClusterAlertGroupMapOutputWithContext(ctx context.Context) ClusterAlertGroupMapOutput {
	return o
}

func (o ClusterAlertGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ClusterAlertGroup] {
	return pulumix.Output[map[string]*ClusterAlertGroup]{
		OutputState: o.OutputState,
	}
}

func (o ClusterAlertGroupMapOutput) MapIndex(k pulumi.StringInput) ClusterAlertGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterAlertGroup {
		return vs[0].(map[string]*ClusterAlertGroup)[vs[1].(string)]
	}).(ClusterAlertGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAlertGroupInput)(nil)).Elem(), &ClusterAlertGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAlertGroupArrayInput)(nil)).Elem(), ClusterAlertGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAlertGroupMapInput)(nil)).Elem(), ClusterAlertGroupMap{})
	pulumi.RegisterOutputType(ClusterAlertGroupOutput{})
	pulumi.RegisterOutputType(ClusterAlertGroupArrayOutput{})
	pulumi.RegisterOutputType(ClusterAlertGroupMapOutput{})
}
