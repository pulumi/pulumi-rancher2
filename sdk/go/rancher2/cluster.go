// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
//
// ## Example Usage
// ### Creating Rancher v2 RKE cluster enabling and customizing monitoring
//
// **Note** Cluster monitoring version `0.2.0` or above, can't be enabled until cluster is fully deployed as [`kubeVersion`](https://github.com/rancher/system-charts/blob/52be656700468904b9bf15c3f39cd7112e1f8c9b/charts/rancher-monitoring/v0.2.0/Chart.yaml#L12) requirement has been introduced to helm chart
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewCluster(ctx, "foo_custom", &rancher2.ClusterArgs{
// 			ClusterMonitoringInput: &rancher2.ClusterClusterMonitoringInputArgs{
// 				Answers: pulumi.Map{
// 					"exporter-kubelets.https":                   pulumi.Bool(true),
// 					"exporter-node.enabled":                     pulumi.Bool(true),
// 					"exporter-node.ports.metrics.port":          pulumi.Float64(9796),
// 					"exporter-node.resources.limits.cpu":        pulumi.String("200m"),
// 					"exporter-node.resources.limits.memory":     pulumi.String("200Mi"),
// 					"grafana.persistence.enabled":               pulumi.Bool(false),
// 					"grafana.persistence.size":                  pulumi.String("10Gi"),
// 					"grafana.persistence.storageClass":          pulumi.String("default"),
// 					"operator.resources.limits.memory":          pulumi.String("500Mi"),
// 					"prometheus.persistence.enabled":            pulumi.String("false"),
// 					"prometheus.persistence.size":               pulumi.String("50Gi"),
// 					"prometheus.persistence.storageClass":       pulumi.String("default"),
// 					"prometheus.persistent.useReleaseName":      pulumi.String("true"),
// 					"prometheus.resources.core.limits.cpu":      pulumi.String("1000m"),
// 					"prometheus.resources.core.limits.memory":   pulumi.String("1500Mi"),
// 					"prometheus.resources.core.requests.cpu":    pulumi.String("750m"),
// 					"prometheus.resources.core.requests.memory": pulumi.String("750Mi"),
// 					"prometheus.retention":                      pulumi.String("12h"),
// 				},
// 				Version: pulumi.String("0.1.0"),
// 			},
// 			Description:             pulumi.String("Foo rancher2 custom cluster"),
// 			EnableClusterMonitoring: pulumi.Bool(true),
// 			RkeConfig: &rancher2.ClusterRkeConfigArgs{
// 				Network: &rancher2.ClusterRkeConfigNetworkArgs{
// 					Plugin: pulumi.String("canal"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Creating Rancher v2 RKE cluster enabling/customizing monitoring and istio
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewCluster(ctx, "foo_customCluster", &rancher2.ClusterArgs{
// 			Description: pulumi.String("Foo rancher2 custom cluster"),
// 			RkeConfig: &rancher2.ClusterRkeConfigArgs{
// 				Network: &rancher2.ClusterRkeConfigNetworkArgs{
// 					Plugin: pulumi.String("canal"),
// 				},
// 			},
// 			EnableClusterMonitoring: pulumi.Bool(true),
// 			ClusterMonitoringInput: &rancher2.ClusterClusterMonitoringInputArgs{
// 				Answers: pulumi.Map{
// 					"exporter-kubelets.https":                   pulumi.Bool(true),
// 					"exporter-node.enabled":                     pulumi.Bool(true),
// 					"exporter-node.ports.metrics.port":          pulumi.Float64(9796),
// 					"exporter-node.resources.limits.cpu":        pulumi.String("200m"),
// 					"exporter-node.resources.limits.memory":     pulumi.String("200Mi"),
// 					"grafana.persistence.enabled":               pulumi.Bool(false),
// 					"grafana.persistence.size":                  pulumi.String("10Gi"),
// 					"grafana.persistence.storageClass":          pulumi.String("default"),
// 					"operator.resources.limits.memory":          pulumi.String("500Mi"),
// 					"prometheus.persistence.enabled":            pulumi.String("false"),
// 					"prometheus.persistence.size":               pulumi.String("50Gi"),
// 					"prometheus.persistence.storageClass":       pulumi.String("default"),
// 					"prometheus.persistent.useReleaseName":      pulumi.String("true"),
// 					"prometheus.resources.core.limits.cpu":      pulumi.String("1000m"),
// 					"prometheus.resources.core.limits.memory":   pulumi.String("1500Mi"),
// 					"prometheus.resources.core.requests.cpu":    pulumi.String("750m"),
// 					"prometheus.resources.core.requests.memory": pulumi.String("750Mi"),
// 					"prometheus.retention":                      pulumi.String("12h"),
// 				},
// 				Version: pulumi.String("0.1.0"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewClusterSync(ctx, "foo_customClusterSync", &rancher2.ClusterSyncArgs{
// 			ClusterId:      foo_customCluster.ID(),
// 			WaitMonitoring: foo_customCluster.EnableClusterMonitoring,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewNamespace(ctx, "foo_istio", &rancher2.NamespaceArgs{
// 			ProjectId:   foo_customClusterSync.SystemProjectId,
// 			Description: pulumi.String("istio namespace"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewApp(ctx, "istio", &rancher2.AppArgs{
// 			CatalogName:     pulumi.String("system-library"),
// 			Description:     pulumi.String("Terraform app acceptance test"),
// 			ProjectId:       foo_istio.ProjectId,
// 			TemplateName:    pulumi.String("rancher-istio"),
// 			TemplateVersion: pulumi.String("0.1.1"),
// 			TargetNamespace: foo_istio.ID(),
// 			Answers: pulumi.Map{
// 				"certmanager.enabled": pulumi.Bool(false),
// 				"enableCRDs":          pulumi.Bool(true),
// 				"galley.enabled":      pulumi.Bool(true),
// 				"gateways.enabled":    pulumi.Bool(false),
// 				"gateways.istio-ingressgateway.resources.limits.cpu":      pulumi.String("2000m"),
// 				"gateways.istio-ingressgateway.resources.limits.memory":   pulumi.String("1024Mi"),
// 				"gateways.istio-ingressgateway.resources.requests.cpu":    pulumi.String("100m"),
// 				"gateways.istio-ingressgateway.resources.requests.memory": pulumi.String("128Mi"),
// 				"gateways.istio-ingressgateway.type":                      pulumi.String("NodePort"),
// 				"global.monitoring.type":                                  pulumi.String("cluster-monitoring"),
// 				"global.rancher.clusterId":                                foo_customClusterSync.ClusterId,
// 				"istio_cni.enabled":                                       pulumi.String("false"),
// 				"istiocoredns.enabled":                                    pulumi.String("false"),
// 				"kiali.enabled":                                           pulumi.String("true"),
// 				"mixer.enabled":                                           pulumi.String("true"),
// 				"mixer.policy.enabled":                                    pulumi.String("true"),
// 				"mixer.policy.resources.limits.cpu":                       pulumi.String("4800m"),
// 				"mixer.policy.resources.limits.memory":                    pulumi.String("4096Mi"),
// 				"mixer.policy.resources.requests.cpu":                     pulumi.String("1000m"),
// 				"mixer.policy.resources.requests.memory":                  pulumi.String("1024Mi"),
// 				"mixer.telemetry.resources.limits.cpu":                    pulumi.String("4800m"),
// 				"mixer.telemetry.resources.limits.memory":                 pulumi.String("4096Mi"),
// 				"mixer.telemetry.resources.requests.cpu":                  pulumi.String("1000m"),
// 				"mixer.telemetry.resources.requests.memory":               pulumi.String("1024Mi"),
// 				"mtls.enabled":                                            pulumi.Bool(false),
// 				"nodeagent.enabled":                                       pulumi.Bool(false),
// 				"pilot.enabled":                                           pulumi.Bool(true),
// 				"pilot.resources.limits.cpu":                              pulumi.String("1000m"),
// 				"pilot.resources.limits.memory":                           pulumi.String("4096Mi"),
// 				"pilot.resources.requests.cpu":                            pulumi.String("500m"),
// 				"pilot.resources.requests.memory":                         pulumi.String("2048Mi"),
// 				"pilot.traceSampling":                                     pulumi.String("1"),
// 				"security.enabled":                                        pulumi.Bool(true),
// 				"sidecarInjectorWebhook.enabled":                          pulumi.Bool(true),
// 				"tracing.enabled":                                         pulumi.Bool(true),
// 				"tracing.jaeger.resources.limits.cpu":                     pulumi.String("500m"),
// 				"tracing.jaeger.resources.limits.memory":                  pulumi.String("1024Mi"),
// 				"tracing.jaeger.resources.requests.cpu":                   pulumi.String("100m"),
// 				"tracing.jaeger.resources.requests.memory":                pulumi.String("100Mi"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Creating Rancher v2 RKE cluster assigning a node pool (overlapped planes)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewCluster(ctx, "foo_custom", &rancher2.ClusterArgs{
// 			Description: pulumi.String("Foo rancher2 custom cluster"),
// 			RkeConfig: &rancher2.ClusterRkeConfigArgs{
// 				Network: &rancher2.ClusterRkeConfigNetworkArgs{
// 					Plugin: pulumi.String("canal"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooNodeTemplate, err := rancher2.NewNodeTemplate(ctx, "fooNodeTemplate", &rancher2.NodeTemplateArgs{
// 			Description: pulumi.String("foo test"),
// 			Amazonec2Config: &rancher2.NodeTemplateAmazonec2ConfigArgs{
// 				AccessKey: pulumi.String("<AWS_ACCESS_KEY>"),
// 				SecretKey: pulumi.String("<AWS_SECRET_KEY>"),
// 				Ami:       pulumi.String("<AMI_ID>"),
// 				Region:    pulumi.String("<REGION>"),
// 				SecurityGroups: pulumi.StringArray{
// 					pulumi.String("<AWS_SECURITY_GROUP>"),
// 				},
// 				SubnetId: pulumi.String("<SUBNET_ID>"),
// 				VpcId:    pulumi.String("<VPC_ID>"),
// 				Zone:     pulumi.String("<ZONE>"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewNodePool(ctx, "fooNodePool", &rancher2.NodePoolArgs{
// 			ClusterId:      foo_custom.ID(),
// 			HostnamePrefix: pulumi.String("foo-cluster-0"),
// 			NodeTemplateId: fooNodeTemplate.ID(),
// 			Quantity:       pulumi.Int(3),
// 			ControlPlane:   pulumi.Bool(true),
// 			Etcd:           pulumi.Bool(true),
// 			Worker:         pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Creating Rancher v2 RKE cluster from template. For Rancher v2.3.x or above.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooClusterTemplate, err := rancher2.NewClusterTemplate(ctx, "fooClusterTemplate", &rancher2.ClusterTemplateArgs{
// 			Members: rancher2.ClusterTemplateMemberArray{
// 				&rancher2.ClusterTemplateMemberArgs{
// 					AccessType:      pulumi.String("owner"),
// 					UserPrincipalId: pulumi.String("local://user-XXXXX"),
// 				},
// 			},
// 			TemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{
// 				&rancher2.ClusterTemplateTemplateRevisionArgs{
// 					Name: pulumi.String("V1"),
// 					ClusterConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{
// 						RkeConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{
// 							Network: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{
// 								Plugin: pulumi.String("canal"),
// 							},
// 							Services: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{
// 								Etcd: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{
// 									Creation:  pulumi.String("6h"),
// 									Retention: pulumi.String("24h"),
// 								},
// 							},
// 						},
// 					},
// 					Default: pulumi.Bool(true),
// 				},
// 			},
// 			Description: pulumi.String("Test cluster template v2"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewCluster(ctx, "fooCluster", &rancher2.ClusterArgs{
// 			ClusterTemplateId: fooClusterTemplate.ID(),
// 			ClusterTemplateRevisionId: fooClusterTemplate.TemplateRevisions.ApplyT(func(templateRevisions []rancher2.ClusterTemplateTemplateRevision) (string, error) {
// 				return templateRevisions[0].Id, nil
// 			}).(pulumi.StringOutput),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x or above.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewCluster(ctx, "foo", &rancher2.ClusterArgs{
// 			Description: pulumi.String("Terraform custom cluster"),
// 			RkeConfig: &rancher2.ClusterRkeConfigArgs{
// 				Network: &rancher2.ClusterRkeConfigNetworkArgs{
// 					Plugin: pulumi.String("canal"),
// 				},
// 				Services: &rancher2.ClusterRkeConfigServicesArgs{
// 					Etcd: &rancher2.ClusterRkeConfigServicesEtcdArgs{
// 						Creation:  pulumi.String("6h"),
// 						Retention: pulumi.String("24h"),
// 					},
// 					KubeApi: &rancher2.ClusterRkeConfigServicesKubeApiArgs{
// 						AuditLog: &rancher2.ClusterRkeConfigServicesKubeApiAuditLogArgs{
// 							Configuration: &rancher2.ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs{
// 								Format:    pulumi.String("json"),
// 								MaxAge:    pulumi.Int(5),
// 								MaxBackup: pulumi.Int(5),
// 								MaxSize:   pulumi.Int(100),
// 								Path:      pulumi.String("-"),
// 								Policy:    pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v", "apiVersion: audit.k8s.io/v1\n", "kind: Policy\n", "metadata:\n", "  creationTimestamp: null\n", "omitStages:\n", "- RequestReceived\n", "rules:\n", "- level: RequestResponse\n", "  resources:\n", "  - resources:\n", "    - pods\n", "\n")),
// 							},
// 							Enabled: pulumi.Bool(true),
// 						},
// 					},
// 				},
// 				UpgradeStrategy: &rancher2.ClusterRkeConfigUpgradeStrategyArgs{
// 					Drain:                pulumi.Bool(true),
// 					MaxUnavailableWorker: pulumi.String(fmt.Sprintf("%v%v", "20", "%")),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Creating Rancher v2 RKE cluster with scheduled cluster scan. For Rancher v2.4.x or above.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewCluster(ctx, "foo", &rancher2.ClusterArgs{
// 			Description: pulumi.String("Terraform custom cluster"),
// 			RkeConfig: &rancher2.ClusterRkeConfigArgs{
// 				Network: &rancher2.ClusterRkeConfigNetworkArgs{
// 					Plugin: pulumi.String("canal"),
// 				},
// 				Services: &rancher2.ClusterRkeConfigServicesArgs{
// 					Etcd: &rancher2.ClusterRkeConfigServicesEtcdArgs{
// 						Creation:  pulumi.String("6h"),
// 						Retention: pulumi.String("24h"),
// 					},
// 				},
// 			},
// 			ScheduledClusterScan: &rancher2.ClusterScheduledClusterScanArgs{
// 				Enabled: pulumi.Bool(true),
// 				ScanConfig: &rancher2.ClusterScheduledClusterScanScanConfigArgs{
// 					CisScanConfig: &rancher2.ClusterScheduledClusterScanScanConfigCisScanConfigArgs{
// 						DebugMaster: pulumi.Bool(true),
// 						DebugWorker: pulumi.Bool(true),
// 					},
// 				},
// 				ScheduleConfig: &rancher2.ClusterScheduledClusterScanScheduleConfigArgs{
// 					CronSchedule: pulumi.String("30 * * * *"),
// 					Retention:    pulumi.Int(5),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Importing EKS cluster to Rancher v2, using `eksConfigV2`. For Rancher v2.5.x or above.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooCloudCredential, err := rancher2.NewCloudCredential(ctx, "fooCloudCredential", &rancher2.CloudCredentialArgs{
// 			Description: pulumi.String("foo test"),
// 			Amazonec2CredentialConfig: &rancher2.CloudCredentialAmazonec2CredentialConfigArgs{
// 				AccessKey: pulumi.String("<AWS_ACCESS_KEY>"),
// 				SecretKey: pulumi.String("<AWS_SECRET_KEY>"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewCluster(ctx, "fooCluster", &rancher2.ClusterArgs{
// 			Description: pulumi.String("Terraform EKS cluster"),
// 			EksConfigV2: &rancher2.ClusterEksConfigV2Args{
// 				CloudCredentialId: fooCloudCredential.ID(),
// 				Name:              pulumi.String("<CLUSTER_NAME>"),
// 				Region:            pulumi.String("<EKS_REGION>"),
// 				Imported:          pulumi.Bool(true),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Creating EKS cluster from Rancher v2, using `eksConfigV2`. For Rancher v2.5.x or above.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooCloudCredential, err := rancher2.NewCloudCredential(ctx, "fooCloudCredential", &rancher2.CloudCredentialArgs{
// 			Description: pulumi.String("foo test"),
// 			Amazonec2CredentialConfig: &rancher2.CloudCredentialAmazonec2CredentialConfigArgs{
// 				AccessKey: pulumi.String("<AWS_ACCESS_KEY>"),
// 				SecretKey: pulumi.String("<AWS_SECRET_KEY>"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewCluster(ctx, "fooCluster", &rancher2.ClusterArgs{
// 			Description: pulumi.String("Terraform EKS cluster"),
// 			EksConfigV2: &rancher2.ClusterEksConfigV2Args{
// 				CloudCredentialId: fooCloudCredential.ID(),
// 				Region:            pulumi.String("<EKS_REGION>"),
// 				KubernetesVersion: pulumi.String("1.17"),
// 				LoggingTypes: pulumi.StringArray{
// 					pulumi.String("audit"),
// 					pulumi.String("api"),
// 				},
// 				NodeGroups: rancher2.ClusterEksConfigV2NodeGroupArray{
// 					&rancher2.ClusterEksConfigV2NodeGroupArgs{
// 						Name:         pulumi.String("node_group1"),
// 						InstanceType: pulumi.String("t3.medium"),
// 						DesiredSize:  pulumi.Int(3),
// 						MaxSize:      pulumi.Int(5),
// 					},
// 					&rancher2.ClusterEksConfigV2NodeGroupArgs{
// 						Name:         pulumi.String("node_group2"),
// 						InstanceType: pulumi.String("m5.xlarge"),
// 						DesiredSize:  pulumi.Int(2),
// 						MaxSize:      pulumi.Int(3),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Creating EKS cluster from Rancher v2, using `eksConfigV2` and launch template. For Rancher v2.5.6 or above.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooCloudCredential, err := rancher2.NewCloudCredential(ctx, "fooCloudCredential", &rancher2.CloudCredentialArgs{
// 			Description: pulumi.String("foo test"),
// 			Amazonec2CredentialConfig: &rancher2.CloudCredentialAmazonec2CredentialConfigArgs{
// 				AccessKey: pulumi.String("<AWS_ACCESS_KEY>"),
// 				SecretKey: pulumi.String("<AWS_SECRET_KEY>"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewCluster(ctx, "fooCluster", &rancher2.ClusterArgs{
// 			Description: pulumi.String("Terraform EKS cluster"),
// 			EksConfigV2: &rancher2.ClusterEksConfigV2Args{
// 				CloudCredentialId: fooCloudCredential.ID(),
// 				Region:            pulumi.String("<EKS_REGION>"),
// 				KubernetesVersion: pulumi.String("1.17"),
// 				LoggingTypes: pulumi.StringArray{
// 					pulumi.String("audit"),
// 					pulumi.String("api"),
// 				},
// 				NodeGroups: rancher2.ClusterEksConfigV2NodeGroupArray{
// 					&rancher2.ClusterEksConfigV2NodeGroupArgs{
// 						DesiredSize: pulumi.Int(3),
// 						MaxSize:     pulumi.Int(5),
// 						Name:        pulumi.String("node_group1"),
// 						LaunchTemplates: rancher2.ClusterEksConfigV2NodeGroupLaunchTemplateArray{
// 							&rancher2.ClusterEksConfigV2NodeGroupLaunchTemplateArgs{
// 								Id:      pulumi.String("<EC2_LAUNCH_TEMPLATE_ID>"),
// 								Version: pulumi.Int(1),
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Clusters can be imported using the Rancher Cluster ID
//
// ```sh
//  $ pulumi import rancher2:index/cluster:Cluster foo &lt;CLUSTER_ID&gt;
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig ClusterAksConfigPtrOutput `pulumi:"aksConfig"`
	// Annotations for cluster registration token object (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// TLS CA certificate for etcd service (string)
	CaCert pulumi.StringOutput `pulumi:"caCert"`
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint ClusterClusterAuthEndpointOutput `pulumi:"clusterAuthEndpoint"`
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput ClusterClusterMonitoringInputPtrOutput `pulumi:"clusterMonitoringInput"`
	// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
	ClusterRegistrationToken ClusterClusterRegistrationTokenOutput `pulumi:"clusterRegistrationToken"`
	// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers ClusterClusterTemplateAnswersOutput `pulumi:"clusterTemplateAnswers"`
	// Cluster template ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateId pulumi.StringPtrOutput `pulumi:"clusterTemplateId"`
	// Cluster template questions. Just for Rancher v2.3.x and above (list)
	ClusterTemplateQuestions ClusterClusterTemplateQuestionArrayOutput `pulumi:"clusterTemplateQuestions"`
	// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId pulumi.StringPtrOutput `pulumi:"clusterTemplateRevisionId"`
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId pulumi.StringOutput `pulumi:"defaultPodSecurityPolicyTemplateId"`
	// (Computed) Default project ID for the cluster (string)
	DefaultProjectId pulumi.StringOutput `pulumi:"defaultProjectId"`
	// An optional description of this cluster (string)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Desired agent image. Just for Rancher v2.3.x and above (string)
	DesiredAgentImage pulumi.StringOutput `pulumi:"desiredAgentImage"`
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DesiredAuthImage pulumi.StringOutput `pulumi:"desiredAuthImage"`
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DockerRootDir pulumi.StringOutput `pulumi:"dockerRootDir"`
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver pulumi.StringOutput `pulumi:"driver"`
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig ClusterEksConfigPtrOutput `pulumi:"eksConfig"`
	// The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
	EksConfigV2 ClusterEksConfigV2PtrOutput `pulumi:"eksConfigV2"`
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting pulumi.BoolOutput `pulumi:"enableClusterAlerting"`
	// Deploy istio on `system` project and `istio-system` namespace, using App resource instead. See above example.
	//
	// Deprecated: Deploy istio using rancher2_app resource instead
	EnableClusterIstio pulumi.BoolOutput `pulumi:"enableClusterIstio"`
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring pulumi.BoolOutput `pulumi:"enableClusterMonitoring"`
	// Enable project network isolation (bool)
	EnableNetworkPolicy pulumi.BoolOutput `pulumi:"enableNetworkPolicy"`
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig ClusterGkeConfigPtrOutput `pulumi:"gkeConfig"`
	// (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
	IstioEnabled pulumi.BoolOutput `pulumi:"istioEnabled"`
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig ClusterK3sConfigOutput `pulumi:"k3sConfig"`
	// (Computed/Sensitive) Kube Config generated for the cluster (string)
	KubeConfig pulumi.StringOutput `pulumi:"kubeConfig"`
	// Labels for cluster registration token object (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// Name of cluster registration token (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `gkeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig ClusterOkeConfigPtrOutput `pulumi:"okeConfig"`
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig ClusterRkeConfigOutput `pulumi:"rkeConfig"`
	// Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
	ScheduledClusterScan ClusterScheduledClusterScanOutput `pulumi:"scheduledClusterScan"`
	// (Computed) System project ID for the cluster (string)
	SystemProjectId pulumi.StringOutput `pulumi:"systemProjectId"`
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster pulumi.BoolPtrOutput `pulumi:"windowsPreferedCluster"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	var resource Cluster
	err := ctx.RegisterResource("rancher2:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("rancher2:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig *ClusterAksConfig `pulumi:"aksConfig"`
	// Annotations for cluster registration token object (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// TLS CA certificate for etcd service (string)
	CaCert *string `pulumi:"caCert"`
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint *ClusterClusterAuthEndpoint `pulumi:"clusterAuthEndpoint"`
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput *ClusterClusterMonitoringInput `pulumi:"clusterMonitoringInput"`
	// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
	ClusterRegistrationToken *ClusterClusterRegistrationToken `pulumi:"clusterRegistrationToken"`
	// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers *ClusterClusterTemplateAnswers `pulumi:"clusterTemplateAnswers"`
	// Cluster template ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateId *string `pulumi:"clusterTemplateId"`
	// Cluster template questions. Just for Rancher v2.3.x and above (list)
	ClusterTemplateQuestions []ClusterClusterTemplateQuestion `pulumi:"clusterTemplateQuestions"`
	// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId *string `pulumi:"clusterTemplateRevisionId"`
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId *string `pulumi:"defaultPodSecurityPolicyTemplateId"`
	// (Computed) Default project ID for the cluster (string)
	DefaultProjectId *string `pulumi:"defaultProjectId"`
	// An optional description of this cluster (string)
	Description *string `pulumi:"description"`
	// Desired agent image. Just for Rancher v2.3.x and above (string)
	DesiredAgentImage *string `pulumi:"desiredAgentImage"`
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DesiredAuthImage *string `pulumi:"desiredAuthImage"`
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DockerRootDir *string `pulumi:"dockerRootDir"`
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver *string `pulumi:"driver"`
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig *ClusterEksConfig `pulumi:"eksConfig"`
	// The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
	EksConfigV2 *ClusterEksConfigV2 `pulumi:"eksConfigV2"`
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting *bool `pulumi:"enableClusterAlerting"`
	// Deploy istio on `system` project and `istio-system` namespace, using App resource instead. See above example.
	//
	// Deprecated: Deploy istio using rancher2_app resource instead
	EnableClusterIstio *bool `pulumi:"enableClusterIstio"`
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring *bool `pulumi:"enableClusterMonitoring"`
	// Enable project network isolation (bool)
	EnableNetworkPolicy *bool `pulumi:"enableNetworkPolicy"`
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig *ClusterGkeConfig `pulumi:"gkeConfig"`
	// (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
	IstioEnabled *bool `pulumi:"istioEnabled"`
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig *ClusterK3sConfig `pulumi:"k3sConfig"`
	// (Computed/Sensitive) Kube Config generated for the cluster (string)
	KubeConfig *string `pulumi:"kubeConfig"`
	// Labels for cluster registration token object (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// Name of cluster registration token (string)
	Name *string `pulumi:"name"`
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `gkeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig *ClusterOkeConfig `pulumi:"okeConfig"`
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig *ClusterRkeConfig `pulumi:"rkeConfig"`
	// Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
	ScheduledClusterScan *ClusterScheduledClusterScan `pulumi:"scheduledClusterScan"`
	// (Computed) System project ID for the cluster (string)
	SystemProjectId *string `pulumi:"systemProjectId"`
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster *bool `pulumi:"windowsPreferedCluster"`
}

type ClusterState struct {
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig ClusterAksConfigPtrInput
	// Annotations for cluster registration token object (map)
	Annotations pulumi.MapInput
	// TLS CA certificate for etcd service (string)
	CaCert pulumi.StringPtrInput
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint ClusterClusterAuthEndpointPtrInput
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput ClusterClusterMonitoringInputPtrInput
	// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
	ClusterRegistrationToken ClusterClusterRegistrationTokenPtrInput
	// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers ClusterClusterTemplateAnswersPtrInput
	// Cluster template ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateId pulumi.StringPtrInput
	// Cluster template questions. Just for Rancher v2.3.x and above (list)
	ClusterTemplateQuestions ClusterClusterTemplateQuestionArrayInput
	// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId pulumi.StringPtrInput
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId pulumi.StringPtrInput
	// (Computed) Default project ID for the cluster (string)
	DefaultProjectId pulumi.StringPtrInput
	// An optional description of this cluster (string)
	Description pulumi.StringPtrInput
	// Desired agent image. Just for Rancher v2.3.x and above (string)
	DesiredAgentImage pulumi.StringPtrInput
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DesiredAuthImage pulumi.StringPtrInput
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DockerRootDir pulumi.StringPtrInput
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver pulumi.StringPtrInput
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig ClusterEksConfigPtrInput
	// The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
	EksConfigV2 ClusterEksConfigV2PtrInput
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting pulumi.BoolPtrInput
	// Deploy istio on `system` project and `istio-system` namespace, using App resource instead. See above example.
	//
	// Deprecated: Deploy istio using rancher2_app resource instead
	EnableClusterIstio pulumi.BoolPtrInput
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring pulumi.BoolPtrInput
	// Enable project network isolation (bool)
	EnableNetworkPolicy pulumi.BoolPtrInput
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig ClusterGkeConfigPtrInput
	// (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
	IstioEnabled pulumi.BoolPtrInput
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig ClusterK3sConfigPtrInput
	// (Computed/Sensitive) Kube Config generated for the cluster (string)
	KubeConfig pulumi.StringPtrInput
	// Labels for cluster registration token object (map)
	Labels pulumi.MapInput
	// Name of cluster registration token (string)
	Name pulumi.StringPtrInput
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `gkeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig ClusterOkeConfigPtrInput
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig ClusterRkeConfigPtrInput
	// Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
	ScheduledClusterScan ClusterScheduledClusterScanPtrInput
	// (Computed) System project ID for the cluster (string)
	SystemProjectId pulumi.StringPtrInput
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster pulumi.BoolPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig *ClusterAksConfig `pulumi:"aksConfig"`
	// Annotations for cluster registration token object (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint *ClusterClusterAuthEndpoint `pulumi:"clusterAuthEndpoint"`
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput *ClusterClusterMonitoringInput `pulumi:"clusterMonitoringInput"`
	// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers *ClusterClusterTemplateAnswers `pulumi:"clusterTemplateAnswers"`
	// Cluster template ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateId *string `pulumi:"clusterTemplateId"`
	// Cluster template questions. Just for Rancher v2.3.x and above (list)
	ClusterTemplateQuestions []ClusterClusterTemplateQuestion `pulumi:"clusterTemplateQuestions"`
	// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId *string `pulumi:"clusterTemplateRevisionId"`
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId *string `pulumi:"defaultPodSecurityPolicyTemplateId"`
	// An optional description of this cluster (string)
	Description *string `pulumi:"description"`
	// Desired agent image. Just for Rancher v2.3.x and above (string)
	DesiredAgentImage *string `pulumi:"desiredAgentImage"`
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DesiredAuthImage *string `pulumi:"desiredAuthImage"`
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DockerRootDir *string `pulumi:"dockerRootDir"`
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver *string `pulumi:"driver"`
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig *ClusterEksConfig `pulumi:"eksConfig"`
	// The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
	EksConfigV2 *ClusterEksConfigV2 `pulumi:"eksConfigV2"`
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting *bool `pulumi:"enableClusterAlerting"`
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring *bool `pulumi:"enableClusterMonitoring"`
	// Enable project network isolation (bool)
	EnableNetworkPolicy *bool `pulumi:"enableNetworkPolicy"`
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig *ClusterGkeConfig `pulumi:"gkeConfig"`
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig *ClusterK3sConfig `pulumi:"k3sConfig"`
	// Labels for cluster registration token object (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// Name of cluster registration token (string)
	Name *string `pulumi:"name"`
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `gkeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig *ClusterOkeConfig `pulumi:"okeConfig"`
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig *ClusterRkeConfig `pulumi:"rkeConfig"`
	// Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
	ScheduledClusterScan *ClusterScheduledClusterScan `pulumi:"scheduledClusterScan"`
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster *bool `pulumi:"windowsPreferedCluster"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig ClusterAksConfigPtrInput
	// Annotations for cluster registration token object (map)
	Annotations pulumi.MapInput
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint ClusterClusterAuthEndpointPtrInput
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput ClusterClusterMonitoringInputPtrInput
	// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers ClusterClusterTemplateAnswersPtrInput
	// Cluster template ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateId pulumi.StringPtrInput
	// Cluster template questions. Just for Rancher v2.3.x and above (list)
	ClusterTemplateQuestions ClusterClusterTemplateQuestionArrayInput
	// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId pulumi.StringPtrInput
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId pulumi.StringPtrInput
	// An optional description of this cluster (string)
	Description pulumi.StringPtrInput
	// Desired agent image. Just for Rancher v2.3.x and above (string)
	DesiredAgentImage pulumi.StringPtrInput
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DesiredAuthImage pulumi.StringPtrInput
	// Desired auth image. Just for Rancher v2.3.x and above (string)
	DockerRootDir pulumi.StringPtrInput
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver pulumi.StringPtrInput
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig ClusterEksConfigPtrInput
	// The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x or above (list maxitems:1)
	EksConfigV2 ClusterEksConfigV2PtrInput
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting pulumi.BoolPtrInput
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring pulumi.BoolPtrInput
	// Enable project network isolation (bool)
	EnableNetworkPolicy pulumi.BoolPtrInput
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig ClusterGkeConfigPtrInput
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig ClusterK3sConfigPtrInput
	// Labels for cluster registration token object (map)
	Labels pulumi.MapInput
	// Name of cluster registration token (string)
	Name pulumi.StringPtrInput
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksImport`, `gkeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig ClusterOkeConfigPtrInput
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig ClusterRkeConfigPtrInput
	// Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
	ScheduledClusterScan ClusterScheduledClusterScanPtrInput
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster pulumi.BoolPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

func (i *Cluster) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPtrOutput)
}

type ClusterPtrInput interface {
	pulumi.Input

	ToClusterPtrOutput() ClusterPtrOutput
	ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput
}

type clusterPtrType ClusterArgs

func (*clusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil))
}

func (i *clusterPtrType) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i *clusterPtrType) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPtrOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//          ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Cluster)(nil))
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//          ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Cluster)(nil))
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct {
	*pulumi.OutputState
}

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o.ToClusterPtrOutputWithContext(context.Background())
}

func (o ClusterOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o.ApplyT(func(v Cluster) *Cluster {
		return &v
	}).(ClusterPtrOutput)
}

type ClusterPtrOutput struct {
	*pulumi.OutputState
}

func (ClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil))
}

func (o ClusterPtrOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Cluster)(nil))
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Cluster {
		return vs[0].([]Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Cluster)(nil))
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Cluster {
		return vs[0].(map[string]Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterPtrOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
