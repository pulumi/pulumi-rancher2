// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
//
// ## Example Usage
//
// **Note optional/computed arguments** If any `optional/computed` argument of this resource is defined by the user, removing it from tf file will NOT reset its value. To reset it, let its definition at tf file as empty/false object. Ex: `enableClusterMonitoring = false`, `cloudProvider {}`, `name = ""`
// ### Creating Rancher v2 RKE cluster enabling and customizing monitoring
//
// **Note** Cluster monitoring version `0.2.0` and above, can't be enabled until cluster is fully deployed as [`kubeVersion`](https://github.com/rancher/system-charts/blob/52be656700468904b9bf15c3f39cd7112e1f8c9b/charts/rancher-monitoring/v0.2.0/Chart.yaml#L12) requirement has been introduced to helm chart
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rancher2.NewCluster(ctx, "foo-custom", &rancher2.ClusterArgs{
//				ClusterMonitoringInput: &rancher2.ClusterClusterMonitoringInputArgs{
//					Answers: pulumi.AnyMap{
//						"exporter-kubelets.https":                   pulumi.Any(true),
//						"exporter-node.enabled":                     pulumi.Any(true),
//						"exporter-node.ports.metrics.port":          pulumi.Any(9796),
//						"exporter-node.resources.limits.cpu":        pulumi.Any("200m"),
//						"exporter-node.resources.limits.memory":     pulumi.Any("200Mi"),
//						"grafana.persistence.enabled":               pulumi.Any(false),
//						"grafana.persistence.size":                  pulumi.Any("10Gi"),
//						"grafana.persistence.storageClass":          pulumi.Any("default"),
//						"operator.resources.limits.memory":          pulumi.Any("500Mi"),
//						"prometheus.persistence.enabled":            pulumi.Any("false"),
//						"prometheus.persistence.size":               pulumi.Any("50Gi"),
//						"prometheus.persistence.storageClass":       pulumi.Any("default"),
//						"prometheus.persistent.useReleaseName":      pulumi.Any("true"),
//						"prometheus.resources.core.limits.cpu":      pulumi.Any("1000m"),
//						"prometheus.resources.core.limits.memory":   pulumi.Any("1500Mi"),
//						"prometheus.resources.core.requests.cpu":    pulumi.Any("750m"),
//						"prometheus.resources.core.requests.memory": pulumi.Any("750Mi"),
//						"prometheus.retention":                      pulumi.Any("12h"),
//					},
//					Version: pulumi.String("0.1.0"),
//				},
//				Description:             pulumi.String("Foo rancher2 custom cluster"),
//				EnableClusterMonitoring: pulumi.Bool(true),
//				RkeConfig: &rancher2.ClusterRkeConfigArgs{
//					Network: &rancher2.ClusterRkeConfigNetworkArgs{
//						Plugin: pulumi.String("canal"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating Rancher v2 RKE cluster enabling/customizing monitoring and istio
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rancher2.NewCluster(ctx, "foo-customCluster", &rancher2.ClusterArgs{
//				Description: pulumi.String("Foo rancher2 custom cluster"),
//				RkeConfig: &rancher2.ClusterRkeConfigArgs{
//					Network: &rancher2.ClusterRkeConfigNetworkArgs{
//						Plugin: pulumi.String("canal"),
//					},
//				},
//				EnableClusterMonitoring: pulumi.Bool(true),
//				ClusterMonitoringInput: &rancher2.ClusterClusterMonitoringInputArgs{
//					Answers: pulumi.AnyMap{
//						"exporter-kubelets.https":                   pulumi.Any(true),
//						"exporter-node.enabled":                     pulumi.Any(true),
//						"exporter-node.ports.metrics.port":          pulumi.Any(9796),
//						"exporter-node.resources.limits.cpu":        pulumi.Any("200m"),
//						"exporter-node.resources.limits.memory":     pulumi.Any("200Mi"),
//						"grafana.persistence.enabled":               pulumi.Any(false),
//						"grafana.persistence.size":                  pulumi.Any("10Gi"),
//						"grafana.persistence.storageClass":          pulumi.Any("default"),
//						"operator.resources.limits.memory":          pulumi.Any("500Mi"),
//						"prometheus.persistence.enabled":            pulumi.Any("false"),
//						"prometheus.persistence.size":               pulumi.Any("50Gi"),
//						"prometheus.persistence.storageClass":       pulumi.Any("default"),
//						"prometheus.persistent.useReleaseName":      pulumi.Any("true"),
//						"prometheus.resources.core.limits.cpu":      pulumi.Any("1000m"),
//						"prometheus.resources.core.limits.memory":   pulumi.Any("1500Mi"),
//						"prometheus.resources.core.requests.cpu":    pulumi.Any("750m"),
//						"prometheus.resources.core.requests.memory": pulumi.Any("750Mi"),
//						"prometheus.retention":                      pulumi.Any("12h"),
//					},
//					Version: pulumi.String("0.1.0"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewClusterSync(ctx, "foo-customClusterSync", &rancher2.ClusterSyncArgs{
//				ClusterId:      foo_customCluster.ID(),
//				WaitMonitoring: foo_customCluster.EnableClusterMonitoring,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewNamespace(ctx, "foo-istio", &rancher2.NamespaceArgs{
//				ProjectId:   foo_customClusterSync.SystemProjectId,
//				Description: pulumi.String("istio namespace"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewApp(ctx, "istio", &rancher2.AppArgs{
//				CatalogName:     pulumi.String("system-library"),
//				Description:     pulumi.String("Terraform app acceptance test"),
//				ProjectId:       foo_istio.ProjectId,
//				TemplateName:    pulumi.String("rancher-istio"),
//				TemplateVersion: pulumi.String("0.1.1"),
//				TargetNamespace: foo_istio.ID(),
//				Answers: pulumi.AnyMap{
//					"certmanager.enabled": pulumi.Any(false),
//					"enableCRDs":          pulumi.Any(true),
//					"galley.enabled":      pulumi.Any(true),
//					"gateways.enabled":    pulumi.Any(false),
//					"gateways.istio-ingressgateway.resources.limits.cpu":      pulumi.Any("2000m"),
//					"gateways.istio-ingressgateway.resources.limits.memory":   pulumi.Any("1024Mi"),
//					"gateways.istio-ingressgateway.resources.requests.cpu":    pulumi.Any("100m"),
//					"gateways.istio-ingressgateway.resources.requests.memory": pulumi.Any("128Mi"),
//					"gateways.istio-ingressgateway.type":                      pulumi.Any("NodePort"),
//					"global.monitoring.type":                                  pulumi.Any("cluster-monitoring"),
//					"global.rancher.clusterId":                                foo_customClusterSync.ClusterId,
//					"istio_cni.enabled":                                       pulumi.Any("false"),
//					"istiocoredns.enabled":                                    pulumi.Any("false"),
//					"kiali.enabled":                                           pulumi.Any("true"),
//					"mixer.enabled":                                           pulumi.Any("true"),
//					"mixer.policy.enabled":                                    pulumi.Any("true"),
//					"mixer.policy.resources.limits.cpu":                       pulumi.Any("4800m"),
//					"mixer.policy.resources.limits.memory":                    pulumi.Any("4096Mi"),
//					"mixer.policy.resources.requests.cpu":                     pulumi.Any("1000m"),
//					"mixer.policy.resources.requests.memory":                  pulumi.Any("1024Mi"),
//					"mixer.telemetry.resources.limits.cpu":                    pulumi.Any("4800m"),
//					"mixer.telemetry.resources.limits.memory":                 pulumi.Any("4096Mi"),
//					"mixer.telemetry.resources.requests.cpu":                  pulumi.Any("1000m"),
//					"mixer.telemetry.resources.requests.memory":               pulumi.Any("1024Mi"),
//					"mtls.enabled":                                            pulumi.Any(false),
//					"nodeagent.enabled":                                       pulumi.Any(false),
//					"pilot.enabled":                                           pulumi.Any(true),
//					"pilot.resources.limits.cpu":                              pulumi.Any("1000m"),
//					"pilot.resources.limits.memory":                           pulumi.Any("4096Mi"),
//					"pilot.resources.requests.cpu":                            pulumi.Any("500m"),
//					"pilot.resources.requests.memory":                         pulumi.Any("2048Mi"),
//					"pilot.traceSampling":                                     pulumi.Any("1"),
//					"security.enabled":                                        pulumi.Any(true),
//					"sidecarInjectorWebhook.enabled":                          pulumi.Any(true),
//					"tracing.enabled":                                         pulumi.Any(true),
//					"tracing.jaeger.resources.limits.cpu":                     pulumi.Any("500m"),
//					"tracing.jaeger.resources.limits.memory":                  pulumi.Any("1024Mi"),
//					"tracing.jaeger.resources.requests.cpu":                   pulumi.Any("100m"),
//					"tracing.jaeger.resources.requests.memory":                pulumi.Any("100Mi"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating Rancher v2 RKE cluster assigning a node pool (overlapped planes)
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rancher2.NewCluster(ctx, "foo-custom", &rancher2.ClusterArgs{
//				Description: pulumi.String("Foo rancher2 custom cluster"),
//				RkeConfig: &rancher2.ClusterRkeConfigArgs{
//					Network: &rancher2.ClusterRkeConfigNetworkArgs{
//						Plugin: pulumi.String("canal"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooNodeTemplate, err := rancher2.NewNodeTemplate(ctx, "fooNodeTemplate", &rancher2.NodeTemplateArgs{
//				Description: pulumi.String("foo test"),
//				Amazonec2Config: &rancher2.NodeTemplateAmazonec2ConfigArgs{
//					AccessKey: pulumi.String("<AWS_ACCESS_KEY>"),
//					SecretKey: pulumi.String("<AWS_SECRET_KEY>"),
//					Ami:       pulumi.String("<AMI_ID>"),
//					Region:    pulumi.String("<REGION>"),
//					SecurityGroups: pulumi.StringArray{
//						pulumi.String("<AWS_SECURITY_GROUP>"),
//					},
//					SubnetId: pulumi.String("<SUBNET_ID>"),
//					VpcId:    pulumi.String("<VPC_ID>"),
//					Zone:     pulumi.String("<ZONE>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewNodePool(ctx, "fooNodePool", &rancher2.NodePoolArgs{
//				ClusterId:      foo_custom.ID(),
//				HostnamePrefix: pulumi.String("foo-cluster-0"),
//				NodeTemplateId: fooNodeTemplate.ID(),
//				Quantity:       pulumi.Int(3),
//				ControlPlane:   pulumi.Bool(true),
//				Etcd:           pulumi.Bool(true),
//				Worker:         pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating Rancher v2 RKE cluster from template. For Rancher v2.3.x and above.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooClusterTemplate, err := rancher2.NewClusterTemplate(ctx, "fooClusterTemplate", &rancher2.ClusterTemplateArgs{
//				Members: rancher2.ClusterTemplateMemberArray{
//					&rancher2.ClusterTemplateMemberArgs{
//						AccessType:      pulumi.String("owner"),
//						UserPrincipalId: pulumi.String("local://user-XXXXX"),
//					},
//				},
//				TemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{
//					&rancher2.ClusterTemplateTemplateRevisionArgs{
//						Name: pulumi.String("V1"),
//						ClusterConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{
//							RkeConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{
//								Network: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{
//									Plugin: pulumi.String("canal"),
//								},
//								Services: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{
//									Etcd: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{
//										Creation:  pulumi.String("6h"),
//										Retention: pulumi.String("24h"),
//									},
//								},
//							},
//						},
//						Default: pulumi.Bool(true),
//					},
//				},
//				Description: pulumi.String("Test cluster template v2"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewCluster(ctx, "fooCluster", &rancher2.ClusterArgs{
//				ClusterTemplateId: fooClusterTemplate.ID(),
//				ClusterTemplateRevisionId: fooClusterTemplate.TemplateRevisions.ApplyT(func(templateRevisions []rancher2.ClusterTemplateTemplateRevision) (*string, error) {
//					return &templateRevisions[0].Id, nil
//				}).(pulumi.StringPtrOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x and above.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rancher2.NewCluster(ctx, "foo", &rancher2.ClusterArgs{
//				Description: pulumi.String("Terraform custom cluster"),
//				RkeConfig: &rancher2.ClusterRkeConfigArgs{
//					Network: &rancher2.ClusterRkeConfigNetworkArgs{
//						Plugin: pulumi.String("canal"),
//					},
//					Services: &rancher2.ClusterRkeConfigServicesArgs{
//						Etcd: &rancher2.ClusterRkeConfigServicesEtcdArgs{
//							Creation:  pulumi.String("6h"),
//							Retention: pulumi.String("24h"),
//						},
//						KubeApi: &rancher2.ClusterRkeConfigServicesKubeApiArgs{
//							AuditLog: &rancher2.ClusterRkeConfigServicesKubeApiAuditLogArgs{
//								Configuration: &rancher2.ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs{
//									Format:    pulumi.String("json"),
//									MaxAge:    pulumi.Int(5),
//									MaxBackup: pulumi.Int(5),
//									MaxSize:   pulumi.Int(100),
//									Path:      pulumi.String("-"),
//									Policy: pulumi.String(`apiVersion: audit.k8s.io/v1
//
// kind: Policy
// metadata:
//
//	creationTimestamp: null
//
// omitStages:
// - RequestReceived
// rules:
//   - level: RequestResponse
//     resources:
//   - resources:
//   - pods
//
// `),
//
//								},
//								Enabled: pulumi.Bool(true),
//							},
//						},
//					},
//					UpgradeStrategy: &rancher2.ClusterRkeConfigUpgradeStrategyArgs{
//						Drain:                pulumi.Bool(true),
//						MaxUnavailableWorker: pulumi.String("20%"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating Rancher v2 RKE cluster with cluster agent customization. For Rancher v2.7.5 and above.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rancher2.NewCluster(ctx, "foo", &rancher2.ClusterArgs{
//				ClusterAgentDeploymentCustomizations: rancher2.ClusterClusterAgentDeploymentCustomizationArray{
//					&rancher2.ClusterClusterAgentDeploymentCustomizationArgs{
//						AppendTolerations: rancher2.ClusterClusterAgentDeploymentCustomizationAppendTolerationArray{
//							&rancher2.ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs{
//								Effect: pulumi.String("NoSchedule"),
//								Key:    pulumi.String("tolerate/control-plane"),
//								Value:  pulumi.String("true"),
//							},
//						},
//						OverrideAffinity: pulumi.String(`{
//	  "nodeAffinity": {
//	    "requiredDuringSchedulingIgnoredDuringExecution": {
//	      "nodeSelectorTerms": [{
//	        "matchExpressions": [{
//	          "key": "not.this/nodepool",
//	          "operator": "In",
//	          "values": [
//	            "true"
//	          ]
//	        }]
//	      }]
//	    }
//	  }
//	}
//
// `),
//
//						OverrideResourceRequirements: rancher2.ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArray{
//							&rancher2.ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs{
//								CpuLimit:      pulumi.String("800"),
//								CpuRequest:    pulumi.String("500"),
//								MemoryLimit:   pulumi.String("800"),
//								MemoryRequest: pulumi.String("500"),
//							},
//						},
//					},
//				},
//				Description: pulumi.String("Terraform cluster with agent customization"),
//				RkeConfig: &rancher2.ClusterRkeConfigArgs{
//					Network: &rancher2.ClusterRkeConfigNetworkArgs{
//						Plugin: pulumi.String("canal"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Importing EKS cluster to Rancher v2, using `eksConfigV2`. For Rancher v2.5.x and above.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooCloudCredential, err := rancher2.NewCloudCredential(ctx, "fooCloudCredential", &rancher2.CloudCredentialArgs{
//				Description: pulumi.String("foo test"),
//				Amazonec2CredentialConfig: &rancher2.CloudCredentialAmazonec2CredentialConfigArgs{
//					AccessKey: pulumi.String("<AWS_ACCESS_KEY>"),
//					SecretKey: pulumi.String("<AWS_SECRET_KEY>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewCluster(ctx, "fooCluster", &rancher2.ClusterArgs{
//				Description: pulumi.String("Terraform EKS cluster"),
//				EksConfigV2: &rancher2.ClusterEksConfigV2Args{
//					CloudCredentialId: fooCloudCredential.ID(),
//					Name:              pulumi.String("<CLUSTER_NAME>"),
//					Region:            pulumi.String("<EKS_REGION>"),
//					Imported:          pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating EKS cluster from Rancher v2, using `eksConfigV2`. For Rancher v2.5.x and above.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooCloudCredential, err := rancher2.NewCloudCredential(ctx, "fooCloudCredential", &rancher2.CloudCredentialArgs{
//				Description: pulumi.String("foo test"),
//				Amazonec2CredentialConfig: &rancher2.CloudCredentialAmazonec2CredentialConfigArgs{
//					AccessKey: pulumi.String("<AWS_ACCESS_KEY>"),
//					SecretKey: pulumi.String("<AWS_SECRET_KEY>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewCluster(ctx, "fooCluster", &rancher2.ClusterArgs{
//				Description: pulumi.String("Terraform EKS cluster"),
//				EksConfigV2: &rancher2.ClusterEksConfigV2Args{
//					CloudCredentialId: fooCloudCredential.ID(),
//					Region:            pulumi.String("<EKS_REGION>"),
//					KubernetesVersion: pulumi.String("1.24"),
//					LoggingTypes: pulumi.StringArray{
//						pulumi.String("audit"),
//						pulumi.String("api"),
//					},
//					NodeGroups: rancher2.ClusterEksConfigV2NodeGroupArray{
//						&rancher2.ClusterEksConfigV2NodeGroupArgs{
//							Name:         pulumi.String("node_group1"),
//							InstanceType: pulumi.String("t3.medium"),
//							DesiredSize:  pulumi.Int(3),
//							MaxSize:      pulumi.Int(5),
//						},
//						&rancher2.ClusterEksConfigV2NodeGroupArgs{
//							Name:         pulumi.String("node_group2"),
//							InstanceType: pulumi.String("m5.xlarge"),
//							DesiredSize:  pulumi.Int(2),
//							MaxSize:      pulumi.Int(3),
//							NodeRole:     pulumi.String("arn:aws:iam::role/test-NodeInstanceRole"),
//						},
//					},
//					PrivateAccess: pulumi.Bool(true),
//					PublicAccess:  pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating EKS cluster from Rancher v2, using `eksConfigV2` and launch template. For Rancher v2.5.6 and above.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooCloudCredential, err := rancher2.NewCloudCredential(ctx, "fooCloudCredential", &rancher2.CloudCredentialArgs{
//				Description: pulumi.String("foo test"),
//				Amazonec2CredentialConfig: &rancher2.CloudCredentialAmazonec2CredentialConfigArgs{
//					AccessKey: pulumi.String("<AWS_ACCESS_KEY>"),
//					SecretKey: pulumi.String("<AWS_SECRET_KEY>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewCluster(ctx, "fooCluster", &rancher2.ClusterArgs{
//				Description: pulumi.String("Terraform EKS cluster"),
//				EksConfigV2: &rancher2.ClusterEksConfigV2Args{
//					CloudCredentialId: fooCloudCredential.ID(),
//					Region:            pulumi.String("<EKS_REGION>"),
//					KubernetesVersion: pulumi.String("1.24"),
//					LoggingTypes: pulumi.StringArray{
//						pulumi.String("audit"),
//						pulumi.String("api"),
//					},
//					NodeGroups: rancher2.ClusterEksConfigV2NodeGroupArray{
//						&rancher2.ClusterEksConfigV2NodeGroupArgs{
//							DesiredSize: pulumi.Int(3),
//							MaxSize:     pulumi.Int(5),
//							Name:        pulumi.String("node_group1"),
//							LaunchTemplates: rancher2.ClusterEksConfigV2NodeGroupLaunchTemplateArray{
//								&rancher2.ClusterEksConfigV2NodeGroupLaunchTemplateArgs{
//									Id:      pulumi.String("<EC2_LAUNCH_TEMPLATE_ID>"),
//									Version: pulumi.Int(1),
//								},
//							},
//						},
//					},
//					PrivateAccess: pulumi.Bool(true),
//					PublicAccess:  pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Creating AKS cluster from Rancher v2, using `aksConfigV2`. For Rancher v2.6.0 and above.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rancher2.NewCloudCredential(ctx, "foo-aks", &rancher2.CloudCredentialArgs{
//				AzureCredentialConfig: &rancher2.CloudCredentialAzureCredentialConfigArgs{
//					ClientId:       pulumi.String("<CLIENT_ID>"),
//					ClientSecret:   pulumi.String("<CLIENT_SECRET>"),
//					SubscriptionId: pulumi.String("<SUBSCRIPTION_ID>"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rancher2.NewCluster(ctx, "foo", &rancher2.ClusterArgs{
//				Description: pulumi.String("Terraform AKS cluster"),
//				AksConfigV2: &rancher2.ClusterAksConfigV2Args{
//					CloudCredentialId: foo_aks.ID(),
//					ResourceGroup:     pulumi.String("<RESOURCE_GROUP>"),
//					ResourceLocation:  pulumi.String("<RESOURCE_LOCATION>"),
//					DnsPrefix:         pulumi.String("<DNS_PREFIX>"),
//					KubernetesVersion: pulumi.String("1.24.6"),
//					NetworkPlugin:     pulumi.String("<NETWORK_PLUGIN>"),
//					NodePools: rancher2.ClusterAksConfigV2NodePoolArray{
//						&rancher2.ClusterAksConfigV2NodePoolArgs{
//							AvailabilityZones: pulumi.StringArray{
//								pulumi.String("1"),
//								pulumi.String("2"),
//								pulumi.String("3"),
//							},
//							Name:                pulumi.String("<NODEPOOL_NAME_1>"),
//							Mode:                pulumi.String("System"),
//							Count:               pulumi.Int(1),
//							OrchestratorVersion: pulumi.String("1.21.2"),
//							OsDiskSizeGb:        pulumi.Int(128),
//							VmSize:              pulumi.String("Standard_DS2_v2"),
//						},
//						&rancher2.ClusterAksConfigV2NodePoolArgs{
//							AvailabilityZones: pulumi.StringArray{
//								pulumi.String("1"),
//								pulumi.String("2"),
//								pulumi.String("3"),
//							},
//							Name:                pulumi.String("<NODEPOOL_NAME_2>"),
//							Count:               pulumi.Int(1),
//							Mode:                pulumi.String("User"),
//							OrchestratorVersion: pulumi.String("1.21.2"),
//							OsDiskSizeGb:        pulumi.Int(128),
//							VmSize:              pulumi.String("Standard_DS2_v2"),
//							MaxSurge:            pulumi.String("25%"),
//							Labels: pulumi.AnyMap{
//								"test1": pulumi.Any("data1"),
//								"test2": pulumi.Any("data2"),
//							},
//							Taints: pulumi.StringArray{
//								pulumi.String("none:PreferNoSchedule"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Clusters can be imported using the Rancher Cluster ID
//
// ```sh
//
//	$ pulumi import rancher2:index/cluster:Cluster foo &lt;CLUSTER_ID&gt;
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
	AgentEnvVars ClusterAgentEnvVarArrayOutput `pulumi:"agentEnvVars"`
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig ClusterAksConfigPtrOutput `pulumi:"aksConfig"`
	// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfigV2 ClusterAksConfigV2PtrOutput `pulumi:"aksConfigV2"`
	// Annotations for the Cluster (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// TLS CA certificate for etcd service (string)
	CaCert pulumi.StringOutput `pulumi:"caCert"`
	// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
	ClusterAgentDeploymentCustomizations ClusterClusterAgentDeploymentCustomizationArrayOutput `pulumi:"clusterAgentDeploymentCustomizations"`
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint ClusterClusterAuthEndpointOutput `pulumi:"clusterAuthEndpoint"`
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput ClusterClusterMonitoringInputPtrOutput `pulumi:"clusterMonitoringInput"`
	// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
	ClusterRegistrationToken ClusterClusterRegistrationTokenOutput `pulumi:"clusterRegistrationToken"`
	// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers ClusterClusterTemplateAnswersOutput `pulumi:"clusterTemplateAnswers"`
	// Cluster template ID. For Rancher v2.3.x and above (string)
	ClusterTemplateId pulumi.StringPtrOutput `pulumi:"clusterTemplateId"`
	// Cluster template questions. For Rancher v2.3.x and above (list)
	ClusterTemplateQuestions ClusterClusterTemplateQuestionArrayOutput `pulumi:"clusterTemplateQuestions"`
	// Cluster template revision ID. For Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId pulumi.StringPtrOutput `pulumi:"clusterTemplateRevisionId"`
	// Cluster default pod security admission configuration template name (string)
	DefaultPodSecurityAdmissionConfigurationTemplateName pulumi.StringOutput `pulumi:"defaultPodSecurityAdmissionConfigurationTemplateName"`
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId pulumi.StringOutput `pulumi:"defaultPodSecurityPolicyTemplateId"`
	// (Computed) Default project ID for the cluster (string)
	DefaultProjectId pulumi.StringOutput `pulumi:"defaultProjectId"`
	// The description for Cluster (string)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Desired agent image. For Rancher v2.3.x and above (string)
	DesiredAgentImage pulumi.StringOutput `pulumi:"desiredAgentImage"`
	// Desired auth image. For Rancher v2.3.x and above (string)
	DesiredAuthImage pulumi.StringOutput `pulumi:"desiredAuthImage"`
	// Desired auth image. For Rancher v2.3.x and above (string)
	DockerRootDir pulumi.StringOutput `pulumi:"dockerRootDir"`
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver pulumi.StringOutput `pulumi:"driver"`
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig ClusterEksConfigPtrOutput `pulumi:"eksConfig"`
	// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x and above (list maxitems:1)
	EksConfigV2 ClusterEksConfigV2Output `pulumi:"eksConfigV2"`
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting pulumi.BoolOutput `pulumi:"enableClusterAlerting"`
	// Deploy istio on `system` project and `istio-system` namespace, using App resource instead. See above example.
	//
	// Deprecated: Deploy istio using rancher2_app resource instead
	EnableClusterIstio pulumi.BoolOutput `pulumi:"enableClusterIstio"`
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring pulumi.BoolOutput `pulumi:"enableClusterMonitoring"`
	// Enable project network isolation (bool)
	EnableNetworkPolicy pulumi.BoolOutput `pulumi:"enableNetworkPolicy"`
	// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
	FleetAgentDeploymentCustomizations ClusterFleetAgentDeploymentCustomizationArrayOutput `pulumi:"fleetAgentDeploymentCustomizations"`
	// Fleet workspace name (string)
	FleetWorkspaceName pulumi.StringOutput `pulumi:"fleetWorkspaceName"`
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig ClusterGkeConfigPtrOutput `pulumi:"gkeConfig"`
	// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 and above (list maxitems:1)
	GkeConfigV2 ClusterGkeConfigV2PtrOutput `pulumi:"gkeConfigV2"`
	// (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
	IstioEnabled pulumi.BoolOutput `pulumi:"istioEnabled"`
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig ClusterK3sConfigOutput `pulumi:"k3sConfig"`
	// (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `clusterAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected` (string)
	KubeConfig pulumi.StringOutput `pulumi:"kubeConfig"`
	// Labels for the Cluster (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The name of the Cluster (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig ClusterOkeConfigPtrOutput `pulumi:"okeConfig"`
	// The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	Rke2Config ClusterRke2ConfigOutput `pulumi:"rke2Config"`
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig ClusterRkeConfigOutput `pulumi:"rkeConfig"`
	// (Computed) System project ID for the cluster (string)
	SystemProjectId pulumi.StringOutput `pulumi:"systemProjectId"`
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster pulumi.BoolPtrOutput `pulumi:"windowsPreferedCluster"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"caCert",
		"kubeConfig",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("rancher2:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("rancher2:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
	AgentEnvVars []ClusterAgentEnvVar `pulumi:"agentEnvVars"`
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig *ClusterAksConfig `pulumi:"aksConfig"`
	// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfigV2 *ClusterAksConfigV2 `pulumi:"aksConfigV2"`
	// Annotations for the Cluster (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// TLS CA certificate for etcd service (string)
	CaCert *string `pulumi:"caCert"`
	// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
	ClusterAgentDeploymentCustomizations []ClusterClusterAgentDeploymentCustomization `pulumi:"clusterAgentDeploymentCustomizations"`
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint *ClusterClusterAuthEndpoint `pulumi:"clusterAuthEndpoint"`
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput *ClusterClusterMonitoringInput `pulumi:"clusterMonitoringInput"`
	// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
	ClusterRegistrationToken *ClusterClusterRegistrationToken `pulumi:"clusterRegistrationToken"`
	// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers *ClusterClusterTemplateAnswers `pulumi:"clusterTemplateAnswers"`
	// Cluster template ID. For Rancher v2.3.x and above (string)
	ClusterTemplateId *string `pulumi:"clusterTemplateId"`
	// Cluster template questions. For Rancher v2.3.x and above (list)
	ClusterTemplateQuestions []ClusterClusterTemplateQuestion `pulumi:"clusterTemplateQuestions"`
	// Cluster template revision ID. For Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId *string `pulumi:"clusterTemplateRevisionId"`
	// Cluster default pod security admission configuration template name (string)
	DefaultPodSecurityAdmissionConfigurationTemplateName *string `pulumi:"defaultPodSecurityAdmissionConfigurationTemplateName"`
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId *string `pulumi:"defaultPodSecurityPolicyTemplateId"`
	// (Computed) Default project ID for the cluster (string)
	DefaultProjectId *string `pulumi:"defaultProjectId"`
	// The description for Cluster (string)
	Description *string `pulumi:"description"`
	// Desired agent image. For Rancher v2.3.x and above (string)
	DesiredAgentImage *string `pulumi:"desiredAgentImage"`
	// Desired auth image. For Rancher v2.3.x and above (string)
	DesiredAuthImage *string `pulumi:"desiredAuthImage"`
	// Desired auth image. For Rancher v2.3.x and above (string)
	DockerRootDir *string `pulumi:"dockerRootDir"`
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver *string `pulumi:"driver"`
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig *ClusterEksConfig `pulumi:"eksConfig"`
	// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x and above (list maxitems:1)
	EksConfigV2 *ClusterEksConfigV2 `pulumi:"eksConfigV2"`
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting *bool `pulumi:"enableClusterAlerting"`
	// Deploy istio on `system` project and `istio-system` namespace, using App resource instead. See above example.
	//
	// Deprecated: Deploy istio using rancher2_app resource instead
	EnableClusterIstio *bool `pulumi:"enableClusterIstio"`
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring *bool `pulumi:"enableClusterMonitoring"`
	// Enable project network isolation (bool)
	EnableNetworkPolicy *bool `pulumi:"enableNetworkPolicy"`
	// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
	FleetAgentDeploymentCustomizations []ClusterFleetAgentDeploymentCustomization `pulumi:"fleetAgentDeploymentCustomizations"`
	// Fleet workspace name (string)
	FleetWorkspaceName *string `pulumi:"fleetWorkspaceName"`
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig *ClusterGkeConfig `pulumi:"gkeConfig"`
	// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 and above (list maxitems:1)
	GkeConfigV2 *ClusterGkeConfigV2 `pulumi:"gkeConfigV2"`
	// (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
	IstioEnabled *bool `pulumi:"istioEnabled"`
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig *ClusterK3sConfig `pulumi:"k3sConfig"`
	// (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `clusterAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected` (string)
	KubeConfig *string `pulumi:"kubeConfig"`
	// Labels for the Cluster (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the Cluster (string)
	Name *string `pulumi:"name"`
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig *ClusterOkeConfig `pulumi:"okeConfig"`
	// The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	Rke2Config *ClusterRke2Config `pulumi:"rke2Config"`
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig *ClusterRkeConfig `pulumi:"rkeConfig"`
	// (Computed) System project ID for the cluster (string)
	SystemProjectId *string `pulumi:"systemProjectId"`
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster *bool `pulumi:"windowsPreferedCluster"`
}

type ClusterState struct {
	// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
	AgentEnvVars ClusterAgentEnvVarArrayInput
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig ClusterAksConfigPtrInput
	// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfigV2 ClusterAksConfigV2PtrInput
	// Annotations for the Cluster (map)
	Annotations pulumi.MapInput
	// TLS CA certificate for etcd service (string)
	CaCert pulumi.StringPtrInput
	// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
	ClusterAgentDeploymentCustomizations ClusterClusterAgentDeploymentCustomizationArrayInput
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint ClusterClusterAuthEndpointPtrInput
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput ClusterClusterMonitoringInputPtrInput
	// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
	ClusterRegistrationToken ClusterClusterRegistrationTokenPtrInput
	// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers ClusterClusterTemplateAnswersPtrInput
	// Cluster template ID. For Rancher v2.3.x and above (string)
	ClusterTemplateId pulumi.StringPtrInput
	// Cluster template questions. For Rancher v2.3.x and above (list)
	ClusterTemplateQuestions ClusterClusterTemplateQuestionArrayInput
	// Cluster template revision ID. For Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId pulumi.StringPtrInput
	// Cluster default pod security admission configuration template name (string)
	DefaultPodSecurityAdmissionConfigurationTemplateName pulumi.StringPtrInput
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId pulumi.StringPtrInput
	// (Computed) Default project ID for the cluster (string)
	DefaultProjectId pulumi.StringPtrInput
	// The description for Cluster (string)
	Description pulumi.StringPtrInput
	// Desired agent image. For Rancher v2.3.x and above (string)
	DesiredAgentImage pulumi.StringPtrInput
	// Desired auth image. For Rancher v2.3.x and above (string)
	DesiredAuthImage pulumi.StringPtrInput
	// Desired auth image. For Rancher v2.3.x and above (string)
	DockerRootDir pulumi.StringPtrInput
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver pulumi.StringPtrInput
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig ClusterEksConfigPtrInput
	// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x and above (list maxitems:1)
	EksConfigV2 ClusterEksConfigV2PtrInput
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting pulumi.BoolPtrInput
	// Deploy istio on `system` project and `istio-system` namespace, using App resource instead. See above example.
	//
	// Deprecated: Deploy istio using rancher2_app resource instead
	EnableClusterIstio pulumi.BoolPtrInput
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring pulumi.BoolPtrInput
	// Enable project network isolation (bool)
	EnableNetworkPolicy pulumi.BoolPtrInput
	// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
	FleetAgentDeploymentCustomizations ClusterFleetAgentDeploymentCustomizationArrayInput
	// Fleet workspace name (string)
	FleetWorkspaceName pulumi.StringPtrInput
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig ClusterGkeConfigPtrInput
	// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 and above (list maxitems:1)
	GkeConfigV2 ClusterGkeConfigV2PtrInput
	// (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
	IstioEnabled pulumi.BoolPtrInput
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig ClusterK3sConfigPtrInput
	// (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `clusterAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected` (string)
	KubeConfig pulumi.StringPtrInput
	// Labels for the Cluster (map)
	Labels pulumi.MapInput
	// The name of the Cluster (string)
	Name pulumi.StringPtrInput
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig ClusterOkeConfigPtrInput
	// The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	Rke2Config ClusterRke2ConfigPtrInput
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig ClusterRkeConfigPtrInput
	// (Computed) System project ID for the cluster (string)
	SystemProjectId pulumi.StringPtrInput
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster pulumi.BoolPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
	AgentEnvVars []ClusterAgentEnvVar `pulumi:"agentEnvVars"`
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig *ClusterAksConfig `pulumi:"aksConfig"`
	// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfigV2 *ClusterAksConfigV2 `pulumi:"aksConfigV2"`
	// Annotations for the Cluster (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
	ClusterAgentDeploymentCustomizations []ClusterClusterAgentDeploymentCustomization `pulumi:"clusterAgentDeploymentCustomizations"`
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint *ClusterClusterAuthEndpoint `pulumi:"clusterAuthEndpoint"`
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput *ClusterClusterMonitoringInput `pulumi:"clusterMonitoringInput"`
	// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers *ClusterClusterTemplateAnswers `pulumi:"clusterTemplateAnswers"`
	// Cluster template ID. For Rancher v2.3.x and above (string)
	ClusterTemplateId *string `pulumi:"clusterTemplateId"`
	// Cluster template questions. For Rancher v2.3.x and above (list)
	ClusterTemplateQuestions []ClusterClusterTemplateQuestion `pulumi:"clusterTemplateQuestions"`
	// Cluster template revision ID. For Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId *string `pulumi:"clusterTemplateRevisionId"`
	// Cluster default pod security admission configuration template name (string)
	DefaultPodSecurityAdmissionConfigurationTemplateName *string `pulumi:"defaultPodSecurityAdmissionConfigurationTemplateName"`
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId *string `pulumi:"defaultPodSecurityPolicyTemplateId"`
	// The description for Cluster (string)
	Description *string `pulumi:"description"`
	// Desired agent image. For Rancher v2.3.x and above (string)
	DesiredAgentImage *string `pulumi:"desiredAgentImage"`
	// Desired auth image. For Rancher v2.3.x and above (string)
	DesiredAuthImage *string `pulumi:"desiredAuthImage"`
	// Desired auth image. For Rancher v2.3.x and above (string)
	DockerRootDir *string `pulumi:"dockerRootDir"`
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver *string `pulumi:"driver"`
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig *ClusterEksConfig `pulumi:"eksConfig"`
	// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x and above (list maxitems:1)
	EksConfigV2 *ClusterEksConfigV2 `pulumi:"eksConfigV2"`
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting *bool `pulumi:"enableClusterAlerting"`
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring *bool `pulumi:"enableClusterMonitoring"`
	// Enable project network isolation (bool)
	EnableNetworkPolicy *bool `pulumi:"enableNetworkPolicy"`
	// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
	FleetAgentDeploymentCustomizations []ClusterFleetAgentDeploymentCustomization `pulumi:"fleetAgentDeploymentCustomizations"`
	// Fleet workspace name (string)
	FleetWorkspaceName *string `pulumi:"fleetWorkspaceName"`
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig *ClusterGkeConfig `pulumi:"gkeConfig"`
	// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 and above (list maxitems:1)
	GkeConfigV2 *ClusterGkeConfigV2 `pulumi:"gkeConfigV2"`
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig *ClusterK3sConfig `pulumi:"k3sConfig"`
	// Labels for the Cluster (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the Cluster (string)
	Name *string `pulumi:"name"`
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig *ClusterOkeConfig `pulumi:"okeConfig"`
	// The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	Rke2Config *ClusterRke2Config `pulumi:"rke2Config"`
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig *ClusterRkeConfig `pulumi:"rkeConfig"`
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster *bool `pulumi:"windowsPreferedCluster"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
	AgentEnvVars ClusterAgentEnvVarArrayInput
	// The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfig ClusterAksConfigPtrInput
	// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	AksConfigV2 ClusterAksConfigV2PtrInput
	// Annotations for the Cluster (map)
	Annotations pulumi.MapInput
	// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
	ClusterAgentDeploymentCustomizations ClusterClusterAgentDeploymentCustomizationArrayInput
	// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
	ClusterAuthEndpoint ClusterClusterAuthEndpointPtrInput
	// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
	ClusterMonitoringInput ClusterClusterMonitoringInputPtrInput
	// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
	ClusterTemplateAnswers ClusterClusterTemplateAnswersPtrInput
	// Cluster template ID. For Rancher v2.3.x and above (string)
	ClusterTemplateId pulumi.StringPtrInput
	// Cluster template questions. For Rancher v2.3.x and above (list)
	ClusterTemplateQuestions ClusterClusterTemplateQuestionArrayInput
	// Cluster template revision ID. For Rancher v2.3.x and above (string)
	ClusterTemplateRevisionId pulumi.StringPtrInput
	// Cluster default pod security admission configuration template name (string)
	DefaultPodSecurityAdmissionConfigurationTemplateName pulumi.StringPtrInput
	// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
	DefaultPodSecurityPolicyTemplateId pulumi.StringPtrInput
	// The description for Cluster (string)
	Description pulumi.StringPtrInput
	// Desired agent image. For Rancher v2.3.x and above (string)
	DesiredAgentImage pulumi.StringPtrInput
	// Desired auth image. For Rancher v2.3.x and above (string)
	DesiredAuthImage pulumi.StringPtrInput
	// Desired auth image. For Rancher v2.3.x and above (string)
	DockerRootDir pulumi.StringPtrInput
	// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
	Driver pulumi.StringPtrInput
	// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
	EksConfig ClusterEksConfigPtrInput
	// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x and above (list maxitems:1)
	EksConfigV2 ClusterEksConfigV2PtrInput
	// Enable built-in cluster alerting (bool)
	EnableClusterAlerting pulumi.BoolPtrInput
	// Enable built-in cluster monitoring (bool)
	EnableClusterMonitoring pulumi.BoolPtrInput
	// Enable project network isolation (bool)
	EnableNetworkPolicy pulumi.BoolPtrInput
	// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
	FleetAgentDeploymentCustomizations ClusterFleetAgentDeploymentCustomizationArrayInput
	// Fleet workspace name (string)
	FleetWorkspaceName pulumi.StringPtrInput
	// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	GkeConfig ClusterGkeConfigPtrInput
	// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 and above (list maxitems:1)
	GkeConfigV2 ClusterGkeConfigV2PtrInput
	// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
	K3sConfig ClusterK3sConfigPtrInput
	// Labels for the Cluster (map)
	Labels pulumi.MapInput
	// The name of the Cluster (string)
	Name pulumi.StringPtrInput
	// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	OkeConfig ClusterOkeConfigPtrInput
	// The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
	Rke2Config ClusterRke2ConfigPtrInput
	// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
	RkeConfig ClusterRkeConfigPtrInput
	// Windows preferred cluster. Default: `false` (bool)
	WindowsPreferedCluster pulumi.BoolPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
func (o ClusterOutput) AgentEnvVars() ClusterAgentEnvVarArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterAgentEnvVarArrayOutput { return v.AgentEnvVars }).(ClusterAgentEnvVarArrayOutput)
}

// The Azure AKS configuration for `aks` Clusters. Conflicts with `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
func (o ClusterOutput) AksConfig() ClusterAksConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAksConfigPtrOutput { return v.AksConfig }).(ClusterAksConfigPtrOutput)
}

// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
func (o ClusterOutput) AksConfigV2() ClusterAksConfigV2PtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAksConfigV2PtrOutput { return v.AksConfigV2 }).(ClusterAksConfigV2PtrOutput)
}

// Annotations for the Cluster (map)
func (o ClusterOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.Annotations }).(pulumi.MapOutput)
}

// TLS CA certificate for etcd service (string)
func (o ClusterOutput) CaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CaCert }).(pulumi.StringOutput)
}

// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
func (o ClusterOutput) ClusterAgentDeploymentCustomizations() ClusterClusterAgentDeploymentCustomizationArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterAgentDeploymentCustomizationArrayOutput {
		return v.ClusterAgentDeploymentCustomizations
	}).(ClusterClusterAgentDeploymentCustomizationArrayOutput)
}

// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
func (o ClusterOutput) ClusterAuthEndpoint() ClusterClusterAuthEndpointOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterAuthEndpointOutput { return v.ClusterAuthEndpoint }).(ClusterClusterAuthEndpointOutput)
}

// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
func (o ClusterOutput) ClusterMonitoringInput() ClusterClusterMonitoringInputPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterMonitoringInputPtrOutput { return v.ClusterMonitoringInput }).(ClusterClusterMonitoringInputPtrOutput)
}

// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
func (o ClusterOutput) ClusterRegistrationToken() ClusterClusterRegistrationTokenOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterRegistrationTokenOutput { return v.ClusterRegistrationToken }).(ClusterClusterRegistrationTokenOutput)
}

// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
func (o ClusterOutput) ClusterTemplateAnswers() ClusterClusterTemplateAnswersOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterTemplateAnswersOutput { return v.ClusterTemplateAnswers }).(ClusterClusterTemplateAnswersOutput)
}

// Cluster template ID. For Rancher v2.3.x and above (string)
func (o ClusterOutput) ClusterTemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterTemplateId }).(pulumi.StringPtrOutput)
}

// Cluster template questions. For Rancher v2.3.x and above (list)
func (o ClusterOutput) ClusterTemplateQuestions() ClusterClusterTemplateQuestionArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterClusterTemplateQuestionArrayOutput { return v.ClusterTemplateQuestions }).(ClusterClusterTemplateQuestionArrayOutput)
}

// Cluster template revision ID. For Rancher v2.3.x and above (string)
func (o ClusterOutput) ClusterTemplateRevisionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterTemplateRevisionId }).(pulumi.StringPtrOutput)
}

// Cluster default pod security admission configuration template name (string)
func (o ClusterOutput) DefaultPodSecurityAdmissionConfigurationTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DefaultPodSecurityAdmissionConfigurationTemplateName }).(pulumi.StringOutput)
}

// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
func (o ClusterOutput) DefaultPodSecurityPolicyTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DefaultPodSecurityPolicyTemplateId }).(pulumi.StringOutput)
}

// (Computed) Default project ID for the cluster (string)
func (o ClusterOutput) DefaultProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DefaultProjectId }).(pulumi.StringOutput)
}

// The description for Cluster (string)
func (o ClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Desired agent image. For Rancher v2.3.x and above (string)
func (o ClusterOutput) DesiredAgentImage() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DesiredAgentImage }).(pulumi.StringOutput)
}

// Desired auth image. For Rancher v2.3.x and above (string)
func (o ClusterOutput) DesiredAuthImage() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DesiredAuthImage }).(pulumi.StringOutput)
}

// Desired auth image. For Rancher v2.3.x and above (string)
func (o ClusterOutput) DockerRootDir() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DockerRootDir }).(pulumi.StringOutput)
}

// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
func (o ClusterOutput) Driver() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Driver }).(pulumi.StringOutput)
}

// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig` (list maxitems:1)
func (o ClusterOutput) EksConfig() ClusterEksConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterEksConfigPtrOutput { return v.EksConfig }).(ClusterEksConfigPtrOutput)
}

// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aksConfig`, `eksConfig`, `gkeConfig`, `gkeConfigV2`, `okeConfig` `k3sConfig` and `rkeConfig`. For Rancher v2.5.x and above (list maxitems:1)
func (o ClusterOutput) EksConfigV2() ClusterEksConfigV2Output {
	return o.ApplyT(func(v *Cluster) ClusterEksConfigV2Output { return v.EksConfigV2 }).(ClusterEksConfigV2Output)
}

// Enable built-in cluster alerting (bool)
func (o ClusterOutput) EnableClusterAlerting() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.EnableClusterAlerting }).(pulumi.BoolOutput)
}

// Deploy istio on `system` project and `istio-system` namespace, using App resource instead. See above example.
//
// Deprecated: Deploy istio using rancher2_app resource instead
func (o ClusterOutput) EnableClusterIstio() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.EnableClusterIstio }).(pulumi.BoolOutput)
}

// Enable built-in cluster monitoring (bool)
func (o ClusterOutput) EnableClusterMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.EnableClusterMonitoring }).(pulumi.BoolOutput)
}

// Enable project network isolation (bool)
func (o ClusterOutput) EnableNetworkPolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.EnableNetworkPolicy }).(pulumi.BoolOutput)
}

// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
func (o ClusterOutput) FleetAgentDeploymentCustomizations() ClusterFleetAgentDeploymentCustomizationArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterFleetAgentDeploymentCustomizationArrayOutput {
		return v.FleetAgentDeploymentCustomizations
	}).(ClusterFleetAgentDeploymentCustomizationArrayOutput)
}

// Fleet workspace name (string)
func (o ClusterOutput) FleetWorkspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.FleetWorkspaceName }).(pulumi.StringOutput)
}

// The Google GKE configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfigV2`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
func (o ClusterOutput) GkeConfig() ClusterGkeConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterGkeConfigPtrOutput { return v.GkeConfig }).(ClusterGkeConfigPtrOutput)
}

// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig`. For Rancher v2.5.8 and above (list maxitems:1)
func (o ClusterOutput) GkeConfigV2() ClusterGkeConfigV2PtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterGkeConfigV2PtrOutput { return v.GkeConfigV2 }).(ClusterGkeConfigV2PtrOutput)
}

// (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
func (o ClusterOutput) IstioEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.IstioEnabled }).(pulumi.BoolOutput)
}

// The K3S configuration for `k3s` imported Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `rkeConfig` (list maxitems:1)
func (o ClusterOutput) K3sConfig() ClusterK3sConfigOutput {
	return o.ApplyT(func(v *Cluster) ClusterK3sConfigOutput { return v.K3sConfig }).(ClusterK3sConfigOutput)
}

// (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `clusterAuthEndpoint` enabled, the kubeConfig will not be available until the cluster is `connected` (string)
func (o ClusterOutput) KubeConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.KubeConfig }).(pulumi.StringOutput)
}

// Labels for the Cluster (map)
func (o ClusterOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.Labels }).(pulumi.MapOutput)
}

// The name of the Cluster (string)
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `k3sConfig` and `rkeConfig` (list maxitems:1)
func (o ClusterOutput) OkeConfig() ClusterOkeConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterOkeConfigPtrOutput { return v.OkeConfig }).(ClusterOkeConfigPtrOutput)
}

// The RKE2 configuration for `rke2` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `gkeConfig`, `okeConfig`, `k3sConfig` and `rkeConfig` (list maxitems:1)
func (o ClusterOutput) Rke2Config() ClusterRke2ConfigOutput {
	return o.ApplyT(func(v *Cluster) ClusterRke2ConfigOutput { return v.Rke2Config }).(ClusterRke2ConfigOutput)
}

// The RKE configuration for `rke` Clusters. Conflicts with `aksConfig`, `aksConfigV2`, `eksConfig`, `eksConfigV2`, `gkeConfig`, `gkeConfigV2`, `okeConfig` and `k3sConfig` (list maxitems:1)
func (o ClusterOutput) RkeConfig() ClusterRkeConfigOutput {
	return o.ApplyT(func(v *Cluster) ClusterRkeConfigOutput { return v.RkeConfig }).(ClusterRkeConfigOutput)
}

// (Computed) System project ID for the cluster (string)
func (o ClusterOutput) SystemProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SystemProjectId }).(pulumi.StringOutput)
}

// Windows preferred cluster. Default: `false` (bool)
func (o ClusterOutput) WindowsPreferedCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.WindowsPreferedCluster }).(pulumi.BoolPtrOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
