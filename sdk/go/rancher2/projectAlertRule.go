// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Rancher v2 Project Alert Rule resource. This can be used to create Project Alert Rule for Rancher v2 environments and retrieve their information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooProject, err := rancher2.NewProject(ctx, "fooProject", &rancher2.ProjectArgs{
// 			ClusterId: pulumi.String("<cluster_id>"),
// 			ContainerResourceLimit: &rancher2.ProjectContainerResourceLimitArgs{
// 				LimitsCpu:      pulumi.String("20m"),
// 				LimitsMemory:   pulumi.String("20Mi"),
// 				RequestsCpu:    pulumi.String("1m"),
// 				RequestsMemory: pulumi.String("1Mi"),
// 			},
// 			Description: pulumi.String("Terraform project "),
// 			ResourceQuota: &rancher2.ProjectResourceQuotaArgs{
// 				NamespaceDefaultLimit: &rancher2.ProjectResourceQuotaNamespaceDefaultLimitArgs{
// 					LimitsCpu:       pulumi.String("500m"),
// 					LimitsMemory:    pulumi.String("500Mi"),
// 					RequestsStorage: pulumi.String("1Gi"),
// 				},
// 				ProjectLimit: &rancher2.ProjectResourceQuotaProjectLimitArgs{
// 					LimitsCpu:       pulumi.String("2000m"),
// 					LimitsMemory:    pulumi.String("2000Mi"),
// 					RequestsStorage: pulumi.String("2Gi"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		fooProjectAlertGroup, err := rancher2.NewProjectAlertGroup(ctx, "fooProjectAlertGroup", &rancher2.ProjectAlertGroupArgs{
// 			Description:           pulumi.String("Terraform project alert group"),
// 			GroupIntervalSeconds:  pulumi.Int(300),
// 			ProjectId:             fooProject.ID(),
// 			RepeatIntervalSeconds: pulumi.Int(3600),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rancher2.NewProjectAlertRule(ctx, "fooProjectAlertRule", &rancher2.ProjectAlertRuleArgs{
// 			GroupId:               fooProjectAlertGroup.ID(),
// 			GroupIntervalSeconds:  pulumi.Int(600),
// 			ProjectId:             fooProjectAlertGroup.ProjectId,
// 			RepeatIntervalSeconds: pulumi.Int(6000),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ProjectAlertRule struct {
	pulumi.CustomResourceState

	// The project alert rule annotations (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// The project alert rule alert group ID (string)
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The project alert rule group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrOutput `pulumi:"groupIntervalSeconds"`
	// The project alert rule group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrOutput `pulumi:"groupWaitSeconds"`
	// The project alert rule inherited. Default: `true` (bool)
	Inherited pulumi.BoolPtrOutput `pulumi:"inherited"`
	// The project alert rule labels (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The project alert rule metric rule. ConflictsWith: `"podRule", "workloadRule"`` (list Maxitems:1)
	MetricRule ProjectAlertRuleMetricRulePtrOutput `pulumi:"metricRule"`
	// The project alert rule name (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The project alert rule pod rule. ConflictsWith: `"metricRule", "workloadRule"`` (list Maxitems:1)
	PodRule ProjectAlertRulePodRulePtrOutput `pulumi:"podRule"`
	// The project id where create project alert rule (string)
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The project alert rule wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrOutput `pulumi:"repeatIntervalSeconds"`
	// The project alert rule severity. Supported values : `"critical" | "info" | "warning"`. Default: `critical` (string)
	Severity pulumi.StringPtrOutput `pulumi:"severity"`
	// The project alert rule workload rule. ConflictsWith: `"metricRule", "podRule"`` (list Maxitems:1)
	WorkloadRule ProjectAlertRuleWorkloadRulePtrOutput `pulumi:"workloadRule"`
}

// NewProjectAlertRule registers a new resource with the given unique name, arguments, and options.
func NewProjectAlertRule(ctx *pulumi.Context,
	name string, args *ProjectAlertRuleArgs, opts ...pulumi.ResourceOption) (*ProjectAlertRule, error) {
	if args == nil || args.GroupId == nil {
		return nil, errors.New("missing required argument 'GroupId'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil {
		args = &ProjectAlertRuleArgs{}
	}
	var resource ProjectAlertRule
	err := ctx.RegisterResource("rancher2:index/projectAlertRule:ProjectAlertRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectAlertRule gets an existing ProjectAlertRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectAlertRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectAlertRuleState, opts ...pulumi.ResourceOption) (*ProjectAlertRule, error) {
	var resource ProjectAlertRule
	err := ctx.ReadResource("rancher2:index/projectAlertRule:ProjectAlertRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectAlertRule resources.
type projectAlertRuleState struct {
	// The project alert rule annotations (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The project alert rule alert group ID (string)
	GroupId *string `pulumi:"groupId"`
	// The project alert rule group interval seconds. Default: `180` (int)
	GroupIntervalSeconds *int `pulumi:"groupIntervalSeconds"`
	// The project alert rule group wait seconds. Default: `180` (int)
	GroupWaitSeconds *int `pulumi:"groupWaitSeconds"`
	// The project alert rule inherited. Default: `true` (bool)
	Inherited *bool `pulumi:"inherited"`
	// The project alert rule labels (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The project alert rule metric rule. ConflictsWith: `"podRule", "workloadRule"`` (list Maxitems:1)
	MetricRule *ProjectAlertRuleMetricRule `pulumi:"metricRule"`
	// The project alert rule name (string)
	Name *string `pulumi:"name"`
	// The project alert rule pod rule. ConflictsWith: `"metricRule", "workloadRule"`` (list Maxitems:1)
	PodRule *ProjectAlertRulePodRule `pulumi:"podRule"`
	// The project id where create project alert rule (string)
	ProjectId *string `pulumi:"projectId"`
	// The project alert rule wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds *int `pulumi:"repeatIntervalSeconds"`
	// The project alert rule severity. Supported values : `"critical" | "info" | "warning"`. Default: `critical` (string)
	Severity *string `pulumi:"severity"`
	// The project alert rule workload rule. ConflictsWith: `"metricRule", "podRule"`` (list Maxitems:1)
	WorkloadRule *ProjectAlertRuleWorkloadRule `pulumi:"workloadRule"`
}

type ProjectAlertRuleState struct {
	// The project alert rule annotations (map)
	Annotations pulumi.MapInput
	// The project alert rule alert group ID (string)
	GroupId pulumi.StringPtrInput
	// The project alert rule group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrInput
	// The project alert rule group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrInput
	// The project alert rule inherited. Default: `true` (bool)
	Inherited pulumi.BoolPtrInput
	// The project alert rule labels (map)
	Labels pulumi.MapInput
	// The project alert rule metric rule. ConflictsWith: `"podRule", "workloadRule"`` (list Maxitems:1)
	MetricRule ProjectAlertRuleMetricRulePtrInput
	// The project alert rule name (string)
	Name pulumi.StringPtrInput
	// The project alert rule pod rule. ConflictsWith: `"metricRule", "workloadRule"`` (list Maxitems:1)
	PodRule ProjectAlertRulePodRulePtrInput
	// The project id where create project alert rule (string)
	ProjectId pulumi.StringPtrInput
	// The project alert rule wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrInput
	// The project alert rule severity. Supported values : `"critical" | "info" | "warning"`. Default: `critical` (string)
	Severity pulumi.StringPtrInput
	// The project alert rule workload rule. ConflictsWith: `"metricRule", "podRule"`` (list Maxitems:1)
	WorkloadRule ProjectAlertRuleWorkloadRulePtrInput
}

func (ProjectAlertRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectAlertRuleState)(nil)).Elem()
}

type projectAlertRuleArgs struct {
	// The project alert rule annotations (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The project alert rule alert group ID (string)
	GroupId string `pulumi:"groupId"`
	// The project alert rule group interval seconds. Default: `180` (int)
	GroupIntervalSeconds *int `pulumi:"groupIntervalSeconds"`
	// The project alert rule group wait seconds. Default: `180` (int)
	GroupWaitSeconds *int `pulumi:"groupWaitSeconds"`
	// The project alert rule inherited. Default: `true` (bool)
	Inherited *bool `pulumi:"inherited"`
	// The project alert rule labels (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The project alert rule metric rule. ConflictsWith: `"podRule", "workloadRule"`` (list Maxitems:1)
	MetricRule *ProjectAlertRuleMetricRule `pulumi:"metricRule"`
	// The project alert rule name (string)
	Name *string `pulumi:"name"`
	// The project alert rule pod rule. ConflictsWith: `"metricRule", "workloadRule"`` (list Maxitems:1)
	PodRule *ProjectAlertRulePodRule `pulumi:"podRule"`
	// The project id where create project alert rule (string)
	ProjectId string `pulumi:"projectId"`
	// The project alert rule wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds *int `pulumi:"repeatIntervalSeconds"`
	// The project alert rule severity. Supported values : `"critical" | "info" | "warning"`. Default: `critical` (string)
	Severity *string `pulumi:"severity"`
	// The project alert rule workload rule. ConflictsWith: `"metricRule", "podRule"`` (list Maxitems:1)
	WorkloadRule *ProjectAlertRuleWorkloadRule `pulumi:"workloadRule"`
}

// The set of arguments for constructing a ProjectAlertRule resource.
type ProjectAlertRuleArgs struct {
	// The project alert rule annotations (map)
	Annotations pulumi.MapInput
	// The project alert rule alert group ID (string)
	GroupId pulumi.StringInput
	// The project alert rule group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrInput
	// The project alert rule group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrInput
	// The project alert rule inherited. Default: `true` (bool)
	Inherited pulumi.BoolPtrInput
	// The project alert rule labels (map)
	Labels pulumi.MapInput
	// The project alert rule metric rule. ConflictsWith: `"podRule", "workloadRule"`` (list Maxitems:1)
	MetricRule ProjectAlertRuleMetricRulePtrInput
	// The project alert rule name (string)
	Name pulumi.StringPtrInput
	// The project alert rule pod rule. ConflictsWith: `"metricRule", "workloadRule"`` (list Maxitems:1)
	PodRule ProjectAlertRulePodRulePtrInput
	// The project id where create project alert rule (string)
	ProjectId pulumi.StringInput
	// The project alert rule wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrInput
	// The project alert rule severity. Supported values : `"critical" | "info" | "warning"`. Default: `critical` (string)
	Severity pulumi.StringPtrInput
	// The project alert rule workload rule. ConflictsWith: `"metricRule", "podRule"`` (list Maxitems:1)
	WorkloadRule ProjectAlertRuleWorkloadRulePtrInput
}

func (ProjectAlertRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectAlertRuleArgs)(nil)).Elem()
}
