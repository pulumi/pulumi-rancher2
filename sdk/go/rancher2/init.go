// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "rancher2:index/activeDirectory:ActiveDirectory":
		r, err = NewActiveDirectory(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/app:App":
		r, err = NewApp(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/appV2:AppV2":
		r, err = NewAppV2(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/authConfigAdfs:AuthConfigAdfs":
		r, err = NewAuthConfigAdfs(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/authConfigAzureAd:AuthConfigAzureAd":
		r, err = NewAuthConfigAzureAd(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/authConfigFreeIpa:AuthConfigFreeIpa":
		r, err = NewAuthConfigFreeIpa(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/authConfigGithub:AuthConfigGithub":
		r, err = NewAuthConfigGithub(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/authConfigKeycloak:AuthConfigKeycloak":
		r, err = NewAuthConfigKeycloak(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/authConfigOkta:AuthConfigOkta":
		r, err = NewAuthConfigOkta(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/authConfigOpenLdap:AuthConfigOpenLdap":
		r, err = NewAuthConfigOpenLdap(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/authConfigPing:AuthConfigPing":
		r, err = NewAuthConfigPing(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/bootstrap:Bootstrap":
		r, err = NewBootstrap(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/catalog:Catalog":
		r, err = NewCatalog(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/catalogV2:CatalogV2":
		r, err = NewCatalogV2(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/certificate:Certificate":
		r, err = NewCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/cloudCredential:CloudCredential":
		r, err = NewCloudCredential(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/cluster:Cluster":
		r, err = NewCluster(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/clusterAlertGroup:ClusterAlertGroup":
		r, err = NewClusterAlertGroup(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/clusterAlertRule:ClusterAlertRule":
		r, err = NewClusterAlertRule(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/clusterAlterGroup:ClusterAlterGroup":
		r, err = NewClusterAlterGroup(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/clusterAlterRule:ClusterAlterRule":
		r, err = NewClusterAlterRule(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/clusterDriver:ClusterDriver":
		r, err = NewClusterDriver(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/clusterLogging:ClusterLogging":
		r, err = NewClusterLogging(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/clusterRoleTemplateBinding:ClusterRoleTemplateBinding":
		r, err = NewClusterRoleTemplateBinding(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/clusterSync:ClusterSync":
		r, err = NewClusterSync(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/clusterTemplate:ClusterTemplate":
		r, err = NewClusterTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/etcdBackup:EtcdBackup":
		r, err = NewEtcdBackup(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/feature:Feature":
		r, err = NewFeature(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/globalDns:GlobalDns":
		r, err = NewGlobalDns(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/globalDnsProvider:GlobalDnsProvider":
		r, err = NewGlobalDnsProvider(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/globalRole:GlobalRole":
		r, err = NewGlobalRole(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/globalRoleBinding:GlobalRoleBinding":
		r, err = NewGlobalRoleBinding(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/multiClusterApp:MultiClusterApp":
		r, err = NewMultiClusterApp(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/namespace:Namespace":
		r, err = NewNamespace(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/nodeDriver:NodeDriver":
		r, err = NewNodeDriver(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/nodePool:NodePool":
		r, err = NewNodePool(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/nodeTemplate:NodeTemplate":
		r, err = NewNodeTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/notifier:Notifier":
		r, err = NewNotifier(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/podSecurityPolicyTemplate:PodSecurityPolicyTemplate":
		r, err = NewPodSecurityPolicyTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/project:Project":
		r, err = NewProject(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/projectAlertGroup:ProjectAlertGroup":
		r, err = NewProjectAlertGroup(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/projectAlertRule:ProjectAlertRule":
		r, err = NewProjectAlertRule(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/projectLogging:ProjectLogging":
		r, err = NewProjectLogging(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/projectRoleTemplateBinding:ProjectRoleTemplateBinding":
		r, err = NewProjectRoleTemplateBinding(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/registry:Registry":
		r, err = NewRegistry(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/roleTempalte:RoleTempalte":
		r, err = NewRoleTempalte(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/secret:Secret":
		r, err = NewSecret(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/secretV2:SecretV2":
		r, err = NewSecretV2(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/setting:Setting":
		r, err = NewSetting(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/token:Token":
		r, err = NewToken(ctx, name, nil, pulumi.URN_(urn))
	case "rancher2:index/user:User":
		r, err = NewUser(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:rancher2" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/activeDirectory",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/app",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/appV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/authConfigAdfs",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/authConfigAzureAd",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/authConfigFreeIpa",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/authConfigGithub",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/authConfigKeycloak",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/authConfigOkta",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/authConfigOpenLdap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/authConfigPing",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/bootstrap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/catalog",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/catalogV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/certificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/cloudCredential",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/cluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/clusterAlertGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/clusterAlertRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/clusterAlterGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/clusterAlterRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/clusterDriver",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/clusterLogging",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/clusterRoleTemplateBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/clusterSync",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/clusterTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/etcdBackup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/feature",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/globalDns",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/globalDnsProvider",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/globalRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/globalRoleBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/multiClusterApp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/namespace",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/nodeDriver",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/nodePool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/nodeTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/notifier",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/podSecurityPolicyTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/projectAlertGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/projectAlertRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/projectLogging",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/projectRoleTemplateBinding",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/registry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/roleTempalte",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/secret",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/secretV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/setting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/token",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rancher2",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"rancher2",
		&pkg{version},
	)
}
