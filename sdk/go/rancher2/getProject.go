// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-rancher2/sdk/v7/go/rancher2/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
func LookupProject(ctx *pulumi.Context, args *LookupProjectArgs, opts ...pulumi.InvokeOption) (*LookupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectResult
	err := ctx.Invoke("rancher2:index/getProject:getProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProject.
type LookupProjectArgs struct {
	// ID of the Rancher 2 cluster (string)
	ClusterId string `pulumi:"clusterId"`
	// The project name (string)
	Name string `pulumi:"name"`
}

// A collection of values returned by getProject.
type LookupProjectResult struct {
	// (Computed) Annotations of the rancher2 project (map)
	Annotations map[string]string `pulumi:"annotations"`
	ClusterId   string            `pulumi:"clusterId"`
	// (Computed) Default containers resource limits on project (List maxitem:1)
	ContainerResourceLimit GetProjectContainerResourceLimit `pulumi:"containerResourceLimit"`
	// (Computed) The project's description (string)
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Computed) Labels of the rancher2 project (map)
	Labels map[string]string `pulumi:"labels"`
	Name   string            `pulumi:"name"`
	// (Computed) Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
	ResourceQuota GetProjectResourceQuota `pulumi:"resourceQuota"`
	// (Computed) UUID of the project as stored by Rancher 2 (string)
	Uuid string `pulumi:"uuid"`
}

func LookupProjectOutput(ctx *pulumi.Context, args LookupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectResultOutput, error) {
			args := v.(LookupProjectArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupProjectResult
			secret, err := ctx.InvokePackageRaw("rancher2:index/getProject:getProject", args, &rv, "", opts...)
			if err != nil {
				return LookupProjectResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupProjectResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupProjectResultOutput), nil
			}
			return output, nil
		}).(LookupProjectResultOutput)
}

// A collection of arguments for invoking getProject.
type LookupProjectOutputArgs struct {
	// ID of the Rancher 2 cluster (string)
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The project name (string)
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getProject.
type LookupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectResult)(nil)).Elem()
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutput() LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutputWithContext(ctx context.Context) LookupProjectResultOutput {
	return o
}

// (Computed) Annotations of the rancher2 project (map)
func (o LookupProjectResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupProjectResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o LookupProjectResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// (Computed) Default containers resource limits on project (List maxitem:1)
func (o LookupProjectResultOutput) ContainerResourceLimit() GetProjectContainerResourceLimitOutput {
	return o.ApplyT(func(v LookupProjectResult) GetProjectContainerResourceLimit { return v.ContainerResourceLimit }).(GetProjectContainerResourceLimitOutput)
}

// (Computed) The project's description (string)
func (o LookupProjectResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Computed) Labels of the rancher2 project (map)
func (o LookupProjectResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupProjectResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupProjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Name }).(pulumi.StringOutput)
}

// (Computed) Resource quota for project. Rancher v2.1.x or higher (list maxitems:1)
func (o LookupProjectResultOutput) ResourceQuota() GetProjectResourceQuotaOutput {
	return o.ApplyT(func(v LookupProjectResult) GetProjectResourceQuota { return v.ResourceQuota }).(GetProjectResourceQuotaOutput)
}

// (Computed) UUID of the project as stored by Rancher 2 (string)
func (o LookupProjectResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Uuid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectResultOutput{})
}
