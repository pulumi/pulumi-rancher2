// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Rancher v2 Cluster Template resource. This can be used to create Cluster Templates for Rancher v2 RKE clusters and retrieve their information.
//
// Cluster Templates are available from Rancher v2.3.x and above.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewClusterTemplate(ctx, "foo", &rancher2.ClusterTemplateArgs{
// 			Description: pulumi.String("Terraform cluster template foo"),
// 			Members: rancher2.ClusterTemplateMemberArray{
// 				&rancher2.ClusterTemplateMemberArgs{
// 					AccessType:      pulumi.String("owner"),
// 					UserPrincipalId: pulumi.String("local://user-XXXXX"),
// 				},
// 			},
// 			TemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{
// 				&rancher2.ClusterTemplateTemplateRevisionArgs{
// 					ClusterConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{
// 						RkeConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{
// 							Network: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{
// 								Plugin: pulumi.String("canal"),
// 							},
// 							Services: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{
// 								Etcd: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{
// 									Creation:  pulumi.String("6h"),
// 									Retention: pulumi.String("24h"),
// 								},
// 							},
// 						},
// 					},
// 					Default: pulumi.Bool(true),
// 					Name:    pulumi.String("V1"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Creating Rancher v2 RKE cluster template with upgrade strategy. For Rancher v2.4.x or above.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewClusterTemplate(ctx, "foo", &rancher2.ClusterTemplateArgs{
// 			Description: pulumi.String("Terraform cluster template foo"),
// 			Members: rancher2.ClusterTemplateMemberArray{
// 				&rancher2.ClusterTemplateMemberArgs{
// 					AccessType:      pulumi.String("owner"),
// 					UserPrincipalId: pulumi.String("local://user-XXXXX"),
// 				},
// 			},
// 			TemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{
// 				&rancher2.ClusterTemplateTemplateRevisionArgs{
// 					ClusterConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{
// 						RkeConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{
// 							Network: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{
// 								Plugin: pulumi.String("canal"),
// 							},
// 							Services: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{
// 								Etcd: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{
// 									Creation:  pulumi.String("6h"),
// 									Retention: pulumi.String("24h"),
// 								},
// 							},
// 							UpgradeStrategy: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigUpgradeStrategyArgs{
// 								Drain:                pulumi.Bool(true),
// 								MaxUnavailableWorker: pulumi.String(fmt.Sprintf("%v%v", "20", "%")),
// 							},
// 						},
// 					},
// 					Default: pulumi.Bool(true),
// 					Name:    pulumi.String("V1"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Creating Rancher v2 RKE cluster template with scheduled cluster scan. For Rancher v2.4.x or above.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewClusterTemplate(ctx, "foo", &rancher2.ClusterTemplateArgs{
// 			Description: pulumi.String("Terraform cluster template foo"),
// 			Members: rancher2.ClusterTemplateMemberArray{
// 				&rancher2.ClusterTemplateMemberArgs{
// 					AccessType:      pulumi.String("owner"),
// 					UserPrincipalId: pulumi.String("local://user-XXXXX"),
// 				},
// 			},
// 			TemplateRevisions: rancher2.ClusterTemplateTemplateRevisionArray{
// 				&rancher2.ClusterTemplateTemplateRevisionArgs{
// 					ClusterConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigArgs{
// 						RkeConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs{
// 							Network: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs{
// 								Plugin: pulumi.String("canal"),
// 							},
// 							Services: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs{
// 								Etcd: &rancher2.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs{
// 									Creation:  pulumi.String("6h"),
// 									Retention: pulumi.String("24h"),
// 								},
// 							},
// 						},
// 						ScheduledClusterScan: &rancher2.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanArgs{
// 							Enabled: pulumi.Bool(true),
// 							ScanConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigArgs{
// 								CisScanConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScanConfigCisScanConfigArgs{
// 									DebugMaster: pulumi.Bool(true),
// 									DebugWorker: pulumi.Bool(true),
// 								},
// 							},
// 							ScheduleConfig: &rancher2.ClusterTemplateTemplateRevisionClusterConfigScheduledClusterScanScheduleConfigArgs{
// 								CronSchedule: pulumi.String("30 * * * *"),
// 								Retention:    pulumi.Int(5),
// 							},
// 						},
// 					},
// 					Default: pulumi.Bool(true),
// 					Name:    pulumi.String("V1"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Cluster Template can be imported using the rancher Cluster Template ID
//
// ```sh
//  $ pulumi import rancher2:index/clusterTemplate:ClusterTemplate foo &lt;CLUSTER_TEMPLATE_ID&gt;
// ```
type ClusterTemplate struct {
	pulumi.CustomResourceState

	// Annotations for the cluster template revision (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// (Computed) Default cluster template revision ID (string)
	DefaultRevisionId pulumi.StringOutput `pulumi:"defaultRevisionId"`
	// Cluster template description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Labels for the cluster template revision (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// Cluster template members (list)
	Members ClusterTemplateMemberArrayOutput `pulumi:"members"`
	// The cluster template revision name (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// Cluster template revisions (list)
	TemplateRevisions ClusterTemplateTemplateRevisionArrayOutput `pulumi:"templateRevisions"`
}

// NewClusterTemplate registers a new resource with the given unique name, arguments, and options.
func NewClusterTemplate(ctx *pulumi.Context,
	name string, args *ClusterTemplateArgs, opts ...pulumi.ResourceOption) (*ClusterTemplate, error) {
	if args == nil {
		args = &ClusterTemplateArgs{}
	}
	var resource ClusterTemplate
	err := ctx.RegisterResource("rancher2:index/clusterTemplate:ClusterTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterTemplate gets an existing ClusterTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterTemplateState, opts ...pulumi.ResourceOption) (*ClusterTemplate, error) {
	var resource ClusterTemplate
	err := ctx.ReadResource("rancher2:index/clusterTemplate:ClusterTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterTemplate resources.
type clusterTemplateState struct {
	// Annotations for the cluster template revision (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// (Computed) Default cluster template revision ID (string)
	DefaultRevisionId *string `pulumi:"defaultRevisionId"`
	// Cluster template description
	Description *string `pulumi:"description"`
	// Labels for the cluster template revision (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// Cluster template members (list)
	Members []ClusterTemplateMember `pulumi:"members"`
	// The cluster template revision name (string)
	Name *string `pulumi:"name"`
	// Cluster template revisions (list)
	TemplateRevisions []ClusterTemplateTemplateRevision `pulumi:"templateRevisions"`
}

type ClusterTemplateState struct {
	// Annotations for the cluster template revision (map)
	Annotations pulumi.MapInput
	// (Computed) Default cluster template revision ID (string)
	DefaultRevisionId pulumi.StringPtrInput
	// Cluster template description
	Description pulumi.StringPtrInput
	// Labels for the cluster template revision (map)
	Labels pulumi.MapInput
	// Cluster template members (list)
	Members ClusterTemplateMemberArrayInput
	// The cluster template revision name (string)
	Name pulumi.StringPtrInput
	// Cluster template revisions (list)
	TemplateRevisions ClusterTemplateTemplateRevisionArrayInput
}

func (ClusterTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterTemplateState)(nil)).Elem()
}

type clusterTemplateArgs struct {
	// Annotations for the cluster template revision (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Cluster template description
	Description *string `pulumi:"description"`
	// Labels for the cluster template revision (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// Cluster template members (list)
	Members []ClusterTemplateMember `pulumi:"members"`
	// The cluster template revision name (string)
	Name *string `pulumi:"name"`
	// Cluster template revisions (list)
	TemplateRevisions []ClusterTemplateTemplateRevision `pulumi:"templateRevisions"`
}

// The set of arguments for constructing a ClusterTemplate resource.
type ClusterTemplateArgs struct {
	// Annotations for the cluster template revision (map)
	Annotations pulumi.MapInput
	// Cluster template description
	Description pulumi.StringPtrInput
	// Labels for the cluster template revision (map)
	Labels pulumi.MapInput
	// Cluster template members (list)
	Members ClusterTemplateMemberArrayInput
	// The cluster template revision name (string)
	Name pulumi.StringPtrInput
	// Cluster template revisions (list)
	TemplateRevisions ClusterTemplateTemplateRevisionArrayInput
}

func (ClusterTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterTemplateArgs)(nil)).Elem()
}

type ClusterTemplateInput interface {
	pulumi.Input

	ToClusterTemplateOutput() ClusterTemplateOutput
	ToClusterTemplateOutputWithContext(ctx context.Context) ClusterTemplateOutput
}

func (ClusterTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTemplate)(nil)).Elem()
}

func (i ClusterTemplate) ToClusterTemplateOutput() ClusterTemplateOutput {
	return i.ToClusterTemplateOutputWithContext(context.Background())
}

func (i ClusterTemplate) ToClusterTemplateOutputWithContext(ctx context.Context) ClusterTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTemplateOutput)
}

type ClusterTemplateOutput struct {
	*pulumi.OutputState
}

func (ClusterTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterTemplateOutput)(nil)).Elem()
}

func (o ClusterTemplateOutput) ToClusterTemplateOutput() ClusterTemplateOutput {
	return o
}

func (o ClusterTemplateOutput) ToClusterTemplateOutputWithContext(ctx context.Context) ClusterTemplateOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ClusterTemplateOutput{})
}
