// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Rancher v2 Setting resource. This can be used to create settings for Rancher v2 environments and retrieve their information.
//
// On create, if setting already exists, provider will import it and update its value.
//
// On destroy, if setting is a system setting like `server-url`, provider'll not delete it from Rancher, it'll just update setting value to default and remove it from tfstate.
type Setting struct {
	pulumi.CustomResourceState

	// Annotations for setting object (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// Labels for setting object (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The name of the setting (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The value of the setting (string)
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewSetting registers a new resource with the given unique name, arguments, and options.
func NewSetting(ctx *pulumi.Context,
	name string, args *SettingArgs, opts ...pulumi.ResourceOption) (*Setting, error) {
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	if args == nil {
		args = &SettingArgs{}
	}
	var resource Setting
	err := ctx.RegisterResource("rancher2:index/setting:Setting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSetting gets an existing Setting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingState, opts ...pulumi.ResourceOption) (*Setting, error) {
	var resource Setting
	err := ctx.ReadResource("rancher2:index/setting:Setting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Setting resources.
type settingState struct {
	// Annotations for setting object (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Labels for setting object (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the setting (string)
	Name *string `pulumi:"name"`
	// The value of the setting (string)
	Value *string `pulumi:"value"`
}

type SettingState struct {
	// Annotations for setting object (map)
	Annotations pulumi.MapInput
	// Labels for setting object (map)
	Labels pulumi.MapInput
	// The name of the setting (string)
	Name pulumi.StringPtrInput
	// The value of the setting (string)
	Value pulumi.StringPtrInput
}

func (SettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingState)(nil)).Elem()
}

type settingArgs struct {
	// Annotations for setting object (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Labels for setting object (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the setting (string)
	Name *string `pulumi:"name"`
	// The value of the setting (string)
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a Setting resource.
type SettingArgs struct {
	// Annotations for setting object (map)
	Annotations pulumi.MapInput
	// Labels for setting object (map)
	Labels pulumi.MapInput
	// The name of the setting (string)
	Name pulumi.StringPtrInput
	// The value of the setting (string)
	Value pulumi.StringInput
}

func (SettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingArgs)(nil)).Elem()
}
