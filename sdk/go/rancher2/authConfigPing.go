// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Rancher v2 Auth Config Ping resource. This can be used to configure and enable Auth Config Ping for Rancher v2 RKE clusters and retrieve their information.
//
// In addition to the built-in local auth, only one external auth config provider can be enabled at a time.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rancher2/sdk/v2/go/rancher2"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rancher2.NewAuthConfigPing(ctx, "ping", &rancher2.AuthConfigPingArgs{
// 			DisplayNameField:   pulumi.String("<DISPLAY_NAME_FIELD>"),
// 			GroupsField:        pulumi.String("<GROUPS_FIELD>"),
// 			IdpMetadataContent: pulumi.String("<IDP_METADATA_CONTENT>"),
// 			RancherApiHost:     pulumi.String("https://<RANCHER_API_HOST>"),
// 			SpCert:             pulumi.String("<SP_CERT>"),
// 			SpKey:              pulumi.String("<SP_KEY>"),
// 			UidField:           pulumi.String("<UID_FIELD>"),
// 			UserNameField:      pulumi.String("<USER_NAME_FIELD>"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AuthConfigPing struct {
	pulumi.CustomResourceState

	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode pulumi.StringPtrOutput `pulumi:"accessMode"`
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `ping_user://<USER_ID>`  `ping_group://<GROUP_ID>` (list)
	AllowedPrincipalIds pulumi.StringArrayOutput `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// Ping display name field (string)
	DisplayNameField pulumi.StringOutput `pulumi:"displayNameField"`
	// Enable auth config provider. Default `true` (bool)
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Ping group field (string)
	GroupsField pulumi.StringOutput `pulumi:"groupsField"`
	// Ping IDP metadata content (string)
	IdpMetadataContent pulumi.StringOutput `pulumi:"idpMetadataContent"`
	// Labels of the resource (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// (Computed) The name of the resource (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// Rancher URL. URL scheme needs to be specified, `https://<RANCHER_API_HOST>` (string)
	RancherApiHost pulumi.StringOutput `pulumi:"rancherApiHost"`
	// Ping SP cert (string)
	SpCert pulumi.StringOutput `pulumi:"spCert"`
	// Ping SP key (string)
	SpKey pulumi.StringOutput `pulumi:"spKey"`
	// (Computed) The type of the resource (string)
	Type pulumi.StringOutput `pulumi:"type"`
	// Ping UID field (string)
	UidField pulumi.StringOutput `pulumi:"uidField"`
	// Ping user name field (string)
	UserNameField pulumi.StringOutput `pulumi:"userNameField"`
}

// NewAuthConfigPing registers a new resource with the given unique name, arguments, and options.
func NewAuthConfigPing(ctx *pulumi.Context,
	name string, args *AuthConfigPingArgs, opts ...pulumi.ResourceOption) (*AuthConfigPing, error) {
	if args == nil || args.DisplayNameField == nil {
		return nil, errors.New("missing required argument 'DisplayNameField'")
	}
	if args == nil || args.GroupsField == nil {
		return nil, errors.New("missing required argument 'GroupsField'")
	}
	if args == nil || args.IdpMetadataContent == nil {
		return nil, errors.New("missing required argument 'IdpMetadataContent'")
	}
	if args == nil || args.RancherApiHost == nil {
		return nil, errors.New("missing required argument 'RancherApiHost'")
	}
	if args == nil || args.SpCert == nil {
		return nil, errors.New("missing required argument 'SpCert'")
	}
	if args == nil || args.SpKey == nil {
		return nil, errors.New("missing required argument 'SpKey'")
	}
	if args == nil || args.UidField == nil {
		return nil, errors.New("missing required argument 'UidField'")
	}
	if args == nil || args.UserNameField == nil {
		return nil, errors.New("missing required argument 'UserNameField'")
	}
	if args == nil {
		args = &AuthConfigPingArgs{}
	}
	var resource AuthConfigPing
	err := ctx.RegisterResource("rancher2:index/authConfigPing:AuthConfigPing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthConfigPing gets an existing AuthConfigPing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthConfigPing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthConfigPingState, opts ...pulumi.ResourceOption) (*AuthConfigPing, error) {
	var resource AuthConfigPing
	err := ctx.ReadResource("rancher2:index/authConfigPing:AuthConfigPing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthConfigPing resources.
type authConfigPingState struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode *string `pulumi:"accessMode"`
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `ping_user://<USER_ID>`  `ping_group://<GROUP_ID>` (list)
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Ping display name field (string)
	DisplayNameField *string `pulumi:"displayNameField"`
	// Enable auth config provider. Default `true` (bool)
	Enabled *bool `pulumi:"enabled"`
	// Ping group field (string)
	GroupsField *string `pulumi:"groupsField"`
	// Ping IDP metadata content (string)
	IdpMetadataContent *string `pulumi:"idpMetadataContent"`
	// Labels of the resource (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// (Computed) The name of the resource (string)
	Name *string `pulumi:"name"`
	// Rancher URL. URL scheme needs to be specified, `https://<RANCHER_API_HOST>` (string)
	RancherApiHost *string `pulumi:"rancherApiHost"`
	// Ping SP cert (string)
	SpCert *string `pulumi:"spCert"`
	// Ping SP key (string)
	SpKey *string `pulumi:"spKey"`
	// (Computed) The type of the resource (string)
	Type *string `pulumi:"type"`
	// Ping UID field (string)
	UidField *string `pulumi:"uidField"`
	// Ping user name field (string)
	UserNameField *string `pulumi:"userNameField"`
}

type AuthConfigPingState struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode pulumi.StringPtrInput
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `ping_user://<USER_ID>`  `ping_group://<GROUP_ID>` (list)
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource (map)
	Annotations pulumi.MapInput
	// Ping display name field (string)
	DisplayNameField pulumi.StringPtrInput
	// Enable auth config provider. Default `true` (bool)
	Enabled pulumi.BoolPtrInput
	// Ping group field (string)
	GroupsField pulumi.StringPtrInput
	// Ping IDP metadata content (string)
	IdpMetadataContent pulumi.StringPtrInput
	// Labels of the resource (map)
	Labels pulumi.MapInput
	// (Computed) The name of the resource (string)
	Name pulumi.StringPtrInput
	// Rancher URL. URL scheme needs to be specified, `https://<RANCHER_API_HOST>` (string)
	RancherApiHost pulumi.StringPtrInput
	// Ping SP cert (string)
	SpCert pulumi.StringPtrInput
	// Ping SP key (string)
	SpKey pulumi.StringPtrInput
	// (Computed) The type of the resource (string)
	Type pulumi.StringPtrInput
	// Ping UID field (string)
	UidField pulumi.StringPtrInput
	// Ping user name field (string)
	UserNameField pulumi.StringPtrInput
}

func (AuthConfigPingState) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigPingState)(nil)).Elem()
}

type authConfigPingArgs struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode *string `pulumi:"accessMode"`
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `ping_user://<USER_ID>`  `ping_group://<GROUP_ID>` (list)
	AllowedPrincipalIds []string `pulumi:"allowedPrincipalIds"`
	// Annotations of the resource (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// Ping display name field (string)
	DisplayNameField string `pulumi:"displayNameField"`
	// Enable auth config provider. Default `true` (bool)
	Enabled *bool `pulumi:"enabled"`
	// Ping group field (string)
	GroupsField string `pulumi:"groupsField"`
	// Ping IDP metadata content (string)
	IdpMetadataContent string `pulumi:"idpMetadataContent"`
	// Labels of the resource (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// Rancher URL. URL scheme needs to be specified, `https://<RANCHER_API_HOST>` (string)
	RancherApiHost string `pulumi:"rancherApiHost"`
	// Ping SP cert (string)
	SpCert string `pulumi:"spCert"`
	// Ping SP key (string)
	SpKey string `pulumi:"spKey"`
	// Ping UID field (string)
	UidField string `pulumi:"uidField"`
	// Ping user name field (string)
	UserNameField string `pulumi:"userNameField"`
}

// The set of arguments for constructing a AuthConfigPing resource.
type AuthConfigPingArgs struct {
	// Access mode for auth. `required`, `restricted`, `unrestricted` are supported. Default `unrestricted` (string)
	AccessMode pulumi.StringPtrInput
	// Allowed principal ids for auth. Required if `accessMode` is `required` or `restricted`. Ex: `ping_user://<USER_ID>`  `ping_group://<GROUP_ID>` (list)
	AllowedPrincipalIds pulumi.StringArrayInput
	// Annotations of the resource (map)
	Annotations pulumi.MapInput
	// Ping display name field (string)
	DisplayNameField pulumi.StringInput
	// Enable auth config provider. Default `true` (bool)
	Enabled pulumi.BoolPtrInput
	// Ping group field (string)
	GroupsField pulumi.StringInput
	// Ping IDP metadata content (string)
	IdpMetadataContent pulumi.StringInput
	// Labels of the resource (map)
	Labels pulumi.MapInput
	// Rancher URL. URL scheme needs to be specified, `https://<RANCHER_API_HOST>` (string)
	RancherApiHost pulumi.StringInput
	// Ping SP cert (string)
	SpCert pulumi.StringInput
	// Ping SP key (string)
	SpKey pulumi.StringInput
	// Ping UID field (string)
	UidField pulumi.StringInput
	// Ping user name field (string)
	UserNameField pulumi.StringInput
}

func (AuthConfigPingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authConfigPingArgs)(nil)).Elem()
}

type AuthConfigPingInput interface {
	pulumi.Input

	ToAuthConfigPingOutput() AuthConfigPingOutput
	ToAuthConfigPingOutputWithContext(ctx context.Context) AuthConfigPingOutput
}

func (AuthConfigPing) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfigPing)(nil)).Elem()
}

func (i AuthConfigPing) ToAuthConfigPingOutput() AuthConfigPingOutput {
	return i.ToAuthConfigPingOutputWithContext(context.Background())
}

func (i AuthConfigPing) ToAuthConfigPingOutputWithContext(ctx context.Context) AuthConfigPingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigPingOutput)
}

type AuthConfigPingOutput struct {
	*pulumi.OutputState
}

func (AuthConfigPingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfigPingOutput)(nil)).Elem()
}

func (o AuthConfigPingOutput) ToAuthConfigPingOutput() AuthConfigPingOutput {
	return o
}

func (o AuthConfigPingOutput) ToAuthConfigPingOutputWithContext(ctx context.Context) AuthConfigPingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AuthConfigPingOutput{})
}
