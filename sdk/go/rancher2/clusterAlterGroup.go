// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Rancher v2 Cluster Alert Group resource. This can be used to create Cluster Alert Group for Rancher v2 environments and retrieve their information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v5/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rancher2.NewClusterAlertGroup(ctx, "foo", &rancher2.ClusterAlertGroupArgs{
//				ClusterId:             pulumi.String("<cluster_id>"),
//				Description:           pulumi.String("Terraform cluster alert group"),
//				GroupIntervalSeconds:  pulumi.Int(300),
//				RepeatIntervalSeconds: pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Cluster Alert Group can be imported using the Rancher cluster alert group ID
//
// ```sh
//
//	$ pulumi import rancher2:index/clusterAlterGroup:ClusterAlterGroup foo &lt;CLUSTER_ALERT_GROUP_ID&gt;
//
// ```
//
// Deprecated: rancher2.ClusterAlterGroup has been deprecated in favor of rancher2.ClusterAlertGroup
type ClusterAlterGroup struct {
	pulumi.CustomResourceState

	// The cluster alert group annotations (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// The cluster id where create cluster alert group (string)
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The cluster alert group description (string)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrOutput `pulumi:"groupIntervalSeconds"`
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrOutput `pulumi:"groupWaitSeconds"`
	// The cluster alert group labels (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The cluster alert group name (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The cluster alert group recipients (list)
	Recipients ClusterAlterGroupRecipientArrayOutput `pulumi:"recipients"`
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrOutput `pulumi:"repeatIntervalSeconds"`
}

// NewClusterAlterGroup registers a new resource with the given unique name, arguments, and options.
func NewClusterAlterGroup(ctx *pulumi.Context,
	name string, args *ClusterAlterGroupArgs, opts ...pulumi.ResourceOption) (*ClusterAlterGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	var resource ClusterAlterGroup
	err := ctx.RegisterResource("rancher2:index/clusterAlterGroup:ClusterAlterGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterAlterGroup gets an existing ClusterAlterGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterAlterGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterAlterGroupState, opts ...pulumi.ResourceOption) (*ClusterAlterGroup, error) {
	var resource ClusterAlterGroup
	err := ctx.ReadResource("rancher2:index/clusterAlterGroup:ClusterAlterGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterAlterGroup resources.
type clusterAlterGroupState struct {
	// The cluster alert group annotations (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The cluster id where create cluster alert group (string)
	ClusterId *string `pulumi:"clusterId"`
	// The cluster alert group description (string)
	Description *string `pulumi:"description"`
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds *int `pulumi:"groupIntervalSeconds"`
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds *int `pulumi:"groupWaitSeconds"`
	// The cluster alert group labels (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The cluster alert group name (string)
	Name *string `pulumi:"name"`
	// The cluster alert group recipients (list)
	Recipients []ClusterAlterGroupRecipient `pulumi:"recipients"`
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds *int `pulumi:"repeatIntervalSeconds"`
}

type ClusterAlterGroupState struct {
	// The cluster alert group annotations (map)
	Annotations pulumi.MapInput
	// The cluster id where create cluster alert group (string)
	ClusterId pulumi.StringPtrInput
	// The cluster alert group description (string)
	Description pulumi.StringPtrInput
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrInput
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrInput
	// The cluster alert group labels (map)
	Labels pulumi.MapInput
	// The cluster alert group name (string)
	Name pulumi.StringPtrInput
	// The cluster alert group recipients (list)
	Recipients ClusterAlterGroupRecipientArrayInput
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrInput
}

func (ClusterAlterGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAlterGroupState)(nil)).Elem()
}

type clusterAlterGroupArgs struct {
	// The cluster alert group annotations (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The cluster id where create cluster alert group (string)
	ClusterId string `pulumi:"clusterId"`
	// The cluster alert group description (string)
	Description *string `pulumi:"description"`
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds *int `pulumi:"groupIntervalSeconds"`
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds *int `pulumi:"groupWaitSeconds"`
	// The cluster alert group labels (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The cluster alert group name (string)
	Name *string `pulumi:"name"`
	// The cluster alert group recipients (list)
	Recipients []ClusterAlterGroupRecipient `pulumi:"recipients"`
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds *int `pulumi:"repeatIntervalSeconds"`
}

// The set of arguments for constructing a ClusterAlterGroup resource.
type ClusterAlterGroupArgs struct {
	// The cluster alert group annotations (map)
	Annotations pulumi.MapInput
	// The cluster id where create cluster alert group (string)
	ClusterId pulumi.StringInput
	// The cluster alert group description (string)
	Description pulumi.StringPtrInput
	// The cluster alert group interval seconds. Default: `180` (int)
	GroupIntervalSeconds pulumi.IntPtrInput
	// The cluster alert group wait seconds. Default: `180` (int)
	GroupWaitSeconds pulumi.IntPtrInput
	// The cluster alert group labels (map)
	Labels pulumi.MapInput
	// The cluster alert group name (string)
	Name pulumi.StringPtrInput
	// The cluster alert group recipients (list)
	Recipients ClusterAlterGroupRecipientArrayInput
	// The cluster alert group wait seconds. Default: `3600` (int)
	RepeatIntervalSeconds pulumi.IntPtrInput
}

func (ClusterAlterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterAlterGroupArgs)(nil)).Elem()
}

type ClusterAlterGroupInput interface {
	pulumi.Input

	ToClusterAlterGroupOutput() ClusterAlterGroupOutput
	ToClusterAlterGroupOutputWithContext(ctx context.Context) ClusterAlterGroupOutput
}

func (*ClusterAlterGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAlterGroup)(nil)).Elem()
}

func (i *ClusterAlterGroup) ToClusterAlterGroupOutput() ClusterAlterGroupOutput {
	return i.ToClusterAlterGroupOutputWithContext(context.Background())
}

func (i *ClusterAlterGroup) ToClusterAlterGroupOutputWithContext(ctx context.Context) ClusterAlterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAlterGroupOutput)
}

// ClusterAlterGroupArrayInput is an input type that accepts ClusterAlterGroupArray and ClusterAlterGroupArrayOutput values.
// You can construct a concrete instance of `ClusterAlterGroupArrayInput` via:
//
//	ClusterAlterGroupArray{ ClusterAlterGroupArgs{...} }
type ClusterAlterGroupArrayInput interface {
	pulumi.Input

	ToClusterAlterGroupArrayOutput() ClusterAlterGroupArrayOutput
	ToClusterAlterGroupArrayOutputWithContext(context.Context) ClusterAlterGroupArrayOutput
}

type ClusterAlterGroupArray []ClusterAlterGroupInput

func (ClusterAlterGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAlterGroup)(nil)).Elem()
}

func (i ClusterAlterGroupArray) ToClusterAlterGroupArrayOutput() ClusterAlterGroupArrayOutput {
	return i.ToClusterAlterGroupArrayOutputWithContext(context.Background())
}

func (i ClusterAlterGroupArray) ToClusterAlterGroupArrayOutputWithContext(ctx context.Context) ClusterAlterGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAlterGroupArrayOutput)
}

// ClusterAlterGroupMapInput is an input type that accepts ClusterAlterGroupMap and ClusterAlterGroupMapOutput values.
// You can construct a concrete instance of `ClusterAlterGroupMapInput` via:
//
//	ClusterAlterGroupMap{ "key": ClusterAlterGroupArgs{...} }
type ClusterAlterGroupMapInput interface {
	pulumi.Input

	ToClusterAlterGroupMapOutput() ClusterAlterGroupMapOutput
	ToClusterAlterGroupMapOutputWithContext(context.Context) ClusterAlterGroupMapOutput
}

type ClusterAlterGroupMap map[string]ClusterAlterGroupInput

func (ClusterAlterGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAlterGroup)(nil)).Elem()
}

func (i ClusterAlterGroupMap) ToClusterAlterGroupMapOutput() ClusterAlterGroupMapOutput {
	return i.ToClusterAlterGroupMapOutputWithContext(context.Background())
}

func (i ClusterAlterGroupMap) ToClusterAlterGroupMapOutputWithContext(ctx context.Context) ClusterAlterGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAlterGroupMapOutput)
}

type ClusterAlterGroupOutput struct{ *pulumi.OutputState }

func (ClusterAlterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAlterGroup)(nil)).Elem()
}

func (o ClusterAlterGroupOutput) ToClusterAlterGroupOutput() ClusterAlterGroupOutput {
	return o
}

func (o ClusterAlterGroupOutput) ToClusterAlterGroupOutputWithContext(ctx context.Context) ClusterAlterGroupOutput {
	return o
}

// The cluster alert group annotations (map)
func (o ClusterAlterGroupOutput) Annotations() pulumi.MapOutput {
	return o.ApplyT(func(v *ClusterAlterGroup) pulumi.MapOutput { return v.Annotations }).(pulumi.MapOutput)
}

// The cluster id where create cluster alert group (string)
func (o ClusterAlterGroupOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAlterGroup) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The cluster alert group description (string)
func (o ClusterAlterGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAlterGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The cluster alert group interval seconds. Default: `180` (int)
func (o ClusterAlterGroupOutput) GroupIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterAlterGroup) pulumi.IntPtrOutput { return v.GroupIntervalSeconds }).(pulumi.IntPtrOutput)
}

// The cluster alert group wait seconds. Default: `180` (int)
func (o ClusterAlterGroupOutput) GroupWaitSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterAlterGroup) pulumi.IntPtrOutput { return v.GroupWaitSeconds }).(pulumi.IntPtrOutput)
}

// The cluster alert group labels (map)
func (o ClusterAlterGroupOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v *ClusterAlterGroup) pulumi.MapOutput { return v.Labels }).(pulumi.MapOutput)
}

// The cluster alert group name (string)
func (o ClusterAlterGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterAlterGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The cluster alert group recipients (list)
func (o ClusterAlterGroupOutput) Recipients() ClusterAlterGroupRecipientArrayOutput {
	return o.ApplyT(func(v *ClusterAlterGroup) ClusterAlterGroupRecipientArrayOutput { return v.Recipients }).(ClusterAlterGroupRecipientArrayOutput)
}

// The cluster alert group wait seconds. Default: `3600` (int)
func (o ClusterAlterGroupOutput) RepeatIntervalSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterAlterGroup) pulumi.IntPtrOutput { return v.RepeatIntervalSeconds }).(pulumi.IntPtrOutput)
}

type ClusterAlterGroupArrayOutput struct{ *pulumi.OutputState }

func (ClusterAlterGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterAlterGroup)(nil)).Elem()
}

func (o ClusterAlterGroupArrayOutput) ToClusterAlterGroupArrayOutput() ClusterAlterGroupArrayOutput {
	return o
}

func (o ClusterAlterGroupArrayOutput) ToClusterAlterGroupArrayOutputWithContext(ctx context.Context) ClusterAlterGroupArrayOutput {
	return o
}

func (o ClusterAlterGroupArrayOutput) Index(i pulumi.IntInput) ClusterAlterGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterAlterGroup {
		return vs[0].([]*ClusterAlterGroup)[vs[1].(int)]
	}).(ClusterAlterGroupOutput)
}

type ClusterAlterGroupMapOutput struct{ *pulumi.OutputState }

func (ClusterAlterGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterAlterGroup)(nil)).Elem()
}

func (o ClusterAlterGroupMapOutput) ToClusterAlterGroupMapOutput() ClusterAlterGroupMapOutput {
	return o
}

func (o ClusterAlterGroupMapOutput) ToClusterAlterGroupMapOutputWithContext(ctx context.Context) ClusterAlterGroupMapOutput {
	return o
}

func (o ClusterAlterGroupMapOutput) MapIndex(k pulumi.StringInput) ClusterAlterGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterAlterGroup {
		return vs[0].(map[string]*ClusterAlterGroup)[vs[1].(string)]
	}).(ClusterAlterGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAlterGroupInput)(nil)).Elem(), &ClusterAlterGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAlterGroupArrayInput)(nil)).Elem(), ClusterAlterGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterAlterGroupMapInput)(nil)).Elem(), ClusterAlterGroupMap{})
	pulumi.RegisterOutputType(ClusterAlterGroupOutput{})
	pulumi.RegisterOutputType(ClusterAlterGroupArrayOutput{})
	pulumi.RegisterOutputType(ClusterAlterGroupMapOutput{})
}
