// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rancher2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-rancher2/sdk/v7/go/rancher2/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about a Rancher v2 catalog.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-rancher2/sdk/v7/go/rancher2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rancher2.LookupCatalog(ctx, &rancher2.LookupCatalogArgs{
//				Name: "catalog",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCatalog(ctx *pulumi.Context, args *LookupCatalogArgs, opts ...pulumi.InvokeOption) (*LookupCatalogResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCatalogResult
	err := ctx.Invoke("rancher2:index/getCatalog:getCatalog", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCatalog.
type LookupCatalogArgs struct {
	// The catalog name.
	Name string `pulumi:"name"`
	// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
	Scope *string `pulumi:"scope"`
}

// A collection of values returned by getCatalog.
type LookupCatalogResult struct {
	// (Computed) Annotations for the catalog (map)
	Annotations map[string]string `pulumi:"annotations"`
	// (Computed) The branch of the catalog repo to use (string)
	Branch string `pulumi:"branch"`
	// (Computed) The cluster id of the catalog (string)
	ClusterId string `pulumi:"clusterId"`
	// (Computed) A catalog description (string)
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Computed) The kind of the catalog. Just helm by the moment (string)
	Kind string `pulumi:"kind"`
	// (Computed) Labels for the catalog (map)
	Labels map[string]string `pulumi:"labels"`
	Name   string            `pulumi:"name"`
	// (Computed/Sensitive) The password to access the catalog if needed (string)
	Password string `pulumi:"password"`
	// (Computed) The project id of the catalog (string)
	ProjectId string  `pulumi:"projectId"`
	Scope     *string `pulumi:"scope"`
	// (Computed) The url of the catalog repo (string)
	Url string `pulumi:"url"`
	// (Computed/Sensitive) The username to access the catalog if needed (string)
	Username string `pulumi:"username"`
	// (Computed) Helm version for the catalog (string)
	Version string `pulumi:"version"`
}

func LookupCatalogOutput(ctx *pulumi.Context, args LookupCatalogOutputArgs, opts ...pulumi.InvokeOption) LookupCatalogResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCatalogResultOutput, error) {
			args := v.(LookupCatalogArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCatalogResult
			secret, err := ctx.InvokePackageRaw("rancher2:index/getCatalog:getCatalog", args, &rv, "", opts...)
			if err != nil {
				return LookupCatalogResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCatalogResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCatalogResultOutput), nil
			}
			return output, nil
		}).(LookupCatalogResultOutput)
}

// A collection of arguments for invoking getCatalog.
type LookupCatalogOutputArgs struct {
	// The catalog name.
	Name pulumi.StringInput `pulumi:"name"`
	// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (LookupCatalogOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCatalogArgs)(nil)).Elem()
}

// A collection of values returned by getCatalog.
type LookupCatalogResultOutput struct{ *pulumi.OutputState }

func (LookupCatalogResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCatalogResult)(nil)).Elem()
}

func (o LookupCatalogResultOutput) ToLookupCatalogResultOutput() LookupCatalogResultOutput {
	return o
}

func (o LookupCatalogResultOutput) ToLookupCatalogResultOutputWithContext(ctx context.Context) LookupCatalogResultOutput {
	return o
}

// (Computed) Annotations for the catalog (map)
func (o LookupCatalogResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCatalogResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// (Computed) The branch of the catalog repo to use (string)
func (o LookupCatalogResultOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.Branch }).(pulumi.StringOutput)
}

// (Computed) The cluster id of the catalog (string)
func (o LookupCatalogResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// (Computed) A catalog description (string)
func (o LookupCatalogResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCatalogResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Computed) The kind of the catalog. Just helm by the moment (string)
func (o LookupCatalogResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.Kind }).(pulumi.StringOutput)
}

// (Computed) Labels for the catalog (map)
func (o LookupCatalogResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCatalogResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupCatalogResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.Name }).(pulumi.StringOutput)
}

// (Computed/Sensitive) The password to access the catalog if needed (string)
func (o LookupCatalogResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.Password }).(pulumi.StringOutput)
}

// (Computed) The project id of the catalog (string)
func (o LookupCatalogResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupCatalogResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCatalogResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// (Computed) The url of the catalog repo (string)
func (o LookupCatalogResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.Url }).(pulumi.StringOutput)
}

// (Computed/Sensitive) The username to access the catalog if needed (string)
func (o LookupCatalogResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.Username }).(pulumi.StringOutput)
}

// (Computed) Helm version for the catalog (string)
func (o LookupCatalogResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCatalogResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCatalogResultOutput{})
}
