// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package rancher2

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Rancher v2 Catalog resource. This can be used to create cluster, global and/or project catalogs for Rancher v2 environments and retrieve their information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/catalog.html.markdown.
type Catalog struct {
	pulumi.CustomResourceState

	// Annotations for the catalog (map)
	Annotations pulumi.MapOutput `pulumi:"annotations"`
	// The branch of the catalog repo to use. Default `master` (string)
	Branch pulumi.StringPtrOutput `pulumi:"branch"`
	// The cluster id of the catalog. Mandatory if `scope = cluster` (string)
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// A catalog description (string)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The kind of the catalog. Just helm by the moment (string)
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Labels for the catalog (map)
	Labels pulumi.MapOutput `pulumi:"labels"`
	// The name of the catalog (string)
	Name pulumi.StringOutput `pulumi:"name"`
	// The password to access the catalog if needed (string)
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The project id of the catalog. Mandatory if `scope = project` (string)
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
	Refresh pulumi.BoolPtrOutput `pulumi:"refresh"`
	// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The url of the catalog repo (string)
	Url pulumi.StringOutput `pulumi:"url"`
	// The username to access the catalog if needed (string)
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// Helm version for the catalog. Available options: `helmV2` and `helmV3` (string)
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewCatalog registers a new resource with the given unique name, arguments, and options.
func NewCatalog(ctx *pulumi.Context,
	name string, args *CatalogArgs, opts ...pulumi.ResourceOption) (*Catalog, error) {
	if args == nil || args.Url == nil {
		return nil, errors.New("missing required argument 'Url'")
	}
	if args == nil {
		args = &CatalogArgs{}
	}
	var resource Catalog
	err := ctx.RegisterResource("rancher2:index/catalog:Catalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCatalog gets an existing Catalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CatalogState, opts ...pulumi.ResourceOption) (*Catalog, error) {
	var resource Catalog
	err := ctx.ReadResource("rancher2:index/catalog:Catalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Catalog resources.
type catalogState struct {
	// Annotations for the catalog (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The branch of the catalog repo to use. Default `master` (string)
	Branch *string `pulumi:"branch"`
	// The cluster id of the catalog. Mandatory if `scope = cluster` (string)
	ClusterId *string `pulumi:"clusterId"`
	// A catalog description (string)
	Description *string `pulumi:"description"`
	// The kind of the catalog. Just helm by the moment (string)
	Kind *string `pulumi:"kind"`
	// Labels for the catalog (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the catalog (string)
	Name *string `pulumi:"name"`
	// The password to access the catalog if needed (string)
	Password *string `pulumi:"password"`
	// The project id of the catalog. Mandatory if `scope = project` (string)
	ProjectId *string `pulumi:"projectId"`
	// Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
	Refresh *bool `pulumi:"refresh"`
	// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
	Scope *string `pulumi:"scope"`
	// The url of the catalog repo (string)
	Url *string `pulumi:"url"`
	// The username to access the catalog if needed (string)
	Username *string `pulumi:"username"`
	// Helm version for the catalog. Available options: `helmV2` and `helmV3` (string)
	Version *string `pulumi:"version"`
}

type CatalogState struct {
	// Annotations for the catalog (map)
	Annotations pulumi.MapInput
	// The branch of the catalog repo to use. Default `master` (string)
	Branch pulumi.StringPtrInput
	// The cluster id of the catalog. Mandatory if `scope = cluster` (string)
	ClusterId pulumi.StringPtrInput
	// A catalog description (string)
	Description pulumi.StringPtrInput
	// The kind of the catalog. Just helm by the moment (string)
	Kind pulumi.StringPtrInput
	// Labels for the catalog (map)
	Labels pulumi.MapInput
	// The name of the catalog (string)
	Name pulumi.StringPtrInput
	// The password to access the catalog if needed (string)
	Password pulumi.StringPtrInput
	// The project id of the catalog. Mandatory if `scope = project` (string)
	ProjectId pulumi.StringPtrInput
	// Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
	Refresh pulumi.BoolPtrInput
	// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
	Scope pulumi.StringPtrInput
	// The url of the catalog repo (string)
	Url pulumi.StringPtrInput
	// The username to access the catalog if needed (string)
	Username pulumi.StringPtrInput
	// Helm version for the catalog. Available options: `helmV2` and `helmV3` (string)
	Version pulumi.StringPtrInput
}

func (CatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogState)(nil)).Elem()
}

type catalogArgs struct {
	// Annotations for the catalog (map)
	Annotations map[string]interface{} `pulumi:"annotations"`
	// The branch of the catalog repo to use. Default `master` (string)
	Branch *string `pulumi:"branch"`
	// The cluster id of the catalog. Mandatory if `scope = cluster` (string)
	ClusterId *string `pulumi:"clusterId"`
	// A catalog description (string)
	Description *string `pulumi:"description"`
	// The kind of the catalog. Just helm by the moment (string)
	Kind *string `pulumi:"kind"`
	// Labels for the catalog (map)
	Labels map[string]interface{} `pulumi:"labels"`
	// The name of the catalog (string)
	Name *string `pulumi:"name"`
	// The password to access the catalog if needed (string)
	Password *string `pulumi:"password"`
	// The project id of the catalog. Mandatory if `scope = project` (string)
	ProjectId *string `pulumi:"projectId"`
	// Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
	Refresh *bool `pulumi:"refresh"`
	// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
	Scope *string `pulumi:"scope"`
	// The url of the catalog repo (string)
	Url string `pulumi:"url"`
	// The username to access the catalog if needed (string)
	Username *string `pulumi:"username"`
	// Helm version for the catalog. Available options: `helmV2` and `helmV3` (string)
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Catalog resource.
type CatalogArgs struct {
	// Annotations for the catalog (map)
	Annotations pulumi.MapInput
	// The branch of the catalog repo to use. Default `master` (string)
	Branch pulumi.StringPtrInput
	// The cluster id of the catalog. Mandatory if `scope = cluster` (string)
	ClusterId pulumi.StringPtrInput
	// A catalog description (string)
	Description pulumi.StringPtrInput
	// The kind of the catalog. Just helm by the moment (string)
	Kind pulumi.StringPtrInput
	// Labels for the catalog (map)
	Labels pulumi.MapInput
	// The name of the catalog (string)
	Name pulumi.StringPtrInput
	// The password to access the catalog if needed (string)
	Password pulumi.StringPtrInput
	// The project id of the catalog. Mandatory if `scope = project` (string)
	ProjectId pulumi.StringPtrInput
	// Catalog will wait for refresh after tf creation and on every tf read. Default `false` (bool)
	Refresh pulumi.BoolPtrInput
	// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
	Scope pulumi.StringPtrInput
	// The url of the catalog repo (string)
	Url pulumi.StringInput
	// The username to access the catalog if needed (string)
	Username pulumi.StringPtrInput
	// Helm version for the catalog. Available options: `helmV2` and `helmV3` (string)
	Version pulumi.StringPtrInput
}

func (CatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*catalogArgs)(nil)).Elem()
}
