// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
    /// 
    /// ## Example Usage
    /// 
    /// **Note optional/computed arguments** If any `optional/computed` argument of this resource is defined by the user, removing it from tf file will NOT reset its value. To reset it, let its definition at tf file as empty/false object. Ex: `enable_cluster_monitoring = false`, `cloud_provider {}`, `name = ""`
    /// 
    /// ## Import
    /// 
    /// Clusters can be imported using the Rancher Cluster ID
    /// 
    /// ```sh
    ///  $ pulumi import rancher2:index/cluster:Cluster foo &amp;lt;CLUSTER_ID&amp;gt;
    /// ```
    /// </summary>
    [Rancher2ResourceType("rancher2:index/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
        /// </summary>
        [Output("agentEnvVars")]
        public Output<ImmutableArray<Outputs.ClusterAgentEnvVar>> AgentEnvVars { get; private set; } = null!;

        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("aksConfig")]
        public Output<Outputs.ClusterAksConfig?> AksConfig { get; private set; } = null!;

        /// <summary>
        /// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("aksConfigV2")]
        public Output<Outputs.ClusterAksConfigV2?> AksConfigV2 { get; private set; } = null!;

        /// <summary>
        /// Annotations for the Cluster (map)
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// TLS CA certificate for etcd service (string)
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        [Output("clusterAgentDeploymentCustomizations")]
        public Output<ImmutableArray<Outputs.ClusterClusterAgentDeploymentCustomization>> ClusterAgentDeploymentCustomizations { get; private set; } = null!;

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Output("clusterAuthEndpoint")]
        public Output<Outputs.ClusterClusterAuthEndpoint> ClusterAuthEndpoint { get; private set; } = null!;

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Output("clusterMonitoringInput")]
        public Output<Outputs.ClusterClusterMonitoringInput?> ClusterMonitoringInput { get; private set; } = null!;

        /// <summary>
        /// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        /// </summary>
        [Output("clusterRegistrationToken")]
        public Output<Outputs.ClusterClusterRegistrationToken> ClusterRegistrationToken { get; private set; } = null!;

        /// <summary>
        /// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Output("clusterTemplateAnswers")]
        public Output<Outputs.ClusterClusterTemplateAnswers> ClusterTemplateAnswers { get; private set; } = null!;

        /// <summary>
        /// Cluster template ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("clusterTemplateId")]
        public Output<string?> ClusterTemplateId { get; private set; } = null!;

        /// <summary>
        /// Cluster template questions. For Rancher v2.3.x and above (list)
        /// </summary>
        [Output("clusterTemplateQuestions")]
        public Output<ImmutableArray<Outputs.ClusterClusterTemplateQuestion>> ClusterTemplateQuestions { get; private set; } = null!;

        /// <summary>
        /// Cluster template revision ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("clusterTemplateRevisionId")]
        public Output<string?> ClusterTemplateRevisionId { get; private set; } = null!;

        /// <summary>
        /// Cluster default pod security admission configuration template name (string)
        /// </summary>
        [Output("defaultPodSecurityAdmissionConfigurationTemplateName")]
        public Output<string> DefaultPodSecurityAdmissionConfigurationTemplateName { get; private set; } = null!;

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Output("defaultPodSecurityPolicyTemplateId")]
        public Output<string> DefaultPodSecurityPolicyTemplateId { get; private set; } = null!;

        /// <summary>
        /// (Computed) Default project ID for the cluster (string)
        /// </summary>
        [Output("defaultProjectId")]
        public Output<string> DefaultProjectId { get; private set; } = null!;

        /// <summary>
        /// The description for Cluster (string)
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Desired agent image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("desiredAgentImage")]
        public Output<string> DesiredAgentImage { get; private set; } = null!;

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("desiredAuthImage")]
        public Output<string> DesiredAuthImage { get; private set; } = null!;

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("dockerRootDir")]
        public Output<string> DockerRootDir { get; private set; } = null!;

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Output("driver")]
        public Output<string> Driver { get; private set; } = null!;

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("eksConfig")]
        public Output<Outputs.ClusterEksConfig?> EksConfig { get; private set; } = null!;

        /// <summary>
        /// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x and above (list maxitems:1)
        /// </summary>
        [Output("eksConfigV2")]
        public Output<Outputs.ClusterEksConfigV2> EksConfigV2 { get; private set; } = null!;

        /// <summary>
        /// Enable built-in cluster alerting (bool)
        /// </summary>
        [Output("enableClusterAlerting")]
        public Output<bool> EnableClusterAlerting { get; private set; } = null!;

        /// <summary>
        /// Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
        /// </summary>
        [Output("enableClusterIstio")]
        public Output<bool> EnableClusterIstio { get; private set; } = null!;

        /// <summary>
        /// Enable built-in cluster monitoring (bool)
        /// </summary>
        [Output("enableClusterMonitoring")]
        public Output<bool> EnableClusterMonitoring { get; private set; } = null!;

        /// <summary>
        /// Enable project network isolation (bool)
        /// </summary>
        [Output("enableNetworkPolicy")]
        public Output<bool> EnableNetworkPolicy { get; private set; } = null!;

        /// <summary>
        /// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        [Output("fleetAgentDeploymentCustomizations")]
        public Output<ImmutableArray<Outputs.ClusterFleetAgentDeploymentCustomization>> FleetAgentDeploymentCustomizations { get; private set; } = null!;

        /// <summary>
        /// Fleet workspace name (string)
        /// </summary>
        [Output("fleetWorkspaceName")]
        public Output<string> FleetWorkspaceName { get; private set; } = null!;

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("gkeConfig")]
        public Output<Outputs.ClusterGkeConfig?> GkeConfig { get; private set; } = null!;

        /// <summary>
        /// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 and above (list maxitems:1)
        /// </summary>
        [Output("gkeConfigV2")]
        public Output<Outputs.ClusterGkeConfigV2?> GkeConfigV2 { get; private set; } = null!;

        /// <summary>
        /// (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
        /// </summary>
        [Output("istioEnabled")]
        public Output<bool> IstioEnabled { get; private set; } = null!;

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("k3sConfig")]
        public Output<Outputs.ClusterK3sConfig> K3sConfig { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `cluster_auth_endpoint` enabled, the kube_config will not be available until the cluster is `connected` (string)
        /// </summary>
        [Output("kubeConfig")]
        public Output<string> KubeConfig { get; private set; } = null!;

        /// <summary>
        /// Labels for the Cluster (map)
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the Cluster (string)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("okeConfig")]
        public Output<Outputs.ClusterOkeConfig?> OkeConfig { get; private set; } = null!;

        /// <summary>
        /// The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("rke2Config")]
        public Output<Outputs.ClusterRke2Config> Rke2Config { get; private set; } = null!;

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Output("rkeConfig")]
        public Output<Outputs.ClusterRkeConfig> RkeConfig { get; private set; } = null!;

        /// <summary>
        /// (Computed) System project ID for the cluster (string)
        /// </summary>
        [Output("systemProjectId")]
        public Output<string> SystemProjectId { get; private set; } = null!;

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Output("windowsPreferedCluster")]
        public Output<bool?> WindowsPreferedCluster { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("rancher2:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "caCert",
                    "kubeConfig",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("agentEnvVars")]
        private InputList<Inputs.ClusterAgentEnvVarArgs>? _agentEnvVars;

        /// <summary>
        /// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterAgentEnvVarArgs> AgentEnvVars
        {
            get => _agentEnvVars ?? (_agentEnvVars = new InputList<Inputs.ClusterAgentEnvVarArgs>());
            set => _agentEnvVars = value;
        }

        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfig")]
        public Input<Inputs.ClusterAksConfigArgs>? AksConfig { get; set; }

        /// <summary>
        /// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfigV2")]
        public Input<Inputs.ClusterAksConfigV2Args>? AksConfigV2 { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for the Cluster (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("clusterAgentDeploymentCustomizations")]
        private InputList<Inputs.ClusterClusterAgentDeploymentCustomizationArgs>? _clusterAgentDeploymentCustomizations;

        /// <summary>
        /// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterAgentDeploymentCustomizationArgs> ClusterAgentDeploymentCustomizations
        {
            get => _clusterAgentDeploymentCustomizations ?? (_clusterAgentDeploymentCustomizations = new InputList<Inputs.ClusterClusterAgentDeploymentCustomizationArgs>());
            set => _clusterAgentDeploymentCustomizations = value;
        }

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Input("clusterAuthEndpoint")]
        public Input<Inputs.ClusterClusterAuthEndpointArgs>? ClusterAuthEndpoint { get; set; }

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Input("clusterMonitoringInput")]
        public Input<Inputs.ClusterClusterMonitoringInputArgs>? ClusterMonitoringInput { get; set; }

        /// <summary>
        /// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Input("clusterTemplateAnswers")]
        public Input<Inputs.ClusterClusterTemplateAnswersArgs>? ClusterTemplateAnswers { get; set; }

        /// <summary>
        /// Cluster template ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateId")]
        public Input<string>? ClusterTemplateId { get; set; }

        [Input("clusterTemplateQuestions")]
        private InputList<Inputs.ClusterClusterTemplateQuestionArgs>? _clusterTemplateQuestions;

        /// <summary>
        /// Cluster template questions. For Rancher v2.3.x and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterTemplateQuestionArgs> ClusterTemplateQuestions
        {
            get => _clusterTemplateQuestions ?? (_clusterTemplateQuestions = new InputList<Inputs.ClusterClusterTemplateQuestionArgs>());
            set => _clusterTemplateQuestions = value;
        }

        /// <summary>
        /// Cluster template revision ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateRevisionId")]
        public Input<string>? ClusterTemplateRevisionId { get; set; }

        /// <summary>
        /// Cluster default pod security admission configuration template name (string)
        /// </summary>
        [Input("defaultPodSecurityAdmissionConfigurationTemplateName")]
        public Input<string>? DefaultPodSecurityAdmissionConfigurationTemplateName { get; set; }

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Input("defaultPodSecurityPolicyTemplateId")]
        public Input<string>? DefaultPodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// The description for Cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Desired agent image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAgentImage")]
        public Input<string>? DesiredAgentImage { get; set; }

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAuthImage")]
        public Input<string>? DesiredAuthImage { get; set; }

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("dockerRootDir")]
        public Input<string>? DockerRootDir { get; set; }

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("eksConfig")]
        public Input<Inputs.ClusterEksConfigArgs>? EksConfig { get; set; }

        /// <summary>
        /// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x and above (list maxitems:1)
        /// </summary>
        [Input("eksConfigV2")]
        public Input<Inputs.ClusterEksConfigV2Args>? EksConfigV2 { get; set; }

        /// <summary>
        /// Enable built-in cluster alerting (bool)
        /// </summary>
        [Input("enableClusterAlerting")]
        public Input<bool>? EnableClusterAlerting { get; set; }

        /// <summary>
        /// Enable built-in cluster monitoring (bool)
        /// </summary>
        [Input("enableClusterMonitoring")]
        public Input<bool>? EnableClusterMonitoring { get; set; }

        /// <summary>
        /// Enable project network isolation (bool)
        /// </summary>
        [Input("enableNetworkPolicy")]
        public Input<bool>? EnableNetworkPolicy { get; set; }

        [Input("fleetAgentDeploymentCustomizations")]
        private InputList<Inputs.ClusterFleetAgentDeploymentCustomizationArgs>? _fleetAgentDeploymentCustomizations;

        /// <summary>
        /// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterFleetAgentDeploymentCustomizationArgs> FleetAgentDeploymentCustomizations
        {
            get => _fleetAgentDeploymentCustomizations ?? (_fleetAgentDeploymentCustomizations = new InputList<Inputs.ClusterFleetAgentDeploymentCustomizationArgs>());
            set => _fleetAgentDeploymentCustomizations = value;
        }

        /// <summary>
        /// Fleet workspace name (string)
        /// </summary>
        [Input("fleetWorkspaceName")]
        public Input<string>? FleetWorkspaceName { get; set; }

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("gkeConfig")]
        public Input<Inputs.ClusterGkeConfigArgs>? GkeConfig { get; set; }

        /// <summary>
        /// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 and above (list maxitems:1)
        /// </summary>
        [Input("gkeConfigV2")]
        public Input<Inputs.ClusterGkeConfigV2Args>? GkeConfigV2 { get; set; }

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("k3sConfig")]
        public Input<Inputs.ClusterK3sConfigArgs>? K3sConfig { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for the Cluster (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Cluster (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("okeConfig")]
        public Input<Inputs.ClusterOkeConfigArgs>? OkeConfig { get; set; }

        /// <summary>
        /// The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("rke2Config")]
        public Input<Inputs.ClusterRke2ConfigArgs>? Rke2Config { get; set; }

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Input("rkeConfig")]
        public Input<Inputs.ClusterRkeConfigArgs>? RkeConfig { get; set; }

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Input("windowsPreferedCluster")]
        public Input<bool>? WindowsPreferedCluster { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        [Input("agentEnvVars")]
        private InputList<Inputs.ClusterAgentEnvVarGetArgs>? _agentEnvVars;

        /// <summary>
        /// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterAgentEnvVarGetArgs> AgentEnvVars
        {
            get => _agentEnvVars ?? (_agentEnvVars = new InputList<Inputs.ClusterAgentEnvVarGetArgs>());
            set => _agentEnvVars = value;
        }

        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfig")]
        public Input<Inputs.ClusterAksConfigGetArgs>? AksConfig { get; set; }

        /// <summary>
        /// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfigV2")]
        public Input<Inputs.ClusterAksConfigV2GetArgs>? AksConfigV2 { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for the Cluster (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("caCert")]
        private Input<string>? _caCert;

        /// <summary>
        /// TLS CA certificate for etcd service (string)
        /// </summary>
        public Input<string>? CaCert
        {
            get => _caCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clusterAgentDeploymentCustomizations")]
        private InputList<Inputs.ClusterClusterAgentDeploymentCustomizationGetArgs>? _clusterAgentDeploymentCustomizations;

        /// <summary>
        /// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterAgentDeploymentCustomizationGetArgs> ClusterAgentDeploymentCustomizations
        {
            get => _clusterAgentDeploymentCustomizations ?? (_clusterAgentDeploymentCustomizations = new InputList<Inputs.ClusterClusterAgentDeploymentCustomizationGetArgs>());
            set => _clusterAgentDeploymentCustomizations = value;
        }

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Input("clusterAuthEndpoint")]
        public Input<Inputs.ClusterClusterAuthEndpointGetArgs>? ClusterAuthEndpoint { get; set; }

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Input("clusterMonitoringInput")]
        public Input<Inputs.ClusterClusterMonitoringInputGetArgs>? ClusterMonitoringInput { get; set; }

        /// <summary>
        /// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        /// </summary>
        [Input("clusterRegistrationToken")]
        public Input<Inputs.ClusterClusterRegistrationTokenGetArgs>? ClusterRegistrationToken { get; set; }

        /// <summary>
        /// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Input("clusterTemplateAnswers")]
        public Input<Inputs.ClusterClusterTemplateAnswersGetArgs>? ClusterTemplateAnswers { get; set; }

        /// <summary>
        /// Cluster template ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateId")]
        public Input<string>? ClusterTemplateId { get; set; }

        [Input("clusterTemplateQuestions")]
        private InputList<Inputs.ClusterClusterTemplateQuestionGetArgs>? _clusterTemplateQuestions;

        /// <summary>
        /// Cluster template questions. For Rancher v2.3.x and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterTemplateQuestionGetArgs> ClusterTemplateQuestions
        {
            get => _clusterTemplateQuestions ?? (_clusterTemplateQuestions = new InputList<Inputs.ClusterClusterTemplateQuestionGetArgs>());
            set => _clusterTemplateQuestions = value;
        }

        /// <summary>
        /// Cluster template revision ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateRevisionId")]
        public Input<string>? ClusterTemplateRevisionId { get; set; }

        /// <summary>
        /// Cluster default pod security admission configuration template name (string)
        /// </summary>
        [Input("defaultPodSecurityAdmissionConfigurationTemplateName")]
        public Input<string>? DefaultPodSecurityAdmissionConfigurationTemplateName { get; set; }

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Input("defaultPodSecurityPolicyTemplateId")]
        public Input<string>? DefaultPodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// (Computed) Default project ID for the cluster (string)
        /// </summary>
        [Input("defaultProjectId")]
        public Input<string>? DefaultProjectId { get; set; }

        /// <summary>
        /// The description for Cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Desired agent image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAgentImage")]
        public Input<string>? DesiredAgentImage { get; set; }

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAuthImage")]
        public Input<string>? DesiredAuthImage { get; set; }

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("dockerRootDir")]
        public Input<string>? DockerRootDir { get; set; }

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("eksConfig")]
        public Input<Inputs.ClusterEksConfigGetArgs>? EksConfig { get; set; }

        /// <summary>
        /// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x and above (list maxitems:1)
        /// </summary>
        [Input("eksConfigV2")]
        public Input<Inputs.ClusterEksConfigV2GetArgs>? EksConfigV2 { get; set; }

        /// <summary>
        /// Enable built-in cluster alerting (bool)
        /// </summary>
        [Input("enableClusterAlerting")]
        public Input<bool>? EnableClusterAlerting { get; set; }

        /// <summary>
        /// Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
        /// </summary>
        [Input("enableClusterIstio")]
        public Input<bool>? EnableClusterIstio { get; set; }

        /// <summary>
        /// Enable built-in cluster monitoring (bool)
        /// </summary>
        [Input("enableClusterMonitoring")]
        public Input<bool>? EnableClusterMonitoring { get; set; }

        /// <summary>
        /// Enable project network isolation (bool)
        /// </summary>
        [Input("enableNetworkPolicy")]
        public Input<bool>? EnableNetworkPolicy { get; set; }

        [Input("fleetAgentDeploymentCustomizations")]
        private InputList<Inputs.ClusterFleetAgentDeploymentCustomizationGetArgs>? _fleetAgentDeploymentCustomizations;

        /// <summary>
        /// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterFleetAgentDeploymentCustomizationGetArgs> FleetAgentDeploymentCustomizations
        {
            get => _fleetAgentDeploymentCustomizations ?? (_fleetAgentDeploymentCustomizations = new InputList<Inputs.ClusterFleetAgentDeploymentCustomizationGetArgs>());
            set => _fleetAgentDeploymentCustomizations = value;
        }

        /// <summary>
        /// Fleet workspace name (string)
        /// </summary>
        [Input("fleetWorkspaceName")]
        public Input<string>? FleetWorkspaceName { get; set; }

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("gkeConfig")]
        public Input<Inputs.ClusterGkeConfigGetArgs>? GkeConfig { get; set; }

        /// <summary>
        /// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 and above (list maxitems:1)
        /// </summary>
        [Input("gkeConfigV2")]
        public Input<Inputs.ClusterGkeConfigV2GetArgs>? GkeConfigV2 { get; set; }

        /// <summary>
        /// (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
        /// </summary>
        [Input("istioEnabled")]
        public Input<bool>? IstioEnabled { get; set; }

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("k3sConfig")]
        public Input<Inputs.ClusterK3sConfigGetArgs>? K3sConfig { get; set; }

        [Input("kubeConfig")]
        private Input<string>? _kubeConfig;

        /// <summary>
        /// (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `cluster_auth_endpoint` enabled, the kube_config will not be available until the cluster is `connected` (string)
        /// </summary>
        public Input<string>? KubeConfig
        {
            get => _kubeConfig;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kubeConfig = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for the Cluster (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Cluster (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("okeConfig")]
        public Input<Inputs.ClusterOkeConfigGetArgs>? OkeConfig { get; set; }

        /// <summary>
        /// The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("rke2Config")]
        public Input<Inputs.ClusterRke2ConfigGetArgs>? Rke2Config { get; set; }

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Input("rkeConfig")]
        public Input<Inputs.ClusterRkeConfigGetArgs>? RkeConfig { get; set; }

        /// <summary>
        /// (Computed) System project ID for the cluster (string)
        /// </summary>
        [Input("systemProjectId")]
        public Input<string>? SystemProjectId { get; set; }

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Input("windowsPreferedCluster")]
        public Input<bool>? WindowsPreferedCluster { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
