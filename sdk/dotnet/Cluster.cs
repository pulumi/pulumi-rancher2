// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/cluster.html.markdown.
    /// </summary>
    public partial class Cluster : Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("aksConfig")]
        public Output<Outputs.ClusterAksConfig?> AksConfig { get; private set; } = null!;

        /// <summary>
        /// Annotations for cluster registration token object (map)
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Output("clusterAuthEndpoint")]
        public Output<Outputs.ClusterClusterAuthEndpoint> ClusterAuthEndpoint { get; private set; } = null!;

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Output("clusterMonitoringInput")]
        public Output<Outputs.ClusterClusterMonitoringInput> ClusterMonitoringInput { get; private set; } = null!;

        /// <summary>
        /// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        /// </summary>
        [Output("clusterRegistrationToken")]
        public Output<Outputs.ClusterClusterRegistrationToken> ClusterRegistrationToken { get; private set; } = null!;

        /// <summary>
        /// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Output("clusterTemplateAnswers")]
        public Output<Outputs.ClusterClusterTemplateAnswers> ClusterTemplateAnswers { get; private set; } = null!;

        /// <summary>
        /// Cluster template ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("clusterTemplateId")]
        public Output<string?> ClusterTemplateId { get; private set; } = null!;

        /// <summary>
        /// Cluster template questions. Just for Rancher v2.3.x and above (list)
        /// </summary>
        [Output("clusterTemplateQuestions")]
        public Output<ImmutableArray<Outputs.ClusterClusterTemplateQuestions>> ClusterTemplateQuestions { get; private set; } = null!;

        /// <summary>
        /// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("clusterTemplateRevisionId")]
        public Output<string?> ClusterTemplateRevisionId { get; private set; } = null!;

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Output("defaultPodSecurityPolicyTemplateId")]
        public Output<string> DefaultPodSecurityPolicyTemplateId { get; private set; } = null!;

        /// <summary>
        /// (Computed) Default project ID for the cluster (string)
        /// </summary>
        [Output("defaultProjectId")]
        public Output<string> DefaultProjectId { get; private set; } = null!;

        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Desired agent image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("desiredAgentImage")]
        public Output<string> DesiredAgentImage { get; private set; } = null!;

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("desiredAuthImage")]
        public Output<string> DesiredAuthImage { get; private set; } = null!;

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("dockerRootDir")]
        public Output<string> DockerRootDir { get; private set; } = null!;

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Output("driver")]
        public Output<string> Driver { get; private set; } = null!;

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("eksConfig")]
        public Output<Outputs.ClusterEksConfig?> EksConfig { get; private set; } = null!;

        /// <summary>
        /// Enable built-in cluster alerting. Default `false` (bool)
        /// </summary>
        [Output("enableClusterAlerting")]
        public Output<bool?> EnableClusterAlerting { get; private set; } = null!;

        /// <summary>
        /// Enable built-in cluster istio. Default `false`. Just for Rancher v2.3.x and above (bool)
        /// </summary>
        [Output("enableClusterIstio")]
        public Output<bool?> EnableClusterIstio { get; private set; } = null!;

        /// <summary>
        /// Enable built-in cluster monitoring. Default `false` (bool)
        /// </summary>
        [Output("enableClusterMonitoring")]
        public Output<bool?> EnableClusterMonitoring { get; private set; } = null!;

        /// <summary>
        /// Enable project network isolation. Default `false` (bool)
        /// * `scheduled_cluster_scan`- (Optional) Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
        /// </summary>
        [Output("enableNetworkPolicy")]
        public Output<bool?> EnableNetworkPolicy { get; private set; } = null!;

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("gkeConfig")]
        public Output<Outputs.ClusterGkeConfig?> GkeConfig { get; private set; } = null!;

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("k3sConfig")]
        public Output<Outputs.ClusterK3sConfig> K3sConfig { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) Kube Config generated for the cluster (string)
        /// </summary>
        [Output("kubeConfig")]
        public Output<string> KubeConfig { get; private set; } = null!;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Output("rkeConfig")]
        public Output<Outputs.ClusterRkeConfig> RkeConfig { get; private set; } = null!;

        /// <summary>
        /// Cluster scheduled scan
        /// </summary>
        [Output("scheduledClusterScan")]
        public Output<Outputs.ClusterScheduledClusterScan?> ScheduledClusterScan { get; private set; } = null!;

        /// <summary>
        /// (Computed) System project ID for the cluster (string)
        /// </summary>
        [Output("systemProjectId")]
        public Output<string> SystemProjectId { get; private set; } = null!;

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Output("windowsPreferedCluster")]
        public Output<bool?> WindowsPreferedCluster { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("rancher2:index/cluster:Cluster", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfig")]
        public Input<Inputs.ClusterAksConfigArgs>? AksConfig { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Input("clusterAuthEndpoint")]
        public Input<Inputs.ClusterClusterAuthEndpointArgs>? ClusterAuthEndpoint { get; set; }

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Input("clusterMonitoringInput")]
        public Input<Inputs.ClusterClusterMonitoringInputArgs>? ClusterMonitoringInput { get; set; }

        /// <summary>
        /// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Input("clusterTemplateAnswers")]
        public Input<Inputs.ClusterClusterTemplateAnswersArgs>? ClusterTemplateAnswers { get; set; }

        /// <summary>
        /// Cluster template ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateId")]
        public Input<string>? ClusterTemplateId { get; set; }

        [Input("clusterTemplateQuestions")]
        private InputList<Inputs.ClusterClusterTemplateQuestionsArgs>? _clusterTemplateQuestions;

        /// <summary>
        /// Cluster template questions. Just for Rancher v2.3.x and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterTemplateQuestionsArgs> ClusterTemplateQuestions
        {
            get => _clusterTemplateQuestions ?? (_clusterTemplateQuestions = new InputList<Inputs.ClusterClusterTemplateQuestionsArgs>());
            set => _clusterTemplateQuestions = value;
        }

        /// <summary>
        /// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateRevisionId")]
        public Input<string>? ClusterTemplateRevisionId { get; set; }

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Input("defaultPodSecurityPolicyTemplateId")]
        public Input<string>? DefaultPodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Desired agent image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAgentImage")]
        public Input<string>? DesiredAgentImage { get; set; }

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAuthImage")]
        public Input<string>? DesiredAuthImage { get; set; }

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("dockerRootDir")]
        public Input<string>? DockerRootDir { get; set; }

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("eksConfig")]
        public Input<Inputs.ClusterEksConfigArgs>? EksConfig { get; set; }

        /// <summary>
        /// Enable built-in cluster alerting. Default `false` (bool)
        /// </summary>
        [Input("enableClusterAlerting")]
        public Input<bool>? EnableClusterAlerting { get; set; }

        /// <summary>
        /// Enable built-in cluster istio. Default `false`. Just for Rancher v2.3.x and above (bool)
        /// </summary>
        [Input("enableClusterIstio")]
        public Input<bool>? EnableClusterIstio { get; set; }

        /// <summary>
        /// Enable built-in cluster monitoring. Default `false` (bool)
        /// </summary>
        [Input("enableClusterMonitoring")]
        public Input<bool>? EnableClusterMonitoring { get; set; }

        /// <summary>
        /// Enable project network isolation. Default `false` (bool)
        /// * `scheduled_cluster_scan`- (Optional) Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
        /// </summary>
        [Input("enableNetworkPolicy")]
        public Input<bool>? EnableNetworkPolicy { get; set; }

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("gkeConfig")]
        public Input<Inputs.ClusterGkeConfigArgs>? GkeConfig { get; set; }

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("k3sConfig")]
        public Input<Inputs.ClusterK3sConfigArgs>? K3sConfig { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Input("rkeConfig")]
        public Input<Inputs.ClusterRkeConfigArgs>? RkeConfig { get; set; }

        /// <summary>
        /// Cluster scheduled scan
        /// </summary>
        [Input("scheduledClusterScan")]
        public Input<Inputs.ClusterScheduledClusterScanArgs>? ScheduledClusterScan { get; set; }

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Input("windowsPreferedCluster")]
        public Input<bool>? WindowsPreferedCluster { get; set; }

        public ClusterArgs()
        {
        }
    }

    public sealed class ClusterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfig")]
        public Input<Inputs.ClusterAksConfigGetArgs>? AksConfig { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Input("clusterAuthEndpoint")]
        public Input<Inputs.ClusterClusterAuthEndpointGetArgs>? ClusterAuthEndpoint { get; set; }

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Input("clusterMonitoringInput")]
        public Input<Inputs.ClusterClusterMonitoringInputGetArgs>? ClusterMonitoringInput { get; set; }

        /// <summary>
        /// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        /// </summary>
        [Input("clusterRegistrationToken")]
        public Input<Inputs.ClusterClusterRegistrationTokenGetArgs>? ClusterRegistrationToken { get; set; }

        /// <summary>
        /// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Input("clusterTemplateAnswers")]
        public Input<Inputs.ClusterClusterTemplateAnswersGetArgs>? ClusterTemplateAnswers { get; set; }

        /// <summary>
        /// Cluster template ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateId")]
        public Input<string>? ClusterTemplateId { get; set; }

        [Input("clusterTemplateQuestions")]
        private InputList<Inputs.ClusterClusterTemplateQuestionsGetArgs>? _clusterTemplateQuestions;

        /// <summary>
        /// Cluster template questions. Just for Rancher v2.3.x and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterTemplateQuestionsGetArgs> ClusterTemplateQuestions
        {
            get => _clusterTemplateQuestions ?? (_clusterTemplateQuestions = new InputList<Inputs.ClusterClusterTemplateQuestionsGetArgs>());
            set => _clusterTemplateQuestions = value;
        }

        /// <summary>
        /// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateRevisionId")]
        public Input<string>? ClusterTemplateRevisionId { get; set; }

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Input("defaultPodSecurityPolicyTemplateId")]
        public Input<string>? DefaultPodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// (Computed) Default project ID for the cluster (string)
        /// </summary>
        [Input("defaultProjectId")]
        public Input<string>? DefaultProjectId { get; set; }

        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Desired agent image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAgentImage")]
        public Input<string>? DesiredAgentImage { get; set; }

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAuthImage")]
        public Input<string>? DesiredAuthImage { get; set; }

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("dockerRootDir")]
        public Input<string>? DockerRootDir { get; set; }

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `gke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("eksConfig")]
        public Input<Inputs.ClusterEksConfigGetArgs>? EksConfig { get; set; }

        /// <summary>
        /// Enable built-in cluster alerting. Default `false` (bool)
        /// </summary>
        [Input("enableClusterAlerting")]
        public Input<bool>? EnableClusterAlerting { get; set; }

        /// <summary>
        /// Enable built-in cluster istio. Default `false`. Just for Rancher v2.3.x and above (bool)
        /// </summary>
        [Input("enableClusterIstio")]
        public Input<bool>? EnableClusterIstio { get; set; }

        /// <summary>
        /// Enable built-in cluster monitoring. Default `false` (bool)
        /// </summary>
        [Input("enableClusterMonitoring")]
        public Input<bool>? EnableClusterMonitoring { get; set; }

        /// <summary>
        /// Enable project network isolation. Default `false` (bool)
        /// * `scheduled_cluster_scan`- (Optional) Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
        /// </summary>
        [Input("enableNetworkPolicy")]
        public Input<bool>? EnableNetworkPolicy { get; set; }

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("gkeConfig")]
        public Input<Inputs.ClusterGkeConfigGetArgs>? GkeConfig { get; set; }

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("k3sConfig")]
        public Input<Inputs.ClusterK3sConfigGetArgs>? K3sConfig { get; set; }

        /// <summary>
        /// (Computed/Sensitive) Kube Config generated for the cluster (string)
        /// </summary>
        [Input("kubeConfig")]
        public Input<string>? KubeConfig { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Input("rkeConfig")]
        public Input<Inputs.ClusterRkeConfigGetArgs>? RkeConfig { get; set; }

        /// <summary>
        /// Cluster scheduled scan
        /// </summary>
        [Input("scheduledClusterScan")]
        public Input<Inputs.ClusterScheduledClusterScanGetArgs>? ScheduledClusterScan { get; set; }

        /// <summary>
        /// (Computed) System project ID for the cluster (string)
        /// </summary>
        [Input("systemProjectId")]
        public Input<string>? SystemProjectId { get; set; }

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Input("windowsPreferedCluster")]
        public Input<bool>? WindowsPreferedCluster { get; set; }

        public ClusterState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ClusterAksConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The secret of an Azure Active Directory server application (string)
        /// </summary>
        [Input("aadServerAppSecret")]
        public Input<string>? AadServerAppSecret { get; set; }

        /// <summary>
        /// The ID of an Azure Active Directory tenant (string)
        /// </summary>
        [Input("aadTenantId")]
        public Input<string>? AadTenantId { get; set; }

        /// <summary>
        /// The ID of an Azure Active Directory client application of type \"Native\". This application is for user login via kubectl (string)
        /// </summary>
        [Input("addClientAppId")]
        public Input<string>? AddClientAppId { get; set; }

        /// <summary>
        /// The ID of an Azure Active Directory server application of type \"Web app/API\". This application represents the managed cluster's apiserver (Server application) (string)
        /// </summary>
        [Input("addServerAppId")]
        public Input<string>? AddServerAppId { get; set; }

        /// <summary>
        /// The administrator username to use for Linux hosts. Default `azureuser` (string)
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// DNS prefix to be used to create the FQDN for the agent pool (string)
        /// </summary>
        [Input("agentDnsPrefix", required: true)]
        public Input<string> AgentDnsPrefix { get; set; } = null!;

        /// <summary>
        /// GB size to be used to specify the disk for every machine in the agent pool. If you specify 0, it will apply the default according to the \"agent vm size\" specified. Default `0` (int)
        /// </summary>
        [Input("agentOsDiskSize")]
        public Input<int>? AgentOsDiskSize { get; set; }

        /// <summary>
        /// Name for the agent pool, upto 12 alphanumeric characters. Default `agentpool0` (string)
        /// </summary>
        [Input("agentPoolName")]
        public Input<string>? AgentPoolName { get; set; }

        /// <summary>
        /// Storage profile specifies what kind of storage used on machine in the agent pool. Chooses from [ManagedDisks StorageAccount]. Default `ManagedDisks` (string)
        /// </summary>
        [Input("agentStorageProfile")]
        public Input<string>? AgentStorageProfile { get; set; }

        /// <summary>
        /// Size of machine in the agent pool. Default `Standard_D1_v2` (string)
        /// </summary>
        [Input("agentVmSize")]
        public Input<string>? AgentVmSize { get; set; }

        /// <summary>
        /// Different authentication API url to use. Default `https://login.microsoftonline.com/` (string)
        /// </summary>
        [Input("authBaseUrl")]
        public Input<string>? AuthBaseUrl { get; set; }

        /// <summary>
        /// Different resource management API url to use. Default `https://management.azure.com/` (string)
        /// </summary>
        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        /// <summary>
        /// Azure client ID to use (string)
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        /// <summary>
        /// Azure client secret associated with the \"client id\" (string)
        /// </summary>
        [Input("clientSecret", required: true)]
        public Input<string> ClientSecret { get; set; } = null!;

        /// <summary>
        /// Number of machines (VMs) in the agent pool. Allowed values must be in the range of 1 to 100 (inclusive). Default `1` (int)
        /// </summary>
        [Input("count")]
        public Input<int>? Count { get; set; }

        /// <summary>
        /// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes Service address range specified in \"service cidr\". Default `10.0.0.10` (string)
        /// </summary>
        [Input("dnsServiceIp")]
        public Input<string>? DnsServiceIp { get; set; }

        /// <summary>
        /// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes Service address range specified in \"service cidr\". Default `172.17.0.1/16` (string)
        /// </summary>
        [Input("dockerBridgeCidr")]
        public Input<string>? DockerBridgeCidr { get; set; }

        /// <summary>
        /// Enable the Kubernetes ingress with automatic public DNS name creation. Default `false` (bool)
        /// </summary>
        [Input("enableHttpApplicationRouting")]
        public Input<bool>? EnableHttpApplicationRouting { get; set; }

        /// <summary>
        /// Turn on Azure Log Analytics monitoring. Uses the Log Analytics \"Default\" workspace if it exists, else creates one. if using an existing workspace, specifies \"log analytics workspace resource id\". Default `true` (bool)
        /// </summary>
        [Input("enableMonitoring")]
        public Input<bool>? EnableMonitoring { get; set; }

        /// <summary>
        /// The Kubernetes master version (string)
        /// </summary>
        [Input("kubernetesVersion", required: true)]
        public Input<string> KubernetesVersion { get; set; } = null!;

        /// <summary>
        /// Azure Kubernetes cluster location. Default `eastus` (string)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses '{resource group}-{subscription id}-{location code}' (string)
        /// </summary>
        [Input("logAnalyticsWorkspace")]
        public Input<string>? LogAnalyticsWorkspace { get; set; }

        /// <summary>
        /// The resource group of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses the 'Cluster' resource group (string)
        /// </summary>
        [Input("logAnalyticsWorkspaceResourceGroup")]
        public Input<string>? LogAnalyticsWorkspaceResourceGroup { get; set; }

        /// <summary>
        /// DNS prefix to use the Kubernetes cluster control pane (string)
        /// </summary>
        [Input("masterDnsPrefix", required: true)]
        public Input<string> MasterDnsPrefix { get; set; } = null!;

        /// <summary>
        /// Maximum number of pods that can run on a node. Default `110` (int)
        /// </summary>
        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        /// <summary>
        /// Network plugin used for building Kubernetes network. Chooses from `azure` or `kubenet`. Default `azure` (string)
        /// </summary>
        [Input("networkPlugin")]
        public Input<string>? NetworkPlugin { get; set; }

        /// <summary>
        /// Network policy used for building Kubernetes network. Chooses from `calico` (string)
        /// </summary>
        [Input("networkPolicy")]
        public Input<string>? NetworkPolicy { get; set; }

        /// <summary>
        /// A CIDR notation IP range from which to assign Kubernetes Pod IPs when \"network plugin\" is specified in \"kubenet\". Default `172.244.0.0/16` (string)
        /// </summary>
        [Input("podCidr")]
        public Input<string>? PodCidr { get; set; }

        /// <summary>
        /// The name of the Cluster resource group (string)
        /// </summary>
        [Input("resourceGroup", required: true)]
        public Input<string> ResourceGroup { get; set; } = null!;

        /// <summary>
        /// A CIDR notation IP range from which to assign Kubernetes Service cluster IPs. It must not overlap with any Subnet IP ranges. Default `10.0.0.0/16` (string)
        /// </summary>
        [Input("serviceCidr")]
        public Input<string>? ServiceCidr { get; set; }

        /// <summary>
        /// Contents of the SSH public key used to authenticate with Linux hosts (string)
        /// </summary>
        [Input("sshPublicKeyContents", required: true)]
        public Input<string> SshPublicKeyContents { get; set; } = null!;

        /// <summary>
        /// The name of an existing Azure Virtual Subnet. Composite of agent virtual network subnet ID (string)
        /// </summary>
        [Input("subnet", required: true)]
        public Input<string> Subnet { get; set; } = null!;

        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        [Input("tag")]
        private InputMap<object>? _tag;

        /// <summary>
        /// Tags for Kubernetes cluster. For example, foo=bar (map)
        /// </summary>
        public InputMap<object> Tag
        {
            get => _tag ?? (_tag = new InputMap<object>());
            set => _tag = value;
        }

        /// <summary>
        /// Azure tenant ID to use (string)
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        /// </summary>
        [Input("virtualNetwork", required: true)]
        public Input<string> VirtualNetwork { get; set; } = null!;

        /// <summary>
        /// The resource group of an existing Azure Virtual Network. Composite of agent virtual network subnet ID (string)
        /// </summary>
        [Input("virtualNetworkResourceGroup", required: true)]
        public Input<string> VirtualNetworkResourceGroup { get; set; } = null!;

        public ClusterAksConfigArgs()
        {
        }
    }

    public sealed class ClusterAksConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The secret of an Azure Active Directory server application (string)
        /// </summary>
        [Input("aadServerAppSecret")]
        public Input<string>? AadServerAppSecret { get; set; }

        /// <summary>
        /// The ID of an Azure Active Directory tenant (string)
        /// </summary>
        [Input("aadTenantId")]
        public Input<string>? AadTenantId { get; set; }

        /// <summary>
        /// The ID of an Azure Active Directory client application of type \"Native\". This application is for user login via kubectl (string)
        /// </summary>
        [Input("addClientAppId")]
        public Input<string>? AddClientAppId { get; set; }

        /// <summary>
        /// The ID of an Azure Active Directory server application of type \"Web app/API\". This application represents the managed cluster's apiserver (Server application) (string)
        /// </summary>
        [Input("addServerAppId")]
        public Input<string>? AddServerAppId { get; set; }

        /// <summary>
        /// The administrator username to use for Linux hosts. Default `azureuser` (string)
        /// </summary>
        [Input("adminUsername")]
        public Input<string>? AdminUsername { get; set; }

        /// <summary>
        /// DNS prefix to be used to create the FQDN for the agent pool (string)
        /// </summary>
        [Input("agentDnsPrefix", required: true)]
        public Input<string> AgentDnsPrefix { get; set; } = null!;

        /// <summary>
        /// GB size to be used to specify the disk for every machine in the agent pool. If you specify 0, it will apply the default according to the \"agent vm size\" specified. Default `0` (int)
        /// </summary>
        [Input("agentOsDiskSize")]
        public Input<int>? AgentOsDiskSize { get; set; }

        /// <summary>
        /// Name for the agent pool, upto 12 alphanumeric characters. Default `agentpool0` (string)
        /// </summary>
        [Input("agentPoolName")]
        public Input<string>? AgentPoolName { get; set; }

        /// <summary>
        /// Storage profile specifies what kind of storage used on machine in the agent pool. Chooses from [ManagedDisks StorageAccount]. Default `ManagedDisks` (string)
        /// </summary>
        [Input("agentStorageProfile")]
        public Input<string>? AgentStorageProfile { get; set; }

        /// <summary>
        /// Size of machine in the agent pool. Default `Standard_D1_v2` (string)
        /// </summary>
        [Input("agentVmSize")]
        public Input<string>? AgentVmSize { get; set; }

        /// <summary>
        /// Different authentication API url to use. Default `https://login.microsoftonline.com/` (string)
        /// </summary>
        [Input("authBaseUrl")]
        public Input<string>? AuthBaseUrl { get; set; }

        /// <summary>
        /// Different resource management API url to use. Default `https://management.azure.com/` (string)
        /// </summary>
        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        /// <summary>
        /// Azure client ID to use (string)
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        /// <summary>
        /// Azure client secret associated with the \"client id\" (string)
        /// </summary>
        [Input("clientSecret", required: true)]
        public Input<string> ClientSecret { get; set; } = null!;

        /// <summary>
        /// Number of machines (VMs) in the agent pool. Allowed values must be in the range of 1 to 100 (inclusive). Default `1` (int)
        /// </summary>
        [Input("count")]
        public Input<int>? Count { get; set; }

        /// <summary>
        /// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes Service address range specified in \"service cidr\". Default `10.0.0.10` (string)
        /// </summary>
        [Input("dnsServiceIp")]
        public Input<string>? DnsServiceIp { get; set; }

        /// <summary>
        /// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes Service address range specified in \"service cidr\". Default `172.17.0.1/16` (string)
        /// </summary>
        [Input("dockerBridgeCidr")]
        public Input<string>? DockerBridgeCidr { get; set; }

        /// <summary>
        /// Enable the Kubernetes ingress with automatic public DNS name creation. Default `false` (bool)
        /// </summary>
        [Input("enableHttpApplicationRouting")]
        public Input<bool>? EnableHttpApplicationRouting { get; set; }

        /// <summary>
        /// Turn on Azure Log Analytics monitoring. Uses the Log Analytics \"Default\" workspace if it exists, else creates one. if using an existing workspace, specifies \"log analytics workspace resource id\". Default `true` (bool)
        /// </summary>
        [Input("enableMonitoring")]
        public Input<bool>? EnableMonitoring { get; set; }

        /// <summary>
        /// The Kubernetes master version (string)
        /// </summary>
        [Input("kubernetesVersion", required: true)]
        public Input<string> KubernetesVersion { get; set; } = null!;

        /// <summary>
        /// Azure Kubernetes cluster location. Default `eastus` (string)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses '{resource group}-{subscription id}-{location code}' (string)
        /// </summary>
        [Input("logAnalyticsWorkspace")]
        public Input<string>? LogAnalyticsWorkspace { get; set; }

        /// <summary>
        /// The resource group of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses the 'Cluster' resource group (string)
        /// </summary>
        [Input("logAnalyticsWorkspaceResourceGroup")]
        public Input<string>? LogAnalyticsWorkspaceResourceGroup { get; set; }

        /// <summary>
        /// DNS prefix to use the Kubernetes cluster control pane (string)
        /// </summary>
        [Input("masterDnsPrefix", required: true)]
        public Input<string> MasterDnsPrefix { get; set; } = null!;

        /// <summary>
        /// Maximum number of pods that can run on a node. Default `110` (int)
        /// </summary>
        [Input("maxPods")]
        public Input<int>? MaxPods { get; set; }

        /// <summary>
        /// Network plugin used for building Kubernetes network. Chooses from `azure` or `kubenet`. Default `azure` (string)
        /// </summary>
        [Input("networkPlugin")]
        public Input<string>? NetworkPlugin { get; set; }

        /// <summary>
        /// Network policy used for building Kubernetes network. Chooses from `calico` (string)
        /// </summary>
        [Input("networkPolicy")]
        public Input<string>? NetworkPolicy { get; set; }

        /// <summary>
        /// A CIDR notation IP range from which to assign Kubernetes Pod IPs when \"network plugin\" is specified in \"kubenet\". Default `172.244.0.0/16` (string)
        /// </summary>
        [Input("podCidr")]
        public Input<string>? PodCidr { get; set; }

        /// <summary>
        /// The name of the Cluster resource group (string)
        /// </summary>
        [Input("resourceGroup", required: true)]
        public Input<string> ResourceGroup { get; set; } = null!;

        /// <summary>
        /// A CIDR notation IP range from which to assign Kubernetes Service cluster IPs. It must not overlap with any Subnet IP ranges. Default `10.0.0.0/16` (string)
        /// </summary>
        [Input("serviceCidr")]
        public Input<string>? ServiceCidr { get; set; }

        /// <summary>
        /// Contents of the SSH public key used to authenticate with Linux hosts (string)
        /// </summary>
        [Input("sshPublicKeyContents", required: true)]
        public Input<string> SshPublicKeyContents { get; set; } = null!;

        /// <summary>
        /// The name of an existing Azure Virtual Subnet. Composite of agent virtual network subnet ID (string)
        /// </summary>
        [Input("subnet", required: true)]
        public Input<string> Subnet { get; set; } = null!;

        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        [Input("tag")]
        private InputMap<object>? _tag;

        /// <summary>
        /// Tags for Kubernetes cluster. For example, foo=bar (map)
        /// </summary>
        public InputMap<object> Tag
        {
            get => _tag ?? (_tag = new InputMap<object>());
            set => _tag = value;
        }

        /// <summary>
        /// Azure tenant ID to use (string)
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        /// <summary>
        /// The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        /// </summary>
        [Input("virtualNetwork", required: true)]
        public Input<string> VirtualNetwork { get; set; } = null!;

        /// <summary>
        /// The resource group of an existing Azure Virtual Network. Composite of agent virtual network subnet ID (string)
        /// </summary>
        [Input("virtualNetworkResourceGroup", required: true)]
        public Input<string> VirtualNetworkResourceGroup { get; set; } = null!;

        public ClusterAksConfigGetArgs()
        {
        }
    }

    public sealed class ClusterClusterAuthEndpointArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// CA certs for the authorized cluster endpoint (string)
        /// </summary>
        [Input("caCerts")]
        public Input<string>? CaCerts { get; set; }

        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// FQDN for the authorized cluster endpoint (string)
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        public ClusterClusterAuthEndpointArgs()
        {
        }
    }

    public sealed class ClusterClusterAuthEndpointGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// CA certs for the authorized cluster endpoint (string)
        /// </summary>
        [Input("caCerts")]
        public Input<string>? CaCerts { get; set; }

        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// FQDN for the authorized cluster endpoint (string)
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        public ClusterClusterAuthEndpointGetArgs()
        {
        }
    }

    public sealed class ClusterClusterMonitoringInputArgs : Pulumi.ResourceArgs
    {
        [Input("answers")]
        private InputMap<object>? _answers;

        /// <summary>
        /// Key/value answers for monitor input (map)
        /// </summary>
        public InputMap<object> Answers
        {
            get => _answers ?? (_answers = new InputMap<object>());
            set => _answers = value;
        }

        /// <summary>
        /// rancher-monitoring chart version (string)
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ClusterClusterMonitoringInputArgs()
        {
        }
    }

    public sealed class ClusterClusterMonitoringInputGetArgs : Pulumi.ResourceArgs
    {
        [Input("answers")]
        private InputMap<object>? _answers;

        /// <summary>
        /// Key/value answers for monitor input (map)
        /// </summary>
        public InputMap<object> Answers
        {
            get => _answers ?? (_answers = new InputMap<object>());
            set => _answers = value;
        }

        /// <summary>
        /// rancher-monitoring chart version (string)
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ClusterClusterMonitoringInputGetArgs()
        {
        }
    }

    public sealed class ClusterClusterRegistrationTokenGetArgs : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// Cluster ID (string)
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Command to execute in a imported k8s cluster (string)
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// (Computed) The ID of the resource (string)
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Insecure command to execute in a imported k8s cluster (string)
        /// </summary>
        [Input("insecureCommand")]
        public Input<string>? InsecureCommand { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// K8s manifest url to execute with `kubectl` to import an existing k8s cluster (string)
        /// </summary>
        [Input("manifestUrl")]
        public Input<string>? ManifestUrl { get; set; }

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Node command to execute in linux nodes for custom k8s cluster (string)
        /// </summary>
        [Input("nodeCommand")]
        public Input<string>? NodeCommand { get; set; }

        /// <summary>
        /// Token for cluster registration token object (string)
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Node command to execute in windows nodes for custom k8s cluster (string)
        /// </summary>
        [Input("windowsNodeCommand")]
        public Input<string>? WindowsNodeCommand { get; set; }

        public ClusterClusterRegistrationTokenGetArgs()
        {
        }
    }

    public sealed class ClusterClusterTemplateAnswersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster ID (string)
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Project ID to apply answer (string)
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("values")]
        private InputMap<object>? _values;

        /// <summary>
        /// Key/values for answer (map)
        /// </summary>
        public InputMap<object> Values
        {
            get => _values ?? (_values = new InputMap<object>());
            set => _values = value;
        }

        public ClusterClusterTemplateAnswersArgs()
        {
        }
    }

    public sealed class ClusterClusterTemplateAnswersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster ID (string)
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Project ID to apply answer (string)
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("values")]
        private InputMap<object>? _values;

        /// <summary>
        /// Key/values for answer (map)
        /// </summary>
        public InputMap<object> Values
        {
            get => _values ?? (_values = new InputMap<object>());
            set => _values = value;
        }

        public ClusterClusterTemplateAnswersGetArgs()
        {
        }
    }

    public sealed class ClusterClusterTemplateQuestionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default variable value (string)
        /// </summary>
        [Input("default", required: true)]
        public Input<string> Default { get; set; } = null!;

        /// <summary>
        /// Required variable. Default `false` (bool)
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// Variable type. `boolean`, `int` and `string` are allowed. Default `string` (string)
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Variable name (string)
        /// </summary>
        [Input("variable", required: true)]
        public Input<string> Variable { get; set; } = null!;

        public ClusterClusterTemplateQuestionsArgs()
        {
        }
    }

    public sealed class ClusterClusterTemplateQuestionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default variable value (string)
        /// </summary>
        [Input("default", required: true)]
        public Input<string> Default { get; set; } = null!;

        /// <summary>
        /// Required variable. Default `false` (bool)
        /// </summary>
        [Input("required")]
        public Input<bool>? Required { get; set; }

        /// <summary>
        /// Variable type. `boolean`, `int` and `string` are allowed. Default `string` (string)
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Variable name (string)
        /// </summary>
        [Input("variable", required: true)]
        public Input<string> Variable { get; set; } = null!;

        public ClusterClusterTemplateQuestionsGetArgs()
        {
        }
    }

    public sealed class ClusterEksConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Client ID to use (string)
        /// </summary>
        [Input("accessKey", required: true)]
        public Input<string> AccessKey { get; set; } = null!;

        /// <summary>
        /// AMI ID to use for the worker nodes instead of the default (string)
        /// </summary>
        [Input("ami")]
        public Input<string>? Ami { get; set; }

        /// <summary>
        /// Associate public ip EKS worker nodes. Default `true` (bool)
        /// </summary>
        [Input("associateWorkerNodePublicIp")]
        public Input<bool>? AssociateWorkerNodePublicIp { get; set; }

        /// <summary>
        /// The desired number of worker nodes. Just for Rancher v2.3.x and above. Default `3` (int)
        /// </summary>
        [Input("desiredNodes")]
        public Input<int>? DesiredNodes { get; set; }

        /// <summary>
        /// The type of machine to use for worker nodes. Default `t2.medium` (string)
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Allow user to specify key name to use. Just for Rancher v2.2.7 and above (string)
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        /// <summary>
        /// The Kubernetes master version (string)
        /// </summary>
        [Input("kubernetesVersion", required: true)]
        public Input<string> KubernetesVersion { get; set; } = null!;

        /// <summary>
        /// The maximum number of worker nodes. Default `3` (int)
        /// </summary>
        [Input("maximumNodes")]
        public Input<int>? MaximumNodes { get; set; }

        /// <summary>
        /// The minimum number of worker nodes. Default `1` (int)
        /// </summary>
        [Input("minimumNodes")]
        public Input<int>? MinimumNodes { get; set; }

        /// <summary>
        /// The volume size for each node. Default `20` (int)
        /// </summary>
        [Input("nodeVolumeSize")]
        public Input<int>? NodeVolumeSize { get; set; }

        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The AWS Client Secret associated with the Client ID (string)
        /// </summary>
        [Input("secretKey", required: true)]
        public Input<string> SecretKey { get; set; } = null!;

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// List of security groups to use for the cluster. If it's not specified Rancher will create a new security group (list)
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The service role to use to perform the cluster operations in AWS. If it's not specified Rancher will create a new service role (string)
        /// </summary>
        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        /// <summary>
        /// A session token to use with the client key and secret if applicable (string)
        /// </summary>
        [Input("sessionToken")]
        public Input<string>? SessionToken { get; set; }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// List of subnets in the virtual network to use. If it's not specified Rancher will create 3 news subnets (list)
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        /// <summary>
        /// Pass user-data to the nodes to perform automated configuration tasks (string)
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        /// </summary>
        [Input("virtualNetwork")]
        public Input<string>? VirtualNetwork { get; set; }

        public ClusterEksConfigArgs()
        {
        }
    }

    public sealed class ClusterEksConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Client ID to use (string)
        /// </summary>
        [Input("accessKey", required: true)]
        public Input<string> AccessKey { get; set; } = null!;

        /// <summary>
        /// AMI ID to use for the worker nodes instead of the default (string)
        /// </summary>
        [Input("ami")]
        public Input<string>? Ami { get; set; }

        /// <summary>
        /// Associate public ip EKS worker nodes. Default `true` (bool)
        /// </summary>
        [Input("associateWorkerNodePublicIp")]
        public Input<bool>? AssociateWorkerNodePublicIp { get; set; }

        /// <summary>
        /// The desired number of worker nodes. Just for Rancher v2.3.x and above. Default `3` (int)
        /// </summary>
        [Input("desiredNodes")]
        public Input<int>? DesiredNodes { get; set; }

        /// <summary>
        /// The type of machine to use for worker nodes. Default `t2.medium` (string)
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Allow user to specify key name to use. Just for Rancher v2.2.7 and above (string)
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        /// <summary>
        /// The Kubernetes master version (string)
        /// </summary>
        [Input("kubernetesVersion", required: true)]
        public Input<string> KubernetesVersion { get; set; } = null!;

        /// <summary>
        /// The maximum number of worker nodes. Default `3` (int)
        /// </summary>
        [Input("maximumNodes")]
        public Input<int>? MaximumNodes { get; set; }

        /// <summary>
        /// The minimum number of worker nodes. Default `1` (int)
        /// </summary>
        [Input("minimumNodes")]
        public Input<int>? MinimumNodes { get; set; }

        /// <summary>
        /// The volume size for each node. Default `20` (int)
        /// </summary>
        [Input("nodeVolumeSize")]
        public Input<int>? NodeVolumeSize { get; set; }

        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The AWS Client Secret associated with the Client ID (string)
        /// </summary>
        [Input("secretKey", required: true)]
        public Input<string> SecretKey { get; set; } = null!;

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// List of security groups to use for the cluster. If it's not specified Rancher will create a new security group (list)
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The service role to use to perform the cluster operations in AWS. If it's not specified Rancher will create a new service role (string)
        /// </summary>
        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        /// <summary>
        /// A session token to use with the client key and secret if applicable (string)
        /// </summary>
        [Input("sessionToken")]
        public Input<string>? SessionToken { get; set; }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// List of subnets in the virtual network to use. If it's not specified Rancher will create 3 news subnets (list)
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        /// <summary>
        /// Pass user-data to the nodes to perform automated configuration tasks (string)
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        /// </summary>
        [Input("virtualNetwork")]
        public Input<string>? VirtualNetwork { get; set; }

        public ClusterEksConfigGetArgs()
        {
        }
    }

    public sealed class ClusterGkeConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP address range of the container pods (string)
        /// </summary>
        [Input("clusterIpv4Cidr", required: true)]
        public Input<string> ClusterIpv4Cidr { get; set; } = null!;

        /// <summary>
        /// The contents of the GC credential file (string)
        /// </summary>
        [Input("credential", required: true)]
        public Input<string> Credential { get; set; } = null!;

        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Size of the disk attached to each node. Default `100` (int)
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// Type of the disk attached to each node (string)
        /// </summary>
        [Input("diskType", required: true)]
        public Input<string> DiskType { get; set; } = null!;

        /// <summary>
        /// To enable Kubernetes alpha feature. Default `true` (bool)
        /// </summary>
        [Input("enableAlphaFeature")]
        public Input<bool>? EnableAlphaFeature { get; set; }

        /// <summary>
        /// Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
        /// </summary>
        [Input("enableAutoRepair")]
        public Input<bool>? EnableAutoRepair { get; set; }

        /// <summary>
        /// Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
        /// </summary>
        [Input("enableAutoUpgrade")]
        public Input<bool>? EnableAutoUpgrade { get; set; }

        /// <summary>
        /// Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
        /// </summary>
        [Input("enableHorizontalPodAutoscaling")]
        public Input<bool>? EnableHorizontalPodAutoscaling { get; set; }

        /// <summary>
        /// Enable HTTP load balancing on GKE cluster. Default `true` (bool)
        /// </summary>
        [Input("enableHttpLoadBalancing")]
        public Input<bool>? EnableHttpLoadBalancing { get; set; }

        /// <summary>
        /// Whether to enable the Kubernetes dashboard. Default `false` (bool)
        /// </summary>
        [Input("enableKubernetesDashboard")]
        public Input<bool>? EnableKubernetesDashboard { get; set; }

        /// <summary>
        /// Whether to enable legacy abac on the cluster. Default `false` (bool)
        /// </summary>
        [Input("enableLegacyAbac")]
        public Input<bool>? EnableLegacyAbac { get; set; }

        [Input("enableMasterAuthorizedNetwork")]
        public Input<bool>? EnableMasterAuthorizedNetwork { get; set; }

        /// <summary>
        /// Enable stackdriver logging. Default `true` (bool)
        /// </summary>
        [Input("enableNetworkPolicyConfig")]
        public Input<bool>? EnableNetworkPolicyConfig { get; set; }

        /// <summary>
        /// Enable nodepool autoscaling. Default `false` (bool)
        /// </summary>
        [Input("enableNodepoolAutoscaling")]
        public Input<bool>? EnableNodepoolAutoscaling { get; set; }

        /// <summary>
        /// Whether the master's internal IP address is used as the cluster endpoint. Default `false` (bool)
        /// </summary>
        [Input("enablePrivateEndpoint")]
        public Input<bool>? EnablePrivateEndpoint { get; set; }

        /// <summary>
        /// Whether nodes have internal IP address only. Default `false` (bool)
        /// </summary>
        [Input("enablePrivateNodes")]
        public Input<bool>? EnablePrivateNodes { get; set; }

        /// <summary>
        /// Enable stackdriver monitoring. Default `true` (bool)
        /// </summary>
        [Input("enableStackdriverLogging")]
        public Input<bool>? EnableStackdriverLogging { get; set; }

        /// <summary>
        /// Enable stackdriver monitoring on GKE cluster (bool)
        /// </summary>
        [Input("enableStackdriverMonitoring")]
        public Input<bool>? EnableStackdriverMonitoring { get; set; }

        /// <summary>
        /// The image to use for the worker nodes (string)
        /// </summary>
        [Input("imageType", required: true)]
        public Input<string> ImageType { get; set; } = null!;

        /// <summary>
        /// The IP address range for the cluster pod IPs (string)
        /// </summary>
        [Input("ipPolicyClusterIpv4CidrBlock", required: true)]
        public Input<string> IpPolicyClusterIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// The name of the secondary range to be used for the cluster CIDR block (string)
        /// </summary>
        [Input("ipPolicyClusterSecondaryRangeName", required: true)]
        public Input<string> IpPolicyClusterSecondaryRangeName { get; set; } = null!;

        /// <summary>
        /// Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
        /// </summary>
        [Input("ipPolicyCreateSubnetwork")]
        public Input<bool>? IpPolicyCreateSubnetwork { get; set; }

        /// <summary>
        /// The IP address range of the instance IPs in this cluster (string)
        /// </summary>
        [Input("ipPolicyNodeIpv4CidrBlock", required: true)]
        public Input<string> IpPolicyNodeIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// The IP address range of the services IPs in this cluster (string)
        /// </summary>
        [Input("ipPolicyServicesIpv4CidrBlock", required: true)]
        public Input<string> IpPolicyServicesIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// The name of the secondary range to be used for the services CIDR block (string)
        /// </summary>
        [Input("ipPolicyServicesSecondaryRangeName", required: true)]
        public Input<string> IpPolicyServicesSecondaryRangeName { get; set; } = null!;

        /// <summary>
        /// A custom subnetwork name to be used if createSubnetwork is true (string)
        /// </summary>
        [Input("ipPolicySubnetworkName", required: true)]
        public Input<string> IpPolicySubnetworkName { get; set; } = null!;

        /// <summary>
        /// Issue a client certificate. Default `false` (bool)
        /// </summary>
        [Input("issueClientCertificate")]
        public Input<bool>? IssueClientCertificate { get; set; }

        /// <summary>
        /// Enable the Kubernetes dashboard. Default `false` (bool)
        /// </summary>
        [Input("kubernetesDashboard")]
        public Input<bool>? KubernetesDashboard { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The number of local SSD disks to be attached to the node. Default `0` (int)
        /// </summary>
        [Input("localSsdCount")]
        public Input<int>? LocalSsdCount { get; set; }

        [Input("locations", required: true)]
        private InputList<string>? _locations;

        /// <summary>
        /// Locations for GKE cluster (list)
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// Machine type for GKE cluster (string)
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// Maintenance window for GKE cluster (string)
        /// </summary>
        [Input("maintenanceWindow", required: true)]
        public Input<string> MaintenanceWindow { get; set; } = null!;

        [Input("masterAuthorizedNetworkCidrBlocks")]
        private InputList<string>? _masterAuthorizedNetworkCidrBlocks;

        /// <summary>
        /// Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
        /// </summary>
        public InputList<string> MasterAuthorizedNetworkCidrBlocks
        {
            get => _masterAuthorizedNetworkCidrBlocks ?? (_masterAuthorizedNetworkCidrBlocks = new InputList<string>());
            set => _masterAuthorizedNetworkCidrBlocks = value;
        }

        /// <summary>
        /// The IP range in CIDR notation to use for the hosted master network (string)
        /// </summary>
        [Input("masterIpv4CidrBlock", required: true)]
        public Input<string> MasterIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// Master version for GKE cluster (string)
        /// </summary>
        [Input("masterVersion", required: true)]
        public Input<string> MasterVersion { get; set; } = null!;

        /// <summary>
        /// Maximum number of nodes in the NodePool. Must be &gt;= minNodeCount. There has to enough quota to scale up the cluster. Default `0` (int)
        /// </summary>
        [Input("maxNodeCount")]
        public Input<int>? MaxNodeCount { get; set; }

        /// <summary>
        /// Minimmum number of nodes in the NodePool. Must be &gt;= 1 and &lt;= maxNodeCount. Default `0` (int)
        /// </summary>
        [Input("minNodeCount")]
        public Input<int>? MinNodeCount { get; set; }

        /// <summary>
        /// Network for GKE cluster (string)
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// Node count for GKE cluster. Default `3` (int)
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The ID of the cluster node pool (string)
        /// </summary>
        [Input("nodePool", required: true)]
        public Input<string> NodePool { get; set; } = null!;

        /// <summary>
        /// Node version for GKE cluster (string)
        /// </summary>
        [Input("nodeVersion", required: true)]
        public Input<string> NodeVersion { get; set; } = null!;

        [Input("oauthScopes", required: true)]
        private InputList<string>? _oauthScopes;

        /// <summary>
        /// The set of Google API scopes to be made available on all of the node VMs under the default service account (list)
        /// </summary>
        public InputList<string> OauthScopes
        {
            get => _oauthScopes ?? (_oauthScopes = new InputList<string>());
            set => _oauthScopes = value;
        }

        /// <summary>
        /// Whether the nodes are created as preemptible VM instances. Default `false` (bool)
        /// </summary>
        [Input("preemptible")]
        public Input<bool>? Preemptible { get; set; }

        /// <summary>
        /// Project ID to apply answer (string)
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("resourceLabels")]
        private InputMap<object>? _resourceLabels;

        /// <summary>
        /// The map of Kubernetes labels to be applied to each cluster (map)
        /// </summary>
        public InputMap<object> ResourceLabels
        {
            get => _resourceLabels ?? (_resourceLabels = new InputMap<object>());
            set => _resourceLabels = value;
        }

        /// <summary>
        /// The Google Cloud Platform Service Account to be used by the node VMs (string)
        /// </summary>
        [Input("serviceAccount", required: true)]
        public Input<string> ServiceAccount { get; set; } = null!;

        /// <summary>
        /// Subnetwork for GKE cluster (string)
        /// </summary>
        [Input("subNetwork", required: true)]
        public Input<string> SubNetwork { get; set; } = null!;

        [Input("taints")]
        private InputList<string>? _taints;

        /// <summary>
        /// List of Kubernetes taints to be applied to each node (list)
        /// </summary>
        public InputList<string> Taints
        {
            get => _taints ?? (_taints = new InputList<string>());
            set => _taints = value;
        }

        /// <summary>
        /// Whether alias IPs will be used for pod IPs in the cluster. Default `false` (bool)
        /// </summary>
        [Input("useIpAliases")]
        public Input<bool>? UseIpAliases { get; set; }

        /// <summary>
        /// Zone GKE cluster (string)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ClusterGkeConfigArgs()
        {
        }
    }

    public sealed class ClusterGkeConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP address range of the container pods (string)
        /// </summary>
        [Input("clusterIpv4Cidr", required: true)]
        public Input<string> ClusterIpv4Cidr { get; set; } = null!;

        /// <summary>
        /// The contents of the GC credential file (string)
        /// </summary>
        [Input("credential", required: true)]
        public Input<string> Credential { get; set; } = null!;

        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Size of the disk attached to each node. Default `100` (int)
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// Type of the disk attached to each node (string)
        /// </summary>
        [Input("diskType", required: true)]
        public Input<string> DiskType { get; set; } = null!;

        /// <summary>
        /// To enable Kubernetes alpha feature. Default `true` (bool)
        /// </summary>
        [Input("enableAlphaFeature")]
        public Input<bool>? EnableAlphaFeature { get; set; }

        /// <summary>
        /// Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
        /// </summary>
        [Input("enableAutoRepair")]
        public Input<bool>? EnableAutoRepair { get; set; }

        /// <summary>
        /// Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
        /// </summary>
        [Input("enableAutoUpgrade")]
        public Input<bool>? EnableAutoUpgrade { get; set; }

        /// <summary>
        /// Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
        /// </summary>
        [Input("enableHorizontalPodAutoscaling")]
        public Input<bool>? EnableHorizontalPodAutoscaling { get; set; }

        /// <summary>
        /// Enable HTTP load balancing on GKE cluster. Default `true` (bool)
        /// </summary>
        [Input("enableHttpLoadBalancing")]
        public Input<bool>? EnableHttpLoadBalancing { get; set; }

        /// <summary>
        /// Whether to enable the Kubernetes dashboard. Default `false` (bool)
        /// </summary>
        [Input("enableKubernetesDashboard")]
        public Input<bool>? EnableKubernetesDashboard { get; set; }

        /// <summary>
        /// Whether to enable legacy abac on the cluster. Default `false` (bool)
        /// </summary>
        [Input("enableLegacyAbac")]
        public Input<bool>? EnableLegacyAbac { get; set; }

        [Input("enableMasterAuthorizedNetwork")]
        public Input<bool>? EnableMasterAuthorizedNetwork { get; set; }

        /// <summary>
        /// Enable stackdriver logging. Default `true` (bool)
        /// </summary>
        [Input("enableNetworkPolicyConfig")]
        public Input<bool>? EnableNetworkPolicyConfig { get; set; }

        /// <summary>
        /// Enable nodepool autoscaling. Default `false` (bool)
        /// </summary>
        [Input("enableNodepoolAutoscaling")]
        public Input<bool>? EnableNodepoolAutoscaling { get; set; }

        /// <summary>
        /// Whether the master's internal IP address is used as the cluster endpoint. Default `false` (bool)
        /// </summary>
        [Input("enablePrivateEndpoint")]
        public Input<bool>? EnablePrivateEndpoint { get; set; }

        /// <summary>
        /// Whether nodes have internal IP address only. Default `false` (bool)
        /// </summary>
        [Input("enablePrivateNodes")]
        public Input<bool>? EnablePrivateNodes { get; set; }

        /// <summary>
        /// Enable stackdriver monitoring. Default `true` (bool)
        /// </summary>
        [Input("enableStackdriverLogging")]
        public Input<bool>? EnableStackdriverLogging { get; set; }

        /// <summary>
        /// Enable stackdriver monitoring on GKE cluster (bool)
        /// </summary>
        [Input("enableStackdriverMonitoring")]
        public Input<bool>? EnableStackdriverMonitoring { get; set; }

        /// <summary>
        /// The image to use for the worker nodes (string)
        /// </summary>
        [Input("imageType", required: true)]
        public Input<string> ImageType { get; set; } = null!;

        /// <summary>
        /// The IP address range for the cluster pod IPs (string)
        /// </summary>
        [Input("ipPolicyClusterIpv4CidrBlock", required: true)]
        public Input<string> IpPolicyClusterIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// The name of the secondary range to be used for the cluster CIDR block (string)
        /// </summary>
        [Input("ipPolicyClusterSecondaryRangeName", required: true)]
        public Input<string> IpPolicyClusterSecondaryRangeName { get; set; } = null!;

        /// <summary>
        /// Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
        /// </summary>
        [Input("ipPolicyCreateSubnetwork")]
        public Input<bool>? IpPolicyCreateSubnetwork { get; set; }

        /// <summary>
        /// The IP address range of the instance IPs in this cluster (string)
        /// </summary>
        [Input("ipPolicyNodeIpv4CidrBlock", required: true)]
        public Input<string> IpPolicyNodeIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// The IP address range of the services IPs in this cluster (string)
        /// </summary>
        [Input("ipPolicyServicesIpv4CidrBlock", required: true)]
        public Input<string> IpPolicyServicesIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// The name of the secondary range to be used for the services CIDR block (string)
        /// </summary>
        [Input("ipPolicyServicesSecondaryRangeName", required: true)]
        public Input<string> IpPolicyServicesSecondaryRangeName { get; set; } = null!;

        /// <summary>
        /// A custom subnetwork name to be used if createSubnetwork is true (string)
        /// </summary>
        [Input("ipPolicySubnetworkName", required: true)]
        public Input<string> IpPolicySubnetworkName { get; set; } = null!;

        /// <summary>
        /// Issue a client certificate. Default `false` (bool)
        /// </summary>
        [Input("issueClientCertificate")]
        public Input<bool>? IssueClientCertificate { get; set; }

        /// <summary>
        /// Enable the Kubernetes dashboard. Default `false` (bool)
        /// </summary>
        [Input("kubernetesDashboard")]
        public Input<bool>? KubernetesDashboard { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The number of local SSD disks to be attached to the node. Default `0` (int)
        /// </summary>
        [Input("localSsdCount")]
        public Input<int>? LocalSsdCount { get; set; }

        [Input("locations", required: true)]
        private InputList<string>? _locations;

        /// <summary>
        /// Locations for GKE cluster (list)
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// Machine type for GKE cluster (string)
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// Maintenance window for GKE cluster (string)
        /// </summary>
        [Input("maintenanceWindow", required: true)]
        public Input<string> MaintenanceWindow { get; set; } = null!;

        [Input("masterAuthorizedNetworkCidrBlocks")]
        private InputList<string>? _masterAuthorizedNetworkCidrBlocks;

        /// <summary>
        /// Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
        /// </summary>
        public InputList<string> MasterAuthorizedNetworkCidrBlocks
        {
            get => _masterAuthorizedNetworkCidrBlocks ?? (_masterAuthorizedNetworkCidrBlocks = new InputList<string>());
            set => _masterAuthorizedNetworkCidrBlocks = value;
        }

        /// <summary>
        /// The IP range in CIDR notation to use for the hosted master network (string)
        /// </summary>
        [Input("masterIpv4CidrBlock", required: true)]
        public Input<string> MasterIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// Master version for GKE cluster (string)
        /// </summary>
        [Input("masterVersion", required: true)]
        public Input<string> MasterVersion { get; set; } = null!;

        /// <summary>
        /// Maximum number of nodes in the NodePool. Must be &gt;= minNodeCount. There has to enough quota to scale up the cluster. Default `0` (int)
        /// </summary>
        [Input("maxNodeCount")]
        public Input<int>? MaxNodeCount { get; set; }

        /// <summary>
        /// Minimmum number of nodes in the NodePool. Must be &gt;= 1 and &lt;= maxNodeCount. Default `0` (int)
        /// </summary>
        [Input("minNodeCount")]
        public Input<int>? MinNodeCount { get; set; }

        /// <summary>
        /// Network for GKE cluster (string)
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// Node count for GKE cluster. Default `3` (int)
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The ID of the cluster node pool (string)
        /// </summary>
        [Input("nodePool", required: true)]
        public Input<string> NodePool { get; set; } = null!;

        /// <summary>
        /// Node version for GKE cluster (string)
        /// </summary>
        [Input("nodeVersion", required: true)]
        public Input<string> NodeVersion { get; set; } = null!;

        [Input("oauthScopes", required: true)]
        private InputList<string>? _oauthScopes;

        /// <summary>
        /// The set of Google API scopes to be made available on all of the node VMs under the default service account (list)
        /// </summary>
        public InputList<string> OauthScopes
        {
            get => _oauthScopes ?? (_oauthScopes = new InputList<string>());
            set => _oauthScopes = value;
        }

        /// <summary>
        /// Whether the nodes are created as preemptible VM instances. Default `false` (bool)
        /// </summary>
        [Input("preemptible")]
        public Input<bool>? Preemptible { get; set; }

        /// <summary>
        /// Project ID to apply answer (string)
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("resourceLabels")]
        private InputMap<object>? _resourceLabels;

        /// <summary>
        /// The map of Kubernetes labels to be applied to each cluster (map)
        /// </summary>
        public InputMap<object> ResourceLabels
        {
            get => _resourceLabels ?? (_resourceLabels = new InputMap<object>());
            set => _resourceLabels = value;
        }

        /// <summary>
        /// The Google Cloud Platform Service Account to be used by the node VMs (string)
        /// </summary>
        [Input("serviceAccount", required: true)]
        public Input<string> ServiceAccount { get; set; } = null!;

        /// <summary>
        /// Subnetwork for GKE cluster (string)
        /// </summary>
        [Input("subNetwork", required: true)]
        public Input<string> SubNetwork { get; set; } = null!;

        [Input("taints")]
        private InputList<string>? _taints;

        /// <summary>
        /// List of Kubernetes taints to be applied to each node (list)
        /// </summary>
        public InputList<string> Taints
        {
            get => _taints ?? (_taints = new InputList<string>());
            set => _taints = value;
        }

        /// <summary>
        /// Whether alias IPs will be used for pod IPs in the cluster. Default `false` (bool)
        /// </summary>
        [Input("useIpAliases")]
        public Input<bool>? UseIpAliases { get; set; }

        /// <summary>
        /// Zone GKE cluster (string)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ClusterGkeConfigGetArgs()
        {
        }
    }

    public sealed class ClusterK3sConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// K3S upgrade strategy (List maxitems: 1)
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<ClusterK3sConfigUpgradeStrategyArgs>? UpgradeStrategy { get; set; }

        /// <summary>
        /// rancher-monitoring chart version (string)
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ClusterK3sConfigArgs()
        {
        }
    }

    public sealed class ClusterK3sConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// K3S upgrade strategy (List maxitems: 1)
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<ClusterK3sConfigUpgradeStrategyGetArgs>? UpgradeStrategy { get; set; }

        /// <summary>
        /// rancher-monitoring chart version (string)
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ClusterK3sConfigGetArgs()
        {
        }
    }

    public sealed class ClusterK3sConfigUpgradeStrategyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Drain server nodes. Default: `false` (bool)
        /// </summary>
        [Input("drainServerNodes")]
        public Input<bool>? DrainServerNodes { get; set; }

        /// <summary>
        /// Drain worker nodes. Default: `false` (bool)
        /// </summary>
        [Input("drainWorkerNodes")]
        public Input<bool>? DrainWorkerNodes { get; set; }

        /// <summary>
        /// Server concurrency. Default: `1` (int)
        /// </summary>
        [Input("serverConcurrency")]
        public Input<int>? ServerConcurrency { get; set; }

        /// <summary>
        /// Worker concurrency. Default: `1` (int)
        /// </summary>
        [Input("workerConcurrency")]
        public Input<int>? WorkerConcurrency { get; set; }

        public ClusterK3sConfigUpgradeStrategyArgs()
        {
        }
    }

    public sealed class ClusterK3sConfigUpgradeStrategyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Drain server nodes. Default: `false` (bool)
        /// </summary>
        [Input("drainServerNodes")]
        public Input<bool>? DrainServerNodes { get; set; }

        /// <summary>
        /// Drain worker nodes. Default: `false` (bool)
        /// </summary>
        [Input("drainWorkerNodes")]
        public Input<bool>? DrainWorkerNodes { get; set; }

        /// <summary>
        /// Server concurrency. Default: `1` (int)
        /// </summary>
        [Input("serverConcurrency")]
        public Input<int>? ServerConcurrency { get; set; }

        /// <summary>
        /// Worker concurrency. Default: `1` (int)
        /// </summary>
        [Input("workerConcurrency")]
        public Input<int>? WorkerConcurrency { get; set; }

        public ClusterK3sConfigUpgradeStrategyGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Duration in seconds of addon job (int)
        /// </summary>
        [Input("addonJobTimeout")]
        public Input<int>? AddonJobTimeout { get; set; }

        /// <summary>
        /// Addons descripton to deploy on RKE cluster.
        /// </summary>
        [Input("addons")]
        public Input<string>? Addons { get; set; }

        [Input("addonsIncludes")]
        private InputList<string>? _addonsIncludes;

        /// <summary>
        /// Addons yaml manifests to deploy on RKE cluster (list)
        /// </summary>
        public InputList<string> AddonsIncludes
        {
            get => _addonsIncludes ?? (_addonsIncludes = new InputList<string>());
            set => _addonsIncludes = value;
        }

        /// <summary>
        /// Kubernetes cluster authentication (list maxitems:1)
        /// </summary>
        [Input("authentication")]
        public Input<ClusterRkeConfigAuthenticationArgs>? Authentication { get; set; }

        /// <summary>
        /// Kubernetes cluster authorization (list maxitems:1)
        /// </summary>
        [Input("authorization")]
        public Input<ClusterRkeConfigAuthorizationArgs>? Authorization { get; set; }

        /// <summary>
        /// RKE bastion host (list maxitems:1)
        /// </summary>
        [Input("bastionHost")]
        public Input<ClusterRkeConfigBastionHostArgs>? BastionHost { get; set; }

        /// <summary>
        /// RKE options for Calico network provider (string)
        /// </summary>
        [Input("cloudProvider")]
        public Input<ClusterRkeConfigCloudProviderArgs>? CloudProvider { get; set; }

        /// <summary>
        /// RKE dns add-on. Just for Rancher v2.2.x (list maxitems:1)
        /// </summary>
        [Input("dns")]
        public Input<ClusterRkeConfigDnsArgs>? Dns { get; set; }

        /// <summary>
        /// Ignore docker version. Default `true` (bool)
        /// </summary>
        [Input("ignoreDockerVersion")]
        public Input<bool>? IgnoreDockerVersion { get; set; }

        /// <summary>
        /// Kubernetes ingress configuration (list maxitems:1)
        /// </summary>
        [Input("ingress")]
        public Input<ClusterRkeConfigIngressArgs>? Ingress { get; set; }

        /// <summary>
        /// The Kubernetes master version (string)
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// Kubernetes cluster monitoring (list maxitems:1)
        /// </summary>
        [Input("monitoring")]
        public Input<ClusterRkeConfigMonitoringArgs>? Monitoring { get; set; }

        /// <summary>
        /// Network for GKE cluster (string)
        /// </summary>
        [Input("network")]
        public Input<ClusterRkeConfigNetworkArgs>? Network { get; set; }

        [Input("nodes")]
        private InputList<ClusterRkeConfigNodesArgs>? _nodes;

        /// <summary>
        /// RKE cluster nodes (list)
        /// </summary>
        public InputList<ClusterRkeConfigNodesArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<ClusterRkeConfigNodesArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// Prefix to customize Kubernetes path (string)
        /// </summary>
        [Input("prefixPath")]
        public Input<string>? PrefixPath { get; set; }

        [Input("privateRegistries")]
        private InputList<ClusterRkeConfigPrivateRegistriesArgs>? _privateRegistries;

        /// <summary>
        /// private registries for docker images (list)
        /// </summary>
        public InputList<ClusterRkeConfigPrivateRegistriesArgs> PrivateRegistries
        {
            get => _privateRegistries ?? (_privateRegistries = new InputList<ClusterRkeConfigPrivateRegistriesArgs>());
            set => _privateRegistries = value;
        }

        /// <summary>
        /// Kubernetes cluster services (list maxitems:1)
        /// </summary>
        [Input("services")]
        public Input<ClusterRkeConfigServicesArgs>? Services { get; set; }

        /// <summary>
        /// Use ssh agent auth. Default `false` (bool)
        /// </summary>
        [Input("sshAgentAuth")]
        public Input<bool>? SshAgentAuth { get; set; }

        /// <summary>
        /// Cluster level SSH certificate path (string)
        /// </summary>
        [Input("sshCertPath")]
        public Input<string>? SshCertPath { get; set; }

        /// <summary>
        /// Node SSH private key path (string)
        /// </summary>
        [Input("sshKeyPath")]
        public Input<string>? SshKeyPath { get; set; }

        /// <summary>
        /// K3S upgrade strategy (List maxitems: 1)
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<ClusterRkeConfigUpgradeStrategyArgs>? UpgradeStrategy { get; set; }

        public ClusterRkeConfigArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigAuthenticationArgs : Pulumi.ResourceArgs
    {
        [Input("sans")]
        private InputList<string>? _sans;

        /// <summary>
        /// RKE sans for authentication ([]string)
        /// </summary>
        public InputList<string> Sans
        {
            get => _sans ?? (_sans = new InputList<string>());
            set => _sans = value;
        }

        /// <summary>
        /// RKE strategy for authentication (string)
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        public ClusterRkeConfigAuthenticationArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigAuthenticationGetArgs : Pulumi.ResourceArgs
    {
        [Input("sans")]
        private InputList<string>? _sans;

        /// <summary>
        /// RKE sans for authentication ([]string)
        /// </summary>
        public InputList<string> Sans
        {
            get => _sans ?? (_sans = new InputList<string>());
            set => _sans = value;
        }

        /// <summary>
        /// RKE strategy for authentication (string)
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        public ClusterRkeConfigAuthenticationGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigAuthorizationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE mode for authorization. `rbac` and `none` modes are available. Default `rbac` (string)
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        public ClusterRkeConfigAuthorizationArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigAuthorizationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE mode for authorization. `rbac` and `none` modes are available. Default `rbac` (string)
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        public ClusterRkeConfigAuthorizationGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigBastionHostArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address ip for node (string)
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// Use ssh agent auth. Default `false` (bool)
        /// </summary>
        [Input("sshAgentAuth")]
        public Input<bool>? SshAgentAuth { get; set; }

        /// <summary>
        /// Node SSH private key (string)
        /// </summary>
        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        /// <summary>
        /// Node SSH private key path (string)
        /// </summary>
        [Input("sshKeyPath")]
        public Input<string>? SshKeyPath { get; set; }

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        public ClusterRkeConfigBastionHostArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigBastionHostGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address ip for node (string)
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// Use ssh agent auth. Default `false` (bool)
        /// </summary>
        [Input("sshAgentAuth")]
        public Input<bool>? SshAgentAuth { get; set; }

        /// <summary>
        /// Node SSH private key (string)
        /// </summary>
        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        /// <summary>
        /// Node SSH private key path (string)
        /// </summary>
        [Input("sshKeyPath")]
        public Input<string>? SshKeyPath { get; set; }

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        public ClusterRkeConfigBastionHostGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE AWS Cloud Provider config for Cloud Provider [rke-aws-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/) (list maxitems:1)
        /// </summary>
        [Input("awsCloudProvider")]
        public Input<ClusterRkeConfigCloudProviderAwsCloudProviderArgs>? AwsCloudProvider { get; set; }

        /// <summary>
        /// RKE Azure Cloud Provider config for Cloud Provider [rke-azure-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/azure/) (list maxitems:1)
        /// </summary>
        [Input("azureCloudProvider")]
        public Input<ClusterRkeConfigCloudProviderAzureCloudProviderArgs>? AzureCloudProvider { get; set; }

        /// <summary>
        /// RKE Custom Cloud Provider config for Cloud Provider (string) (string)
        /// </summary>
        [Input("customCloudProvider")]
        public Input<string>? CustomCloudProvider { get; set; }

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// RKE Openstack Cloud Provider config for Cloud Provider [rke-openstack-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/openstack/) (list maxitems:1)
        /// </summary>
        [Input("openstackCloudProvider")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs>? OpenstackCloudProvider { get; set; }

        /// <summary>
        /// RKE Vsphere Cloud Provider config for Cloud Provider [rke-vsphere-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/vsphere/) Extra argument `name` is required on `virtual_center` configuration. (list maxitems:1)
        /// </summary>
        [Input("vsphereCloudProvider")]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderArgs>? VsphereCloudProvider { get; set; }

        public ClusterRkeConfigCloudProviderArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderAwsCloudProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("global")]
        public Input<ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs>? Global { get; set; }

        [Input("serviceOverrides")]
        private InputList<ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesArgs>? _serviceOverrides;

        /// <summary>
        /// (list)
        /// </summary>
        public InputList<ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesArgs> ServiceOverrides
        {
            get => _serviceOverrides ?? (_serviceOverrides = new InputList<ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesArgs>());
            set => _serviceOverrides = value;
        }

        public ClusterRkeConfigCloudProviderAwsCloudProviderArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderAwsCloudProviderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("global")]
        public Input<ClusterRkeConfigCloudProviderAwsCloudProviderGlobalGetArgs>? Global { get; set; }

        [Input("serviceOverrides")]
        private InputList<ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesGetArgs>? _serviceOverrides;

        /// <summary>
        /// (list)
        /// </summary>
        public InputList<ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesGetArgs> ServiceOverrides
        {
            get => _serviceOverrides ?? (_serviceOverrides = new InputList<ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesGetArgs>());
            set => _serviceOverrides = value;
        }

        public ClusterRkeConfigCloudProviderAwsCloudProviderGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default `false` (bool)
        /// </summary>
        [Input("disableSecurityGroupIngress")]
        public Input<bool>? DisableSecurityGroupIngress { get; set; }

        /// <summary>
        /// Default `false` (bool)
        /// </summary>
        [Input("disableStrictZoneCheck")]
        public Input<bool>? DisableStrictZoneCheck { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("elbSecurityGroup")]
        public Input<string>? ElbSecurityGroup { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("kubernetesClusterId")]
        public Input<string>? KubernetesClusterId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("kubernetesClusterTag")]
        public Input<string>? KubernetesClusterTag { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("vpc")]
        public Input<string>? Vpc { get; set; }

        /// <summary>
        /// Zone GKE cluster (string)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ClusterRkeConfigCloudProviderAwsCloudProviderGlobalArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderAwsCloudProviderGlobalGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default `false` (bool)
        /// </summary>
        [Input("disableSecurityGroupIngress")]
        public Input<bool>? DisableSecurityGroupIngress { get; set; }

        /// <summary>
        /// Default `false` (bool)
        /// </summary>
        [Input("disableStrictZoneCheck")]
        public Input<bool>? DisableStrictZoneCheck { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("elbSecurityGroup")]
        public Input<string>? ElbSecurityGroup { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("kubernetesClusterId")]
        public Input<string>? KubernetesClusterId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("kubernetesClusterTag")]
        public Input<string>? KubernetesClusterTag { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("vpc")]
        public Input<string>? Vpc { get; set; }

        /// <summary>
        /// Zone GKE cluster (string)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ClusterRkeConfigCloudProviderAwsCloudProviderGlobalGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("signingMethod")]
        public Input<string>? SigningMethod { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("signingName")]
        public Input<string>? SigningName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("signingRegion")]
        public Input<string>? SigningRegion { get; set; }

        /// <summary>
        /// Registry URL (string)
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("signingMethod")]
        public Input<string>? SigningMethod { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("signingName")]
        public Input<string>? SigningName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("signingRegion")]
        public Input<string>? SigningRegion { get; set; }

        /// <summary>
        /// Registry URL (string)
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverridesGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderAzureCloudProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("aadClientCertPassword")]
        public Input<string>? AadClientCertPassword { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("aadClientCertPath")]
        public Input<string>? AadClientCertPath { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("aadClientId", required: true)]
        public Input<string> AadClientId { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("aadClientSecret", required: true)]
        public Input<string> AadClientSecret { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("cloud")]
        public Input<string>? Cloud { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("cloudProviderBackoff")]
        public Input<bool>? CloudProviderBackoff { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderBackoffDuration")]
        public Input<int>? CloudProviderBackoffDuration { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderBackoffExponent")]
        public Input<int>? CloudProviderBackoffExponent { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderBackoffJitter")]
        public Input<int>? CloudProviderBackoffJitter { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderBackoffRetries")]
        public Input<int>? CloudProviderBackoffRetries { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("cloudProviderRateLimit")]
        public Input<bool>? CloudProviderRateLimit { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderRateLimitBucket")]
        public Input<int>? CloudProviderRateLimitBucket { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderRateLimitQps")]
        public Input<int>? CloudProviderRateLimitQps { get; set; }

        /// <summary>
        /// Azure Kubernetes cluster location. Default `eastus` (string)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("maximumLoadBalancerRuleCount")]
        public Input<int>? MaximumLoadBalancerRuleCount { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("primaryAvailabilitySetName")]
        public Input<string>? PrimaryAvailabilitySetName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("primaryScaleSetName")]
        public Input<string>? PrimaryScaleSetName { get; set; }

        /// <summary>
        /// The name of the Cluster resource group (string)
        /// </summary>
        [Input("resourceGroup")]
        public Input<string>? ResourceGroup { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("routeTableName")]
        public Input<string>? RouteTableName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("securityGroupName")]
        public Input<string>? SecurityGroupName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("subnetName")]
        public Input<string>? SubnetName { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        /// <summary>
        /// Azure tenant ID to use (string)
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("useInstanceMetadata")]
        public Input<bool>? UseInstanceMetadata { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("useManagedIdentityExtension")]
        public Input<bool>? UseManagedIdentityExtension { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("vmType")]
        public Input<string>? VmType { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("vnetName")]
        public Input<string>? VnetName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("vnetResourceGroup")]
        public Input<string>? VnetResourceGroup { get; set; }

        public ClusterRkeConfigCloudProviderAzureCloudProviderArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderAzureCloudProviderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("aadClientCertPassword")]
        public Input<string>? AadClientCertPassword { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("aadClientCertPath")]
        public Input<string>? AadClientCertPath { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("aadClientId", required: true)]
        public Input<string> AadClientId { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("aadClientSecret", required: true)]
        public Input<string> AadClientSecret { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("cloud")]
        public Input<string>? Cloud { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("cloudProviderBackoff")]
        public Input<bool>? CloudProviderBackoff { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderBackoffDuration")]
        public Input<int>? CloudProviderBackoffDuration { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderBackoffExponent")]
        public Input<int>? CloudProviderBackoffExponent { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderBackoffJitter")]
        public Input<int>? CloudProviderBackoffJitter { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderBackoffRetries")]
        public Input<int>? CloudProviderBackoffRetries { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("cloudProviderRateLimit")]
        public Input<bool>? CloudProviderRateLimit { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderRateLimitBucket")]
        public Input<int>? CloudProviderRateLimitBucket { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("cloudProviderRateLimitQps")]
        public Input<int>? CloudProviderRateLimitQps { get; set; }

        /// <summary>
        /// Azure Kubernetes cluster location. Default `eastus` (string)
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("maximumLoadBalancerRuleCount")]
        public Input<int>? MaximumLoadBalancerRuleCount { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("primaryAvailabilitySetName")]
        public Input<string>? PrimaryAvailabilitySetName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("primaryScaleSetName")]
        public Input<string>? PrimaryScaleSetName { get; set; }

        /// <summary>
        /// The name of the Cluster resource group (string)
        /// </summary>
        [Input("resourceGroup")]
        public Input<string>? ResourceGroup { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("routeTableName")]
        public Input<string>? RouteTableName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("securityGroupName")]
        public Input<string>? SecurityGroupName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("subnetName")]
        public Input<string>? SubnetName { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        /// <summary>
        /// Azure tenant ID to use (string)
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("useInstanceMetadata")]
        public Input<bool>? UseInstanceMetadata { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("useManagedIdentityExtension")]
        public Input<bool>? UseManagedIdentityExtension { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("vmType")]
        public Input<string>? VmType { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("vnetName")]
        public Input<string>? VnetName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("vnetResourceGroup")]
        public Input<string>? VnetResourceGroup { get; set; }

        public ClusterRkeConfigCloudProviderAzureCloudProviderGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE AWS Cloud Provider config for Cloud Provider [rke-aws-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/) (list maxitems:1)
        /// </summary>
        [Input("awsCloudProvider")]
        public Input<ClusterRkeConfigCloudProviderAwsCloudProviderGetArgs>? AwsCloudProvider { get; set; }

        /// <summary>
        /// RKE Azure Cloud Provider config for Cloud Provider [rke-azure-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/azure/) (list maxitems:1)
        /// </summary>
        [Input("azureCloudProvider")]
        public Input<ClusterRkeConfigCloudProviderAzureCloudProviderGetArgs>? AzureCloudProvider { get; set; }

        /// <summary>
        /// RKE Custom Cloud Provider config for Cloud Provider (string) (string)
        /// </summary>
        [Input("customCloudProvider")]
        public Input<string>? CustomCloudProvider { get; set; }

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// RKE Openstack Cloud Provider config for Cloud Provider [rke-openstack-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/openstack/) (list maxitems:1)
        /// </summary>
        [Input("openstackCloudProvider")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderGetArgs>? OpenstackCloudProvider { get; set; }

        /// <summary>
        /// RKE Vsphere Cloud Provider config for Cloud Provider [rke-vsphere-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/vsphere/) Extra argument `name` is required on `virtual_center` configuration. (list maxitems:1)
        /// </summary>
        [Input("vsphereCloudProvider")]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderGetArgs>? VsphereCloudProvider { get; set; }

        public ClusterRkeConfigCloudProviderGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("blockStorage")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs>? BlockStorage { get; set; }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("global", required: true)]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs> Global { get; set; } = null!;

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("loadBalancer")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs>? LoadBalancer { get; set; }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("metadata")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("route")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs>? Route { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("bsVersion")]
        public Input<string>? BsVersion { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("ignoreVolumeAz")]
        public Input<bool>? IgnoreVolumeAz { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("trustDevicePath")]
        public Input<bool>? TrustDevicePath { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("bsVersion")]
        public Input<string>? BsVersion { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("ignoreVolumeAz")]
        public Input<bool>? IgnoreVolumeAz { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("trustDevicePath")]
        public Input<bool>? TrustDevicePath { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("blockStorage")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorageGetArgs>? BlockStorage { get; set; }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("global", required: true)]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalGetArgs> Global { get; set; } = null!;

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("loadBalancer")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerGetArgs>? LoadBalancer { get; set; }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("metadata")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("route")]
        public Input<ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteGetArgs>? Route { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("authUrl", required: true)]
        public Input<string> AuthUrl { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("caFile")]
        public Input<string>? CaFile { get; set; }

        /// <summary>
        /// Required if `domain_name` not provided. (string)
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// Required if `domain_id` not provided. (string)
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Azure tenant ID to use (string)
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// Required if `tenant_id` not provided. (string)
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("trustId")]
        public Input<string>? TrustId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("authUrl", required: true)]
        public Input<string> AuthUrl { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("caFile")]
        public Input<string>? CaFile { get; set; }

        /// <summary>
        /// Required if `domain_name` not provided. (string)
        /// </summary>
        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        /// <summary>
        /// Required if `domain_id` not provided. (string)
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Azure tenant ID to use (string)
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// Required if `tenant_id` not provided. (string)
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("trustId")]
        public Input<string>? TrustId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobalGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (bool)
        /// </summary>
        [Input("createMonitor")]
        public Input<bool>? CreateMonitor { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("floatingNetworkId")]
        public Input<string>? FloatingNetworkId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("lbMethod")]
        public Input<string>? LbMethod { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("lbProvider")]
        public Input<string>? LbProvider { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("lbVersion")]
        public Input<string>? LbVersion { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("manageSecurityGroups")]
        public Input<bool>? ManageSecurityGroups { get; set; }

        /// <summary>
        /// Default `60s` (string)
        /// </summary>
        [Input("monitorDelay")]
        public Input<string>? MonitorDelay { get; set; }

        /// <summary>
        /// Default 5 (int)
        /// </summary>
        [Input("monitorMaxRetries")]
        public Input<int>? MonitorMaxRetries { get; set; }

        /// <summary>
        /// Default `30s` (string)
        /// </summary>
        [Input("monitorTimeout")]
        public Input<string>? MonitorTimeout { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("useOctavia")]
        public Input<bool>? UseOctavia { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (bool)
        /// </summary>
        [Input("createMonitor")]
        public Input<bool>? CreateMonitor { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("floatingNetworkId")]
        public Input<string>? FloatingNetworkId { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("lbMethod")]
        public Input<string>? LbMethod { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("lbProvider")]
        public Input<string>? LbProvider { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("lbVersion")]
        public Input<string>? LbVersion { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("manageSecurityGroups")]
        public Input<bool>? ManageSecurityGroups { get; set; }

        /// <summary>
        /// Default `60s` (string)
        /// </summary>
        [Input("monitorDelay")]
        public Input<string>? MonitorDelay { get; set; }

        /// <summary>
        /// Default 5 (int)
        /// </summary>
        [Input("monitorMaxRetries")]
        public Input<int>? MonitorMaxRetries { get; set; }

        /// <summary>
        /// Default `30s` (string)
        /// </summary>
        [Input("monitorTimeout")]
        public Input<string>? MonitorTimeout { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("useOctavia")]
        public Input<bool>? UseOctavia { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (int)
        /// </summary>
        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("searchOrder")]
        public Input<string>? SearchOrder { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (int)
        /// </summary>
        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("searchOrder")]
        public Input<string>? SearchOrder { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadataGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("routerId")]
        public Input<string>? RouterId { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("routerId")]
        public Input<string>? RouterId { get; set; }

        public ClusterRkeConfigCloudProviderOpenstackCloudProviderRouteGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("disk")]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs>? Disk { get; set; }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("global")]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs>? Global { get; set; }

        /// <summary>
        /// Network for GKE cluster (string)
        /// </summary>
        [Input("network")]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs>? Network { get; set; }

        [Input("virtualCenters", required: true)]
        private InputList<ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersArgs>? _virtualCenters;

        /// <summary>
        /// (List)
        /// </summary>
        public InputList<ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersArgs> VirtualCenters
        {
            get => _virtualCenters ?? (_virtualCenters = new InputList<ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersArgs>());
            set => _virtualCenters = value;
        }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("workspace", required: true)]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs> Workspace { get; set; } = null!;

        public ClusterRkeConfigCloudProviderVsphereCloudProviderArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("scsiControllerType")]
        public Input<string>? ScsiControllerType { get; set; }

        public ClusterRkeConfigCloudProviderVsphereCloudProviderDiskArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderDiskGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("scsiControllerType")]
        public Input<string>? ScsiControllerType { get; set; }

        public ClusterRkeConfigCloudProviderVsphereCloudProviderDiskGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("disk")]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderDiskGetArgs>? Disk { get; set; }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("global")]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalGetArgs>? Global { get; set; }

        /// <summary>
        /// Network for GKE cluster (string)
        /// </summary>
        [Input("network")]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkGetArgs>? Network { get; set; }

        [Input("virtualCenters", required: true)]
        private InputList<ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersGetArgs>? _virtualCenters;

        /// <summary>
        /// (List)
        /// </summary>
        public InputList<ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersGetArgs> VirtualCenters
        {
            get => _virtualCenters ?? (_virtualCenters = new InputList<ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersGetArgs>());
            set => _virtualCenters = value;
        }

        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        [Input("workspace", required: true)]
        public Input<ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceGetArgs> Workspace { get; set; } = null!;

        public ClusterRkeConfigCloudProviderVsphereCloudProviderGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("datacenters")]
        public Input<string>? Datacenters { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("insecureFlag")]
        public Input<bool>? InsecureFlag { get; set; }

        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("soapRoundtripCount")]
        public Input<int>? SoapRoundtripCount { get; set; }

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("datacenters")]
        public Input<string>? Datacenters { get; set; }

        /// <summary>
        /// (bool)
        /// </summary>
        [Input("insecureFlag")]
        public Input<bool>? InsecureFlag { get; set; }

        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("soapRoundtripCount")]
        public Input<int>? SoapRoundtripCount { get; set; }

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ClusterRkeConfigCloudProviderVsphereCloudProviderGlobalGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("publicNetwork")]
        public Input<string>? PublicNetwork { get; set; }

        public ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("publicNetwork")]
        public Input<string>? PublicNetwork { get; set; }

        public ClusterRkeConfigCloudProviderVsphereCloudProviderNetworkGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("datacenters", required: true)]
        public Input<string> Datacenters { get; set; } = null!;

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("soapRoundtripCount")]
        public Input<int>? SoapRoundtripCount { get; set; }

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        public ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("datacenters", required: true)]
        public Input<string> Datacenters { get; set; } = null!;

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// (int)
        /// </summary>
        [Input("soapRoundtripCount")]
        public Input<int>? SoapRoundtripCount { get; set; }

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        public ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCentersGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("datacenter", required: true)]
        public Input<string> Datacenter { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("defaultDatastore")]
        public Input<string>? DefaultDatastore { get; set; }

        /// <summary>
        /// Folder for S3 service. Available from Rancher v2.2.7 (string)
        /// </summary>
        [Input("folder", required: true)]
        public Input<string> Folder { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("resourcepoolPath")]
        public Input<string>? ResourcepoolPath { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("server", required: true)]
        public Input<string> Server { get; set; } = null!;

        public ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string)
        /// </summary>
        [Input("datacenter", required: true)]
        public Input<string> Datacenter { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("defaultDatastore")]
        public Input<string>? DefaultDatastore { get; set; }

        /// <summary>
        /// Folder for S3 service. Available from Rancher v2.2.7 (string)
        /// </summary>
        [Input("folder", required: true)]
        public Input<string> Folder { get; set; } = null!;

        /// <summary>
        /// (string)
        /// </summary>
        [Input("resourcepoolPath")]
        public Input<string>? ResourcepoolPath { get; set; }

        /// <summary>
        /// (string)
        /// </summary>
        [Input("server", required: true)]
        public Input<string> Server { get; set; } = null!;

        public ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspaceGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigDnsArgs : Pulumi.ResourceArgs
    {
        [Input("nodeSelector")]
        private InputMap<object>? _nodeSelector;

        /// <summary>
        /// Node selector for RKE Ingress (map)
        /// </summary>
        public InputMap<object> NodeSelector
        {
            get => _nodeSelector ?? (_nodeSelector = new InputMap<object>());
            set => _nodeSelector = value;
        }

        /// <summary>
        /// Provider for RKE monitoring (string)
        /// </summary>
        [Input("provider")]
        public Input<string>? Provider { get; set; }

        [Input("reverseCidrs")]
        private InputList<string>? _reverseCidrs;

        /// <summary>
        /// DNS add-on reverse cidr  (list)
        /// </summary>
        public InputList<string> ReverseCidrs
        {
            get => _reverseCidrs ?? (_reverseCidrs = new InputList<string>());
            set => _reverseCidrs = value;
        }

        [Input("upstreamNameservers")]
        private InputList<string>? _upstreamNameservers;

        /// <summary>
        /// DNS add-on upstream nameservers  (list)
        /// </summary>
        public InputList<string> UpstreamNameservers
        {
            get => _upstreamNameservers ?? (_upstreamNameservers = new InputList<string>());
            set => _upstreamNameservers = value;
        }

        public ClusterRkeConfigDnsArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigDnsGetArgs : Pulumi.ResourceArgs
    {
        [Input("nodeSelector")]
        private InputMap<object>? _nodeSelector;

        /// <summary>
        /// Node selector for RKE Ingress (map)
        /// </summary>
        public InputMap<object> NodeSelector
        {
            get => _nodeSelector ?? (_nodeSelector = new InputMap<object>());
            set => _nodeSelector = value;
        }

        /// <summary>
        /// Provider for RKE monitoring (string)
        /// </summary>
        [Input("provider")]
        public Input<string>? Provider { get; set; }

        [Input("reverseCidrs")]
        private InputList<string>? _reverseCidrs;

        /// <summary>
        /// DNS add-on reverse cidr  (list)
        /// </summary>
        public InputList<string> ReverseCidrs
        {
            get => _reverseCidrs ?? (_reverseCidrs = new InputList<string>());
            set => _reverseCidrs = value;
        }

        [Input("upstreamNameservers")]
        private InputList<string>? _upstreamNameservers;

        /// <summary>
        /// DNS add-on upstream nameservers  (list)
        /// </summary>
        public InputList<string> UpstreamNameservers
        {
            get => _upstreamNameservers ?? (_upstreamNameservers = new InputList<string>());
            set => _upstreamNameservers = value;
        }

        public ClusterRkeConfigDnsGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Duration in seconds of addon job (int)
        /// </summary>
        [Input("addonJobTimeout")]
        public Input<int>? AddonJobTimeout { get; set; }

        /// <summary>
        /// Addons descripton to deploy on RKE cluster.
        /// </summary>
        [Input("addons")]
        public Input<string>? Addons { get; set; }

        [Input("addonsIncludes")]
        private InputList<string>? _addonsIncludes;

        /// <summary>
        /// Addons yaml manifests to deploy on RKE cluster (list)
        /// </summary>
        public InputList<string> AddonsIncludes
        {
            get => _addonsIncludes ?? (_addonsIncludes = new InputList<string>());
            set => _addonsIncludes = value;
        }

        /// <summary>
        /// Kubernetes cluster authentication (list maxitems:1)
        /// </summary>
        [Input("authentication")]
        public Input<ClusterRkeConfigAuthenticationGetArgs>? Authentication { get; set; }

        /// <summary>
        /// Kubernetes cluster authorization (list maxitems:1)
        /// </summary>
        [Input("authorization")]
        public Input<ClusterRkeConfigAuthorizationGetArgs>? Authorization { get; set; }

        /// <summary>
        /// RKE bastion host (list maxitems:1)
        /// </summary>
        [Input("bastionHost")]
        public Input<ClusterRkeConfigBastionHostGetArgs>? BastionHost { get; set; }

        /// <summary>
        /// RKE options for Calico network provider (string)
        /// </summary>
        [Input("cloudProvider")]
        public Input<ClusterRkeConfigCloudProviderGetArgs>? CloudProvider { get; set; }

        /// <summary>
        /// RKE dns add-on. Just for Rancher v2.2.x (list maxitems:1)
        /// </summary>
        [Input("dns")]
        public Input<ClusterRkeConfigDnsGetArgs>? Dns { get; set; }

        /// <summary>
        /// Ignore docker version. Default `true` (bool)
        /// </summary>
        [Input("ignoreDockerVersion")]
        public Input<bool>? IgnoreDockerVersion { get; set; }

        /// <summary>
        /// Kubernetes ingress configuration (list maxitems:1)
        /// </summary>
        [Input("ingress")]
        public Input<ClusterRkeConfigIngressGetArgs>? Ingress { get; set; }

        /// <summary>
        /// The Kubernetes master version (string)
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// Kubernetes cluster monitoring (list maxitems:1)
        /// </summary>
        [Input("monitoring")]
        public Input<ClusterRkeConfigMonitoringGetArgs>? Monitoring { get; set; }

        /// <summary>
        /// Network for GKE cluster (string)
        /// </summary>
        [Input("network")]
        public Input<ClusterRkeConfigNetworkGetArgs>? Network { get; set; }

        [Input("nodes")]
        private InputList<ClusterRkeConfigNodesGetArgs>? _nodes;

        /// <summary>
        /// RKE cluster nodes (list)
        /// </summary>
        public InputList<ClusterRkeConfigNodesGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<ClusterRkeConfigNodesGetArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// Prefix to customize Kubernetes path (string)
        /// </summary>
        [Input("prefixPath")]
        public Input<string>? PrefixPath { get; set; }

        [Input("privateRegistries")]
        private InputList<ClusterRkeConfigPrivateRegistriesGetArgs>? _privateRegistries;

        /// <summary>
        /// private registries for docker images (list)
        /// </summary>
        public InputList<ClusterRkeConfigPrivateRegistriesGetArgs> PrivateRegistries
        {
            get => _privateRegistries ?? (_privateRegistries = new InputList<ClusterRkeConfigPrivateRegistriesGetArgs>());
            set => _privateRegistries = value;
        }

        /// <summary>
        /// Kubernetes cluster services (list maxitems:1)
        /// </summary>
        [Input("services")]
        public Input<ClusterRkeConfigServicesGetArgs>? Services { get; set; }

        /// <summary>
        /// Use ssh agent auth. Default `false` (bool)
        /// </summary>
        [Input("sshAgentAuth")]
        public Input<bool>? SshAgentAuth { get; set; }

        /// <summary>
        /// Cluster level SSH certificate path (string)
        /// </summary>
        [Input("sshCertPath")]
        public Input<string>? SshCertPath { get; set; }

        /// <summary>
        /// Node SSH private key path (string)
        /// </summary>
        [Input("sshKeyPath")]
        public Input<string>? SshKeyPath { get; set; }

        /// <summary>
        /// K3S upgrade strategy (List maxitems: 1)
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<ClusterRkeConfigUpgradeStrategyGetArgs>? UpgradeStrategy { get; set; }

        public ClusterRkeConfigGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigIngressArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)
        /// </summary>
        [Input("dnsPolicy")]
        public Input<string>? DnsPolicy { get; set; }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("nodeSelector")]
        private InputMap<object>? _nodeSelector;

        /// <summary>
        /// Node selector for RKE Ingress (map)
        /// </summary>
        public InputMap<object> NodeSelector
        {
            get => _nodeSelector ?? (_nodeSelector = new InputMap<object>());
            set => _nodeSelector = value;
        }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        /// <summary>
        /// Provider for RKE monitoring (string)
        /// </summary>
        [Input("provider")]
        public Input<string>? Provider { get; set; }

        public ClusterRkeConfigIngressArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigIngressGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)
        /// </summary>
        [Input("dnsPolicy")]
        public Input<string>? DnsPolicy { get; set; }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("nodeSelector")]
        private InputMap<object>? _nodeSelector;

        /// <summary>
        /// Node selector for RKE Ingress (map)
        /// </summary>
        public InputMap<object> NodeSelector
        {
            get => _nodeSelector ?? (_nodeSelector = new InputMap<object>());
            set => _nodeSelector = value;
        }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        /// <summary>
        /// Provider for RKE monitoring (string)
        /// </summary>
        [Input("provider")]
        public Input<string>? Provider { get; set; }

        public ClusterRkeConfigIngressGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigMonitoringArgs : Pulumi.ResourceArgs
    {
        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        /// <summary>
        /// Provider for RKE monitoring (string)
        /// </summary>
        [Input("provider")]
        public Input<string>? Provider { get; set; }

        public ClusterRkeConfigMonitoringArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigMonitoringGetArgs : Pulumi.ResourceArgs
    {
        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        /// <summary>
        /// Provider for RKE monitoring (string)
        /// </summary>
        [Input("provider")]
        public Input<string>? Provider { get; set; }

        public ClusterRkeConfigMonitoringGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Calico provider config for RKE network (list maxitems:1)
        /// </summary>
        [Input("calicoNetworkProvider")]
        public Input<ClusterRkeConfigNetworkCalicoNetworkProviderArgs>? CalicoNetworkProvider { get; set; }

        /// <summary>
        /// Canal provider config for RKE network (list maxitems:1)
        /// </summary>
        [Input("canalNetworkProvider")]
        public Input<ClusterRkeConfigNetworkCanalNetworkProviderArgs>? CanalNetworkProvider { get; set; }

        /// <summary>
        /// Flannel provider config for RKE network (list maxitems:1)
        /// </summary>
        [Input("flannelNetworkProvider")]
        public Input<ClusterRkeConfigNetworkFlannelNetworkProviderArgs>? FlannelNetworkProvider { get; set; }

        /// <summary>
        /// Network provider MTU. Default `0` (int)
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        /// <summary>
        /// Plugin for RKE network. `canal` (default), `flannel`, `calico`, `none` and `weave` are supported. (string)
        /// </summary>
        [Input("plugin")]
        public Input<string>? Plugin { get; set; }

        /// <summary>
        /// Weave provider config for RKE network (list maxitems:1)
        /// </summary>
        [Input("weaveNetworkProvider")]
        public Input<ClusterRkeConfigNetworkWeaveNetworkProviderArgs>? WeaveNetworkProvider { get; set; }

        public ClusterRkeConfigNetworkArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkCalicoNetworkProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE options for Calico network provider (string)
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        public ClusterRkeConfigNetworkCalicoNetworkProviderArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkCalicoNetworkProviderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE options for Calico network provider (string)
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        public ClusterRkeConfigNetworkCalicoNetworkProviderGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkCanalNetworkProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Iface config Flannel network provider (string)
        /// </summary>
        [Input("iface")]
        public Input<string>? Iface { get; set; }

        public ClusterRkeConfigNetworkCanalNetworkProviderArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkCanalNetworkProviderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Iface config Flannel network provider (string)
        /// </summary>
        [Input("iface")]
        public Input<string>? Iface { get; set; }

        public ClusterRkeConfigNetworkCanalNetworkProviderGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkFlannelNetworkProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Iface config Flannel network provider (string)
        /// </summary>
        [Input("iface")]
        public Input<string>? Iface { get; set; }

        public ClusterRkeConfigNetworkFlannelNetworkProviderArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkFlannelNetworkProviderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Iface config Flannel network provider (string)
        /// </summary>
        [Input("iface")]
        public Input<string>? Iface { get; set; }

        public ClusterRkeConfigNetworkFlannelNetworkProviderGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Calico provider config for RKE network (list maxitems:1)
        /// </summary>
        [Input("calicoNetworkProvider")]
        public Input<ClusterRkeConfigNetworkCalicoNetworkProviderGetArgs>? CalicoNetworkProvider { get; set; }

        /// <summary>
        /// Canal provider config for RKE network (list maxitems:1)
        /// </summary>
        [Input("canalNetworkProvider")]
        public Input<ClusterRkeConfigNetworkCanalNetworkProviderGetArgs>? CanalNetworkProvider { get; set; }

        /// <summary>
        /// Flannel provider config for RKE network (list maxitems:1)
        /// </summary>
        [Input("flannelNetworkProvider")]
        public Input<ClusterRkeConfigNetworkFlannelNetworkProviderGetArgs>? FlannelNetworkProvider { get; set; }

        /// <summary>
        /// Network provider MTU. Default `0` (int)
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("options")]
        private InputMap<object>? _options;

        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public InputMap<object> Options
        {
            get => _options ?? (_options = new InputMap<object>());
            set => _options = value;
        }

        /// <summary>
        /// Plugin for RKE network. `canal` (default), `flannel`, `calico`, `none` and `weave` are supported. (string)
        /// </summary>
        [Input("plugin")]
        public Input<string>? Plugin { get; set; }

        /// <summary>
        /// Weave provider config for RKE network (list maxitems:1)
        /// </summary>
        [Input("weaveNetworkProvider")]
        public Input<ClusterRkeConfigNetworkWeaveNetworkProviderGetArgs>? WeaveNetworkProvider { get; set; }

        public ClusterRkeConfigNetworkGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkWeaveNetworkProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        public ClusterRkeConfigNetworkWeaveNetworkProviderArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNetworkWeaveNetworkProviderGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password", required: true)]
        public Input<string> Password { get; set; } = null!;

        public ClusterRkeConfigNetworkWeaveNetworkProviderGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNodesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address ip for node (string)
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Docker socket for node (string)
        /// </summary>
        [Input("dockerSocket")]
        public Input<string>? DockerSocket { get; set; }

        /// <summary>
        /// Hostname override for node (string)
        /// </summary>
        [Input("hostnameOverride")]
        public Input<string>? HostnameOverride { get; set; }

        /// <summary>
        /// Internal ip for node (string)
        /// </summary>
        [Input("internalAddress")]
        public Input<string>? InternalAddress { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// Id for the node (string)
        /// </summary>
        [Input("nodeId")]
        public Input<string>? NodeId { get; set; }

        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        [Input("roles", required: true)]
        private InputList<string>? _roles;

        /// <summary>
        /// Roles for the node. `controlplane`, `etcd` and `worker` are supported. (list)
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        /// <summary>
        /// Use ssh agent auth. Default `false` (bool)
        /// </summary>
        [Input("sshAgentAuth")]
        public Input<bool>? SshAgentAuth { get; set; }

        /// <summary>
        /// Node SSH private key (string)
        /// </summary>
        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        /// <summary>
        /// Node SSH private key path (string)
        /// </summary>
        [Input("sshKeyPath")]
        public Input<string>? SshKeyPath { get; set; }

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        public ClusterRkeConfigNodesArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigNodesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address ip for node (string)
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Docker socket for node (string)
        /// </summary>
        [Input("dockerSocket")]
        public Input<string>? DockerSocket { get; set; }

        /// <summary>
        /// Hostname override for node (string)
        /// </summary>
        [Input("hostnameOverride")]
        public Input<string>? HostnameOverride { get; set; }

        /// <summary>
        /// Internal ip for node (string)
        /// </summary>
        [Input("internalAddress")]
        public Input<string>? InternalAddress { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// Id for the node (string)
        /// </summary>
        [Input("nodeId")]
        public Input<string>? NodeId { get; set; }

        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        [Input("roles", required: true)]
        private InputList<string>? _roles;

        /// <summary>
        /// Roles for the node. `controlplane`, `etcd` and `worker` are supported. (list)
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        /// <summary>
        /// Use ssh agent auth. Default `false` (bool)
        /// </summary>
        [Input("sshAgentAuth")]
        public Input<bool>? SshAgentAuth { get; set; }

        /// <summary>
        /// Node SSH private key (string)
        /// </summary>
        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        /// <summary>
        /// Node SSH private key path (string)
        /// </summary>
        [Input("sshKeyPath")]
        public Input<string>? SshKeyPath { get; set; }

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        public ClusterRkeConfigNodesGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigPrivateRegistriesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set as default registry. Default `false` (bool)
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Registry URL (string)
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ClusterRkeConfigPrivateRegistriesArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigPrivateRegistriesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set as default registry. Default `false` (bool)
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Registry password (string)
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Registry URL (string)
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Registry user (string)
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ClusterRkeConfigPrivateRegistriesGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Etcd options for RKE services (list maxitems:1)
        /// </summary>
        [Input("etcd")]
        public Input<ClusterRkeConfigServicesEtcdArgs>? Etcd { get; set; }

        /// <summary>
        /// Kube API options for RKE services (list maxitems:1)
        /// </summary>
        [Input("kubeApi")]
        public Input<ClusterRkeConfigServicesKubeApiArgs>? KubeApi { get; set; }

        /// <summary>
        /// Kube Controller options for RKE services (list maxitems:1)
        /// </summary>
        [Input("kubeController")]
        public Input<ClusterRkeConfigServicesKubeControllerArgs>? KubeController { get; set; }

        /// <summary>
        /// Kubelet options for RKE services (list maxitems:1)
        /// </summary>
        [Input("kubelet")]
        public Input<ClusterRkeConfigServicesKubeletArgs>? Kubelet { get; set; }

        /// <summary>
        /// Kubeproxy options for RKE services (list maxitems:1)
        /// </summary>
        [Input("kubeproxy")]
        public Input<ClusterRkeConfigServicesKubeproxyArgs>? Kubeproxy { get; set; }

        /// <summary>
        /// Scheduler options for RKE services (list maxitems:1)
        /// </summary>
        [Input("scheduler")]
        public Input<ClusterRkeConfigServicesSchedulerArgs>? Scheduler { get; set; }

        public ClusterRkeConfigServicesArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesEtcdArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup options for etcd service. Just for Rancher v2.2.x (list maxitems:1)
        /// </summary>
        [Input("backupConfig")]
        public Input<ClusterRkeConfigServicesEtcdBackupConfigArgs>? BackupConfig { get; set; }

        /// <summary>
        /// TLS CA certificate for etcd service (string)
        /// </summary>
        [Input("caCert")]
        public Input<string>? CaCert { get; set; }

        /// <summary>
        /// TLS certificate for etcd service (string)
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        /// <summary>
        /// Creation option for etcd service (string)
        /// </summary>
        [Input("creation")]
        public Input<string>? Creation { get; set; }

        [Input("externalUrls")]
        private InputList<string>? _externalUrls;

        /// <summary>
        /// External urls for etcd service (list)
        /// </summary>
        public InputList<string> ExternalUrls
        {
            get => _externalUrls ?? (_externalUrls = new InputList<string>());
            set => _externalUrls = value;
        }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Etcd service GID. Default: `0`. For Rancher v2.3.x or above (int)
        /// </summary>
        [Input("gid")]
        public Input<int>? Gid { get; set; }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// TLS key for etcd service (string)
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Retention for etcd backup. Default `6` (int)
        /// </summary>
        [Input("retention")]
        public Input<string>? Retention { get; set; }

        /// <summary>
        /// Snapshot option for etcd service (bool)
        /// </summary>
        [Input("snapshot")]
        public Input<bool>? Snapshot { get; set; }

        /// <summary>
        /// Etcd service UID. Default: `0`. For Rancher v2.3.x or above (int)
        /// </summary>
        [Input("uid")]
        public Input<int>? Uid { get; set; }

        public ClusterRkeConfigServicesEtcdArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesEtcdBackupConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Interval hours for etcd backup. Default `12` (int)
        /// </summary>
        [Input("intervalHours")]
        public Input<int>? IntervalHours { get; set; }

        /// <summary>
        /// Retention for etcd backup. Default `6` (int)
        /// </summary>
        [Input("retention")]
        public Input<int>? Retention { get; set; }

        /// <summary>
        /// S3 config options for etcd backup (list maxitems:1)
        /// </summary>
        [Input("s3BackupConfig")]
        public Input<ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs>? S3BackupConfig { get; set; }

        /// <summary>
        /// Safe timestamp for etcd backup. Default: `false` (bool)
        /// </summary>
        [Input("safeTimestamp")]
        public Input<bool>? SafeTimestamp { get; set; }

        public ClusterRkeConfigServicesEtcdBackupConfigArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesEtcdBackupConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Interval hours for etcd backup. Default `12` (int)
        /// </summary>
        [Input("intervalHours")]
        public Input<int>? IntervalHours { get; set; }

        /// <summary>
        /// Retention for etcd backup. Default `6` (int)
        /// </summary>
        [Input("retention")]
        public Input<int>? Retention { get; set; }

        /// <summary>
        /// S3 config options for etcd backup (list maxitems:1)
        /// </summary>
        [Input("s3BackupConfig")]
        public Input<ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigGetArgs>? S3BackupConfig { get; set; }

        /// <summary>
        /// Safe timestamp for etcd backup. Default: `false` (bool)
        /// </summary>
        [Input("safeTimestamp")]
        public Input<bool>? SafeTimestamp { get; set; }

        public ClusterRkeConfigServicesEtcdBackupConfigGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Client ID to use (string)
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// Bucket name for S3 service (string)
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// Base64 encoded custom CA for S3 service. Use filebase64(&lt;FILE&gt;) for encoding file. Available from Rancher v2.2.5 (string)
        /// </summary>
        [Input("customCa")]
        public Input<string>? CustomCa { get; set; }

        /// <summary>
        /// Endpoint for S3 service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Folder for S3 service. Available from Rancher v2.2.7 (string)
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The AWS Client Secret associated with the Client ID (string)
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        public ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Client ID to use (string)
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// Bucket name for S3 service (string)
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// Base64 encoded custom CA for S3 service. Use filebase64(&lt;FILE&gt;) for encoding file. Available from Rancher v2.2.5 (string)
        /// </summary>
        [Input("customCa")]
        public Input<string>? CustomCa { get; set; }

        /// <summary>
        /// Endpoint for S3 service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Folder for S3 service. Available from Rancher v2.2.7 (string)
        /// </summary>
        [Input("folder")]
        public Input<string>? Folder { get; set; }

        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The AWS Client Secret associated with the Client ID (string)
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        public ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfigGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesEtcdGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup options for etcd service. Just for Rancher v2.2.x (list maxitems:1)
        /// </summary>
        [Input("backupConfig")]
        public Input<ClusterRkeConfigServicesEtcdBackupConfigGetArgs>? BackupConfig { get; set; }

        /// <summary>
        /// TLS CA certificate for etcd service (string)
        /// </summary>
        [Input("caCert")]
        public Input<string>? CaCert { get; set; }

        /// <summary>
        /// TLS certificate for etcd service (string)
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        /// <summary>
        /// Creation option for etcd service (string)
        /// </summary>
        [Input("creation")]
        public Input<string>? Creation { get; set; }

        [Input("externalUrls")]
        private InputList<string>? _externalUrls;

        /// <summary>
        /// External urls for etcd service (list)
        /// </summary>
        public InputList<string> ExternalUrls
        {
            get => _externalUrls ?? (_externalUrls = new InputList<string>());
            set => _externalUrls = value;
        }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Etcd service GID. Default: `0`. For Rancher v2.3.x or above (int)
        /// </summary>
        [Input("gid")]
        public Input<int>? Gid { get; set; }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// TLS key for etcd service (string)
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Retention for etcd backup. Default `6` (int)
        /// </summary>
        [Input("retention")]
        public Input<string>? Retention { get; set; }

        /// <summary>
        /// Snapshot option for etcd service (bool)
        /// </summary>
        [Input("snapshot")]
        public Input<bool>? Snapshot { get; set; }

        /// <summary>
        /// Etcd service UID. Default: `0`. For Rancher v2.3.x or above (int)
        /// </summary>
        [Input("uid")]
        public Input<int>? Uid { get; set; }

        public ClusterRkeConfigServicesEtcdGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Etcd options for RKE services (list maxitems:1)
        /// </summary>
        [Input("etcd")]
        public Input<ClusterRkeConfigServicesEtcdGetArgs>? Etcd { get; set; }

        /// <summary>
        /// Kube API options for RKE services (list maxitems:1)
        /// </summary>
        [Input("kubeApi")]
        public Input<ClusterRkeConfigServicesKubeApiGetArgs>? KubeApi { get; set; }

        /// <summary>
        /// Kube Controller options for RKE services (list maxitems:1)
        /// </summary>
        [Input("kubeController")]
        public Input<ClusterRkeConfigServicesKubeControllerGetArgs>? KubeController { get; set; }

        /// <summary>
        /// Kubelet options for RKE services (list maxitems:1)
        /// </summary>
        [Input("kubelet")]
        public Input<ClusterRkeConfigServicesKubeletGetArgs>? Kubelet { get; set; }

        /// <summary>
        /// Kubeproxy options for RKE services (list maxitems:1)
        /// </summary>
        [Input("kubeproxy")]
        public Input<ClusterRkeConfigServicesKubeproxyGetArgs>? Kubeproxy { get; set; }

        /// <summary>
        /// Scheduler options for RKE services (list maxitems:1)
        /// </summary>
        [Input("scheduler")]
        public Input<ClusterRkeConfigServicesSchedulerGetArgs>? Scheduler { get; set; }

        public ClusterRkeConfigServicesGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiArgs : Pulumi.ResourceArgs
    {
        [Input("admissionConfiguration")]
        private InputMap<object>? _admissionConfiguration;

        /// <summary>
        /// Admission configuration (map)
        /// </summary>
        public InputMap<object> AdmissionConfiguration
        {
            get => _admissionConfiguration ?? (_admissionConfiguration = new InputMap<object>());
            set => _admissionConfiguration = value;
        }

        /// <summary>
        /// Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) Default: `false` (bool)
        /// </summary>
        [Input("alwaysPullImages")]
        public Input<bool>? AlwaysPullImages { get; set; }

        /// <summary>
        /// K8s audit log configuration. (list maxitems: 1)
        /// </summary>
        [Input("auditLog")]
        public Input<ClusterRkeConfigServicesKubeApiAuditLogArgs>? AuditLog { get; set; }

        /// <summary>
        /// K8s event rate limit configuration. (list maxitems: 1)
        /// </summary>
        [Input("eventRateLimit")]
        public Input<ClusterRkeConfigServicesKubeApiEventRateLimitArgs>? EventRateLimit { get; set; }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Pod Security Policy option for kube API service. Default `false` (bool)
        /// </summary>
        [Input("podSecurityPolicy")]
        public Input<bool>? PodSecurityPolicy { get; set; }

        /// <summary>
        /// [Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)
        /// </summary>
        [Input("secretsEncryptionConfig")]
        public Input<ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs>? SecretsEncryptionConfig { get; set; }

        /// <summary>
        /// Service Cluster ip Range option for kube controller service (string)
        /// </summary>
        [Input("serviceClusterIpRange")]
        public Input<string>? ServiceClusterIpRange { get; set; }

        /// <summary>
        /// Service Node Port Range option for kube API service (string)
        /// </summary>
        [Input("serviceNodePortRange")]
        public Input<string>? ServiceNodePortRange { get; set; }

        public ClusterRkeConfigServicesKubeApiArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiAuditLogArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Event rate limit configuration. (map)
        /// </summary>
        [Input("configuration")]
        public Input<ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs>? Configuration { get; set; }

        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        public ClusterRkeConfigServicesKubeApiAuditLogArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Audit log format. Default: 'json' (string)
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Audit log max age. Default: `30` (int)
        /// </summary>
        [Input("maxAge")]
        public Input<int>? MaxAge { get; set; }

        /// <summary>
        /// Audit log max backup. Default: `10` (int)
        /// </summary>
        [Input("maxBackup")]
        public Input<int>? MaxBackup { get; set; }

        /// <summary>
        /// Audit log max size. Default: `100` (int)
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Audit policy yaml encoded definition. `apiVersion` and `kind: Policy\nrules:"` fields are required in the yaml. Ex. `"apiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n- level: RequestResponse\n  resources:\n  - resources:\n    - pods\n"` [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string)
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        public ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiAuditLogConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Audit log format. Default: 'json' (string)
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Audit log max age. Default: `30` (int)
        /// </summary>
        [Input("maxAge")]
        public Input<int>? MaxAge { get; set; }

        /// <summary>
        /// Audit log max backup. Default: `10` (int)
        /// </summary>
        [Input("maxBackup")]
        public Input<int>? MaxBackup { get; set; }

        /// <summary>
        /// Audit log max size. Default: `100` (int)
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Audit policy yaml encoded definition. `apiVersion` and `kind: Policy\nrules:"` fields are required in the yaml. Ex. `"apiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n- level: RequestResponse\n  resources:\n  - resources:\n    - pods\n"` [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string)
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        public ClusterRkeConfigServicesKubeApiAuditLogConfigurationGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiAuditLogGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Event rate limit configuration. (map)
        /// </summary>
        [Input("configuration")]
        public Input<ClusterRkeConfigServicesKubeApiAuditLogConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        public ClusterRkeConfigServicesKubeApiAuditLogGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiEventRateLimitArgs : Pulumi.ResourceArgs
    {
        [Input("configuration")]
        private InputMap<object>? _configuration;

        /// <summary>
        /// Event rate limit configuration. (map)
        /// </summary>
        public InputMap<object> Configuration
        {
            get => _configuration ?? (_configuration = new InputMap<object>());
            set => _configuration = value;
        }

        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        public ClusterRkeConfigServicesKubeApiEventRateLimitArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiEventRateLimitGetArgs : Pulumi.ResourceArgs
    {
        [Input("configuration")]
        private InputMap<object>? _configuration;

        /// <summary>
        /// Event rate limit configuration. (map)
        /// </summary>
        public InputMap<object> Configuration
        {
            get => _configuration ?? (_configuration = new InputMap<object>());
            set => _configuration = value;
        }

        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        public ClusterRkeConfigServicesKubeApiEventRateLimitGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiGetArgs : Pulumi.ResourceArgs
    {
        [Input("admissionConfiguration")]
        private InputMap<object>? _admissionConfiguration;

        /// <summary>
        /// Admission configuration (map)
        /// </summary>
        public InputMap<object> AdmissionConfiguration
        {
            get => _admissionConfiguration ?? (_admissionConfiguration = new InputMap<object>());
            set => _admissionConfiguration = value;
        }

        /// <summary>
        /// Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) Default: `false` (bool)
        /// </summary>
        [Input("alwaysPullImages")]
        public Input<bool>? AlwaysPullImages { get; set; }

        /// <summary>
        /// K8s audit log configuration. (list maxitems: 1)
        /// </summary>
        [Input("auditLog")]
        public Input<ClusterRkeConfigServicesKubeApiAuditLogGetArgs>? AuditLog { get; set; }

        /// <summary>
        /// K8s event rate limit configuration. (list maxitems: 1)
        /// </summary>
        [Input("eventRateLimit")]
        public Input<ClusterRkeConfigServicesKubeApiEventRateLimitGetArgs>? EventRateLimit { get; set; }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Pod Security Policy option for kube API service. Default `false` (bool)
        /// </summary>
        [Input("podSecurityPolicy")]
        public Input<bool>? PodSecurityPolicy { get; set; }

        /// <summary>
        /// [Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)
        /// </summary>
        [Input("secretsEncryptionConfig")]
        public Input<ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigGetArgs>? SecretsEncryptionConfig { get; set; }

        /// <summary>
        /// Service Cluster ip Range option for kube controller service (string)
        /// </summary>
        [Input("serviceClusterIpRange")]
        public Input<string>? ServiceClusterIpRange { get; set; }

        /// <summary>
        /// Service Node Port Range option for kube API service (string)
        /// </summary>
        [Input("serviceNodePortRange")]
        public Input<string>? ServiceNodePortRange { get; set; }

        public ClusterRkeConfigServicesKubeApiGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs : Pulumi.ResourceArgs
    {
        [Input("customConfig")]
        private InputMap<object>? _customConfig;

        /// <summary>
        /// Secrets encryption configuration. (map)
        /// </summary>
        public InputMap<object> CustomConfig
        {
            get => _customConfig ?? (_customConfig = new InputMap<object>());
            set => _customConfig = value;
        }

        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        public ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("customConfig")]
        private InputMap<object>? _customConfig;

        /// <summary>
        /// Secrets encryption configuration. (map)
        /// </summary>
        public InputMap<object> CustomConfig
        {
            get => _customConfig ?? (_customConfig = new InputMap<object>());
            set => _customConfig = value;
        }

        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        public ClusterRkeConfigServicesKubeApiSecretsEncryptionConfigGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeControllerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster CIDR option for kube controller service (string)
        /// </summary>
        [Input("clusterCidr")]
        public Input<string>? ClusterCidr { get; set; }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Service Cluster ip Range option for kube controller service (string)
        /// </summary>
        [Input("serviceClusterIpRange")]
        public Input<string>? ServiceClusterIpRange { get; set; }

        public ClusterRkeConfigServicesKubeControllerArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeControllerGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster CIDR option for kube controller service (string)
        /// </summary>
        [Input("clusterCidr")]
        public Input<string>? ClusterCidr { get; set; }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Service Cluster ip Range option for kube controller service (string)
        /// </summary>
        [Input("serviceClusterIpRange")]
        public Input<string>? ServiceClusterIpRange { get; set; }

        public ClusterRkeConfigServicesKubeControllerGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeletArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster DNS Server option for kubelet service (string)
        /// </summary>
        [Input("clusterDnsServer")]
        public Input<string>? ClusterDnsServer { get; set; }

        /// <summary>
        /// Cluster Domain option for kubelet service (string)
        /// </summary>
        [Input("clusterDomain")]
        public Input<string>? ClusterDomain { get; set; }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Enable or disable failing when swap on is not supported (bool)
        /// * `generate_serving_certificate` [Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)
        /// </summary>
        [Input("failSwapOn")]
        public Input<bool>? FailSwapOn { get; set; }

        [Input("generateServingCertificate")]
        public Input<bool>? GenerateServingCertificate { get; set; }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Infra container image for kubelet service (string)
        /// </summary>
        [Input("infraContainerImage")]
        public Input<string>? InfraContainerImage { get; set; }

        public ClusterRkeConfigServicesKubeletArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeletGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster DNS Server option for kubelet service (string)
        /// </summary>
        [Input("clusterDnsServer")]
        public Input<string>? ClusterDnsServer { get; set; }

        /// <summary>
        /// Cluster Domain option for kubelet service (string)
        /// </summary>
        [Input("clusterDomain")]
        public Input<string>? ClusterDomain { get; set; }

        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Enable or disable failing when swap on is not supported (bool)
        /// * `generate_serving_certificate` [Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)
        /// </summary>
        [Input("failSwapOn")]
        public Input<bool>? FailSwapOn { get; set; }

        [Input("generateServingCertificate")]
        public Input<bool>? GenerateServingCertificate { get; set; }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Infra container image for kubelet service (string)
        /// </summary>
        [Input("infraContainerImage")]
        public Input<string>? InfraContainerImage { get; set; }

        public ClusterRkeConfigServicesKubeletGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeproxyArgs : Pulumi.ResourceArgs
    {
        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        public ClusterRkeConfigServicesKubeproxyArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesKubeproxyGetArgs : Pulumi.ResourceArgs
    {
        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        public ClusterRkeConfigServicesKubeproxyGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesSchedulerArgs : Pulumi.ResourceArgs
    {
        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        public ClusterRkeConfigServicesSchedulerArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigServicesSchedulerGetArgs : Pulumi.ResourceArgs
    {
        [Input("extraArgs")]
        private InputMap<object>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<object> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<object>());
            set => _extraArgs = value;
        }

        [Input("extraBinds")]
        private InputList<string>? _extraBinds;

        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraBinds
        {
            get => _extraBinds ?? (_extraBinds = new InputList<string>());
            set => _extraBinds = value;
        }

        [Input("extraEnvs")]
        private InputList<string>? _extraEnvs;

        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public InputList<string> ExtraEnvs
        {
            get => _extraEnvs ?? (_extraEnvs = new InputList<string>());
            set => _extraEnvs = value;
        }

        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        public ClusterRkeConfigServicesSchedulerGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigUpgradeStrategyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE drain nodes. Default: `false` (bool)
        /// </summary>
        [Input("drain")]
        public Input<bool>? Drain { get; set; }

        /// <summary>
        /// RKE drain node input (list Maxitems: 1)
        /// </summary>
        [Input("drainInput")]
        public Input<ClusterRkeConfigUpgradeStrategyDrainInputArgs>? DrainInput { get; set; }

        /// <summary>
        /// RKE max unavailable controlplane nodes. Default: `1` (string)
        /// </summary>
        [Input("maxUnavailableControlplane")]
        public Input<string>? MaxUnavailableControlplane { get; set; }

        /// <summary>
        /// RKE max unavailable worker nodes. Default: `10%` (string)
        /// </summary>
        [Input("maxUnavailableWorker")]
        public Input<string>? MaxUnavailableWorker { get; set; }

        public ClusterRkeConfigUpgradeStrategyArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigUpgradeStrategyDrainInputArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Delete RKE node local data. Default: `false` (bool)
        /// </summary>
        [Input("deleteLocalData")]
        public Input<bool>? DeleteLocalData { get; set; }

        /// <summary>
        /// Force RKE node drain. Default: `false` (bool)
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// RKE node drain grace period. Default: `-1` (int)
        /// </summary>
        [Input("gracePeriod")]
        public Input<int>? GracePeriod { get; set; }

        /// <summary>
        /// Ignore RKE daemon sets. Default: `true` (bool)
        /// </summary>
        [Input("ignoreDaemonSets")]
        public Input<bool>? IgnoreDaemonSets { get; set; }

        /// <summary>
        /// RKE node drain timeout. Default: `60` (int)
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public ClusterRkeConfigUpgradeStrategyDrainInputArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigUpgradeStrategyDrainInputGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Delete RKE node local data. Default: `false` (bool)
        /// </summary>
        [Input("deleteLocalData")]
        public Input<bool>? DeleteLocalData { get; set; }

        /// <summary>
        /// Force RKE node drain. Default: `false` (bool)
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// RKE node drain grace period. Default: `-1` (int)
        /// </summary>
        [Input("gracePeriod")]
        public Input<int>? GracePeriod { get; set; }

        /// <summary>
        /// Ignore RKE daemon sets. Default: `true` (bool)
        /// </summary>
        [Input("ignoreDaemonSets")]
        public Input<bool>? IgnoreDaemonSets { get; set; }

        /// <summary>
        /// RKE node drain timeout. Default: `60` (int)
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public ClusterRkeConfigUpgradeStrategyDrainInputGetArgs()
        {
        }
    }

    public sealed class ClusterRkeConfigUpgradeStrategyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// RKE drain nodes. Default: `false` (bool)
        /// </summary>
        [Input("drain")]
        public Input<bool>? Drain { get; set; }

        /// <summary>
        /// RKE drain node input (list Maxitems: 1)
        /// </summary>
        [Input("drainInput")]
        public Input<ClusterRkeConfigUpgradeStrategyDrainInputGetArgs>? DrainInput { get; set; }

        /// <summary>
        /// RKE max unavailable controlplane nodes. Default: `1` (string)
        /// </summary>
        [Input("maxUnavailableControlplane")]
        public Input<string>? MaxUnavailableControlplane { get; set; }

        /// <summary>
        /// RKE max unavailable worker nodes. Default: `10%` (string)
        /// </summary>
        [Input("maxUnavailableWorker")]
        public Input<string>? MaxUnavailableWorker { get; set; }

        public ClusterRkeConfigUpgradeStrategyGetArgs()
        {
        }
    }

    public sealed class ClusterScheduledClusterScanArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Cluster scan config (List maxitems:1)
        /// </summary>
        [Input("scanConfig", required: true)]
        public Input<ClusterScheduledClusterScanScanConfigArgs> ScanConfig { get; set; } = null!;

        /// <summary>
        /// Cluster scan schedule config (list maxitems:1)
        /// </summary>
        [Input("scheduleConfig", required: true)]
        public Input<ClusterScheduledClusterScanScheduleConfigArgs> ScheduleConfig { get; set; } = null!;

        public ClusterScheduledClusterScanArgs()
        {
        }
    }

    public sealed class ClusterScheduledClusterScanGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Cluster scan config (List maxitems:1)
        /// </summary>
        [Input("scanConfig", required: true)]
        public Input<ClusterScheduledClusterScanScanConfigGetArgs> ScanConfig { get; set; } = null!;

        /// <summary>
        /// Cluster scan schedule config (list maxitems:1)
        /// </summary>
        [Input("scheduleConfig", required: true)]
        public Input<ClusterScheduledClusterScanScheduleConfigGetArgs> ScheduleConfig { get; set; } = null!;

        public ClusterScheduledClusterScanGetArgs()
        {
        }
    }

    public sealed class ClusterScheduledClusterScanScanConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster Cis Scan config (List maxitems:1)
        /// </summary>
        [Input("cisScanConfig")]
        public Input<ClusterScheduledClusterScanScanConfigCisScanConfigArgs>? CisScanConfig { get; set; }

        public ClusterScheduledClusterScanScanConfigArgs()
        {
        }
    }

    public sealed class ClusterScheduledClusterScanScanConfigCisScanConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Debug master. Default: `false` (bool)
        /// </summary>
        [Input("debugMaster")]
        public Input<bool>? DebugMaster { get; set; }

        /// <summary>
        /// Debug worker. Default: `false` (bool)
        /// </summary>
        [Input("debugWorker")]
        public Input<bool>? DebugWorker { get; set; }

        /// <summary>
        /// Override benchmark version (string)
        /// </summary>
        [Input("overrideBenchmarkVersion")]
        public Input<string>? OverrideBenchmarkVersion { get; set; }

        [Input("overrideSkips")]
        private InputList<string>? _overrideSkips;

        /// <summary>
        /// Override skip (string)
        /// </summary>
        public InputList<string> OverrideSkips
        {
            get => _overrideSkips ?? (_overrideSkips = new InputList<string>());
            set => _overrideSkips = value;
        }

        /// <summary>
        /// Cis scan profile. Allowed values: `"permissive" (default) || "hardened"` (string)
        /// </summary>
        [Input("profile")]
        public Input<string>? Profile { get; set; }

        public ClusterScheduledClusterScanScanConfigCisScanConfigArgs()
        {
        }
    }

    public sealed class ClusterScheduledClusterScanScanConfigCisScanConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Debug master. Default: `false` (bool)
        /// </summary>
        [Input("debugMaster")]
        public Input<bool>? DebugMaster { get; set; }

        /// <summary>
        /// Debug worker. Default: `false` (bool)
        /// </summary>
        [Input("debugWorker")]
        public Input<bool>? DebugWorker { get; set; }

        /// <summary>
        /// Override benchmark version (string)
        /// </summary>
        [Input("overrideBenchmarkVersion")]
        public Input<string>? OverrideBenchmarkVersion { get; set; }

        [Input("overrideSkips")]
        private InputList<string>? _overrideSkips;

        /// <summary>
        /// Override skip (string)
        /// </summary>
        public InputList<string> OverrideSkips
        {
            get => _overrideSkips ?? (_overrideSkips = new InputList<string>());
            set => _overrideSkips = value;
        }

        /// <summary>
        /// Cis scan profile. Allowed values: `"permissive" (default) || "hardened"` (string)
        /// </summary>
        [Input("profile")]
        public Input<string>? Profile { get; set; }

        public ClusterScheduledClusterScanScanConfigCisScanConfigGetArgs()
        {
        }
    }

    public sealed class ClusterScheduledClusterScanScanConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster Cis Scan config (List maxitems:1)
        /// </summary>
        [Input("cisScanConfig")]
        public Input<ClusterScheduledClusterScanScanConfigCisScanConfigGetArgs>? CisScanConfig { get; set; }

        public ClusterScheduledClusterScanScanConfigGetArgs()
        {
        }
    }

    public sealed class ClusterScheduledClusterScanScheduleConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Crontab schedule. It should contains 5 fields `"&lt;min&gt; &lt;hour&gt; &lt;month_day&gt; &lt;month&gt; &lt;week_day&gt;"` (string)
        /// </summary>
        [Input("cronSchedule", required: true)]
        public Input<string> CronSchedule { get; set; } = null!;

        /// <summary>
        /// Retention for etcd backup. Default `6` (int)
        /// </summary>
        [Input("retention")]
        public Input<int>? Retention { get; set; }

        public ClusterScheduledClusterScanScheduleConfigArgs()
        {
        }
    }

    public sealed class ClusterScheduledClusterScanScheduleConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Crontab schedule. It should contains 5 fields `"&lt;min&gt; &lt;hour&gt; &lt;month_day&gt; &lt;month&gt; &lt;week_day&gt;"` (string)
        /// </summary>
        [Input("cronSchedule", required: true)]
        public Input<string> CronSchedule { get; set; } = null!;

        /// <summary>
        /// Retention for etcd backup. Default `6` (int)
        /// </summary>
        [Input("retention")]
        public Input<int>? Retention { get; set; }

        public ClusterScheduledClusterScanScheduleConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ClusterAksConfig
    {
        /// <summary>
        /// The secret of an Azure Active Directory server application (string)
        /// </summary>
        public readonly string? AadServerAppSecret;
        /// <summary>
        /// The ID of an Azure Active Directory tenant (string)
        /// </summary>
        public readonly string? AadTenantId;
        /// <summary>
        /// The ID of an Azure Active Directory client application of type \"Native\". This application is for user login via kubectl (string)
        /// </summary>
        public readonly string? AddClientAppId;
        /// <summary>
        /// The ID of an Azure Active Directory server application of type \"Web app/API\". This application represents the managed cluster's apiserver (Server application) (string)
        /// </summary>
        public readonly string? AddServerAppId;
        /// <summary>
        /// The administrator username to use for Linux hosts. Default `azureuser` (string)
        /// </summary>
        public readonly string? AdminUsername;
        /// <summary>
        /// DNS prefix to be used to create the FQDN for the agent pool (string)
        /// </summary>
        public readonly string AgentDnsPrefix;
        /// <summary>
        /// GB size to be used to specify the disk for every machine in the agent pool. If you specify 0, it will apply the default according to the \"agent vm size\" specified. Default `0` (int)
        /// </summary>
        public readonly int? AgentOsDiskSize;
        /// <summary>
        /// Name for the agent pool, upto 12 alphanumeric characters. Default `agentpool0` (string)
        /// </summary>
        public readonly string? AgentPoolName;
        /// <summary>
        /// Storage profile specifies what kind of storage used on machine in the agent pool. Chooses from [ManagedDisks StorageAccount]. Default `ManagedDisks` (string)
        /// </summary>
        public readonly string? AgentStorageProfile;
        /// <summary>
        /// Size of machine in the agent pool. Default `Standard_D1_v2` (string)
        /// </summary>
        public readonly string? AgentVmSize;
        /// <summary>
        /// Different authentication API url to use. Default `https://login.microsoftonline.com/` (string)
        /// </summary>
        public readonly string? AuthBaseUrl;
        /// <summary>
        /// Different resource management API url to use. Default `https://management.azure.com/` (string)
        /// </summary>
        public readonly string? BaseUrl;
        /// <summary>
        /// Azure client ID to use (string)
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// Azure client secret associated with the \"client id\" (string)
        /// </summary>
        public readonly string ClientSecret;
        /// <summary>
        /// Number of machines (VMs) in the agent pool. Allowed values must be in the range of 1 to 100 (inclusive). Default `1` (int)
        /// </summary>
        public readonly int? Count;
        /// <summary>
        /// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes Service address range specified in \"service cidr\". Default `10.0.0.10` (string)
        /// </summary>
        public readonly string? DnsServiceIp;
        /// <summary>
        /// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes Service address range specified in \"service cidr\". Default `172.17.0.1/16` (string)
        /// </summary>
        public readonly string? DockerBridgeCidr;
        /// <summary>
        /// Enable the Kubernetes ingress with automatic public DNS name creation. Default `false` (bool)
        /// </summary>
        public readonly bool? EnableHttpApplicationRouting;
        /// <summary>
        /// Turn on Azure Log Analytics monitoring. Uses the Log Analytics \"Default\" workspace if it exists, else creates one. if using an existing workspace, specifies \"log analytics workspace resource id\". Default `true` (bool)
        /// </summary>
        public readonly bool? EnableMonitoring;
        /// <summary>
        /// The Kubernetes master version (string)
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// Azure Kubernetes cluster location. Default `eastus` (string)
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses '{resource group}-{subscription id}-{location code}' (string)
        /// </summary>
        public readonly string? LogAnalyticsWorkspace;
        /// <summary>
        /// The resource group of an existing Azure Log Analytics Workspace to use for storing monitoring data. If not specified, uses the 'Cluster' resource group (string)
        /// </summary>
        public readonly string? LogAnalyticsWorkspaceResourceGroup;
        /// <summary>
        /// DNS prefix to use the Kubernetes cluster control pane (string)
        /// </summary>
        public readonly string MasterDnsPrefix;
        /// <summary>
        /// Maximum number of pods that can run on a node. Default `110` (int)
        /// </summary>
        public readonly int? MaxPods;
        /// <summary>
        /// Network plugin used for building Kubernetes network. Chooses from `azure` or `kubenet`. Default `azure` (string)
        /// </summary>
        public readonly string? NetworkPlugin;
        /// <summary>
        /// Network policy used for building Kubernetes network. Chooses from `calico` (string)
        /// </summary>
        public readonly string? NetworkPolicy;
        /// <summary>
        /// A CIDR notation IP range from which to assign Kubernetes Pod IPs when \"network plugin\" is specified in \"kubenet\". Default `172.244.0.0/16` (string)
        /// </summary>
        public readonly string? PodCidr;
        /// <summary>
        /// The name of the Cluster resource group (string)
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// A CIDR notation IP range from which to assign Kubernetes Service cluster IPs. It must not overlap with any Subnet IP ranges. Default `10.0.0.0/16` (string)
        /// </summary>
        public readonly string? ServiceCidr;
        /// <summary>
        /// Contents of the SSH public key used to authenticate with Linux hosts (string)
        /// </summary>
        public readonly string SshPublicKeyContents;
        /// <summary>
        /// The name of an existing Azure Virtual Subnet. Composite of agent virtual network subnet ID (string)
        /// </summary>
        public readonly string Subnet;
        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        /// </summary>
        public readonly string SubscriptionId;
        /// <summary>
        /// Tags for Kubernetes cluster. For example, foo=bar (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Tag;
        /// <summary>
        /// Azure tenant ID to use (string)
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        /// </summary>
        public readonly string VirtualNetwork;
        /// <summary>
        /// The resource group of an existing Azure Virtual Network. Composite of agent virtual network subnet ID (string)
        /// </summary>
        public readonly string VirtualNetworkResourceGroup;

        [OutputConstructor]
        private ClusterAksConfig(
            string? aadServerAppSecret,
            string? aadTenantId,
            string? addClientAppId,
            string? addServerAppId,
            string? adminUsername,
            string agentDnsPrefix,
            int? agentOsDiskSize,
            string? agentPoolName,
            string? agentStorageProfile,
            string? agentVmSize,
            string? authBaseUrl,
            string? baseUrl,
            string clientId,
            string clientSecret,
            int? count,
            string? dnsServiceIp,
            string? dockerBridgeCidr,
            bool? enableHttpApplicationRouting,
            bool? enableMonitoring,
            string kubernetesVersion,
            string? location,
            string? logAnalyticsWorkspace,
            string? logAnalyticsWorkspaceResourceGroup,
            string masterDnsPrefix,
            int? maxPods,
            string? networkPlugin,
            string? networkPolicy,
            string? podCidr,
            string resourceGroup,
            string? serviceCidr,
            string sshPublicKeyContents,
            string subnet,
            string subscriptionId,
            ImmutableDictionary<string, object> tag,
            string tenantId,
            string virtualNetwork,
            string virtualNetworkResourceGroup)
        {
            AadServerAppSecret = aadServerAppSecret;
            AadTenantId = aadTenantId;
            AddClientAppId = addClientAppId;
            AddServerAppId = addServerAppId;
            AdminUsername = adminUsername;
            AgentDnsPrefix = agentDnsPrefix;
            AgentOsDiskSize = agentOsDiskSize;
            AgentPoolName = agentPoolName;
            AgentStorageProfile = agentStorageProfile;
            AgentVmSize = agentVmSize;
            AuthBaseUrl = authBaseUrl;
            BaseUrl = baseUrl;
            ClientId = clientId;
            ClientSecret = clientSecret;
            Count = count;
            DnsServiceIp = dnsServiceIp;
            DockerBridgeCidr = dockerBridgeCidr;
            EnableHttpApplicationRouting = enableHttpApplicationRouting;
            EnableMonitoring = enableMonitoring;
            KubernetesVersion = kubernetesVersion;
            Location = location;
            LogAnalyticsWorkspace = logAnalyticsWorkspace;
            LogAnalyticsWorkspaceResourceGroup = logAnalyticsWorkspaceResourceGroup;
            MasterDnsPrefix = masterDnsPrefix;
            MaxPods = maxPods;
            NetworkPlugin = networkPlugin;
            NetworkPolicy = networkPolicy;
            PodCidr = podCidr;
            ResourceGroup = resourceGroup;
            ServiceCidr = serviceCidr;
            SshPublicKeyContents = sshPublicKeyContents;
            Subnet = subnet;
            SubscriptionId = subscriptionId;
            Tag = tag;
            TenantId = tenantId;
            VirtualNetwork = virtualNetwork;
            VirtualNetworkResourceGroup = virtualNetworkResourceGroup;
        }
    }

    [OutputType]
    public sealed class ClusterClusterAuthEndpoint
    {
        /// <summary>
        /// CA certs for the authorized cluster endpoint (string)
        /// </summary>
        public readonly string? CaCerts;
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// FQDN for the authorized cluster endpoint (string)
        /// </summary>
        public readonly string? Fqdn;

        [OutputConstructor]
        private ClusterClusterAuthEndpoint(
            string? caCerts,
            bool? enabled,
            string? fqdn)
        {
            CaCerts = caCerts;
            Enabled = enabled;
            Fqdn = fqdn;
        }
    }

    [OutputType]
    public sealed class ClusterClusterMonitoringInput
    {
        /// <summary>
        /// Key/value answers for monitor input (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Answers;
        /// <summary>
        /// rancher-monitoring chart version (string)
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private ClusterClusterMonitoringInput(
            ImmutableDictionary<string, object>? answers,
            string? version)
        {
            Answers = answers;
            Version = version;
        }
    }

    [OutputType]
    public sealed class ClusterClusterRegistrationToken
    {
        /// <summary>
        /// Annotations for cluster registration token object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// Cluster ID (string)
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// Command to execute in a imported k8s cluster (string)
        /// </summary>
        public readonly string Command;
        /// <summary>
        /// (Computed) The ID of the resource (string)
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Insecure command to execute in a imported k8s cluster (string)
        /// </summary>
        public readonly string InsecureCommand;
        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        /// <summary>
        /// K8s manifest url to execute with `kubectl` to import an existing k8s cluster (string)
        /// </summary>
        public readonly string ManifestUrl;
        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Node command to execute in linux nodes for custom k8s cluster (string)
        /// </summary>
        public readonly string NodeCommand;
        /// <summary>
        /// Token for cluster registration token object (string)
        /// </summary>
        public readonly string Token;
        /// <summary>
        /// Node command to execute in windows nodes for custom k8s cluster (string)
        /// </summary>
        public readonly string WindowsNodeCommand;

        [OutputConstructor]
        private ClusterClusterRegistrationToken(
            ImmutableDictionary<string, object> annotations,
            string clusterId,
            string command,
            string id,
            string insecureCommand,
            ImmutableDictionary<string, object> labels,
            string manifestUrl,
            string name,
            string nodeCommand,
            string token,
            string windowsNodeCommand)
        {
            Annotations = annotations;
            ClusterId = clusterId;
            Command = command;
            Id = id;
            InsecureCommand = insecureCommand;
            Labels = labels;
            ManifestUrl = manifestUrl;
            Name = name;
            NodeCommand = nodeCommand;
            Token = token;
            WindowsNodeCommand = windowsNodeCommand;
        }
    }

    [OutputType]
    public sealed class ClusterClusterTemplateAnswers
    {
        /// <summary>
        /// Cluster ID (string)
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// Project ID to apply answer (string)
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Key/values for answer (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Values;

        [OutputConstructor]
        private ClusterClusterTemplateAnswers(
            string clusterId,
            string projectId,
            ImmutableDictionary<string, object> values)
        {
            ClusterId = clusterId;
            ProjectId = projectId;
            Values = values;
        }
    }

    [OutputType]
    public sealed class ClusterClusterTemplateQuestions
    {
        /// <summary>
        /// Default variable value (string)
        /// </summary>
        public readonly string Default;
        /// <summary>
        /// Required variable. Default `false` (bool)
        /// </summary>
        public readonly bool? Required;
        /// <summary>
        /// Variable type. `boolean`, `int` and `string` are allowed. Default `string` (string)
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Variable name (string)
        /// </summary>
        public readonly string Variable;

        [OutputConstructor]
        private ClusterClusterTemplateQuestions(
            string @default,
            bool? required,
            string? type,
            string variable)
        {
            Default = @default;
            Required = required;
            Type = type;
            Variable = variable;
        }
    }

    [OutputType]
    public sealed class ClusterEksConfig
    {
        /// <summary>
        /// The AWS Client ID to use (string)
        /// </summary>
        public readonly string AccessKey;
        /// <summary>
        /// AMI ID to use for the worker nodes instead of the default (string)
        /// </summary>
        public readonly string? Ami;
        /// <summary>
        /// Associate public ip EKS worker nodes. Default `true` (bool)
        /// </summary>
        public readonly bool? AssociateWorkerNodePublicIp;
        /// <summary>
        /// The desired number of worker nodes. Just for Rancher v2.3.x and above. Default `3` (int)
        /// </summary>
        public readonly int? DesiredNodes;
        /// <summary>
        /// The type of machine to use for worker nodes. Default `t2.medium` (string)
        /// </summary>
        public readonly string? InstanceType;
        /// <summary>
        /// Allow user to specify key name to use. Just for Rancher v2.2.7 and above (string)
        /// </summary>
        public readonly string? KeyPairName;
        /// <summary>
        /// The Kubernetes master version (string)
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// The maximum number of worker nodes. Default `3` (int)
        /// </summary>
        public readonly int? MaximumNodes;
        /// <summary>
        /// The minimum number of worker nodes. Default `1` (int)
        /// </summary>
        public readonly int? MinimumNodes;
        /// <summary>
        /// The volume size for each node. Default `20` (int)
        /// </summary>
        public readonly int? NodeVolumeSize;
        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The AWS Client Secret associated with the Client ID (string)
        /// </summary>
        public readonly string SecretKey;
        /// <summary>
        /// List of security groups to use for the cluster. If it's not specified Rancher will create a new security group (list)
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroups;
        /// <summary>
        /// The service role to use to perform the cluster operations in AWS. If it's not specified Rancher will create a new service role (string)
        /// </summary>
        public readonly string? ServiceRole;
        /// <summary>
        /// A session token to use with the client key and secret if applicable (string)
        /// </summary>
        public readonly string? SessionToken;
        /// <summary>
        /// List of subnets in the virtual network to use. If it's not specified Rancher will create 3 news subnets (list)
        /// </summary>
        public readonly ImmutableArray<string> Subnets;
        /// <summary>
        /// Pass user-data to the nodes to perform automated configuration tasks (string)
        /// </summary>
        public readonly string UserData;
        /// <summary>
        /// The name of the virtual network to use. If it's not specified Rancher will create a new VPC (string)
        /// </summary>
        public readonly string? VirtualNetwork;

        [OutputConstructor]
        private ClusterEksConfig(
            string accessKey,
            string? ami,
            bool? associateWorkerNodePublicIp,
            int? desiredNodes,
            string? instanceType,
            string? keyPairName,
            string kubernetesVersion,
            int? maximumNodes,
            int? minimumNodes,
            int? nodeVolumeSize,
            string? region,
            string secretKey,
            ImmutableArray<string> securityGroups,
            string? serviceRole,
            string? sessionToken,
            ImmutableArray<string> subnets,
            string userData,
            string? virtualNetwork)
        {
            AccessKey = accessKey;
            Ami = ami;
            AssociateWorkerNodePublicIp = associateWorkerNodePublicIp;
            DesiredNodes = desiredNodes;
            InstanceType = instanceType;
            KeyPairName = keyPairName;
            KubernetesVersion = kubernetesVersion;
            MaximumNodes = maximumNodes;
            MinimumNodes = minimumNodes;
            NodeVolumeSize = nodeVolumeSize;
            Region = region;
            SecretKey = secretKey;
            SecurityGroups = securityGroups;
            ServiceRole = serviceRole;
            SessionToken = sessionToken;
            Subnets = subnets;
            UserData = userData;
            VirtualNetwork = virtualNetwork;
        }
    }

    [OutputType]
    public sealed class ClusterGkeConfig
    {
        /// <summary>
        /// The IP address range of the container pods (string)
        /// </summary>
        public readonly string ClusterIpv4Cidr;
        /// <summary>
        /// The contents of the GC credential file (string)
        /// </summary>
        public readonly string Credential;
        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Size of the disk attached to each node. Default `100` (int)
        /// </summary>
        public readonly int? DiskSizeGb;
        /// <summary>
        /// Type of the disk attached to each node (string)
        /// </summary>
        public readonly string DiskType;
        /// <summary>
        /// To enable Kubernetes alpha feature. Default `true` (bool)
        /// </summary>
        public readonly bool? EnableAlphaFeature;
        /// <summary>
        /// Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
        /// </summary>
        public readonly bool? EnableAutoRepair;
        /// <summary>
        /// Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
        /// </summary>
        public readonly bool? EnableAutoUpgrade;
        /// <summary>
        /// Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
        /// </summary>
        public readonly bool? EnableHorizontalPodAutoscaling;
        /// <summary>
        /// Enable HTTP load balancing on GKE cluster. Default `true` (bool)
        /// </summary>
        public readonly bool? EnableHttpLoadBalancing;
        /// <summary>
        /// Whether to enable the Kubernetes dashboard. Default `false` (bool)
        /// </summary>
        public readonly bool? EnableKubernetesDashboard;
        /// <summary>
        /// Whether to enable legacy abac on the cluster. Default `false` (bool)
        /// </summary>
        public readonly bool? EnableLegacyAbac;
        public readonly bool? EnableMasterAuthorizedNetwork;
        /// <summary>
        /// Enable stackdriver logging. Default `true` (bool)
        /// </summary>
        public readonly bool? EnableNetworkPolicyConfig;
        /// <summary>
        /// Enable nodepool autoscaling. Default `false` (bool)
        /// </summary>
        public readonly bool? EnableNodepoolAutoscaling;
        /// <summary>
        /// Whether the master's internal IP address is used as the cluster endpoint. Default `false` (bool)
        /// </summary>
        public readonly bool? EnablePrivateEndpoint;
        /// <summary>
        /// Whether nodes have internal IP address only. Default `false` (bool)
        /// </summary>
        public readonly bool? EnablePrivateNodes;
        /// <summary>
        /// Enable stackdriver monitoring. Default `true` (bool)
        /// </summary>
        public readonly bool? EnableStackdriverLogging;
        /// <summary>
        /// Enable stackdriver monitoring on GKE cluster (bool)
        /// </summary>
        public readonly bool? EnableStackdriverMonitoring;
        /// <summary>
        /// The image to use for the worker nodes (string)
        /// </summary>
        public readonly string ImageType;
        /// <summary>
        /// The IP address range for the cluster pod IPs (string)
        /// </summary>
        public readonly string IpPolicyClusterIpv4CidrBlock;
        /// <summary>
        /// The name of the secondary range to be used for the cluster CIDR block (string)
        /// </summary>
        public readonly string IpPolicyClusterSecondaryRangeName;
        /// <summary>
        /// Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
        /// </summary>
        public readonly bool? IpPolicyCreateSubnetwork;
        /// <summary>
        /// The IP address range of the instance IPs in this cluster (string)
        /// </summary>
        public readonly string IpPolicyNodeIpv4CidrBlock;
        /// <summary>
        /// The IP address range of the services IPs in this cluster (string)
        /// </summary>
        public readonly string IpPolicyServicesIpv4CidrBlock;
        /// <summary>
        /// The name of the secondary range to be used for the services CIDR block (string)
        /// </summary>
        public readonly string IpPolicyServicesSecondaryRangeName;
        /// <summary>
        /// A custom subnetwork name to be used if createSubnetwork is true (string)
        /// </summary>
        public readonly string IpPolicySubnetworkName;
        /// <summary>
        /// Issue a client certificate. Default `false` (bool)
        /// </summary>
        public readonly bool? IssueClientCertificate;
        /// <summary>
        /// Enable the Kubernetes dashboard. Default `false` (bool)
        /// </summary>
        public readonly bool? KubernetesDashboard;
        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        /// <summary>
        /// The number of local SSD disks to be attached to the node. Default `0` (int)
        /// </summary>
        public readonly int? LocalSsdCount;
        /// <summary>
        /// Locations for GKE cluster (list)
        /// </summary>
        public readonly ImmutableArray<string> Locations;
        /// <summary>
        /// Machine type for GKE cluster (string)
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// Maintenance window for GKE cluster (string)
        /// </summary>
        public readonly string MaintenanceWindow;
        /// <summary>
        /// Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
        /// </summary>
        public readonly ImmutableArray<string> MasterAuthorizedNetworkCidrBlocks;
        /// <summary>
        /// The IP range in CIDR notation to use for the hosted master network (string)
        /// </summary>
        public readonly string MasterIpv4CidrBlock;
        /// <summary>
        /// Master version for GKE cluster (string)
        /// </summary>
        public readonly string MasterVersion;
        /// <summary>
        /// Maximum number of nodes in the NodePool. Must be &gt;= minNodeCount. There has to enough quota to scale up the cluster. Default `0` (int)
        /// </summary>
        public readonly int? MaxNodeCount;
        /// <summary>
        /// Minimmum number of nodes in the NodePool. Must be &gt;= 1 and &lt;= maxNodeCount. Default `0` (int)
        /// </summary>
        public readonly int? MinNodeCount;
        /// <summary>
        /// Network for GKE cluster (string)
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// Node count for GKE cluster. Default `3` (int)
        /// </summary>
        public readonly int? NodeCount;
        /// <summary>
        /// The ID of the cluster node pool (string)
        /// </summary>
        public readonly string NodePool;
        /// <summary>
        /// Node version for GKE cluster (string)
        /// </summary>
        public readonly string NodeVersion;
        /// <summary>
        /// The set of Google API scopes to be made available on all of the node VMs under the default service account (list)
        /// </summary>
        public readonly ImmutableArray<string> OauthScopes;
        /// <summary>
        /// Whether the nodes are created as preemptible VM instances. Default `false` (bool)
        /// </summary>
        public readonly bool? Preemptible;
        /// <summary>
        /// Project ID to apply answer (string)
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The map of Kubernetes labels to be applied to each cluster (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> ResourceLabels;
        /// <summary>
        /// The Google Cloud Platform Service Account to be used by the node VMs (string)
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// Subnetwork for GKE cluster (string)
        /// </summary>
        public readonly string SubNetwork;
        /// <summary>
        /// List of Kubernetes taints to be applied to each node (list)
        /// </summary>
        public readonly ImmutableArray<string> Taints;
        /// <summary>
        /// Whether alias IPs will be used for pod IPs in the cluster. Default `false` (bool)
        /// </summary>
        public readonly bool? UseIpAliases;
        /// <summary>
        /// Zone GKE cluster (string)
        /// </summary>
        public readonly string? Zone;

        [OutputConstructor]
        private ClusterGkeConfig(
            string clusterIpv4Cidr,
            string credential,
            string? description,
            int? diskSizeGb,
            string diskType,
            bool? enableAlphaFeature,
            bool? enableAutoRepair,
            bool? enableAutoUpgrade,
            bool? enableHorizontalPodAutoscaling,
            bool? enableHttpLoadBalancing,
            bool? enableKubernetesDashboard,
            bool? enableLegacyAbac,
            bool? enableMasterAuthorizedNetwork,
            bool? enableNetworkPolicyConfig,
            bool? enableNodepoolAutoscaling,
            bool? enablePrivateEndpoint,
            bool? enablePrivateNodes,
            bool? enableStackdriverLogging,
            bool? enableStackdriverMonitoring,
            string imageType,
            string ipPolicyClusterIpv4CidrBlock,
            string ipPolicyClusterSecondaryRangeName,
            bool? ipPolicyCreateSubnetwork,
            string ipPolicyNodeIpv4CidrBlock,
            string ipPolicyServicesIpv4CidrBlock,
            string ipPolicyServicesSecondaryRangeName,
            string ipPolicySubnetworkName,
            bool? issueClientCertificate,
            bool? kubernetesDashboard,
            ImmutableDictionary<string, object> labels,
            int? localSsdCount,
            ImmutableArray<string> locations,
            string machineType,
            string maintenanceWindow,
            ImmutableArray<string> masterAuthorizedNetworkCidrBlocks,
            string masterIpv4CidrBlock,
            string masterVersion,
            int? maxNodeCount,
            int? minNodeCount,
            string network,
            int? nodeCount,
            string nodePool,
            string nodeVersion,
            ImmutableArray<string> oauthScopes,
            bool? preemptible,
            string projectId,
            ImmutableDictionary<string, object> resourceLabels,
            string serviceAccount,
            string subNetwork,
            ImmutableArray<string> taints,
            bool? useIpAliases,
            string? zone)
        {
            ClusterIpv4Cidr = clusterIpv4Cidr;
            Credential = credential;
            Description = description;
            DiskSizeGb = diskSizeGb;
            DiskType = diskType;
            EnableAlphaFeature = enableAlphaFeature;
            EnableAutoRepair = enableAutoRepair;
            EnableAutoUpgrade = enableAutoUpgrade;
            EnableHorizontalPodAutoscaling = enableHorizontalPodAutoscaling;
            EnableHttpLoadBalancing = enableHttpLoadBalancing;
            EnableKubernetesDashboard = enableKubernetesDashboard;
            EnableLegacyAbac = enableLegacyAbac;
            EnableMasterAuthorizedNetwork = enableMasterAuthorizedNetwork;
            EnableNetworkPolicyConfig = enableNetworkPolicyConfig;
            EnableNodepoolAutoscaling = enableNodepoolAutoscaling;
            EnablePrivateEndpoint = enablePrivateEndpoint;
            EnablePrivateNodes = enablePrivateNodes;
            EnableStackdriverLogging = enableStackdriverLogging;
            EnableStackdriverMonitoring = enableStackdriverMonitoring;
            ImageType = imageType;
            IpPolicyClusterIpv4CidrBlock = ipPolicyClusterIpv4CidrBlock;
            IpPolicyClusterSecondaryRangeName = ipPolicyClusterSecondaryRangeName;
            IpPolicyCreateSubnetwork = ipPolicyCreateSubnetwork;
            IpPolicyNodeIpv4CidrBlock = ipPolicyNodeIpv4CidrBlock;
            IpPolicyServicesIpv4CidrBlock = ipPolicyServicesIpv4CidrBlock;
            IpPolicyServicesSecondaryRangeName = ipPolicyServicesSecondaryRangeName;
            IpPolicySubnetworkName = ipPolicySubnetworkName;
            IssueClientCertificate = issueClientCertificate;
            KubernetesDashboard = kubernetesDashboard;
            Labels = labels;
            LocalSsdCount = localSsdCount;
            Locations = locations;
            MachineType = machineType;
            MaintenanceWindow = maintenanceWindow;
            MasterAuthorizedNetworkCidrBlocks = masterAuthorizedNetworkCidrBlocks;
            MasterIpv4CidrBlock = masterIpv4CidrBlock;
            MasterVersion = masterVersion;
            MaxNodeCount = maxNodeCount;
            MinNodeCount = minNodeCount;
            Network = network;
            NodeCount = nodeCount;
            NodePool = nodePool;
            NodeVersion = nodeVersion;
            OauthScopes = oauthScopes;
            Preemptible = preemptible;
            ProjectId = projectId;
            ResourceLabels = resourceLabels;
            ServiceAccount = serviceAccount;
            SubNetwork = subNetwork;
            Taints = taints;
            UseIpAliases = useIpAliases;
            Zone = zone;
        }
    }

    [OutputType]
    public sealed class ClusterK3sConfig
    {
        /// <summary>
        /// K3S upgrade strategy (List maxitems: 1)
        /// </summary>
        public readonly ClusterK3sConfigUpgradeStrategy UpgradeStrategy;
        /// <summary>
        /// rancher-monitoring chart version (string)
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private ClusterK3sConfig(
            ClusterK3sConfigUpgradeStrategy upgradeStrategy,
            string version)
        {
            UpgradeStrategy = upgradeStrategy;
            Version = version;
        }
    }

    [OutputType]
    public sealed class ClusterK3sConfigUpgradeStrategy
    {
        /// <summary>
        /// Drain server nodes. Default: `false` (bool)
        /// </summary>
        public readonly bool? DrainServerNodes;
        /// <summary>
        /// Drain worker nodes. Default: `false` (bool)
        /// </summary>
        public readonly bool? DrainWorkerNodes;
        /// <summary>
        /// Server concurrency. Default: `1` (int)
        /// </summary>
        public readonly int? ServerConcurrency;
        /// <summary>
        /// Worker concurrency. Default: `1` (int)
        /// </summary>
        public readonly int? WorkerConcurrency;

        [OutputConstructor]
        private ClusterK3sConfigUpgradeStrategy(
            bool? drainServerNodes,
            bool? drainWorkerNodes,
            int? serverConcurrency,
            int? workerConcurrency)
        {
            DrainServerNodes = drainServerNodes;
            DrainWorkerNodes = drainWorkerNodes;
            ServerConcurrency = serverConcurrency;
            WorkerConcurrency = workerConcurrency;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfig
    {
        /// <summary>
        /// Duration in seconds of addon job (int)
        /// </summary>
        public readonly int AddonJobTimeout;
        /// <summary>
        /// Addons descripton to deploy on RKE cluster.
        /// </summary>
        public readonly string? Addons;
        /// <summary>
        /// Addons yaml manifests to deploy on RKE cluster (list)
        /// </summary>
        public readonly ImmutableArray<string> AddonsIncludes;
        /// <summary>
        /// Kubernetes cluster authentication (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigAuthentication Authentication;
        /// <summary>
        /// Kubernetes cluster authorization (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigAuthorization Authorization;
        /// <summary>
        /// RKE bastion host (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigBastionHost BastionHost;
        /// <summary>
        /// RKE options for Calico network provider (string)
        /// </summary>
        public readonly ClusterRkeConfigCloudProvider CloudProvider;
        /// <summary>
        /// RKE dns add-on. Just for Rancher v2.2.x (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigDns Dns;
        /// <summary>
        /// Ignore docker version. Default `true` (bool)
        /// </summary>
        public readonly bool? IgnoreDockerVersion;
        /// <summary>
        /// Kubernetes ingress configuration (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigIngress Ingress;
        /// <summary>
        /// The Kubernetes master version (string)
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// Kubernetes cluster monitoring (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigMonitoring Monitoring;
        /// <summary>
        /// Network for GKE cluster (string)
        /// </summary>
        public readonly ClusterRkeConfigNetwork Network;
        /// <summary>
        /// RKE cluster nodes (list)
        /// </summary>
        public readonly ImmutableArray<ClusterRkeConfigNodes> Nodes;
        /// <summary>
        /// Prefix to customize Kubernetes path (string)
        /// </summary>
        public readonly string PrefixPath;
        /// <summary>
        /// private registries for docker images (list)
        /// </summary>
        public readonly ImmutableArray<ClusterRkeConfigPrivateRegistries> PrivateRegistries;
        /// <summary>
        /// Kubernetes cluster services (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigServices Services;
        /// <summary>
        /// Use ssh agent auth. Default `false` (bool)
        /// </summary>
        public readonly bool? SshAgentAuth;
        /// <summary>
        /// Cluster level SSH certificate path (string)
        /// </summary>
        public readonly string SshCertPath;
        /// <summary>
        /// Node SSH private key path (string)
        /// </summary>
        public readonly string SshKeyPath;
        /// <summary>
        /// K3S upgrade strategy (List maxitems: 1)
        /// </summary>
        public readonly ClusterRkeConfigUpgradeStrategy UpgradeStrategy;

        [OutputConstructor]
        private ClusterRkeConfig(
            int addonJobTimeout,
            string? addons,
            ImmutableArray<string> addonsIncludes,
            ClusterRkeConfigAuthentication authentication,
            ClusterRkeConfigAuthorization authorization,
            ClusterRkeConfigBastionHost bastionHost,
            ClusterRkeConfigCloudProvider cloudProvider,
            ClusterRkeConfigDns dns,
            bool? ignoreDockerVersion,
            ClusterRkeConfigIngress ingress,
            string kubernetesVersion,
            ClusterRkeConfigMonitoring monitoring,
            ClusterRkeConfigNetwork network,
            ImmutableArray<ClusterRkeConfigNodes> nodes,
            string prefixPath,
            ImmutableArray<ClusterRkeConfigPrivateRegistries> privateRegistries,
            ClusterRkeConfigServices services,
            bool? sshAgentAuth,
            string sshCertPath,
            string sshKeyPath,
            ClusterRkeConfigUpgradeStrategy upgradeStrategy)
        {
            AddonJobTimeout = addonJobTimeout;
            Addons = addons;
            AddonsIncludes = addonsIncludes;
            Authentication = authentication;
            Authorization = authorization;
            BastionHost = bastionHost;
            CloudProvider = cloudProvider;
            Dns = dns;
            IgnoreDockerVersion = ignoreDockerVersion;
            Ingress = ingress;
            KubernetesVersion = kubernetesVersion;
            Monitoring = monitoring;
            Network = network;
            Nodes = nodes;
            PrefixPath = prefixPath;
            PrivateRegistries = privateRegistries;
            Services = services;
            SshAgentAuth = sshAgentAuth;
            SshCertPath = sshCertPath;
            SshKeyPath = sshKeyPath;
            UpgradeStrategy = upgradeStrategy;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigAuthentication
    {
        /// <summary>
        /// RKE sans for authentication ([]string)
        /// </summary>
        public readonly ImmutableArray<string> Sans;
        /// <summary>
        /// RKE strategy for authentication (string)
        /// </summary>
        public readonly string Strategy;

        [OutputConstructor]
        private ClusterRkeConfigAuthentication(
            ImmutableArray<string> sans,
            string strategy)
        {
            Sans = sans;
            Strategy = strategy;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigAuthorization
    {
        /// <summary>
        /// RKE mode for authorization. `rbac` and `none` modes are available. Default `rbac` (string)
        /// </summary>
        public readonly string? Mode;
        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Options;

        [OutputConstructor]
        private ClusterRkeConfigAuthorization(
            string? mode,
            ImmutableDictionary<string, object> options)
        {
            Mode = mode;
            Options = options;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigBastionHost
    {
        /// <summary>
        /// Address ip for node (string)
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        public readonly string? Port;
        /// <summary>
        /// Use ssh agent auth. Default `false` (bool)
        /// </summary>
        public readonly bool? SshAgentAuth;
        /// <summary>
        /// Node SSH private key (string)
        /// </summary>
        public readonly string SshKey;
        /// <summary>
        /// Node SSH private key path (string)
        /// </summary>
        public readonly string SshKeyPath;
        /// <summary>
        /// Registry user (string)
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ClusterRkeConfigBastionHost(
            string address,
            string? port,
            bool? sshAgentAuth,
            string sshKey,
            string sshKeyPath,
            string user)
        {
            Address = address;
            Port = port;
            SshAgentAuth = sshAgentAuth;
            SshKey = sshKey;
            SshKeyPath = sshKeyPath;
            User = user;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProvider
    {
        /// <summary>
        /// RKE AWS Cloud Provider config for Cloud Provider [rke-aws-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/aws/) (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderAwsCloudProvider? AwsCloudProvider;
        /// <summary>
        /// RKE Azure Cloud Provider config for Cloud Provider [rke-azure-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/azure/) (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderAzureCloudProvider? AzureCloudProvider;
        /// <summary>
        /// RKE Custom Cloud Provider config for Cloud Provider (string) (string)
        /// </summary>
        public readonly string CustomCloudProvider;
        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// RKE Openstack Cloud Provider config for Cloud Provider [rke-openstack-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/openstack/) (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderOpenstackCloudProvider? OpenstackCloudProvider;
        /// <summary>
        /// RKE Vsphere Cloud Provider config for Cloud Provider [rke-vsphere-cloud-provider](https://rancher.com/docs/rke/latest/en/config-options/cloud-providers/vsphere/) Extra argument `name` is required on `virtual_center` configuration. (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderVsphereCloudProvider? VsphereCloudProvider;

        [OutputConstructor]
        private ClusterRkeConfigCloudProvider(
            ClusterRkeConfigCloudProviderAwsCloudProvider? awsCloudProvider,
            ClusterRkeConfigCloudProviderAzureCloudProvider? azureCloudProvider,
            string customCloudProvider,
            string name,
            ClusterRkeConfigCloudProviderOpenstackCloudProvider? openstackCloudProvider,
            ClusterRkeConfigCloudProviderVsphereCloudProvider? vsphereCloudProvider)
        {
            AwsCloudProvider = awsCloudProvider;
            AzureCloudProvider = azureCloudProvider;
            CustomCloudProvider = customCloudProvider;
            Name = name;
            OpenstackCloudProvider = openstackCloudProvider;
            VsphereCloudProvider = vsphereCloudProvider;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderAwsCloudProvider
    {
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderAwsCloudProviderGlobal Global;
        /// <summary>
        /// (list)
        /// </summary>
        public readonly ImmutableArray<ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrides> ServiceOverrides;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderAwsCloudProvider(
            ClusterRkeConfigCloudProviderAwsCloudProviderGlobal global,
            ImmutableArray<ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrides> serviceOverrides)
        {
            Global = global;
            ServiceOverrides = serviceOverrides;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderAwsCloudProviderGlobal
    {
        /// <summary>
        /// Default `false` (bool)
        /// </summary>
        public readonly bool? DisableSecurityGroupIngress;
        /// <summary>
        /// Default `false` (bool)
        /// </summary>
        public readonly bool? DisableStrictZoneCheck;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string ElbSecurityGroup;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string KubernetesClusterId;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string KubernetesClusterTag;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string RoleArn;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string RouteTableId;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Vpc;
        /// <summary>
        /// Zone GKE cluster (string)
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderAwsCloudProviderGlobal(
            bool? disableSecurityGroupIngress,
            bool? disableStrictZoneCheck,
            string elbSecurityGroup,
            string kubernetesClusterId,
            string kubernetesClusterTag,
            string roleArn,
            string routeTableId,
            string subnetId,
            string vpc,
            string zone)
        {
            DisableSecurityGroupIngress = disableSecurityGroupIngress;
            DisableStrictZoneCheck = disableStrictZoneCheck;
            ElbSecurityGroup = elbSecurityGroup;
            KubernetesClusterId = kubernetesClusterId;
            KubernetesClusterTag = kubernetesClusterTag;
            RoleArn = roleArn;
            RouteTableId = routeTableId;
            SubnetId = subnetId;
            Vpc = vpc;
            Zone = zone;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrides
    {
        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Service;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SigningMethod;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SigningName;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SigningRegion;
        /// <summary>
        /// Registry URL (string)
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderAwsCloudProviderServiceOverrides(
            string region,
            string service,
            string signingMethod,
            string signingName,
            string signingRegion,
            string url)
        {
            Region = region;
            Service = service;
            SigningMethod = signingMethod;
            SigningName = signingName;
            SigningRegion = signingRegion;
            Url = url;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderAzureCloudProvider
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string AadClientCertPassword;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string AadClientCertPath;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string AadClientId;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string AadClientSecret;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Cloud;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool CloudProviderBackoff;
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int CloudProviderBackoffDuration;
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int CloudProviderBackoffExponent;
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int CloudProviderBackoffJitter;
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int CloudProviderBackoffRetries;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool CloudProviderRateLimit;
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int CloudProviderRateLimitBucket;
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int CloudProviderRateLimitQps;
        /// <summary>
        /// Azure Kubernetes cluster location. Default `eastus` (string)
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int MaximumLoadBalancerRuleCount;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string PrimaryAvailabilitySetName;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string PrimaryScaleSetName;
        /// <summary>
        /// The name of the Cluster resource group (string)
        /// </summary>
        public readonly string ResourceGroup;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string RouteTableName;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SecurityGroupName;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SubnetName;
        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure subscription (string)
        /// </summary>
        public readonly string SubscriptionId;
        /// <summary>
        /// Azure tenant ID to use (string)
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool UseInstanceMetadata;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool UseManagedIdentityExtension;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string VmType;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string VnetName;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string VnetResourceGroup;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderAzureCloudProvider(
            string aadClientCertPassword,
            string aadClientCertPath,
            string aadClientId,
            string aadClientSecret,
            string cloud,
            bool cloudProviderBackoff,
            int cloudProviderBackoffDuration,
            int cloudProviderBackoffExponent,
            int cloudProviderBackoffJitter,
            int cloudProviderBackoffRetries,
            bool cloudProviderRateLimit,
            int cloudProviderRateLimitBucket,
            int cloudProviderRateLimitQps,
            string location,
            int maximumLoadBalancerRuleCount,
            string primaryAvailabilitySetName,
            string primaryScaleSetName,
            string resourceGroup,
            string routeTableName,
            string securityGroupName,
            string subnetName,
            string subscriptionId,
            string tenantId,
            bool useInstanceMetadata,
            bool useManagedIdentityExtension,
            string vmType,
            string vnetName,
            string vnetResourceGroup)
        {
            AadClientCertPassword = aadClientCertPassword;
            AadClientCertPath = aadClientCertPath;
            AadClientId = aadClientId;
            AadClientSecret = aadClientSecret;
            Cloud = cloud;
            CloudProviderBackoff = cloudProviderBackoff;
            CloudProviderBackoffDuration = cloudProviderBackoffDuration;
            CloudProviderBackoffExponent = cloudProviderBackoffExponent;
            CloudProviderBackoffJitter = cloudProviderBackoffJitter;
            CloudProviderBackoffRetries = cloudProviderBackoffRetries;
            CloudProviderRateLimit = cloudProviderRateLimit;
            CloudProviderRateLimitBucket = cloudProviderRateLimitBucket;
            CloudProviderRateLimitQps = cloudProviderRateLimitQps;
            Location = location;
            MaximumLoadBalancerRuleCount = maximumLoadBalancerRuleCount;
            PrimaryAvailabilitySetName = primaryAvailabilitySetName;
            PrimaryScaleSetName = primaryScaleSetName;
            ResourceGroup = resourceGroup;
            RouteTableName = routeTableName;
            SecurityGroupName = securityGroupName;
            SubnetName = subnetName;
            SubscriptionId = subscriptionId;
            TenantId = tenantId;
            UseInstanceMetadata = useInstanceMetadata;
            UseManagedIdentityExtension = useManagedIdentityExtension;
            VmType = vmType;
            VnetName = vnetName;
            VnetResourceGroup = vnetResourceGroup;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProvider
    {
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage BlockStorage;
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal Global;
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer LoadBalancer;
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata Metadata;
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute Route;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderOpenstackCloudProvider(
            ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage blockStorage,
            ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal global,
            ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer loadBalancer,
            ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata metadata,
            ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute route)
        {
            BlockStorage = blockStorage;
            Global = global;
            LoadBalancer = loadBalancer;
            Metadata = metadata;
            Route = route;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string BsVersion;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly bool IgnoreVolumeAz;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly bool TrustDevicePath;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderOpenstackCloudProviderBlockStorage(
            string bsVersion,
            bool ignoreVolumeAz,
            bool trustDevicePath)
        {
            BsVersion = bsVersion;
            IgnoreVolumeAz = ignoreVolumeAz;
            TrustDevicePath = trustDevicePath;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string AuthUrl;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string CaFile;
        /// <summary>
        /// Required if `domain_name` not provided. (string)
        /// </summary>
        public readonly string DomainId;
        /// <summary>
        /// Required if `domain_id` not provided. (string)
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// Registry password (string)
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Azure tenant ID to use (string)
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Required if `tenant_id` not provided. (string)
        /// </summary>
        public readonly string TenantName;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string TrustId;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderOpenstackCloudProviderGlobal(
            string authUrl,
            string caFile,
            string domainId,
            string domainName,
            string password,
            string region,
            string tenantId,
            string tenantName,
            string trustId,
            string username)
        {
            AuthUrl = authUrl;
            CaFile = caFile;
            DomainId = domainId;
            DomainName = domainName;
            Password = password;
            Region = region;
            TenantId = tenantId;
            TenantName = tenantName;
            TrustId = trustId;
            Username = username;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer
    {
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool CreateMonitor;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string FloatingNetworkId;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string LbMethod;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string LbProvider;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string LbVersion;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool ManageSecurityGroups;
        /// <summary>
        /// Default `60s` (string)
        /// </summary>
        public readonly string? MonitorDelay;
        /// <summary>
        /// Default 5 (int)
        /// </summary>
        public readonly int? MonitorMaxRetries;
        /// <summary>
        /// Default `30s` (string)
        /// </summary>
        public readonly string? MonitorTimeout;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool UseOctavia;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderOpenstackCloudProviderLoadBalancer(
            bool createMonitor,
            string floatingNetworkId,
            string lbMethod,
            string lbProvider,
            string lbVersion,
            bool manageSecurityGroups,
            string? monitorDelay,
            int? monitorMaxRetries,
            string? monitorTimeout,
            string subnetId,
            bool useOctavia)
        {
            CreateMonitor = createMonitor;
            FloatingNetworkId = floatingNetworkId;
            LbMethod = lbMethod;
            LbProvider = lbProvider;
            LbVersion = lbVersion;
            ManageSecurityGroups = manageSecurityGroups;
            MonitorDelay = monitorDelay;
            MonitorMaxRetries = monitorMaxRetries;
            MonitorTimeout = monitorTimeout;
            SubnetId = subnetId;
            UseOctavia = useOctavia;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata
    {
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int RequestTimeout;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string SearchOrder;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderOpenstackCloudProviderMetadata(
            int requestTimeout,
            string searchOrder)
        {
            RequestTimeout = requestTimeout;
            SearchOrder = searchOrder;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string RouterId;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderOpenstackCloudProviderRoute(string routerId)
        {
            RouterId = routerId;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProvider
    {
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderVsphereCloudProviderDisk Disk;
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal Global;
        /// <summary>
        /// Network for GKE cluster (string)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork Network;
        /// <summary>
        /// (List)
        /// </summary>
        public readonly ImmutableArray<ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenters> VirtualCenters;
        /// <summary>
        /// (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace Workspace;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderVsphereCloudProvider(
            ClusterRkeConfigCloudProviderVsphereCloudProviderDisk disk,
            ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal global,
            ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork network,
            ImmutableArray<ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenters> virtualCenters,
            ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace workspace)
        {
            Disk = disk;
            Global = global;
            Network = network;
            VirtualCenters = virtualCenters;
            Workspace = workspace;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderDisk
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string ScsiControllerType;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderVsphereCloudProviderDisk(string scsiControllerType)
        {
            ScsiControllerType = scsiControllerType;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Datacenters;
        /// <summary>
        /// (bool)
        /// </summary>
        public readonly bool InsecureFlag;
        /// <summary>
        /// Registry password (string)
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        public readonly string Port;
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int SoapRoundtripCount;
        /// <summary>
        /// Registry user (string)
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderVsphereCloudProviderGlobal(
            string datacenters,
            bool insecureFlag,
            string password,
            string port,
            int soapRoundtripCount,
            string user)
        {
            Datacenters = datacenters;
            InsecureFlag = insecureFlag;
            Password = password;
            Port = port;
            SoapRoundtripCount = soapRoundtripCount;
            User = user;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string PublicNetwork;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderVsphereCloudProviderNetwork(string publicNetwork)
        {
            PublicNetwork = publicNetwork;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenters
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Datacenters;
        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Registry password (string)
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        public readonly string Port;
        /// <summary>
        /// (int)
        /// </summary>
        public readonly int SoapRoundtripCount;
        /// <summary>
        /// Registry user (string)
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderVsphereCloudProviderVirtualCenters(
            string datacenters,
            string name,
            string password,
            string port,
            int soapRoundtripCount,
            string user)
        {
            Datacenters = datacenters;
            Name = name;
            Password = password;
            Port = port;
            SoapRoundtripCount = soapRoundtripCount;
            User = user;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace
    {
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string DefaultDatastore;
        /// <summary>
        /// Folder for S3 service. Available from Rancher v2.2.7 (string)
        /// </summary>
        public readonly string Folder;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string ResourcepoolPath;
        /// <summary>
        /// (string)
        /// </summary>
        public readonly string Server;

        [OutputConstructor]
        private ClusterRkeConfigCloudProviderVsphereCloudProviderWorkspace(
            string datacenter,
            string defaultDatastore,
            string folder,
            string resourcepoolPath,
            string server)
        {
            Datacenter = datacenter;
            DefaultDatastore = defaultDatastore;
            Folder = folder;
            ResourcepoolPath = resourcepoolPath;
            Server = server;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigDns
    {
        /// <summary>
        /// Node selector for RKE Ingress (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> NodeSelector;
        /// <summary>
        /// Provider for RKE monitoring (string)
        /// </summary>
        public readonly string? Provider;
        /// <summary>
        /// DNS add-on reverse cidr  (list)
        /// </summary>
        public readonly ImmutableArray<string> ReverseCidrs;
        /// <summary>
        /// DNS add-on upstream nameservers  (list)
        /// </summary>
        public readonly ImmutableArray<string> UpstreamNameservers;

        [OutputConstructor]
        private ClusterRkeConfigDns(
            ImmutableDictionary<string, object> nodeSelector,
            string? provider,
            ImmutableArray<string> reverseCidrs,
            ImmutableArray<string> upstreamNameservers)
        {
            NodeSelector = nodeSelector;
            Provider = provider;
            ReverseCidrs = reverseCidrs;
            UpstreamNameservers = upstreamNameservers;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigIngress
    {
        /// <summary>
        /// Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)
        /// </summary>
        public readonly string DnsPolicy;
        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        /// <summary>
        /// Node selector for RKE Ingress (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> NodeSelector;
        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Options;
        /// <summary>
        /// Provider for RKE monitoring (string)
        /// </summary>
        public readonly string Provider;

        [OutputConstructor]
        private ClusterRkeConfigIngress(
            string dnsPolicy,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableDictionary<string, object> nodeSelector,
            ImmutableDictionary<string, object> options,
            string provider)
        {
            DnsPolicy = dnsPolicy;
            ExtraArgs = extraArgs;
            NodeSelector = nodeSelector;
            Options = options;
            Provider = provider;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigMonitoring
    {
        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Options;
        /// <summary>
        /// Provider for RKE monitoring (string)
        /// </summary>
        public readonly string Provider;

        [OutputConstructor]
        private ClusterRkeConfigMonitoring(
            ImmutableDictionary<string, object> options,
            string provider)
        {
            Options = options;
            Provider = provider;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigNetwork
    {
        /// <summary>
        /// Calico provider config for RKE network (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigNetworkCalicoNetworkProvider? CalicoNetworkProvider;
        /// <summary>
        /// Canal provider config for RKE network (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigNetworkCanalNetworkProvider? CanalNetworkProvider;
        /// <summary>
        /// Flannel provider config for RKE network (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigNetworkFlannelNetworkProvider? FlannelNetworkProvider;
        /// <summary>
        /// Network provider MTU. Default `0` (int)
        /// </summary>
        public readonly int? Mtu;
        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Options;
        /// <summary>
        /// Plugin for RKE network. `canal` (default), `flannel`, `calico`, `none` and `weave` are supported. (string)
        /// </summary>
        public readonly string Plugin;
        /// <summary>
        /// Weave provider config for RKE network (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigNetworkWeaveNetworkProvider? WeaveNetworkProvider;

        [OutputConstructor]
        private ClusterRkeConfigNetwork(
            ClusterRkeConfigNetworkCalicoNetworkProvider? calicoNetworkProvider,
            ClusterRkeConfigNetworkCanalNetworkProvider? canalNetworkProvider,
            ClusterRkeConfigNetworkFlannelNetworkProvider? flannelNetworkProvider,
            int? mtu,
            ImmutableDictionary<string, object> options,
            string plugin,
            ClusterRkeConfigNetworkWeaveNetworkProvider? weaveNetworkProvider)
        {
            CalicoNetworkProvider = calicoNetworkProvider;
            CanalNetworkProvider = canalNetworkProvider;
            FlannelNetworkProvider = flannelNetworkProvider;
            Mtu = mtu;
            Options = options;
            Plugin = plugin;
            WeaveNetworkProvider = weaveNetworkProvider;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigNetworkCalicoNetworkProvider
    {
        /// <summary>
        /// RKE options for Calico network provider (string)
        /// </summary>
        public readonly string CloudProvider;

        [OutputConstructor]
        private ClusterRkeConfigNetworkCalicoNetworkProvider(string cloudProvider)
        {
            CloudProvider = cloudProvider;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigNetworkCanalNetworkProvider
    {
        /// <summary>
        /// Iface config Flannel network provider (string)
        /// </summary>
        public readonly string Iface;

        [OutputConstructor]
        private ClusterRkeConfigNetworkCanalNetworkProvider(string iface)
        {
            Iface = iface;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigNetworkFlannelNetworkProvider
    {
        /// <summary>
        /// Iface config Flannel network provider (string)
        /// </summary>
        public readonly string Iface;

        [OutputConstructor]
        private ClusterRkeConfigNetworkFlannelNetworkProvider(string iface)
        {
            Iface = iface;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigNetworkWeaveNetworkProvider
    {
        /// <summary>
        /// Registry password (string)
        /// </summary>
        public readonly string Password;

        [OutputConstructor]
        private ClusterRkeConfigNetworkWeaveNetworkProvider(string password)
        {
            Password = password;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigNodes
    {
        /// <summary>
        /// Address ip for node (string)
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Docker socket for node (string)
        /// </summary>
        public readonly string DockerSocket;
        /// <summary>
        /// Hostname override for node (string)
        /// </summary>
        public readonly string? HostnameOverride;
        /// <summary>
        /// Internal ip for node (string)
        /// </summary>
        public readonly string? InternalAddress;
        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Labels;
        /// <summary>
        /// Id for the node (string)
        /// </summary>
        public readonly string? NodeId;
        /// <summary>
        /// Port for node. Default `22` (string)
        /// </summary>
        public readonly string? Port;
        /// <summary>
        /// Roles for the node. `controlplane`, `etcd` and `worker` are supported. (list)
        /// </summary>
        public readonly ImmutableArray<string> Roles;
        /// <summary>
        /// Use ssh agent auth. Default `false` (bool)
        /// </summary>
        public readonly bool? SshAgentAuth;
        /// <summary>
        /// Node SSH private key (string)
        /// </summary>
        public readonly string SshKey;
        /// <summary>
        /// Node SSH private key path (string)
        /// </summary>
        public readonly string SshKeyPath;
        /// <summary>
        /// Registry user (string)
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ClusterRkeConfigNodes(
            string address,
            string dockerSocket,
            string? hostnameOverride,
            string? internalAddress,
            ImmutableDictionary<string, object>? labels,
            string? nodeId,
            string? port,
            ImmutableArray<string> roles,
            bool? sshAgentAuth,
            string sshKey,
            string sshKeyPath,
            string user)
        {
            Address = address;
            DockerSocket = dockerSocket;
            HostnameOverride = hostnameOverride;
            InternalAddress = internalAddress;
            Labels = labels;
            NodeId = nodeId;
            Port = port;
            Roles = roles;
            SshAgentAuth = sshAgentAuth;
            SshKey = sshKey;
            SshKeyPath = sshKeyPath;
            User = user;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigPrivateRegistries
    {
        /// <summary>
        /// Set as default registry. Default `false` (bool)
        /// </summary>
        public readonly bool? IsDefault;
        /// <summary>
        /// Registry password (string)
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// Registry URL (string)
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Registry user (string)
        /// </summary>
        public readonly string? User;

        [OutputConstructor]
        private ClusterRkeConfigPrivateRegistries(
            bool? isDefault,
            string? password,
            string url,
            string? user)
        {
            IsDefault = isDefault;
            Password = password;
            Url = url;
            User = user;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServices
    {
        /// <summary>
        /// Etcd options for RKE services (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigServicesEtcd Etcd;
        /// <summary>
        /// Kube API options for RKE services (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigServicesKubeApi KubeApi;
        /// <summary>
        /// Kube Controller options for RKE services (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigServicesKubeController KubeController;
        /// <summary>
        /// Kubelet options for RKE services (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigServicesKubelet Kubelet;
        /// <summary>
        /// Kubeproxy options for RKE services (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigServicesKubeproxy Kubeproxy;
        /// <summary>
        /// Scheduler options for RKE services (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigServicesScheduler Scheduler;

        [OutputConstructor]
        private ClusterRkeConfigServices(
            ClusterRkeConfigServicesEtcd etcd,
            ClusterRkeConfigServicesKubeApi kubeApi,
            ClusterRkeConfigServicesKubeController kubeController,
            ClusterRkeConfigServicesKubelet kubelet,
            ClusterRkeConfigServicesKubeproxy kubeproxy,
            ClusterRkeConfigServicesScheduler scheduler)
        {
            Etcd = etcd;
            KubeApi = kubeApi;
            KubeController = kubeController;
            Kubelet = kubelet;
            Kubeproxy = kubeproxy;
            Scheduler = scheduler;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesEtcd
    {
        /// <summary>
        /// Backup options for etcd service. Just for Rancher v2.2.x (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigServicesEtcdBackupConfig BackupConfig;
        /// <summary>
        /// TLS CA certificate for etcd service (string)
        /// </summary>
        public readonly string CaCert;
        /// <summary>
        /// TLS certificate for etcd service (string)
        /// </summary>
        public readonly string Cert;
        /// <summary>
        /// Creation option for etcd service (string)
        /// </summary>
        public readonly string Creation;
        /// <summary>
        /// External urls for etcd service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExternalUrls;
        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraBinds;
        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraEnvs;
        /// <summary>
        /// Etcd service GID. Default: `0`. For Rancher v2.3.x or above (int)
        /// </summary>
        public readonly int? Gid;
        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// TLS key for etcd service (string)
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// Retention for etcd backup. Default `6` (int)
        /// </summary>
        public readonly string Retention;
        /// <summary>
        /// Snapshot option for etcd service (bool)
        /// </summary>
        public readonly bool Snapshot;
        /// <summary>
        /// Etcd service UID. Default: `0`. For Rancher v2.3.x or above (int)
        /// </summary>
        public readonly int? Uid;

        [OutputConstructor]
        private ClusterRkeConfigServicesEtcd(
            ClusterRkeConfigServicesEtcdBackupConfig backupConfig,
            string caCert,
            string cert,
            string creation,
            ImmutableArray<string> externalUrls,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            int? gid,
            string image,
            string key,
            string path,
            string retention,
            bool snapshot,
            int? uid)
        {
            BackupConfig = backupConfig;
            CaCert = caCert;
            Cert = cert;
            Creation = creation;
            ExternalUrls = externalUrls;
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Gid = gid;
            Image = image;
            Key = key;
            Path = path;
            Retention = retention;
            Snapshot = snapshot;
            Uid = uid;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesEtcdBackupConfig
    {
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Interval hours for etcd backup. Default `12` (int)
        /// </summary>
        public readonly int? IntervalHours;
        /// <summary>
        /// Retention for etcd backup. Default `6` (int)
        /// </summary>
        public readonly int? Retention;
        /// <summary>
        /// S3 config options for etcd backup (list maxitems:1)
        /// </summary>
        public readonly ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig? S3BackupConfig;
        /// <summary>
        /// Safe timestamp for etcd backup. Default: `false` (bool)
        /// </summary>
        public readonly bool? SafeTimestamp;

        [OutputConstructor]
        private ClusterRkeConfigServicesEtcdBackupConfig(
            bool? enabled,
            int? intervalHours,
            int? retention,
            ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig? s3BackupConfig,
            bool? safeTimestamp)
        {
            Enabled = enabled;
            IntervalHours = intervalHours;
            Retention = retention;
            S3BackupConfig = s3BackupConfig;
            SafeTimestamp = safeTimestamp;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig
    {
        /// <summary>
        /// The AWS Client ID to use (string)
        /// </summary>
        public readonly string? AccessKey;
        /// <summary>
        /// Bucket name for S3 service (string)
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// Base64 encoded custom CA for S3 service. Use filebase64(&lt;FILE&gt;) for encoding file. Available from Rancher v2.2.5 (string)
        /// </summary>
        public readonly string? CustomCa;
        /// <summary>
        /// Endpoint for S3 service (string)
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Folder for S3 service. Available from Rancher v2.2.7 (string)
        /// </summary>
        public readonly string? Folder;
        /// <summary>
        /// The AWS Region to create the EKS cluster in. Default `us-west-2` (string)
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The AWS Client Secret associated with the Client ID (string)
        /// </summary>
        public readonly string? SecretKey;

        [OutputConstructor]
        private ClusterRkeConfigServicesEtcdBackupConfigS3BackupConfig(
            string? accessKey,
            string bucketName,
            string? customCa,
            string endpoint,
            string? folder,
            string? region,
            string? secretKey)
        {
            AccessKey = accessKey;
            BucketName = bucketName;
            CustomCa = customCa;
            Endpoint = endpoint;
            Folder = folder;
            Region = region;
            SecretKey = secretKey;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesKubeApi
    {
        /// <summary>
        /// Admission configuration (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? AdmissionConfiguration;
        /// <summary>
        /// Enable [AlwaysPullImages](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#alwayspullimages) Admission controller plugin. [Rancher docs](https://rancher.com/docs/rke/latest/en/config-options/services/#kubernetes-api-server-options) Default: `false` (bool)
        /// </summary>
        public readonly bool? AlwaysPullImages;
        /// <summary>
        /// K8s audit log configuration. (list maxitems: 1)
        /// </summary>
        public readonly ClusterRkeConfigServicesKubeApiAuditLog? AuditLog;
        /// <summary>
        /// K8s event rate limit configuration. (list maxitems: 1)
        /// </summary>
        public readonly ClusterRkeConfigServicesKubeApiEventRateLimit? EventRateLimit;
        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraBinds;
        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraEnvs;
        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Pod Security Policy option for kube API service. Default `false` (bool)
        /// </summary>
        public readonly bool? PodSecurityPolicy;
        /// <summary>
        /// [Encrypt k8s secret data configration](https://rancher.com/docs/rke/latest/en/config-options/secrets-encryption/). (list maxitem: 1)
        /// </summary>
        public readonly ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig? SecretsEncryptionConfig;
        /// <summary>
        /// Service Cluster ip Range option for kube controller service (string)
        /// </summary>
        public readonly string ServiceClusterIpRange;
        /// <summary>
        /// Service Node Port Range option for kube API service (string)
        /// </summary>
        public readonly string ServiceNodePortRange;

        [OutputConstructor]
        private ClusterRkeConfigServicesKubeApi(
            ImmutableDictionary<string, object>? admissionConfiguration,
            bool? alwaysPullImages,
            ClusterRkeConfigServicesKubeApiAuditLog? auditLog,
            ClusterRkeConfigServicesKubeApiEventRateLimit? eventRateLimit,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            string image,
            bool? podSecurityPolicy,
            ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig? secretsEncryptionConfig,
            string serviceClusterIpRange,
            string serviceNodePortRange)
        {
            AdmissionConfiguration = admissionConfiguration;
            AlwaysPullImages = alwaysPullImages;
            AuditLog = auditLog;
            EventRateLimit = eventRateLimit;
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Image = image;
            PodSecurityPolicy = podSecurityPolicy;
            SecretsEncryptionConfig = secretsEncryptionConfig;
            ServiceClusterIpRange = serviceClusterIpRange;
            ServiceNodePortRange = serviceNodePortRange;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesKubeApiAuditLog
    {
        /// <summary>
        /// Event rate limit configuration. (map)
        /// </summary>
        public readonly ClusterRkeConfigServicesKubeApiAuditLogConfiguration Configuration;
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        public readonly bool? Enabled;

        [OutputConstructor]
        private ClusterRkeConfigServicesKubeApiAuditLog(
            ClusterRkeConfigServicesKubeApiAuditLogConfiguration configuration,
            bool? enabled)
        {
            Configuration = configuration;
            Enabled = enabled;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesKubeApiAuditLogConfiguration
    {
        /// <summary>
        /// Audit log format. Default: 'json' (string)
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// Audit log max age. Default: `30` (int)
        /// </summary>
        public readonly int? MaxAge;
        /// <summary>
        /// Audit log max backup. Default: `10` (int)
        /// </summary>
        public readonly int? MaxBackup;
        /// <summary>
        /// Audit log max size. Default: `100` (int)
        /// </summary>
        public readonly int? MaxSize;
        /// <summary>
        /// (Optional) Audit log path. Default: `/var/log/kube-audit/audit-log.json` (string)
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// Audit policy yaml encoded definition. `apiVersion` and `kind: Policy\nrules:"` fields are required in the yaml. Ex. `"apiVersion: audit.k8s.io/v1\nkind: Policy\nrules:\n- level: RequestResponse\n  resources:\n  - resources:\n    - pods\n"` [More info](https://rancher.com/docs/rke/latest/en/config-options/audit-log/) (string)
        /// </summary>
        public readonly string Policy;

        [OutputConstructor]
        private ClusterRkeConfigServicesKubeApiAuditLogConfiguration(
            string? format,
            int? maxAge,
            int? maxBackup,
            int? maxSize,
            string? path,
            string policy)
        {
            Format = format;
            MaxAge = maxAge;
            MaxBackup = maxBackup;
            MaxSize = maxSize;
            Path = path;
            Policy = policy;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesKubeApiEventRateLimit
    {
        /// <summary>
        /// Event rate limit configuration. (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Configuration;
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        public readonly bool? Enabled;

        [OutputConstructor]
        private ClusterRkeConfigServicesKubeApiEventRateLimit(
            ImmutableDictionary<string, object>? configuration,
            bool? enabled)
        {
            Configuration = configuration;
            Enabled = enabled;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig
    {
        /// <summary>
        /// Secrets encryption configuration. (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? CustomConfig;
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        public readonly bool? Enabled;

        [OutputConstructor]
        private ClusterRkeConfigServicesKubeApiSecretsEncryptionConfig(
            ImmutableDictionary<string, object>? customConfig,
            bool? enabled)
        {
            CustomConfig = customConfig;
            Enabled = enabled;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesKubeController
    {
        /// <summary>
        /// Cluster CIDR option for kube controller service (string)
        /// </summary>
        public readonly string ClusterCidr;
        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraBinds;
        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraEnvs;
        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Service Cluster ip Range option for kube controller service (string)
        /// </summary>
        public readonly string ServiceClusterIpRange;

        [OutputConstructor]
        private ClusterRkeConfigServicesKubeController(
            string clusterCidr,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            string image,
            string serviceClusterIpRange)
        {
            ClusterCidr = clusterCidr;
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Image = image;
            ServiceClusterIpRange = serviceClusterIpRange;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesKubelet
    {
        /// <summary>
        /// Cluster DNS Server option for kubelet service (string)
        /// </summary>
        public readonly string ClusterDnsServer;
        /// <summary>
        /// Cluster Domain option for kubelet service (string)
        /// </summary>
        public readonly string ClusterDomain;
        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraBinds;
        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraEnvs;
        /// <summary>
        /// Enable or disable failing when swap on is not supported (bool)
        /// * `generate_serving_certificate` [Generate a certificate signed by the kube-ca](https://rancher.com/docs/rke/latest/en/config-options/services/#kubelet-serving-certificate-requirements). Default `false` (bool)
        /// </summary>
        public readonly bool FailSwapOn;
        public readonly bool? GenerateServingCertificate;
        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Infra container image for kubelet service (string)
        /// </summary>
        public readonly string InfraContainerImage;

        [OutputConstructor]
        private ClusterRkeConfigServicesKubelet(
            string clusterDnsServer,
            string clusterDomain,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            bool failSwapOn,
            bool? generateServingCertificate,
            string image,
            string infraContainerImage)
        {
            ClusterDnsServer = clusterDnsServer;
            ClusterDomain = clusterDomain;
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            FailSwapOn = failSwapOn;
            GenerateServingCertificate = generateServingCertificate;
            Image = image;
            InfraContainerImage = infraContainerImage;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesKubeproxy
    {
        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraBinds;
        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraEnvs;
        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        public readonly string Image;

        [OutputConstructor]
        private ClusterRkeConfigServicesKubeproxy(
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            string image)
        {
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Image = image;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigServicesScheduler
    {
        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        /// <summary>
        /// Extra binds for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraBinds;
        /// <summary>
        /// Extra environment for scheduler service (list)
        /// </summary>
        public readonly ImmutableArray<string> ExtraEnvs;
        /// <summary>
        /// Docker image for scheduler service (string)
        /// </summary>
        public readonly string Image;

        [OutputConstructor]
        private ClusterRkeConfigServicesScheduler(
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            string image)
        {
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Image = image;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigUpgradeStrategy
    {
        /// <summary>
        /// RKE drain nodes. Default: `false` (bool)
        /// </summary>
        public readonly bool? Drain;
        /// <summary>
        /// RKE drain node input (list Maxitems: 1)
        /// </summary>
        public readonly ClusterRkeConfigUpgradeStrategyDrainInput DrainInput;
        /// <summary>
        /// RKE max unavailable controlplane nodes. Default: `1` (string)
        /// </summary>
        public readonly string? MaxUnavailableControlplane;
        /// <summary>
        /// RKE max unavailable worker nodes. Default: `10%` (string)
        /// </summary>
        public readonly string? MaxUnavailableWorker;

        [OutputConstructor]
        private ClusterRkeConfigUpgradeStrategy(
            bool? drain,
            ClusterRkeConfigUpgradeStrategyDrainInput drainInput,
            string? maxUnavailableControlplane,
            string? maxUnavailableWorker)
        {
            Drain = drain;
            DrainInput = drainInput;
            MaxUnavailableControlplane = maxUnavailableControlplane;
            MaxUnavailableWorker = maxUnavailableWorker;
        }
    }

    [OutputType]
    public sealed class ClusterRkeConfigUpgradeStrategyDrainInput
    {
        /// <summary>
        /// Delete RKE node local data. Default: `false` (bool)
        /// </summary>
        public readonly bool? DeleteLocalData;
        /// <summary>
        /// Force RKE node drain. Default: `false` (bool)
        /// </summary>
        public readonly bool? Force;
        /// <summary>
        /// RKE node drain grace period. Default: `-1` (int)
        /// </summary>
        public readonly int? GracePeriod;
        /// <summary>
        /// Ignore RKE daemon sets. Default: `true` (bool)
        /// </summary>
        public readonly bool? IgnoreDaemonSets;
        /// <summary>
        /// RKE node drain timeout. Default: `60` (int)
        /// </summary>
        public readonly int? Timeout;

        [OutputConstructor]
        private ClusterRkeConfigUpgradeStrategyDrainInput(
            bool? deleteLocalData,
            bool? force,
            int? gracePeriod,
            bool? ignoreDaemonSets,
            int? timeout)
        {
            DeleteLocalData = deleteLocalData;
            Force = force;
            GracePeriod = gracePeriod;
            IgnoreDaemonSets = ignoreDaemonSets;
            Timeout = timeout;
        }
    }

    [OutputType]
    public sealed class ClusterScheduledClusterScan
    {
        /// <summary>
        /// Enable scheduled cluster scan. Default: `false` (bool)
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Cluster scan config (List maxitems:1)
        /// </summary>
        public readonly ClusterScheduledClusterScanScanConfig ScanConfig;
        /// <summary>
        /// Cluster scan schedule config (list maxitems:1)
        /// </summary>
        public readonly ClusterScheduledClusterScanScheduleConfig ScheduleConfig;

        [OutputConstructor]
        private ClusterScheduledClusterScan(
            bool? enabled,
            ClusterScheduledClusterScanScanConfig scanConfig,
            ClusterScheduledClusterScanScheduleConfig scheduleConfig)
        {
            Enabled = enabled;
            ScanConfig = scanConfig;
            ScheduleConfig = scheduleConfig;
        }
    }

    [OutputType]
    public sealed class ClusterScheduledClusterScanScanConfig
    {
        /// <summary>
        /// Cluster Cis Scan config (List maxitems:1)
        /// </summary>
        public readonly ClusterScheduledClusterScanScanConfigCisScanConfig CisScanConfig;

        [OutputConstructor]
        private ClusterScheduledClusterScanScanConfig(ClusterScheduledClusterScanScanConfigCisScanConfig cisScanConfig)
        {
            CisScanConfig = cisScanConfig;
        }
    }

    [OutputType]
    public sealed class ClusterScheduledClusterScanScanConfigCisScanConfig
    {
        /// <summary>
        /// Debug master. Default: `false` (bool)
        /// </summary>
        public readonly bool? DebugMaster;
        /// <summary>
        /// Debug worker. Default: `false` (bool)
        /// </summary>
        public readonly bool? DebugWorker;
        /// <summary>
        /// Override benchmark version (string)
        /// </summary>
        public readonly string? OverrideBenchmarkVersion;
        /// <summary>
        /// Override skip (string)
        /// </summary>
        public readonly ImmutableArray<string> OverrideSkips;
        /// <summary>
        /// Cis scan profile. Allowed values: `"permissive" (default) || "hardened"` (string)
        /// </summary>
        public readonly string? Profile;

        [OutputConstructor]
        private ClusterScheduledClusterScanScanConfigCisScanConfig(
            bool? debugMaster,
            bool? debugWorker,
            string? overrideBenchmarkVersion,
            ImmutableArray<string> overrideSkips,
            string? profile)
        {
            DebugMaster = debugMaster;
            DebugWorker = debugWorker;
            OverrideBenchmarkVersion = overrideBenchmarkVersion;
            OverrideSkips = overrideSkips;
            Profile = profile;
        }
    }

    [OutputType]
    public sealed class ClusterScheduledClusterScanScheduleConfig
    {
        /// <summary>
        /// Crontab schedule. It should contains 5 fields `"&lt;min&gt; &lt;hour&gt; &lt;month_day&gt; &lt;month&gt; &lt;week_day&gt;"` (string)
        /// </summary>
        public readonly string CronSchedule;
        /// <summary>
        /// Retention for etcd backup. Default `6` (int)
        /// </summary>
        public readonly int Retention;

        [OutputConstructor]
        private ClusterScheduledClusterScanScheduleConfig(
            string cronSchedule,
            int retention)
        {
            CronSchedule = cronSchedule;
            Retention = retention;
        }
    }
    }
}
