// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
    /// 
    /// ## Example Usage
    /// 
    /// **Note optional/computed arguments** If any `optional/computed` argument of this resource is defined by the user, removing it from tf file will NOT reset its value. To reset it, let its definition at tf file as empty/false object. Ex: `enable_cluster_monitoring = false`, `cloud_provider {}`, `name = ""`
    /// 
    /// ### Creating Rancher v2 imported cluster
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new rancher2 imported Cluster
    ///     var foo_imported = new Rancher2.Cluster("foo-imported", new()
    ///     {
    ///         Description = "Foo rancher2 imported cluster",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// Creating Rancher v2 RKE cluster
    /// 
    /// ### Creating Rancher v2 RKE cluster enabling and customizing monitoring
    /// 
    /// **Note** Cluster monitoring version `0.2.0` and above, can't be enabled until cluster is fully deployed as [`kubeVersion`](https://github.com/rancher/system-charts/blob/52be656700468904b9bf15c3f39cd7112e1f8c9b/charts/rancher-monitoring/v0.2.0/Chart.yaml#L12) requirement has been introduced to helm chart
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new rancher2 RKE Cluster
    ///     var foo_custom = new Rancher2.Cluster("foo-custom", new()
    ///     {
    ///         ClusterMonitoringInput = new Rancher2.Inputs.ClusterClusterMonitoringInputArgs
    ///         {
    ///             Answers = 
    ///             {
    ///                 { "exporter-kubelets.https", true },
    ///                 { "exporter-node.enabled", true },
    ///                 { "exporter-node.ports.metrics.port", 9796 },
    ///                 { "exporter-node.resources.limits.cpu", "200m" },
    ///                 { "exporter-node.resources.limits.memory", "200Mi" },
    ///                 { "grafana.persistence.enabled", false },
    ///                 { "grafana.persistence.size", "10Gi" },
    ///                 { "grafana.persistence.storageClass", "default" },
    ///                 { "operator.resources.limits.memory", "500Mi" },
    ///                 { "prometheus.persistence.enabled", "false" },
    ///                 { "prometheus.persistence.size", "50Gi" },
    ///                 { "prometheus.persistence.storageClass", "default" },
    ///                 { "prometheus.persistent.useReleaseName", "true" },
    ///                 { "prometheus.resources.core.limits.cpu", "1000m" },
    ///                 { "prometheus.resources.core.limits.memory", "1500Mi" },
    ///                 { "prometheus.resources.core.requests.cpu", "750m" },
    ///                 { "prometheus.resources.core.requests.memory", "750Mi" },
    ///                 { "prometheus.retention", "12h" },
    ///             },
    ///             Version = "0.1.0",
    ///         },
    ///         Description = "Foo rancher2 custom cluster",
    ///         EnableClusterMonitoring = true,
    ///         RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///         {
    ///             Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///             {
    ///                 Plugin = "canal",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creating Rancher v2 RKE cluster enabling/customizing monitoring and istio
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new rancher2 RKE Cluster
    ///     var foo_customCluster = new Rancher2.Cluster("foo-customCluster", new()
    ///     {
    ///         Description = "Foo rancher2 custom cluster",
    ///         RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///         {
    ///             Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///             {
    ///                 Plugin = "canal",
    ///             },
    ///         },
    ///         EnableClusterMonitoring = true,
    ///         ClusterMonitoringInput = new Rancher2.Inputs.ClusterClusterMonitoringInputArgs
    ///         {
    ///             Answers = 
    ///             {
    ///                 { "exporter-kubelets.https", true },
    ///                 { "exporter-node.enabled", true },
    ///                 { "exporter-node.ports.metrics.port", 9796 },
    ///                 { "exporter-node.resources.limits.cpu", "200m" },
    ///                 { "exporter-node.resources.limits.memory", "200Mi" },
    ///                 { "grafana.persistence.enabled", false },
    ///                 { "grafana.persistence.size", "10Gi" },
    ///                 { "grafana.persistence.storageClass", "default" },
    ///                 { "operator.resources.limits.memory", "500Mi" },
    ///                 { "prometheus.persistence.enabled", "false" },
    ///                 { "prometheus.persistence.size", "50Gi" },
    ///                 { "prometheus.persistence.storageClass", "default" },
    ///                 { "prometheus.persistent.useReleaseName", "true" },
    ///                 { "prometheus.resources.core.limits.cpu", "1000m" },
    ///                 { "prometheus.resources.core.limits.memory", "1500Mi" },
    ///                 { "prometheus.resources.core.requests.cpu", "750m" },
    ///                 { "prometheus.resources.core.requests.memory", "750Mi" },
    ///                 { "prometheus.retention", "12h" },
    ///             },
    ///             Version = "0.1.0",
    ///         },
    ///     });
    /// 
    ///     // Create a new rancher2 Cluster Sync for foo-custom cluster
    ///     var foo_customClusterSync = new Rancher2.ClusterSync("foo-customClusterSync", new()
    ///     {
    ///         ClusterId = foo_customCluster.Id,
    ///         WaitMonitoring = foo_customCluster.EnableClusterMonitoring,
    ///     });
    /// 
    ///     // Create a new rancher2 Namespace
    ///     var foo_istio = new Rancher2.Namespace("foo-istio", new()
    ///     {
    ///         ProjectId = foo_customClusterSync.SystemProjectId,
    ///         Description = "istio namespace",
    ///     });
    /// 
    ///     // Create a new rancher2 App deploying istio (should wait until monitoring is up and running)
    ///     var istio = new Rancher2.App("istio", new()
    ///     {
    ///         CatalogName = "system-library",
    ///         Description = "Terraform app acceptance test",
    ///         ProjectId = foo_istio.ProjectId,
    ///         TemplateName = "rancher-istio",
    ///         TemplateVersion = "0.1.1",
    ///         TargetNamespace = foo_istio.Id,
    ///         Answers = 
    ///         {
    ///             { "certmanager.enabled", false },
    ///             { "enableCRDs", true },
    ///             { "galley.enabled", true },
    ///             { "gateways.enabled", false },
    ///             { "gateways.istio-ingressgateway.resources.limits.cpu", "2000m" },
    ///             { "gateways.istio-ingressgateway.resources.limits.memory", "1024Mi" },
    ///             { "gateways.istio-ingressgateway.resources.requests.cpu", "100m" },
    ///             { "gateways.istio-ingressgateway.resources.requests.memory", "128Mi" },
    ///             { "gateways.istio-ingressgateway.type", "NodePort" },
    ///             { "global.monitoring.type", "cluster-monitoring" },
    ///             { "global.rancher.clusterId", foo_customClusterSync.ClusterId },
    ///             { "istio_cni.enabled", "false" },
    ///             { "istiocoredns.enabled", "false" },
    ///             { "kiali.enabled", "true" },
    ///             { "mixer.enabled", "true" },
    ///             { "mixer.policy.enabled", "true" },
    ///             { "mixer.policy.resources.limits.cpu", "4800m" },
    ///             { "mixer.policy.resources.limits.memory", "4096Mi" },
    ///             { "mixer.policy.resources.requests.cpu", "1000m" },
    ///             { "mixer.policy.resources.requests.memory", "1024Mi" },
    ///             { "mixer.telemetry.resources.limits.cpu", "4800m" },
    ///             { "mixer.telemetry.resources.limits.memory", "4096Mi" },
    ///             { "mixer.telemetry.resources.requests.cpu", "1000m" },
    ///             { "mixer.telemetry.resources.requests.memory", "1024Mi" },
    ///             { "mtls.enabled", false },
    ///             { "nodeagent.enabled", false },
    ///             { "pilot.enabled", true },
    ///             { "pilot.resources.limits.cpu", "1000m" },
    ///             { "pilot.resources.limits.memory", "4096Mi" },
    ///             { "pilot.resources.requests.cpu", "500m" },
    ///             { "pilot.resources.requests.memory", "2048Mi" },
    ///             { "pilot.traceSampling", "1" },
    ///             { "security.enabled", true },
    ///             { "sidecarInjectorWebhook.enabled", true },
    ///             { "tracing.enabled", true },
    ///             { "tracing.jaeger.resources.limits.cpu", "500m" },
    ///             { "tracing.jaeger.resources.limits.memory", "1024Mi" },
    ///             { "tracing.jaeger.resources.requests.cpu", "100m" },
    ///             { "tracing.jaeger.resources.requests.memory", "100Mi" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creating Rancher v2 RKE cluster assigning a node pool (overlapped planes)
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new rancher2 RKE Cluster
    ///     var foo_custom = new Rancher2.Cluster("foo-custom", new()
    ///     {
    ///         Description = "Foo rancher2 custom cluster",
    ///         RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///         {
    ///             Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///             {
    ///                 Plugin = "canal",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Create a new rancher2 Node Template
    ///     var fooNodeTemplate = new Rancher2.NodeTemplate("fooNodeTemplate", new()
    ///     {
    ///         Description = "foo test",
    ///         Amazonec2Config = new Rancher2.Inputs.NodeTemplateAmazonec2ConfigArgs
    ///         {
    ///             AccessKey = "&lt;AWS_ACCESS_KEY&gt;",
    ///             SecretKey = "&lt;AWS_SECRET_KEY&gt;",
    ///             Ami = "&lt;AMI_ID&gt;",
    ///             Region = "&lt;REGION&gt;",
    ///             SecurityGroups = new[]
    ///             {
    ///                 "&lt;AWS_SECURITY_GROUP&gt;",
    ///             },
    ///             SubnetId = "&lt;SUBNET_ID&gt;",
    ///             VpcId = "&lt;VPC_ID&gt;",
    ///             Zone = "&lt;ZONE&gt;",
    ///         },
    ///     });
    /// 
    ///     // Create a new rancher2 Node Pool
    ///     var fooNodePool = new Rancher2.NodePool("fooNodePool", new()
    ///     {
    ///         ClusterId = foo_custom.Id,
    ///         HostnamePrefix = "foo-cluster-0",
    ///         NodeTemplateId = fooNodeTemplate.Id,
    ///         Quantity = 3,
    ///         ControlPlane = true,
    ///         Etcd = true,
    ///         Worker = true,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creating Rancher v2 RKE cluster from template. For Rancher v2.3.x and above.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new rancher2 cluster template
    ///     var fooClusterTemplate = new Rancher2.ClusterTemplate("fooClusterTemplate", new()
    ///     {
    ///         Members = new[]
    ///         {
    ///             new Rancher2.Inputs.ClusterTemplateMemberArgs
    ///             {
    ///                 AccessType = "owner",
    ///                 UserPrincipalId = "local://user-XXXXX",
    ///             },
    ///         },
    ///         TemplateRevisions = new[]
    ///         {
    ///             new Rancher2.Inputs.ClusterTemplateTemplateRevisionArgs
    ///             {
    ///                 Name = "V1",
    ///                 ClusterConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigArgs
    ///                 {
    ///                     RkeConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs
    ///                     {
    ///                         Network = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs
    ///                         {
    ///                             Plugin = "canal",
    ///                         },
    ///                         Services = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs
    ///                         {
    ///                             Etcd = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs
    ///                             {
    ///                                 Creation = "6h",
    ///                                 Retention = "24h",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 Default = true,
    ///             },
    ///         },
    ///         Description = "Test cluster template v2",
    ///     });
    /// 
    ///     // Create a new rancher2 RKE Cluster from template
    ///     var fooCluster = new Rancher2.Cluster("fooCluster", new()
    ///     {
    ///         ClusterTemplateId = fooClusterTemplate.Id,
    ///         ClusterTemplateRevisionId = fooClusterTemplate.TemplateRevisions.Apply(templateRevisions =&gt; templateRevisions[0].Id),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x and above.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Rancher2.Cluster("foo", new()
    ///     {
    ///         Description = "Terraform custom cluster",
    ///         RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///         {
    ///             Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///             {
    ///                 Plugin = "canal",
    ///             },
    ///             Services = new Rancher2.Inputs.ClusterRkeConfigServicesArgs
    ///             {
    ///                 Etcd = new Rancher2.Inputs.ClusterRkeConfigServicesEtcdArgs
    ///                 {
    ///                     Creation = "6h",
    ///                     Retention = "24h",
    ///                 },
    ///                 KubeApi = new Rancher2.Inputs.ClusterRkeConfigServicesKubeApiArgs
    ///                 {
    ///                     AuditLog = new Rancher2.Inputs.ClusterRkeConfigServicesKubeApiAuditLogArgs
    ///                     {
    ///                         Configuration = new Rancher2.Inputs.ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs
    ///                         {
    ///                             Format = "json",
    ///                             MaxAge = 5,
    ///                             MaxBackup = 5,
    ///                             MaxSize = 100,
    ///                             Path = "-",
    ///                             Policy = @"apiVersion: audit.k8s.io/v1
    /// kind: Policy
    /// metadata:
    ///   creationTimestamp: null
    /// omitStages:
    /// - RequestReceived
    /// rules:
    /// - level: RequestResponse
    ///   resources:
    ///   - resources:
    ///     - pods
    /// 
    /// ",
    ///                         },
    ///                         Enabled = true,
    ///                     },
    ///                 },
    ///             },
    ///             UpgradeStrategy = new Rancher2.Inputs.ClusterRkeConfigUpgradeStrategyArgs
    ///             {
    ///                 Drain = true,
    ///                 MaxUnavailableWorker = "20%",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creating Rancher v2 RKE cluster with cluster agent customization. For Rancher v2.7.5 and above.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Rancher2.Cluster("foo", new()
    ///     {
    ///         ClusterAgentDeploymentCustomizations = new[]
    ///         {
    ///             new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationArgs
    ///             {
    ///                 AppendTolerations = new[]
    ///                 {
    ///                     new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationAppendTolerationArgs
    ///                     {
    ///                         Effect = "NoSchedule",
    ///                         Key = "tolerate/control-plane",
    ///                         Value = "true",
    ///                     },
    ///                 },
    ///                 OverrideAffinity = @"{
    ///   ""nodeAffinity"": {
    ///     ""requiredDuringSchedulingIgnoredDuringExecution"": {
    ///       ""nodeSelectorTerms"": [{
    ///         ""matchExpressions"": [{
    ///           ""key"": ""not.this/nodepool"",
    ///           ""operator"": ""In"",
    ///           ""values"": [
    ///             ""true""
    ///           ]
    ///         }]
    ///       }]
    ///     }
    ///   }
    /// }
    /// 
    /// ",
    ///                 OverrideResourceRequirements = new[]
    ///                 {
    ///                     new Rancher2.Inputs.ClusterClusterAgentDeploymentCustomizationOverrideResourceRequirementArgs
    ///                     {
    ///                         CpuLimit = "800",
    ///                         CpuRequest = "500",
    ///                         MemoryLimit = "800",
    ///                         MemoryRequest = "500",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Description = "Terraform cluster with agent customization",
    ///         RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///         {
    ///             Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///             {
    ///                 Plugin = "canal",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creating Rancher v2 RKE cluster with Pod Security Admission Configuration Template (PSACT). For Rancher v2.7.2 and above.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Custom PSACT (if you wish to use your own)
    ///     var fooPodSecurityAdmissionConfigurationTemplate = new Rancher2.PodSecurityAdmissionConfigurationTemplate("fooPodSecurityAdmissionConfigurationTemplate", new()
    ///     {
    ///         Defaults = new Rancher2.Inputs.PodSecurityAdmissionConfigurationTemplateDefaultsArgs
    ///         {
    ///             Audit = "restricted",
    ///             AuditVersion = "latest",
    ///             Enforce = "restricted",
    ///             EnforceVersion = "latest",
    ///             Warn = "restricted",
    ///             WarnVersion = "latest",
    ///         },
    ///         Description = "This is my custom Pod Security Admission Configuration Template",
    ///         Exemptions = new Rancher2.Inputs.PodSecurityAdmissionConfigurationTemplateExemptionsArgs
    ///         {
    ///             Namespaces = new[]
    ///             {
    ///                 "ingress-nginx",
    ///                 "kube-system",
    ///             },
    ///             RuntimeClasses = new[]
    ///             {
    ///                 "testclass",
    ///             },
    ///             Usernames = new[]
    ///             {
    ///                 "testuser",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooCluster = new Rancher2.Cluster("fooCluster", new()
    ///     {
    ///         DefaultPodSecurityAdmissionConfigurationTemplateName = "&lt;name&gt;",
    ///         Description = "Terraform cluster with PSACT",
    ///         RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///         {
    ///             Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///             {
    ///                 Plugin = "canal",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Importing EKS cluster to Rancher v2, using `eks_config_v2`. For Rancher v2.5.x and above.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooCloudCredential = new Rancher2.CloudCredential("fooCloudCredential", new()
    ///     {
    ///         Description = "foo test",
    ///         Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs
    ///         {
    ///             AccessKey = "&lt;aws-access-key&gt;",
    ///             SecretKey = "&lt;aws-secret-key&gt;",
    ///         },
    ///     });
    /// 
    ///     var fooCluster = new Rancher2.Cluster("fooCluster", new()
    ///     {
    ///         Description = "Terraform EKS cluster",
    ///         EksConfigV2 = new Rancher2.Inputs.ClusterEksConfigV2Args
    ///         {
    ///             CloudCredentialId = fooCloudCredential.Id,
    ///             Name = "&lt;cluster-name&gt;",
    ///             Region = "&lt;eks-region&gt;",
    ///             Imported = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creating EKS cluster from Rancher v2, using `eks_config_v2`. For Rancher v2.5.x and above.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooCloudCredential = new Rancher2.CloudCredential("fooCloudCredential", new()
    ///     {
    ///         Description = "foo test",
    ///         Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs
    ///         {
    ///             AccessKey = "&lt;aws-access-key&gt;",
    ///             SecretKey = "&lt;aws-secret-key&gt;",
    ///         },
    ///     });
    /// 
    ///     var fooCluster = new Rancher2.Cluster("fooCluster", new()
    ///     {
    ///         Description = "Terraform EKS cluster",
    ///         EksConfigV2 = new Rancher2.Inputs.ClusterEksConfigV2Args
    ///         {
    ///             CloudCredentialId = fooCloudCredential.Id,
    ///             Region = "&lt;EKS_REGION&gt;",
    ///             KubernetesVersion = "1.24",
    ///             LoggingTypes = new[]
    ///             {
    ///                 "audit",
    ///                 "api",
    ///             },
    ///             NodeGroups = new[]
    ///             {
    ///                 new Rancher2.Inputs.ClusterEksConfigV2NodeGroupArgs
    ///                 {
    ///                     Name = "node_group1",
    ///                     InstanceType = "t3.medium",
    ///                     DesiredSize = 3,
    ///                     MaxSize = 5,
    ///                 },
    ///                 new Rancher2.Inputs.ClusterEksConfigV2NodeGroupArgs
    ///                 {
    ///                     Name = "node_group2",
    ///                     InstanceType = "m5.xlarge",
    ///                     DesiredSize = 2,
    ///                     MaxSize = 3,
    ///                     NodeRole = "arn:aws:iam::role/test-NodeInstanceRole",
    ///                 },
    ///             },
    ///             PrivateAccess = true,
    ///             PublicAccess = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creating EKS cluster from Rancher v2, using `eks_config_v2` and launch template. For Rancher v2.5.6 and above.
    /// 
    /// Note: To use `launch_template` you must provide the ID (seen as `&lt;EC2_LAUNCH_TEMPLATE_ID&gt;`) to the template either as a static value. Or fetched via AWS data-source using one of: aws_ami first and provide the ID to that.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooCloudCredential = new Rancher2.CloudCredential("fooCloudCredential", new()
    ///     {
    ///         Description = "foo test",
    ///         Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs
    ///         {
    ///             AccessKey = "&lt;aws-access-key&gt;",
    ///             SecretKey = "&lt;aws-secret-key&gt;",
    ///         },
    ///     });
    /// 
    ///     var fooCluster = new Rancher2.Cluster("fooCluster", new()
    ///     {
    ///         Description = "Terraform EKS cluster",
    ///         EksConfigV2 = new Rancher2.Inputs.ClusterEksConfigV2Args
    ///         {
    ///             CloudCredentialId = fooCloudCredential.Id,
    ///             Region = "&lt;EKS_REGION&gt;",
    ///             KubernetesVersion = "1.24",
    ///             LoggingTypes = new[]
    ///             {
    ///                 "audit",
    ///                 "api",
    ///             },
    ///             NodeGroups = new[]
    ///             {
    ///                 new Rancher2.Inputs.ClusterEksConfigV2NodeGroupArgs
    ///                 {
    ///                     DesiredSize = 3,
    ///                     MaxSize = 5,
    ///                     Name = "node_group1",
    ///                     LaunchTemplates = new[]
    ///                     {
    ///                         new Rancher2.Inputs.ClusterEksConfigV2NodeGroupLaunchTemplateArgs
    ///                         {
    ///                             Id = "&lt;ec2-launch-template-id&gt;",
    ///                             Version = 1,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             PrivateAccess = true,
    ///             PublicAccess = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Creating AKS cluster from Rancher v2, using `aks_config_v2`. For Rancher v2.6.0 and above.
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo_aks = new Rancher2.CloudCredential("foo-aks", new()
    ///     {
    ///         AzureCredentialConfig = new Rancher2.Inputs.CloudCredentialAzureCredentialConfigArgs
    ///         {
    ///             ClientId = "&lt;client-id&gt;",
    ///             ClientSecret = "&lt;client-secret&gt;",
    ///             SubscriptionId = "&lt;subscription-id&gt;",
    ///         },
    ///     });
    /// 
    ///     var foo = new Rancher2.Cluster("foo", new()
    ///     {
    ///         Description = "Terraform AKS cluster",
    ///         AksConfigV2 = new Rancher2.Inputs.ClusterAksConfigV2Args
    ///         {
    ///             CloudCredentialId = foo_aks.Id,
    ///             ResourceGroup = "&lt;resource-group&gt;",
    ///             ResourceLocation = "&lt;resource-location&gt;",
    ///             DnsPrefix = "&lt;dns-prefix&gt;",
    ///             KubernetesVersion = "1.24.6",
    ///             NetworkPlugin = "&lt;network-plugin&gt;",
    ///             NodePools = new[]
    ///             {
    ///                 new Rancher2.Inputs.ClusterAksConfigV2NodePoolArgs
    ///                 {
    ///                     AvailabilityZones = new[]
    ///                     {
    ///                         "1",
    ///                         "2",
    ///                         "3",
    ///                     },
    ///                     Name = "&lt;nodepool-name-1&gt;",
    ///                     Mode = "System",
    ///                     Count = 1,
    ///                     OrchestratorVersion = "1.21.2",
    ///                     OsDiskSizeGb = 128,
    ///                     VmSize = "Standard_DS2_v2",
    ///                 },
    ///                 new Rancher2.Inputs.ClusterAksConfigV2NodePoolArgs
    ///                 {
    ///                     AvailabilityZones = new[]
    ///                     {
    ///                         "1",
    ///                         "2",
    ///                         "3",
    ///                     },
    ///                     Name = "&lt;nodepool-name-2&gt;",
    ///                     Count = 1,
    ///                     Mode = "User",
    ///                     OrchestratorVersion = "1.21.2",
    ///                     OsDiskSizeGb = 128,
    ///                     VmSize = "Standard_DS2_v2",
    ///                     MaxSurge = "25%",
    ///                     Labels = 
    ///                     {
    ///                         { "test1", "data1" },
    ///                         { "test2", "data2" },
    ///                     },
    ///                     Taints = new[]
    ///                     {
    ///                         "none:PreferNoSchedule",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Clusters can be imported using the Rancher Cluster ID
    /// 
    /// ```sh
    /// $ pulumi import rancher2:index/cluster:Cluster foo &amp;lt;CLUSTER_ID&amp;gt;
    /// ```
    /// </summary>
    [Rancher2ResourceType("rancher2:index/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
        /// </summary>
        [Output("agentEnvVars")]
        public Output<ImmutableArray<Outputs.ClusterAgentEnvVar>> AgentEnvVars { get; private set; } = null!;

        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("aksConfig")]
        public Output<Outputs.ClusterAksConfig?> AksConfig { get; private set; } = null!;

        /// <summary>
        /// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("aksConfigV2")]
        public Output<Outputs.ClusterAksConfigV2?> AksConfigV2 { get; private set; } = null!;

        /// <summary>
        /// Annotations for the Cluster (map)
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// TLS CA certificate for etcd service (string)
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        [Output("clusterAgentDeploymentCustomizations")]
        public Output<ImmutableArray<Outputs.ClusterClusterAgentDeploymentCustomization>> ClusterAgentDeploymentCustomizations { get; private set; } = null!;

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Output("clusterAuthEndpoint")]
        public Output<Outputs.ClusterClusterAuthEndpoint> ClusterAuthEndpoint { get; private set; } = null!;

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Output("clusterMonitoringInput")]
        public Output<Outputs.ClusterClusterMonitoringInput?> ClusterMonitoringInput { get; private set; } = null!;

        /// <summary>
        /// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        /// </summary>
        [Output("clusterRegistrationToken")]
        public Output<Outputs.ClusterClusterRegistrationToken> ClusterRegistrationToken { get; private set; } = null!;

        /// <summary>
        /// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Output("clusterTemplateAnswers")]
        public Output<Outputs.ClusterClusterTemplateAnswers> ClusterTemplateAnswers { get; private set; } = null!;

        /// <summary>
        /// Cluster template ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("clusterTemplateId")]
        public Output<string?> ClusterTemplateId { get; private set; } = null!;

        /// <summary>
        /// Cluster template questions. For Rancher v2.3.x and above (list)
        /// </summary>
        [Output("clusterTemplateQuestions")]
        public Output<ImmutableArray<Outputs.ClusterClusterTemplateQuestion>> ClusterTemplateQuestions { get; private set; } = null!;

        /// <summary>
        /// Cluster template revision ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("clusterTemplateRevisionId")]
        public Output<string?> ClusterTemplateRevisionId { get; private set; } = null!;

        /// <summary>
        /// The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)
        /// </summary>
        [Output("defaultPodSecurityAdmissionConfigurationTemplateName")]
        public Output<string> DefaultPodSecurityAdmissionConfigurationTemplateName { get; private set; } = null!;

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Output("defaultPodSecurityPolicyTemplateId")]
        public Output<string> DefaultPodSecurityPolicyTemplateId { get; private set; } = null!;

        /// <summary>
        /// (Computed) Default project ID for the cluster (string)
        /// </summary>
        [Output("defaultProjectId")]
        public Output<string> DefaultProjectId { get; private set; } = null!;

        /// <summary>
        /// The description for Cluster (string)
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Desired agent image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("desiredAgentImage")]
        public Output<string> DesiredAgentImage { get; private set; } = null!;

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("desiredAuthImage")]
        public Output<string> DesiredAuthImage { get; private set; } = null!;

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Output("dockerRootDir")]
        public Output<string> DockerRootDir { get; private set; } = null!;

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Output("driver")]
        public Output<string> Driver { get; private set; } = null!;

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("eksConfig")]
        public Output<Outputs.ClusterEksConfig?> EksConfig { get; private set; } = null!;

        /// <summary>
        /// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x and above (list maxitems:1)
        /// </summary>
        [Output("eksConfigV2")]
        public Output<Outputs.ClusterEksConfigV2> EksConfigV2 { get; private set; } = null!;

        /// <summary>
        /// Enable built-in cluster alerting (bool)
        /// </summary>
        [Output("enableClusterAlerting")]
        public Output<bool> EnableClusterAlerting { get; private set; } = null!;

        /// <summary>
        /// Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
        /// </summary>
        [Output("enableClusterIstio")]
        public Output<bool> EnableClusterIstio { get; private set; } = null!;

        /// <summary>
        /// Enable built-in cluster monitoring (bool)
        /// </summary>
        [Output("enableClusterMonitoring")]
        public Output<bool> EnableClusterMonitoring { get; private set; } = null!;

        /// <summary>
        /// Enable project network isolation (bool)
        /// </summary>
        [Output("enableNetworkPolicy")]
        public Output<bool> EnableNetworkPolicy { get; private set; } = null!;

        /// <summary>
        /// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        [Output("fleetAgentDeploymentCustomizations")]
        public Output<ImmutableArray<Outputs.ClusterFleetAgentDeploymentCustomization>> FleetAgentDeploymentCustomizations { get; private set; } = null!;

        /// <summary>
        /// Fleet workspace name (string)
        /// </summary>
        [Output("fleetWorkspaceName")]
        public Output<string> FleetWorkspaceName { get; private set; } = null!;

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("gkeConfig")]
        public Output<Outputs.ClusterGkeConfig?> GkeConfig { get; private set; } = null!;

        /// <summary>
        /// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 and above (list maxitems:1)
        /// </summary>
        [Output("gkeConfigV2")]
        public Output<Outputs.ClusterGkeConfigV2?> GkeConfigV2 { get; private set; } = null!;

        /// <summary>
        /// (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
        /// </summary>
        [Output("istioEnabled")]
        public Output<bool> IstioEnabled { get; private set; } = null!;

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("k3sConfig")]
        public Output<Outputs.ClusterK3sConfig> K3sConfig { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `cluster_auth_endpoint` enabled, the kube_config will not be available until the cluster is `connected` (string)
        /// </summary>
        [Output("kubeConfig")]
        public Output<string> KubeConfig { get; private set; } = null!;

        /// <summary>
        /// Labels for the Cluster (map)
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the Cluster (string)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("okeConfig")]
        public Output<Outputs.ClusterOkeConfig?> OkeConfig { get; private set; } = null!;

        /// <summary>
        /// The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("rke2Config")]
        public Output<Outputs.ClusterRke2Config> Rke2Config { get; private set; } = null!;

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Output("rkeConfig")]
        public Output<Outputs.ClusterRkeConfig> RkeConfig { get; private set; } = null!;

        /// <summary>
        /// (Computed) System project ID for the cluster (string)
        /// </summary>
        [Output("systemProjectId")]
        public Output<string> SystemProjectId { get; private set; } = null!;

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Output("windowsPreferedCluster")]
        public Output<bool?> WindowsPreferedCluster { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("rancher2:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "caCert",
                    "kubeConfig",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("agentEnvVars")]
        private InputList<Inputs.ClusterAgentEnvVarArgs>? _agentEnvVars;

        /// <summary>
        /// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterAgentEnvVarArgs> AgentEnvVars
        {
            get => _agentEnvVars ?? (_agentEnvVars = new InputList<Inputs.ClusterAgentEnvVarArgs>());
            set => _agentEnvVars = value;
        }

        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfig")]
        public Input<Inputs.ClusterAksConfigArgs>? AksConfig { get; set; }

        /// <summary>
        /// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfigV2")]
        public Input<Inputs.ClusterAksConfigV2Args>? AksConfigV2 { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for the Cluster (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("clusterAgentDeploymentCustomizations")]
        private InputList<Inputs.ClusterClusterAgentDeploymentCustomizationArgs>? _clusterAgentDeploymentCustomizations;

        /// <summary>
        /// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterAgentDeploymentCustomizationArgs> ClusterAgentDeploymentCustomizations
        {
            get => _clusterAgentDeploymentCustomizations ?? (_clusterAgentDeploymentCustomizations = new InputList<Inputs.ClusterClusterAgentDeploymentCustomizationArgs>());
            set => _clusterAgentDeploymentCustomizations = value;
        }

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Input("clusterAuthEndpoint")]
        public Input<Inputs.ClusterClusterAuthEndpointArgs>? ClusterAuthEndpoint { get; set; }

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Input("clusterMonitoringInput")]
        public Input<Inputs.ClusterClusterMonitoringInputArgs>? ClusterMonitoringInput { get; set; }

        /// <summary>
        /// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Input("clusterTemplateAnswers")]
        public Input<Inputs.ClusterClusterTemplateAnswersArgs>? ClusterTemplateAnswers { get; set; }

        /// <summary>
        /// Cluster template ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateId")]
        public Input<string>? ClusterTemplateId { get; set; }

        [Input("clusterTemplateQuestions")]
        private InputList<Inputs.ClusterClusterTemplateQuestionArgs>? _clusterTemplateQuestions;

        /// <summary>
        /// Cluster template questions. For Rancher v2.3.x and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterTemplateQuestionArgs> ClusterTemplateQuestions
        {
            get => _clusterTemplateQuestions ?? (_clusterTemplateQuestions = new InputList<Inputs.ClusterClusterTemplateQuestionArgs>());
            set => _clusterTemplateQuestions = value;
        }

        /// <summary>
        /// Cluster template revision ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateRevisionId")]
        public Input<string>? ClusterTemplateRevisionId { get; set; }

        /// <summary>
        /// The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)
        /// </summary>
        [Input("defaultPodSecurityAdmissionConfigurationTemplateName")]
        public Input<string>? DefaultPodSecurityAdmissionConfigurationTemplateName { get; set; }

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Input("defaultPodSecurityPolicyTemplateId")]
        public Input<string>? DefaultPodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// The description for Cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Desired agent image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAgentImage")]
        public Input<string>? DesiredAgentImage { get; set; }

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAuthImage")]
        public Input<string>? DesiredAuthImage { get; set; }

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("dockerRootDir")]
        public Input<string>? DockerRootDir { get; set; }

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("eksConfig")]
        public Input<Inputs.ClusterEksConfigArgs>? EksConfig { get; set; }

        /// <summary>
        /// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x and above (list maxitems:1)
        /// </summary>
        [Input("eksConfigV2")]
        public Input<Inputs.ClusterEksConfigV2Args>? EksConfigV2 { get; set; }

        /// <summary>
        /// Enable built-in cluster alerting (bool)
        /// </summary>
        [Input("enableClusterAlerting")]
        public Input<bool>? EnableClusterAlerting { get; set; }

        /// <summary>
        /// Enable built-in cluster monitoring (bool)
        /// </summary>
        [Input("enableClusterMonitoring")]
        public Input<bool>? EnableClusterMonitoring { get; set; }

        /// <summary>
        /// Enable project network isolation (bool)
        /// </summary>
        [Input("enableNetworkPolicy")]
        public Input<bool>? EnableNetworkPolicy { get; set; }

        [Input("fleetAgentDeploymentCustomizations")]
        private InputList<Inputs.ClusterFleetAgentDeploymentCustomizationArgs>? _fleetAgentDeploymentCustomizations;

        /// <summary>
        /// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterFleetAgentDeploymentCustomizationArgs> FleetAgentDeploymentCustomizations
        {
            get => _fleetAgentDeploymentCustomizations ?? (_fleetAgentDeploymentCustomizations = new InputList<Inputs.ClusterFleetAgentDeploymentCustomizationArgs>());
            set => _fleetAgentDeploymentCustomizations = value;
        }

        /// <summary>
        /// Fleet workspace name (string)
        /// </summary>
        [Input("fleetWorkspaceName")]
        public Input<string>? FleetWorkspaceName { get; set; }

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("gkeConfig")]
        public Input<Inputs.ClusterGkeConfigArgs>? GkeConfig { get; set; }

        /// <summary>
        /// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 and above (list maxitems:1)
        /// </summary>
        [Input("gkeConfigV2")]
        public Input<Inputs.ClusterGkeConfigV2Args>? GkeConfigV2 { get; set; }

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("k3sConfig")]
        public Input<Inputs.ClusterK3sConfigArgs>? K3sConfig { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for the Cluster (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Cluster (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("okeConfig")]
        public Input<Inputs.ClusterOkeConfigArgs>? OkeConfig { get; set; }

        /// <summary>
        /// The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("rke2Config")]
        public Input<Inputs.ClusterRke2ConfigArgs>? Rke2Config { get; set; }

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Input("rkeConfig")]
        public Input<Inputs.ClusterRkeConfigArgs>? RkeConfig { get; set; }

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Input("windowsPreferedCluster")]
        public Input<bool>? WindowsPreferedCluster { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        [Input("agentEnvVars")]
        private InputList<Inputs.ClusterAgentEnvVarGetArgs>? _agentEnvVars;

        /// <summary>
        /// Optional Agent Env Vars for Rancher agent. For Rancher v2.5.6 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterAgentEnvVarGetArgs> AgentEnvVars
        {
            get => _agentEnvVars ?? (_agentEnvVars = new InputList<Inputs.ClusterAgentEnvVarGetArgs>());
            set => _agentEnvVars = value;
        }

        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfig")]
        public Input<Inputs.ClusterAksConfigGetArgs>? AksConfig { get; set; }

        /// <summary>
        /// The Azure AKS v2 configuration for creating/import `aks` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfigV2")]
        public Input<Inputs.ClusterAksConfigV2GetArgs>? AksConfigV2 { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for the Cluster (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("caCert")]
        private Input<string>? _caCert;

        /// <summary>
        /// TLS CA certificate for etcd service (string)
        /// </summary>
        public Input<string>? CaCert
        {
            get => _caCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clusterAgentDeploymentCustomizations")]
        private InputList<Inputs.ClusterClusterAgentDeploymentCustomizationGetArgs>? _clusterAgentDeploymentCustomizations;

        /// <summary>
        /// Optional customization for cluster agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterAgentDeploymentCustomizationGetArgs> ClusterAgentDeploymentCustomizations
        {
            get => _clusterAgentDeploymentCustomizations ?? (_clusterAgentDeploymentCustomizations = new InputList<Inputs.ClusterClusterAgentDeploymentCustomizationGetArgs>());
            set => _clusterAgentDeploymentCustomizations = value;
        }

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Input("clusterAuthEndpoint")]
        public Input<Inputs.ClusterClusterAuthEndpointGetArgs>? ClusterAuthEndpoint { get; set; }

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Input("clusterMonitoringInput")]
        public Input<Inputs.ClusterClusterMonitoringInputGetArgs>? ClusterMonitoringInput { get; set; }

        /// <summary>
        /// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        /// </summary>
        [Input("clusterRegistrationToken")]
        public Input<Inputs.ClusterClusterRegistrationTokenGetArgs>? ClusterRegistrationToken { get; set; }

        /// <summary>
        /// Cluster template answers. For Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Input("clusterTemplateAnswers")]
        public Input<Inputs.ClusterClusterTemplateAnswersGetArgs>? ClusterTemplateAnswers { get; set; }

        /// <summary>
        /// Cluster template ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateId")]
        public Input<string>? ClusterTemplateId { get; set; }

        [Input("clusterTemplateQuestions")]
        private InputList<Inputs.ClusterClusterTemplateQuestionGetArgs>? _clusterTemplateQuestions;

        /// <summary>
        /// Cluster template questions. For Rancher v2.3.x and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterTemplateQuestionGetArgs> ClusterTemplateQuestions
        {
            get => _clusterTemplateQuestions ?? (_clusterTemplateQuestions = new InputList<Inputs.ClusterClusterTemplateQuestionGetArgs>());
            set => _clusterTemplateQuestions = value;
        }

        /// <summary>
        /// Cluster template revision ID. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateRevisionId")]
        public Input<string>? ClusterTemplateRevisionId { get; set; }

        /// <summary>
        /// The name of the pre-defined pod security admission configuration template to be applied to the cluster. Rancher admins (or those with the right permissions) can create, manage, and edit those templates. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/psa-config-templates). The argument is available in Rancher v2.7.2 and above (string)
        /// </summary>
        [Input("defaultPodSecurityAdmissionConfigurationTemplateName")]
        public Input<string>? DefaultPodSecurityAdmissionConfigurationTemplateName { get; set; }

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Input("defaultPodSecurityPolicyTemplateId")]
        public Input<string>? DefaultPodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// (Computed) Default project ID for the cluster (string)
        /// </summary>
        [Input("defaultProjectId")]
        public Input<string>? DefaultProjectId { get; set; }

        /// <summary>
        /// The description for Cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Desired agent image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAgentImage")]
        public Input<string>? DesiredAgentImage { get; set; }

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAuthImage")]
        public Input<string>? DesiredAuthImage { get; set; }

        /// <summary>
        /// Desired auth image. For Rancher v2.3.x and above (string)
        /// </summary>
        [Input("dockerRootDir")]
        public Input<string>? DockerRootDir { get; set; }

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("eksConfig")]
        public Input<Inputs.ClusterEksConfigGetArgs>? EksConfig { get; set; }

        /// <summary>
        /// The Amazon EKS V2 configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `gke_config_v2`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x and above (list maxitems:1)
        /// </summary>
        [Input("eksConfigV2")]
        public Input<Inputs.ClusterEksConfigV2GetArgs>? EksConfigV2 { get; set; }

        /// <summary>
        /// Enable built-in cluster alerting (bool)
        /// </summary>
        [Input("enableClusterAlerting")]
        public Input<bool>? EnableClusterAlerting { get; set; }

        /// <summary>
        /// Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
        /// </summary>
        [Input("enableClusterIstio")]
        public Input<bool>? EnableClusterIstio { get; set; }

        /// <summary>
        /// Enable built-in cluster monitoring (bool)
        /// </summary>
        [Input("enableClusterMonitoring")]
        public Input<bool>? EnableClusterMonitoring { get; set; }

        /// <summary>
        /// Enable project network isolation (bool)
        /// </summary>
        [Input("enableNetworkPolicy")]
        public Input<bool>? EnableNetworkPolicy { get; set; }

        [Input("fleetAgentDeploymentCustomizations")]
        private InputList<Inputs.ClusterFleetAgentDeploymentCustomizationGetArgs>? _fleetAgentDeploymentCustomizations;

        /// <summary>
        /// Optional customization for fleet agent. For Rancher v2.7.5 and above (list)
        /// </summary>
        public InputList<Inputs.ClusterFleetAgentDeploymentCustomizationGetArgs> FleetAgentDeploymentCustomizations
        {
            get => _fleetAgentDeploymentCustomizations ?? (_fleetAgentDeploymentCustomizations = new InputList<Inputs.ClusterFleetAgentDeploymentCustomizationGetArgs>());
            set => _fleetAgentDeploymentCustomizations = value;
        }

        /// <summary>
        /// Fleet workspace name (string)
        /// </summary>
        [Input("fleetWorkspaceName")]
        public Input<string>? FleetWorkspaceName { get; set; }

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config_v2`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("gkeConfig")]
        public Input<Inputs.ClusterGkeConfigGetArgs>? GkeConfig { get; set; }

        /// <summary>
        /// The Google GKE V2 configuration for `gke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `oke_config`, `k3s_config` and `rke_config`. For Rancher v2.5.8 and above (list maxitems:1)
        /// </summary>
        [Input("gkeConfigV2")]
        public Input<Inputs.ClusterGkeConfigV2GetArgs>? GkeConfigV2 { get; set; }

        /// <summary>
        /// (Computed) Is istio enabled at cluster? For Rancher v2.3.x and above (bool)
        /// </summary>
        [Input("istioEnabled")]
        public Input<bool>? IstioEnabled { get; set; }

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("k3sConfig")]
        public Input<Inputs.ClusterK3sConfigGetArgs>? K3sConfig { get; set; }

        [Input("kubeConfig")]
        private Input<string>? _kubeConfig;

        /// <summary>
        /// (Computed/Sensitive) Kube Config generated for the cluster. Note: For Rancher 2.6.0 and above, when the cluster has `cluster_auth_endpoint` enabled, the kube_config will not be available until the cluster is `connected` (string)
        /// </summary>
        public Input<string>? KubeConfig
        {
            get => _kubeConfig;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _kubeConfig = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for the Cluster (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Cluster (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("okeConfig")]
        public Input<Inputs.ClusterOkeConfigGetArgs>? OkeConfig { get; set; }

        /// <summary>
        /// The RKE2 configuration for `rke2` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `gke_config`, `oke_config`, `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("rke2Config")]
        public Input<Inputs.ClusterRke2ConfigGetArgs>? Rke2Config { get; set; }

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `aks_config_v2`, `eks_config`, `eks_config_v2`, `gke_config`, `gke_config_v2`, `oke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Input("rkeConfig")]
        public Input<Inputs.ClusterRkeConfigGetArgs>? RkeConfig { get; set; }

        /// <summary>
        /// (Computed) System project ID for the cluster (string)
        /// </summary>
        [Input("systemProjectId")]
        public Input<string>? SystemProjectId { get; set; }

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Input("windowsPreferedCluster")]
        public Input<bool>? WindowsPreferedCluster { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
