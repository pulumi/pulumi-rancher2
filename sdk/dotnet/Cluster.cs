// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// Provides a Rancher v2 Cluster resource. This can be used to create Clusters for Rancher v2 environments and retrieve their information.
    /// 
    /// ## Example Usage
    /// ### Creating Rancher v2 RKE cluster enabling and customizing monitoring
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create a new rancher2 RKE Cluster
    ///         var foo_custom = new Rancher2.Cluster("foo-custom", new Rancher2.ClusterArgs
    ///         {
    ///             ClusterMonitoringInput = new Rancher2.Inputs.ClusterClusterMonitoringInputArgs
    ///             {
    ///                 Answers = 
    ///                 {
    ///                     { "exporter-kubelets.https", true },
    ///                     { "exporter-node.enabled", true },
    ///                     { "exporter-node.ports.metrics.port", 9796 },
    ///                     { "exporter-node.resources.limits.cpu", "200m" },
    ///                     { "exporter-node.resources.limits.memory", "200Mi" },
    ///                     { "grafana.persistence.enabled", false },
    ///                     { "grafana.persistence.size", "10Gi" },
    ///                     { "grafana.persistence.storageClass", "default" },
    ///                     { "operator.resources.limits.memory", "500Mi" },
    ///                     { "prometheus.persistence.enabled", "false" },
    ///                     { "prometheus.persistence.size", "50Gi" },
    ///                     { "prometheus.persistence.storageClass", "default" },
    ///                     { "prometheus.persistent.useReleaseName", "true" },
    ///                     { "prometheus.resources.core.limits.cpu", "1000m" },
    ///                     { "prometheus.resources.core.limits.memory", "1500Mi" },
    ///                     { "prometheus.resources.core.requests.cpu", "750m" },
    ///                     { "prometheus.resources.core.requests.memory", "750Mi" },
    ///                     { "prometheus.retention", "12h" },
    ///                 },
    ///                 Version = "0.1.0",
    ///             },
    ///             Description = "Foo rancher2 custom cluster",
    ///             EnableClusterMonitoring = true,
    ///             RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///             {
    ///                 Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///                 {
    ///                     Plugin = "canal",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Creating Rancher v2 RKE cluster enabling/customizing monitoring and istio
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create a new rancher2 RKE Cluster
    ///         var foo_customCluster = new Rancher2.Cluster("foo-customCluster", new Rancher2.ClusterArgs
    ///         {
    ///             Description = "Foo rancher2 custom cluster",
    ///             RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///             {
    ///                 Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///                 {
    ///                     Plugin = "canal",
    ///                 },
    ///             },
    ///             EnableClusterMonitoring = true,
    ///             ClusterMonitoringInput = new Rancher2.Inputs.ClusterClusterMonitoringInputArgs
    ///             {
    ///                 Answers = 
    ///                 {
    ///                     { "exporter-kubelets.https", true },
    ///                     { "exporter-node.enabled", true },
    ///                     { "exporter-node.ports.metrics.port", 9796 },
    ///                     { "exporter-node.resources.limits.cpu", "200m" },
    ///                     { "exporter-node.resources.limits.memory", "200Mi" },
    ///                     { "grafana.persistence.enabled", false },
    ///                     { "grafana.persistence.size", "10Gi" },
    ///                     { "grafana.persistence.storageClass", "default" },
    ///                     { "operator.resources.limits.memory", "500Mi" },
    ///                     { "prometheus.persistence.enabled", "false" },
    ///                     { "prometheus.persistence.size", "50Gi" },
    ///                     { "prometheus.persistence.storageClass", "default" },
    ///                     { "prometheus.persistent.useReleaseName", "true" },
    ///                     { "prometheus.resources.core.limits.cpu", "1000m" },
    ///                     { "prometheus.resources.core.limits.memory", "1500Mi" },
    ///                     { "prometheus.resources.core.requests.cpu", "750m" },
    ///                     { "prometheus.resources.core.requests.memory", "750Mi" },
    ///                     { "prometheus.retention", "12h" },
    ///                 },
    ///                 Version = "0.1.0",
    ///             },
    ///         });
    ///         // Create a new rancher2 Cluster Sync for foo-custom cluster
    ///         var foo_customClusterSync = new Rancher2.ClusterSync("foo-customClusterSync", new Rancher2.ClusterSyncArgs
    ///         {
    ///             ClusterId = foo_customCluster.Id,
    ///             WaitMonitoring = foo_customCluster.EnableClusterMonitoring,
    ///         });
    ///         // Create a new rancher2 Namespace
    ///         var foo_istio = new Rancher2.Namespace("foo-istio", new Rancher2.NamespaceArgs
    ///         {
    ///             ProjectId = foo_customClusterSync.SystemProjectId,
    ///             Description = "istio namespace",
    ///         });
    ///         // Create a new rancher2 App deploying istio (should wait until monitoring is up and running)
    ///         var istio = new Rancher2.App("istio", new Rancher2.AppArgs
    ///         {
    ///             CatalogName = "system-library",
    ///             Description = "Terraform app acceptance test",
    ///             ProjectId = foo_istio.ProjectId,
    ///             TemplateName = "rancher-istio",
    ///             TemplateVersion = "0.1.1",
    ///             TargetNamespace = foo_istio.Id,
    ///             Answers = 
    ///             {
    ///                 { "certmanager.enabled", false },
    ///                 { "enableCRDs", true },
    ///                 { "galley.enabled", true },
    ///                 { "gateways.enabled", false },
    ///                 { "gateways.istio-ingressgateway.resources.limits.cpu", "2000m" },
    ///                 { "gateways.istio-ingressgateway.resources.limits.memory", "1024Mi" },
    ///                 { "gateways.istio-ingressgateway.resources.requests.cpu", "100m" },
    ///                 { "gateways.istio-ingressgateway.resources.requests.memory", "128Mi" },
    ///                 { "gateways.istio-ingressgateway.type", "NodePort" },
    ///                 { "global.monitoring.type", "cluster-monitoring" },
    ///                 { "global.rancher.clusterId", foo_customClusterSync.ClusterId },
    ///                 { "istio_cni.enabled", "false" },
    ///                 { "istiocoredns.enabled", "false" },
    ///                 { "kiali.enabled", "true" },
    ///                 { "mixer.enabled", "true" },
    ///                 { "mixer.policy.enabled", "true" },
    ///                 { "mixer.policy.resources.limits.cpu", "4800m" },
    ///                 { "mixer.policy.resources.limits.memory", "4096Mi" },
    ///                 { "mixer.policy.resources.requests.cpu", "1000m" },
    ///                 { "mixer.policy.resources.requests.memory", "1024Mi" },
    ///                 { "mixer.telemetry.resources.limits.cpu", "4800m" },
    ///                 { "mixer.telemetry.resources.limits.memory", "4096Mi" },
    ///                 { "mixer.telemetry.resources.requests.cpu", "1000m" },
    ///                 { "mixer.telemetry.resources.requests.memory", "1024Mi" },
    ///                 { "mtls.enabled", false },
    ///                 { "nodeagent.enabled", false },
    ///                 { "pilot.enabled", true },
    ///                 { "pilot.resources.limits.cpu", "1000m" },
    ///                 { "pilot.resources.limits.memory", "4096Mi" },
    ///                 { "pilot.resources.requests.cpu", "500m" },
    ///                 { "pilot.resources.requests.memory", "2048Mi" },
    ///                 { "pilot.traceSampling", "1" },
    ///                 { "security.enabled", true },
    ///                 { "sidecarInjectorWebhook.enabled", true },
    ///                 { "tracing.enabled", true },
    ///                 { "tracing.jaeger.resources.limits.cpu", "500m" },
    ///                 { "tracing.jaeger.resources.limits.memory", "1024Mi" },
    ///                 { "tracing.jaeger.resources.requests.cpu", "100m" },
    ///                 { "tracing.jaeger.resources.requests.memory", "100Mi" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Creating Rancher v2 RKE cluster assigning a node pool (overlapped planes)
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create a new rancher2 RKE Cluster
    ///         var foo_custom = new Rancher2.Cluster("foo-custom", new Rancher2.ClusterArgs
    ///         {
    ///             Description = "Foo rancher2 custom cluster",
    ///             RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///             {
    ///                 Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///                 {
    ///                     Plugin = "canal",
    ///                 },
    ///             },
    ///         });
    ///         // Create a new rancher2 Node Template
    ///         var fooNodeTemplate = new Rancher2.NodeTemplate("fooNodeTemplate", new Rancher2.NodeTemplateArgs
    ///         {
    ///             Description = "foo test",
    ///             Amazonec2Config = new Rancher2.Inputs.NodeTemplateAmazonec2ConfigArgs
    ///             {
    ///                 AccessKey = "&lt;AWS_ACCESS_KEY&gt;",
    ///                 SecretKey = "&lt;AWS_SECRET_KEY&gt;",
    ///                 Ami = "&lt;AMI_ID&gt;",
    ///                 Region = "&lt;REGION&gt;",
    ///                 SecurityGroups = 
    ///                 {
    ///                     "&lt;AWS_SECURITY_GROUP&gt;",
    ///                 },
    ///                 SubnetId = "&lt;SUBNET_ID&gt;",
    ///                 VpcId = "&lt;VPC_ID&gt;",
    ///                 Zone = "&lt;ZONE&gt;",
    ///             },
    ///         });
    ///         // Create a new rancher2 Node Pool
    ///         var fooNodePool = new Rancher2.NodePool("fooNodePool", new Rancher2.NodePoolArgs
    ///         {
    ///             ClusterId = foo_custom.Id,
    ///             HostnamePrefix = "foo-cluster-0",
    ///             NodeTemplateId = fooNodeTemplate.Id,
    ///             Quantity = 3,
    ///             ControlPlane = true,
    ///             Etcd = true,
    ///             Worker = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Creating Rancher v2 RKE cluster from template. For Rancher v2.3.x or above.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Create a new rancher2 cluster template
    ///         var fooClusterTemplate = new Rancher2.ClusterTemplate("fooClusterTemplate", new Rancher2.ClusterTemplateArgs
    ///         {
    ///             Members = 
    ///             {
    ///                 new Rancher2.Inputs.ClusterTemplateMemberArgs
    ///                 {
    ///                     AccessType = "owner",
    ///                     UserPrincipalId = "local://user-XXXXX",
    ///                 },
    ///             },
    ///             TemplateRevisions = 
    ///             {
    ///                 new Rancher2.Inputs.ClusterTemplateTemplateRevisionArgs
    ///                 {
    ///                     Name = "V1",
    ///                     ClusterConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigArgs
    ///                     {
    ///                         RkeConfig = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigArgs
    ///                         {
    ///                             Network = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkArgs
    ///                             {
    ///                                 Plugin = "canal",
    ///                             },
    ///                             Services = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesArgs
    ///                             {
    ///                                 Etcd = new Rancher2.Inputs.ClusterTemplateTemplateRevisionClusterConfigRkeConfigServicesEtcdArgs
    ///                                 {
    ///                                     Creation = "6h",
    ///                                     Retention = "24h",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                     Default = true,
    ///                 },
    ///             },
    ///             Description = "Test cluster template v2",
    ///         });
    ///         // Create a new rancher2 RKE Cluster from template
    ///         var fooCluster = new Rancher2.Cluster("fooCluster", new Rancher2.ClusterArgs
    ///         {
    ///             ClusterTemplateId = fooClusterTemplate.Id,
    ///             ClusterTemplateRevisionId = fooClusterTemplate.TemplateRevisions.Apply(templateRevisions =&gt; templateRevisions[0].Id),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Creating Rancher v2 RKE cluster with upgrade strategy. For Rancher v2.4.x or above.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foo = new Rancher2.Cluster("foo", new Rancher2.ClusterArgs
    ///         {
    ///             Description = "Terraform custom cluster",
    ///             RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///             {
    ///                 Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///                 {
    ///                     Plugin = "canal",
    ///                 },
    ///                 Services = new Rancher2.Inputs.ClusterRkeConfigServicesArgs
    ///                 {
    ///                     Etcd = new Rancher2.Inputs.ClusterRkeConfigServicesEtcdArgs
    ///                     {
    ///                         Creation = "6h",
    ///                         Retention = "24h",
    ///                     },
    ///                     KubeApi = new Rancher2.Inputs.ClusterRkeConfigServicesKubeApiArgs
    ///                     {
    ///                         AuditLog = new Rancher2.Inputs.ClusterRkeConfigServicesKubeApiAuditLogArgs
    ///                         {
    ///                             Configuration = new Rancher2.Inputs.ClusterRkeConfigServicesKubeApiAuditLogConfigurationArgs
    ///                             {
    ///                                 Format = "json",
    ///                                 MaxAge = 5,
    ///                                 MaxBackup = 5,
    ///                                 MaxSize = 100,
    ///                                 Path = "-",
    ///                                 Policy = @"apiVersion: audit.k8s.io/v1
    /// kind: Policy
    /// metadata:
    ///   creationTimestamp: null
    /// omitStages:
    /// - RequestReceived
    /// rules:
    /// - level: RequestResponse
    ///   resources:
    ///   - resources:
    ///     - pods
    /// 
    /// ",
    ///                             },
    ///                             Enabled = true,
    ///                         },
    ///                     },
    ///                 },
    ///                 UpgradeStrategy = new Rancher2.Inputs.ClusterRkeConfigUpgradeStrategyArgs
    ///                 {
    ///                     Drain = true,
    ///                     MaxUnavailableWorker = "20%",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Creating Rancher v2 RKE cluster with scheduled cluster scan. For Rancher v2.4.x or above.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foo = new Rancher2.Cluster("foo", new Rancher2.ClusterArgs
    ///         {
    ///             Description = "Terraform custom cluster",
    ///             RkeConfig = new Rancher2.Inputs.ClusterRkeConfigArgs
    ///             {
    ///                 Network = new Rancher2.Inputs.ClusterRkeConfigNetworkArgs
    ///                 {
    ///                     Plugin = "canal",
    ///                 },
    ///                 Services = new Rancher2.Inputs.ClusterRkeConfigServicesArgs
    ///                 {
    ///                     Etcd = new Rancher2.Inputs.ClusterRkeConfigServicesEtcdArgs
    ///                     {
    ///                         Creation = "6h",
    ///                         Retention = "24h",
    ///                     },
    ///                 },
    ///             },
    ///             ScheduledClusterScan = new Rancher2.Inputs.ClusterScheduledClusterScanArgs
    ///             {
    ///                 Enabled = true,
    ///                 ScanConfig = new Rancher2.Inputs.ClusterScheduledClusterScanScanConfigArgs
    ///                 {
    ///                     CisScanConfig = new Rancher2.Inputs.ClusterScheduledClusterScanScanConfigCisScanConfigArgs
    ///                     {
    ///                         DebugMaster = true,
    ///                         DebugWorker = true,
    ///                     },
    ///                 },
    ///                 ScheduleConfig = new Rancher2.Inputs.ClusterScheduledClusterScanScheduleConfigArgs
    ///                 {
    ///                     CronSchedule = "30 * * * *",
    ///                     Retention = 5,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Importing EKS cluster to Rancher v2, using `eks_config_v2`. For Rancher v2.5.x or above.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooCloudCredential = new Rancher2.CloudCredential("fooCloudCredential", new Rancher2.CloudCredentialArgs
    ///         {
    ///             Description = "foo test",
    ///             Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs
    ///             {
    ///                 AccessKey = "&lt;AWS_ACCESS_KEY&gt;",
    ///                 SecretKey = "&lt;AWS_SECRET_KEY&gt;",
    ///             },
    ///         });
    ///         var fooCluster = new Rancher2.Cluster("fooCluster", new Rancher2.ClusterArgs
    ///         {
    ///             Description = "Terraform EKS cluster",
    ///             EksConfigV2 = new Rancher2.Inputs.ClusterEksConfigV2Args
    ///             {
    ///                 CloudCredentialId = fooCloudCredential.Id,
    ///                 Name = "&lt;CLUSTER_NAME&gt;",
    ///                 Region = "&lt;EKS_REGION&gt;",
    ///                 Imported = true,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Creating EKS cluster from Rancher v2, using `eks_config_v2`. For Rancher v2.5.x or above.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooCloudCredential = new Rancher2.CloudCredential("fooCloudCredential", new Rancher2.CloudCredentialArgs
    ///         {
    ///             Description = "foo test",
    ///             Amazonec2CredentialConfig = new Rancher2.Inputs.CloudCredentialAmazonec2CredentialConfigArgs
    ///             {
    ///                 AccessKey = "&lt;AWS_ACCESS_KEY&gt;",
    ///                 SecretKey = "&lt;AWS_SECRET_KEY&gt;",
    ///             },
    ///         });
    ///         var fooCluster = new Rancher2.Cluster("fooCluster", new Rancher2.ClusterArgs
    ///         {
    ///             Description = "Terraform EKS cluster",
    ///             EksConfigV2 = new Rancher2.Inputs.ClusterEksConfigV2Args
    ///             {
    ///                 CloudCredentialId = fooCloudCredential.Id,
    ///                 Region = "&lt;EKS_REGION&gt;",
    ///                 KubernetesVersion = "1.17",
    ///                 LoggingTypes = 
    ///                 {
    ///                     "audit",
    ///                     "api",
    ///                 },
    ///                 NodeGroups = 
    ///                 {
    ///                     new Rancher2.Inputs.ClusterEksConfigV2NodeGroupArgs
    ///                     {
    ///                         Name = "node_group1",
    ///                         InstanceType = "t3.medium",
    ///                         DesiredSize = 3,
    ///                         MaxSize = 5,
    ///                     },
    ///                     new Rancher2.Inputs.ClusterEksConfigV2NodeGroupArgs
    ///                     {
    ///                         Name = "node_group2",
    ///                         InstanceType = "m5.xlarge",
    ///                         DesiredSize = 2,
    ///                         MaxSize = 3,
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Clusters can be imported using the Rancher Cluster ID
    /// 
    /// ```sh
    ///  $ pulumi import rancher2:index/cluster:Cluster foo &amp;lt;CLUSTER_ID&amp;gt;
    /// ```
    /// </summary>
    public partial class Cluster : Pulumi.CustomResource
    {
        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("aksConfig")]
        public Output<Outputs.ClusterAksConfig?> AksConfig { get; private set; } = null!;

        /// <summary>
        /// Annotations for cluster registration token object (map)
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// TLS CA certificate for etcd service (string)
        /// </summary>
        [Output("caCert")]
        public Output<string> CaCert { get; private set; } = null!;

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Output("clusterAuthEndpoint")]
        public Output<Outputs.ClusterClusterAuthEndpoint> ClusterAuthEndpoint { get; private set; } = null!;

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Output("clusterMonitoringInput")]
        public Output<Outputs.ClusterClusterMonitoringInput?> ClusterMonitoringInput { get; private set; } = null!;

        /// <summary>
        /// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        /// </summary>
        [Output("clusterRegistrationToken")]
        public Output<Outputs.ClusterClusterRegistrationToken> ClusterRegistrationToken { get; private set; } = null!;

        /// <summary>
        /// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Output("clusterTemplateAnswers")]
        public Output<Outputs.ClusterClusterTemplateAnswers> ClusterTemplateAnswers { get; private set; } = null!;

        /// <summary>
        /// Cluster template ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("clusterTemplateId")]
        public Output<string?> ClusterTemplateId { get; private set; } = null!;

        /// <summary>
        /// Cluster template questions. Just for Rancher v2.3.x and above (list)
        /// </summary>
        [Output("clusterTemplateQuestions")]
        public Output<ImmutableArray<Outputs.ClusterClusterTemplateQuestion>> ClusterTemplateQuestions { get; private set; } = null!;

        /// <summary>
        /// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("clusterTemplateRevisionId")]
        public Output<string?> ClusterTemplateRevisionId { get; private set; } = null!;

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Output("defaultPodSecurityPolicyTemplateId")]
        public Output<string> DefaultPodSecurityPolicyTemplateId { get; private set; } = null!;

        /// <summary>
        /// (Computed) Default project ID for the cluster (string)
        /// </summary>
        [Output("defaultProjectId")]
        public Output<string> DefaultProjectId { get; private set; } = null!;

        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Desired agent image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("desiredAgentImage")]
        public Output<string> DesiredAgentImage { get; private set; } = null!;

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("desiredAuthImage")]
        public Output<string> DesiredAuthImage { get; private set; } = null!;

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Output("dockerRootDir")]
        public Output<string> DockerRootDir { get; private set; } = null!;

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Output("driver")]
        public Output<string> Driver { get; private set; } = null!;

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("eksConfig")]
        public Output<Outputs.ClusterEksConfig?> EksConfig { get; private set; } = null!;

        /// <summary>
        /// The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x or above (list maxitems:1)
        /// </summary>
        [Output("eksConfigV2")]
        public Output<Outputs.ClusterEksConfigV2?> EksConfigV2 { get; private set; } = null!;

        /// <summary>
        /// Enable built-in cluster alerting (bool)
        /// </summary>
        [Output("enableClusterAlerting")]
        public Output<bool> EnableClusterAlerting { get; private set; } = null!;

        /// <summary>
        /// Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
        /// </summary>
        [Output("enableClusterIstio")]
        public Output<bool> EnableClusterIstio { get; private set; } = null!;

        /// <summary>
        /// Enable built-in cluster monitoring (bool)
        /// </summary>
        [Output("enableClusterMonitoring")]
        public Output<bool> EnableClusterMonitoring { get; private set; } = null!;

        /// <summary>
        /// Enable project network isolation (bool)
        /// </summary>
        [Output("enableNetworkPolicy")]
        public Output<bool> EnableNetworkPolicy { get; private set; } = null!;

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("gkeConfig")]
        public Output<Outputs.ClusterGkeConfig?> GkeConfig { get; private set; } = null!;

        /// <summary>
        /// (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
        /// </summary>
        [Output("istioEnabled")]
        public Output<bool> IstioEnabled { get; private set; } = null!;

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("k3sConfig")]
        public Output<Outputs.ClusterK3sConfig> K3sConfig { get; private set; } = null!;

        /// <summary>
        /// (Computed/Sensitive) Kube Config generated for the cluster (string)
        /// </summary>
        [Output("kubeConfig")]
        public Output<string> KubeConfig { get; private set; } = null!;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `gke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Output("okeConfig")]
        public Output<Outputs.ClusterOkeConfig?> OkeConfig { get; private set; } = null!;

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Output("rkeConfig")]
        public Output<Outputs.ClusterRkeConfig> RkeConfig { get; private set; } = null!;

        /// <summary>
        /// Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
        /// </summary>
        [Output("scheduledClusterScan")]
        public Output<Outputs.ClusterScheduledClusterScan> ScheduledClusterScan { get; private set; } = null!;

        /// <summary>
        /// (Computed) System project ID for the cluster (string)
        /// </summary>
        [Output("systemProjectId")]
        public Output<string> SystemProjectId { get; private set; } = null!;

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Output("windowsPreferedCluster")]
        public Output<bool?> WindowsPreferedCluster { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("rancher2:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfig")]
        public Input<Inputs.ClusterAksConfigArgs>? AksConfig { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Input("clusterAuthEndpoint")]
        public Input<Inputs.ClusterClusterAuthEndpointArgs>? ClusterAuthEndpoint { get; set; }

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Input("clusterMonitoringInput")]
        public Input<Inputs.ClusterClusterMonitoringInputArgs>? ClusterMonitoringInput { get; set; }

        /// <summary>
        /// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Input("clusterTemplateAnswers")]
        public Input<Inputs.ClusterClusterTemplateAnswersArgs>? ClusterTemplateAnswers { get; set; }

        /// <summary>
        /// Cluster template ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateId")]
        public Input<string>? ClusterTemplateId { get; set; }

        [Input("clusterTemplateQuestions")]
        private InputList<Inputs.ClusterClusterTemplateQuestionArgs>? _clusterTemplateQuestions;

        /// <summary>
        /// Cluster template questions. Just for Rancher v2.3.x and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterTemplateQuestionArgs> ClusterTemplateQuestions
        {
            get => _clusterTemplateQuestions ?? (_clusterTemplateQuestions = new InputList<Inputs.ClusterClusterTemplateQuestionArgs>());
            set => _clusterTemplateQuestions = value;
        }

        /// <summary>
        /// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateRevisionId")]
        public Input<string>? ClusterTemplateRevisionId { get; set; }

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Input("defaultPodSecurityPolicyTemplateId")]
        public Input<string>? DefaultPodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Desired agent image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAgentImage")]
        public Input<string>? DesiredAgentImage { get; set; }

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAuthImage")]
        public Input<string>? DesiredAuthImage { get; set; }

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("dockerRootDir")]
        public Input<string>? DockerRootDir { get; set; }

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("eksConfig")]
        public Input<Inputs.ClusterEksConfigArgs>? EksConfig { get; set; }

        /// <summary>
        /// The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x or above (list maxitems:1)
        /// </summary>
        [Input("eksConfigV2")]
        public Input<Inputs.ClusterEksConfigV2Args>? EksConfigV2 { get; set; }

        /// <summary>
        /// Enable built-in cluster alerting (bool)
        /// </summary>
        [Input("enableClusterAlerting")]
        public Input<bool>? EnableClusterAlerting { get; set; }

        /// <summary>
        /// Enable built-in cluster monitoring (bool)
        /// </summary>
        [Input("enableClusterMonitoring")]
        public Input<bool>? EnableClusterMonitoring { get; set; }

        /// <summary>
        /// Enable project network isolation (bool)
        /// </summary>
        [Input("enableNetworkPolicy")]
        public Input<bool>? EnableNetworkPolicy { get; set; }

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("gkeConfig")]
        public Input<Inputs.ClusterGkeConfigArgs>? GkeConfig { get; set; }

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("k3sConfig")]
        public Input<Inputs.ClusterK3sConfigArgs>? K3sConfig { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `gke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("okeConfig")]
        public Input<Inputs.ClusterOkeConfigArgs>? OkeConfig { get; set; }

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Input("rkeConfig")]
        public Input<Inputs.ClusterRkeConfigArgs>? RkeConfig { get; set; }

        /// <summary>
        /// Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
        /// </summary>
        [Input("scheduledClusterScan")]
        public Input<Inputs.ClusterScheduledClusterScanArgs>? ScheduledClusterScan { get; set; }

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Input("windowsPreferedCluster")]
        public Input<bool>? WindowsPreferedCluster { get; set; }

        public ClusterArgs()
        {
        }
    }

    public sealed class ClusterState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure AKS configuration for `aks` Clusters. Conflicts with `eks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("aksConfig")]
        public Input<Inputs.ClusterAksConfigGetArgs>? AksConfig { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// TLS CA certificate for etcd service (string)
        /// </summary>
        [Input("caCert")]
        public Input<string>? CaCert { get; set; }

        /// <summary>
        /// Enabling the [local cluster authorized endpoint](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#local-cluster-auth-endpoint) allows direct communication with the cluster, bypassing the Rancher API proxy. (list maxitems:1)
        /// </summary>
        [Input("clusterAuthEndpoint")]
        public Input<Inputs.ClusterClusterAuthEndpointGetArgs>? ClusterAuthEndpoint { get; set; }

        /// <summary>
        /// Cluster monitoring config. Any parameter defined in [rancher-monitoring charts](https://github.com/rancher/system-charts/tree/dev/charts/rancher-monitoring) could be configured  (list maxitems:1)
        /// </summary>
        [Input("clusterMonitoringInput")]
        public Input<Inputs.ClusterClusterMonitoringInputGetArgs>? ClusterMonitoringInput { get; set; }

        /// <summary>
        /// (Computed) Cluster Registration Token generated for the cluster (list maxitems:1)
        /// </summary>
        [Input("clusterRegistrationToken")]
        public Input<Inputs.ClusterClusterRegistrationTokenGetArgs>? ClusterRegistrationToken { get; set; }

        /// <summary>
        /// Cluster template answers. Just for Rancher v2.3.x and above (list maxitems:1)
        /// </summary>
        [Input("clusterTemplateAnswers")]
        public Input<Inputs.ClusterClusterTemplateAnswersGetArgs>? ClusterTemplateAnswers { get; set; }

        /// <summary>
        /// Cluster template ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateId")]
        public Input<string>? ClusterTemplateId { get; set; }

        [Input("clusterTemplateQuestions")]
        private InputList<Inputs.ClusterClusterTemplateQuestionGetArgs>? _clusterTemplateQuestions;

        /// <summary>
        /// Cluster template questions. Just for Rancher v2.3.x and above (list)
        /// </summary>
        public InputList<Inputs.ClusterClusterTemplateQuestionGetArgs> ClusterTemplateQuestions
        {
            get => _clusterTemplateQuestions ?? (_clusterTemplateQuestions = new InputList<Inputs.ClusterClusterTemplateQuestionGetArgs>());
            set => _clusterTemplateQuestions = value;
        }

        /// <summary>
        /// Cluster template revision ID. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("clusterTemplateRevisionId")]
        public Input<string>? ClusterTemplateRevisionId { get; set; }

        /// <summary>
        /// [Default pod security policy template id](https://rancher.com/docs/rancher/v2.x/en/cluster-provisioning/rke-clusters/options/#pod-security-policy-support) (string)
        /// </summary>
        [Input("defaultPodSecurityPolicyTemplateId")]
        public Input<string>? DefaultPodSecurityPolicyTemplateId { get; set; }

        /// <summary>
        /// (Computed) Default project ID for the cluster (string)
        /// </summary>
        [Input("defaultProjectId")]
        public Input<string>? DefaultProjectId { get; set; }

        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Desired agent image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAgentImage")]
        public Input<string>? DesiredAgentImage { get; set; }

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("desiredAuthImage")]
        public Input<string>? DesiredAuthImage { get; set; }

        /// <summary>
        /// Desired auth image. Just for Rancher v2.3.x and above (string)
        /// </summary>
        [Input("dockerRootDir")]
        public Input<string>? DockerRootDir { get; set; }

        /// <summary>
        /// (Computed) The driver used for the Cluster. `imported`, `azurekubernetesservice`, `amazonelasticcontainerservice`, `googlekubernetesengine` and `rancherKubernetesEngine` are supported (string)
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        /// <summary>
        /// The Amazon EKS configuration for `eks` Clusters. Conflicts with `aks_config`, `eks_config_v2`, `gke_config`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("eksConfig")]
        public Input<Inputs.ClusterEksConfigGetArgs>? EksConfig { get; set; }

        /// <summary>
        /// The Amazon EKS configuration to create or import `eks` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` `k3s_config` and `rke_config`. For Rancher v2.5.x or above (list maxitems:1)
        /// </summary>
        [Input("eksConfigV2")]
        public Input<Inputs.ClusterEksConfigV2GetArgs>? EksConfigV2 { get; set; }

        /// <summary>
        /// Enable built-in cluster alerting (bool)
        /// </summary>
        [Input("enableClusterAlerting")]
        public Input<bool>? EnableClusterAlerting { get; set; }

        /// <summary>
        /// Deploy istio on `system` project and `istio-system` namespace, using rancher2.App resource instead. See above example.
        /// </summary>
        [Input("enableClusterIstio")]
        public Input<bool>? EnableClusterIstio { get; set; }

        /// <summary>
        /// Enable built-in cluster monitoring (bool)
        /// </summary>
        [Input("enableClusterMonitoring")]
        public Input<bool>? EnableClusterMonitoring { get; set; }

        /// <summary>
        /// Enable project network isolation (bool)
        /// </summary>
        [Input("enableNetworkPolicy")]
        public Input<bool>? EnableNetworkPolicy { get; set; }

        /// <summary>
        /// The Google GKE configuration for `gke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `oke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("gkeConfig")]
        public Input<Inputs.ClusterGkeConfigGetArgs>? GkeConfig { get; set; }

        /// <summary>
        /// (Computed) Is istio enabled at cluster? Just for Rancher v2.3.x and above (bool)
        /// </summary>
        [Input("istioEnabled")]
        public Input<bool>? IstioEnabled { get; set; }

        /// <summary>
        /// The K3S configuration for `k3s` imported Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("k3sConfig")]
        public Input<Inputs.ClusterK3sConfigGetArgs>? K3sConfig { get; set; }

        /// <summary>
        /// (Computed/Sensitive) Kube Config generated for the cluster (string)
        /// </summary>
        [Input("kubeConfig")]
        public Input<string>? KubeConfig { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of cluster registration token (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Oracle OKE configuration for `oke` Clusters. Conflicts with `aks_config`, `eks_config`, `eks_import`, `gke_config` `k3s_config` and `rke_config` (list maxitems:1)
        /// </summary>
        [Input("okeConfig")]
        public Input<Inputs.ClusterOkeConfigGetArgs>? OkeConfig { get; set; }

        /// <summary>
        /// The RKE configuration for `rke` Clusters. Conflicts with `aks_config`, `eks_config`, `gke_config`, `oke_config` and `k3s_config` (list maxitems:1)
        /// </summary>
        [Input("rkeConfig")]
        public Input<Inputs.ClusterRkeConfigGetArgs>? RkeConfig { get; set; }

        /// <summary>
        /// Cluster scheduled cis scan. For Rancher v2.4.0 or above (List maxitems:1)
        /// </summary>
        [Input("scheduledClusterScan")]
        public Input<Inputs.ClusterScheduledClusterScanGetArgs>? ScheduledClusterScan { get; set; }

        /// <summary>
        /// (Computed) System project ID for the cluster (string)
        /// </summary>
        [Input("systemProjectId")]
        public Input<string>? SystemProjectId { get; set; }

        /// <summary>
        /// Windows preferred cluster. Default: `false` (bool)
        /// </summary>
        [Input("windowsPreferedCluster")]
        public Input<bool>? WindowsPreferedCluster { get; set; }

        public ClusterState()
        {
        }
    }
}
