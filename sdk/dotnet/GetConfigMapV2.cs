// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetConfigMapV2
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher2 configMap v2. ConfigMap v2 resource is available at Rancher v2.5.x and above.
        /// </summary>
        public static Task<GetConfigMapV2Result> InvokeAsync(GetConfigMapV2Args args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConfigMapV2Result>("rancher2:index/getConfigMapV2:getConfigMapV2", args ?? new GetConfigMapV2Args(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a Rancher2 configMap v2. ConfigMap v2 resource is available at Rancher v2.5.x and above.
        /// </summary>
        public static Output<GetConfigMapV2Result> Invoke(GetConfigMapV2InvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetConfigMapV2Result>("rancher2:index/getConfigMapV2:getConfigMapV2", args ?? new GetConfigMapV2InvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConfigMapV2Args : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cluster id of the configMap V2 (string)
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the configMap v2 (string)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The namespaces of the configMap v2. Default: `default` (string)
        /// </summary>
        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetConfigMapV2Args()
        {
        }
    }

    public sealed class GetConfigMapV2InvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cluster id of the configMap V2 (string)
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the configMap v2 (string)
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The namespaces of the configMap v2. Default: `default` (string)
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetConfigMapV2InvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetConfigMapV2Result
    {
        /// <summary>
        /// (Computed) Annotations for the configMap v2 (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        public readonly string ClusterId;
        /// <summary>
        /// (Computed) The data of the configMap v2 (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Data;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Computed) If set to true, any configMap update will remove and recreate the configMap. This is a beta field enabled by k8s `ImmutableEphemeralVolumes` feature gate (bool)
        /// </summary>
        public readonly bool Immutable;
        /// <summary>
        /// (Computed) Labels for the configMap v2 (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;
        public readonly string? Namespace;
        /// <summary>
        /// (Computed) The k8s resource version (string)
        /// </summary>
        public readonly string ResourceVersion;

        [OutputConstructor]
        private GetConfigMapV2Result(
            ImmutableDictionary<string, object> annotations,

            string clusterId,

            ImmutableDictionary<string, object> data,

            string id,

            bool immutable,

            ImmutableDictionary<string, object> labels,

            string name,

            string? @namespace,

            string resourceVersion)
        {
            Annotations = annotations;
            ClusterId = clusterId;
            Data = data;
            Id = id;
            Immutable = immutable;
            Labels = labels;
            Name = name;
            Namespace = @namespace;
            ResourceVersion = resourceVersion;
        }
    }
}
