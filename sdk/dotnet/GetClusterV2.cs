// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetClusterV2
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Rancher2 = Pulumi.Rancher2;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var foo = Output.Create(Rancher2.GetClusterV2.InvokeAsync(new Rancher2.GetClusterV2Args
        ///         {
        ///             FleetNamespace = "fleet-ns",
        ///             Name = "foo",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterV2Result> InvokeAsync(GetClusterV2Args args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterV2Result>("rancher2:index/getClusterV2:getClusterV2", args ?? new GetClusterV2Args(), options.WithVersion());
    }


    public sealed class GetClusterV2Args : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fleet namespace of the Cluster v2. Default: `\"fleet-default\"` (string)
        /// </summary>
        [Input("fleetNamespace")]
        public string? FleetNamespace { get; set; }

        /// <summary>
        /// The name of the Cluster v2 (string)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetClusterV2Args()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterV2Result
    {
        /// <summary>
        /// (Computed) Optional Agent Env Vars for Rancher agent (list)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterV2AgentEnvVarResult> AgentEnvVars;
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) Cluster V2 cloud credential secret name (string)
        /// </summary>
        public readonly string CloudCredentialSecretName;
        /// <summary>
        /// (Computed/Sensitive) Cluster Registration Token generated for the cluster v2 (list maxitems:1)
        /// </summary>
        public readonly Outputs.GetClusterV2ClusterRegistrationTokenResult ClusterRegistrationToken;
        /// <summary>
        /// (Computed) Cluster v1 id for cluster v2 (string)
        /// </summary>
        public readonly string ClusterV1Id;
        /// <summary>
        /// (Computed) Cluster V2 default cluster role for project members (string)
        /// </summary>
        public readonly string DefaultClusterRoleForProjectMembers;
        /// <summary>
        /// (Computed) Cluster V2 default pod security policy template name (string)
        /// </summary>
        public readonly string DefaultPodSecurityPolicyTemplateName;
        /// <summary>
        /// (Computed) Enable k8s network policy at Cluster V2 (bool)
        /// </summary>
        public readonly bool EnableNetworkPolicy;
        public readonly string? FleetNamespace;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Computed/Sensitive) Kube Config generated for the cluster v2 (string)
        /// </summary>
        public readonly string KubeConfig;
        /// <summary>
        /// (Computed) The kubernetes version of the Cluster v2 (list maxitems:1)
        /// </summary>
        public readonly string KubernetesVersion;
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;
        /// <summary>
        /// (Computed) Cluster v2 k8s resource version (string)
        /// </summary>
        public readonly string ResourceVersion;
        /// <summary>
        /// (Computed) The RKE configuration for `k3s` and `rke2` Clusters v2. (list maxitems:1)
        /// </summary>
        public readonly Outputs.GetClusterV2RkeConfigResult RkeConfig;

        [OutputConstructor]
        private GetClusterV2Result(
            ImmutableArray<Outputs.GetClusterV2AgentEnvVarResult> agentEnvVars,

            ImmutableDictionary<string, object> annotations,

            string cloudCredentialSecretName,

            Outputs.GetClusterV2ClusterRegistrationTokenResult clusterRegistrationToken,

            string clusterV1Id,

            string defaultClusterRoleForProjectMembers,

            string defaultPodSecurityPolicyTemplateName,

            bool enableNetworkPolicy,

            string? fleetNamespace,

            string id,

            string kubeConfig,

            string kubernetesVersion,

            ImmutableDictionary<string, object> labels,

            string name,

            string resourceVersion,

            Outputs.GetClusterV2RkeConfigResult rkeConfig)
        {
            AgentEnvVars = agentEnvVars;
            Annotations = annotations;
            CloudCredentialSecretName = cloudCredentialSecretName;
            ClusterRegistrationToken = clusterRegistrationToken;
            ClusterV1Id = clusterV1Id;
            DefaultClusterRoleForProjectMembers = defaultClusterRoleForProjectMembers;
            DefaultPodSecurityPolicyTemplateName = defaultPodSecurityPolicyTemplateName;
            EnableNetworkPolicy = enableNetworkPolicy;
            FleetNamespace = fleetNamespace;
            Id = id;
            KubeConfig = kubeConfig;
            KubernetesVersion = kubernetesVersion;
            Labels = labels;
            Name = name;
            ResourceVersion = resourceVersion;
            RkeConfig = rkeConfig;
        }
    }
}
