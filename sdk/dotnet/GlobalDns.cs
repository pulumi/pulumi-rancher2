// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// Provides a Rancher V2 Global DNS resource. This can be used to create Global DNS records for Rancher V2.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new rancher2 Global DNS Provider
    ///     var foo = new Rancher2.GlobalDnsProvider("foo", new()
    ///     {
    ///         Name = "foo",
    ///         RootDomain = "example.com",
    ///         Route53Config = new Rancher2.Inputs.GlobalDnsProviderRoute53ConfigArgs
    ///         {
    ///             AccessKey = "YYYYYYYYYYYYYYYYYYYY",
    ///             SecretKey = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    ///             ZoneType = "private",
    ///             Region = "us-east-1",
    ///         },
    ///     });
    /// 
    ///     // Create a new rancher2 Global DNS using project IDs
    ///     var fooGlobalDns = new Rancher2.GlobalDns("foo", new()
    ///     {
    ///         Name = "foo",
    ///         Fqdn = "foo.example.com",
    ///         ProviderId = foo.Id,
    ///         ProjectIds = new[]
    ///         {
    ///             "project1",
    ///             "project2",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new rancher2 Global DNS Provider
    ///     var foo = new Rancher2.GlobalDnsProvider("foo", new()
    ///     {
    ///         Name = "foo",
    ///         RootDomain = "example.com",
    ///         Route53Config = new Rancher2.Inputs.GlobalDnsProviderRoute53ConfigArgs
    ///         {
    ///             AccessKey = "YYYYYYYYYYYYYYYYYYYY",
    ///             SecretKey = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    ///             ZoneType = "private",
    ///             Region = "us-east-1",
    ///         },
    ///     });
    /// 
    ///     // Create a new rancher2 Global DNS using MultiClusterApp ID
    ///     var fooGlobalDns = new Rancher2.GlobalDns("foo", new()
    ///     {
    ///         Name = "foo",
    ///         Fqdn = "foo.example.com",
    ///         ProviderId = foo.Id,
    ///         MultiClusterAppId = "&lt;MCA_ID&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Global DNS Entry can be imported using the Rancher Global DNS ID
    /// 
    /// ```sh
    /// $ pulumi import rancher2:index/globalDns:GlobalDns foo &lt;global_dns_id&gt;
    /// ```
    /// </summary>
    [Rancher2ResourceType("rancher2:index/globalDns:GlobalDns")]
    public partial class GlobalDns : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations for Global DNS (map)
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// The Global DNS record (string)
        /// </summary>
        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        /// <summary>
        /// Labels for Global DNS (map)
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// The MultiCluster App ID to assign to the Global DNS. Conflicts with `project_ids` (string)
        /// </summary>
        [Output("multiClusterAppId")]
        public Output<string?> MultiClusterAppId { get; private set; } = null!;

        /// <summary>
        /// The name of the Global DNS (string)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of project_ids to assign to the Global DNS. Conflicts with `multi_cluster_app_id` (list(string))
        /// </summary>
        [Output("projectIds")]
        public Output<ImmutableArray<string>> ProjectIds { get; private set; } = null!;

        /// <summary>
        /// The Global DNS provider ID to use (string)
        /// </summary>
        [Output("providerId")]
        public Output<string> ProviderId { get; private set; } = null!;

        /// <summary>
        /// TTL in seconds for DNS record. Default: `300` (int)
        /// </summary>
        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a GlobalDns resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlobalDns(string name, GlobalDnsArgs args, CustomResourceOptions? options = null)
            : base("rancher2:index/globalDns:GlobalDns", name, args ?? new GlobalDnsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlobalDns(string name, Input<string> id, GlobalDnsState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/globalDns:GlobalDns", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlobalDns resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlobalDns Get(string name, Input<string> id, GlobalDnsState? state = null, CustomResourceOptions? options = null)
        {
            return new GlobalDns(name, id, state, options);
        }
    }

    public sealed class GlobalDnsArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for Global DNS (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// The Global DNS record (string)
        /// </summary>
        [Input("fqdn", required: true)]
        public Input<string> Fqdn { get; set; } = null!;

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for Global DNS (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The MultiCluster App ID to assign to the Global DNS. Conflicts with `project_ids` (string)
        /// </summary>
        [Input("multiClusterAppId")]
        public Input<string>? MultiClusterAppId { get; set; }

        /// <summary>
        /// The name of the Global DNS (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectIds")]
        private InputList<string>? _projectIds;

        /// <summary>
        /// A list of project_ids to assign to the Global DNS. Conflicts with `multi_cluster_app_id` (list(string))
        /// </summary>
        public InputList<string> ProjectIds
        {
            get => _projectIds ?? (_projectIds = new InputList<string>());
            set => _projectIds = value;
        }

        /// <summary>
        /// The Global DNS provider ID to use (string)
        /// </summary>
        [Input("providerId", required: true)]
        public Input<string> ProviderId { get; set; } = null!;

        /// <summary>
        /// TTL in seconds for DNS record. Default: `300` (int)
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public GlobalDnsArgs()
        {
        }
        public static new GlobalDnsArgs Empty => new GlobalDnsArgs();
    }

    public sealed class GlobalDnsState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for Global DNS (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// The Global DNS record (string)
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for Global DNS (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The MultiCluster App ID to assign to the Global DNS. Conflicts with `project_ids` (string)
        /// </summary>
        [Input("multiClusterAppId")]
        public Input<string>? MultiClusterAppId { get; set; }

        /// <summary>
        /// The name of the Global DNS (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectIds")]
        private InputList<string>? _projectIds;

        /// <summary>
        /// A list of project_ids to assign to the Global DNS. Conflicts with `multi_cluster_app_id` (list(string))
        /// </summary>
        public InputList<string> ProjectIds
        {
            get => _projectIds ?? (_projectIds = new InputList<string>());
            set => _projectIds = value;
        }

        /// <summary>
        /// The Global DNS provider ID to use (string)
        /// </summary>
        [Input("providerId")]
        public Input<string>? ProviderId { get; set; }

        /// <summary>
        /// TTL in seconds for DNS record. Default: `300` (int)
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public GlobalDnsState()
        {
        }
        public static new GlobalDnsState Empty => new GlobalDnsState();
    }
}
