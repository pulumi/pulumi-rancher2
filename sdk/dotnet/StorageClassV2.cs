// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// Provides a Rancher Storage Class v2 resource. This can be used to manage k8s storage classes for Rancher v2 clusters and retrieve their information. Storage Class v2 resource is available at Rancher v2.5.x and above.
    /// 
    /// ## Import
    /// 
    /// V2 storage classs can be imported using the Rancher cluster ID and StorageClass V2 name.
    /// 
    /// ```sh
    ///  $ pulumi import rancher2:index/storageClassV2:StorageClassV2 foo &amp;lt;CLUSTER_ID&amp;gt;.&amp;lt;STORAGE_CLASS_V2_NAME&amp;gt;
    /// ```
    /// </summary>
    [Rancher2ResourceType("rancher2:index/storageClassV2:StorageClassV2")]
    public partial class StorageClassV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Is the provisioner of the storageClass v2 allowing volume expansion? (bool)
        /// </summary>
        [Output("allowVolumeExpansion")]
        public Output<bool> AllowVolumeExpansion { get; private set; } = null!;

        /// <summary>
        /// Annotations for the storageClass v2 (map)
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// The cluster id of the storageClass V2 (string)
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The provisioner of the storageClass v2 (string)
        /// </summary>
        [Output("k8sProvisioner")]
        public Output<string> K8sProvisioner { get; private set; } = null!;

        /// <summary>
        /// Labels for the storageClass v2 (map)
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// The mount options for storageClass v2 (list)
        /// </summary>
        [Output("mountOptions")]
        public Output<ImmutableArray<string>> MountOptions { get; private set; } = null!;

        /// <summary>
        /// The name of the storageClass v2 (string)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parameters for storageClass v2 (string)
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, object>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// The reclaim policy for storageClass v2. `Delete`, `Recycle` and `Retain` values are allowed. Default: `Delete` (string)
        /// </summary>
        [Output("reclaimPolicy")]
        public Output<string?> ReclaimPolicy { get; private set; } = null!;

        /// <summary>
        /// (Computed) The k8s resource version (string)
        /// </summary>
        [Output("resourceVersion")]
        public Output<string> ResourceVersion { get; private set; } = null!;

        /// <summary>
        /// The volume binding mode for storageClass v2. `Immediate` and `WaitForFirstConsumer` values are allowed. Default: `Immediate` (string)
        /// </summary>
        [Output("volumeBindingMode")]
        public Output<string?> VolumeBindingMode { get; private set; } = null!;


        /// <summary>
        /// Create a StorageClassV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageClassV2(string name, StorageClassV2Args args, CustomResourceOptions? options = null)
            : base("rancher2:index/storageClassV2:StorageClassV2", name, args ?? new StorageClassV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private StorageClassV2(string name, Input<string> id, StorageClassV2State? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/storageClassV2:StorageClassV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageClassV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageClassV2 Get(string name, Input<string> id, StorageClassV2State? state = null, CustomResourceOptions? options = null)
        {
            return new StorageClassV2(name, id, state, options);
        }
    }

    public sealed class StorageClassV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is the provisioner of the storageClass v2 allowing volume expansion? (bool)
        /// </summary>
        [Input("allowVolumeExpansion")]
        public Input<bool>? AllowVolumeExpansion { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for the storageClass v2 (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// The cluster id of the storageClass V2 (string)
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The provisioner of the storageClass v2 (string)
        /// </summary>
        [Input("k8sProvisioner", required: true)]
        public Input<string> K8sProvisioner { get; set; } = null!;

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for the storageClass v2 (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("mountOptions")]
        private InputList<string>? _mountOptions;

        /// <summary>
        /// The mount options for storageClass v2 (list)
        /// </summary>
        public InputList<string> MountOptions
        {
            get => _mountOptions ?? (_mountOptions = new InputList<string>());
            set => _mountOptions = value;
        }

        /// <summary>
        /// The name of the storageClass v2 (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        private InputMap<object>? _parameters;

        /// <summary>
        /// The parameters for storageClass v2 (string)
        /// </summary>
        public InputMap<object> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<object>());
            set => _parameters = value;
        }

        /// <summary>
        /// The reclaim policy for storageClass v2. `Delete`, `Recycle` and `Retain` values are allowed. Default: `Delete` (string)
        /// </summary>
        [Input("reclaimPolicy")]
        public Input<string>? ReclaimPolicy { get; set; }

        /// <summary>
        /// The volume binding mode for storageClass v2. `Immediate` and `WaitForFirstConsumer` values are allowed. Default: `Immediate` (string)
        /// </summary>
        [Input("volumeBindingMode")]
        public Input<string>? VolumeBindingMode { get; set; }

        public StorageClassV2Args()
        {
        }
        public static new StorageClassV2Args Empty => new StorageClassV2Args();
    }

    public sealed class StorageClassV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Is the provisioner of the storageClass v2 allowing volume expansion? (bool)
        /// </summary>
        [Input("allowVolumeExpansion")]
        public Input<bool>? AllowVolumeExpansion { get; set; }

        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for the storageClass v2 (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// The cluster id of the storageClass V2 (string)
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The provisioner of the storageClass v2 (string)
        /// </summary>
        [Input("k8sProvisioner")]
        public Input<string>? K8sProvisioner { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for the storageClass v2 (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("mountOptions")]
        private InputList<string>? _mountOptions;

        /// <summary>
        /// The mount options for storageClass v2 (list)
        /// </summary>
        public InputList<string> MountOptions
        {
            get => _mountOptions ?? (_mountOptions = new InputList<string>());
            set => _mountOptions = value;
        }

        /// <summary>
        /// The name of the storageClass v2 (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        private InputMap<object>? _parameters;

        /// <summary>
        /// The parameters for storageClass v2 (string)
        /// </summary>
        public InputMap<object> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<object>());
            set => _parameters = value;
        }

        /// <summary>
        /// The reclaim policy for storageClass v2. `Delete`, `Recycle` and `Retain` values are allowed. Default: `Delete` (string)
        /// </summary>
        [Input("reclaimPolicy")]
        public Input<string>? ReclaimPolicy { get; set; }

        /// <summary>
        /// (Computed) The k8s resource version (string)
        /// </summary>
        [Input("resourceVersion")]
        public Input<string>? ResourceVersion { get; set; }

        /// <summary>
        /// The volume binding mode for storageClass v2. `Immediate` and `WaitForFirstConsumer` values are allowed. Default: `Immediate` (string)
        /// </summary>
        [Input("volumeBindingMode")]
        public Input<string>? VolumeBindingMode { get; set; }

        public StorageClassV2State()
        {
        }
        public static new StorageClassV2State Empty => new StorageClassV2State();
    }
}
