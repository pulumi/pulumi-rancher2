// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Inputs
{

    public sealed class NodeTemplateHetznerConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiToken", required: true)]
        private Input<string>? _apiToken;

        /// <summary>
        /// Hetzner Cloud project API token
        /// </summary>
        public Input<string>? ApiToken
        {
            get => _apiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Hetzner Cloud server image
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// Comma-separated list of network IDs or names which should be attached to the server private network interface
        /// </summary>
        [Input("networks")]
        public Input<string>? Networks { get; set; }

        [Input("serverLabels")]
        private InputMap<object>? _serverLabels;

        /// <summary>
        /// Map of the labels which will be assigned to the server
        /// </summary>
        public InputMap<object> ServerLabels
        {
            get => _serverLabels ?? (_serverLabels = new InputMap<object>());
            set => _serverLabels = value;
        }

        /// <summary>
        /// Hetzner Cloud datacenter
        /// </summary>
        [Input("serverLocation")]
        public Input<string>? ServerLocation { get; set; }

        /// <summary>
        /// Hetzner Cloud server type
        /// </summary>
        [Input("serverType")]
        public Input<string>? ServerType { get; set; }

        /// <summary>
        /// Use private network
        /// </summary>
        [Input("usePrivateNetwork")]
        public Input<bool>? UsePrivateNetwork { get; set; }

        /// <summary>
        /// Path to file with cloud-init user-data
        /// </summary>
        [Input("userdata")]
        public Input<string>? Userdata { get; set; }

        /// <summary>
        /// Comma-separated list of volume IDs or names which should be attached to the server
        /// </summary>
        [Input("volumes")]
        public Input<string>? Volumes { get; set; }

        public NodeTemplateHetznerConfigArgs()
        {
        }
        public static new NodeTemplateHetznerConfigArgs Empty => new NodeTemplateHetznerConfigArgs();
    }
}
