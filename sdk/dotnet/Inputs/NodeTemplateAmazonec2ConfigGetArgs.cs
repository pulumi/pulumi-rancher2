// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Inputs
{

    public sealed class NodeTemplateAmazonec2ConfigGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessKey")]
        private Input<string>? _accessKey;

        /// <summary>
        /// AWS Access Key
        /// </summary>
        public Input<string>? AccessKey
        {
            get => _accessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// AWS machine image
        /// </summary>
        [Input("ami", required: true)]
        public Input<string> Ami { get; set; } = null!;

        /// <summary>
        /// AWS spot instance duration in minutes (60, 120, 180, 240, 300, or 360)
        /// </summary>
        [Input("blockDurationMinutes")]
        public Input<string>? BlockDurationMinutes { get; set; }

        /// <summary>
        /// AWS root device name
        /// </summary>
        [Input("deviceName")]
        public Input<string>? DeviceName { get; set; }

        /// <summary>
        /// Encrypt EBS volume
        /// </summary>
        [Input("encryptEbsVolume")]
        public Input<bool>? EncryptEbsVolume { get; set; }

        /// <summary>
        /// Optional endpoint URL (hostname only or fully qualified URI)
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Enables or disables the HTTP metadata endpoint on your instances
        /// </summary>
        [Input("httpEndpoint")]
        public Input<string>? HttpEndpoint { get; set; }

        /// <summary>
        /// The state of token usage for your instance metadata requests
        /// </summary>
        [Input("httpTokens")]
        public Input<string>? HttpTokens { get; set; }

        /// <summary>
        /// AWS IAM Instance Profile
        /// </summary>
        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        /// <summary>
        /// Disable SSL when sending requests
        /// </summary>
        [Input("insecureTransport")]
        public Input<bool>? InsecureTransport { get; set; }

        /// <summary>
        /// AWS instance type
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Custom KMS key ID using the AWS Managed CMK
        /// </summary>
        [Input("kmsKey")]
        public Input<string>? KmsKey { get; set; }

        /// <summary>
        /// Set this flag to enable CloudWatch monitoring
        /// </summary>
        [Input("monitoring")]
        public Input<bool>? Monitoring { get; set; }

        [Input("openPorts")]
        private InputList<string>? _openPorts;

        /// <summary>
        /// Make the specified port number accessible from the Internet
        /// </summary>
        public InputList<string> OpenPorts
        {
            get => _openPorts ?? (_openPorts = new InputList<string>());
            set => _openPorts = value;
        }

        /// <summary>
        /// Only use a private IP address
        /// </summary>
        [Input("privateAddressOnly")]
        public Input<bool>? PrivateAddressOnly { get; set; }

        /// <summary>
        /// AWS Region
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Set this flag to request spot instance
        /// </summary>
        [Input("requestSpotInstance")]
        public Input<bool>? RequestSpotInstance { get; set; }

        /// <summary>
        /// Set retry count for recoverable failures (use -1 to disable)
        /// </summary>
        [Input("retries")]
        public Input<string>? Retries { get; set; }

        /// <summary>
        /// AWS root disk size (in GB)
        /// </summary>
        [Input("rootSize")]
        public Input<string>? RootSize { get; set; }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// AWS Secret Key
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Skip adding default rules to security groups
        /// </summary>
        [Input("securityGroupReadonly")]
        public Input<bool>? SecurityGroupReadonly { get; set; }

        [Input("securityGroups", required: true)]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// AWS VPC security group
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("sessionToken")]
        private Input<string>? _sessionToken;

        /// <summary>
        /// AWS Session Token
        /// </summary>
        public Input<string>? SessionToken
        {
            get => _sessionToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sessionToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// AWS spot instance bid price (in dollar)
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// SSH Key for Instance
        /// </summary>
        [Input("sshKeypath")]
        public Input<string>? SshKeypath { get; set; }

        /// <summary>
        /// Set the name of the ssh user
        /// </summary>
        [Input("sshUser")]
        public Input<string>? SshUser { get; set; }

        /// <summary>
        /// AWS VPC subnet id
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        /// <summary>
        /// AWS Tags (e.g. key1,value1,key2,value2)
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        /// <summary>
        /// Create an EBS optimized instance
        /// </summary>
        [Input("useEbsOptimizedInstance")]
        public Input<bool>? UseEbsOptimizedInstance { get; set; }

        /// <summary>
        /// Force the usage of private IP address
        /// </summary>
        [Input("usePrivateAddress")]
        public Input<bool>? UsePrivateAddress { get; set; }

        /// <summary>
        /// Path to file with cloud-init user data
        /// </summary>
        [Input("userdata")]
        public Input<string>? Userdata { get; set; }

        /// <summary>
        /// Amazon EBS volume type
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        /// <summary>
        /// AWS VPC id
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// AWS zone for instance (i.e. a,b,c,d,e)
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public NodeTemplateAmazonec2ConfigGetArgs()
        {
        }
        public static new NodeTemplateAmazonec2ConfigGetArgs Empty => new NodeTemplateAmazonec2ConfigGetArgs();
    }
}
