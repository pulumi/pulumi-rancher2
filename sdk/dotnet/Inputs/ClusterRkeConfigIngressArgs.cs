// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Inputs
{

    public sealed class ClusterRkeConfigIngressArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable ingress default backend. Default: `true` (bool)
        /// </summary>
        [Input("defaultBackend")]
        public Input<bool>? DefaultBackend { get; set; }

        /// <summary>
        /// Ingress controller DNS policy. `ClusterFirstWithHostNet`, `ClusterFirst`, `Default`, and `None` are supported. [K8S dns Policy](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy) (string)
        /// </summary>
        [Input("dnsPolicy")]
        public Input<string>? DnsPolicy { get; set; }

        [Input("extraArgs")]
        private InputMap<string>? _extraArgs;

        /// <summary>
        /// Extra arguments for scheduler service (map)
        /// </summary>
        public InputMap<string> ExtraArgs
        {
            get => _extraArgs ?? (_extraArgs = new InputMap<string>());
            set => _extraArgs = value;
        }

        /// <summary>
        /// HTTP port for RKE Ingress (int)
        /// </summary>
        [Input("httpPort")]
        public Input<int>? HttpPort { get; set; }

        /// <summary>
        /// HTTPS port for RKE Ingress (int)
        /// </summary>
        [Input("httpsPort")]
        public Input<int>? HttpsPort { get; set; }

        /// <summary>
        /// Network mode for RKE Ingress (string)
        /// </summary>
        [Input("networkMode")]
        public Input<string>? NetworkMode { get; set; }

        [Input("nodeSelector")]
        private InputMap<string>? _nodeSelector;

        /// <summary>
        /// RKE monitoring node selector (map)
        /// </summary>
        public InputMap<string> NodeSelector
        {
            get => _nodeSelector ?? (_nodeSelector = new InputMap<string>());
            set => _nodeSelector = value;
        }

        [Input("options")]
        private InputMap<string>? _options;

        /// <summary>
        /// RKE options for network (map)
        /// </summary>
        public InputMap<string> Options
        {
            get => _options ?? (_options = new InputMap<string>());
            set => _options = value;
        }

        /// <summary>
        /// RKE monitoring provider (string)
        /// </summary>
        [Input("provider")]
        public Input<string>? Provider { get; set; }

        [Input("tolerations")]
        private InputList<Inputs.ClusterRkeConfigIngressTolerationArgs>? _tolerations;

        /// <summary>
        /// Ingress add-on tolerations
        /// </summary>
        public InputList<Inputs.ClusterRkeConfigIngressTolerationArgs> Tolerations
        {
            get => _tolerations ?? (_tolerations = new InputList<Inputs.ClusterRkeConfigIngressTolerationArgs>());
            set => _tolerations = value;
        }

        /// <summary>
        /// Update daemon set strategy
        /// </summary>
        [Input("updateStrategy")]
        public Input<Inputs.ClusterRkeConfigIngressUpdateStrategyArgs>? UpdateStrategy { get; set; }

        public ClusterRkeConfigIngressArgs()
        {
        }
        public static new ClusterRkeConfigIngressArgs Empty => new ClusterRkeConfigIngressArgs();
    }
}
