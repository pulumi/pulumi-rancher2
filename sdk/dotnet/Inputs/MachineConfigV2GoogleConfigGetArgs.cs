// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Inputs
{

    public sealed class MachineConfigV2GoogleConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// GCE Instance External IP
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        [Input("authEncodedJson")]
        private Input<string>? _authEncodedJson;

        /// <summary>
        /// GCE service account auth json file path
        /// </summary>
        public Input<string>? AuthEncodedJson
        {
            get => _authEncodedJson;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authEncodedJson = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// GCE Instance Disk Size (in GB)
        /// </summary>
        [Input("diskSize", required: true)]
        public Input<string> DiskSize { get; set; } = null!;

        /// <summary>
        /// GCE Instance Disk Type
        /// </summary>
        [Input("diskType", required: true)]
        public Input<string> DiskType { get; set; } = null!;

        /// <summary>
        /// A prefix to be added to firewall rules created when exposing ports publicly. Required if exposing ports publicly.
        /// </summary>
        [Input("externalFirewallRulePrefix")]
        public Input<string>? ExternalFirewallRulePrefix { get; set; }

        /// <summary>
        /// A prefix to be added to an internal firewall rule created to ensure virtual machines can communicate with one another.
        /// </summary>
        [Input("internalFirewallRulePrefix")]
        public Input<string>? InternalFirewallRulePrefix { get; set; }

        /// <summary>
        /// GCE instance image absolute URL
        /// </summary>
        [Input("machineImage", required: true)]
        public Input<string> MachineImage { get; set; } = null!;

        /// <summary>
        /// GCE instance type
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// The network to provision virtual machines within
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        [Input("openPorts")]
        private InputList<string>? _openPorts;

        /// <summary>
        /// A list of ports to be opened publicly. 'external_firewall_rule_prefix' must also be set
        /// </summary>
        public InputList<string> OpenPorts
        {
            get => _openPorts ?? (_openPorts = new InputList<string>());
            set => _openPorts = value;
        }

        /// <summary>
        /// Indicates if the virtual machine can be preempted
        /// </summary>
        [Input("preemptable")]
        public Input<bool>? Preemptable { get; set; }

        /// <summary>
        /// The GCP project to create virtual machines within
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// Access scopes to be set on the virtual machine
        /// </summary>
        [Input("scopes")]
        public Input<string>? Scopes { get; set; }

        /// <summary>
        /// The subnetwork to provision virtual machines within
        /// </summary>
        [Input("subNetwork")]
        public Input<string>? SubNetwork { get; set; }

        /// <summary>
        /// A set of network tags to be added to each VM, in the format of 'tag1,tag2'
        /// </summary>
        [Input("tags")]
        public Input<string>? Tags { get; set; }

        /// <summary>
        /// Indicates if an existing VM should be used. This is not currently support in Rancher.
        /// </summary>
        [Input("useExisting")]
        public Input<bool>? UseExisting { get; set; }

        /// <summary>
        /// Indicates if the virtual machines should use an internal IP
        /// </summary>
        [Input("useInternalIp")]
        public Input<bool>? UseInternalIp { get; set; }

        /// <summary>
        /// Indicates if the virtual machines should use an internal IP only and not be assigned a public IP
        /// </summary>
        [Input("useInternalIpOnly")]
        public Input<bool>? UseInternalIpOnly { get; set; }

        /// <summary>
        /// GCE user-data file path
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The username to be set when logging into the virtual machines
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// A set of labels to be added to each VM, in the format of 'key1,value1,key2,value2'
        /// </summary>
        [Input("vmLabels")]
        public Input<string>? VmLabels { get; set; }

        /// <summary>
        /// The region and zone to create virtual machines within (e.g. us-east1-b)
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public MachineConfigV2GoogleConfigGetArgs()
        {
        }
        public static new MachineConfigV2GoogleConfigGetArgs Empty => new MachineConfigV2GoogleConfigGetArgs();
    }
}
