// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Inputs
{

    public sealed class ClusterV2ClusterRegistrationTokenGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations for the Cluster.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Command to execute in an imported k8s cluster.
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// (Computed, string) The ID of the resource.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Insecure command to execute in an imported k8s cluster.
        /// </summary>
        [Input("insecureCommand")]
        public Input<string>? InsecureCommand { get; set; }

        /// <summary>
        /// Insecure node command to execute in an imported k8s cluster.
        /// </summary>
        [Input("insecureNodeCommand")]
        public Input<string>? InsecureNodeCommand { get; set; }

        /// <summary>
        /// Insecure windows command to execute in an imported k8s cluster.
        /// </summary>
        [Input("insecureWindowsNodeCommand")]
        public Input<string>? InsecureWindowsNodeCommand { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels for the Cluster.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// K8s manifest url to execute with `kubectl` to import an existing k8s cluster.
        /// </summary>
        [Input("manifestUrl")]
        public Input<string>? ManifestUrl { get; set; }

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Node command to execute in Linux nodes for custom k8s cluster.
        /// </summary>
        [Input("nodeCommand")]
        public Input<string>? NodeCommand { get; set; }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token for cluster registration token object.
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Node command to execute in Windows nodes for custom k8s cluster.
        /// </summary>
        [Input("windowsNodeCommand")]
        public Input<string>? WindowsNodeCommand { get; set; }

        public ClusterV2ClusterRegistrationTokenGetArgs()
        {
        }
        public static new ClusterV2ClusterRegistrationTokenGetArgs Empty => new ClusterV2ClusterRegistrationTokenGetArgs();
    }
}
