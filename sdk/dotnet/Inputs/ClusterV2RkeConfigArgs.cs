// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Inputs
{

    public sealed class ClusterV2RkeConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The value of the additional manifest is delivered to the path `/var/lib/rancher/rke2/server/manifests/rancher/addons.yaml` or `/var/lib/rancher/k3s/server/manifests/rancher/addons.yaml` on the control plane nodes.
        /// </summary>
        [Input("additionalManifest")]
        public Input<string>? AdditionalManifest { get; set; }

        /// <summary>
        /// The value for the system charts installed by the distribution. For more information about how RKE2 or K3s manage packaged components, please refer to [RKE2 documentation](https://docs.rke2.io/helm) or [K3s documentation](https://docs.k3s.io/installation/packaged-components).
        /// </summary>
        [Input("chartValues")]
        public Input<string>? ChartValues { get; set; }

        /// <summary>
        /// Etcd configures the behavior of the automatic etcd snapshot feature.
        /// </summary>
        [Input("etcd")]
        public Input<Inputs.ClusterV2RkeConfigEtcdArgs>? Etcd { get; set; }

        /// <summary>
        /// Cluster V2 etcd snapshot create.
        /// </summary>
        [Input("etcdSnapshotCreate")]
        public Input<Inputs.ClusterV2RkeConfigEtcdSnapshotCreateArgs>? EtcdSnapshotCreate { get; set; }

        /// <summary>
        /// Cluster V2 etcd snapshot restore.
        /// </summary>
        [Input("etcdSnapshotRestore")]
        public Input<Inputs.ClusterV2RkeConfigEtcdSnapshotRestoreArgs>? EtcdSnapshotRestore { get; set; }

        /// <summary>
        /// Local auth endpoint configures the Authorized Cluster Endpoint (ACE) which can be used to directly access the Kubernetes API server, without requiring communication through Rancher. For more information, please refer to [Rancher Documentation](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup/register-existing-clusters#authorized-cluster-endpoint-support-for-rke2-and-k3s-clusters).
        /// </summary>
        [Input("localAuthEndpoint")]
        public Input<Inputs.ClusterV2RkeConfigLocalAuthEndpointArgs>? LocalAuthEndpoint { get; set; }

        /// <summary>
        /// Machine global config specifies the distribution-specified server configuration applied to all nodes. For the full list of server configurations, please refer to [RKE2 server configuration](https://docs.rke2.io/reference/server_config) or [K3s server configuration](https://docs.k3s.io/cli/server).
        /// </summary>
        [Input("machineGlobalConfig")]
        public Input<string>? MachineGlobalConfig { get; set; }

        [Input("machinePoolDefaults")]
        private InputList<Inputs.ClusterV2RkeConfigMachinePoolDefaultArgs>? _machinePoolDefaults;

        /// <summary>
        /// Default values for machine pool configurations if unset
        /// </summary>
        public InputList<Inputs.ClusterV2RkeConfigMachinePoolDefaultArgs> MachinePoolDefaults
        {
            get => _machinePoolDefaults ?? (_machinePoolDefaults = new InputList<Inputs.ClusterV2RkeConfigMachinePoolDefaultArgs>());
            set => _machinePoolDefaults = value;
        }

        [Input("machinePools")]
        private InputList<Inputs.ClusterV2RkeConfigMachinePoolArgs>? _machinePools;

        /// <summary>
        /// Cluster V2 machine pools.
        /// </summary>
        public InputList<Inputs.ClusterV2RkeConfigMachinePoolArgs> MachinePools
        {
            get => _machinePools ?? (_machinePools = new InputList<Inputs.ClusterV2RkeConfigMachinePoolArgs>());
            set => _machinePools = value;
        }

        [Input("machineSelectorConfigs")]
        private InputList<Inputs.ClusterV2RkeConfigMachineSelectorConfigArgs>? _machineSelectorConfigs;

        /// <summary>
        /// Machine selector config is the same as machine_global_config except that a label selector can be specified with the configuration. The configuration will only be applied to nodes that match the provided label selector. The configuration from machine_selector_config takes precedence over the one from machine_global_config. This argument is available in Rancher v2.7.2 and later.
        /// </summary>
        public InputList<Inputs.ClusterV2RkeConfigMachineSelectorConfigArgs> MachineSelectorConfigs
        {
            get => _machineSelectorConfigs ?? (_machineSelectorConfigs = new InputList<Inputs.ClusterV2RkeConfigMachineSelectorConfigArgs>());
            set => _machineSelectorConfigs = value;
        }

        [Input("machineSelectorFiles")]
        private InputList<Inputs.ClusterV2RkeConfigMachineSelectorFileArgs>? _machineSelectorFiles;

        /// <summary>
        /// Machine selector files provide a means to deliver files to nodes so that the files can be in place before initiating RKE2/K3s server or agent processes. Please refer to Rancher documentation for [RKE2 Cluster Configuration Reference](https://ranchermanager.docs.rancher.com/reference-guides/cluster-configuration/rancher-server-configuration/rke2-cluster-configuration#machineselectorfiles) and [K3s Cluster Configuration Reference](https://ranchermanager.docs.rancher.com/reference-guides/cluster-configuration/rancher-server-configuration/k3s-cluster-configuration#machineselectorfiles). This argument is available in Rancher v2.7.2 and later.
        /// </summary>
        public InputList<Inputs.ClusterV2RkeConfigMachineSelectorFileArgs> MachineSelectorFiles
        {
            get => _machineSelectorFiles ?? (_machineSelectorFiles = new InputList<Inputs.ClusterV2RkeConfigMachineSelectorFileArgs>());
            set => _machineSelectorFiles = value;
        }

        /// <summary>
        /// Docker registries from which the cluster pulls images.
        /// </summary>
        [Input("registries")]
        public Input<Inputs.ClusterV2RkeConfigRegistriesArgs>? Registries { get; set; }

        /// <summary>
        /// Cluster V2 certificate rotation.
        /// </summary>
        [Input("rotateCertificates")]
        public Input<Inputs.ClusterV2RkeConfigRotateCertificatesArgs>? RotateCertificates { get; set; }

        /// <summary>
        /// Cluster upgrade strategy.
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<Inputs.ClusterV2RkeConfigUpgradeStrategyArgs>? UpgradeStrategy { get; set; }

        public ClusterV2RkeConfigArgs()
        {
        }
        public static new ClusterV2RkeConfigArgs Empty => new ClusterV2RkeConfigArgs();
    }
}
