// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Inputs
{

    public sealed class ClusterEksConfigGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessKey", required: true)]
        private Input<string>? _accessKey;

        /// <summary>
        /// The AWS Client ID to use
        /// </summary>
        public Input<string>? AccessKey
        {
            get => _accessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A custom AMI ID to use for the worker nodes instead of the default
        /// </summary>
        [Input("ami")]
        public Input<string>? Ami { get; set; }

        /// <summary>
        /// Associate public ip EKS worker nodes
        /// </summary>
        [Input("associateWorkerNodePublicIp")]
        public Input<bool>? AssociateWorkerNodePublicIp { get; set; }

        /// <summary>
        /// The desired number of worker nodes
        /// </summary>
        [Input("desiredNodes")]
        public Input<int>? DesiredNodes { get; set; }

        /// <summary>
        /// Enables EBS encryption of worker nodes
        /// </summary>
        [Input("ebsEncryption")]
        public Input<bool>? EbsEncryption { get; set; }

        /// <summary>
        /// The type of machine to use for worker nodes
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Allow user to specify key name to use
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        /// <summary>
        /// The kubernetes master version
        /// </summary>
        [Input("kubernetesVersion", required: true)]
        public Input<string> KubernetesVersion { get; set; } = null!;

        /// <summary>
        /// The maximum number of worker nodes
        /// </summary>
        [Input("maximumNodes")]
        public Input<int>? MaximumNodes { get; set; }

        /// <summary>
        /// The minimum number of worker nodes
        /// </summary>
        [Input("minimumNodes")]
        public Input<int>? MinimumNodes { get; set; }

        /// <summary>
        /// The volume size for each node
        /// </summary>
        [Input("nodeVolumeSize")]
        public Input<int>? NodeVolumeSize { get; set; }

        /// <summary>
        /// The AWS Region to create the EKS cluster in
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretKey", required: true)]
        private Input<string>? _secretKey;

        /// <summary>
        /// The AWS Client Secret associated with the Client ID
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// List of security groups to use for the cluster
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The service role to use to perform the cluster operations in AWS
        /// </summary>
        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        [Input("sessionToken")]
        private Input<string>? _sessionToken;

        /// <summary>
        /// A session token to use with the client key and secret if applicable
        /// </summary>
        public Input<string>? SessionToken
        {
            get => _sessionToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sessionToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// List of subnets in the virtual network to use
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        /// <summary>
        /// Pass user-data to the nodes to perform automated configuration tasks
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The name of the virtual network to use
        /// </summary>
        [Input("virtualNetwork")]
        public Input<string>? VirtualNetwork { get; set; }

        public ClusterEksConfigGetArgs()
        {
        }
        public static new ClusterEksConfigGetArgs Empty => new ClusterEksConfigGetArgs();
    }
}
