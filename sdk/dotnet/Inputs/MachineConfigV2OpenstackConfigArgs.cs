// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Inputs
{

    public sealed class MachineConfigV2OpenstackConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("activeTimeout")]
        public Input<string>? ActiveTimeout { get; set; }

        [Input("applicationCredentialId")]
        public Input<string>? ApplicationCredentialId { get; set; }

        [Input("applicationCredentialName")]
        public Input<string>? ApplicationCredentialName { get; set; }

        [Input("applicationCredentialSecret")]
        private Input<string>? _applicationCredentialSecret;
        public Input<string>? ApplicationCredentialSecret
        {
            get => _applicationCredentialSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _applicationCredentialSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("authUrl", required: true)]
        public Input<string> AuthUrl { get; set; } = null!;

        [Input("availabilityZone", required: true)]
        public Input<string> AvailabilityZone { get; set; } = null!;

        [Input("bootFromVolume")]
        public Input<bool>? BootFromVolume { get; set; }

        [Input("cacert")]
        public Input<string>? Cacert { get; set; }

        [Input("configDrive")]
        public Input<bool>? ConfigDrive { get; set; }

        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("endpointType")]
        public Input<string>? EndpointType { get; set; }

        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        [Input("flavorName")]
        public Input<string>? FlavorName { get; set; }

        [Input("floatingIpPool")]
        public Input<string>? FloatingIpPool { get; set; }

        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        [Input("ipVersion")]
        public Input<string>? IpVersion { get; set; }

        [Input("keypairName")]
        public Input<string>? KeypairName { get; set; }

        [Input("netId")]
        public Input<string>? NetId { get; set; }

        [Input("netName")]
        public Input<string>? NetName { get; set; }

        [Input("novaNetwork")]
        public Input<bool>? NovaNetwork { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKeyFile")]
        private Input<string>? _privateKeyFile;
        public Input<string>? PrivateKeyFile
        {
            get => _privateKeyFile;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyFile = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        [Input("secGroups")]
        public Input<string>? SecGroups { get; set; }

        [Input("sshPort")]
        public Input<string>? SshPort { get; set; }

        [Input("sshUser")]
        public Input<string>? SshUser { get; set; }

        [Input("tenantDomainId")]
        public Input<string>? TenantDomainId { get; set; }

        [Input("tenantDomainName")]
        public Input<string>? TenantDomainName { get; set; }

        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        [Input("userDataFile")]
        public Input<string>? UserDataFile { get; set; }

        [Input("userDomainId")]
        public Input<string>? UserDomainId { get; set; }

        [Input("userDomainName")]
        public Input<string>? UserDomainName { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        [Input("volumeDevicePath")]
        public Input<string>? VolumeDevicePath { get; set; }

        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        [Input("volumeName")]
        public Input<string>? VolumeName { get; set; }

        [Input("volumeSize")]
        public Input<string>? VolumeSize { get; set; }

        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public MachineConfigV2OpenstackConfigArgs()
        {
        }
        public static new MachineConfigV2OpenstackConfigArgs Empty => new MachineConfigV2OpenstackConfigArgs();
    }
}
