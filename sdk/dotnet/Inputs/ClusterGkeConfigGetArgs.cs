// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Inputs
{

    public sealed class ClusterGkeConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP address range of the container pods (string)
        /// </summary>
        [Input("clusterIpv4Cidr", required: true)]
        public Input<string> ClusterIpv4Cidr { get; set; } = null!;

        [Input("credential", required: true)]
        private Input<string>? _credential;

        /// <summary>
        /// The contents of the GC credential file (string)
        /// </summary>
        public Input<string>? Credential
        {
            get => _credential;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credential = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The GKE node config disk size Gb (int)
        /// </summary>
        [Input("diskSizeGb")]
        public Input<int>? DiskSizeGb { get; set; }

        /// <summary>
        /// The GKE node config disk type (string)
        /// </summary>
        [Input("diskType", required: true)]
        public Input<string> DiskType { get; set; } = null!;

        /// <summary>
        /// To enable Kubernetes alpha feature. Default `true` (bool)
        /// </summary>
        [Input("enableAlphaFeature")]
        public Input<bool>? EnableAlphaFeature { get; set; }

        /// <summary>
        /// Specifies whether the node auto-repair is enabled for the node pool. Default `false` (bool)
        /// </summary>
        [Input("enableAutoRepair")]
        public Input<bool>? EnableAutoRepair { get; set; }

        /// <summary>
        /// Specifies whether node auto-upgrade is enabled for the node pool. Default `false` (bool)
        /// </summary>
        [Input("enableAutoUpgrade")]
        public Input<bool>? EnableAutoUpgrade { get; set; }

        /// <summary>
        /// Enable horizontal pod autoscaling for the cluster. Default `true` (bool)
        /// </summary>
        [Input("enableHorizontalPodAutoscaling")]
        public Input<bool>? EnableHorizontalPodAutoscaling { get; set; }

        /// <summary>
        /// Enable HTTP load balancing on GKE cluster. Default `true` (bool)
        /// </summary>
        [Input("enableHttpLoadBalancing")]
        public Input<bool>? EnableHttpLoadBalancing { get; set; }

        /// <summary>
        /// Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
        /// </summary>
        [Input("enableKubernetesDashboard")]
        public Input<bool>? EnableKubernetesDashboard { get; set; }

        /// <summary>
        /// Whether to enable legacy abac on the cluster. Default `false` (bool)
        /// </summary>
        [Input("enableLegacyAbac")]
        public Input<bool>? EnableLegacyAbac { get; set; }

        /// <summary>
        /// Enable master authorized network. Set to `true` if `master_authorized_network_cidr_blocks` is set. Default `false` (bool)
        /// </summary>
        [Input("enableMasterAuthorizedNetwork")]
        public Input<bool>? EnableMasterAuthorizedNetwork { get; set; }

        /// <summary>
        /// Enable network policy config for the cluster. Default `true` (bool)
        /// </summary>
        [Input("enableNetworkPolicyConfig")]
        public Input<bool>? EnableNetworkPolicyConfig { get; set; }

        /// <summary>
        /// Enable nodepool autoscaling. Default `false` (bool)
        /// </summary>
        [Input("enableNodepoolAutoscaling")]
        public Input<bool>? EnableNodepoolAutoscaling { get; set; }

        /// <summary>
        /// Enable GKE cluster private endpoint. Default: `false` (bool)
        /// </summary>
        [Input("enablePrivateEndpoint")]
        public Input<bool>? EnablePrivateEndpoint { get; set; }

        /// <summary>
        /// Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
        /// </summary>
        [Input("enablePrivateNodes")]
        public Input<bool>? EnablePrivateNodes { get; set; }

        /// <summary>
        /// Enable stackdriver monitoring. Default `true` (bool)
        /// </summary>
        [Input("enableStackdriverLogging")]
        public Input<bool>? EnableStackdriverLogging { get; set; }

        /// <summary>
        /// Enable stackdriver monitoring on GKE cluster (bool)
        /// </summary>
        [Input("enableStackdriverMonitoring")]
        public Input<bool>? EnableStackdriverMonitoring { get; set; }

        /// <summary>
        /// The GKE node config image type (string)
        /// </summary>
        [Input("imageType", required: true)]
        public Input<string> ImageType { get; set; } = null!;

        /// <summary>
        /// The IP address range for the cluster pod IPs (string)
        /// </summary>
        [Input("ipPolicyClusterIpv4CidrBlock", required: true)]
        public Input<string> IpPolicyClusterIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// The name of the secondary range to be used for the cluster CIDR block (string)
        /// </summary>
        [Input("ipPolicyClusterSecondaryRangeName", required: true)]
        public Input<string> IpPolicyClusterSecondaryRangeName { get; set; } = null!;

        /// <summary>
        /// Whether a new subnetwork will be created automatically for the cluster. Default `false` (bool)
        /// </summary>
        [Input("ipPolicyCreateSubnetwork")]
        public Input<bool>? IpPolicyCreateSubnetwork { get; set; }

        /// <summary>
        /// The IP address range of the instance IPs in this cluster (string)
        /// </summary>
        [Input("ipPolicyNodeIpv4CidrBlock", required: true)]
        public Input<string> IpPolicyNodeIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// The IP address range of the services IPs in this cluster (string)
        /// </summary>
        [Input("ipPolicyServicesIpv4CidrBlock", required: true)]
        public Input<string> IpPolicyServicesIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// The name of the secondary range to be used for the services CIDR block (string)
        /// </summary>
        [Input("ipPolicyServicesSecondaryRangeName", required: true)]
        public Input<string> IpPolicyServicesSecondaryRangeName { get; set; } = null!;

        /// <summary>
        /// A custom subnetwork name to be used if createSubnetwork is true (string)
        /// </summary>
        [Input("ipPolicySubnetworkName", required: true)]
        public Input<string> IpPolicySubnetworkName { get; set; } = null!;

        /// <summary>
        /// Issue a client certificate. Default `false` (bool)
        /// </summary>
        [Input("issueClientCertificate")]
        public Input<bool>? IssueClientCertificate { get; set; }

        /// <summary>
        /// Enable the Kubernetes dashboard. Default `false` (bool)
        /// </summary>
        [Input("kubernetesDashboard")]
        public Input<bool>? KubernetesDashboard { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for cluster registration token object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The GKE node config local ssd count (int)
        /// </summary>
        [Input("localSsdCount")]
        public Input<int>? LocalSsdCount { get; set; }

        [Input("locations", required: true)]
        private InputList<string>? _locations;

        /// <summary>
        /// The GKE cluster locations (List)
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// The GKE node config machine type (string)
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// The GKE cluster maintenance window (string)
        /// </summary>
        [Input("maintenanceWindow", required: true)]
        public Input<string> MaintenanceWindow { get; set; } = null!;

        [Input("masterAuthorizedNetworkCidrBlocks")]
        private InputList<string>? _masterAuthorizedNetworkCidrBlocks;

        /// <summary>
        /// Define up to 10 external networks that could access Kubernetes master through HTTPS (list)
        /// </summary>
        public InputList<string> MasterAuthorizedNetworkCidrBlocks
        {
            get => _masterAuthorizedNetworkCidrBlocks ?? (_masterAuthorizedNetworkCidrBlocks = new InputList<string>());
            set => _masterAuthorizedNetworkCidrBlocks = value;
        }

        /// <summary>
        /// The GKE cluster private master ip v4 cidr block (string)
        /// </summary>
        [Input("masterIpv4CidrBlock", required: true)]
        public Input<string> MasterIpv4CidrBlock { get; set; } = null!;

        /// <summary>
        /// Master version for GKE cluster (string)
        /// </summary>
        [Input("masterVersion", required: true)]
        public Input<string> MasterVersion { get; set; } = null!;

        /// <summary>
        /// The GKE node pool config max node count (int)
        /// </summary>
        [Input("maxNodeCount")]
        public Input<int>? MaxNodeCount { get; set; }

        /// <summary>
        /// The GKE node pool config min node count (int)
        /// </summary>
        [Input("minNodeCount")]
        public Input<int>? MinNodeCount { get; set; }

        /// <summary>
        /// The GKE cluster network. Required for create new cluster (string)
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// Node count for GKE cluster. Default `3` (int)
        /// </summary>
        [Input("nodeCount")]
        public Input<int>? NodeCount { get; set; }

        /// <summary>
        /// The ID of the cluster node pool (string)
        /// </summary>
        [Input("nodePool", required: true)]
        public Input<string> NodePool { get; set; } = null!;

        /// <summary>
        /// Node version for GKE cluster (string)
        /// </summary>
        [Input("nodeVersion", required: true)]
        public Input<string> NodeVersion { get; set; } = null!;

        [Input("oauthScopes", required: true)]
        private InputList<string>? _oauthScopes;

        /// <summary>
        /// The GKE node config oauth scopes (List)
        /// </summary>
        public InputList<string> OauthScopes
        {
            get => _oauthScopes ?? (_oauthScopes = new InputList<string>());
            set => _oauthScopes = value;
        }

        /// <summary>
        /// Enable GKE node config preemptible. Default: `false` (bool)
        /// </summary>
        [Input("preemptible")]
        public Input<bool>? Preemptible { get; set; }

        /// <summary>
        /// Project ID to apply answer (string)
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("resourceLabels")]
        private InputMap<object>? _resourceLabels;

        /// <summary>
        /// The map of Kubernetes labels to be applied to each cluster (map)
        /// </summary>
        public InputMap<object> ResourceLabels
        {
            get => _resourceLabels ?? (_resourceLabels = new InputMap<object>());
            set => _resourceLabels = value;
        }

        /// <summary>
        /// The Google Cloud Platform Service Account to be used by the node VMs (string)
        /// </summary>
        [Input("serviceAccount", required: true)]
        public Input<string> ServiceAccount { get; set; } = null!;

        /// <summary>
        /// Subnetwork for GKE cluster (string)
        /// </summary>
        [Input("subNetwork", required: true)]
        public Input<string> SubNetwork { get; set; } = null!;

        [Input("taints")]
        private InputList<string>? _taints;

        /// <summary>
        /// The GKE node config taints (List)
        /// </summary>
        public InputList<string> Taints
        {
            get => _taints ?? (_taints = new InputList<string>());
            set => _taints = value;
        }

        /// <summary>
        /// Use GKE ip aliases? Default: `true` (bool)
        /// </summary>
        [Input("useIpAliases")]
        public Input<bool>? UseIpAliases { get; set; }

        /// <summary>
        /// The GKE cluster zone. Required if `region` not set (string)
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ClusterGkeConfigGetArgs()
        {
        }
        public static new ClusterGkeConfigGetArgs Empty => new ClusterGkeConfigGetArgs();
    }
}
