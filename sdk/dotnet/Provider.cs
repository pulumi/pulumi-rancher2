// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// The provider type for the rancher2 package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/index.html.markdown.
    /// </summary>
    public partial class Provider : Pulumi.ProviderResource
    {
        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("rancher2", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// API Key used to authenticate with the rancher server
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The URL to the rancher API
        /// </summary>
        [Input("apiUrl")]
        public Input<string>? ApiUrl { get; set; }

        /// <summary>
        /// Bootstrap rancher server
        /// </summary>
        [Input("bootstrap", json: true)]
        public Input<bool>? Bootstrap { get; set; }

        /// <summary>
        /// CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure
        /// option false
        /// </summary>
        [Input("caCerts")]
        public Input<string>? CaCerts { get; set; }

        /// <summary>
        /// Allow insecure connections to Rancher. Mandatory if self signed tls and not ca_certs provided
        /// </summary>
        [Input("insecure", json: true)]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// Rancher connection retries
        /// </summary>
        [Input("retries", json: true)]
        public Input<int>? Retries { get; set; }

        /// <summary>
        /// API secret used to authenticate with the rancher server
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// API token used to authenticate with the rancher server
        /// </summary>
        [Input("tokenKey")]
        public Input<string>? TokenKey { get; set; }

        public ProviderArgs()
        {
            AccessKey = Utilities.GetEnv("RANCHER_ACCESS_KEY");
            ApiUrl = Utilities.GetEnv("RANCHER_URL");
            Bootstrap = Utilities.GetEnvBoolean("RANCHER_BOOTSTRAP") ?? false;
            CaCerts = Utilities.GetEnv("RANCHER_CA_CERTS");
            Insecure = Utilities.GetEnvBoolean("RANCHER_INSECURE") ?? false;
            SecretKey = Utilities.GetEnv("RANCHER_SECRET_KEY");
            TokenKey = Utilities.GetEnv("RANCHER_TOKEN_KEY");
        }
    }
}
