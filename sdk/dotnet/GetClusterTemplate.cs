// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 cluster template.
        /// 
        /// Cluster Templates are available from Rancher v2.3.x and above.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/d/clusterTemplate.html.markdown.
        /// </summary>
        [Obsolete("Use GetClusterTemplate.InvokeAsync() instead")]
        public static Task<GetClusterTemplateResult> GetClusterTemplate(GetClusterTemplateArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterTemplateResult>("rancher2:index/getClusterTemplate:getClusterTemplate", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetClusterTemplate
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 cluster template.
        /// 
        /// Cluster Templates are available from Rancher v2.3.x and above.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/d/clusterTemplate.html.markdown.
        /// </summary>
        public static Task<GetClusterTemplateResult> InvokeAsync(GetClusterTemplateArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterTemplateResult>("rancher2:index/getClusterTemplate:getClusterTemplate", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetClusterTemplateArgs : Pulumi.InvokeArgs
    {
        [Input("annotations")]
        private Dictionary<string, object>? _annotations;

        /// <summary>
        /// (Computed) Annotations for the cluster template (map)
        /// </summary>
        public Dictionary<string, object> Annotations
        {
            get => _annotations ?? (_annotations = new Dictionary<string, object>());
            set => _annotations = value;
        }

        [Input("description")]
        public string? Description { get; set; }

        [Input("labels")]
        private Dictionary<string, object>? _labels;

        /// <summary>
        /// (Computed) Labels for the cluster template (map)
        /// </summary>
        public Dictionary<string, object> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, object>());
            set => _labels = value;
        }

        /// <summary>
        /// The cluster template name (string)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetClusterTemplateArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateResult
    {
        /// <summary>
        /// (Computed) Annotations for the cluster template (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) Default cluster template revision ID (string)
        /// </summary>
        public readonly string DefaultRevisionId;
        public readonly string Description;
        /// <summary>
        /// (Computed) Labels for the cluster template (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        /// <summary>
        /// (Computed) Cluster template members (list)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterTemplateMembersResult> Members;
        public readonly string Name;
        /// <summary>
        /// (Computed) Cluster template revisions (list)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterTemplateTemplateRevisionsResult> TemplateRevisions;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetClusterTemplateResult(
            ImmutableDictionary<string, object> annotations,
            string defaultRevisionId,
            string description,
            ImmutableDictionary<string, object> labels,
            ImmutableArray<Outputs.GetClusterTemplateMembersResult> members,
            string name,
            ImmutableArray<Outputs.GetClusterTemplateTemplateRevisionsResult> templateRevisions,
            string id)
        {
            Annotations = annotations;
            DefaultRevisionId = defaultRevisionId;
            Description = description;
            Labels = labels;
            Members = members;
            Name = name;
            TemplateRevisions = templateRevisions;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetClusterTemplateMembersResult
    {
        public readonly string? AccessType;
        public readonly string? GroupPrincipalId;
        public readonly string? UserPrincipalId;

        [OutputConstructor]
        private GetClusterTemplateMembersResult(
            string? accessType,
            string? groupPrincipalId,
            string? userPrincipalId)
        {
            AccessType = accessType;
            GroupPrincipalId = groupPrincipalId;
            UserPrincipalId = userPrincipalId;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigClusterAuthEndpointResult
    {
        public readonly string? CaCerts;
        public readonly bool? Enabled;
        public readonly string? Fqdn;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigClusterAuthEndpointResult(
            string? caCerts,
            bool? enabled,
            string? fqdn)
        {
            CaCerts = caCerts;
            Enabled = enabled;
            Fqdn = fqdn;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigClusterAuthEndpointResult ClusterAuthEndpoint;
        public readonly string DefaultClusterRoleForProjectMembers;
        public readonly string DefaultPodSecurityPolicyTemplateId;
        public readonly string DesiredAgentImage;
        public readonly string DesiredAuthImage;
        public readonly string DockerRootDir;
        public readonly bool? EnableClusterAlerting;
        public readonly bool? EnableClusterMonitoring;
        public readonly bool? EnableNetworkPolicy;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigResult RkeConfig;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanResult? ScheduledClusterScan;
        public readonly bool? WindowsPreferedCluster;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigResult(
            GetClusterTemplateTemplateRevisionsClusterConfigClusterAuthEndpointResult clusterAuthEndpoint,
            string defaultClusterRoleForProjectMembers,
            string defaultPodSecurityPolicyTemplateId,
            string desiredAgentImage,
            string desiredAuthImage,
            string dockerRootDir,
            bool? enableClusterAlerting,
            bool? enableClusterMonitoring,
            bool? enableNetworkPolicy,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigResult rkeConfig,
            GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanResult? scheduledClusterScan,
            bool? windowsPreferedCluster)
        {
            ClusterAuthEndpoint = clusterAuthEndpoint;
            DefaultClusterRoleForProjectMembers = defaultClusterRoleForProjectMembers;
            DefaultPodSecurityPolicyTemplateId = defaultPodSecurityPolicyTemplateId;
            DesiredAgentImage = desiredAgentImage;
            DesiredAuthImage = desiredAuthImage;
            DockerRootDir = dockerRootDir;
            EnableClusterAlerting = enableClusterAlerting;
            EnableClusterMonitoring = enableClusterMonitoring;
            EnableNetworkPolicy = enableNetworkPolicy;
            RkeConfig = rkeConfig;
            ScheduledClusterScan = scheduledClusterScan;
            WindowsPreferedCluster = windowsPreferedCluster;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigAuthenticationResult
    {
        public readonly ImmutableArray<string> Sans;
        public readonly string Strategy;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigAuthenticationResult(
            ImmutableArray<string> sans,
            string strategy)
        {
            Sans = sans;
            Strategy = strategy;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigAuthorizationResult
    {
        public readonly string? Mode;
        public readonly ImmutableDictionary<string, object> Options;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigAuthorizationResult(
            string? mode,
            ImmutableDictionary<string, object> options)
        {
            Mode = mode;
            Options = options;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigBastionHostResult
    {
        public readonly string Address;
        public readonly string? Port;
        public readonly bool? SshAgentAuth;
        public readonly string SshKey;
        public readonly string SshKeyPath;
        public readonly string User;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigBastionHostResult(
            string address,
            string? port,
            bool? sshAgentAuth,
            string sshKey,
            string sshKeyPath,
            string user)
        {
            Address = address;
            Port = port;
            SshAgentAuth = sshAgentAuth;
            SshKey = sshKey;
            SshKeyPath = sshKeyPath;
            User = user;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalResult
    {
        public readonly bool? DisableSecurityGroupIngress;
        public readonly bool? DisableStrictZoneCheck;
        public readonly string ElbSecurityGroup;
        public readonly string KubernetesClusterId;
        public readonly string KubernetesClusterTag;
        public readonly string RoleArn;
        public readonly string RouteTableId;
        public readonly string SubnetId;
        public readonly string Vpc;
        public readonly string Zone;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalResult(
            bool? disableSecurityGroupIngress,
            bool? disableStrictZoneCheck,
            string elbSecurityGroup,
            string kubernetesClusterId,
            string kubernetesClusterTag,
            string roleArn,
            string routeTableId,
            string subnetId,
            string vpc,
            string zone)
        {
            DisableSecurityGroupIngress = disableSecurityGroupIngress;
            DisableStrictZoneCheck = disableStrictZoneCheck;
            ElbSecurityGroup = elbSecurityGroup;
            KubernetesClusterId = kubernetesClusterId;
            KubernetesClusterTag = kubernetesClusterTag;
            RoleArn = roleArn;
            RouteTableId = routeTableId;
            SubnetId = subnetId;
            Vpc = vpc;
            Zone = zone;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalResult Global;
        public readonly ImmutableArray<GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverridesResult> ServiceOverrides;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderResult(
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderGlobalResult global,
            ImmutableArray<GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverridesResult> serviceOverrides)
        {
            Global = global;
            ServiceOverrides = serviceOverrides;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverridesResult
    {
        public readonly string Region;
        public readonly string Service;
        public readonly string SigningMethod;
        public readonly string SigningName;
        public readonly string SigningRegion;
        public readonly string Url;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderServiceOverridesResult(
            string region,
            string service,
            string signingMethod,
            string signingName,
            string signingRegion,
            string url)
        {
            Region = region;
            Service = service;
            SigningMethod = signingMethod;
            SigningName = signingName;
            SigningRegion = signingRegion;
            Url = url;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAzureCloudProviderResult
    {
        public readonly string AadClientCertPassword;
        public readonly string AadClientCertPath;
        public readonly string AadClientId;
        public readonly string AadClientSecret;
        public readonly string Cloud;
        public readonly bool CloudProviderBackoff;
        public readonly int CloudProviderBackoffDuration;
        public readonly int CloudProviderBackoffExponent;
        public readonly int CloudProviderBackoffJitter;
        public readonly int CloudProviderBackoffRetries;
        public readonly bool CloudProviderRateLimit;
        public readonly int CloudProviderRateLimitBucket;
        public readonly int CloudProviderRateLimitQps;
        public readonly string Location;
        public readonly int MaximumLoadBalancerRuleCount;
        public readonly string PrimaryAvailabilitySetName;
        public readonly string PrimaryScaleSetName;
        public readonly string ResourceGroup;
        public readonly string RouteTableName;
        public readonly string SecurityGroupName;
        public readonly string SubnetName;
        public readonly string SubscriptionId;
        public readonly string TenantId;
        public readonly bool UseInstanceMetadata;
        public readonly bool UseManagedIdentityExtension;
        public readonly string VmType;
        public readonly string VnetName;
        public readonly string VnetResourceGroup;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAzureCloudProviderResult(
            string aadClientCertPassword,
            string aadClientCertPath,
            string aadClientId,
            string aadClientSecret,
            string cloud,
            bool cloudProviderBackoff,
            int cloudProviderBackoffDuration,
            int cloudProviderBackoffExponent,
            int cloudProviderBackoffJitter,
            int cloudProviderBackoffRetries,
            bool cloudProviderRateLimit,
            int cloudProviderRateLimitBucket,
            int cloudProviderRateLimitQps,
            string location,
            int maximumLoadBalancerRuleCount,
            string primaryAvailabilitySetName,
            string primaryScaleSetName,
            string resourceGroup,
            string routeTableName,
            string securityGroupName,
            string subnetName,
            string subscriptionId,
            string tenantId,
            bool useInstanceMetadata,
            bool useManagedIdentityExtension,
            string vmType,
            string vnetName,
            string vnetResourceGroup)
        {
            AadClientCertPassword = aadClientCertPassword;
            AadClientCertPath = aadClientCertPath;
            AadClientId = aadClientId;
            AadClientSecret = aadClientSecret;
            Cloud = cloud;
            CloudProviderBackoff = cloudProviderBackoff;
            CloudProviderBackoffDuration = cloudProviderBackoffDuration;
            CloudProviderBackoffExponent = cloudProviderBackoffExponent;
            CloudProviderBackoffJitter = cloudProviderBackoffJitter;
            CloudProviderBackoffRetries = cloudProviderBackoffRetries;
            CloudProviderRateLimit = cloudProviderRateLimit;
            CloudProviderRateLimitBucket = cloudProviderRateLimitBucket;
            CloudProviderRateLimitQps = cloudProviderRateLimitQps;
            Location = location;
            MaximumLoadBalancerRuleCount = maximumLoadBalancerRuleCount;
            PrimaryAvailabilitySetName = primaryAvailabilitySetName;
            PrimaryScaleSetName = primaryScaleSetName;
            ResourceGroup = resourceGroup;
            RouteTableName = routeTableName;
            SecurityGroupName = securityGroupName;
            SubnetName = subnetName;
            SubscriptionId = subscriptionId;
            TenantId = tenantId;
            UseInstanceMetadata = useInstanceMetadata;
            UseManagedIdentityExtension = useManagedIdentityExtension;
            VmType = vmType;
            VnetName = vnetName;
            VnetResourceGroup = vnetResourceGroup;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageResult
    {
        public readonly string BsVersion;
        public readonly bool IgnoreVolumeAz;
        public readonly bool TrustDevicePath;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageResult(
            string bsVersion,
            bool ignoreVolumeAz,
            bool trustDevicePath)
        {
            BsVersion = bsVersion;
            IgnoreVolumeAz = ignoreVolumeAz;
            TrustDevicePath = trustDevicePath;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalResult
    {
        public readonly string AuthUrl;
        public readonly string CaFile;
        public readonly string DomainId;
        public readonly string DomainName;
        public readonly string Password;
        public readonly string Region;
        public readonly string TenantId;
        public readonly string TenantName;
        public readonly string TrustId;
        public readonly string Username;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalResult(
            string authUrl,
            string caFile,
            string domainId,
            string domainName,
            string password,
            string region,
            string tenantId,
            string tenantName,
            string trustId,
            string username)
        {
            AuthUrl = authUrl;
            CaFile = caFile;
            DomainId = domainId;
            DomainName = domainName;
            Password = password;
            Region = region;
            TenantId = tenantId;
            TenantName = tenantName;
            TrustId = trustId;
            Username = username;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerResult
    {
        public readonly bool CreateMonitor;
        public readonly string FloatingNetworkId;
        public readonly string LbMethod;
        public readonly string LbProvider;
        public readonly string LbVersion;
        public readonly bool ManageSecurityGroups;
        public readonly string? MonitorDelay;
        public readonly int? MonitorMaxRetries;
        public readonly string? MonitorTimeout;
        public readonly string SubnetId;
        public readonly bool UseOctavia;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerResult(
            bool createMonitor,
            string floatingNetworkId,
            string lbMethod,
            string lbProvider,
            string lbVersion,
            bool manageSecurityGroups,
            string? monitorDelay,
            int? monitorMaxRetries,
            string? monitorTimeout,
            string subnetId,
            bool useOctavia)
        {
            CreateMonitor = createMonitor;
            FloatingNetworkId = floatingNetworkId;
            LbMethod = lbMethod;
            LbProvider = lbProvider;
            LbVersion = lbVersion;
            ManageSecurityGroups = manageSecurityGroups;
            MonitorDelay = monitorDelay;
            MonitorMaxRetries = monitorMaxRetries;
            MonitorTimeout = monitorTimeout;
            SubnetId = subnetId;
            UseOctavia = useOctavia;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataResult
    {
        public readonly int RequestTimeout;
        public readonly string SearchOrder;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataResult(
            int requestTimeout,
            string searchOrder)
        {
            RequestTimeout = requestTimeout;
            SearchOrder = searchOrder;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageResult BlockStorage;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalResult Global;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerResult LoadBalancer;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataResult Metadata;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteResult Route;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderResult(
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderBlockStorageResult blockStorage,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderGlobalResult global,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderLoadBalancerResult loadBalancer,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderMetadataResult metadata,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteResult route)
        {
            BlockStorage = blockStorage;
            Global = global;
            LoadBalancer = loadBalancer;
            Metadata = metadata;
            Route = route;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteResult
    {
        public readonly string RouterId;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderRouteResult(string routerId)
        {
            RouterId = routerId;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderResult? AwsCloudProvider;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAzureCloudProviderResult? AzureCloudProvider;
        public readonly string CustomCloudProvider;
        /// <summary>
        /// The cluster template name (string)
        /// </summary>
        public readonly string Name;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderResult? OpenstackCloudProvider;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderResult? VsphereCloudProvider;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderResult(
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAwsCloudProviderResult? awsCloudProvider,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderAzureCloudProviderResult? azureCloudProvider,
            string customCloudProvider,
            string name,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderOpenstackCloudProviderResult? openstackCloudProvider,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderResult? vsphereCloudProvider)
        {
            AwsCloudProvider = awsCloudProvider;
            AzureCloudProvider = azureCloudProvider;
            CustomCloudProvider = customCloudProvider;
            Name = name;
            OpenstackCloudProvider = openstackCloudProvider;
            VsphereCloudProvider = vsphereCloudProvider;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskResult
    {
        public readonly string ScsiControllerType;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskResult(string scsiControllerType)
        {
            ScsiControllerType = scsiControllerType;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalResult
    {
        public readonly string Datacenters;
        public readonly bool InsecureFlag;
        public readonly string Password;
        public readonly string Port;
        public readonly int SoapRoundtripCount;
        public readonly string User;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalResult(
            string datacenters,
            bool insecureFlag,
            string password,
            string port,
            int soapRoundtripCount,
            string user)
        {
            Datacenters = datacenters;
            InsecureFlag = insecureFlag;
            Password = password;
            Port = port;
            SoapRoundtripCount = soapRoundtripCount;
            User = user;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkResult
    {
        public readonly string PublicNetwork;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkResult(string publicNetwork)
        {
            PublicNetwork = publicNetwork;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskResult Disk;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalResult Global;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkResult Network;
        public readonly ImmutableArray<GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCentersResult> VirtualCenters;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceResult Workspace;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderResult(
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderDiskResult disk,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderGlobalResult global,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderNetworkResult network,
            ImmutableArray<GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCentersResult> virtualCenters,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceResult workspace)
        {
            Disk = disk;
            Global = global;
            Network = network;
            VirtualCenters = virtualCenters;
            Workspace = workspace;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCentersResult
    {
        public readonly string Datacenters;
        /// <summary>
        /// The cluster template name (string)
        /// </summary>
        public readonly string Name;
        public readonly string Password;
        public readonly string Port;
        public readonly int SoapRoundtripCount;
        public readonly string User;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderVirtualCentersResult(
            string datacenters,
            string name,
            string password,
            string port,
            int soapRoundtripCount,
            string user)
        {
            Datacenters = datacenters;
            Name = name;
            Password = password;
            Port = port;
            SoapRoundtripCount = soapRoundtripCount;
            User = user;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceResult
    {
        public readonly string Datacenter;
        public readonly string DefaultDatastore;
        public readonly string Folder;
        public readonly string ResourcepoolPath;
        public readonly string Server;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderVsphereCloudProviderWorkspaceResult(
            string datacenter,
            string defaultDatastore,
            string folder,
            string resourcepoolPath,
            string server)
        {
            Datacenter = datacenter;
            DefaultDatastore = defaultDatastore;
            Folder = folder;
            ResourcepoolPath = resourcepoolPath;
            Server = server;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigDnsResult
    {
        public readonly ImmutableDictionary<string, object> NodeSelector;
        public readonly string? Provider;
        public readonly ImmutableArray<string> ReverseCidrs;
        public readonly ImmutableArray<string> UpstreamNameservers;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigDnsResult(
            ImmutableDictionary<string, object> nodeSelector,
            string? provider,
            ImmutableArray<string> reverseCidrs,
            ImmutableArray<string> upstreamNameservers)
        {
            NodeSelector = nodeSelector;
            Provider = provider;
            ReverseCidrs = reverseCidrs;
            UpstreamNameservers = upstreamNameservers;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigIngressResult
    {
        public readonly string DnsPolicy;
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        public readonly ImmutableDictionary<string, object> NodeSelector;
        public readonly ImmutableDictionary<string, object> Options;
        public readonly string Provider;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigIngressResult(
            string dnsPolicy,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableDictionary<string, object> nodeSelector,
            ImmutableDictionary<string, object> options,
            string provider)
        {
            DnsPolicy = dnsPolicy;
            ExtraArgs = extraArgs;
            NodeSelector = nodeSelector;
            Options = options;
            Provider = provider;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigMonitoringResult
    {
        public readonly ImmutableDictionary<string, object> Options;
        public readonly string Provider;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigMonitoringResult(
            ImmutableDictionary<string, object> options,
            string provider)
        {
            Options = options;
            Provider = provider;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkCalicoNetworkProviderResult
    {
        public readonly string CloudProvider;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkCalicoNetworkProviderResult(string cloudProvider)
        {
            CloudProvider = cloudProvider;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkCanalNetworkProviderResult
    {
        public readonly string Iface;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkCanalNetworkProviderResult(string iface)
        {
            Iface = iface;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkFlannelNetworkProviderResult
    {
        public readonly string Iface;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkFlannelNetworkProviderResult(string iface)
        {
            Iface = iface;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkCalicoNetworkProviderResult? CalicoNetworkProvider;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkCanalNetworkProviderResult? CanalNetworkProvider;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkFlannelNetworkProviderResult? FlannelNetworkProvider;
        public readonly int? Mtu;
        public readonly ImmutableDictionary<string, object> Options;
        public readonly string Plugin;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkWeaveNetworkProviderResult? WeaveNetworkProvider;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkResult(
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkCalicoNetworkProviderResult? calicoNetworkProvider,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkCanalNetworkProviderResult? canalNetworkProvider,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkFlannelNetworkProviderResult? flannelNetworkProvider,
            int? mtu,
            ImmutableDictionary<string, object> options,
            string plugin,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkWeaveNetworkProviderResult? weaveNetworkProvider)
        {
            CalicoNetworkProvider = calicoNetworkProvider;
            CanalNetworkProvider = canalNetworkProvider;
            FlannelNetworkProvider = flannelNetworkProvider;
            Mtu = mtu;
            Options = options;
            Plugin = plugin;
            WeaveNetworkProvider = weaveNetworkProvider;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkWeaveNetworkProviderResult
    {
        public readonly string Password;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkWeaveNetworkProviderResult(string password)
        {
            Password = password;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNodesResult
    {
        public readonly string Address;
        public readonly string DockerSocket;
        public readonly string? HostnameOverride;
        public readonly string? InternalAddress;
        /// <summary>
        /// (Computed) Labels for the cluster template (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Labels;
        public readonly string? NodeId;
        public readonly string? Port;
        public readonly ImmutableArray<string> Roles;
        public readonly bool? SshAgentAuth;
        public readonly string SshKey;
        public readonly string SshKeyPath;
        public readonly string User;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNodesResult(
            string address,
            string dockerSocket,
            string? hostnameOverride,
            string? internalAddress,
            ImmutableDictionary<string, object>? labels,
            string? nodeId,
            string? port,
            ImmutableArray<string> roles,
            bool? sshAgentAuth,
            string sshKey,
            string sshKeyPath,
            string user)
        {
            Address = address;
            DockerSocket = dockerSocket;
            HostnameOverride = hostnameOverride;
            InternalAddress = internalAddress;
            Labels = labels;
            NodeId = nodeId;
            Port = port;
            Roles = roles;
            SshAgentAuth = sshAgentAuth;
            SshKey = sshKey;
            SshKeyPath = sshKeyPath;
            User = user;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigPrivateRegistriesResult
    {
        public readonly bool? IsDefault;
        public readonly string? Password;
        public readonly string Url;
        public readonly string? User;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigPrivateRegistriesResult(
            bool? isDefault,
            string? password,
            string url,
            string? user)
        {
            IsDefault = isDefault;
            Password = password;
            Url = url;
            User = user;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigResult
    {
        public readonly int AddonJobTimeout;
        public readonly string? Addons;
        public readonly ImmutableArray<string> AddonsIncludes;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigAuthenticationResult Authentication;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigAuthorizationResult Authorization;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigBastionHostResult BastionHost;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderResult CloudProvider;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigDnsResult Dns;
        public readonly bool? IgnoreDockerVersion;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigIngressResult Ingress;
        public readonly string KubernetesVersion;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigMonitoringResult Monitoring;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkResult Network;
        public readonly ImmutableArray<GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNodesResult> Nodes;
        public readonly string PrefixPath;
        public readonly ImmutableArray<GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigPrivateRegistriesResult> PrivateRegistries;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesResult Services;
        public readonly bool? SshAgentAuth;
        public readonly string SshCertPath;
        public readonly string SshKeyPath;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigUpgradeStrategyResult UpgradeStrategy;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigResult(
            int addonJobTimeout,
            string? addons,
            ImmutableArray<string> addonsIncludes,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigAuthenticationResult authentication,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigAuthorizationResult authorization,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigBastionHostResult bastionHost,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigCloudProviderResult cloudProvider,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigDnsResult dns,
            bool? ignoreDockerVersion,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigIngressResult ingress,
            string kubernetesVersion,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigMonitoringResult monitoring,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNetworkResult network,
            ImmutableArray<GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigNodesResult> nodes,
            string prefixPath,
            ImmutableArray<GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigPrivateRegistriesResult> privateRegistries,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesResult services,
            bool? sshAgentAuth,
            string sshCertPath,
            string sshKeyPath,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigUpgradeStrategyResult upgradeStrategy)
        {
            AddonJobTimeout = addonJobTimeout;
            Addons = addons;
            AddonsIncludes = addonsIncludes;
            Authentication = authentication;
            Authorization = authorization;
            BastionHost = bastionHost;
            CloudProvider = cloudProvider;
            Dns = dns;
            IgnoreDockerVersion = ignoreDockerVersion;
            Ingress = ingress;
            KubernetesVersion = kubernetesVersion;
            Monitoring = monitoring;
            Network = network;
            Nodes = nodes;
            PrefixPath = prefixPath;
            PrivateRegistries = privateRegistries;
            Services = services;
            SshAgentAuth = sshAgentAuth;
            SshCertPath = sshCertPath;
            SshKeyPath = sshKeyPath;
            UpgradeStrategy = upgradeStrategy;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdBackupConfigResult
    {
        public readonly bool? Enabled;
        public readonly int? IntervalHours;
        public readonly int? Retention;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigResult? S3BackupConfig;
        public readonly bool? SafeTimestamp;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdBackupConfigResult(
            bool? enabled,
            int? intervalHours,
            int? retention,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigResult? s3BackupConfig,
            bool? safeTimestamp)
        {
            Enabled = enabled;
            IntervalHours = intervalHours;
            Retention = retention;
            S3BackupConfig = s3BackupConfig;
            SafeTimestamp = safeTimestamp;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigResult
    {
        public readonly string? AccessKey;
        public readonly string BucketName;
        public readonly string? CustomCa;
        public readonly string Endpoint;
        public readonly string? Folder;
        public readonly string? Region;
        public readonly string? SecretKey;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdBackupConfigS3BackupConfigResult(
            string? accessKey,
            string bucketName,
            string? customCa,
            string endpoint,
            string? folder,
            string? region,
            string? secretKey)
        {
            AccessKey = accessKey;
            BucketName = bucketName;
            CustomCa = customCa;
            Endpoint = endpoint;
            Folder = folder;
            Region = region;
            SecretKey = secretKey;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdBackupConfigResult BackupConfig;
        public readonly string CaCert;
        public readonly string Cert;
        public readonly string Creation;
        public readonly ImmutableArray<string> ExternalUrls;
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        public readonly ImmutableArray<string> ExtraBinds;
        public readonly ImmutableArray<string> ExtraEnvs;
        public readonly int? Gid;
        public readonly string Image;
        public readonly string Key;
        public readonly string Path;
        public readonly string Retention;
        public readonly bool Snapshot;
        public readonly int? Uid;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdResult(
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdBackupConfigResult backupConfig,
            string caCert,
            string cert,
            string creation,
            ImmutableArray<string> externalUrls,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            int? gid,
            string image,
            string key,
            string path,
            string retention,
            bool snapshot,
            int? uid)
        {
            BackupConfig = backupConfig;
            CaCert = caCert;
            Cert = cert;
            Creation = creation;
            ExternalUrls = externalUrls;
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Gid = gid;
            Image = image;
            Key = key;
            Path = path;
            Retention = retention;
            Snapshot = snapshot;
            Uid = uid;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationResult
    {
        public readonly string? Format;
        public readonly int? MaxAge;
        public readonly int? MaxBackup;
        public readonly int? MaxSize;
        public readonly string? Path;
        public readonly string Policy;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationResult(
            string? format,
            int? maxAge,
            int? maxBackup,
            int? maxSize,
            string? path,
            string policy)
        {
            Format = format;
            MaxAge = maxAge;
            MaxBackup = maxBackup;
            MaxSize = maxSize;
            Path = path;
            Policy = policy;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiAuditLogResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationResult Configuration;
        public readonly bool? Enabled;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiAuditLogResult(
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiAuditLogConfigurationResult configuration,
            bool? enabled)
        {
            Configuration = configuration;
            Enabled = enabled;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiEventRateLimitResult
    {
        public readonly ImmutableDictionary<string, object>? Configuration;
        public readonly bool? Enabled;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiEventRateLimitResult(
            ImmutableDictionary<string, object>? configuration,
            bool? enabled)
        {
            Configuration = configuration;
            Enabled = enabled;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiResult
    {
        public readonly ImmutableDictionary<string, object>? AdmissionConfiguration;
        public readonly bool? AlwaysPullImages;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiAuditLogResult? AuditLog;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiEventRateLimitResult? EventRateLimit;
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        public readonly ImmutableArray<string> ExtraBinds;
        public readonly ImmutableArray<string> ExtraEnvs;
        public readonly string Image;
        public readonly bool? PodSecurityPolicy;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigResult? SecretsEncryptionConfig;
        public readonly string ServiceClusterIpRange;
        public readonly string ServiceNodePortRange;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiResult(
            ImmutableDictionary<string, object>? admissionConfiguration,
            bool? alwaysPullImages,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiAuditLogResult? auditLog,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiEventRateLimitResult? eventRateLimit,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            string image,
            bool? podSecurityPolicy,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigResult? secretsEncryptionConfig,
            string serviceClusterIpRange,
            string serviceNodePortRange)
        {
            AdmissionConfiguration = admissionConfiguration;
            AlwaysPullImages = alwaysPullImages;
            AuditLog = auditLog;
            EventRateLimit = eventRateLimit;
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Image = image;
            PodSecurityPolicy = podSecurityPolicy;
            SecretsEncryptionConfig = secretsEncryptionConfig;
            ServiceClusterIpRange = serviceClusterIpRange;
            ServiceNodePortRange = serviceNodePortRange;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigResult
    {
        public readonly ImmutableDictionary<string, object>? CustomConfig;
        public readonly bool? Enabled;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiSecretsEncryptionConfigResult(
            ImmutableDictionary<string, object>? customConfig,
            bool? enabled)
        {
            CustomConfig = customConfig;
            Enabled = enabled;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeControllerResult
    {
        public readonly string ClusterCidr;
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        public readonly ImmutableArray<string> ExtraBinds;
        public readonly ImmutableArray<string> ExtraEnvs;
        public readonly string Image;
        public readonly string ServiceClusterIpRange;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeControllerResult(
            string clusterCidr,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            string image,
            string serviceClusterIpRange)
        {
            ClusterCidr = clusterCidr;
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Image = image;
            ServiceClusterIpRange = serviceClusterIpRange;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeletResult
    {
        public readonly string ClusterDnsServer;
        public readonly string ClusterDomain;
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        public readonly ImmutableArray<string> ExtraBinds;
        public readonly ImmutableArray<string> ExtraEnvs;
        public readonly bool FailSwapOn;
        public readonly bool? GenerateServingCertificate;
        public readonly string Image;
        public readonly string InfraContainerImage;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeletResult(
            string clusterDnsServer,
            string clusterDomain,
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            bool failSwapOn,
            bool? generateServingCertificate,
            string image,
            string infraContainerImage)
        {
            ClusterDnsServer = clusterDnsServer;
            ClusterDomain = clusterDomain;
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            FailSwapOn = failSwapOn;
            GenerateServingCertificate = generateServingCertificate;
            Image = image;
            InfraContainerImage = infraContainerImage;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeproxyResult
    {
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        public readonly ImmutableArray<string> ExtraBinds;
        public readonly ImmutableArray<string> ExtraEnvs;
        public readonly string Image;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeproxyResult(
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            string image)
        {
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Image = image;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdResult Etcd;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiResult KubeApi;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeControllerResult KubeController;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeletResult Kubelet;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeproxyResult Kubeproxy;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesSchedulerResult Scheduler;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesResult(
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesEtcdResult etcd,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeApiResult kubeApi,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeControllerResult kubeController,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeletResult kubelet,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesKubeproxyResult kubeproxy,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesSchedulerResult scheduler)
        {
            Etcd = etcd;
            KubeApi = kubeApi;
            KubeController = kubeController;
            Kubelet = kubelet;
            Kubeproxy = kubeproxy;
            Scheduler = scheduler;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesSchedulerResult
    {
        public readonly ImmutableDictionary<string, object> ExtraArgs;
        public readonly ImmutableArray<string> ExtraBinds;
        public readonly ImmutableArray<string> ExtraEnvs;
        public readonly string Image;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigServicesSchedulerResult(
            ImmutableDictionary<string, object> extraArgs,
            ImmutableArray<string> extraBinds,
            ImmutableArray<string> extraEnvs,
            string image)
        {
            ExtraArgs = extraArgs;
            ExtraBinds = extraBinds;
            ExtraEnvs = extraEnvs;
            Image = image;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigUpgradeStrategyDrainInputResult
    {
        public readonly bool? DeleteLocalData;
        public readonly bool? Force;
        public readonly int? GracePeriod;
        public readonly bool? IgnoreDaemonSets;
        public readonly int? Timeout;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigUpgradeStrategyDrainInputResult(
            bool? deleteLocalData,
            bool? force,
            int? gracePeriod,
            bool? ignoreDaemonSets,
            int? timeout)
        {
            DeleteLocalData = deleteLocalData;
            Force = force;
            GracePeriod = gracePeriod;
            IgnoreDaemonSets = ignoreDaemonSets;
            Timeout = timeout;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigUpgradeStrategyResult
    {
        public readonly bool? Drain;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigUpgradeStrategyDrainInputResult DrainInput;
        public readonly string? MaxUnavailableControlplane;
        public readonly string? MaxUnavailableWorker;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigUpgradeStrategyResult(
            bool? drain,
            GetClusterTemplateTemplateRevisionsClusterConfigRkeConfigUpgradeStrategyDrainInputResult drainInput,
            string? maxUnavailableControlplane,
            string? maxUnavailableWorker)
        {
            Drain = drain;
            DrainInput = drainInput;
            MaxUnavailableControlplane = maxUnavailableControlplane;
            MaxUnavailableWorker = maxUnavailableWorker;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanResult
    {
        public readonly bool? Enabled;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScanConfigResult ScanConfig;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScheduleConfigResult ScheduleConfig;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanResult(
            bool? enabled,
            GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScanConfigResult scanConfig,
            GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScheduleConfigResult scheduleConfig)
        {
            Enabled = enabled;
            ScanConfig = scanConfig;
            ScheduleConfig = scheduleConfig;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScanConfigCisScanConfigResult
    {
        public readonly bool? DebugMaster;
        public readonly bool? DebugWorker;
        public readonly string? OverrideBenchmarkVersion;
        public readonly ImmutableArray<string> OverrideSkips;
        public readonly string? Profile;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScanConfigCisScanConfigResult(
            bool? debugMaster,
            bool? debugWorker,
            string? overrideBenchmarkVersion,
            ImmutableArray<string> overrideSkips,
            string? profile)
        {
            DebugMaster = debugMaster;
            DebugWorker = debugWorker;
            OverrideBenchmarkVersion = overrideBenchmarkVersion;
            OverrideSkips = overrideSkips;
            Profile = profile;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScanConfigResult
    {
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScanConfigCisScanConfigResult CisScanConfig;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScanConfigResult(GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScanConfigCisScanConfigResult cisScanConfig)
        {
            CisScanConfig = cisScanConfig;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScheduleConfigResult
    {
        public readonly string CronSchedule;
        public readonly int Retention;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsClusterConfigScheduledClusterScanScheduleConfigResult(
            string cronSchedule,
            int retention)
        {
            CronSchedule = cronSchedule;
            Retention = retention;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsQuestionsResult
    {
        public readonly string Default;
        public readonly bool? Required;
        public readonly string? Type;
        public readonly string Variable;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsQuestionsResult(
            string @default,
            bool? required,
            string? type,
            string variable)
        {
            Default = @default;
            Required = required;
            Type = type;
            Variable = variable;
        }
    }

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionsResult
    {
        /// <summary>
        /// (Computed) Annotations for the cluster template (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        public readonly GetClusterTemplateTemplateRevisionsClusterConfigResult ClusterConfig;
        public readonly string ClusterTemplateId;
        public readonly bool? Default;
        public readonly bool? Enabled;
        /// <summary>
        /// (Computed) The ID of the resource (string)
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Computed) Labels for the cluster template (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        /// <summary>
        /// The cluster template name (string)
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<GetClusterTemplateTemplateRevisionsQuestionsResult> Questions;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionsResult(
            ImmutableDictionary<string, object> annotations,
            GetClusterTemplateTemplateRevisionsClusterConfigResult clusterConfig,
            string clusterTemplateId,
            bool? @default,
            bool? enabled,
            string id,
            ImmutableDictionary<string, object> labels,
            string name,
            ImmutableArray<GetClusterTemplateTemplateRevisionsQuestionsResult> questions)
        {
            Annotations = annotations;
            ClusterConfig = clusterConfig;
            ClusterTemplateId = clusterTemplateId;
            Default = @default;
            Enabled = enabled;
            Id = id;
            Labels = labels;
            Name = name;
            Questions = questions;
        }
    }
    }
}
