// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public partial class Bootstrap : Pulumi.CustomResource
    {
        /// <summary>
        /// Current password for Admin user. Just needed for recover if admin password has been changed from other resources and token is expired (string)
        /// </summary>
        [Output("currentPassword")]
        public Output<string> CurrentPassword { get; private set; } = null!;

        /// <summary>
        /// Password for Admin user or random generated if empty (string)
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Send telemetry anonymous data. Default: `false` (bool)
        /// </summary>
        [Output("telemetry")]
        public Output<bool?> Telemetry { get; private set; } = null!;

        /// <summary>
        /// (Computed) Generated API temporary token as helper. Should be empty (string)
        /// </summary>
        [Output("tempToken")]
        public Output<string> TempToken { get; private set; } = null!;

        /// <summary>
        /// (Computed) Generated API temporary token id as helper. Should be empty (string)
        /// </summary>
        [Output("tempTokenId")]
        public Output<string> TempTokenId { get; private set; } = null!;

        /// <summary>
        /// (Computed) Generated API token for Admin User (string)
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// (Computed) Generated API token id for Admin User (string)
        /// </summary>
        [Output("tokenId")]
        public Output<string> TokenId { get; private set; } = null!;

        /// <summary>
        /// TTL in seconds for generated admin token. Default: `0`  (int)
        /// </summary>
        [Output("tokenTtl")]
        public Output<int?> TokenTtl { get; private set; } = null!;

        /// <summary>
        /// Regenerate admin token. Default: `false` (bool)
        /// </summary>
        [Output("tokenUpdate")]
        public Output<bool?> TokenUpdate { get; private set; } = null!;

        /// <summary>
        /// (Computed) URL set as server-url (string)
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// (Computed) Admin username (string)
        /// </summary>
        [Output("user")]
        public Output<string> User { get; private set; } = null!;


        /// <summary>
        /// Create a Bootstrap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Bootstrap(string name, BootstrapArgs? args = null, CustomResourceOptions? options = null)
            : base("rancher2:index/bootstrap:Bootstrap", name, args ?? new BootstrapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Bootstrap(string name, Input<string> id, BootstrapState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/bootstrap:Bootstrap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Bootstrap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Bootstrap Get(string name, Input<string> id, BootstrapState? state = null, CustomResourceOptions? options = null)
        {
            return new Bootstrap(name, id, state, options);
        }
    }

    public sealed class BootstrapArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Current password for Admin user. Just needed for recover if admin password has been changed from other resources and token is expired (string)
        /// </summary>
        [Input("currentPassword")]
        public Input<string>? CurrentPassword { get; set; }

        /// <summary>
        /// Password for Admin user or random generated if empty (string)
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Send telemetry anonymous data. Default: `false` (bool)
        /// </summary>
        [Input("telemetry")]
        public Input<bool>? Telemetry { get; set; }

        /// <summary>
        /// TTL in seconds for generated admin token. Default: `0`  (int)
        /// </summary>
        [Input("tokenTtl")]
        public Input<int>? TokenTtl { get; set; }

        /// <summary>
        /// Regenerate admin token. Default: `false` (bool)
        /// </summary>
        [Input("tokenUpdate")]
        public Input<bool>? TokenUpdate { get; set; }

        public BootstrapArgs()
        {
        }
    }

    public sealed class BootstrapState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Current password for Admin user. Just needed for recover if admin password has been changed from other resources and token is expired (string)
        /// </summary>
        [Input("currentPassword")]
        public Input<string>? CurrentPassword { get; set; }

        /// <summary>
        /// Password for Admin user or random generated if empty (string)
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Send telemetry anonymous data. Default: `false` (bool)
        /// </summary>
        [Input("telemetry")]
        public Input<bool>? Telemetry { get; set; }

        /// <summary>
        /// (Computed) Generated API temporary token as helper. Should be empty (string)
        /// </summary>
        [Input("tempToken")]
        public Input<string>? TempToken { get; set; }

        /// <summary>
        /// (Computed) Generated API temporary token id as helper. Should be empty (string)
        /// </summary>
        [Input("tempTokenId")]
        public Input<string>? TempTokenId { get; set; }

        /// <summary>
        /// (Computed) Generated API token for Admin User (string)
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// (Computed) Generated API token id for Admin User (string)
        /// </summary>
        [Input("tokenId")]
        public Input<string>? TokenId { get; set; }

        /// <summary>
        /// TTL in seconds for generated admin token. Default: `0`  (int)
        /// </summary>
        [Input("tokenTtl")]
        public Input<int>? TokenTtl { get; set; }

        /// <summary>
        /// Regenerate admin token. Default: `false` (bool)
        /// </summary>
        [Input("tokenUpdate")]
        public Input<bool>? TokenUpdate { get; set; }

        /// <summary>
        /// (Computed) URL set as server-url (string)
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// (Computed) Admin username (string)
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public BootstrapState()
        {
        }
    }
}
