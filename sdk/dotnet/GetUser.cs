// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 user
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/d/user.html.markdown.
        /// </summary>
        [Obsolete("Use GetUser.InvokeAsync() instead")]
        public static Task<GetUserResult> GetUser(GetUserArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("rancher2:index/getUser:getUser", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetUser
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 user
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/d/user.html.markdown.
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("rancher2:index/getUser:getUser", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetUserArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Set is the user if the user is external. Default: `false` (bool)
        /// </summary>
        [Input("isExternal")]
        public bool? IsExternal { get; set; }

        /// <summary>
        /// The name of the user (string)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The username of the user (string)
        /// </summary>
        [Input("username")]
        public string? Username { get; set; }

        public GetUserArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// (Computed) Annotations of the resource (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) The user is enabled (bool)
        /// </summary>
        public readonly bool Enabled;
        public readonly bool? IsExternal;
        /// <summary>
        /// (Computed) Labels of the resource (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        /// <summary>
        /// (Computed) The user common name (string)
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Computed) The user principal IDs (list)
        /// </summary>
        public readonly ImmutableArray<string> PrincipalIds;
        public readonly string Username;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetUserResult(
            ImmutableDictionary<string, object> annotations,
            bool enabled,
            bool? isExternal,
            ImmutableDictionary<string, object> labels,
            string name,
            ImmutableArray<string> principalIds,
            string username,
            string id)
        {
            Annotations = annotations;
            Enabled = enabled;
            IsExternal = isExternal;
            Labels = labels;
            Name = name;
            PrincipalIds = principalIds;
            Username = username;
            Id = id;
        }
    }
}
