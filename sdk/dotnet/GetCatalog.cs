// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetCatalog
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 catalog.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Rancher2 = Pulumi.Rancher2;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var library = Rancher2.GetCatalog.Invoke(new()
        ///     {
        ///         Name = "catalog",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetCatalogResult> InvokeAsync(GetCatalogArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCatalogResult>("rancher2:index/getCatalog:getCatalog", args ?? new GetCatalogArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 catalog.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Rancher2 = Pulumi.Rancher2;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var library = Rancher2.GetCatalog.Invoke(new()
        ///     {
        ///         Name = "catalog",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetCatalogResult> Invoke(GetCatalogInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCatalogResult>("rancher2:index/getCatalog:getCatalog", args ?? new GetCatalogInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCatalogArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The catalog name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        public GetCatalogArgs()
        {
        }
        public static new GetCatalogArgs Empty => new GetCatalogArgs();
    }

    public sealed class GetCatalogInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The catalog name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The scope of the catalog. `cluster`, `global`, and `project` are supported. Default `global` (string)
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GetCatalogInvokeArgs()
        {
        }
        public static new GetCatalogInvokeArgs Empty => new GetCatalogInvokeArgs();
    }


    [OutputType]
    public sealed class GetCatalogResult
    {
        /// <summary>
        /// (Computed) Annotations for the catalog (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) The branch of the catalog repo to use (string)
        /// </summary>
        public readonly string Branch;
        /// <summary>
        /// (Computed) The cluster id of the catalog (string)
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// (Computed) A catalog description (string)
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Computed) The kind of the catalog. Just helm by the moment (string)
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// (Computed) Labels for the catalog (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;
        /// <summary>
        /// (Computed/Sensitive) The password to access the catalog if needed (string)
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// (Computed) The project id of the catalog (string)
        /// </summary>
        public readonly string ProjectId;
        public readonly string? Scope;
        /// <summary>
        /// (Computed) The url of the catalog repo (string)
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// (Computed/Sensitive) The username to access the catalog if needed (string)
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// (Computed) Helm version for the catalog (string)
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetCatalogResult(
            ImmutableDictionary<string, object> annotations,

            string branch,

            string clusterId,

            string description,

            string id,

            string kind,

            ImmutableDictionary<string, object> labels,

            string name,

            string password,

            string projectId,

            string? scope,

            string url,

            string username,

            string version)
        {
            Annotations = annotations;
            Branch = branch;
            ClusterId = clusterId;
            Description = description;
            Id = id;
            Kind = kind;
            Labels = labels;
            Name = name;
            Password = password;
            ProjectId = projectId;
            Scope = scope;
            Url = url;
            Username = username;
            Version = version;
        }
    }
}
