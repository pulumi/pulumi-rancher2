// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Rancher2
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("rancher2");

        private static readonly __Value<string?> _accessKey = new __Value<string?>(() => __config.Get("accessKey"));
        /// <summary>
        /// API Key used to authenticate with the rancher server
        /// </summary>
        public static string? AccessKey
        {
            get => _accessKey.Get();
            set => _accessKey.Set(value);
        }

        private static readonly __Value<string?> _apiUrl = new __Value<string?>(() => __config.Get("apiUrl"));
        /// <summary>
        /// The URL to the rancher API
        /// </summary>
        public static string? ApiUrl
        {
            get => _apiUrl.Get();
            set => _apiUrl.Set(value);
        }

        private static readonly __Value<bool?> _bootstrap = new __Value<bool?>(() => __config.GetBoolean("bootstrap") ?? Utilities.GetEnvBoolean("RANCHER_BOOTSTRAP") ?? false);
        /// <summary>
        /// Bootstrap rancher server
        /// </summary>
        public static bool? Bootstrap
        {
            get => _bootstrap.Get();
            set => _bootstrap.Set(value);
        }

        private static readonly __Value<string?> _caCerts = new __Value<string?>(() => __config.Get("caCerts"));
        /// <summary>
        /// CA certificates used to sign rancher server tls certificates. Mandatory if self signed tls and insecure option false
        /// </summary>
        public static string? CaCerts
        {
            get => _caCerts.Get();
            set => _caCerts.Set(value);
        }

        private static readonly __Value<bool?> _insecure = new __Value<bool?>(() => __config.GetBoolean("insecure") ?? Utilities.GetEnvBoolean("RANCHER_INSECURE") ?? false);
        /// <summary>
        /// Allow insecure connections to Rancher. Mandatory if self signed tls and not ca_certs provided
        /// </summary>
        public static bool? Insecure
        {
            get => _insecure.Get();
            set => _insecure.Set(value);
        }

        private static readonly __Value<int?> _retries = new __Value<int?>(() => __config.GetInt32("retries"));
        /// <summary>
        /// Rancher connection retries
        /// </summary>
        public static int? Retries
        {
            get => _retries.Get();
            set => _retries.Set(value);
        }

        private static readonly __Value<string?> _secretKey = new __Value<string?>(() => __config.Get("secretKey"));
        /// <summary>
        /// API secret used to authenticate with the rancher server
        /// </summary>
        public static string? SecretKey
        {
            get => _secretKey.Get();
            set => _secretKey.Set(value);
        }

        private static readonly __Value<string?> _timeout = new __Value<string?>(() => __config.Get("timeout"));
        /// <summary>
        /// Rancher connection timeout (retry every 5s). Golang duration format, ex: "60s"
        /// </summary>
        public static string? Timeout
        {
            get => _timeout.Get();
            set => _timeout.Set(value);
        }

        private static readonly __Value<string?> _tokenKey = new __Value<string?>(() => __config.Get("tokenKey"));
        /// <summary>
        /// API token used to authenticate with the rancher server
        /// </summary>
        public static string? TokenKey
        {
            get => _tokenKey.Get();
            set => _tokenKey.Set(value);
        }

    }
}
