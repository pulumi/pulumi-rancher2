// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetCatalogV2
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher2 catalog v2. Catalog v2 resource is available at Rancher v2.5.x and above.
        /// </summary>
        public static Task<GetCatalogV2Result> InvokeAsync(GetCatalogV2Args args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCatalogV2Result>("rancher2:index/getCatalogV2:getCatalogV2", args ?? new GetCatalogV2Args(), options.WithVersion());
    }


    public sealed class GetCatalogV2Args : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cluster id of the catalog V2 (string)
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// The name of the catalog v2 (string)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetCatalogV2Args()
        {
        }
    }


    [OutputType]
    public sealed class GetCatalogV2Result
    {
        /// <summary>
        /// (Computed) Annotations for the catalog v2 (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) PEM encoded CA bundle which will be used to validate the repo's certificate (string)
        /// </summary>
        public readonly string CaBundle;
        public readonly string ClusterId;
        /// <summary>
        /// (Computed) If disabled the repo clone will not be updated or allowed to be installed from. Default: `true` (bool)
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// (Computed) Git Repository branch containing Helm chart definitions. Default `master` (string)
        /// </summary>
        public readonly string GitBranch;
        /// <summary>
        /// (Computed) The url of the catalog v2 repo (string)
        /// </summary>
        public readonly string GitRepo;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Computed) Use insecure HTTPS to download the repo's index. Default: `false` (bool)
        /// </summary>
        public readonly bool Insecure;
        /// <summary>
        /// (Computed) Labels for the catalog v2 (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;
        /// <summary>
        /// (Computed) The k8s resource version (string)
        /// </summary>
        public readonly string ResourceVersion;
        /// <summary>
        /// (Computed) K8s secret name to be used to connect to the repo (string)
        /// </summary>
        public readonly string SecretName;
        /// <summary>
        /// (Computed) K8s secret namespace (string)
        /// </summary>
        public readonly string SecretNamespace;
        /// <summary>
        /// (Computed) K8s service account used to deploy charts instead of the end users credentials (string)
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// (Computed) The username to access the catalog if needed (string)
        /// </summary>
        public readonly string ServiceAccountNamespace;
        /// <summary>
        /// (Computed) URL to an index generated by Helm (string)
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetCatalogV2Result(
            ImmutableDictionary<string, object> annotations,

            string caBundle,

            string clusterId,

            bool enabled,

            string gitBranch,

            string gitRepo,

            string id,

            bool insecure,

            ImmutableDictionary<string, object> labels,

            string name,

            string resourceVersion,

            string secretName,

            string secretNamespace,

            string serviceAccount,

            string serviceAccountNamespace,

            string url)
        {
            Annotations = annotations;
            CaBundle = caBundle;
            ClusterId = clusterId;
            Enabled = enabled;
            GitBranch = gitBranch;
            GitRepo = gitRepo;
            Id = id;
            Insecure = insecure;
            Labels = labels;
            Name = name;
            ResourceVersion = resourceVersion;
            SecretName = secretName;
            SecretNamespace = secretNamespace;
            ServiceAccount = serviceAccount;
            ServiceAccountNamespace = serviceAccountNamespace;
            Url = url;
        }
    }
}
