// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class GetClusterV2RkeConfigMachinePoolResult
    {
        /// <summary>
        /// Annotations of the resource
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) Cluster V2 cloud credential secret name (string)
        /// </summary>
        public readonly string? CloudCredentialSecretName;
        /// <summary>
        /// Machine pool control plane role
        /// </summary>
        public readonly bool? ControlPlaneRole;
        /// <summary>
        /// Machine pool drain before delete
        /// </summary>
        public readonly bool? DrainBeforeDelete;
        /// <summary>
        /// Machine pool etcd role
        /// </summary>
        public readonly bool? EtcdRole;
        /// <summary>
        /// maximum length for autogenerated hostname
        /// </summary>
        public readonly int? HostnameLengthLimit;
        /// <summary>
        /// Labels of the resource
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        /// <summary>
        /// Machine config data
        /// </summary>
        public readonly Outputs.GetClusterV2RkeConfigMachinePoolMachineConfigResult MachineConfig;
        /// <summary>
        /// Labels of the machine
        /// </summary>
        public readonly ImmutableDictionary<string, object> MachineLabels;
        /// <summary>
        /// max unhealthy nodes for automated replacement to be allowed
        /// </summary>
        public readonly string? MaxUnhealthy;
        /// <summary>
        /// The name of the Cluster v2 (string)
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// seconds to wait for machine pool drain to complete before machine deletion
        /// </summary>
        public readonly int? NodeDrainTimeout;
        /// <summary>
        /// seconds a new node has to become active before it is replaced
        /// </summary>
        public readonly int? NodeStartupTimeoutSeconds;
        /// <summary>
        /// Machine pool paused
        /// </summary>
        public readonly bool? Paused;
        /// <summary>
        /// Machine pool quantity
        /// </summary>
        public readonly int? Quantity;
        /// <summary>
        /// Machine pool rolling update
        /// </summary>
        public readonly Outputs.GetClusterV2RkeConfigMachinePoolRollingUpdateResult? RollingUpdate;
        /// <summary>
        /// Machine pool taints
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterV2RkeConfigMachinePoolTaintResult> Taints;
        /// <summary>
        /// seconds an unhealthy node has to become active before it is replaced
        /// </summary>
        public readonly int? UnhealthyNodeTimeoutSeconds;
        /// <summary>
        /// range of unhealthy nodes for automated replacement to be allowed
        /// </summary>
        public readonly string? UnhealthyRange;
        /// <summary>
        /// Machine pool worker role
        /// </summary>
        public readonly bool? WorkerRole;

        [OutputConstructor]
        private GetClusterV2RkeConfigMachinePoolResult(
            ImmutableDictionary<string, object> annotations,

            string? cloudCredentialSecretName,

            bool? controlPlaneRole,

            bool? drainBeforeDelete,

            bool? etcdRole,

            int? hostnameLengthLimit,

            ImmutableDictionary<string, object> labels,

            Outputs.GetClusterV2RkeConfigMachinePoolMachineConfigResult machineConfig,

            ImmutableDictionary<string, object> machineLabels,

            string? maxUnhealthy,

            string name,

            int? nodeDrainTimeout,

            int? nodeStartupTimeoutSeconds,

            bool? paused,

            int? quantity,

            Outputs.GetClusterV2RkeConfigMachinePoolRollingUpdateResult? rollingUpdate,

            ImmutableArray<Outputs.GetClusterV2RkeConfigMachinePoolTaintResult> taints,

            int? unhealthyNodeTimeoutSeconds,

            string? unhealthyRange,

            bool? workerRole)
        {
            Annotations = annotations;
            CloudCredentialSecretName = cloudCredentialSecretName;
            ControlPlaneRole = controlPlaneRole;
            DrainBeforeDelete = drainBeforeDelete;
            EtcdRole = etcdRole;
            HostnameLengthLimit = hostnameLengthLimit;
            Labels = labels;
            MachineConfig = machineConfig;
            MachineLabels = machineLabels;
            MaxUnhealthy = maxUnhealthy;
            Name = name;
            NodeDrainTimeout = nodeDrainTimeout;
            NodeStartupTimeoutSeconds = nodeStartupTimeoutSeconds;
            Paused = paused;
            Quantity = quantity;
            RollingUpdate = rollingUpdate;
            Taints = taints;
            UnhealthyNodeTimeoutSeconds = unhealthyNodeTimeoutSeconds;
            UnhealthyRange = unhealthyRange;
            WorkerRole = workerRole;
        }
    }
}
