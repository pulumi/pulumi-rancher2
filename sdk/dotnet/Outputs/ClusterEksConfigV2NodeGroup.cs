// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class ClusterEksConfigV2NodeGroup
    {
        /// <summary>
        /// The EKS node group desired size. Default: `2` (int)
        /// </summary>
        public readonly int? DesiredSize;
        /// <summary>
        /// The EKS node group disk size (Gb). Default: `20` (int)
        /// </summary>
        public readonly int? DiskSize;
        /// <summary>
        /// The EKS node group ssh key (string)
        /// </summary>
        public readonly string? Ec2SshKey;
        /// <summary>
        /// Set true to EKS use gpu. Default: `false` (bool)
        /// </summary>
        public readonly bool? Gpu;
        /// <summary>
        /// The EKS node group image ID (string)
        /// </summary>
        public readonly string? ImageId;
        /// <summary>
        /// The type of machine to use for worker nodes. Default `t2.medium` (string)
        /// </summary>
        public readonly string? InstanceType;
        /// <summary>
        /// Labels for the Cluster (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Labels;
        /// <summary>
        /// The EKS node groups launch template (list Maxitem: 1)
        /// </summary>
        public readonly ImmutableArray<Outputs.ClusterEksConfigV2NodeGroupLaunchTemplate> LaunchTemplates;
        /// <summary>
        /// Audit log max size. Default: `100` (int)
        /// </summary>
        public readonly int? MaxSize;
        /// <summary>
        /// The EKS node group maximum size. Default `2` (int)
        /// </summary>
        public readonly int? MinSize;
        /// <summary>
        /// The name of the Cluster (string)
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The EKS node group node role ARN. Default `""` (string)
        /// </summary>
        public readonly string? NodeRole;
        /// <summary>
        /// Enable EKS node group request spot instances (bool)
        /// </summary>
        public readonly bool? RequestSpotInstances;
        /// <summary>
        /// The EKS node group resource tags (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? ResourceTags;
        /// <summary>
        /// The EKS node group sport instace types (list string)
        /// </summary>
        public readonly ImmutableArray<string> SpotInstanceTypes;
        /// <summary>
        /// List of subnets in the virtual network to use. If it's not specified Rancher will create 3 news subnets (list)
        /// </summary>
        public readonly ImmutableArray<string> Subnets;
        /// <summary>
        /// Tags for Kubernetes cluster. For example, `["foo=bar","bar=foo"]` (list)
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Tags;
        /// <summary>
        /// Pass user-data to the nodes to perform automated configuration tasks (string)
        /// </summary>
        public readonly string? UserData;
        /// <summary>
        /// RKE2 kubernetes version (string)
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private ClusterEksConfigV2NodeGroup(
            int? desiredSize,

            int? diskSize,

            string? ec2SshKey,

            bool? gpu,

            string? imageId,

            string? instanceType,

            ImmutableDictionary<string, object>? labels,

            ImmutableArray<Outputs.ClusterEksConfigV2NodeGroupLaunchTemplate> launchTemplates,

            int? maxSize,

            int? minSize,

            string name,

            string? nodeRole,

            bool? requestSpotInstances,

            ImmutableDictionary<string, object>? resourceTags,

            ImmutableArray<string> spotInstanceTypes,

            ImmutableArray<string> subnets,

            ImmutableDictionary<string, object>? tags,

            string? userData,

            string? version)
        {
            DesiredSize = desiredSize;
            DiskSize = diskSize;
            Ec2SshKey = ec2SshKey;
            Gpu = gpu;
            ImageId = imageId;
            InstanceType = instanceType;
            Labels = labels;
            LaunchTemplates = launchTemplates;
            MaxSize = maxSize;
            MinSize = minSize;
            Name = name;
            NodeRole = nodeRole;
            RequestSpotInstances = requestSpotInstances;
            ResourceTags = resourceTags;
            SpotInstanceTypes = spotInstanceTypes;
            Subnets = subnets;
            Tags = tags;
            UserData = userData;
            Version = version;
        }
    }
}
