// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class ClusterOkeConfig
    {
        /// <summary>
        /// The OCID of the compartment in which to create resources OKE cluster and related resources (string)
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// Optional custom boot volume size (GB) for all nodes. If you specify 0, it will apply the default according to the `node_image` specified. Default `0` (int)
        /// </summary>
        public readonly int? CustomBootVolumeSize;
        /// <summary>
        /// An optional description of this cluster (string)
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Specifies whether to enable the Kubernetes dashboard. Default `false` (bool)
        /// </summary>
        public readonly bool? EnableKubernetesDashboard;
        /// <summary>
        /// Specifies whether Kubernetes API endpoint is a private IP only accessible from within the VCN. Default `false` Just for Rancher v2.5.10 or above (bool)
        /// </summary>
        public readonly bool? EnablePrivateControlPlane;
        /// <summary>
        /// Specifies whether worker nodes will be deployed into a new, private, subnet. Default `false` (bool)
        /// </summary>
        public readonly bool? EnablePrivateNodes;
        /// <summary>
        /// The fingerprint corresponding to the specified user's private API Key (string)
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// Specifies number of OCPUs for nodes (requires flexible shape specified with `node_shape`) (int)
        /// </summary>
        public readonly int? FlexOcpus;
        /// <summary>
        /// The OCID of a KMS vault master key used to encrypt secrets at rest. See [here](https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengencryptingdata.htm) for help creating a vault and master encryption key. Just for Rancher v2.5.9 or above (string)
        /// </summary>
        public readonly string? KmsKeyId;
        /// <summary>
        /// The Kubernetes version that will be used for your master *and* OKE worker nodes (string)
        /// </summary>
        public readonly string KubernetesVersion;
        /// <summary>
        /// The maximum number of worker nodes. Can limit `quantity_per_subnet`. Default `0` (no limit) (int)
        /// </summary>
        public readonly int? LimitNodeCount;
        /// <summary>
        /// The name of the first existing subnet to use for Kubernetes services / LB. `vcn_name` is also required when specifying an existing subnet. (string)
        /// </summary>
        public readonly string? LoadBalancerSubnetName1;
        /// <summary>
        /// The name of a second existing subnet to use for Kubernetes services / LB. A second subnet is only required when it is AD-specific (non-regional) (string)
        /// </summary>
        public readonly string? LoadBalancerSubnetName2;
        /// <summary>
        /// The Oracle Linux OS image name to use for the OKE node(s). See [here](https://docs.cloud.oracle.com/en-us/iaas/images/) for a list of images. (string)
        /// </summary>
        public readonly string NodeImage;
        /// <summary>
        /// Name for DNS domain of node pool subnet. Default `nodedns` (string)
        /// </summary>
        public readonly string? NodePoolDnsDomainName;
        /// <summary>
        /// Name for node pool subnet. Default `nodedns` (string)
        /// </summary>
        public readonly string? NodePoolSubnetName;
        /// <summary>
        /// The contents of the SSH public key file to use for the nodes (string)
        /// </summary>
        public readonly string? NodePublicKeyContents;
        /// <summary>
        /// The shape of the node (determines number of CPUs and  amount of memory on each OKE node) (string)
        /// </summary>
        public readonly string NodeShape;
        /// <summary>
        /// A CIDR IP range from which to assign Kubernetes Pod IPs (string)
        /// </summary>
        public readonly string? PodCidr;
        /// <summary>
        /// The private API key file contents for the specified user, in PEM format (string)
        /// </summary>
        public readonly string PrivateKeyContents;
        /// <summary>
        /// The passphrase (if any) of the private key for the OKE cluster (string)
        /// </summary>
        public readonly string? PrivateKeyPassphrase;
        /// <summary>
        /// Number of node subnets. Default `1` (int)
        /// </summary>
        public readonly int? QuantityOfNodeSubnets;
        /// <summary>
        /// Number of OKE worker nodes in each subnet / availability domain. Default `1` (int)
        /// </summary>
        public readonly int? QuantityPerSubnet;
        /// <summary>
        /// The availability domain within the region to host the cluster. See [here](https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm) for a list of region names. (string)
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// A CIDR IP range from which to assign Kubernetes Service IPs (string)
        /// </summary>
        public readonly string? ServiceCidr;
        /// <summary>
        /// Name for DNS domain of service subnet. Default `svcdns` (string)
        /// </summary>
        public readonly string? ServiceDnsDomainName;
        /// <summary>
        /// Specifies whether to skip deleting the virtual cloud network (VCN) on destroy. Default `false` (bool)
        /// </summary>
        public readonly bool? SkipVcnDelete;
        /// <summary>
        /// The OCID of the tenancy in which to create resources (string)
        /// </summary>
        public readonly string TenancyId;
        /// <summary>
        /// The OCID of a user who has access to the tenancy/compartment (string)
        /// </summary>
        public readonly string UserOcid;
        /// <summary>
        /// The OCID of the compartment (if different from `compartment_id`) in which to find the pre-existing virtual network set with `vcn_name`. (string)
        /// </summary>
        public readonly string? VcnCompartmentId;
        /// <summary>
        /// The name of an existing virtual network to use for the cluster creation. If set, you must also set `load_balancer_subnet_name_1`. A VCN and subnets will be created if none are specified. (string)
        /// </summary>
        public readonly string? VcnName;
        /// <summary>
        /// Additional CIDR from which to allow ingress to worker nodes (string)
        /// </summary>
        public readonly string? WorkerNodeIngressCidr;

        [OutputConstructor]
        private ClusterOkeConfig(
            string compartmentId,

            int? customBootVolumeSize,

            string? description,

            bool? enableKubernetesDashboard,

            bool? enablePrivateControlPlane,

            bool? enablePrivateNodes,

            string fingerprint,

            int? flexOcpus,

            string? kmsKeyId,

            string kubernetesVersion,

            int? limitNodeCount,

            string? loadBalancerSubnetName1,

            string? loadBalancerSubnetName2,

            string nodeImage,

            string? nodePoolDnsDomainName,

            string? nodePoolSubnetName,

            string? nodePublicKeyContents,

            string nodeShape,

            string? podCidr,

            string privateKeyContents,

            string? privateKeyPassphrase,

            int? quantityOfNodeSubnets,

            int? quantityPerSubnet,

            string region,

            string? serviceCidr,

            string? serviceDnsDomainName,

            bool? skipVcnDelete,

            string tenancyId,

            string userOcid,

            string? vcnCompartmentId,

            string? vcnName,

            string? workerNodeIngressCidr)
        {
            CompartmentId = compartmentId;
            CustomBootVolumeSize = customBootVolumeSize;
            Description = description;
            EnableKubernetesDashboard = enableKubernetesDashboard;
            EnablePrivateControlPlane = enablePrivateControlPlane;
            EnablePrivateNodes = enablePrivateNodes;
            Fingerprint = fingerprint;
            FlexOcpus = flexOcpus;
            KmsKeyId = kmsKeyId;
            KubernetesVersion = kubernetesVersion;
            LimitNodeCount = limitNodeCount;
            LoadBalancerSubnetName1 = loadBalancerSubnetName1;
            LoadBalancerSubnetName2 = loadBalancerSubnetName2;
            NodeImage = nodeImage;
            NodePoolDnsDomainName = nodePoolDnsDomainName;
            NodePoolSubnetName = nodePoolSubnetName;
            NodePublicKeyContents = nodePublicKeyContents;
            NodeShape = nodeShape;
            PodCidr = podCidr;
            PrivateKeyContents = privateKeyContents;
            PrivateKeyPassphrase = privateKeyPassphrase;
            QuantityOfNodeSubnets = quantityOfNodeSubnets;
            QuantityPerSubnet = quantityPerSubnet;
            Region = region;
            ServiceCidr = serviceCidr;
            ServiceDnsDomainName = serviceDnsDomainName;
            SkipVcnDelete = skipVcnDelete;
            TenancyId = tenancyId;
            UserOcid = userOcid;
            VcnCompartmentId = vcnCompartmentId;
            VcnName = vcnName;
            WorkerNodeIngressCidr = workerNodeIngressCidr;
        }
    }
}
