// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class NodeTemplateHetznerConfig
    {
        /// <summary>
        /// Hetzner Cloud project API token
        /// </summary>
        public readonly string ApiToken;
        /// <summary>
        /// Hetzner Cloud server image
        /// </summary>
        public readonly string? Image;
        /// <summary>
        /// Comma-separated list of network IDs or names which should be attached to the server private network interface
        /// </summary>
        public readonly string? Networks;
        /// <summary>
        /// Map of the labels which will be assigned to the server
        /// </summary>
        public readonly ImmutableDictionary<string, object>? ServerLabels;
        /// <summary>
        /// Hetzner Cloud datacenter
        /// </summary>
        public readonly string? ServerLocation;
        /// <summary>
        /// Hetzner Cloud server type
        /// </summary>
        public readonly string? ServerType;
        /// <summary>
        /// Use private network
        /// </summary>
        public readonly bool? UsePrivateNetwork;
        /// <summary>
        /// Path to file with cloud-init user-data
        /// </summary>
        public readonly string? Userdata;
        /// <summary>
        /// Comma-separated list of volume IDs or names which should be attached to the server
        /// </summary>
        public readonly string? Volumes;

        [OutputConstructor]
        private NodeTemplateHetznerConfig(
            string apiToken,

            string? image,

            string? networks,

            ImmutableDictionary<string, object>? serverLabels,

            string? serverLocation,

            string? serverType,

            bool? usePrivateNetwork,

            string? userdata,

            string? volumes)
        {
            ApiToken = apiToken;
            Image = image;
            Networks = networks;
            ServerLabels = serverLabels;
            ServerLocation = serverLocation;
            ServerType = serverType;
            UsePrivateNetwork = usePrivateNetwork;
            Userdata = userdata;
            Volumes = volumes;
        }
    }
}
