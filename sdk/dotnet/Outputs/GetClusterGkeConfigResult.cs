// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class GetClusterGkeConfigResult
    {
        public readonly string ClusterIpv4Cidr;
        public readonly string Credential;
        /// <summary>
        /// (Computed) The description for Cluster (string)
        /// </summary>
        public readonly string? Description;
        public readonly int? DiskSizeGb;
        public readonly string DiskType;
        public readonly bool? EnableAlphaFeature;
        public readonly bool? EnableAutoRepair;
        public readonly bool? EnableAutoUpgrade;
        public readonly bool? EnableHorizontalPodAutoscaling;
        public readonly bool? EnableHttpLoadBalancing;
        public readonly bool? EnableKubernetesDashboard;
        public readonly bool? EnableLegacyAbac;
        public readonly bool? EnableMasterAuthorizedNetwork;
        public readonly bool? EnableNetworkPolicyConfig;
        public readonly bool? EnableNodepoolAutoscaling;
        public readonly bool? EnablePrivateEndpoint;
        public readonly bool? EnablePrivateNodes;
        public readonly bool? EnableStackdriverLogging;
        public readonly bool? EnableStackdriverMonitoring;
        public readonly string ImageType;
        public readonly string IpPolicyClusterIpv4CidrBlock;
        public readonly string IpPolicyClusterSecondaryRangeName;
        public readonly bool? IpPolicyCreateSubnetwork;
        public readonly string IpPolicyNodeIpv4CidrBlock;
        public readonly string IpPolicyServicesIpv4CidrBlock;
        public readonly string IpPolicyServicesSecondaryRangeName;
        public readonly string IpPolicySubnetworkName;
        public readonly bool? IssueClientCertificate;
        public readonly bool? KubernetesDashboard;
        /// <summary>
        /// (Computed) Labels for Node Pool object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly int? LocalSsdCount;
        public readonly ImmutableArray<string> Locations;
        public readonly string MachineType;
        public readonly string MaintenanceWindow;
        public readonly ImmutableArray<string> MasterAuthorizedNetworkCidrBlocks;
        public readonly string MasterIpv4CidrBlock;
        public readonly string MasterVersion;
        public readonly int? MaxNodeCount;
        public readonly int? MinNodeCount;
        public readonly string Network;
        public readonly int? NodeCount;
        public readonly string NodePool;
        public readonly string NodeVersion;
        public readonly ImmutableArray<string> OauthScopes;
        public readonly bool? Preemptible;
        public readonly string ProjectId;
        public readonly ImmutableDictionary<string, object> ResourceLabels;
        public readonly string ServiceAccount;
        public readonly string SubNetwork;
        public readonly ImmutableArray<string> Taints;
        public readonly bool? UseIpAliases;
        public readonly string? Zone;

        [OutputConstructor]
        private GetClusterGkeConfigResult(
            string clusterIpv4Cidr,

            string credential,

            string? description,

            int? diskSizeGb,

            string diskType,

            bool? enableAlphaFeature,

            bool? enableAutoRepair,

            bool? enableAutoUpgrade,

            bool? enableHorizontalPodAutoscaling,

            bool? enableHttpLoadBalancing,

            bool? enableKubernetesDashboard,

            bool? enableLegacyAbac,

            bool? enableMasterAuthorizedNetwork,

            bool? enableNetworkPolicyConfig,

            bool? enableNodepoolAutoscaling,

            bool? enablePrivateEndpoint,

            bool? enablePrivateNodes,

            bool? enableStackdriverLogging,

            bool? enableStackdriverMonitoring,

            string imageType,

            string ipPolicyClusterIpv4CidrBlock,

            string ipPolicyClusterSecondaryRangeName,

            bool? ipPolicyCreateSubnetwork,

            string ipPolicyNodeIpv4CidrBlock,

            string ipPolicyServicesIpv4CidrBlock,

            string ipPolicyServicesSecondaryRangeName,

            string ipPolicySubnetworkName,

            bool? issueClientCertificate,

            bool? kubernetesDashboard,

            ImmutableDictionary<string, object> labels,

            int? localSsdCount,

            ImmutableArray<string> locations,

            string machineType,

            string maintenanceWindow,

            ImmutableArray<string> masterAuthorizedNetworkCidrBlocks,

            string masterIpv4CidrBlock,

            string masterVersion,

            int? maxNodeCount,

            int? minNodeCount,

            string network,

            int? nodeCount,

            string nodePool,

            string nodeVersion,

            ImmutableArray<string> oauthScopes,

            bool? preemptible,

            string projectId,

            ImmutableDictionary<string, object> resourceLabels,

            string serviceAccount,

            string subNetwork,

            ImmutableArray<string> taints,

            bool? useIpAliases,

            string? zone)
        {
            ClusterIpv4Cidr = clusterIpv4Cidr;
            Credential = credential;
            Description = description;
            DiskSizeGb = diskSizeGb;
            DiskType = diskType;
            EnableAlphaFeature = enableAlphaFeature;
            EnableAutoRepair = enableAutoRepair;
            EnableAutoUpgrade = enableAutoUpgrade;
            EnableHorizontalPodAutoscaling = enableHorizontalPodAutoscaling;
            EnableHttpLoadBalancing = enableHttpLoadBalancing;
            EnableKubernetesDashboard = enableKubernetesDashboard;
            EnableLegacyAbac = enableLegacyAbac;
            EnableMasterAuthorizedNetwork = enableMasterAuthorizedNetwork;
            EnableNetworkPolicyConfig = enableNetworkPolicyConfig;
            EnableNodepoolAutoscaling = enableNodepoolAutoscaling;
            EnablePrivateEndpoint = enablePrivateEndpoint;
            EnablePrivateNodes = enablePrivateNodes;
            EnableStackdriverLogging = enableStackdriverLogging;
            EnableStackdriverMonitoring = enableStackdriverMonitoring;
            ImageType = imageType;
            IpPolicyClusterIpv4CidrBlock = ipPolicyClusterIpv4CidrBlock;
            IpPolicyClusterSecondaryRangeName = ipPolicyClusterSecondaryRangeName;
            IpPolicyCreateSubnetwork = ipPolicyCreateSubnetwork;
            IpPolicyNodeIpv4CidrBlock = ipPolicyNodeIpv4CidrBlock;
            IpPolicyServicesIpv4CidrBlock = ipPolicyServicesIpv4CidrBlock;
            IpPolicyServicesSecondaryRangeName = ipPolicyServicesSecondaryRangeName;
            IpPolicySubnetworkName = ipPolicySubnetworkName;
            IssueClientCertificate = issueClientCertificate;
            KubernetesDashboard = kubernetesDashboard;
            Labels = labels;
            LocalSsdCount = localSsdCount;
            Locations = locations;
            MachineType = machineType;
            MaintenanceWindow = maintenanceWindow;
            MasterAuthorizedNetworkCidrBlocks = masterAuthorizedNetworkCidrBlocks;
            MasterIpv4CidrBlock = masterIpv4CidrBlock;
            MasterVersion = masterVersion;
            MaxNodeCount = maxNodeCount;
            MinNodeCount = minNodeCount;
            Network = network;
            NodeCount = nodeCount;
            NodePool = nodePool;
            NodeVersion = nodeVersion;
            OauthScopes = oauthScopes;
            Preemptible = preemptible;
            ProjectId = projectId;
            ResourceLabels = resourceLabels;
            ServiceAccount = serviceAccount;
            SubNetwork = subNetwork;
            Taints = taints;
            UseIpAliases = useIpAliases;
            Zone = zone;
        }
    }
}
