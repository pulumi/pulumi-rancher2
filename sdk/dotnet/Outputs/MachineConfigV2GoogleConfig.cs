// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class MachineConfigV2GoogleConfig
    {
        /// <summary>
        /// GCE Instance External IP
        /// </summary>
        public readonly string? Address;
        /// <summary>
        /// GCE service account auth json file path
        /// </summary>
        public readonly string? AuthEncodedJson;
        /// <summary>
        /// GCE Instance Disk Size (in GB)
        /// </summary>
        public readonly string DiskSize;
        /// <summary>
        /// GCE Instance Disk Type
        /// </summary>
        public readonly string DiskType;
        /// <summary>
        /// A prefix to be added to firewall rules created when exposing ports publicly. Required if exposing ports publicly.
        /// </summary>
        public readonly string? ExternalFirewallRulePrefix;
        /// <summary>
        /// A prefix to be added to an internal firewall rule created to ensure virtual machines can communicate with one another.
        /// </summary>
        public readonly string? InternalFirewallRulePrefix;
        /// <summary>
        /// GCE instance image absolute URL
        /// </summary>
        public readonly string MachineImage;
        /// <summary>
        /// GCE instance type
        /// </summary>
        public readonly string MachineType;
        /// <summary>
        /// The network to provision virtual machines within
        /// </summary>
        public readonly string Network;
        /// <summary>
        /// A list of ports to be opened publicly. 'external_firewall_rule_prefix' must also be set
        /// </summary>
        public readonly ImmutableArray<string> OpenPorts;
        /// <summary>
        /// Indicates if the virtual machine can be preempted
        /// </summary>
        public readonly bool? Preemptable;
        /// <summary>
        /// The GCP project to create virtual machines within
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Access scopes to be set on the virtual machine
        /// </summary>
        public readonly string? Scopes;
        /// <summary>
        /// The subnetwork to provision virtual machines within
        /// </summary>
        public readonly string? SubNetwork;
        /// <summary>
        /// A set of network tags to be added to each VM, in the format of 'tag1,tag2'
        /// </summary>
        public readonly string? Tags;
        /// <summary>
        /// Indicates if an existing VM should be used. This is not currently support in Rancher.
        /// </summary>
        public readonly bool? UseExisting;
        /// <summary>
        /// Indicates if the virtual machines should use an internal IP
        /// </summary>
        public readonly bool? UseInternalIp;
        /// <summary>
        /// Indicates if the virtual machines should use an internal IP only and not be assigned a public IP
        /// </summary>
        public readonly bool? UseInternalIpOnly;
        /// <summary>
        /// GCE user-data file path
        /// </summary>
        public readonly string? UserData;
        /// <summary>
        /// The username to be set when logging into the virtual machines
        /// </summary>
        public readonly string? Username;
        /// <summary>
        /// A set of labels to be added to each VM, in the format of 'key1,value1,key2,value2'
        /// </summary>
        public readonly string? VmLabels;
        /// <summary>
        /// The region and zone to create virtual machines within (e.g. us-east1-b)
        /// </summary>
        public readonly string Zone;

        [OutputConstructor]
        private MachineConfigV2GoogleConfig(
            string? address,

            string? authEncodedJson,

            string diskSize,

            string diskType,

            string? externalFirewallRulePrefix,

            string? internalFirewallRulePrefix,

            string machineImage,

            string machineType,

            string network,

            ImmutableArray<string> openPorts,

            bool? preemptable,

            string project,

            string? scopes,

            string? subNetwork,

            string? tags,

            bool? useExisting,

            bool? useInternalIp,

            bool? useInternalIpOnly,

            string? userData,

            string? username,

            string? vmLabels,

            string zone)
        {
            Address = address;
            AuthEncodedJson = authEncodedJson;
            DiskSize = diskSize;
            DiskType = diskType;
            ExternalFirewallRulePrefix = externalFirewallRulePrefix;
            InternalFirewallRulePrefix = internalFirewallRulePrefix;
            MachineImage = machineImage;
            MachineType = machineType;
            Network = network;
            OpenPorts = openPorts;
            Preemptable = preemptable;
            Project = project;
            Scopes = scopes;
            SubNetwork = subNetwork;
            Tags = tags;
            UseExisting = useExisting;
            UseInternalIp = useInternalIp;
            UseInternalIpOnly = useInternalIpOnly;
            UserData = userData;
            Username = username;
            VmLabels = vmLabels;
            Zone = zone;
        }
    }
}
