// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class GetClusterAksConfigV2Result
    {
        public readonly string? AuthBaseUrl;
        public readonly ImmutableArray<string> AuthorizedIpRanges;
        public readonly string? BaseUrl;
        public readonly string CloudCredentialId;
        public readonly string DnsPrefix;
        public readonly bool HttpApplicationRouting;
        public readonly bool? Imported;
        public readonly string KubernetesVersion;
        public readonly string LinuxAdminUsername;
        public readonly string LinuxSshPublicKey;
        public readonly string LoadBalancerSku;
        public readonly string LogAnalyticsWorkspaceGroup;
        public readonly string LogAnalyticsWorkspaceName;
        public readonly bool Monitoring;
        /// <summary>
        /// The name of the Cluster (string)
        /// </summary>
        public readonly string Name;
        public readonly string NetworkDnsServiceIp;
        public readonly string NetworkDockerBridgeCidr;
        public readonly string NetworkPlugin;
        public readonly string NetworkPodCidr;
        public readonly string NetworkPolicy;
        public readonly string NetworkServiceCidr;
        public readonly ImmutableArray<Outputs.GetClusterAksConfigV2NodePoolResult> NodePools;
        public readonly bool PrivateCluster;
        public readonly string ResourceGroup;
        public readonly string ResourceLocation;
        public readonly string Subnet;
        public readonly ImmutableDictionary<string, object> Tags;
        public readonly string VirtualNetwork;
        public readonly string VirtualNetworkResourceGroup;

        [OutputConstructor]
        private GetClusterAksConfigV2Result(
            string? authBaseUrl,

            ImmutableArray<string> authorizedIpRanges,

            string? baseUrl,

            string cloudCredentialId,

            string dnsPrefix,

            bool httpApplicationRouting,

            bool? imported,

            string kubernetesVersion,

            string linuxAdminUsername,

            string linuxSshPublicKey,

            string loadBalancerSku,

            string logAnalyticsWorkspaceGroup,

            string logAnalyticsWorkspaceName,

            bool monitoring,

            string name,

            string networkDnsServiceIp,

            string networkDockerBridgeCidr,

            string networkPlugin,

            string networkPodCidr,

            string networkPolicy,

            string networkServiceCidr,

            ImmutableArray<Outputs.GetClusterAksConfigV2NodePoolResult> nodePools,

            bool privateCluster,

            string resourceGroup,

            string resourceLocation,

            string subnet,

            ImmutableDictionary<string, object> tags,

            string virtualNetwork,

            string virtualNetworkResourceGroup)
        {
            AuthBaseUrl = authBaseUrl;
            AuthorizedIpRanges = authorizedIpRanges;
            BaseUrl = baseUrl;
            CloudCredentialId = cloudCredentialId;
            DnsPrefix = dnsPrefix;
            HttpApplicationRouting = httpApplicationRouting;
            Imported = imported;
            KubernetesVersion = kubernetesVersion;
            LinuxAdminUsername = linuxAdminUsername;
            LinuxSshPublicKey = linuxSshPublicKey;
            LoadBalancerSku = loadBalancerSku;
            LogAnalyticsWorkspaceGroup = logAnalyticsWorkspaceGroup;
            LogAnalyticsWorkspaceName = logAnalyticsWorkspaceName;
            Monitoring = monitoring;
            Name = name;
            NetworkDnsServiceIp = networkDnsServiceIp;
            NetworkDockerBridgeCidr = networkDockerBridgeCidr;
            NetworkPlugin = networkPlugin;
            NetworkPodCidr = networkPodCidr;
            NetworkPolicy = networkPolicy;
            NetworkServiceCidr = networkServiceCidr;
            NodePools = nodePools;
            PrivateCluster = privateCluster;
            ResourceGroup = resourceGroup;
            ResourceLocation = resourceLocation;
            Subnet = subnet;
            Tags = tags;
            VirtualNetwork = virtualNetwork;
            VirtualNetworkResourceGroup = virtualNetworkResourceGroup;
        }
    }
}
