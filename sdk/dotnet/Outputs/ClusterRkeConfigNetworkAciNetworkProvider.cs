// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class ClusterRkeConfigNetworkAciNetworkProvider
    {
        /// <summary>
        /// Attachable entity profile (string)
        /// </summary>
        public readonly string Aep;
        /// <summary>
        /// List of APIC hosts to connect for APIC API (list)
        /// </summary>
        public readonly ImmutableArray<string> ApicHosts;
        /// <summary>
        /// APIC refresh ticker adjust amount (string)
        /// </summary>
        public readonly string? ApicRefreshTickerAdjust;
        /// <summary>
        /// APIC refresh time in seconds (string)
        /// </summary>
        public readonly string? ApicRefreshTime;
        /// <summary>
        /// APIC subscription delay amount (string)
        /// </summary>
        public readonly string? ApicSubscriptionDelay;
        /// <summary>
        /// APIC user certificate (string)
        /// </summary>
        public readonly string ApicUserCrt;
        /// <summary>
        /// APIC user key (string)
        /// </summary>
        public readonly string ApicUserKey;
        /// <summary>
        /// APIC user name (string)
        /// </summary>
        public readonly string ApicUserName;
        /// <summary>
        /// cAPIC cloud (string)
        /// </summary>
        public readonly string? Capic;
        /// <summary>
        /// Log level for ACI controller (string)
        /// </summary>
        public readonly string? ControllerLogLevel;
        /// <summary>
        /// Whether to disable periodic SNAT global info sync (string)
        /// </summary>
        public readonly string? DisablePeriodicSnatGlobalInfoSync;
        /// <summary>
        /// Whether to disable waiting for network (string)
        /// </summary>
        public readonly string? DisableWaitForNetwork;
        /// <summary>
        /// Whether to enable drop log (string)
        /// </summary>
        public readonly string? DropLogEnable;
        /// <summary>
        /// The duration to wait for network (string)
        /// </summary>
        public readonly string? DurationWaitForNetwork;
        /// <summary>
        /// Whether to enable endpoint slices (string)
        /// </summary>
        public readonly string? EnableEndpointSlice;
        /// <summary>
        /// Encap type: vxlan or vlan (string)
        /// </summary>
        public readonly string EncapType;
        /// <summary>
        /// EP registry (string)
        /// </summary>
        public readonly string? EpRegistry;
        /// <summary>
        /// Subnet to use for dynamic external IPs (string)
        /// </summary>
        public readonly string ExternDynamic;
        /// <summary>
        /// Subnet to use for static external IPs (string)
        /// </summary>
        public readonly string ExternStatic;
        /// <summary>
        /// GBH pod subnet (string)
        /// </summary>
        public readonly string? GbpPodSubnet;
        /// <summary>
        /// Log level for ACI host agent (string)
        /// </summary>
        public readonly string? HostAgentLogLevel;
        /// <summary>
        /// Image pull policy (string)
        /// </summary>
        public readonly string? ImagePullPolicy;
        /// <summary>
        /// Image pull policy (string)
        /// </summary>
        public readonly string? ImagePullSecret;
        /// <summary>
        /// The VLAN used by ACI infra (string)
        /// </summary>
        public readonly string? InfraVlan;
        /// <summary>
        /// Whether to install Istio (string)
        /// </summary>
        public readonly string? InstallIstio;
        /// <summary>
        /// Istio profile name (string)
        /// </summary>
        public readonly string? IstioProfile;
        /// <summary>
        /// List of Kafka broker hosts (list)
        /// </summary>
        public readonly ImmutableArray<string> KafkaBrokers;
        /// <summary>
        /// Kafka client certificate (string)
        /// </summary>
        public readonly string? KafkaClientCrt;
        /// <summary>
        /// Kafka client key (string)
        /// </summary>
        public readonly string? KafkaClientKey;
        /// <summary>
        /// The VLAN used by the physdom for nodes (string)
        /// </summary>
        public readonly string KubeApiVlan;
        /// <summary>
        /// L3out (string)
        /// </summary>
        public readonly string L3out;
        /// <summary>
        /// L3out external networks (list)
        /// </summary>
        public readonly ImmutableArray<string> L3outExternalNetworks;
        /// <summary>
        /// Max nodes in service graph (string)
        /// </summary>
        public readonly string? MaxNodesSvcGraph;
        /// <summary>
        /// End of mcast range (string)
        /// </summary>
        public readonly string McastRangeEnd;
        /// <summary>
        /// Start of mcast range (string)
        /// </summary>
        public readonly string McastRangeStart;
        /// <summary>
        /// MTU head room amount (string)
        /// </summary>
        public readonly string? MtuHeadRoom;
        /// <summary>
        /// Whether to disable Multus (string)
        /// </summary>
        public readonly string? MultusDisable;
        /// <summary>
        /// Whether to use priority class (string)
        /// </summary>
        public readonly string? NoPriorityClass;
        /// <summary>
        /// Whether to enable node pod interface (string)
        /// </summary>
        public readonly string? NodePodIfEnable;
        /// <summary>
        /// Subnet to use for nodes (string)
        /// </summary>
        public readonly string NodeSubnet;
        /// <summary>
        /// Subnet to use for service graph (string)
        /// </summary>
        public readonly string NodeSvcSubnet;
        /// <summary>
        /// Whether to use client SSL for Opflex (string)
        /// </summary>
        public readonly string? OpflexClientSsl;
        /// <summary>
        /// Opflex device delete timeout (string)
        /// </summary>
        public readonly string? OpflexDeviceDeleteTimeout;
        /// <summary>
        /// Log level for ACI opflex (string)
        /// </summary>
        public readonly string? OpflexLogLevel;
        /// <summary>
        /// Opflex mode (string)
        /// </summary>
        public readonly string? OpflexMode;
        /// <summary>
        /// Opflex server port (string)
        /// </summary>
        public readonly string? OpflexServerPort;
        /// <summary>
        /// Overlay VRF name (string)
        /// </summary>
        public readonly string? OverlayVrfName;
        /// <summary>
        /// OVS memory limit (string)
        /// </summary>
        public readonly string? OvsMemoryLimit;
        /// <summary>
        /// Policy-based routing tracking non snat (string)
        /// </summary>
        public readonly string? PbrTrackingNonSnat;
        /// <summary>
        /// Pod subnet chunk size (string)
        /// </summary>
        public readonly string? PodSubnetChunkSize;
        /// <summary>
        /// Whether to run GBP container (string)
        /// </summary>
        public readonly string? RunGbpContainer;
        /// <summary>
        /// Whether to run Opflex server container (string)
        /// </summary>
        public readonly string? RunOpflexServerContainer;
        /// <summary>
        /// Service monitor interval (string)
        /// </summary>
        public readonly string? ServiceMonitorInterval;
        /// <summary>
        /// The VLAN used by LoadBalancer services (string)
        /// </summary>
        public readonly string ServiceVlan;
        /// <summary>
        /// Snat contract scope (string)
        /// </summary>
        public readonly string? SnatContractScope;
        /// <summary>
        /// Snat namespace (string)
        /// </summary>
        public readonly string? SnatNamespace;
        /// <summary>
        /// End of snat port range (string)
        /// </summary>
        public readonly string? SnatPortRangeEnd;
        /// <summary>
        /// End of snat port range (string)
        /// </summary>
        public readonly string? SnatPortRangeStart;
        /// <summary>
        /// Snat ports per node (string)
        /// </summary>
        public readonly string? SnatPortsPerNode;
        /// <summary>
        /// Whether to enable SR-IOV (string)
        /// </summary>
        public readonly string? SriovEnable;
        /// <summary>
        /// Subnet domain name (string)
        /// </summary>
        public readonly string? SubnetDomainName;
        /// <summary>
        /// ACI system ID (string)
        /// </summary>
        public readonly string SystemId;
        /// <summary>
        /// ACI tenant (string)
        /// </summary>
        public readonly string? Tenant;
        public readonly string Token;
        /// <summary>
        /// Whether to use ACI anywhere CRD (string)
        /// </summary>
        public readonly string? UseAciAnywhereCrd;
        /// <summary>
        /// Whether to use ACI CNI priority class (string)
        /// </summary>
        public readonly string? UseAciCniPriorityClass;
        /// <summary>
        /// Whether to use cluster role (string)
        /// </summary>
        public readonly string? UseClusterRole;
        /// <summary>
        /// Whether to use host netns volume (string)
        /// </summary>
        public readonly string? UseHostNetnsVolume;
        /// <summary>
        /// Whether use Opflex server volume (string)
        /// </summary>
        public readonly string? UseOpflexServerVolume;
        /// <summary>
        /// Whether ACI containers should run as privileged (string)
        /// </summary>
        public readonly string? UsePrivilegedContainer;
        /// <summary>
        /// VMM controller configuration (string)
        /// </summary>
        public readonly string? VmmController;
        /// <summary>
        /// VMM domain configuration (string)
        /// </summary>
        public readonly string? VmmDomain;
        /// <summary>
        /// VRF name (string)
        /// </summary>
        public readonly string VrfName;
        /// <summary>
        /// VRF tenant (string)
        /// </summary>
        public readonly string VrfTenant;

        [OutputConstructor]
        private ClusterRkeConfigNetworkAciNetworkProvider(
            string aep,

            ImmutableArray<string> apicHosts,

            string? apicRefreshTickerAdjust,

            string? apicRefreshTime,

            string? apicSubscriptionDelay,

            string apicUserCrt,

            string apicUserKey,

            string apicUserName,

            string? capic,

            string? controllerLogLevel,

            string? disablePeriodicSnatGlobalInfoSync,

            string? disableWaitForNetwork,

            string? dropLogEnable,

            string? durationWaitForNetwork,

            string? enableEndpointSlice,

            string encapType,

            string? epRegistry,

            string externDynamic,

            string externStatic,

            string? gbpPodSubnet,

            string? hostAgentLogLevel,

            string? imagePullPolicy,

            string? imagePullSecret,

            string? infraVlan,

            string? installIstio,

            string? istioProfile,

            ImmutableArray<string> kafkaBrokers,

            string? kafkaClientCrt,

            string? kafkaClientKey,

            string kubeApiVlan,

            string l3out,

            ImmutableArray<string> l3outExternalNetworks,

            string? maxNodesSvcGraph,

            string mcastRangeEnd,

            string mcastRangeStart,

            string? mtuHeadRoom,

            string? multusDisable,

            string? noPriorityClass,

            string? nodePodIfEnable,

            string nodeSubnet,

            string nodeSvcSubnet,

            string? opflexClientSsl,

            string? opflexDeviceDeleteTimeout,

            string? opflexLogLevel,

            string? opflexMode,

            string? opflexServerPort,

            string? overlayVrfName,

            string? ovsMemoryLimit,

            string? pbrTrackingNonSnat,

            string? podSubnetChunkSize,

            string? runGbpContainer,

            string? runOpflexServerContainer,

            string? serviceMonitorInterval,

            string serviceVlan,

            string? snatContractScope,

            string? snatNamespace,

            string? snatPortRangeEnd,

            string? snatPortRangeStart,

            string? snatPortsPerNode,

            string? sriovEnable,

            string? subnetDomainName,

            string systemId,

            string? tenant,

            string token,

            string? useAciAnywhereCrd,

            string? useAciCniPriorityClass,

            string? useClusterRole,

            string? useHostNetnsVolume,

            string? useOpflexServerVolume,

            string? usePrivilegedContainer,

            string? vmmController,

            string? vmmDomain,

            string vrfName,

            string vrfTenant)
        {
            Aep = aep;
            ApicHosts = apicHosts;
            ApicRefreshTickerAdjust = apicRefreshTickerAdjust;
            ApicRefreshTime = apicRefreshTime;
            ApicSubscriptionDelay = apicSubscriptionDelay;
            ApicUserCrt = apicUserCrt;
            ApicUserKey = apicUserKey;
            ApicUserName = apicUserName;
            Capic = capic;
            ControllerLogLevel = controllerLogLevel;
            DisablePeriodicSnatGlobalInfoSync = disablePeriodicSnatGlobalInfoSync;
            DisableWaitForNetwork = disableWaitForNetwork;
            DropLogEnable = dropLogEnable;
            DurationWaitForNetwork = durationWaitForNetwork;
            EnableEndpointSlice = enableEndpointSlice;
            EncapType = encapType;
            EpRegistry = epRegistry;
            ExternDynamic = externDynamic;
            ExternStatic = externStatic;
            GbpPodSubnet = gbpPodSubnet;
            HostAgentLogLevel = hostAgentLogLevel;
            ImagePullPolicy = imagePullPolicy;
            ImagePullSecret = imagePullSecret;
            InfraVlan = infraVlan;
            InstallIstio = installIstio;
            IstioProfile = istioProfile;
            KafkaBrokers = kafkaBrokers;
            KafkaClientCrt = kafkaClientCrt;
            KafkaClientKey = kafkaClientKey;
            KubeApiVlan = kubeApiVlan;
            L3out = l3out;
            L3outExternalNetworks = l3outExternalNetworks;
            MaxNodesSvcGraph = maxNodesSvcGraph;
            McastRangeEnd = mcastRangeEnd;
            McastRangeStart = mcastRangeStart;
            MtuHeadRoom = mtuHeadRoom;
            MultusDisable = multusDisable;
            NoPriorityClass = noPriorityClass;
            NodePodIfEnable = nodePodIfEnable;
            NodeSubnet = nodeSubnet;
            NodeSvcSubnet = nodeSvcSubnet;
            OpflexClientSsl = opflexClientSsl;
            OpflexDeviceDeleteTimeout = opflexDeviceDeleteTimeout;
            OpflexLogLevel = opflexLogLevel;
            OpflexMode = opflexMode;
            OpflexServerPort = opflexServerPort;
            OverlayVrfName = overlayVrfName;
            OvsMemoryLimit = ovsMemoryLimit;
            PbrTrackingNonSnat = pbrTrackingNonSnat;
            PodSubnetChunkSize = podSubnetChunkSize;
            RunGbpContainer = runGbpContainer;
            RunOpflexServerContainer = runOpflexServerContainer;
            ServiceMonitorInterval = serviceMonitorInterval;
            ServiceVlan = serviceVlan;
            SnatContractScope = snatContractScope;
            SnatNamespace = snatNamespace;
            SnatPortRangeEnd = snatPortRangeEnd;
            SnatPortRangeStart = snatPortRangeStart;
            SnatPortsPerNode = snatPortsPerNode;
            SriovEnable = sriovEnable;
            SubnetDomainName = subnetDomainName;
            SystemId = systemId;
            Tenant = tenant;
            Token = token;
            UseAciAnywhereCrd = useAciAnywhereCrd;
            UseAciCniPriorityClass = useAciCniPriorityClass;
            UseClusterRole = useClusterRole;
            UseHostNetnsVolume = useHostNetnsVolume;
            UseOpflexServerVolume = useOpflexServerVolume;
            UsePrivilegedContainer = usePrivilegedContainer;
            VmmController = vmmController;
            VmmDomain = vmmDomain;
            VrfName = vrfName;
            VrfTenant = vrfTenant;
        }
    }
}
