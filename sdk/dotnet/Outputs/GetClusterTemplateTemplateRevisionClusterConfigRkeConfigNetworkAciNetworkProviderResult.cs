// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2.Outputs
{

    [OutputType]
    public sealed class GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProviderResult
    {
        public readonly string Aep;
        public readonly ImmutableArray<string> ApicHosts;
        public readonly string? ApicRefreshTickerAdjust;
        public readonly string? ApicRefreshTime;
        public readonly string? ApicSubscriptionDelay;
        public readonly string ApicUserCrt;
        public readonly string ApicUserKey;
        public readonly string ApicUserName;
        public readonly string? Capic;
        public readonly string? ControllerLogLevel;
        public readonly string? DisablePeriodicSnatGlobalInfoSync;
        public readonly string? DisableWaitForNetwork;
        public readonly string? DropLogEnable;
        public readonly string? DurationWaitForNetwork;
        public readonly string? EnableEndpointSlice;
        public readonly string EncapType;
        public readonly string? EpRegistry;
        public readonly string ExternDynamic;
        public readonly string ExternStatic;
        public readonly string? GbpPodSubnet;
        public readonly string? HostAgentLogLevel;
        public readonly string? ImagePullPolicy;
        public readonly string? ImagePullSecret;
        public readonly string? InfraVlan;
        public readonly string? InstallIstio;
        public readonly string? IstioProfile;
        public readonly ImmutableArray<string> KafkaBrokers;
        public readonly string? KafkaClientCrt;
        public readonly string? KafkaClientKey;
        public readonly string KubeApiVlan;
        public readonly string L3out;
        public readonly ImmutableArray<string> L3outExternalNetworks;
        public readonly string? MaxNodesSvcGraph;
        public readonly string McastRangeEnd;
        public readonly string McastRangeStart;
        public readonly string? MtuHeadRoom;
        public readonly string? MultusDisable;
        public readonly string? NoPriorityClass;
        public readonly string? NodePodIfEnable;
        public readonly string NodeSubnet;
        public readonly string NodeSvcSubnet;
        public readonly string? OpflexClientSsl;
        public readonly string? OpflexDeviceDeleteTimeout;
        public readonly string? OpflexLogLevel;
        public readonly string? OpflexMode;
        public readonly string? OpflexServerPort;
        public readonly string? OverlayVrfName;
        public readonly string? OvsMemoryLimit;
        public readonly string? PbrTrackingNonSnat;
        public readonly string? PodSubnetChunkSize;
        public readonly string? RunGbpContainer;
        public readonly string? RunOpflexServerContainer;
        public readonly string? ServiceMonitorInterval;
        public readonly string ServiceVlan;
        public readonly string? SnatContractScope;
        public readonly string? SnatNamespace;
        public readonly string? SnatPortRangeEnd;
        public readonly string? SnatPortRangeStart;
        public readonly string? SnatPortsPerNode;
        public readonly string? SriovEnable;
        public readonly string? SubnetDomainName;
        public readonly string SystemId;
        public readonly string? Tenant;
        public readonly string Token;
        public readonly string? UseAciAnywhereCrd;
        public readonly string? UseAciCniPriorityClass;
        public readonly string? UseClusterRole;
        public readonly string? UseHostNetnsVolume;
        public readonly string? UseOpflexServerVolume;
        public readonly string? UsePrivilegedContainer;
        public readonly string? VmmController;
        public readonly string? VmmDomain;
        public readonly string VrfName;
        public readonly string VrfTenant;

        [OutputConstructor]
        private GetClusterTemplateTemplateRevisionClusterConfigRkeConfigNetworkAciNetworkProviderResult(
            string aep,

            ImmutableArray<string> apicHosts,

            string? apicRefreshTickerAdjust,

            string? apicRefreshTime,

            string? apicSubscriptionDelay,

            string apicUserCrt,

            string apicUserKey,

            string apicUserName,

            string? capic,

            string? controllerLogLevel,

            string? disablePeriodicSnatGlobalInfoSync,

            string? disableWaitForNetwork,

            string? dropLogEnable,

            string? durationWaitForNetwork,

            string? enableEndpointSlice,

            string encapType,

            string? epRegistry,

            string externDynamic,

            string externStatic,

            string? gbpPodSubnet,

            string? hostAgentLogLevel,

            string? imagePullPolicy,

            string? imagePullSecret,

            string? infraVlan,

            string? installIstio,

            string? istioProfile,

            ImmutableArray<string> kafkaBrokers,

            string? kafkaClientCrt,

            string? kafkaClientKey,

            string kubeApiVlan,

            string l3out,

            ImmutableArray<string> l3outExternalNetworks,

            string? maxNodesSvcGraph,

            string mcastRangeEnd,

            string mcastRangeStart,

            string? mtuHeadRoom,

            string? multusDisable,

            string? noPriorityClass,

            string? nodePodIfEnable,

            string nodeSubnet,

            string nodeSvcSubnet,

            string? opflexClientSsl,

            string? opflexDeviceDeleteTimeout,

            string? opflexLogLevel,

            string? opflexMode,

            string? opflexServerPort,

            string? overlayVrfName,

            string? ovsMemoryLimit,

            string? pbrTrackingNonSnat,

            string? podSubnetChunkSize,

            string? runGbpContainer,

            string? runOpflexServerContainer,

            string? serviceMonitorInterval,

            string serviceVlan,

            string? snatContractScope,

            string? snatNamespace,

            string? snatPortRangeEnd,

            string? snatPortRangeStart,

            string? snatPortsPerNode,

            string? sriovEnable,

            string? subnetDomainName,

            string systemId,

            string? tenant,

            string token,

            string? useAciAnywhereCrd,

            string? useAciCniPriorityClass,

            string? useClusterRole,

            string? useHostNetnsVolume,

            string? useOpflexServerVolume,

            string? usePrivilegedContainer,

            string? vmmController,

            string? vmmDomain,

            string vrfName,

            string vrfTenant)
        {
            Aep = aep;
            ApicHosts = apicHosts;
            ApicRefreshTickerAdjust = apicRefreshTickerAdjust;
            ApicRefreshTime = apicRefreshTime;
            ApicSubscriptionDelay = apicSubscriptionDelay;
            ApicUserCrt = apicUserCrt;
            ApicUserKey = apicUserKey;
            ApicUserName = apicUserName;
            Capic = capic;
            ControllerLogLevel = controllerLogLevel;
            DisablePeriodicSnatGlobalInfoSync = disablePeriodicSnatGlobalInfoSync;
            DisableWaitForNetwork = disableWaitForNetwork;
            DropLogEnable = dropLogEnable;
            DurationWaitForNetwork = durationWaitForNetwork;
            EnableEndpointSlice = enableEndpointSlice;
            EncapType = encapType;
            EpRegistry = epRegistry;
            ExternDynamic = externDynamic;
            ExternStatic = externStatic;
            GbpPodSubnet = gbpPodSubnet;
            HostAgentLogLevel = hostAgentLogLevel;
            ImagePullPolicy = imagePullPolicy;
            ImagePullSecret = imagePullSecret;
            InfraVlan = infraVlan;
            InstallIstio = installIstio;
            IstioProfile = istioProfile;
            KafkaBrokers = kafkaBrokers;
            KafkaClientCrt = kafkaClientCrt;
            KafkaClientKey = kafkaClientKey;
            KubeApiVlan = kubeApiVlan;
            L3out = l3out;
            L3outExternalNetworks = l3outExternalNetworks;
            MaxNodesSvcGraph = maxNodesSvcGraph;
            McastRangeEnd = mcastRangeEnd;
            McastRangeStart = mcastRangeStart;
            MtuHeadRoom = mtuHeadRoom;
            MultusDisable = multusDisable;
            NoPriorityClass = noPriorityClass;
            NodePodIfEnable = nodePodIfEnable;
            NodeSubnet = nodeSubnet;
            NodeSvcSubnet = nodeSvcSubnet;
            OpflexClientSsl = opflexClientSsl;
            OpflexDeviceDeleteTimeout = opflexDeviceDeleteTimeout;
            OpflexLogLevel = opflexLogLevel;
            OpflexMode = opflexMode;
            OpflexServerPort = opflexServerPort;
            OverlayVrfName = overlayVrfName;
            OvsMemoryLimit = ovsMemoryLimit;
            PbrTrackingNonSnat = pbrTrackingNonSnat;
            PodSubnetChunkSize = podSubnetChunkSize;
            RunGbpContainer = runGbpContainer;
            RunOpflexServerContainer = runOpflexServerContainer;
            ServiceMonitorInterval = serviceMonitorInterval;
            ServiceVlan = serviceVlan;
            SnatContractScope = snatContractScope;
            SnatNamespace = snatNamespace;
            SnatPortRangeEnd = snatPortRangeEnd;
            SnatPortRangeStart = snatPortRangeStart;
            SnatPortsPerNode = snatPortsPerNode;
            SriovEnable = sriovEnable;
            SubnetDomainName = subnetDomainName;
            SystemId = systemId;
            Tenant = tenant;
            Token = token;
            UseAciAnywhereCrd = useAciAnywhereCrd;
            UseAciCniPriorityClass = useAciCniPriorityClass;
            UseClusterRole = useClusterRole;
            UseHostNetnsVolume = useHostNetnsVolume;
            UseOpflexServerVolume = useOpflexServerVolume;
            UsePrivilegedContainer = usePrivilegedContainer;
            VmmController = vmmController;
            VmmDomain = vmmDomain;
            VrfName = vrfName;
            VrfTenant = vrfTenant;
        }
    }
}
