// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// Provides a Rancher v2 multi_cluster_app resource. This can be used to deploy multi_cluster_app on Rancher v2.
    /// 
    /// This resource can also modify Rancher v2 multi cluster apps in 3 ways:
    /// - `Add/Remove targets`: If `targets` arguments is modified, the multi cluster app targets will be updated.
    /// - `Rollback`: If `revision_id` argument is provided or modified the app will be rolled back accordingly. A new `revision_id` will be generated in Rancher. It will also generate a non-empty pulumi preview that will require manual .tf file intervention. Use carefully.
    /// - `Update`: If any other argument is modified the app will be upgraded.
    /// 
    /// Note: In case of multiple resource modification in a row, `rollback` has preference.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new rancher2 Multi Cluster App
    ///     var foo = new Rancher2.MultiClusterApp("foo", new()
    ///     {
    ///         Answers = new[]
    ///         {
    ///             new Rancher2.Inputs.MultiClusterAppAnswerArgs
    ///             {
    ///                 Values = 
    ///                 {
    ///                     { "ingressHost", "test.xip.io" },
    ///                 },
    ///             },
    ///         },
    ///         CatalogName = "&lt;catalog_name&gt;",
    ///         Roles = new[]
    ///         {
    ///             "project-member",
    ///         },
    ///         Targets = new[]
    ///         {
    ///             new Rancher2.Inputs.MultiClusterAppTargetArgs
    ///             {
    ///                 ProjectId = "&lt;project_id&gt;",
    ///             },
    ///         },
    ///         TemplateName = "&lt;template_name&gt;",
    ///         TemplateVersion = "&lt;template_version&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rancher2 = Pulumi.Rancher2;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new rancher2 Multi Cluster App overriding answers
    ///     var foo = new Rancher2.MultiClusterApp("foo", new()
    ///     {
    ///         Answers = new[]
    ///         {
    ///             new Rancher2.Inputs.MultiClusterAppAnswerArgs
    ///             {
    ///                 Values = 
    ///                 {
    ///                     { "ingressHost", "test.xip.io" },
    ///                 },
    ///             },
    ///             new Rancher2.Inputs.MultiClusterAppAnswerArgs
    ///             {
    ///                 ProjectId = "&lt;project_id2&gt;",
    ///                 Values = 
    ///                 {
    ///                     { "ingressHost", "test2.xip.io" },
    ///                 },
    ///             },
    ///         },
    ///         CatalogName = "&lt;catalog_name&gt;",
    ///         Roles = new[]
    ///         {
    ///             "project-member",
    ///         },
    ///         Targets = new[]
    ///         {
    ///             new Rancher2.Inputs.MultiClusterAppTargetArgs
    ///             {
    ///                 ProjectId = "&lt;project_id1&gt;",
    ///             },
    ///             new Rancher2.Inputs.MultiClusterAppTargetArgs
    ///             {
    ///                 ProjectId = "&lt;project_id2&gt;",
    ///             },
    ///         },
    ///         TemplateName = "&lt;template_name&gt;",
    ///         TemplateVersion = "&lt;template_version&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Multi cluster app can be imported using the multi cluster app ID in the format `&lt;multi_cluster_app_name&gt;`
    /// 
    /// ```sh
    /// $ pulumi import rancher2:index/multiClusterApp:MultiClusterApp foo &amp;lt;MULTI_CLUSTER_APP_ID&amp;gt;
    /// ```
    /// </summary>
    [Rancher2ResourceType("rancher2:index/multiClusterApp:MultiClusterApp")]
    public partial class MultiClusterApp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations for multi cluster app object (map)
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app answers (list)
        /// </summary>
        [Output("answers")]
        public Output<ImmutableArray<Outputs.MultiClusterAppAnswer>> Answers { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app catalog name (string)
        /// </summary>
        [Output("catalogName")]
        public Output<string> CatalogName { get; private set; } = null!;

        /// <summary>
        /// Labels for multi cluster app object (map)
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app answers (list)
        /// </summary>
        [Output("members")]
        public Output<ImmutableArray<Outputs.MultiClusterAppMember>> Members { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app name (string)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app revision history limit. Default `10` (int)
        /// </summary>
        [Output("revisionHistoryLimit")]
        public Output<int?> RevisionHistoryLimit { get; private set; } = null!;

        /// <summary>
        /// Current revision id for the multi cluster app (string)
        /// </summary>
        [Output("revisionId")]
        public Output<string> RevisionId { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app roles (list)
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<string>> Roles { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app target projects (list)
        /// </summary>
        [Output("targets")]
        public Output<ImmutableArray<Outputs.MultiClusterAppTarget>> Targets { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app template name (string)
        /// </summary>
        [Output("templateName")]
        public Output<string> TemplateName { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app template version. Default: `latest` (string)
        /// </summary>
        [Output("templateVersion")]
        public Output<string> TemplateVersion { get; private set; } = null!;

        /// <summary>
        /// (Computed) The multi cluster app template version ID (string)
        /// </summary>
        [Output("templateVersionId")]
        public Output<string> TemplateVersionId { get; private set; } = null!;

        /// <summary>
        /// The multi cluster app upgrade strategy (list MaxItems:1)
        /// </summary>
        [Output("upgradeStrategy")]
        public Output<Outputs.MultiClusterAppUpgradeStrategy> UpgradeStrategy { get; private set; } = null!;

        /// <summary>
        /// Wait until the multi cluster app is active. Default `true` (bool)
        /// </summary>
        [Output("wait")]
        public Output<bool?> Wait { get; private set; } = null!;


        /// <summary>
        /// Create a MultiClusterApp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MultiClusterApp(string name, MultiClusterAppArgs args, CustomResourceOptions? options = null)
            : base("rancher2:index/multiClusterApp:MultiClusterApp", name, args ?? new MultiClusterAppArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MultiClusterApp(string name, Input<string> id, MultiClusterAppState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/multiClusterApp:MultiClusterApp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MultiClusterApp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MultiClusterApp Get(string name, Input<string> id, MultiClusterAppState? state = null, CustomResourceOptions? options = null)
        {
            return new MultiClusterApp(name, id, state, options);
        }
    }

    public sealed class MultiClusterAppArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for multi cluster app object (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("answers")]
        private InputList<Inputs.MultiClusterAppAnswerArgs>? _answers;

        /// <summary>
        /// The multi cluster app answers (list)
        /// </summary>
        public InputList<Inputs.MultiClusterAppAnswerArgs> Answers
        {
            get => _answers ?? (_answers = new InputList<Inputs.MultiClusterAppAnswerArgs>());
            set => _answers = value;
        }

        /// <summary>
        /// The multi cluster app catalog name (string)
        /// </summary>
        [Input("catalogName", required: true)]
        public Input<string> CatalogName { get; set; } = null!;

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for multi cluster app object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("members")]
        private InputList<Inputs.MultiClusterAppMemberArgs>? _members;

        /// <summary>
        /// The multi cluster app answers (list)
        /// </summary>
        public InputList<Inputs.MultiClusterAppMemberArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.MultiClusterAppMemberArgs>());
            set => _members = value;
        }

        /// <summary>
        /// The multi cluster app name (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The multi cluster app revision history limit. Default `10` (int)
        /// </summary>
        [Input("revisionHistoryLimit")]
        public Input<int>? RevisionHistoryLimit { get; set; }

        /// <summary>
        /// Current revision id for the multi cluster app (string)
        /// </summary>
        [Input("revisionId")]
        public Input<string>? RevisionId { get; set; }

        [Input("roles", required: true)]
        private InputList<string>? _roles;

        /// <summary>
        /// The multi cluster app roles (list)
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        [Input("targets", required: true)]
        private InputList<Inputs.MultiClusterAppTargetArgs>? _targets;

        /// <summary>
        /// The multi cluster app target projects (list)
        /// </summary>
        public InputList<Inputs.MultiClusterAppTargetArgs> Targets
        {
            get => _targets ?? (_targets = new InputList<Inputs.MultiClusterAppTargetArgs>());
            set => _targets = value;
        }

        /// <summary>
        /// The multi cluster app template name (string)
        /// </summary>
        [Input("templateName", required: true)]
        public Input<string> TemplateName { get; set; } = null!;

        /// <summary>
        /// The multi cluster app template version. Default: `latest` (string)
        /// </summary>
        [Input("templateVersion")]
        public Input<string>? TemplateVersion { get; set; }

        /// <summary>
        /// The multi cluster app upgrade strategy (list MaxItems:1)
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<Inputs.MultiClusterAppUpgradeStrategyArgs>? UpgradeStrategy { get; set; }

        /// <summary>
        /// Wait until the multi cluster app is active. Default `true` (bool)
        /// </summary>
        [Input("wait")]
        public Input<bool>? Wait { get; set; }

        public MultiClusterAppArgs()
        {
        }
        public static new MultiClusterAppArgs Empty => new MultiClusterAppArgs();
    }

    public sealed class MultiClusterAppState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for multi cluster app object (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        [Input("answers")]
        private InputList<Inputs.MultiClusterAppAnswerGetArgs>? _answers;

        /// <summary>
        /// The multi cluster app answers (list)
        /// </summary>
        public InputList<Inputs.MultiClusterAppAnswerGetArgs> Answers
        {
            get => _answers ?? (_answers = new InputList<Inputs.MultiClusterAppAnswerGetArgs>());
            set => _answers = value;
        }

        /// <summary>
        /// The multi cluster app catalog name (string)
        /// </summary>
        [Input("catalogName")]
        public Input<string>? CatalogName { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for multi cluster app object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        [Input("members")]
        private InputList<Inputs.MultiClusterAppMemberGetArgs>? _members;

        /// <summary>
        /// The multi cluster app answers (list)
        /// </summary>
        public InputList<Inputs.MultiClusterAppMemberGetArgs> Members
        {
            get => _members ?? (_members = new InputList<Inputs.MultiClusterAppMemberGetArgs>());
            set => _members = value;
        }

        /// <summary>
        /// The multi cluster app name (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The multi cluster app revision history limit. Default `10` (int)
        /// </summary>
        [Input("revisionHistoryLimit")]
        public Input<int>? RevisionHistoryLimit { get; set; }

        /// <summary>
        /// Current revision id for the multi cluster app (string)
        /// </summary>
        [Input("revisionId")]
        public Input<string>? RevisionId { get; set; }

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// The multi cluster app roles (list)
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        [Input("targets")]
        private InputList<Inputs.MultiClusterAppTargetGetArgs>? _targets;

        /// <summary>
        /// The multi cluster app target projects (list)
        /// </summary>
        public InputList<Inputs.MultiClusterAppTargetGetArgs> Targets
        {
            get => _targets ?? (_targets = new InputList<Inputs.MultiClusterAppTargetGetArgs>());
            set => _targets = value;
        }

        /// <summary>
        /// The multi cluster app template name (string)
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        /// <summary>
        /// The multi cluster app template version. Default: `latest` (string)
        /// </summary>
        [Input("templateVersion")]
        public Input<string>? TemplateVersion { get; set; }

        /// <summary>
        /// (Computed) The multi cluster app template version ID (string)
        /// </summary>
        [Input("templateVersionId")]
        public Input<string>? TemplateVersionId { get; set; }

        /// <summary>
        /// The multi cluster app upgrade strategy (list MaxItems:1)
        /// </summary>
        [Input("upgradeStrategy")]
        public Input<Inputs.MultiClusterAppUpgradeStrategyGetArgs>? UpgradeStrategy { get; set; }

        /// <summary>
        /// Wait until the multi cluster app is active. Default `true` (bool)
        /// </summary>
        [Input("wait")]
        public Input<bool>? Wait { get; set; }

        public MultiClusterAppState()
        {
        }
        public static new MultiClusterAppState Empty => new MultiClusterAppState();
    }
}
