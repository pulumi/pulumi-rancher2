// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// Provides a Rancher App v2 resource. This can be used to manage helm charts for Rancher v2 environments and retrieve their information. App v2 resource is available at Rancher v2.5.x and above.
    /// 
    /// ## Import
    /// 
    /// V2 apps can be imported using the Rancher cluster ID and App V2 name, which is composed of `&lt;namespace&gt;/&lt;application_name&gt;`.
    /// 
    /// ```sh
    ///  $ pulumi import rancher2:index/appV2:AppV2 foo &amp;lt;CLUSTER_ID&amp;gt;.&amp;lt;APP_V2_NAME&amp;gt;
    /// ```
    /// </summary>
    [Rancher2ResourceType("rancher2:index/appV2:AppV2")]
    public partial class AppV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations for the app v2 (map)
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// The app v2 chart name (string)
        /// </summary>
        [Output("chartName")]
        public Output<string> ChartName { get; private set; } = null!;

        /// <summary>
        /// The app v2 chart version (string)
        /// </summary>
        [Output("chartVersion")]
        public Output<string> ChartVersion { get; private set; } = null!;

        /// <summary>
        /// Cleanup app v2 on failed chart upgrade. Default: `false` (bool)
        /// </summary>
        [Output("cleanupOnFail")]
        public Output<bool?> CleanupOnFail { get; private set; } = null!;

        /// <summary>
        /// The cluster id of the app (string)
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// (Computed) The cluster name of the app (string)
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// Values YAML file including computed values. This field prevents incorrect discrepancies from showing in the terraform
        /// plan output when files change but values stay the same, due to additional computed values included by the provider
        /// itself.
        /// </summary>
        [Output("deploymentValues")]
        public Output<string> DeploymentValues { get; private set; } = null!;

        /// <summary>
        /// Disable app v2 chart hooks. Default: `false` (bool)
        /// </summary>
        [Output("disableHooks")]
        public Output<bool?> DisableHooks { get; private set; } = null!;

        /// <summary>
        /// Disable app V2 Open API Validation. Default: `false` (bool)
        /// </summary>
        [Output("disableOpenApiValidation")]
        public Output<bool?> DisableOpenApiValidation { get; private set; } = null!;

        /// <summary>
        /// Force app V2 chart upgrade. Default: `false` (bool)
        /// </summary>
        [Output("forceUpgrade")]
        public Output<bool?> ForceUpgrade { get; private set; } = null!;

        /// <summary>
        /// Labels for the app v2 (map)
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the app v2 (string)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace of the app v2 (string)
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// Deploy the app v2 within project ID (string)
        /// </summary>
        [Output("projectId")]
        public Output<string?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Repo name (string)
        /// </summary>
        [Output("repoName")]
        public Output<string> RepoName { get; private set; } = null!;

        /// <summary>
        /// (Computed) The system default registry of the app (string)
        /// </summary>
        [Output("systemDefaultRegistry")]
        public Output<string> SystemDefaultRegistry { get; private set; } = null!;

        /// <summary>
        /// The app v2 values yaml. Yaml format is required (string)
        /// </summary>
        [Output("values")]
        public Output<string?> Values { get; private set; } = null!;

        /// <summary>
        /// Wait until app is deployed. Default: `true` (bool)
        /// </summary>
        [Output("wait")]
        public Output<bool?> Wait { get; private set; } = null!;


        /// <summary>
        /// Create a AppV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppV2(string name, AppV2Args args, CustomResourceOptions? options = null)
            : base("rancher2:index/appV2:AppV2", name, args ?? new AppV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private AppV2(string name, Input<string> id, AppV2State? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/appV2:AppV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppV2 Get(string name, Input<string> id, AppV2State? state = null, CustomResourceOptions? options = null)
        {
            return new AppV2(name, id, state, options);
        }
    }

    public sealed class AppV2Args : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for the app v2 (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// The app v2 chart name (string)
        /// </summary>
        [Input("chartName", required: true)]
        public Input<string> ChartName { get; set; } = null!;

        /// <summary>
        /// The app v2 chart version (string)
        /// </summary>
        [Input("chartVersion")]
        public Input<string>? ChartVersion { get; set; }

        /// <summary>
        /// Cleanup app v2 on failed chart upgrade. Default: `false` (bool)
        /// </summary>
        [Input("cleanupOnFail")]
        public Input<bool>? CleanupOnFail { get; set; }

        /// <summary>
        /// The cluster id of the app (string)
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Disable app v2 chart hooks. Default: `false` (bool)
        /// </summary>
        [Input("disableHooks")]
        public Input<bool>? DisableHooks { get; set; }

        /// <summary>
        /// Disable app V2 Open API Validation. Default: `false` (bool)
        /// </summary>
        [Input("disableOpenApiValidation")]
        public Input<bool>? DisableOpenApiValidation { get; set; }

        /// <summary>
        /// Force app V2 chart upgrade. Default: `false` (bool)
        /// </summary>
        [Input("forceUpgrade")]
        public Input<bool>? ForceUpgrade { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for the app v2 (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the app v2 (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace of the app v2 (string)
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// Deploy the app v2 within project ID (string)
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Repo name (string)
        /// </summary>
        [Input("repoName", required: true)]
        public Input<string> RepoName { get; set; } = null!;

        /// <summary>
        /// The app v2 values yaml. Yaml format is required (string)
        /// </summary>
        [Input("values")]
        public Input<string>? Values { get; set; }

        /// <summary>
        /// Wait until app is deployed. Default: `true` (bool)
        /// </summary>
        [Input("wait")]
        public Input<bool>? Wait { get; set; }

        public AppV2Args()
        {
        }
        public static new AppV2Args Empty => new AppV2Args();
    }

    public sealed class AppV2State : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for the app v2 (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// The app v2 chart name (string)
        /// </summary>
        [Input("chartName")]
        public Input<string>? ChartName { get; set; }

        /// <summary>
        /// The app v2 chart version (string)
        /// </summary>
        [Input("chartVersion")]
        public Input<string>? ChartVersion { get; set; }

        /// <summary>
        /// Cleanup app v2 on failed chart upgrade. Default: `false` (bool)
        /// </summary>
        [Input("cleanupOnFail")]
        public Input<bool>? CleanupOnFail { get; set; }

        /// <summary>
        /// The cluster id of the app (string)
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// (Computed) The cluster name of the app (string)
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// Values YAML file including computed values. This field prevents incorrect discrepancies from showing in the terraform
        /// plan output when files change but values stay the same, due to additional computed values included by the provider
        /// itself.
        /// </summary>
        [Input("deploymentValues")]
        public Input<string>? DeploymentValues { get; set; }

        /// <summary>
        /// Disable app v2 chart hooks. Default: `false` (bool)
        /// </summary>
        [Input("disableHooks")]
        public Input<bool>? DisableHooks { get; set; }

        /// <summary>
        /// Disable app V2 Open API Validation. Default: `false` (bool)
        /// </summary>
        [Input("disableOpenApiValidation")]
        public Input<bool>? DisableOpenApiValidation { get; set; }

        /// <summary>
        /// Force app V2 chart upgrade. Default: `false` (bool)
        /// </summary>
        [Input("forceUpgrade")]
        public Input<bool>? ForceUpgrade { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for the app v2 (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the app v2 (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace of the app v2 (string)
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Deploy the app v2 within project ID (string)
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Repo name (string)
        /// </summary>
        [Input("repoName")]
        public Input<string>? RepoName { get; set; }

        /// <summary>
        /// (Computed) The system default registry of the app (string)
        /// </summary>
        [Input("systemDefaultRegistry")]
        public Input<string>? SystemDefaultRegistry { get; set; }

        /// <summary>
        /// The app v2 values yaml. Yaml format is required (string)
        /// </summary>
        [Input("values")]
        public Input<string>? Values { get; set; }

        /// <summary>
        /// Wait until app is deployed. Default: `true` (bool)
        /// </summary>
        [Input("wait")]
        public Input<bool>? Wait { get; set; }

        public AppV2State()
        {
        }
        public static new AppV2State Empty => new AppV2State();
    }
}
