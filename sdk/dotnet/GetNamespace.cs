// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 namespace.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/d/namespace.html.markdown.
        /// </summary>
        [Obsolete("Use GetNamespace.InvokeAsync() instead")]
        public static Task<GetNamespaceResult> GetNamespace(GetNamespaceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceResult>("rancher2:index/getNamespace:getNamespace", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetNamespace
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 namespace.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/d/namespace.html.markdown.
        /// </summary>
        public static Task<GetNamespaceResult> InvokeAsync(GetNamespaceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNamespaceResult>("rancher2:index/getNamespace:getNamespace", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetNamespaceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the namespace (string)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The project id where namespace is assigned (string)
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetNamespaceArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetNamespaceResult
    {
        /// <summary>
        /// (Computed) Annotations for Node Pool object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) Default containers resource limits on namespace (List maxitem:1)
        /// </summary>
        public readonly Outputs.GetNamespaceContainerResourceLimitResult ContainerResourceLimit;
        /// <summary>
        /// (Computed) A namespace description (string)
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Computed) Labels for Node Pool object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;
        public readonly string ProjectId;
        /// <summary>
        /// (Computed) Resource quota for namespace. Rancher v2.1.x or higher (list maxitems:1)
        /// </summary>
        public readonly Outputs.GetNamespaceResourceQuotaResult ResourceQuota;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetNamespaceResult(
            ImmutableDictionary<string, object> annotations,
            Outputs.GetNamespaceContainerResourceLimitResult containerResourceLimit,
            string description,
            ImmutableDictionary<string, object> labels,
            string name,
            string projectId,
            Outputs.GetNamespaceResourceQuotaResult resourceQuota,
            string id)
        {
            Annotations = annotations;
            ContainerResourceLimit = containerResourceLimit;
            Description = description;
            Labels = labels;
            Name = name;
            ProjectId = projectId;
            ResourceQuota = resourceQuota;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetNamespaceContainerResourceLimitResult
    {
        public readonly string? LimitsCpu;
        public readonly string? LimitsMemory;
        public readonly string? RequestsCpu;
        public readonly string? RequestsMemory;

        [OutputConstructor]
        private GetNamespaceContainerResourceLimitResult(
            string? limitsCpu,
            string? limitsMemory,
            string? requestsCpu,
            string? requestsMemory)
        {
            LimitsCpu = limitsCpu;
            LimitsMemory = limitsMemory;
            RequestsCpu = requestsCpu;
            RequestsMemory = requestsMemory;
        }
    }

    [OutputType]
    public sealed class GetNamespaceResourceQuotaLimitResult
    {
        public readonly string? ConfigMaps;
        public readonly string? LimitsCpu;
        public readonly string? LimitsMemory;
        public readonly string? PersistentVolumeClaims;
        public readonly string? Pods;
        public readonly string? ReplicationControllers;
        public readonly string? RequestsCpu;
        public readonly string? RequestsMemory;
        public readonly string? RequestsStorage;
        public readonly string? Secrets;
        public readonly string? Services;
        public readonly string? ServicesLoadBalancers;
        public readonly string? ServicesNodePorts;

        [OutputConstructor]
        private GetNamespaceResourceQuotaLimitResult(
            string? configMaps,
            string? limitsCpu,
            string? limitsMemory,
            string? persistentVolumeClaims,
            string? pods,
            string? replicationControllers,
            string? requestsCpu,
            string? requestsMemory,
            string? requestsStorage,
            string? secrets,
            string? services,
            string? servicesLoadBalancers,
            string? servicesNodePorts)
        {
            ConfigMaps = configMaps;
            LimitsCpu = limitsCpu;
            LimitsMemory = limitsMemory;
            PersistentVolumeClaims = persistentVolumeClaims;
            Pods = pods;
            ReplicationControllers = replicationControllers;
            RequestsCpu = requestsCpu;
            RequestsMemory = requestsMemory;
            RequestsStorage = requestsStorage;
            Secrets = secrets;
            Services = services;
            ServicesLoadBalancers = servicesLoadBalancers;
            ServicesNodePorts = servicesNodePorts;
        }
    }

    [OutputType]
    public sealed class GetNamespaceResourceQuotaResult
    {
        public readonly GetNamespaceResourceQuotaLimitResult Limit;

        [OutputConstructor]
        private GetNamespaceResourceQuotaResult(GetNamespaceResourceQuotaLimitResult limit)
        {
            Limit = limit;
        }
    }
    }
}
