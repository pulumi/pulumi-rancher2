// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetClusterDriver
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Cluster Driver resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Rancher2 = Pulumi.Rancher2;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Rancher2.GetClusterDriver.Invoke(new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterDriverResult> InvokeAsync(GetClusterDriverArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterDriverResult>("rancher2:index/getClusterDriver:getClusterDriver", args ?? new GetClusterDriverArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Cluster Driver resource.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Rancher2 = Pulumi.Rancher2;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Rancher2.GetClusterDriver.Invoke(new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClusterDriverResult> Invoke(GetClusterDriverInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterDriverResult>("rancher2:index/getClusterDriver:getClusterDriver", args ?? new GetClusterDriverInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterDriverArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the cluster driver (string)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The URL to download the machine driver binary for 64-bit Linux (string)
        /// </summary>
        [Input("url")]
        public string? Url { get; set; }

        public GetClusterDriverArgs()
        {
        }
        public static new GetClusterDriverArgs Empty => new GetClusterDriverArgs();
    }

    public sealed class GetClusterDriverInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the cluster driver (string)
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The URL to download the machine driver binary for 64-bit Linux (string)
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public GetClusterDriverInvokeArgs()
        {
        }
        public static new GetClusterDriverInvokeArgs Empty => new GetClusterDriverInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterDriverResult
    {
        /// <summary>
        /// (Computed) Specify if the cluster driver state (bool)
        /// </summary>
        public readonly bool Active;
        /// <summary>
        /// (Computed) Actual url of the cluster driver (string)
        /// </summary>
        public readonly string ActualUrl;
        /// <summary>
        /// (Computed) Annotations of the resource (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) Specify whether the cluster driver is an internal cluster driver or not (bool)
        /// </summary>
        public readonly bool Builtin;
        /// <summary>
        /// (Computed) Verify that the downloaded driver matches the expected checksum (string)
        /// </summary>
        public readonly string Checksum;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Computed) Labels of the resource (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;
        /// <summary>
        /// (Computed) The URL to load for customized Add Clusters screen for this driver (string)
        /// </summary>
        public readonly string UiUrl;
        public readonly string Url;
        /// <summary>
        /// (Computed) Domains to whitelist for the ui (list)
        /// </summary>
        public readonly ImmutableArray<string> WhitelistDomains;

        [OutputConstructor]
        private GetClusterDriverResult(
            bool active,

            string actualUrl,

            ImmutableDictionary<string, object> annotations,

            bool builtin,

            string checksum,

            string id,

            ImmutableDictionary<string, object> labels,

            string name,

            string uiUrl,

            string url,

            ImmutableArray<string> whitelistDomains)
        {
            Active = active;
            ActualUrl = actualUrl;
            Annotations = annotations;
            Builtin = builtin;
            Checksum = checksum;
            Id = id;
            Labels = labels;
            Name = name;
            UiUrl = uiUrl;
            Url = url;
            WhitelistDomains = whitelistDomains;
        }
    }
}
