// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    /// <summary>
    /// Provides a Rancher v2 Project Logging resource. This can be used to create Project Logging for Rancher v2 environments and retrieve their information.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/r/projectLogging.html.markdown.
    /// </summary>
    public partial class ProjectLogging : Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations for Project Logging object (map)
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, object>> Annotations { get; private set; } = null!;

        /// <summary>
        /// The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Output("customTargetConfig")]
        public Output<Outputs.ProjectLoggingCustomTargetConfig?> CustomTargetConfig { get; private set; } = null!;

        /// <summary>
        /// The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Output("elasticsearchConfig")]
        public Output<Outputs.ProjectLoggingElasticsearchConfig?> ElasticsearchConfig { get; private set; } = null!;

        /// <summary>
        /// Enable json log parsing. Default: `false` (bool)
        /// </summary>
        [Output("enableJsonParsing")]
        public Output<bool?> EnableJsonParsing { get; private set; } = null!;

        /// <summary>
        /// The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Output("fluentdConfig")]
        public Output<Outputs.ProjectLoggingFluentdConfig?> FluentdConfig { get; private set; } = null!;

        /// <summary>
        /// The kafka config for Project Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Output("kafkaConfig")]
        public Output<Outputs.ProjectLoggingKafkaConfig?> KafkaConfig { get; private set; } = null!;

        /// <summary>
        /// The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// Labels for Project Logging object (map)
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the Project Logging config (string)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The namespace id from Project logging (string)
        /// </summary>
        [Output("namespaceId")]
        public Output<string?> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// How often buffered logs would be flushed. Default: `3` seconds (int)
        /// </summary>
        [Output("outputFlushInterval")]
        public Output<int?> OutputFlushInterval { get; private set; } = null!;

        /// <summary>
        /// The output tags for Project Logging (map)
        /// </summary>
        [Output("outputTags")]
        public Output<ImmutableDictionary<string, object>> OutputTags { get; private set; } = null!;

        /// <summary>
        /// The project id to configure logging (string)
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The splunk config for Project Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)
        /// </summary>
        [Output("splunkConfig")]
        public Output<Outputs.ProjectLoggingSplunkConfig?> SplunkConfig { get; private set; } = null!;

        /// <summary>
        /// The syslog config for Project Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)
        /// </summary>
        [Output("syslogConfig")]
        public Output<Outputs.ProjectLoggingSyslogConfig?> SyslogConfig { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectLogging resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectLogging(string name, ProjectLoggingArgs args, CustomResourceOptions? options = null)
            : base("rancher2:index/projectLogging:ProjectLogging", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ProjectLogging(string name, Input<string> id, ProjectLoggingState? state = null, CustomResourceOptions? options = null)
            : base("rancher2:index/projectLogging:ProjectLogging", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectLogging resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectLogging Get(string name, Input<string> id, ProjectLoggingState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectLogging(name, id, state, options);
        }
    }

    public sealed class ProjectLoggingArgs : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for Project Logging object (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("customTargetConfig")]
        public Input<Inputs.ProjectLoggingCustomTargetConfigArgs>? CustomTargetConfig { get; set; }

        /// <summary>
        /// The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("elasticsearchConfig")]
        public Input<Inputs.ProjectLoggingElasticsearchConfigArgs>? ElasticsearchConfig { get; set; }

        /// <summary>
        /// Enable json log parsing. Default: `false` (bool)
        /// </summary>
        [Input("enableJsonParsing")]
        public Input<bool>? EnableJsonParsing { get; set; }

        /// <summary>
        /// The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("fluentdConfig")]
        public Input<Inputs.ProjectLoggingFluentdConfigArgs>? FluentdConfig { get; set; }

        /// <summary>
        /// The kafka config for Project Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("kafkaConfig")]
        public Input<Inputs.ProjectLoggingKafkaConfigArgs>? KafkaConfig { get; set; }

        /// <summary>
        /// The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for Project Logging object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Project Logging config (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace id from Project logging (string)
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// How often buffered logs would be flushed. Default: `3` seconds (int)
        /// </summary>
        [Input("outputFlushInterval")]
        public Input<int>? OutputFlushInterval { get; set; }

        [Input("outputTags")]
        private InputMap<object>? _outputTags;

        /// <summary>
        /// The output tags for Project Logging (map)
        /// </summary>
        public InputMap<object> OutputTags
        {
            get => _outputTags ?? (_outputTags = new InputMap<object>());
            set => _outputTags = value;
        }

        /// <summary>
        /// The project id to configure logging (string)
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The splunk config for Project Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("splunkConfig")]
        public Input<Inputs.ProjectLoggingSplunkConfigArgs>? SplunkConfig { get; set; }

        /// <summary>
        /// The syslog config for Project Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)
        /// </summary>
        [Input("syslogConfig")]
        public Input<Inputs.ProjectLoggingSyslogConfigArgs>? SyslogConfig { get; set; }

        public ProjectLoggingArgs()
        {
        }
    }

    public sealed class ProjectLoggingState : Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<object>? _annotations;

        /// <summary>
        /// Annotations for Project Logging object (map)
        /// </summary>
        public InputMap<object> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<object>());
            set => _annotations = value;
        }

        /// <summary>
        /// The custom target config for Cluster Logging. For `kind = custom`. Conflicts with `elasticsearch_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("customTargetConfig")]
        public Input<Inputs.ProjectLoggingCustomTargetConfigGetArgs>? CustomTargetConfig { get; set; }

        /// <summary>
        /// The elasticsearch config for Project Logging. For `kind = elasticsearch`. Conflicts with `custom_target_config`, `fluentd_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("elasticsearchConfig")]
        public Input<Inputs.ProjectLoggingElasticsearchConfigGetArgs>? ElasticsearchConfig { get; set; }

        /// <summary>
        /// Enable json log parsing. Default: `false` (bool)
        /// </summary>
        [Input("enableJsonParsing")]
        public Input<bool>? EnableJsonParsing { get; set; }

        /// <summary>
        /// The fluentd config for Project Logging. For `kind = fluentd`. Conflicts with `custom_target_config`, `elasticsearch_config`, `kafka_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("fluentdConfig")]
        public Input<Inputs.ProjectLoggingFluentdConfigGetArgs>? FluentdConfig { get; set; }

        /// <summary>
        /// The kafka config for Project Logging. For `kind = kafka`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `splunk_config` and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("kafkaConfig")]
        public Input<Inputs.ProjectLoggingKafkaConfigGetArgs>? KafkaConfig { get; set; }

        /// <summary>
        /// The kind of the Project Logging. `elasticsearch`, `fluentd`, `kafka`, `splunk` and `syslog` are supported (string)
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// Labels for Project Logging object (map)
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the Project Logging config (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace id from Project logging (string)
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// How often buffered logs would be flushed. Default: `3` seconds (int)
        /// </summary>
        [Input("outputFlushInterval")]
        public Input<int>? OutputFlushInterval { get; set; }

        [Input("outputTags")]
        private InputMap<object>? _outputTags;

        /// <summary>
        /// The output tags for Project Logging (map)
        /// </summary>
        public InputMap<object> OutputTags
        {
            get => _outputTags ?? (_outputTags = new InputMap<object>());
            set => _outputTags = value;
        }

        /// <summary>
        /// The project id to configure logging (string)
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The splunk config for Project Logging. For `kind = splunk`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `syslog_config` (list maxitems:1)
        /// </summary>
        [Input("splunkConfig")]
        public Input<Inputs.ProjectLoggingSplunkConfigGetArgs>? SplunkConfig { get; set; }

        /// <summary>
        /// The syslog config for Project Logging. For `kind = syslog`. Conflicts with `custom_target_config`, `elasticsearch_config`, `fluentd_config`, `kafka_config`, and `splunk_config` (list maxitems:1)
        /// </summary>
        [Input("syslogConfig")]
        public Input<Inputs.ProjectLoggingSyslogConfigGetArgs>? SyslogConfig { get; set; }

        public ProjectLoggingState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ProjectLoggingCustomTargetConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// Custom target config content (string)
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        public ProjectLoggingCustomTargetConfigArgs()
        {
        }
    }

    public sealed class ProjectLoggingCustomTargetConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// Custom target config content (string)
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        public ProjectLoggingCustomTargetConfigGetArgs()
        {
        }
    }

    public sealed class ProjectLoggingElasticsearchConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// User password for the elascticsearch service (string)
        /// </summary>
        [Input("authPassword")]
        public Input<string>? AuthPassword { get; set; }

        /// <summary>
        /// Username for the elascticsearch service (string)
        /// </summary>
        [Input("authUsername")]
        public Input<string>? AuthUsername { get; set; }

        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// SSL client key password for the splunk service (string)
        /// </summary>
        [Input("clientKeyPass")]
        public Input<string>? ClientKeyPass { get; set; }

        /// <summary>
        /// Date format for the elascticsearch logs. Default: `YYYY-MM-DD` (string)
        /// </summary>
        [Input("dateFormat")]
        public Input<string>? DateFormat { get; set; }

        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Index prefix for the elascticsearch logs. Default: `local` (string)
        /// </summary>
        [Input("indexPrefix")]
        public Input<string>? IndexPrefix { get; set; }

        /// <summary>
        /// SSL verify for the syslog service (bool)
        /// </summary>
        [Input("sslVerify")]
        public Input<bool>? SslVerify { get; set; }

        /// <summary>
        /// SSL version for the elascticsearch service (string)
        /// </summary>
        [Input("sslVersion")]
        public Input<string>? SslVersion { get; set; }

        public ProjectLoggingElasticsearchConfigArgs()
        {
        }
    }

    public sealed class ProjectLoggingElasticsearchConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// User password for the elascticsearch service (string)
        /// </summary>
        [Input("authPassword")]
        public Input<string>? AuthPassword { get; set; }

        /// <summary>
        /// Username for the elascticsearch service (string)
        /// </summary>
        [Input("authUsername")]
        public Input<string>? AuthUsername { get; set; }

        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// SSL client key password for the splunk service (string)
        /// </summary>
        [Input("clientKeyPass")]
        public Input<string>? ClientKeyPass { get; set; }

        /// <summary>
        /// Date format for the elascticsearch logs. Default: `YYYY-MM-DD` (string)
        /// </summary>
        [Input("dateFormat")]
        public Input<string>? DateFormat { get; set; }

        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Index prefix for the elascticsearch logs. Default: `local` (string)
        /// </summary>
        [Input("indexPrefix")]
        public Input<string>? IndexPrefix { get; set; }

        /// <summary>
        /// SSL verify for the syslog service (bool)
        /// </summary>
        [Input("sslVerify")]
        public Input<bool>? SslVerify { get; set; }

        /// <summary>
        /// SSL version for the elascticsearch service (string)
        /// </summary>
        [Input("sslVersion")]
        public Input<string>? SslVersion { get; set; }

        public ProjectLoggingElasticsearchConfigGetArgs()
        {
        }
    }

    public sealed class ProjectLoggingFluentdConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Compress data for the fluentd service (bool)
        /// </summary>
        [Input("compress")]
        public Input<bool>? Compress { get; set; }

        /// <summary>
        /// Enable TLS for the fluentd service (bool)
        /// </summary>
        [Input("enableTls")]
        public Input<bool>? EnableTls { get; set; }

        [Input("fluentServers", required: true)]
        private InputList<ProjectLoggingFluentdConfigFluentServersArgs>? _fluentServers;

        /// <summary>
        /// Servers for the fluentd service (list)
        /// </summary>
        public InputList<ProjectLoggingFluentdConfigFluentServersArgs> FluentServers
        {
            get => _fluentServers ?? (_fluentServers = new InputList<ProjectLoggingFluentdConfigFluentServersArgs>());
            set => _fluentServers = value;
        }

        public ProjectLoggingFluentdConfigArgs()
        {
        }
    }

    public sealed class ProjectLoggingFluentdConfigFluentServersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Hostname of the fluentd service (string)
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// User password of the fluentd service (string)
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Shared key of the fluentd service (string)
        /// </summary>
        [Input("sharedKey")]
        public Input<string>? SharedKey { get; set; }

        /// <summary>
        /// Standby server of the fluentd service (bool)
        /// </summary>
        [Input("standby")]
        public Input<bool>? Standby { get; set; }

        /// <summary>
        /// Username of the fluentd service (string)
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Weight of the fluentd server (int)
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public ProjectLoggingFluentdConfigFluentServersArgs()
        {
        }
    }

    public sealed class ProjectLoggingFluentdConfigFluentServersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Hostname of the fluentd service (string)
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// User password of the fluentd service (string)
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Shared key of the fluentd service (string)
        /// </summary>
        [Input("sharedKey")]
        public Input<string>? SharedKey { get; set; }

        /// <summary>
        /// Standby server of the fluentd service (bool)
        /// </summary>
        [Input("standby")]
        public Input<bool>? Standby { get; set; }

        /// <summary>
        /// Username of the fluentd service (string)
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Weight of the fluentd server (int)
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public ProjectLoggingFluentdConfigFluentServersGetArgs()
        {
        }
    }

    public sealed class ProjectLoggingFluentdConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Compress data for the fluentd service (bool)
        /// </summary>
        [Input("compress")]
        public Input<bool>? Compress { get; set; }

        /// <summary>
        /// Enable TLS for the fluentd service (bool)
        /// </summary>
        [Input("enableTls")]
        public Input<bool>? EnableTls { get; set; }

        [Input("fluentServers", required: true)]
        private InputList<ProjectLoggingFluentdConfigFluentServersGetArgs>? _fluentServers;

        /// <summary>
        /// Servers for the fluentd service (list)
        /// </summary>
        public InputList<ProjectLoggingFluentdConfigFluentServersGetArgs> FluentServers
        {
            get => _fluentServers ?? (_fluentServers = new InputList<ProjectLoggingFluentdConfigFluentServersGetArgs>());
            set => _fluentServers = value;
        }

        public ProjectLoggingFluentdConfigGetArgs()
        {
        }
    }

    public sealed class ProjectLoggingKafkaConfigArgs : Pulumi.ResourceArgs
    {
        [Input("brokerEndpoints")]
        private InputList<string>? _brokerEndpoints;

        /// <summary>
        /// Kafka endpoints for kafka service. Conflicts with `zookeeper_endpoint` (list)
        /// </summary>
        public InputList<string> BrokerEndpoints
        {
            get => _brokerEndpoints ?? (_brokerEndpoints = new InputList<string>());
            set => _brokerEndpoints = value;
        }

        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// Topic to publish on the kafka service (string)
        /// </summary>
        [Input("topic", required: true)]
        public Input<string> Topic { get; set; } = null!;

        /// <summary>
        /// Zookeeper endpoint for kafka service. Conflicts with `broker_endpoints` (string)
        /// </summary>
        [Input("zookeeperEndpoint")]
        public Input<string>? ZookeeperEndpoint { get; set; }

        public ProjectLoggingKafkaConfigArgs()
        {
        }
    }

    public sealed class ProjectLoggingKafkaConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("brokerEndpoints")]
        private InputList<string>? _brokerEndpoints;

        /// <summary>
        /// Kafka endpoints for kafka service. Conflicts with `zookeeper_endpoint` (list)
        /// </summary>
        public InputList<string> BrokerEndpoints
        {
            get => _brokerEndpoints ?? (_brokerEndpoints = new InputList<string>());
            set => _brokerEndpoints = value;
        }

        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// Topic to publish on the kafka service (string)
        /// </summary>
        [Input("topic", required: true)]
        public Input<string> Topic { get; set; } = null!;

        /// <summary>
        /// Zookeeper endpoint for kafka service. Conflicts with `broker_endpoints` (string)
        /// </summary>
        [Input("zookeeperEndpoint")]
        public Input<string>? ZookeeperEndpoint { get; set; }

        public ProjectLoggingKafkaConfigGetArgs()
        {
        }
    }

    public sealed class ProjectLoggingSplunkConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// SSL client key password for the splunk service (string)
        /// </summary>
        [Input("clientKeyPass")]
        public Input<string>? ClientKeyPass { get; set; }

        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Index prefix for the splunk logs (string)
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        /// <summary>
        /// Date format for the splunk logs (string)
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// SSL verify for the syslog service (bool)
        /// </summary>
        [Input("sslVerify")]
        public Input<bool>? SslVerify { get; set; }

        /// <summary>
        /// Token for the syslog service (string)
        /// </summary>
        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        public ProjectLoggingSplunkConfigArgs()
        {
        }
    }

    public sealed class ProjectLoggingSplunkConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// SSL client key password for the splunk service (string)
        /// </summary>
        [Input("clientKeyPass")]
        public Input<string>? ClientKeyPass { get; set; }

        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Index prefix for the splunk logs (string)
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        /// <summary>
        /// Date format for the splunk logs (string)
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// SSL verify for the syslog service (bool)
        /// </summary>
        [Input("sslVerify")]
        public Input<bool>? SslVerify { get; set; }

        /// <summary>
        /// Token for the syslog service (string)
        /// </summary>
        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        public ProjectLoggingSplunkConfigGetArgs()
        {
        }
    }

    public sealed class ProjectLoggingSyslogConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Program for the syslog service (string)
        /// </summary>
        [Input("program")]
        public Input<string>? Program { get; set; }

        /// <summary>
        /// Protocol for the syslog service. `tcp` and `udp` are supported. Default: `udp` (string)
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Date format for the syslog logs. `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info` and `debug` are supported. Default: `notice` (string)
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// SSL verify for the syslog service (bool)
        /// </summary>
        [Input("sslVerify")]
        public Input<bool>? SslVerify { get; set; }

        /// <summary>
        /// Token for the syslog service (string)
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public ProjectLoggingSyslogConfigArgs()
        {
        }
    }

    public sealed class ProjectLoggingSyslogConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        /// <summary>
        /// Program for the syslog service (string)
        /// </summary>
        [Input("program")]
        public Input<string>? Program { get; set; }

        /// <summary>
        /// Protocol for the syslog service. `tcp` and `udp` are supported. Default: `udp` (string)
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Date format for the syslog logs. `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info` and `debug` are supported. Default: `notice` (string)
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        /// <summary>
        /// SSL verify for the syslog service (bool)
        /// </summary>
        [Input("sslVerify")]
        public Input<bool>? SslVerify { get; set; }

        /// <summary>
        /// Token for the syslog service (string)
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public ProjectLoggingSyslogConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ProjectLoggingCustomTargetConfig
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        public readonly string? ClientCert;
        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        public readonly string? ClientKey;
        /// <summary>
        /// Custom target config content (string)
        /// </summary>
        public readonly string Content;

        [OutputConstructor]
        private ProjectLoggingCustomTargetConfig(
            string? certificate,
            string? clientCert,
            string? clientKey,
            string content)
        {
            Certificate = certificate;
            ClientCert = clientCert;
            ClientKey = clientKey;
            Content = content;
        }
    }

    [OutputType]
    public sealed class ProjectLoggingElasticsearchConfig
    {
        /// <summary>
        /// User password for the elascticsearch service (string)
        /// </summary>
        public readonly string? AuthPassword;
        /// <summary>
        /// Username for the elascticsearch service (string)
        /// </summary>
        public readonly string? AuthUsername;
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        public readonly string? ClientCert;
        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        public readonly string? ClientKey;
        /// <summary>
        /// SSL client key password for the splunk service (string)
        /// </summary>
        public readonly string? ClientKeyPass;
        /// <summary>
        /// Date format for the elascticsearch logs. Default: `YYYY-MM-DD` (string)
        /// </summary>
        public readonly string? DateFormat;
        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Index prefix for the elascticsearch logs. Default: `local` (string)
        /// </summary>
        public readonly string? IndexPrefix;
        /// <summary>
        /// SSL verify for the syslog service (bool)
        /// </summary>
        public readonly bool SslVerify;
        /// <summary>
        /// SSL version for the elascticsearch service (string)
        /// </summary>
        public readonly string? SslVersion;

        [OutputConstructor]
        private ProjectLoggingElasticsearchConfig(
            string? authPassword,
            string? authUsername,
            string? certificate,
            string? clientCert,
            string? clientKey,
            string? clientKeyPass,
            string? dateFormat,
            string endpoint,
            string? indexPrefix,
            bool sslVerify,
            string? sslVersion)
        {
            AuthPassword = authPassword;
            AuthUsername = authUsername;
            Certificate = certificate;
            ClientCert = clientCert;
            ClientKey = clientKey;
            ClientKeyPass = clientKeyPass;
            DateFormat = dateFormat;
            Endpoint = endpoint;
            IndexPrefix = indexPrefix;
            SslVerify = sslVerify;
            SslVersion = sslVersion;
        }
    }

    [OutputType]
    public sealed class ProjectLoggingFluentdConfig
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// Compress data for the fluentd service (bool)
        /// </summary>
        public readonly bool? Compress;
        /// <summary>
        /// Enable TLS for the fluentd service (bool)
        /// </summary>
        public readonly bool? EnableTls;
        /// <summary>
        /// Servers for the fluentd service (list)
        /// </summary>
        public readonly ImmutableArray<ProjectLoggingFluentdConfigFluentServers> FluentServers;

        [OutputConstructor]
        private ProjectLoggingFluentdConfig(
            string? certificate,
            bool? compress,
            bool? enableTls,
            ImmutableArray<ProjectLoggingFluentdConfigFluentServers> fluentServers)
        {
            Certificate = certificate;
            Compress = compress;
            EnableTls = enableTls;
            FluentServers = fluentServers;
        }
    }

    [OutputType]
    public sealed class ProjectLoggingFluentdConfigFluentServers
    {
        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Hostname of the fluentd service (string)
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// User password of the fluentd service (string)
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// Shared key of the fluentd service (string)
        /// </summary>
        public readonly string? SharedKey;
        /// <summary>
        /// Standby server of the fluentd service (bool)
        /// </summary>
        public readonly bool? Standby;
        /// <summary>
        /// Username of the fluentd service (string)
        /// </summary>
        public readonly string? Username;
        /// <summary>
        /// Weight of the fluentd server (int)
        /// </summary>
        public readonly int? Weight;

        [OutputConstructor]
        private ProjectLoggingFluentdConfigFluentServers(
            string endpoint,
            string? hostname,
            string? password,
            string? sharedKey,
            bool? standby,
            string? username,
            int? weight)
        {
            Endpoint = endpoint;
            Hostname = hostname;
            Password = password;
            SharedKey = sharedKey;
            Standby = standby;
            Username = username;
            Weight = weight;
        }
    }

    [OutputType]
    public sealed class ProjectLoggingKafkaConfig
    {
        /// <summary>
        /// Kafka endpoints for kafka service. Conflicts with `zookeeper_endpoint` (list)
        /// </summary>
        public readonly ImmutableArray<string> BrokerEndpoints;
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        public readonly string? ClientCert;
        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        public readonly string? ClientKey;
        /// <summary>
        /// Topic to publish on the kafka service (string)
        /// </summary>
        public readonly string Topic;
        /// <summary>
        /// Zookeeper endpoint for kafka service. Conflicts with `broker_endpoints` (string)
        /// </summary>
        public readonly string? ZookeeperEndpoint;

        [OutputConstructor]
        private ProjectLoggingKafkaConfig(
            ImmutableArray<string> brokerEndpoints,
            string? certificate,
            string? clientCert,
            string? clientKey,
            string topic,
            string? zookeeperEndpoint)
        {
            BrokerEndpoints = brokerEndpoints;
            Certificate = certificate;
            ClientCert = clientCert;
            ClientKey = clientKey;
            Topic = topic;
            ZookeeperEndpoint = zookeeperEndpoint;
        }
    }

    [OutputType]
    public sealed class ProjectLoggingSplunkConfig
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        public readonly string? ClientCert;
        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        public readonly string? ClientKey;
        /// <summary>
        /// SSL client key password for the splunk service (string)
        /// </summary>
        public readonly string? ClientKeyPass;
        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Index prefix for the splunk logs (string)
        /// </summary>
        public readonly string? Index;
        /// <summary>
        /// Date format for the splunk logs (string)
        /// </summary>
        public readonly string? Source;
        /// <summary>
        /// SSL verify for the syslog service (bool)
        /// </summary>
        public readonly bool SslVerify;
        /// <summary>
        /// Token for the syslog service (string)
        /// </summary>
        public readonly string Token;

        [OutputConstructor]
        private ProjectLoggingSplunkConfig(
            string? certificate,
            string? clientCert,
            string? clientKey,
            string? clientKeyPass,
            string endpoint,
            string? index,
            string? source,
            bool sslVerify,
            string token)
        {
            Certificate = certificate;
            ClientCert = clientCert;
            ClientKey = clientKey;
            ClientKeyPass = clientKeyPass;
            Endpoint = endpoint;
            Index = index;
            Source = source;
            SslVerify = sslVerify;
            Token = token;
        }
    }

    [OutputType]
    public sealed class ProjectLoggingSyslogConfig
    {
        /// <summary>
        /// SSL certificate for the syslog service (string)
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// SSL client certificate for the syslog service (string)
        /// </summary>
        public readonly string? ClientCert;
        /// <summary>
        /// SSL client key for the syslog service (string)
        /// </summary>
        public readonly string? ClientKey;
        /// <summary>
        /// Endpoint of the syslog service (string)
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Program for the syslog service (string)
        /// </summary>
        public readonly string? Program;
        /// <summary>
        /// Protocol for the syslog service. `tcp` and `udp` are supported. Default: `udp` (string)
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// Date format for the syslog logs. `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info` and `debug` are supported. Default: `notice` (string)
        /// </summary>
        public readonly string? Severity;
        /// <summary>
        /// SSL verify for the syslog service (bool)
        /// </summary>
        public readonly bool SslVerify;
        /// <summary>
        /// Token for the syslog service (string)
        /// </summary>
        public readonly string? Token;

        [OutputConstructor]
        private ProjectLoggingSyslogConfig(
            string? certificate,
            string? clientCert,
            string? clientKey,
            string endpoint,
            string? program,
            string? protocol,
            string? severity,
            bool sslVerify,
            string? token)
        {
            Certificate = certificate;
            ClientCert = clientCert;
            ClientKey = clientKey;
            Endpoint = endpoint;
            Program = program;
            Protocol = protocol;
            Severity = severity;
            SslVerify = sslVerify;
            Token = token;
        }
    }
    }
}
