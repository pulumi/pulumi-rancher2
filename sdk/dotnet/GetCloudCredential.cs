// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetCloudCredential
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Cloud Credential.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Rancher2 = Pulumi.Rancher2;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Rancher2.GetCloudCredential.InvokeAsync(new Rancher2.GetCloudCredentialArgs
        ///         {
        ///             Name = "test",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCloudCredentialResult> InvokeAsync(GetCloudCredentialArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCloudCredentialResult>("rancher2:index/getCloudCredential:getCloudCredential", args ?? new GetCloudCredentialArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Cloud Credential.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Rancher2 = Pulumi.Rancher2;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Rancher2.GetCloudCredential.InvokeAsync(new Rancher2.GetCloudCredentialArgs
        ///         {
        ///             Name = "test",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCloudCredentialResult> Invoke(GetCloudCredentialInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCloudCredentialResult>("rancher2:index/getCloudCredential:getCloudCredential", args ?? new GetCloudCredentialInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCloudCredentialArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Cloud Credential name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetCloudCredentialArgs()
        {
        }
    }

    public sealed class GetCloudCredentialInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Cloud Credential name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetCloudCredentialInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCloudCredentialResult
    {
        /// <summary>
        /// (Computed) Annotations for the Cloud Credential (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Computed) Labels for the Cloud Credential (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;

        [OutputConstructor]
        private GetCloudCredentialResult(
            ImmutableDictionary<string, object> annotations,

            string id,

            ImmutableDictionary<string, object> labels,

            string name)
        {
            Annotations = annotations;
            Id = id;
            Labels = labels;
            Name = name;
        }
    }
}
