// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetNodeTemplate
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Node Template resource.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Rancher2 = Pulumi.Rancher2;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Rancher2.GetNodeTemplate.Invoke(new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodeTemplateResult> InvokeAsync(GetNodeTemplateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeTemplateResult>("rancher2:index/getNodeTemplate:getNodeTemplate", args ?? new GetNodeTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Node Template resource.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Rancher2 = Pulumi.Rancher2;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Rancher2.GetNodeTemplate.Invoke(new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodeTemplateResult> Invoke(GetNodeTemplateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeTemplateResult>("rancher2:index/getNodeTemplate:getNodeTemplate", args ?? new GetNodeTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Node Template (string)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (Computed) Engine storage driver for the node template (bool)
        /// </summary>
        [Input("useInternalIpAddress")]
        public bool? UseInternalIpAddress { get; set; }

        public GetNodeTemplateArgs()
        {
        }
        public static new GetNodeTemplateArgs Empty => new GetNodeTemplateArgs();
    }

    public sealed class GetNodeTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Node Template (string)
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// (Computed) Engine storage driver for the node template (bool)
        /// </summary>
        [Input("useInternalIpAddress")]
        public Input<bool>? UseInternalIpAddress { get; set; }

        public GetNodeTemplateInvokeArgs()
        {
        }
        public static new GetNodeTemplateInvokeArgs Empty => new GetNodeTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodeTemplateResult
    {
        /// <summary>
        /// (Computed) Annotations for Node Template object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)
        /// </summary>
        public readonly string CloudCredentialId;
        /// <summary>
        /// (Computed) Description for the Node Template (string)
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Computed) The driver of the node template (string)
        /// </summary>
        public readonly string Driver;
        /// <summary>
        /// (Computed) Engine environment for the node template (string)
        /// </summary>
        public readonly ImmutableDictionary<string, object> EngineEnv;
        /// <summary>
        /// (Computed) Insecure registry for the node template (list)
        /// </summary>
        public readonly ImmutableArray<string> EngineInsecureRegistries;
        /// <summary>
        /// (Computed) Docker engine install URL for the node template (string)
        /// </summary>
        public readonly string EngineInstallUrl;
        /// <summary>
        /// (Computed) Engine label for the node template (string)
        /// </summary>
        public readonly ImmutableDictionary<string, object> EngineLabel;
        /// <summary>
        /// (Computed) Engine options for the node template (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> EngineOpt;
        /// <summary>
        /// (Computed) Engine registry mirror for the node template (list)
        /// </summary>
        public readonly ImmutableArray<string> EngineRegistryMirrors;
        /// <summary>
        /// (Computed) Engine storage driver for the node template (string)
        /// </summary>
        public readonly string EngineStorageDriver;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Computed) Labels for Node Template object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;
        /// <summary>
        /// (Computed) Node taints (List)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodeTemplateNodeTaintResult> NodeTaints;
        /// <summary>
        /// (Computed) Engine storage driver for the node template (bool)
        /// </summary>
        public readonly bool? UseInternalIpAddress;

        [OutputConstructor]
        private GetNodeTemplateResult(
            ImmutableDictionary<string, object> annotations,

            string cloudCredentialId,

            string description,

            string driver,

            ImmutableDictionary<string, object> engineEnv,

            ImmutableArray<string> engineInsecureRegistries,

            string engineInstallUrl,

            ImmutableDictionary<string, object> engineLabel,

            ImmutableDictionary<string, object> engineOpt,

            ImmutableArray<string> engineRegistryMirrors,

            string engineStorageDriver,

            string id,

            ImmutableDictionary<string, object> labels,

            string name,

            ImmutableArray<Outputs.GetNodeTemplateNodeTaintResult> nodeTaints,

            bool? useInternalIpAddress)
        {
            Annotations = annotations;
            CloudCredentialId = cloudCredentialId;
            Description = description;
            Driver = driver;
            EngineEnv = engineEnv;
            EngineInsecureRegistries = engineInsecureRegistries;
            EngineInstallUrl = engineInstallUrl;
            EngineLabel = engineLabel;
            EngineOpt = engineOpt;
            EngineRegistryMirrors = engineRegistryMirrors;
            EngineStorageDriver = engineStorageDriver;
            Id = id;
            Labels = labels;
            Name = name;
            NodeTaints = nodeTaints;
            UseInternalIpAddress = useInternalIpAddress;
        }
    }
}
