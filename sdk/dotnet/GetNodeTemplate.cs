// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Node Template resource.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/d/nodeTemplate.html.markdown.
        /// </summary>
        [Obsolete("Use GetNodeTemplate.InvokeAsync() instead")]
        public static Task<GetNodeTemplateResult> GetNodeTemplate(GetNodeTemplateArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNodeTemplateResult>("rancher2:index/getNodeTemplate:getNodeTemplate", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetNodeTemplate
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Node Template resource.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rancher2/blob/master/website/docs/d/nodeTemplate.html.markdown.
        /// </summary>
        public static Task<GetNodeTemplateResult> InvokeAsync(GetNodeTemplateArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNodeTemplateResult>("rancher2:index/getNodeTemplate:getNodeTemplate", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetNodeTemplateArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Node Template (string)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// (Computed) Engine storage driver for the node template (bool)
        /// </summary>
        [Input("useInternalIpAddress")]
        public bool? UseInternalIpAddress { get; set; }

        public GetNodeTemplateArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetNodeTemplateResult
    {
        /// <summary>
        /// (Computed) Annotations for Node Template object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        /// <summary>
        /// (Computed) Cloud credential ID for the Node Template. Required from Rancher v2.2.x (string)
        /// </summary>
        public readonly string CloudCredentialId;
        /// <summary>
        /// (Computed) Description for the Node Template (string)
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Computed) The driver of the node template (string)
        /// </summary>
        public readonly string Driver;
        /// <summary>
        /// (Computed) Engine environment for the node template (string)
        /// </summary>
        public readonly ImmutableDictionary<string, object> EngineEnv;
        /// <summary>
        /// (Computed) Insecure registry for the node template (list)
        /// </summary>
        public readonly ImmutableArray<string> EngineInsecureRegistries;
        /// <summary>
        /// (Computed) Docker engine install URL for the node template (string)
        /// </summary>
        public readonly string EngineInstallUrl;
        /// <summary>
        /// (Computed) Engine label for the node template (string)
        /// </summary>
        public readonly ImmutableDictionary<string, object> EngineLabel;
        /// <summary>
        /// (Computed) Engine options for the node template (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> EngineOpt;
        /// <summary>
        /// (Computed) Engine registry mirror for the node template (list)
        /// </summary>
        public readonly ImmutableArray<string> EngineRegistryMirrors;
        /// <summary>
        /// (Computed) Engine storage driver for the node template (string)
        /// </summary>
        public readonly string EngineStorageDriver;
        /// <summary>
        /// (Computed) Labels for Node Template object (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;
        /// <summary>
        /// (Computed) Engine storage driver for the node template (bool)
        /// </summary>
        public readonly bool? UseInternalIpAddress;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetNodeTemplateResult(
            ImmutableDictionary<string, object> annotations,
            string cloudCredentialId,
            string description,
            string driver,
            ImmutableDictionary<string, object> engineEnv,
            ImmutableArray<string> engineInsecureRegistries,
            string engineInstallUrl,
            ImmutableDictionary<string, object> engineLabel,
            ImmutableDictionary<string, object> engineOpt,
            ImmutableArray<string> engineRegistryMirrors,
            string engineStorageDriver,
            ImmutableDictionary<string, object> labels,
            string name,
            bool? useInternalIpAddress,
            string id)
        {
            Annotations = annotations;
            CloudCredentialId = cloudCredentialId;
            Description = description;
            Driver = driver;
            EngineEnv = engineEnv;
            EngineInsecureRegistries = engineInsecureRegistries;
            EngineInstallUrl = engineInstallUrl;
            EngineLabel = engineLabel;
            EngineOpt = engineOpt;
            EngineRegistryMirrors = engineRegistryMirrors;
            EngineStorageDriver = engineStorageDriver;
            Labels = labels;
            Name = name;
            UseInternalIpAddress = useInternalIpAddress;
            Id = id;
        }
    }
}
