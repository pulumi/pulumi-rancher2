// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rancher2
{
    public static class GetClusterScan
    {
        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Cluster CIS Scan resource.
        /// </summary>
        public static Task<GetClusterScanResult> InvokeAsync(GetClusterScanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterScanResult>("rancher2:index/getClusterScan:getClusterScan", args ?? new GetClusterScanArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a Rancher v2 Cluster CIS Scan resource.
        /// </summary>
        public static Output<GetClusterScanResult> Invoke(GetClusterScanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterScanResult>("rancher2:index/getClusterScan:getClusterScan", args ?? new GetClusterScanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterScanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster ID for CIS Scan (string)
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// Name of the cluster Scan (string)
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetClusterScanArgs()
        {
        }
        public static new GetClusterScanArgs Empty => new GetClusterScanArgs();
    }

    public sealed class GetClusterScanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster ID for CIS Scan (string)
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Name of the cluster Scan (string)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetClusterScanInvokeArgs()
        {
        }
        public static new GetClusterScanInvokeArgs Empty => new GetClusterScanInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterScanResult
    {
        /// <summary>
        /// (Computed) Annotations of the resource (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Annotations;
        public readonly string ClusterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Computed) Labels of the resource (map)
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        public readonly string Name;
        /// <summary>
        /// (Computed) Cluster Scan run type (string)
        /// </summary>
        public readonly string RunType;
        /// <summary>
        /// (Computed) Cluster Scan config (bool)
        /// </summary>
        public readonly Outputs.GetClusterScanScanConfigResult ScanConfig;
        /// <summary>
        /// (Computed) Cluster Scan type (string)
        /// </summary>
        public readonly string ScanType;
        /// <summary>
        /// (Computed) Cluster Scan status (string)
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetClusterScanResult(
            ImmutableDictionary<string, object> annotations,

            string clusterId,

            string id,

            ImmutableDictionary<string, object> labels,

            string name,

            string runType,

            Outputs.GetClusterScanScanConfigResult scanConfig,

            string scanType,

            string status)
        {
            Annotations = annotations;
            ClusterId = clusterId;
            Id = id;
            Labels = labels;
            Name = name;
            RunType = runType;
            ScanConfig = scanConfig;
            ScanType = scanType;
            Status = status;
        }
    }
}
